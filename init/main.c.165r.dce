
;; Function set_reset_devices (set_reset_devices)[0:2044] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


set_reset_devices

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} r135={1d,1u} r136={1d,2u} 
;;    total ref usage 26{13d,13u,0e} in 5{5 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 25[9,1] 26[10,1] 135[11,1] 136[12,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d2(1){ }d3(2){ }d4(3){ }d5(11){ }d6(12){ }d7(13){ }d8(14){ }d9(25){ }d10(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; rd  kill	(11)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d5(bb 0 insn -1) }u1(13){ d7(bb 0 insn -1) }u2(25){ d9(bb 0 insn -1) }u3(26){ d10(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 135 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 135 136
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; rd  gen 	(3)
0, 11, 12
;; rd  kill	(4)
0, 1, 11, 12
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(12)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
;;  UD chains for artificial uses
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 25 { d9(bb 0 insn -1) }
;;   reg 26 { d10(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 8
;;      reg 135 { d11(bb 2 insn 6) }
;;      reg 136 { d12(bb 2 insn 7) }
;;   UD chains for insn luid 3 uid 13
;;      reg 136 { d12(bb 2 insn 7) }
;;   UD chains for insn luid 4 uid 19
;;      reg 0 { d0(bb 2 insn 13) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u8(0){ d0(bb 2 insn 13) }u9(11){ d5(bb 0 insn -1) }u10(13){ d7(bb 0 insn -1) }u11(14){ d8(bb 0 insn -1) }u12(25){ d9(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(12)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(12)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 13) }
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 14 { d8(bb 0 insn -1) }
;;   reg 25 { d9(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 19 to worklist
  Adding insn 8 to worklist
Finished finding needed instructions:
  Adding insn 13 to worklist
Processing use of (reg 136) in insn 13:
  Adding insn 7 to worklist
Processing use of (reg 135) in insn 8:
  Adding insn 6 to worklist
Processing use of (reg 136) in insn 8:
Processing use of (reg 0 r0) in insn 19:


set_reset_devices

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} r135={1d,1u} r136={1d,2u} 
;;    total ref usage 26{13d,13u,0e} in 5{5 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 25[9,1] 26[10,1] 135[11,1] 136[12,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 135 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 135 136
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; rd  gen 	(3)
0, 11, 12
;; rd  kill	(4)
0, 1, 11, 12

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 init/main.c:146 (set (reg/f:SI 135)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 init/main.c:146 (set (reg:SI 136)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 8 7 13 2 init/main.c:146 (set (mem/c/i:SI (reg/f:SI 135) [0 reset_devices+0 S4 A32])
        (reg:SI 136)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 135)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn 13 8 19 2 init/main.c:148 (set (reg/i:SI 0 r0)
        (reg:SI 136)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn 19 13 0 2 init/main.c:148 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(12)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function debug_kernel (debug_kernel)[0:2046] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


debug_kernel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} r133={1d,1u} r135={1d,1u} r136={1d,1u} 
;;    total ref usage 27{14d,13u,0e} in 6{6 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 25[9,1] 26[10,1] 133[11,1] 135[12,1] 136[13,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d2(1){ }d3(2){ }d4(3){ }d5(11){ }d6(12){ }d7(13){ }d8(14){ }d9(25){ }d10(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; rd  kill	(11)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d5(bb 0 insn -1) }u1(13){ d7(bb 0 insn -1) }u2(25){ d9(bb 0 insn -1) }u3(26){ d10(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 133 135 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 133 135 136
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; rd  gen 	(4)
0, 11, 12, 13
;; rd  kill	(5)
0, 1, 11, 12, 13
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(13)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
;;  UD chains for artificial uses
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 25 { d9(bb 0 insn -1) }
;;   reg 26 { d10(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 8
;;      reg 135 { d12(bb 2 insn 6) }
;;      reg 136 { d13(bb 2 insn 7) }
;;   UD chains for insn luid 4 uid 13
;;      reg 133 { d11(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 19
;;      reg 0 { d0(bb 2 insn 13) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u8(0){ d0(bb 2 insn 13) }u9(11){ d5(bb 0 insn -1) }u10(13){ d7(bb 0 insn -1) }u11(14){ d8(bb 0 insn -1) }u12(25){ d9(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(13)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(13)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 13) }
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 14 { d8(bb 0 insn -1) }
;;   reg 25 { d9(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 19 to worklist
  Adding insn 8 to worklist
Finished finding needed instructions:
  Adding insn 13 to worklist
Processing use of (reg 133 [ <result> ]) in insn 13:
  Adding insn 9 to worklist
Processing use of (reg 135) in insn 8:
  Adding insn 6 to worklist
Processing use of (reg 136) in insn 8:
  Adding insn 7 to worklist
Processing use of (reg 0 r0) in insn 19:


debug_kernel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} r133={1d,1u} r135={1d,1u} r136={1d,1u} 
;;    total ref usage 27{14d,13u,0e} in 6{6 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 25[9,1] 26[10,1] 133[11,1] 135[12,1] 136[13,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 133 135 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 133 135 136
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; rd  gen 	(4)
0, 11, 12, 13
;; rd  kill	(5)
0, 1, 11, 12, 13

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 init/main.c:197 (set (reg/f:SI 135)
        (symbol_ref:SI ("console_printk") [flags 0xc0] <var_decl 0x10a4ff00 console_printk>)) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 init/main.c:197 (set (reg:SI 136)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn 8 7 9 2 init/main.c:197 (set (mem/s/j:SI (reg/f:SI 135) [0 console_printk+0 S4 A32])
        (reg:SI 136)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_DEAD (reg/f:SI 135)
            (expr_list:REG_EQUAL (const_int 10 [0xa])
                (nil)))))

(insn 9 8 13 2 init/main.c:199 (set (reg:SI 133 [ <result> ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 13 9 19 2 init/main.c:199 (set (reg/i:SI 0 r0)
        (reg:SI 133 [ <result> ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ <result> ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 19 13 0 2 init/main.c:199 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(13)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function quiet_kernel (quiet_kernel)[0:2047] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


quiet_kernel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} r133={1d,1u} r135={1d,1u} r136={1d,1u} 
;;    total ref usage 27{14d,13u,0e} in 6{6 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 25[9,1] 26[10,1] 133[11,1] 135[12,1] 136[13,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d2(1){ }d3(2){ }d4(3){ }d5(11){ }d6(12){ }d7(13){ }d8(14){ }d9(25){ }d10(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; rd  kill	(11)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d5(bb 0 insn -1) }u1(13){ d7(bb 0 insn -1) }u2(25){ d9(bb 0 insn -1) }u3(26){ d10(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 133 135 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 133 135 136
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; rd  gen 	(4)
0, 11, 12, 13
;; rd  kill	(5)
0, 1, 11, 12, 13
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(13)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
;;  UD chains for artificial uses
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 25 { d9(bb 0 insn -1) }
;;   reg 26 { d10(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 8
;;      reg 135 { d12(bb 2 insn 6) }
;;      reg 136 { d13(bb 2 insn 7) }
;;   UD chains for insn luid 4 uid 13
;;      reg 133 { d11(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 19
;;      reg 0 { d0(bb 2 insn 13) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u8(0){ d0(bb 2 insn 13) }u9(11){ d5(bb 0 insn -1) }u10(13){ d7(bb 0 insn -1) }u11(14){ d8(bb 0 insn -1) }u12(25){ d9(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(13)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(13)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 13) }
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 14 { d8(bb 0 insn -1) }
;;   reg 25 { d9(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 19 to worklist
  Adding insn 8 to worklist
Finished finding needed instructions:
  Adding insn 13 to worklist
Processing use of (reg 133 [ <result> ]) in insn 13:
  Adding insn 9 to worklist
Processing use of (reg 135) in insn 8:
  Adding insn 6 to worklist
Processing use of (reg 136) in insn 8:
  Adding insn 7 to worklist
Processing use of (reg 0 r0) in insn 19:


quiet_kernel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} r133={1d,1u} r135={1d,1u} r136={1d,1u} 
;;    total ref usage 27{14d,13u,0e} in 6{6 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 25[9,1] 26[10,1] 133[11,1] 135[12,1] 136[13,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 133 135 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 133 135 136
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10
;; rd  gen 	(4)
0, 11, 12, 13
;; rd  kill	(5)
0, 1, 11, 12, 13

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 init/main.c:203 (set (reg/f:SI 135)
        (symbol_ref:SI ("console_printk") [flags 0xc0] <var_decl 0x10a4ff00 console_printk>)) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 init/main.c:203 (set (reg:SI 136)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(insn 8 7 9 2 init/main.c:203 (set (mem/s/j:SI (reg/f:SI 135) [0 console_printk+0 S4 A32])
        (reg:SI 136)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_DEAD (reg/f:SI 135)
            (expr_list:REG_EQUAL (const_int 4 [0x4])
                (nil)))))

(insn 9 8 13 2 init/main.c:205 (set (reg:SI 133 [ <result> ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 13 9 19 2 init/main.c:205 (set (reg/i:SI 0 r0)
        (reg:SI 133 [ <result> ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ <result> ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 19 13 0 2 init/main.c:205 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(13)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function init_setup (init_setup)[0:2050] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


init_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d} r3={1d} r11={1d,4u} r12={1d} r13={1d,4u} r14={1d,1u} r24={1d,1u} r25={1d,4u} r26={1d,3u} r164={1d,1u} r165={2d,3u,1d} r167={1d,1u} r168={1d,1u} r172={1d,1u} 
;;    total ref usage 46{18d,27u,1e} in 11{11 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8, 9
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 24[9,1] 25[10,1] 26[11,1] 164[12,1] 165[13,2] 167[15,1] 168[16,1] 172[17,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d2(1){ }d3(2){ }d4(3){ }d5(11){ }d6(12){ }d7(13){ }d8(14){ }d10(25){ }d11(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11
;; rd  kill	(11)
0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11

( 0 )->[2]->( 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d5(bb 0 insn -1) }u1(13){ d7(bb 0 insn -1) }u2(25){ d10(bb 0 insn -1) }u3(26){ d11(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 164 165 167 168 172
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 164 165 167 168 172
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11
;; rd  gen 	(5)
12, 14, 15, 16, 17
;; rd  kill	(6)
12, 13, 14, 15, 16, 17
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; rd  out 	(15)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17
;;  UD chains for artificial uses
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 25 { d10(bb 0 insn -1) }
;;   reg 26 { d11(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 33
;;      reg 0 { d1(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 38
;;      reg 167 { d15(bb 2 insn 33) }
;;      reg 168 { d16(bb 2 insn 37) }
;;   UD chains for insn luid 4 uid 41
;;      reg 165 { d14(bb 2 insn 39) }

( 3 2 )->[3]->( 3 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ d5(bb 0 insn -1) }u9(13){ d7(bb 0 insn -1) }u10(25){ d10(bb 0 insn -1) }u11(26){ d11(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 164 165 172
;; lr  def 	 24 [cc] 165
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; live  gen 	 24 [cc] 165
;; live  kill	
;; rd  in  	(17)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
;; rd  gen 	(2)
9, 13
;; rd  kill	(3)
9, 13, 14
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; rd  out 	(16)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;;  UD chains for artificial uses
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 25 { d10(bb 0 insn -1) }
;;   reg 26 { d11(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 44
;;      reg 165 { d14(bb 2 insn 39) d13(bb 3 insn 44) }
;;      reg 172 { d17(bb 2 insn 43) }
;;   UD chains for insn luid 1 uid 47
;;      reg 164 { d12(bb 2 insn 41) }
;;      reg 165 { d13(bb 3 insn 44) }
;;   eq_note reg 165 { }
;;   UD chains for insn luid 2 uid 48
;;      reg 24 { d9(bb 3 insn 47) }

( 3 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ d5(bb 0 insn -1) }u20(13){ d7(bb 0 insn -1) }u21(25){ d10(bb 0 insn -1) }u22(26){ d11(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(16)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(16)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;;  UD chains for artificial uses
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 25 { d10(bb 0 insn -1) }
;;   reg 26 { d11(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 60
;;      reg 0 { d0(bb 4 insn 54) }

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u24(0){ d0(bb 4 insn 54) }u25(11){ d5(bb 0 insn -1) }u26(13){ d7(bb 0 insn -1) }u27(14){ d8(bb 0 insn -1) }u28(25){ d10(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(16)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(16)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 4 insn 54) }
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 14 { d8(bb 0 insn -1) }
;;   reg 25 { d10(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 38 to worklist
  Adding insn 48 to worklist
  Adding insn 44 to worklist
  Adding insn 60 to worklist
Finished finding needed instructions:
  Adding insn 54 to worklist
Processing use of (reg 0 r0) in insn 60:
Processing use of (reg 165 [ ivtmp.545 ]) in insn 44:
  Adding insn 39 to worklist
Processing use of (reg 172) in insn 44:
  Adding insn 43 to worklist
Processing use of (reg 24 cc) in insn 48:
  Adding insn 47 to worklist
Processing use of (reg 164 [ D.38402 ]) in insn 47:
  Adding insn 41 to worklist
Processing use of (reg 165 [ ivtmp.545 ]) in insn 47:
Processing use of (reg 165 [ ivtmp.545 ]) in insn 41:
Processing use of (reg 167 [ str ]) in insn 38:
  Adding insn 33 to worklist
Processing use of (reg 168) in insn 38:
  Adding insn 37 to worklist
Processing use of (reg 0 r0) in insn 33:


init_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d} r3={1d} r11={1d,4u} r12={1d} r13={1d,4u} r14={1d,1u} r24={1d,1u} r25={1d,4u} r26={1d,3u} r164={1d,1u} r165={2d,3u,1d} r167={1d,1u} r168={1d,1u} r172={1d,1u} 
;;    total ref usage 46{18d,27u,1e} in 11{11 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8, 9
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 24[9,1] 25[10,1] 26[11,1] 164[12,1] 165[13,2] 167[15,1] 168[16,1] 172[17,1] 
(note 32 0 35 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 164 165 167 168 172
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 164 165 167 168 172
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11
;; rd  gen 	(5)
12, 14, 15, 16, 17
;; rd  kill	(6)
12, 13, 14, 15, 16, 17

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 35 32 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 33 35 34 2 init/main.c:290 (set (reg/v/f:SI 167 [ str ])
        (reg:SI 0 r0 [ str ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ str ])
        (nil)))

(note 34 33 37 2 NOTE_INSN_FUNCTION_BEG)

(insn 37 34 38 2 init/main.c:293 (set (reg/f:SI 168)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 38 37 39 2 init/main.c:293 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 168)
                (const_int 4 [0x4])) [0 execute_command+0 S4 A32])
        (reg/v/f:SI 167 [ str ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 168)
        (expr_list:REG_DEAD (reg/v/f:SI 167 [ str ])
            (nil))))

(insn 39 38 41 2 init/main.c:293 (set (reg:SI 165 [ ivtmp.545 ])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 41 39 43 2 init/main.c:289 (set (reg/f:SI 164 [ D.38402 ])
        (plus:SI (reg:SI 165 [ ivtmp.545 ])
            (const_int 124 [0x7c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 124 [0x7c])))
        (nil)))

(insn 43 41 46 2 init/main.c:301 (set (reg:SI 172)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; rd  out 	(15)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 164 165 172
;; lr  def 	 24 [cc] 165
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; live  gen 	 24 [cc] 165
;; live  kill	
;; rd  in  	(17)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
;; rd  gen 	(2)
9, 13
;; rd  kill	(3)
9, 13, 14

;; Pred edge  3 [96.8%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 46 43 42 3 14 "" [1 uses])

(note 42 46 44 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 44 42 47 3 init/main.c:301 (set (mem/s/f/j:SI (pre_inc:SI (reg:SI 165 [ ivtmp.545 ])) [0 argv_init S4 A32])
        (reg:SI 172)) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg:SI 165 [ ivtmp.545 ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 47 44 48 3 init/main.c:300 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 165 [ ivtmp.545 ])
            (reg/f:SI 164 [ D.38402 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 165 [ ivtmp.545 ])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 124 [0x7c]))))
        (nil)))

(jump_insn 48 47 49 3 init/main.c:300 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9677 [0x25cd])
            (nil))))
;; End of basic block 3 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 164 165 172
;; rd  out 	(16)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17


;; Succ edge  3 [96.8%]  (dfs_back)
;; Succ edge  4 [3.2%]  (fallthru,loop_exit)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ }u20(13){ }u21(25){ }u22(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(16)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1

;; Pred edge  3 [3.2%]  (fallthru,loop_exit)
(note 49 48 54 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 54 49 60 4 init/main.c:303 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 60 54 0 4 init/main.c:303 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(16)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function rdinit_setup (rdinit_setup)[0:2051] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


rdinit_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d} r3={1d} r11={1d,4u} r12={1d} r13={1d,4u} r14={1d,1u} r24={1d,1u} r25={1d,4u} r26={1d,3u} r133={1d,1u} r134={2d,3u,1d} r136={1d,1u} r137={1d,1u} r141={1d,1u} 
;;    total ref usage 46{18d,27u,1e} in 11{11 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8, 9
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 24[9,1] 25[10,1] 26[11,1] 133[12,1] 134[13,2] 136[15,1] 137[16,1] 141[17,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d2(1){ }d3(2){ }d4(3){ }d5(11){ }d6(12){ }d7(13){ }d8(14){ }d10(25){ }d11(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11
;; rd  kill	(11)
0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11

( 0 )->[2]->( 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d5(bb 0 insn -1) }u1(13){ d7(bb 0 insn -1) }u2(25){ d10(bb 0 insn -1) }u3(26){ d11(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133 134 136 137 141
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 133 134 136 137 141
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11
;; rd  gen 	(5)
12, 14, 15, 16, 17
;; rd  kill	(6)
12, 13, 14, 15, 16, 17
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; rd  out 	(15)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17
;;  UD chains for artificial uses
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 25 { d10(bb 0 insn -1) }
;;   reg 26 { d11(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d1(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 7
;;      reg 136 { d15(bb 2 insn 2) }
;;      reg 137 { d16(bb 2 insn 6) }
;;   UD chains for insn luid 4 uid 10
;;      reg 134 { d14(bb 2 insn 8) }

( 3 2 )->[3]->( 3 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ d5(bb 0 insn -1) }u9(13){ d7(bb 0 insn -1) }u10(25){ d10(bb 0 insn -1) }u11(26){ d11(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 141
;; lr  def 	 24 [cc] 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  gen 	 24 [cc] 134
;; live  kill	
;; rd  in  	(17)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
;; rd  gen 	(2)
9, 13
;; rd  kill	(3)
9, 13, 14
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; rd  out 	(16)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;;  UD chains for artificial uses
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 25 { d10(bb 0 insn -1) }
;;   reg 26 { d11(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 13
;;      reg 134 { d14(bb 2 insn 8) d13(bb 3 insn 13) }
;;      reg 141 { d17(bb 2 insn 12) }
;;   UD chains for insn luid 1 uid 16
;;      reg 133 { d12(bb 2 insn 10) }
;;      reg 134 { d13(bb 3 insn 13) }
;;   eq_note reg 134 { }
;;   UD chains for insn luid 2 uid 17
;;      reg 24 { d9(bb 3 insn 16) }

( 3 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ d5(bb 0 insn -1) }u20(13){ d7(bb 0 insn -1) }u21(25){ d10(bb 0 insn -1) }u22(26){ d11(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(16)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(16)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;;  UD chains for artificial uses
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 25 { d10(bb 0 insn -1) }
;;   reg 26 { d11(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 29
;;      reg 0 { d0(bb 4 insn 23) }

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u24(0){ d0(bb 4 insn 23) }u25(11){ d5(bb 0 insn -1) }u26(13){ d7(bb 0 insn -1) }u27(14){ d8(bb 0 insn -1) }u28(25){ d10(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(16)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(16)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 4 insn 23) }
;;   reg 11 { d5(bb 0 insn -1) }
;;   reg 13 { d7(bb 0 insn -1) }
;;   reg 14 { d8(bb 0 insn -1) }
;;   reg 25 { d10(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 7 to worklist
  Adding insn 17 to worklist
  Adding insn 13 to worklist
  Adding insn 29 to worklist
Finished finding needed instructions:
  Adding insn 23 to worklist
Processing use of (reg 0 r0) in insn 29:
Processing use of (reg 134 [ ivtmp.580 ]) in insn 13:
  Adding insn 8 to worklist
Processing use of (reg 141) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 24 cc) in insn 17:
  Adding insn 16 to worklist
Processing use of (reg 133 [ D.38437 ]) in insn 16:
  Adding insn 10 to worklist
Processing use of (reg 134 [ ivtmp.580 ]) in insn 16:
Processing use of (reg 134 [ ivtmp.580 ]) in insn 10:
Processing use of (reg 136 [ str ]) in insn 7:
  Adding insn 2 to worklist
Processing use of (reg 137) in insn 7:
  Adding insn 6 to worklist
Processing use of (reg 0 r0) in insn 2:


rdinit_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d} r3={1d} r11={1d,4u} r12={1d} r13={1d,4u} r14={1d,1u} r24={1d,1u} r25={1d,4u} r26={1d,3u} r133={1d,1u} r134={2d,3u,1d} r136={1d,1u} r137={1d,1u} r141={1d,1u} 
;;    total ref usage 46{18d,27u,1e} in 11{11 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 6, 8, 9
0[0,2] 1[2,1] 2[3,1] 3[4,1] 11[5,1] 12[6,1] 13[7,1] 14[8,1] 24[9,1] 25[10,1] 26[11,1] 133[12,1] 134[13,2] 136[15,1] 137[16,1] 141[17,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133 134 136 137 141
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 133 134 136 137 141
;; live  kill	
;; rd  in  	(10)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11
;; rd  gen 	(5)
12, 14, 15, 16, 17
;; rd  kill	(6)
12, 13, 14, 15, 16, 17

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 init/main.c:307 (set (reg/v/f:SI 136 [ str ])
        (reg:SI 0 r0 [ str ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ str ])
        (nil)))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 init/main.c:310 (set (reg/f:SI 137)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 init/main.c:310 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 137)
                (const_int 8 [0x8])) [0 ramdisk_execute_command+0 S4 A32])
        (reg/v/f:SI 136 [ str ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 137)
        (expr_list:REG_DEAD (reg/v/f:SI 136 [ str ])
            (nil))))

(insn 8 7 10 2 init/main.c:310 (set (reg:SI 134 [ ivtmp.580 ])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 10 8 12 2 init/main.c:306 (set (reg/f:SI 133 [ D.38437 ])
        (plus:SI (reg:SI 134 [ ivtmp.580 ])
            (const_int 124 [0x7c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 124 [0x7c])))
        (nil)))

(insn 12 10 15 2 init/main.c:313 (set (reg:SI 141)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; rd  out 	(15)
1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 141
;; lr  def 	 24 [cc] 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  gen 	 24 [cc] 134
;; live  kill	
;; rd  in  	(17)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
;; rd  gen 	(2)
9, 13
;; rd  kill	(3)
9, 13, 14

;; Pred edge  3 [96.8%]  (dfs_back)
;; Pred edge  2 [100.0%]  (fallthru)
(code_label 15 12 11 3 21 "" [1 uses])

(note 11 15 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 13 11 16 3 init/main.c:313 (set (mem/s/f/j:SI (pre_inc:SI (reg:SI 134 [ ivtmp.580 ])) [0 argv_init S4 A32])
        (reg:SI 141)) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg:SI 134 [ ivtmp.580 ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 16 13 17 3 init/main.c:312 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ ivtmp.580 ])
            (reg/f:SI 133 [ D.38437 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 134 [ ivtmp.580 ])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 124 [0x7c]))))
        (nil)))

(jump_insn 17 16 18 3 init/main.c:312 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 15)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9677 [0x25cd])
            (nil))))
;; End of basic block 3 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 141
;; rd  out 	(16)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17


;; Succ edge  3 [96.8%]  (dfs_back)
;; Succ edge  4 [3.2%]  (fallthru,loop_exit)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ }u20(13){ }u21(25){ }u22(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(16)
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1

;; Pred edge  3 [3.2%]  (fallthru,loop_exit)
(note 18 17 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 23 18 29 4 init/main.c:315 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 29 23 0 4 init/main.c:315 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(16)
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function smp_setup_processor_id (smp_setup_processor_id)[0:2058] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


smp_setup_processor_id

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} 
;;    total ref usage 18{10d,8u,0e} in 0{0 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 5, 7
0[0,1] 1[1,1] 2[2,1] 3[3,1] 11[4,1] 12[5,1] 13[6,1] 14[7,1] 25[8,1] 26[9,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d0(0){ }d1(1){ }d2(2){ }d3(3){ }d4(11){ }d5(12){ }d6(13){ }d7(14){ }d8(25){ }d9(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; rd  kill	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d4(bb 0 insn -1) }u1(13){ d6(bb 0 insn -1) }u2(25){ d8(bb 0 insn -1) }u3(26){ d9(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;;  UD chains for artificial uses
;;   reg 11 { d4(bb 0 insn -1) }
;;   reg 13 { d6(bb 0 insn -1) }
;;   reg 25 { d8(bb 0 insn -1) }
;;   reg 26 { d9(bb 0 insn -1) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u4(11){ d4(bb 0 insn -1) }u5(13){ d6(bb 0 insn -1) }u6(14){ d7(bb 0 insn -1) }u7(25){ d8(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;;  UD chains for artificial uses
;;   reg 11 { d4(bb 0 insn -1) }
;;   reg 13 { d6(bb 0 insn -1) }
;;   reg 14 { d7(bb 0 insn -1) }
;;   reg 25 { d8(bb 0 insn -1) }

Finding needed instructions:
Finished finding needed instructions:


smp_setup_processor_id

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} 
;;    total ref usage 18{10d,8u,0e} in 0{0 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 5, 7
0[0,1] 1[1,1] 2[2,1] 3[3,1] 11[4,1] 12[5,1] 13[6,1] 14[7,1] 25[8,1] 26[9,1] 
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 0 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function thread_info_cache_init (thread_info_cache_init)[0:2059] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


thread_info_cache_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} 
;;    total ref usage 18{10d,8u,0e} in 0{0 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 5, 7
0[0,1] 1[1,1] 2[2,1] 3[3,1] 11[4,1] 12[5,1] 13[6,1] 14[7,1] 25[8,1] 26[9,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d0(0){ }d1(1){ }d2(2){ }d3(3){ }d4(11){ }d5(12){ }d6(13){ }d7(14){ }d8(25){ }d9(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; rd  kill	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d4(bb 0 insn -1) }u1(13){ d6(bb 0 insn -1) }u2(25){ d8(bb 0 insn -1) }u3(26){ d9(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;;  UD chains for artificial uses
;;   reg 11 { d4(bb 0 insn -1) }
;;   reg 13 { d6(bb 0 insn -1) }
;;   reg 25 { d8(bb 0 insn -1) }
;;   reg 26 { d9(bb 0 insn -1) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u4(11){ d4(bb 0 insn -1) }u5(13){ d6(bb 0 insn -1) }u6(14){ d7(bb 0 insn -1) }u7(25){ d8(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;;  UD chains for artificial uses
;;   reg 11 { d4(bb 0 insn -1) }
;;   reg 13 { d6(bb 0 insn -1) }
;;   reg 14 { d7(bb 0 insn -1) }
;;   reg 25 { d8(bb 0 insn -1) }

Finding needed instructions:
Finished finding needed instructions:


thread_info_cache_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} 
;;    total ref usage 18{10d,8u,0e} in 0{0 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 5, 7
0[0,1] 1[1,1] 2[2,1] 3[3,1] 11[4,1] 12[5,1] 13[6,1] 14[7,1] 25[8,1] 26[9,1] 
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 0 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function loglevel (loglevel)[0:2048] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 9 (  1.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


loglevel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,5u} r1={3d,1u} r2={2d} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r25={1d,8u,2d} r26={1d,4u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={2d,1u} r134={1d,1u} r136={2d,3u} r137={1d,1u} r138={1d,1u} r139={1d,1u} 
;;    total ref usage 180{139d,39u,2e} in 17{16 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130
0[0,4] 1[4,3] 2[7,2] 3[9,2] 11[11,1] 12[12,2] 13[14,1] 14[15,2] 15[17,1] 16[18,1] 17[19,1] 18[20,1] 19[21,1] 20[22,1] 21[23,1] 22[24,1] 23[25,1] 24[26,2] 25[28,1] 26[29,1] 27[30,1] 28[31,1] 29[32,1] 30[33,1] 31[34,1] 32[35,1] 33[36,1] 34[37,1] 35[38,1] 36[39,1] 37[40,1] 38[41,1] 39[42,1] 40[43,1] 41[44,1] 42[45,1] 43[46,1] 44[47,1] 45[48,1] 46[49,1] 47[50,1] 48[51,1] 49[52,1] 50[53,1] 51[54,1] 52[55,1] 53[56,1] 54[57,1] 55[58,1] 56[59,1] 57[60,1] 58[61,1] 59[62,1] 60[63,1] 61[64,1] 62[65,1] 63[66,1] 64[67,1] 65[68,1] 66[69,1] 67[70,1] 68[71,1] 69[72,1] 70[73,1] 71[74,1] 72[75,1] 73[76,1] 74[77,1] 75[78,1] 76[79,1] 77[80,1] 78[81,1] 79[82,1] 80[83,1] 81[84,1] 82[85,1] 83[86,1] 84[87,1] 85[88,1] 86[89,1] 87[90,1] 88[91,1] 89[92,1] 90[93,1] 91[94,1] 92[95,1] 93[96,1] 94[97,1] 95[98,1] 96[99,1] 97[100,1] 98[101,1] 99[102,1] 100[103,1] 101[104,1] 102[105,1] 103[106,1] 104[107,1] 105[108,1] 106[109,1] 107[110,1] 108[111,1] 109[112,1] 110[113,1] 111[114,1] 112[115,1] 113[116,1] 114[117,1] 115[118,1] 116[119,1] 117[120,1] 118[121,1] 119[122,1] 120[123,1] 121[124,1] 122[125,1] 123[126,1] 124[127,1] 125[128,1] 126[129,1] 127[130,1] 133[131,2] 134[133,1] 136[134,2] 137[136,1] 138[137,1] 139[138,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d3(0){ }d6(1){ }d8(2){ }d10(3){ }d11(11){ }d13(12){ }d14(13){ }d16(14){ }d28(25){ }d29(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
3, 6, 8, 10, 11, 13, 14, 16, 28, 29
;; rd  kill	(19)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 28, 29
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
3, 6, 8, 10, 11, 13, 14, 16, 28, 29

( 0 )->[2]->( 4 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d11(bb 0 insn -1) }u1(13){ d14(bb 0 insn -1) }u2(25){ d28(bb 0 insn -1) }u3(26){ d29(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 136 137
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 136 137
;; live  kill	 14 [lr]
;; rd  in  	(10)
3, 6, 8, 10, 11, 13, 14, 16, 28, 29
;; rd  gen 	(5)
1, 26, 133, 135, 136
;; rd  kill	(12)
0, 1, 2, 3, 15, 16, 26, 27, 133, 134, 135, 136
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(13)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 133, 135, 136
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 25 { d28(bb 0 insn -1) }
;;   reg 26 { d29(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 40
;;      reg 25 { d28(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 2
;;      reg 0 { d3(bb 0 insn -1) }
;;      reg 136 { d134(bb 2 insn 40) }
;;      reg 136 { d134(bb 2 insn 40) }
;;   UD chains for insn luid 2 uid 7
;;      reg 25 { d28(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 8
;;      reg 136 { d135(bb 2 insn 2) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 4 uid 9
;;      reg 137 { d136(bb 2 insn 7) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 10
;;      reg 13 { d14(bb 0 insn -1) }
;;      reg 0 { d2(bb 2 insn 8) }
;;      reg 1 { d5(bb 2 insn 9) }
;;   UD chains for insn luid 6 uid 11
;;      reg 0 { d1(bb 2 insn 10) }
;;   UD chains for insn luid 7 uid 12
;;      reg 134 { d133(bb 2 insn 11) }
;;   UD chains for insn luid 8 uid 13
;;      reg 24 { d26(bb 2 insn 12) }

( 2 )->[3]->( 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u18(11){ d11(bb 0 insn -1) }u19(13){ d14(bb 0 insn -1) }u20(25){ d28(bb 0 insn -1) }u21(26){ d29(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	
;; rd  in  	(13)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 133, 135, 136
;; rd  gen 	(1)
132
;; rd  kill	(2)
131, 132
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(14)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 132, 133, 135, 136
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 25 { d28(bb 0 insn -1) }
;;   reg 26 { d29(bb 0 insn -1) }

( 2 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u22(11){ d11(bb 0 insn -1) }u23(13){ d14(bb 0 insn -1) }u24(25){ d28(bb 0 insn -1) }u25(26){ d29(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133 138 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133 138 139
;; live  kill	
;; rd  in  	(13)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 133, 135, 136
;; rd  gen 	(3)
131, 137, 138
;; rd  kill	(4)
131, 132, 137, 138
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(16)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 131, 133, 135, 136, 137, 138
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 25 { d28(bb 0 insn -1) }
;;   reg 26 { d29(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 21
;;      reg 25 { d28(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 22
;;      reg 138 { d137(bb 4 insn 20) }
;;      reg 139 { d138(bb 4 insn 21) }

( 4 3 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u29(11){ d11(bb 0 insn -1) }u30(13){ d14(bb 0 insn -1) }u31(25){ d28(bb 0 insn -1) }u32(26){ d29(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(17)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 131, 132, 133, 135, 136, 137, 138
;; rd  gen 	(1)
0
;; rd  kill	(4)
0, 1, 2, 3
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(17)
0, 6, 8, 10, 11, 13, 14, 26, 28, 29, 131, 132, 133, 135, 136, 137, 138
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 25 { d28(bb 0 insn -1) }
;;   reg 26 { d29(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 30
;;      reg 133 { d132(bb 3 insn 15) d131(bb 4 insn 23) }
;;   UD chains for insn luid 1 uid 36
;;      reg 0 { d0(bb 5 insn 30) }

( 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u35(0){ d0(bb 5 insn 30) }u36(11){ d11(bb 0 insn -1) }u37(13){ d14(bb 0 insn -1) }u38(14){ }u39(25){ d28(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(17)
0, 6, 8, 10, 11, 13, 14, 26, 28, 29, 131, 132, 133, 135, 136, 137, 138
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(17)
0, 6, 8, 10, 11, 13, 14, 26, 28, 29, 131, 132, 133, 135, 136, 137, 138
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 5 insn 30) }
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d28(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 10 to worklist
  Adding insn 2 to worklist
  Adding insn 41 to worklist
  Adding insn 22 to worklist
  Adding insn 36 to worklist
Finished finding needed instructions:
  Adding insn 30 to worklist
Processing use of (reg 133 [ D.37739 ]) in insn 30:
  Adding insn 15 to worklist
  Adding insn 23 to worklist
Processing use of (reg 0 r0) in insn 36:
Processing use of (reg 138) in insn 22:
  Adding insn 20 to worklist
Processing use of (reg 139 [ newlevel ]) in insn 22:
  Adding insn 21 to worklist
Processing use of (reg 25 sfp) in insn 21:
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 136) in insn 2:
  Adding insn 40 to worklist
Processing use of (reg 136) in insn 2:
Processing use of (reg 25 sfp) in insn 40:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 8 to worklist
Processing use of (reg 1 r1) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 137) in insn 9:
  Adding insn 7 to worklist
Processing use of (reg 25 sfp) in insn 7:
Processing use of (reg 136) in insn 8:
Processing use of (reg 24 cc) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 134 [ D.37735 ]) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:


loglevel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,5u} r1={3d,1u} r2={2d} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r25={1d,8u,2d} r26={1d,4u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={2d,1u} r134={1d,1u} r136={2d,3u} r137={1d,1u} r138={1d,1u} r139={1d,1u} 
;;    total ref usage 180{139d,39u,2e} in 17{16 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130
0[0,4] 1[4,3] 2[7,2] 3[9,2] 11[11,1] 12[12,2] 13[14,1] 14[15,2] 15[17,1] 16[18,1] 17[19,1] 18[20,1] 19[21,1] 20[22,1] 21[23,1] 22[24,1] 23[25,1] 24[26,2] 25[28,1] 26[29,1] 27[30,1] 28[31,1] 29[32,1] 30[33,1] 31[34,1] 32[35,1] 33[36,1] 34[37,1] 35[38,1] 36[39,1] 37[40,1] 38[41,1] 39[42,1] 40[43,1] 41[44,1] 42[45,1] 43[46,1] 44[47,1] 45[48,1] 46[49,1] 47[50,1] 48[51,1] 49[52,1] 50[53,1] 51[54,1] 52[55,1] 53[56,1] 54[57,1] 55[58,1] 56[59,1] 57[60,1] 58[61,1] 59[62,1] 60[63,1] 61[64,1] 62[65,1] 63[66,1] 64[67,1] 65[68,1] 66[69,1] 67[70,1] 68[71,1] 69[72,1] 70[73,1] 71[74,1] 72[75,1] 73[76,1] 74[77,1] 75[78,1] 76[79,1] 77[80,1] 78[81,1] 79[82,1] 80[83,1] 81[84,1] 82[85,1] 83[86,1] 84[87,1] 85[88,1] 86[89,1] 87[90,1] 88[91,1] 89[92,1] 90[93,1] 91[94,1] 92[95,1] 93[96,1] 94[97,1] 95[98,1] 96[99,1] 97[100,1] 98[101,1] 99[102,1] 100[103,1] 101[104,1] 102[105,1] 103[106,1] 104[107,1] 105[108,1] 106[109,1] 107[110,1] 108[111,1] 109[112,1] 110[113,1] 111[114,1] 112[115,1] 113[116,1] 114[117,1] 115[118,1] 116[119,1] 117[120,1] 118[121,1] 119[122,1] 120[123,1] 121[124,1] 122[125,1] 123[126,1] 124[127,1] 125[128,1] 126[129,1] 127[130,1] 133[131,2] 134[133,1] 136[134,2] 137[136,1] 138[137,1] 139[138,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 136 137
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 136 137
;; live  kill	 14 [lr]
;; rd  in  	(10)
3, 6, 8, 10, 11, 13, 14, 16, 28, 29
;; rd  gen 	(5)
1, 26, 133, 135, 136
;; rd  kill	(12)
0, 1, 2, 3, 15, 16, 26, 27, 133, 134, 135, 136

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 40 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 40 4 2 2 init/main.c:211 (set (reg/f:SI 136)
        (reg/f:SI 25 sfp)) -1 (nil))

(insn 2 40 3 2 init/main.c:211 (set (mem/f/c/i:SI (pre_modify:SI (reg/f:SI 136)
                (plus:SI (reg/f:SI 136)
                    (const_int -12 [0xfffffffffffffff4]))) [0 str+0 S4 A32])
        (reg:SI 0 r0 [ str ])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 136)
        (expr_list:REG_DEAD (reg:SI 0 r0 [ str ])
            (nil))))

(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 3 8 2 init/main.c:219 (set (reg/f:SI 137)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(insn 8 7 9 2 init/main.c:219 (set (reg:SI 0 r0)
        (reg/f:SI 136)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 136)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -12 [0xfffffffffffffff4]))
            (nil))))

(insn 9 8 10 2 init/main.c:219 (set (reg:SI 1 r1)
        (reg/f:SI 137)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 137)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc]))
            (nil))))

(call_insn 10 9 11 2 init/main.c:219 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_option") [flags 0x41] <function_decl 0x10a82500 get_option>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 11 10 12 2 init/main.c:219 (set (reg:SI 134 [ D.37735 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 12 11 13 2 init/main.c:219 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.37735 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ D.37735 ])
        (nil)))

(jump_insn 13 12 14 2 init/main.c:219 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(13)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 133, 135, 136


;; Succ edge  4 [61.0%] 
;; Succ edge  3 [39.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u18(11){ }u19(13){ }u20(25){ }u21(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	
;; rd  in  	(13)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 133, 135, 136
;; rd  gen 	(1)
132
;; rd  kill	(2)
131, 132

;; Pred edge  2 [39.0%]  (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 41 3 init/main.c:224 (set (reg:SI 133 [ D.37739 ])
        (const_int -22 [0xffffffffffffffea])) 167 {*arm_movsi_insn} (nil))

(jump_insn 41 15 42 3 (set (pc)
        (label_ref 24)) -1 (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(14)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 132, 133, 135, 136


;; Succ edge  5 [100.0%] 

(barrier 42 41 18)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u22(11){ }u23(13){ }u24(25){ }u25(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133 138 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133 138 139
;; live  kill	
;; rd  in  	(13)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 133, 135, 136
;; rd  gen 	(3)
131, 137, 138
;; rd  kill	(4)
131, 132, 137, 138

;; Pred edge  2 [61.0%] 
(code_label 18 42 19 4 31 "" [1 uses])

(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 4 init/main.c:220 (set (reg/f:SI 138)
        (symbol_ref:SI ("console_printk") [flags 0xc0] <var_decl 0x10a4ff00 console_printk>)) 167 {*arm_movsi_insn} (nil))

(insn 21 20 22 4 init/main.c:220 (set (reg:SI 139 [ newlevel ])
        (mem/c/i:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 newlevel+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 22 21 23 4 init/main.c:220 (set (mem/s/j:SI (reg/f:SI 138) [0 console_printk+0 S4 A32])
        (reg:SI 139 [ newlevel ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139 [ newlevel ])
        (expr_list:REG_DEAD (reg/f:SI 138)
            (nil))))

(insn 23 22 24 4 init/main.c:221 (set (reg:SI 133 [ D.37739 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(16)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 131, 133, 135, 136, 137, 138


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u29(11){ }u30(13){ }u31(25){ }u32(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(17)
1, 6, 8, 10, 11, 13, 14, 26, 28, 29, 131, 132, 133, 135, 136, 137, 138
;; rd  gen 	(1)
0
;; rd  kill	(4)
0, 1, 2, 3

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 24 23 25 5 32 "" [1 uses])

(note 25 24 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 30 25 36 5 init/main.c:225 (set (reg/i:SI 0 r0)
        (reg:SI 133 [ D.37739 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.37739 ])
        (nil)))

(insn 36 30 0 5 init/main.c:225 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(17)
0, 6, 8, 10, 11, 13, 14, 26, 28, 29, 131, 132, 133, 135, 136, 137, 138


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_one_initcall (do_one_initcall)[0:2065]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 27 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 28 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 28 (  1.9)


do_one_initcall

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={20d,13u} r1={17d,6u} r2={17d,6u} r3={11d} r11={1d,14u} r12={11d} r13={1d,28u,2d} r14={11d,1u} r15={10d} r16={10d} r17={10d} r18={10d} r19={10d} r20={10d} r21={10d} r22={10d} r23={10d} r24={21d,8u} r25={1d,17u,2d} r26={1d,13u} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} r81={10d} r82={10d} r83={10d} r84={10d} r85={10d} r86={10d} r87={10d} r88={10d} r89={10d} r90={10d} r91={10d} r92={10d} r93={10d} r94={10d} r95={10d} r96={10d} r97={10d} r98={10d} r99={10d} r100={10d} r101={10d} r102={10d} r103={10d} r104={10d} r105={10d} r106={10d} r107={10d} r108={10d} r109={10d} r110={10d} r111={10d} r112={10d} r113={10d} r114={10d} r115={10d} r116={10d} r117={10d} r118={10d} r119={10d} r120={10d} r121={10d} r122={10d} r123={10d} r124={10d} r125={10d} r126={10d} r127={10d} r137={1d,1u} r138={2d,5u} r139={1d,2u} r140={1d,1u} r141={1d,1u} r143={1d,5u} r144={1d,2u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r151={1d,1u} r152={1d,2u} r155={1d,3u} r158={1d,1u} r159={1d,3u} r160={1d,1u} r163={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r170={1d,1u} r174={1d,2u} r175={1d,1u} r176={1d,1u} r182={1d,1u} r186={1d,2u} r187={1d,1u} r192={2d,2u} r193={1d,1u} 
;;    total ref usage 1402{1244d,154u,4e} in 84{74 regular + 10 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211
0[0,20] 1[20,17] 2[37,17] 3[54,11] 11[65,1] 12[66,11] 13[77,1] 14[78,11] 15[89,10] 16[99,10] 17[109,10] 18[119,10] 19[129,10] 20[139,10] 21[149,10] 22[159,10] 23[169,10] 24[179,21] 25[200,1] 26[201,1] 27[202,10] 28[212,10] 29[222,10] 30[232,10] 31[242,10] 32[252,10] 33[262,10] 34[272,10] 35[282,10] 36[292,10] 37[302,10] 38[312,10] 39[322,10] 40[332,10] 41[342,10] 42[352,10] 43[362,10] 44[372,10] 45[382,10] 46[392,10] 47[402,10] 48[412,10] 49[422,10] 50[432,10] 51[442,10] 52[452,10] 53[462,10] 54[472,10] 55[482,10] 56[492,10] 57[502,10] 58[512,10] 59[522,10] 60[532,10] 61[542,10] 62[552,10] 63[562,10] 64[572,10] 65[582,10] 66[592,10] 67[602,10] 68[612,10] 69[622,10] 70[632,10] 71[642,10] 72[652,10] 73[662,10] 74[672,10] 75[682,10] 76[692,10] 77[702,10] 78[712,10] 79[722,10] 80[732,10] 81[742,10] 82[752,10] 83[762,10] 84[772,10] 85[782,10] 86[792,10] 87[802,10] 88[812,10] 89[822,10] 90[832,10] 91[842,10] 92[852,10] 93[862,10] 94[872,10] 95[882,10] 96[892,10] 97[902,10] 98[912,10] 99[922,10] 100[932,10] 101[942,10] 102[952,10] 103[962,10] 104[972,10] 105[982,10] 106[992,10] 107[1002,10] 108[1012,10] 109[1022,10] 110[1032,10] 111[1042,10] 112[1052,10] 113[1062,10] 114[1072,10] 115[1082,10] 116[1092,10] 117[1102,10] 118[1112,10] 119[1122,10] 120[1132,10] 121[1142,10] 122[1152,10] 123[1162,10] 124[1172,10] 125[1182,10] 126[1192,10] 127[1202,10] 137[1212,1] 138[1213,2] 139[1215,1] 140[1216,1] 141[1217,1] 143[1218,1] 144[1219,1] 145[1220,1] 146[1221,1] 147[1222,1] 151[1223,1] 152[1224,1] 155[1225,1] 158[1226,1] 159[1227,1] 160[1228,1] 163[1229,1] 165[1230,1] 166[1231,1] 167[1232,1] 168[1233,1] 170[1234,1] 174[1235,1] 175[1236,1] 176[1237,1] 182[1238,1] 186[1239,1] 187[1240,1] 192[1241,2] 193[1243,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d19(0){ }d36(1){ }d53(2){ }d64(3){ }d65(11){ }d76(12){ }d77(13){ }d88(14){ }d200(25){ }d201(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
19, 36, 53, 64, 65, 76, 77, 88, 200, 201
;; rd  kill	(91)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 200, 201
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
19, 36, 53, 64, 65, 76, 77, 88, 200, 201

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d65(bb 0 insn -1) }u1(13){ d77(bb 0 insn -1) }u2(25){ d200(bb 0 insn -1) }u3(26){ d201(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 139 143 144 145 146 147
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 139 143 144 145 146 147
;; live  kill	
;; rd  in  	(10)
19, 36, 53, 64, 65, 76, 77, 88, 200, 201
;; rd  gen 	(7)
199, 1215, 1218, 1219, 1220, 1221, 1222
;; rd  kill	(27)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1215, 1218, 1219, 1220, 1221, 1222
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143 144
;; rd  out 	(17)
19, 36, 53, 64, 65, 76, 77, 88, 199, 200, 201, 1215, 1218, 1219, 1220, 1221, 1222
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d19(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 7
;;      reg 13 { d77(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 8
;;      reg 145 { d1220(bb 2 insn 7) }
;;   eq_note reg 13 { }
;;   UD chains for insn luid 3 uid 9
;;      reg 144 { d1219(bb 2 insn 8) }
;;   UD chains for insn luid 5 uid 11
;;      reg 146 { d1221(bb 2 insn 10) }
;;   UD chains for insn luid 6 uid 12
;;      reg 147 { d1222(bb 2 insn 11) }
;;   UD chains for insn luid 7 uid 13
;;      reg 24 { d199(bb 2 insn 12) }

( 2 )->[3]->( 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u12(11){ d65(bb 0 insn -1) }u13(13){ d77(bb 0 insn -1) }u14(25){ d200(bb 0 insn -1) }u15(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 140 141 151 152 155 158 192 193
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 138 140 141 151 152 155 158 192 193
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(17)
19, 36, 53, 64, 65, 76, 77, 88, 199, 200, 201, 1215, 1218, 1219, 1220, 1221, 1222
;; rd  gen 	(10)
13, 1214, 1216, 1217, 1223, 1224, 1225, 1226, 1241, 1243
;; rd  kill	(42)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 1213, 1214, 1216, 1217, 1223, 1224, 1225, 1226, 1241, 1242, 1243
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; rd  out 	(25)
13, 36, 53, 64, 65, 76, 77, 199, 200, 201, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 19
;;      reg 144 { d1219(bb 2 insn 8) }
;;   UD chains for insn luid 2 uid 21
;;      reg 143 { d1218(bb 2 insn 2) }
;;   UD chains for insn luid 3 uid 22
;;      reg 151 { d1223(bb 3 insn 19) }
;;   UD chains for insn luid 4 uid 23
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 0 { d5(bb 3 insn 20) }
;;      reg 1 { d35(bb 3 insn 21) }
;;      reg 2 { d52(bb 3 insn 22) }
;;   UD chains for insn luid 5 uid 24
;;      reg 25 { d200(bb 0 insn -1) }
;;   UD chains for insn luid 6 uid 25
;;      reg 152 { d1224(bb 3 insn 24) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 7 uid 26
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 0 { d17(bb 3 insn 25) }
;;   UD chains for insn luid 8 uid 27
;;      reg 25 { d200(bb 0 insn -1) }
;;   UD chains for insn luid 9 uid 28
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 143 { d1218(bb 2 insn 2) }
;;   UD chains for insn luid 10 uid 29
;;      reg 0 { d15(bb 3 insn 28) }
;;   UD chains for insn luid 11 uid 31
;;      reg 152 { d1224(bb 3 insn 24) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 12 uid 32
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 0 { d7(bb 3 insn 31) }
;;   UD chains for insn luid 13 uid 33
;;      reg 25 { d200(bb 0 insn -1) }
;;   UD chains for insn luid 14 uid 35
;;      reg 140 { d1216(bb 3 insn 27) }
;;      reg 141 { d1217(bb 3 insn 33) }
;;   UD chains for insn luid 15 uid 36
;;      reg 155 { d1225(bb 3 insn 35) }
;;   UD chains for insn luid 16 uid 37
;;      reg 155 { d1225(bb 3 insn 35) }
;;   UD chains for insn luid 17 uid 38
;;      reg 158 { d1226(bb 3 insn 36) }
;;      reg 192 { d1242(bb 3 insn 37) }
;;   UD chains for insn luid 18 uid 39
;;      reg 155 { d1225(bb 3 insn 35) }
;;   UD chains for insn luid 19 uid 146
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 192 { d1241(bb 3 insn 38) }
;;   UD chains for insn luid 20 uid 147
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 193 { d1243(bb 3 insn 39) }
;;   UD chains for insn luid 22 uid 42
;;      reg 143 { d1218(bb 2 insn 2) }
;;   UD chains for insn luid 23 uid 43
;;      reg 138 { d1214(bb 3 insn 29) }
;;   UD chains for insn luid 24 uid 44
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 0 { d4(bb 3 insn 41) }
;;      reg 1 { d30(bb 3 insn 42) }
;;      reg 2 { d47(bb 3 insn 43) }

( 2 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u54(11){ d65(bb 0 insn -1) }u55(13){ d77(bb 0 insn -1) }u56(25){ d200(bb 0 insn -1) }u57(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143
;; live  gen 	 0 [r0] 138
;; live  kill	 14 [lr]
;; rd  in  	(17)
19, 36, 53, 64, 65, 76, 77, 88, 199, 200, 201, 1215, 1218, 1219, 1220, 1221, 1222
;; rd  gen 	(2)
12, 1213
;; rd  kill	(33)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 1213, 1214
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; rd  out 	(17)
12, 36, 53, 64, 65, 76, 77, 199, 200, 201, 1213, 1215, 1218, 1219, 1220, 1221, 1222
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 49
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 143 { d1218(bb 2 insn 2) }
;;   UD chains for insn luid 1 uid 50
;;      reg 0 { d12(bb 4 insn 49) }

( 4 3 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u61(11){ d65(bb 0 insn -1) }u62(13){ d77(bb 0 insn -1) }u63(25){ d200(bb 0 insn -1) }u64(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc] 159 160 163 165 166 167 168
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; live  gen 	 24 [cc] 159 160 163 165 166 167 168
;; live  kill	
;; rd  in  	(27)
12, 13, 36, 53, 64, 65, 76, 77, 199, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1241, 1243
;; rd  gen 	(8)
189, 1227, 1228, 1229, 1230, 1231, 1232, 1233
;; rd  kill	(28)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1227, 1228, 1229, 1230, 1231, 1232, 1233
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143 159
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; rd  out 	(34)
12, 13, 36, 53, 64, 65, 76, 77, 189, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 56
;;      reg 159 { d1227(bb 5 insn 53) }
;;      reg 160 { d1228(bb 5 insn 54) }
;;   UD chains for insn luid 3 uid 57
;;      reg 138 { d1214(bb 3 insn 29) d1213(bb 4 insn 50) }
;;   UD chains for insn luid 4 uid 58
;;      reg 24 { d191(bb 5 insn 57) }
;;   UD chains for insn luid 5 uid 60
;;      reg 138 { d1214(bb 3 insn 29) d1213(bb 4 insn 50) }
;;   UD chains for insn luid 6 uid 61
;;      reg 24 { d190(bb 5 insn 60) }
;;   UD chains for insn luid 7 uid 63
;;      reg 163 { d1229(bb 5 insn 58) }
;;      reg 165 { d1230(bb 5 insn 61) }
;;   UD chains for insn luid 8 uid 64
;;      reg 166 { d1231(bb 5 insn 63) }
;;   UD chains for insn luid 9 uid 65
;;      reg 167 { d1232(bb 5 insn 64) }
;;   UD chains for insn luid 10 uid 66
;;      reg 168 { d1233(bb 5 insn 65) }
;;   UD chains for insn luid 11 uid 67
;;      reg 24 { d189(bb 5 insn 66) }

( 5 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ d65(bb 0 insn -1) }u78(13){ d77(bb 0 insn -1) }u79(25){ d200(bb 0 insn -1) }u80(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143 159
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; lr  def 	 24 [cc] 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; live  gen 	 24 [cc] 170
;; live  kill	
;; rd  in  	(34)
12, 13, 36, 53, 64, 65, 76, 77, 189, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1241, 1243
;; rd  gen 	(2)
188, 1234
;; rd  kill	(22)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1234
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143 159
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; rd  out 	(35)
12, 13, 36, 53, 64, 65, 76, 77, 188, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 70
;;      reg 159 { d1227(bb 5 insn 53) }
;;   UD chains for insn luid 1 uid 71
;;      reg 170 { d1234(bb 6 insn 70) }
;;   UD chains for insn luid 2 uid 72
;;      reg 24 { d188(bb 6 insn 71) }

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u84(11){ d65(bb 0 insn -1) }u85(13){ d77(bb 0 insn -1) }u86(25){ d200(bb 0 insn -1) }u87(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 159
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; rd  in  	(35)
12, 13, 36, 53, 64, 65, 76, 77, 188, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1241, 1243
;; rd  gen 	(1)
11
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; rd  out 	(34)
11, 36, 53, 64, 65, 76, 77, 188, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 77
;;      reg 159 { d1227(bb 5 insn 53) }
;;   UD chains for insn luid 2 uid 79
;;      reg 138 { d1214(bb 3 insn 29) d1213(bb 4 insn 50) }
;;   UD chains for insn luid 3 uid 80
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 0 { d0(bb 7 insn 77) }
;;      reg 1 { d22(bb 7 insn 78) }
;;      reg 2 { d44(bb 7 insn 79) }

( 6 5 7 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u94(11){ d65(bb 0 insn -1) }u95(13){ d77(bb 0 insn -1) }u96(25){ d200(bb 0 insn -1) }u97(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 174 175 176
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; live  gen 	 24 [cc] 174 175 176
;; live  kill	
;; rd  in  	(37)
11, 12, 13, 36, 53, 64, 65, 76, 77, 188, 189, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1241, 1243
;; rd  gen 	(4)
186, 1235, 1236, 1237
;; rd  kill	(24)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1235, 1236, 1237
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143 174
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 174
;; rd  out 	(39)
11, 12, 13, 36, 53, 64, 65, 76, 77, 186, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 84
;;      reg 13 { d77(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 85
;;      reg 175 { d1236(bb 8 insn 84) }
;;   eq_note reg 13 { }
;;   UD chains for insn luid 2 uid 86
;;      reg 174 { d1235(bb 8 insn 85) }
;;   UD chains for insn luid 3 uid 87
;;      reg 139 { d1215(bb 2 insn 9) }
;;      reg 176 { d1237(bb 8 insn 86) }
;;   UD chains for insn luid 4 uid 88
;;      reg 24 { d186(bb 8 insn 87) }

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u105(11){ d65(bb 0 insn -1) }u106(13){ d77(bb 0 insn -1) }u107(25){ d200(bb 0 insn -1) }u108(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 174
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 174
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 174
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; rd  in  	(39)
11, 12, 13, 36, 53, 64, 65, 76, 77, 186, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1243
;; rd  gen 	(1)
10
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; rd  out 	(37)
10, 36, 53, 64, 65, 76, 77, 186, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 96
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 0 { d3(bb 9 insn 93) }
;;      reg 1 { d21(bb 9 insn 94) }
;;      reg 2 { d42(bb 9 insn 95) }
;;   UD chains for insn luid 4 uid 100
;;      reg 139 { d1215(bb 2 insn 9) }
;;      reg 174 { d1235(bb 8 insn 85) }

( 8 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u115(11){ d65(bb 0 insn -1) }u116(13){ d77(bb 0 insn -1) }u117(25){ d200(bb 0 insn -1) }u118(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 137 182
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; live  gen 	 24 [cc] 137 182
;; live  kill	 24 [cc]
;; rd  in  	(40)
10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 186, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1243
;; rd  gen 	(3)
183, 1212, 1238
;; rd  kill	(23)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1212, 1238
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; rd  out 	(42)
10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 183, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 104
;;      reg 137 { d1212(bb 10 insn 103) }
;;   UD chains for insn luid 2 uid 105
;;      reg 182 { d1238(bb 10 insn 104) }
;;   UD chains for insn luid 3 uid 106
;;      reg 24 { d183(bb 10 insn 105) }

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u122(11){ d65(bb 0 insn -1) }u123(13){ d77(bb 0 insn -1) }u124(25){ d200(bb 0 insn -1) }u125(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(42)
10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 183, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1243
;; rd  gen 	(1)
9
;; rd  kill	(52)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; rd  out 	(38)
9, 36, 53, 64, 65, 76, 77, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 114
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 0 { d2(bb 11 insn 111) }
;;      reg 1 { d20(bb 11 insn 112) }
;;      reg 2 { d40(bb 11 insn 113) }

( 10 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u130(11){ d65(bb 0 insn -1) }u131(13){ d77(bb 0 insn -1) }u132(25){ d200(bb 0 insn -1) }u133(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 186 187
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; live  gen 	 24 [cc] 186 187
;; live  kill	
;; rd  in  	(43)
9, 10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 183, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1243
;; rd  gen 	(3)
180, 1239, 1240
;; rd  kill	(23)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1239, 1240
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143 186
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143 186
;; rd  out 	(45)
9, 10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 119
;;      reg 186 { d1239(bb 12 insn 118) }
;;   UD chains for insn luid 2 uid 120
;;      reg 187 { d1240(bb 12 insn 119) }
;;   UD chains for insn luid 3 uid 121
;;      reg 24 { d180(bb 12 insn 120) }

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u137(11){ d65(bb 0 insn -1) }u138(13){ d77(bb 0 insn -1) }u139(25){ d200(bb 0 insn -1) }u140(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143 186
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 186
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143 186
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; rd  in  	(45)
9, 10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243
;; rd  gen 	(1)
8
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; rd  out 	(41)
8, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 127
;;      reg 143 { d1218(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 128
;;      reg 186 { d1239(bb 12 insn 118) }
;;   UD chains for insn luid 3 uid 129
;;      reg 13 { d77(bb 0 insn -1) }
;;      reg 0 { d1(bb 13 insn 126) }
;;      reg 1 { d24(bb 13 insn 127) }
;;      reg 2 { d37(bb 13 insn 128) }

( 12 13 )->[14]->( 1 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u147(11){ d65(bb 0 insn -1) }u148(13){ d77(bb 0 insn -1) }u149(25){ d200(bb 0 insn -1) }u150(26){ d201(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(46)
8, 9, 10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243
;; rd  gen 	(1)
6
;; rd  kill	(20)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(41)
6, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243
;;  UD chains for artificial uses
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 25 { d200(bb 0 insn -1) }
;;   reg 26 { d201(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 136
;;      reg 138 { d1214(bb 3 insn 29) d1213(bb 4 insn 50) }
;;   UD chains for insn luid 1 uid 142
;;      reg 0 { d6(bb 14 insn 136) }

( 14 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u153(0){ d6(bb 14 insn 136) }u154(11){ d65(bb 0 insn -1) }u155(13){ d77(bb 0 insn -1) }u156(14){ }u157(25){ d200(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(41)
6, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(41)
6, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243
;;  UD chains for artificial uses
;;   reg 0 { d6(bb 14 insn 136) }
;;   reg 11 { d65(bb 0 insn -1) }
;;   reg 13 { d77(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d200(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 148 to worklist
  Adding insn 44 to worklist
  Adding insn 147 to worklist
  Adding insn 146 to worklist
  Adding insn 32 to worklist
  Adding insn 28 to worklist
  Adding insn 26 to worklist
  Adding insn 23 to worklist
  Adding insn 49 to worklist
  Adding insn 67 to worklist
  Adding insn 56 to worklist
  Adding insn 72 to worklist
  Adding insn 80 to worklist
  Adding insn 88 to worklist
  Adding insn 100 to worklist
  Adding insn 96 to worklist
  Adding insn 106 to worklist
  Adding insn 103 to worklist
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 121 to worklist
  Adding insn 129 to worklist
  Adding insn 142 to worklist
Finished finding needed instructions:
  Adding insn 136 to worklist
Processing use of (reg 138 [ ret ]) in insn 136:
  Adding insn 29 to worklist
  Adding insn 50 to worklist
Processing use of (reg 0 r0) in insn 50:
Processing use of (reg 0 r0) in insn 29:
Processing use of (reg 0 r0) in insn 142:
Processing use of (reg 13 sp) in insn 129:
Processing use of (reg 0 r0) in insn 129:
  Adding insn 126 to worklist
Processing use of (reg 1 r1) in insn 129:
  Adding insn 127 to worklist
Processing use of (reg 2 r2) in insn 129:
  Adding insn 128 to worklist
Processing use of (reg 186) in insn 128:
  Adding insn 118 to worklist
Processing use of (reg 143 [ fn ]) in insn 127:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 24 cc) in insn 121:
  Adding insn 120 to worklist
Processing use of (reg 187 [ msgbuf ]) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 186) in insn 119:
Processing use of (reg 13 sp) in insn 114:
Processing use of (reg 0 r0) in insn 114:
  Adding insn 111 to worklist
Processing use of (reg 1 r1) in insn 114:
  Adding insn 112 to worklist
Processing use of (reg 2 r2) in insn 114:
  Adding insn 113 to worklist
Processing use of (reg 24 cc) in insn 106:
  Adding insn 105 to worklist
Processing use of (reg 182) in insn 105:
  Adding insn 104 to worklist
Processing use of (reg 137 [ _flags ]) in insn 104:
Processing use of (reg 13 sp) in insn 96:
Processing use of (reg 0 r0) in insn 96:
  Adding insn 93 to worklist
Processing use of (reg 1 r1) in insn 96:
  Adding insn 94 to worklist
Processing use of (reg 2 r2) in insn 96:
  Adding insn 95 to worklist
Processing use of (reg 139 [ count ]) in insn 100:
  Adding insn 9 to worklist
Processing use of (reg 174) in insn 100:
  Adding insn 85 to worklist
Processing use of (reg 175) in insn 85:
  Adding insn 84 to worklist
Processing use of (reg 13 sp) in insn 84:
Processing use of (reg 144) in insn 9:
  Adding insn 8 to worklist
Processing use of (reg 145) in insn 8:
  Adding insn 7 to worklist
Processing use of (reg 13 sp) in insn 7:
Processing use of (reg 24 cc) in insn 88:
  Adding insn 87 to worklist
Processing use of (reg 139 [ count ]) in insn 87:
Processing use of (reg 176 [ <variable>.preempt_count ]) in insn 87:
  Adding insn 86 to worklist
Processing use of (reg 174) in insn 86:
Processing use of (reg 13 sp) in insn 80:
Processing use of (reg 0 r0) in insn 80:
  Adding insn 77 to worklist
Processing use of (reg 1 r1) in insn 80:
  Adding insn 78 to worklist
Processing use of (reg 2 r2) in insn 80:
  Adding insn 79 to worklist
Processing use of (reg 138 [ ret ]) in insn 79:
Processing use of (reg 159) in insn 77:
  Adding insn 53 to worklist
Processing use of (reg 24 cc) in insn 72:
  Adding insn 71 to worklist
Processing use of (reg 170 [ initcall_debug ]) in insn 71:
  Adding insn 70 to worklist
Processing use of (reg 159) in insn 70:
Processing use of (reg 159) in insn 56:
Processing use of (subreg (reg 160) 0) in insn 56:
  Adding insn 54 to worklist
Processing use of (reg 24 cc) in insn 67:
  Adding insn 66 to worklist
Processing use of (reg 168) in insn 66:
  Adding insn 65 to worklist
Processing use of (reg 167) in insn 65:
  Adding insn 64 to worklist
Processing use of (subreg (reg 166) 0) in insn 64:
  Adding insn 63 to worklist
Processing use of (reg 163) in insn 63:
  Adding insn 58 to worklist
Processing use of (reg 165) in insn 63:
  Adding insn 61 to worklist
Processing use of (reg 24 cc) in insn 61:
  Adding insn 60 to worklist
Processing use of (reg 138 [ ret ]) in insn 60:
Processing use of (reg 24 cc) in insn 58:
  Adding insn 57 to worklist
Processing use of (reg 138 [ ret ]) in insn 57:
Processing use of (reg 13 sp) in insn 49:
Processing use of (reg 143 [ fn ]) in insn 49:
Processing use of (reg 13 sp) in insn 23:
Processing use of (reg 0 r0) in insn 23:
  Adding insn 20 to worklist
Processing use of (reg 1 r1) in insn 23:
  Adding insn 21 to worklist
Processing use of (reg 2 r2) in insn 23:
  Adding insn 22 to worklist
Processing use of (reg 151 [ <variable>.task ]) in insn 22:
  Adding insn 19 to worklist
Processing use of (reg 144) in insn 19:
Processing use of (reg 143 [ fn ]) in insn 21:
Processing use of (reg 13 sp) in insn 26:
Processing use of (reg 0 r0) in insn 26:
  Adding insn 25 to worklist
Processing use of (reg 152) in insn 25:
  Adding insn 24 to worklist
Processing use of (reg 25 sfp) in insn 24:
Processing use of (reg 13 sp) in insn 28:
Processing use of (reg 143 [ fn ]) in insn 28:
Processing use of (reg 13 sp) in insn 32:
Processing use of (reg 0 r0) in insn 32:
  Adding insn 31 to worklist
Processing use of (reg 152) in insn 31:
Processing use of (reg 13 sp) in insn 146:
Processing use of (reg 192) in insn 146:
  Adding insn 38 to worklist
Processing use of (reg 158) in insn 38:
  Adding insn 36 to worklist
Processing use of (reg 192) in insn 38:
  Adding insn 37 to worklist
Processing use of (subreg (reg 155) 0) in insn 37:
  Adding insn 35 to worklist
Processing use of (reg 140 [ calltime ]) in insn 35:
  Adding insn 27 to worklist
Processing use of (reg 141 [ rettime ]) in insn 35:
  Adding insn 33 to worklist
Processing use of (reg 25 sfp) in insn 33:
Processing use of (reg 25 sfp) in insn 27:
Processing use of (subreg (reg 155) 4) in insn 36:
Processing use of (reg 13 sp) in insn 147:
Processing use of (reg 193 [+4 ]) in insn 147:
  Adding insn 39 to worklist
Processing use of (subreg (reg 155) 4) in insn 39:
Processing use of (reg 13 sp) in insn 44:
Processing use of (reg 0 r0) in insn 44:
  Adding insn 41 to worklist
Processing use of (reg 1 r1) in insn 44:
  Adding insn 42 to worklist
Processing use of (reg 2 r2) in insn 44:
  Adding insn 43 to worklist
Processing use of (reg 138 [ ret ]) in insn 43:
Processing use of (reg 143 [ fn ]) in insn 42:
Processing use of (reg 24 cc) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 147 [ initcall_debug ]) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 146) in insn 11:
  Adding insn 10 to worklist


do_one_initcall

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={20d,13u} r1={17d,6u} r2={17d,6u} r3={11d} r11={1d,14u} r12={11d} r13={1d,28u,2d} r14={11d,1u} r15={10d} r16={10d} r17={10d} r18={10d} r19={10d} r20={10d} r21={10d} r22={10d} r23={10d} r24={21d,8u} r25={1d,17u,2d} r26={1d,13u} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} r81={10d} r82={10d} r83={10d} r84={10d} r85={10d} r86={10d} r87={10d} r88={10d} r89={10d} r90={10d} r91={10d} r92={10d} r93={10d} r94={10d} r95={10d} r96={10d} r97={10d} r98={10d} r99={10d} r100={10d} r101={10d} r102={10d} r103={10d} r104={10d} r105={10d} r106={10d} r107={10d} r108={10d} r109={10d} r110={10d} r111={10d} r112={10d} r113={10d} r114={10d} r115={10d} r116={10d} r117={10d} r118={10d} r119={10d} r120={10d} r121={10d} r122={10d} r123={10d} r124={10d} r125={10d} r126={10d} r127={10d} r137={1d,1u} r138={2d,5u} r139={1d,2u} r140={1d,1u} r141={1d,1u} r143={1d,5u} r144={1d,2u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r151={1d,1u} r152={1d,2u} r155={1d,3u} r158={1d,1u} r159={1d,3u} r160={1d,1u} r163={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r170={1d,1u} r174={1d,2u} r175={1d,1u} r176={1d,1u} r182={1d,1u} r186={1d,2u} r187={1d,1u} r192={2d,2u} r193={1d,1u} 
;;    total ref usage 1402{1244d,154u,4e} in 84{74 regular + 10 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211
0[0,20] 1[20,17] 2[37,17] 3[54,11] 11[65,1] 12[66,11] 13[77,1] 14[78,11] 15[89,10] 16[99,10] 17[109,10] 18[119,10] 19[129,10] 20[139,10] 21[149,10] 22[159,10] 23[169,10] 24[179,21] 25[200,1] 26[201,1] 27[202,10] 28[212,10] 29[222,10] 30[232,10] 31[242,10] 32[252,10] 33[262,10] 34[272,10] 35[282,10] 36[292,10] 37[302,10] 38[312,10] 39[322,10] 40[332,10] 41[342,10] 42[352,10] 43[362,10] 44[372,10] 45[382,10] 46[392,10] 47[402,10] 48[412,10] 49[422,10] 50[432,10] 51[442,10] 52[452,10] 53[462,10] 54[472,10] 55[482,10] 56[492,10] 57[502,10] 58[512,10] 59[522,10] 60[532,10] 61[542,10] 62[552,10] 63[562,10] 64[572,10] 65[582,10] 66[592,10] 67[602,10] 68[612,10] 69[622,10] 70[632,10] 71[642,10] 72[652,10] 73[662,10] 74[672,10] 75[682,10] 76[692,10] 77[702,10] 78[712,10] 79[722,10] 80[732,10] 81[742,10] 82[752,10] 83[762,10] 84[772,10] 85[782,10] 86[792,10] 87[802,10] 88[812,10] 89[822,10] 90[832,10] 91[842,10] 92[852,10] 93[862,10] 94[872,10] 95[882,10] 96[892,10] 97[902,10] 98[912,10] 99[922,10] 100[932,10] 101[942,10] 102[952,10] 103[962,10] 104[972,10] 105[982,10] 106[992,10] 107[1002,10] 108[1012,10] 109[1022,10] 110[1032,10] 111[1042,10] 112[1052,10] 113[1062,10] 114[1072,10] 115[1082,10] 116[1092,10] 117[1102,10] 118[1112,10] 119[1122,10] 120[1132,10] 121[1142,10] 122[1152,10] 123[1162,10] 124[1172,10] 125[1182,10] 126[1192,10] 127[1202,10] 137[1212,1] 138[1213,2] 139[1215,1] 140[1216,1] 141[1217,1] 143[1218,1] 144[1219,1] 145[1220,1] 146[1221,1] 147[1222,1] 151[1223,1] 152[1224,1] 155[1225,1] 158[1226,1] 159[1227,1] 160[1228,1] 163[1229,1] 165[1230,1] 166[1231,1] 167[1232,1] 168[1233,1] 170[1234,1] 174[1235,1] 175[1236,1] 176[1237,1] 182[1238,1] 186[1239,1] 187[1240,1] 192[1241,2] 193[1243,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 139 143 144 145 146 147
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 139 143 144 145 146 147
;; live  kill	
;; rd  in  	(10)
19, 36, 53, 64, 65, 76, 77, 88, 200, 201
;; rd  gen 	(7)
199, 1215, 1218, 1219, 1220, 1221, 1222
;; rd  kill	(27)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1215, 1218, 1219, 1220, 1221, 1222

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 init/main.c:678 (set (reg/v/f:SI 143 [ fn ])
        (reg:SI 0 r0 [ fn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ fn ])
        (nil)))

(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 3 8 2 init/main.c:679 (set (reg:SI 145)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 8 7 9 2 init/main.c:679 (set (reg:SI 144)
        (and:SI (reg:SI 145)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 145)
        (expr_list:REG_EQUAL (and:SI (reg/f:SI 13 sp)
                (const_int -8192 [0xffffffffffffe000]))
            (nil))))

(insn 9 8 10 2 init/main.c:679 (set (reg/v:SI 139 [ count ])
        (mem/s/j:SI (plus:SI (reg:SI 144)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 init/main.c:682 (set (reg/f:SI 146)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 12 2 init/main.c:682 (set (reg:SI 147 [ initcall_debug ])
        (mem/c/i:SI (plus:SI (reg/f:SI 146)
                (const_int 12 [0xc])) [0 initcall_debug+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 146)
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 initcall_debug+0 S4 A32])
            (nil))))

(insn 12 11 13 2 init/main.c:682 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 147 [ initcall_debug ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 147 [ initcall_debug ])
        (nil)))

(jump_insn 13 12 14 2 init/main.c:682 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143 144
;; rd  out 	(17)
19, 36, 53, 64, 65, 76, 77, 88, 199, 200, 201, 1215, 1218, 1219, 1220, 1221, 1222


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u12(11){ }u13(13){ }u14(25){ }u15(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 140 141 151 152 155 158 192 193
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 138 140 141 151 152 155 158 192 193
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(17)
19, 36, 53, 64, 65, 76, 77, 88, 199, 200, 201, 1215, 1218, 1219, 1220, 1221, 1222
;; rd  gen 	(10)
13, 1214, 1216, 1217, 1223, 1224, 1225, 1226, 1241, 1243
;; rd  kill	(42)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 1213, 1214, 1216, 1217, 1223, 1224, 1225, 1226, 1241, 1242, 1243

;; Pred edge  2 [0.0%]  (fallthru)
(note 14 13 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 19 14 20 3 init/main.c:665 (set (reg/f:SI 151 [ <variable>.task ])
        (mem/s/f/j:SI (plus:SI (reg:SI 144)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 144)
        (nil)))

(insn 20 19 21 3 init/main.c:665 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11a9f360>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11a9f360>)
        (nil)))

(insn 21 20 22 3 init/main.c:665 (set (reg:SI 1 r1)
        (reg/v/f:SI 143 [ fn ])) 167 {*arm_movsi_insn} (nil))

(insn 22 21 23 3 init/main.c:665 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/f:SI 151 [ <variable>.task ])
                (const_int 532 [0x214])) [0 <variable>.pid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 151 [ <variable>.task ])
        (nil)))

(call_insn 23 22 24 3 init/main.c:665 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 24 23 25 3 init/main.c:666 (set (reg/f:SI 152)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -8 [0xfffffffffffffff8]))) 4 {*arm_addsi3} (nil))

(insn 25 24 26 3 init/main.c:666 (set (reg:SI 0 r0)
        (reg/f:SI 152)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(call_insn 26 25 27 3 init/main.c:666 (parallel [
            (call (mem:SI (symbol_ref:SI ("ktime_get") [flags 0x41] <function_decl 0x11299080 ktime_get>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 27 26 28 3 init/main.c:666 (set (reg/v:DI 140 [ calltime ])
        (mem/s:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 S8 A64])) 163 {*arm_movdi} (nil))

(call_insn 28 27 29 3 init/main.c:667 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/v/f:SI 143 [ fn ]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 249 {*call_value_reg_armv5} (nil)
    (nil))

(insn 29 28 31 3 init/main.c:667 (set (reg/v:SI 138 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 31 29 32 3 init/main.c:668 (set (reg:SI 0 r0)
        (reg/f:SI 152)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 152)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8]))
            (nil))))

(call_insn 32 31 33 3 init/main.c:668 (parallel [
            (call (mem:SI (symbol_ref:SI ("ktime_get") [flags 0x41] <function_decl 0x11299080 ktime_get>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 33 32 35 3 init/main.c:668 (set (reg/v:DI 141 [ rettime ])
        (mem/s:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 35 33 36 3 init/main.c:671 (parallel [
            (set (reg:DI 155)
                (minus:DI (reg/v:DI 141 [ rettime ])
                    (reg/v:DI 140 [ calltime ])))
            (clobber (reg:CC 24 cc))
        ]) 20 {*arm_subdi3} (expr_list:REG_DEAD (reg/v:DI 141 [ rettime ])
        (expr_list:REG_DEAD (reg/v:DI 140 [ calltime ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 36 35 37 3 init/main.c:671 (set (reg:SI 158)
        (ashift:SI (subreg:SI (reg:DI 155) 4)
            (const_int 22 [0x16]))) 117 {*arm_shiftsi3} (nil))

(insn 37 36 38 3 init/main.c:671 (set (reg:SI 192)
        (lshiftrt:SI (subreg:SI (reg:DI 155) 0)
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (nil))

(insn 38 37 39 3 init/main.c:671 (set (reg:SI 192)
        (ior:SI (reg:SI 158)
            (reg:SI 192))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 158)
        (nil)))

(insn 39 38 146 3 init/main.c:671 (set (reg:SI 193 [+4 ])
        (lshiftrt:SI (subreg:SI (reg:DI 155) 4)
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 155)
        (nil)))

(insn 146 39 147 3 init/main.c:671 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A64])
        (reg:SI 192)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 192)
        (nil)))

(insn 147 146 41 3 init/main.c:671 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 193 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 193 [+4 ])
        (nil)))

(insn 41 147 42 3 init/main.c:671 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11add730>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11add730>)
        (nil)))

(insn 42 41 43 3 init/main.c:671 (set (reg:SI 1 r1)
        (reg/v/f:SI 143 [ fn ])) 167 {*arm_movsi_insn} (nil))

(insn 43 42 44 3 init/main.c:671 (set (reg:SI 2 r2)
        (reg/v:SI 138 [ ret ])) 167 {*arm_movsi_insn} (nil))

(call_insn 44 43 148 3 init/main.c:671 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 148 44 149 3 (set (pc)
        (label_ref 51)) -1 (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; rd  out 	(25)
13, 36, 53, 64, 65, 76, 77, 199, 200, 201, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1241, 1243


;; Succ edge  5 [100.0%] 

(barrier 149 148 47)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u54(11){ }u55(13){ }u56(25){ }u57(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 143
;; live  gen 	 0 [r0] 138
;; live  kill	 14 [lr]
;; rd  in  	(17)
19, 36, 53, 64, 65, 76, 77, 88, 199, 200, 201, 1215, 1218, 1219, 1220, 1221, 1222
;; rd  gen 	(2)
12, 1213
;; rd  kill	(33)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 1213, 1214

;; Pred edge  2 [100.0%] 
(code_label 47 149 48 4 37 "" [1 uses])

(note 48 47 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(call_insn 49 48 50 4 init/main.c:685 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/v/f:SI 143 [ fn ]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 249 {*call_value_reg_armv5} (nil)
    (nil))

(insn 50 49 51 4 init/main.c:685 (set (reg/v:SI 138 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; rd  out 	(17)
12, 36, 53, 64, 65, 76, 77, 199, 200, 201, 1213, 1215, 1218, 1219, 1220, 1221, 1222


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u61(11){ }u62(13){ }u63(25){ }u64(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc] 159 160 163 165 166 167 168
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; live  gen 	 24 [cc] 159 160 163 165 166 167 168
;; live  kill	
;; rd  in  	(27)
12, 13, 36, 53, 64, 65, 76, 77, 199, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1241, 1243
;; rd  gen 	(8)
189, 1227, 1228, 1229, 1230, 1231, 1232, 1233
;; rd  kill	(28)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1227, 1228, 1229, 1230, 1231, 1232, 1233

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 51 50 52 5 38 "" [1 uses])

(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 5 init/main.c:687 (set (reg/f:SI 159)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 54 53 56 5 init/main.c:687 (set (reg:SI 160)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 56 54 57 5 init/main.c:687 (set (mem/s/j:QI (plus:SI (reg/f:SI 159)
                (const_int 16 [0x10])) [0 msgbuf+0 S1 A32])
        (subreg:QI (reg:SI 160) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 160)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 57 56 58 5 init/main.c:689 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ ret ])
            (const_int -19 [0xffffffffffffffed]))) 219 {*arm_cmpsi_insn} (nil))

(insn 58 57 60 5 init/main.c:689 (set (reg:SI 163)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 60 58 61 5 init/main.c:689 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ ret ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 61 60 63 5 init/main.c:689 (set (reg:SI 165)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 63 61 64 5 init/main.c:689 (set (reg:SI 166)
        (and:SI (reg:SI 163)
            (reg:SI 165))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 165)
        (expr_list:REG_DEAD (reg:SI 163)
            (nil))))

(insn 64 63 65 5 init/main.c:689 (set (reg:QI 167)
        (subreg:QI (reg:SI 166) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 166)
        (nil)))

(insn 65 64 66 5 init/main.c:689 (set (reg:SI 168)
        (zero_extend:SI (reg:QI 167))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 167)
        (nil)))

(insn 66 65 67 5 init/main.c:689 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 168)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(jump_insn 67 66 68 5 init/main.c:689 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143 159
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; rd  out 	(34)
12, 13, 36, 53, 64, 65, 76, 77, 189, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1241, 1243


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ }u78(13){ }u79(25){ }u80(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143 159
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; lr  def 	 24 [cc] 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; live  gen 	 24 [cc] 170
;; live  kill	
;; rd  in  	(34)
12, 13, 36, 53, 64, 65, 76, 77, 189, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1241, 1243
;; rd  gen 	(2)
188, 1234
;; rd  kill	(22)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1234

;; Pred edge  5 [50.0%]  (fallthru)
(note 68 67 70 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 70 68 71 6 init/main.c:689 discrim 1 (set (reg:SI 170 [ initcall_debug ])
        (mem/c/i:SI (plus:SI (reg/f:SI 159)
                (const_int 12 [0xc])) [0 initcall_debug+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 initcall_debug+0 S4 A32])
        (nil)))

(insn 71 70 72 6 init/main.c:689 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 170 [ initcall_debug ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 170 [ initcall_debug ])
        (nil)))

(jump_insn 72 71 73 6 init/main.c:689 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143 159
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; rd  out 	(35)
12, 13, 36, 53, 64, 65, 76, 77, 188, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1241, 1243


;; Succ edge  7 [29.0%]  (fallthru)
;; Succ edge  8 [71.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u84(11){ }u85(13){ }u86(25){ }u87(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 159
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 159
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; rd  in  	(35)
12, 13, 36, 53, 64, 65, 76, 77, 188, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1241, 1243
;; rd  gen 	(1)
11
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88

;; Pred edge  6 [29.0%]  (fallthru)
(note 73 72 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 77 73 78 7 init/main.c:690 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 159)
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 159)
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10])))
            (nil))))

(insn 78 77 79 7 init/main.c:690 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11b105d0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11b105d0>)
        (nil)))

(insn 79 78 80 7 init/main.c:690 (set (reg:SI 2 r2)
        (reg/v:SI 138 [ ret ])) 167 {*arm_movsi_insn} (nil))

(call_insn 80 79 81 7 init/main.c:690 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintf") [flags 0x41] <function_decl 0x5115e780 sprintf>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; rd  out 	(34)
11, 36, 53, 64, 65, 76, 77, 188, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1241, 1243


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 5 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u94(11){ }u95(13){ }u96(25){ }u97(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 174 175 176
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143
;; live  gen 	 24 [cc] 174 175 176
;; live  kill	
;; rd  in  	(37)
11, 12, 13, 36, 53, 64, 65, 76, 77, 188, 189, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1241, 1243
;; rd  gen 	(4)
186, 1235, 1236, 1237
;; rd  kill	(24)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1235, 1236, 1237

;; Pred edge  6 [71.0%] 
;; Pred edge  5 [50.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 81 80 82 8 39 "" [2 uses])

(note 82 81 84 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 84 82 85 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 175)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 85 84 86 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 174)
        (and:SI (reg:SI 175)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 175)
        (expr_list:REG_EQUAL (and:SI (reg/f:SI 13 sp)
                (const_int -8192 [0xffffffffffffe000]))
            (nil))))

(insn 86 85 87 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 176 [ <variable>.preempt_count ])
        (mem/s/j:SI (plus:SI (reg:SI 174)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 87 86 88 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 176 [ <variable>.preempt_count ])
            (reg/v:SI 139 [ count ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 176 [ <variable>.preempt_count ])
        (nil)))

(jump_insn 88 87 89 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 101)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4877 [0x130d])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 143 174
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 174
;; rd  out 	(39)
11, 12, 13, 36, 53, 64, 65, 76, 77, 186, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1243


;; Succ edge  9 [51.2%]  (fallthru)
;; Succ edge  10 [48.8%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u105(11){ }u106(13){ }u107(25){ }u108(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 174
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 174
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 143 174
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; rd  in  	(39)
11, 12, 13, 36, 53, 64, 65, 76, 77, 186, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1243
;; rd  gen 	(1)
10
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88

;; Pred edge  8 [51.2%]  (fallthru)
(note 89 88 93 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 93 89 94 9 init/main.c:693 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 94 93 95 9 init/main.c:693 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x11b10930>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x11b10930>)
        (nil)))

(insn 95 94 96 9 init/main.c:693 (set (reg:SI 2 r2)
        (const_int 64 [0x40])) 167 {*arm_movsi_insn} (nil))

(call_insn 96 95 100 9 init/main.c:693 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlcat") [flags 0x41] <function_decl 0x10bb1500 strlcat>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 100 96 101 9 init/main.c:694 (set (mem/s/j:SI (plus:SI (reg:SI 174)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg/v:SI 139 [ count ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 174)
        (expr_list:REG_DEAD (reg/v:SI 139 [ count ])
            (nil))))
;; End of basic block 9 -> ( 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; rd  out 	(37)
10, 36, 53, 64, 65, 76, 77, 186, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1243


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u115(11){ }u116(13){ }u117(25){ }u118(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 137 182
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; live  gen 	 24 [cc] 137 182
;; live  kill	 24 [cc]
;; rd  in  	(40)
10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 186, 200, 201, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1241, 1243
;; rd  gen 	(3)
183, 1212, 1238
;; rd  kill	(23)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1212, 1238

;; Pred edge  8 [48.8%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 101 100 102 10 40 "" [1 uses])

(note 102 101 103 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 103 102 104 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:131 (parallel [
            (set (reg/v:SI 137 [ _flags ])
                (asm_operands/v:SI ("	mrs	%0, cpsr	@ local_save_flags") ("=r") 0 []
                     [] 1118201))
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn 104 103 105 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:SI 182)
        (and:SI (reg/v:SI 137 [ _flags ])
            (const_int 128 [0x80]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ _flags ])
        (nil)))

(insn 105 104 106 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 182)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 182)
        (nil)))

(jump_insn 106 105 107 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 116)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; rd  out 	(42)
10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 183, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1243


;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  12 [71.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u122(11){ }u123(13){ }u124(25){ }u125(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(42)
10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 183, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1243
;; rd  gen 	(1)
9
;; rd  kill	(52)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199

;; Pred edge  10 [29.0%]  (fallthru)
(note 107 106 111 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 111 107 112 11 init/main.c:697 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 112 111 113 11 init/main.c:697 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x11b10db0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x11b10db0>)
        (nil)))

(insn 113 112 114 11 init/main.c:697 (set (reg:SI 2 r2)
        (const_int 64 [0x40])) 167 {*arm_movsi_insn} (nil))

(call_insn 114 113 115 11 init/main.c:697 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlcat") [flags 0x41] <function_decl 0x10bb1500 strlcat>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 115 114 116 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:26 (parallel [
            (asm_operands/v ("	cpsie i			@ arch_local_irq_enable") ("") 0 []
                 [] 1104761)
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; rd  out 	(38)
9, 36, 53, 64, 65, 76, 77, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1243


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u130(11){ }u131(13){ }u132(25){ }u133(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 186 187
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143
;; live  gen 	 24 [cc] 186 187
;; live  kill	
;; rd  in  	(43)
9, 10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 183, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1243
;; rd  gen 	(3)
180, 1239, 1240
;; rd  kill	(23)
179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 1239, 1240

;; Pred edge  10 [71.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 116 115 117 12 41 "" [1 uses])

(note 117 116 118 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 12 init/main.c:700 (set (reg/f:SI 186)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 119 118 120 12 init/main.c:700 (set (reg:SI 187 [ msgbuf ])
        (zero_extend:SI (mem/s/j:QI (plus:SI (reg/f:SI 186)
                    (const_int 16 [0x10])) [0 msgbuf+0 S1 A32]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/s/j:QI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 16 [0x10]))) [0 msgbuf+0 S1 A32]))
        (nil)))

(insn 120 119 121 12 init/main.c:700 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 187 [ msgbuf ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 187 [ msgbuf ])
        (nil)))

(jump_insn 121 120 122 12 init/main.c:700 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 130)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 143 186
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143 186
;; rd  out 	(45)
9, 10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243


;; Succ edge  13 [0.0%]  (fallthru)
;; Succ edge  14 [100.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u137(11){ }u138(13){ }u139(25){ }u140(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143 186
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 186
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 143 186
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; rd  in  	(45)
9, 10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243
;; rd  gen 	(1)
8
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88

;; Pred edge  12 [0.0%]  (fallthru)
(note 122 121 126 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 126 122 127 13 init/main.c:701 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11b089c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11b089c0>)
        (nil)))

(insn 127 126 128 13 init/main.c:701 (set (reg:SI 1 r1)
        (reg/v/f:SI 143 [ fn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 143 [ fn ])
        (nil)))

(insn 128 127 129 13 init/main.c:701 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 186)
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 186)
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10])))
            (nil))))

(call_insn 129 128 130 13 init/main.c:701 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 13 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; rd  out 	(41)
8, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 12 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u147(11){ }u148(13){ }u149(25){ }u150(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(46)
8, 9, 10, 11, 12, 13, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243
;; rd  gen 	(1)
6
;; rd  kill	(20)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19

;; Pred edge  12 [100.0%] 
;; Pred edge  13 [100.0%]  (fallthru)
(code_label 130 129 131 14 42 "" [1 uses])

(note 131 130 136 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 136 131 142 14 init/main.c:705 (set (reg/i:SI 0 r0)
        (reg/v:SI 138 [ ret ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ ret ])
        (nil)))

(insn 142 136 0 14 init/main.c:705 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 14 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(41)
6, 36, 53, 64, 65, 76, 77, 180, 200, 201, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function parse_early_options (parse_early_options)[0:2055] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


parse_early_options

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={3d,2u} r3={3d,1u} r11={1d,2u} r12={2d} r13={1d,4u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} r134={1d,1u} r135={1d,1u} 
;;    total ref usage 153{134d,19u,0e} in 9{8 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130
0[0,3] 1[3,3] 2[6,3] 3[9,3] 11[12,1] 12[13,2] 13[15,1] 14[16,2] 15[18,1] 16[19,1] 17[20,1] 18[21,1] 19[22,1] 20[23,1] 21[24,1] 22[25,1] 23[26,1] 24[27,1] 25[28,1] 26[29,1] 27[30,1] 28[31,1] 29[32,1] 30[33,1] 31[34,1] 32[35,1] 33[36,1] 34[37,1] 35[38,1] 36[39,1] 37[40,1] 38[41,1] 39[42,1] 40[43,1] 41[44,1] 42[45,1] 43[46,1] 44[47,1] 45[48,1] 46[49,1] 47[50,1] 48[51,1] 49[52,1] 50[53,1] 51[54,1] 52[55,1] 53[56,1] 54[57,1] 55[58,1] 56[59,1] 57[60,1] 58[61,1] 59[62,1] 60[63,1] 61[64,1] 62[65,1] 63[66,1] 64[67,1] 65[68,1] 66[69,1] 67[70,1] 68[71,1] 69[72,1] 70[73,1] 71[74,1] 72[75,1] 73[76,1] 74[77,1] 75[78,1] 76[79,1] 77[80,1] 78[81,1] 79[82,1] 80[83,1] 81[84,1] 82[85,1] 83[86,1] 84[87,1] 85[88,1] 86[89,1] 87[90,1] 88[91,1] 89[92,1] 90[93,1] 91[94,1] 92[95,1] 93[96,1] 94[97,1] 95[98,1] 96[99,1] 97[100,1] 98[101,1] 99[102,1] 100[103,1] 101[104,1] 102[105,1] 103[106,1] 104[107,1] 105[108,1] 106[109,1] 107[110,1] 108[111,1] 109[112,1] 110[113,1] 111[114,1] 112[115,1] 113[116,1] 114[117,1] 115[118,1] 116[119,1] 117[120,1] 118[121,1] 119[122,1] 120[123,1] 121[124,1] 122[125,1] 123[126,1] 124[127,1] 125[128,1] 126[129,1] 127[130,1] 133[131,1] 134[132,1] 135[133,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d2(0){ }d5(1){ }d8(2){ }d11(3){ }d12(11){ }d14(12){ }d15(13){ }d17(14){ }d28(25){ }d29(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
2, 5, 8, 11, 12, 14, 15, 17, 28, 29
;; rd  kill	(20)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 28, 29
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
2, 5, 8, 11, 12, 14, 15, 17, 28, 29

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d12(bb 0 insn -1) }u1(13){ d15(bb 0 insn -1) }u2(25){ d28(bb 0 insn -1) }u3(26){ d29(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 133 134 135
;; live  kill	 14 [lr]
;; rd  in  	(10)
2, 5, 8, 11, 12, 14, 15, 17, 28, 29
;; rd  gen 	(4)
0, 131, 132, 133
;; rd  kill	(8)
0, 1, 2, 16, 17, 131, 132, 133
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(12)
0, 5, 8, 11, 12, 14, 15, 28, 29, 131, 132, 133
;;  UD chains for artificial uses
;;   reg 11 { d12(bb 0 insn -1) }
;;   reg 13 { d15(bb 0 insn -1) }
;;   reg 25 { d28(bb 0 insn -1) }
;;   reg 26 { d29(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d2(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 8
;;      reg 13 { d15(bb 0 insn -1) }
;;      reg 135 { d133(bb 2 insn 7) }
;;   UD chains for insn luid 4 uid 9
;;      reg 134 { d132(bb 2 insn 6) }
;;   UD chains for insn luid 5 uid 10
;;      reg 133 { d131(bb 2 insn 2) }
;;   UD chains for insn luid 7 uid 12
;;      reg 2 { d7(bb 2 insn 11) }
;;   UD chains for insn luid 8 uid 13
;;      reg 13 { d15(bb 0 insn -1) }
;;      reg 0 { d1(bb 2 insn 9) }
;;      reg 1 { d4(bb 2 insn 10) }
;;      reg 2 { d7(bb 2 insn 11) }
;;      reg 3 { d9(bb 2 insn 12) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u15(11){ d12(bb 0 insn -1) }u16(13){ d15(bb 0 insn -1) }u17(14){ }u18(25){ d28(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(12)
0, 5, 8, 11, 12, 14, 15, 28, 29, 131, 132, 133
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(12)
0, 5, 8, 11, 12, 14, 15, 28, 29, 131, 132, 133
;;  UD chains for artificial uses
;;   reg 11 { d12(bb 0 insn -1) }
;;   reg 13 { d15(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d28(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 8 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 8:
Processing use of (reg 135) in insn 8:
  Adding insn 7 to worklist
Processing use of (reg 13 sp) in insn 13:
Processing use of (reg 0 r0) in insn 13:
  Adding insn 9 to worklist
Processing use of (reg 1 r1) in insn 13:
  Adding insn 10 to worklist
Processing use of (reg 2 r2) in insn 13:
  Adding insn 11 to worklist
Processing use of (reg 3 r3) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 2 r2) in insn 12:
Processing use of (reg 133 [ cmdline ]) in insn 10:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 134) in insn 9:
  Adding insn 6 to worklist


parse_early_options

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={3d,2u} r1={3d,1u} r2={3d,2u} r3={3d,1u} r11={1d,2u} r12={2d} r13={1d,4u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} r134={1d,1u} r135={1d,1u} 
;;    total ref usage 153{134d,19u,0e} in 9{8 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130
0[0,3] 1[3,3] 2[6,3] 3[9,3] 11[12,1] 12[13,2] 13[15,1] 14[16,2] 15[18,1] 16[19,1] 17[20,1] 18[21,1] 19[22,1] 20[23,1] 21[24,1] 22[25,1] 23[26,1] 24[27,1] 25[28,1] 26[29,1] 27[30,1] 28[31,1] 29[32,1] 30[33,1] 31[34,1] 32[35,1] 33[36,1] 34[37,1] 35[38,1] 36[39,1] 37[40,1] 38[41,1] 39[42,1] 40[43,1] 41[44,1] 42[45,1] 43[46,1] 44[47,1] 45[48,1] 46[49,1] 47[50,1] 48[51,1] 49[52,1] 50[53,1] 51[54,1] 52[55,1] 53[56,1] 54[57,1] 55[58,1] 56[59,1] 57[60,1] 58[61,1] 59[62,1] 60[63,1] 61[64,1] 62[65,1] 63[66,1] 64[67,1] 65[68,1] 66[69,1] 67[70,1] 68[71,1] 69[72,1] 70[73,1] 71[74,1] 72[75,1] 73[76,1] 74[77,1] 75[78,1] 76[79,1] 77[80,1] 78[81,1] 79[82,1] 80[83,1] 81[84,1] 82[85,1] 83[86,1] 84[87,1] 85[88,1] 86[89,1] 87[90,1] 88[91,1] 89[92,1] 90[93,1] 91[94,1] 92[95,1] 93[96,1] 94[97,1] 95[98,1] 96[99,1] 97[100,1] 98[101,1] 99[102,1] 100[103,1] 101[104,1] 102[105,1] 103[106,1] 104[107,1] 105[108,1] 106[109,1] 107[110,1] 108[111,1] 109[112,1] 110[113,1] 111[114,1] 112[115,1] 113[116,1] 114[117,1] 115[118,1] 116[119,1] 117[120,1] 118[121,1] 119[122,1] 120[123,1] 121[124,1] 122[125,1] 123[126,1] 124[127,1] 125[128,1] 126[129,1] 127[130,1] 133[131,1] 134[132,1] 135[133,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 133 134 135
;; live  kill	 14 [lr]
;; rd  in  	(10)
2, 5, 8, 11, 12, 14, 15, 17, 28, 29
;; rd  gen 	(4)
0, 131, 132, 133
;; rd  kill	(8)
0, 1, 2, 16, 17, 131, 132, 133

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 init/main.c:409 (set (reg/v/f:SI 133 [ cmdline ])
        (reg:SI 0 r0 [ cmdline ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ cmdline ])
        (nil)))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 init/main.c:410 (set (reg/f:SI 134)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x11b10f00>)) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 init/main.c:410 (set (reg/f:SI 135)
        (symbol_ref:SI ("do_early_param") [flags 0x3] <function_decl 0x11a52d00 do_early_param>)) 167 {*arm_movsi_insn} (nil))

(insn 8 7 9 2 init/main.c:410 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 135)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 135)
        (expr_list:REG_EQUAL (symbol_ref:SI ("do_early_param") [flags 0x3] <function_decl 0x11a52d00 do_early_param>)
            (nil))))

(insn 9 8 10 2 init/main.c:410 (set (reg:SI 0 r0)
        (reg/f:SI 134)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 134)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x11b10f00>)
            (nil))))

(insn 10 9 11 2 init/main.c:410 (set (reg:SI 1 r1)
        (reg/v/f:SI 133 [ cmdline ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 133 [ cmdline ])
        (nil)))

(insn 11 10 12 2 init/main.c:410 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 12 11 13 2 init/main.c:410 (set (reg:SI 3 r3)
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 13 12 0 2 init/main.c:410 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("parse_args") [flags 0x41] <function_decl 0x10ddb900 parse_args>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(12)
0, 5, 8, 11, 12, 14, 15, 28, 29, 131, 132, 133


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function rest_init (rest_init)[0:2053]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


rest_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={16d,7u} r1={14d,3u} r2={13d,2u} r3={11d} r11={1d,2u} r12={11d} r13={1d,13u,1d} r14={10d,1u} r15={10d} r16={10d} r17={10d} r18={10d} r19={10d} r20={10d} r21={10d} r22={10d} r23={10d} r24={10d} r25={1d,2u} r26={1d,1u} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} r81={10d} r82={10d} r83={10d} r84={10d} r85={10d} r86={10d} r87={10d} r88={10d} r89={10d} r90={10d} r91={10d} r92={10d} r93={10d} r94={10d} r95={10d} r96={10d} r97={10d} r98={10d} r99={10d} r100={10d} r101={10d} r102={10d} r103={10d} r104={10d} r105={10d} r106={10d} r107={10d} r108={10d} r109={10d} r110={10d} r111={10d} r112={10d} r113={10d} r114={10d} r115={10d} r116={10d} r117={10d} r118={10d} r119={10d} r120={10d} r121={10d} r122={10d} r123={10d} r124={10d} r125={10d} r126={10d} r127={10d} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,5u} r146={1d,1u} r148={1d,1u} r149={1d,1u} r151={1d,1u} r152={1d,1u} 
;;    total ref usage 1251{1202d,48u,1e} in 38{28 regular + 10 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,16] 1[16,14] 2[30,13] 3[43,11] 11[54,1] 12[55,11] 13[66,1] 14[67,10] 15[77,10] 16[87,10] 17[97,10] 18[107,10] 19[117,10] 20[127,10] 21[137,10] 22[147,10] 23[157,10] 24[167,10] 25[177,1] 26[178,1] 27[179,10] 28[189,10] 29[199,10] 30[209,10] 31[219,10] 32[229,10] 33[239,10] 34[249,10] 35[259,10] 36[269,10] 37[279,10] 38[289,10] 39[299,10] 40[309,10] 41[319,10] 42[329,10] 43[339,10] 44[349,10] 45[359,10] 46[369,10] 47[379,10] 48[389,10] 49[399,10] 50[409,10] 51[419,10] 52[429,10] 53[439,10] 54[449,10] 55[459,10] 56[469,10] 57[479,10] 58[489,10] 59[499,10] 60[509,10] 61[519,10] 62[529,10] 63[539,10] 64[549,10] 65[559,10] 66[569,10] 67[579,10] 68[589,10] 69[599,10] 70[609,10] 71[619,10] 72[629,10] 73[639,10] 74[649,10] 75[659,10] 76[669,10] 77[679,10] 78[689,10] 79[699,10] 80[709,10] 81[719,10] 82[729,10] 83[739,10] 84[749,10] 85[759,10] 86[769,10] 87[779,10] 88[789,10] 89[799,10] 90[809,10] 91[819,10] 92[829,10] 93[839,10] 94[849,10] 95[859,10] 96[869,10] 97[879,10] 98[889,10] 99[899,10] 100[909,10] 101[919,10] 102[929,10] 103[939,10] 104[949,10] 105[959,10] 106[969,10] 107[979,10] 108[989,10] 109[999,10] 110[1009,10] 111[1019,10] 112[1029,10] 113[1039,10] 114[1049,10] 115[1059,10] 116[1069,10] 117[1079,10] 118[1089,10] 119[1099,10] 120[1109,10] 121[1119,10] 122[1129,10] 123[1139,10] 124[1149,10] 125[1159,10] 126[1169,10] 127[1179,10] 138[1189,1] 139[1190,1] 140[1191,1] 141[1192,1] 142[1193,1] 143[1194,1] 144[1195,1] 145[1196,1] 146[1197,1] 148[1198,1] 149[1199,1] 151[1200,1] 152[1201,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d15(0){ }d29(1){ }d42(2){ }d53(3){ }d54(11){ }d65(12){ }d66(13){ }d76(14){ }d177(25){ }d178(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
15, 29, 42, 53, 54, 65, 66, 76, 177, 178
;; rd  kill	(79)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 177, 178
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
15, 29, 42, 53, 54, 65, 66, 76, 177, 178

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d54(bb 0 insn -1) }u1(13){ d66(bb 0 insn -1) }u2(25){ d177(bb 0 insn -1) }u3(26){ d178(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 139 140 141 142 143 144 145 146 148 149 151 152
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 138 139 140 141 142 143 144 145 146 148 149 151 152
;; live  kill	 14 [lr]
;; rd  in  	(10)
15, 29, 42, 53, 54, 65, 66, 76, 177, 178
;; rd  gen 	(13)
1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201
;; rd  kill	(23)
67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(22)
15, 29, 42, 53, 54, 65, 66, 177, 178, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201
;;  UD chains for artificial uses
;;   reg 11 { d54(bb 0 insn -1) }
;;   reg 13 { d66(bb 0 insn -1) }
;;   reg 25 { d177(bb 0 insn -1) }
;;   reg 26 { d178(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 5
;;      reg 13 { d66(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 7
;;      reg 140 { d1191(bb 2 insn 6) }
;;   UD chains for insn luid 5 uid 10
;;      reg 13 { d66(bb 0 insn -1) }
;;      reg 0 { d13(bb 2 insn 7) }
;;      reg 1 { d27(bb 2 insn 8) }
;;      reg 2 { d40(bb 2 insn 9) }
;;   UD chains for insn luid 7 uid 12
;;      reg 141 { d1192(bb 2 insn 11) }
;;   UD chains for insn luid 10 uid 15
;;      reg 13 { d66(bb 0 insn -1) }
;;      reg 0 { d11(bb 2 insn 12) }
;;      reg 1 { d25(bb 2 insn 13) }
;;      reg 2 { d38(bb 2 insn 14) }
;;   UD chains for insn luid 11 uid 16
;;      reg 0 { d10(bb 2 insn 15) }
;;   UD chains for insn luid 12 uid 17
;;      reg 13 { d66(bb 0 insn -1) }
;;   UD chains for insn luid 14 uid 19
;;      reg 138 { d1189(bb 2 insn 16) }
;;   UD chains for insn luid 15 uid 20
;;      reg 142 { d1193(bb 2 insn 18) }
;;   UD chains for insn luid 16 uid 21
;;      reg 13 { d66(bb 0 insn -1) }
;;      reg 0 { d8(bb 2 insn 19) }
;;      reg 1 { d22(bb 2 insn 20) }
;;   UD chains for insn luid 17 uid 22
;;      reg 0 { d7(bb 2 insn 21) }
;;   UD chains for insn luid 19 uid 24
;;      reg 139 { d1190(bb 2 insn 22) }
;;      reg 143 { d1194(bb 2 insn 23) }
;;   UD chains for insn luid 20 uid 25
;;      reg 13 { d66(bb 0 insn -1) }
;;   UD chains for insn luid 22 uid 27
;;      reg 144 { d1195(bb 2 insn 26) }
;;   UD chains for insn luid 23 uid 28
;;      reg 13 { d66(bb 0 insn -1) }
;;      reg 0 { d5(bb 2 insn 27) }
;;   UD chains for insn luid 24 uid 30
;;      reg 13 { d66(bb 0 insn -1) }
;;   UD chains for insn luid 25 uid 31
;;      reg 146 { d1197(bb 2 insn 30) }
;;   eq_note reg 13 { }
;;   UD chains for insn luid 26 uid 32
;;      reg 145 { d1196(bb 2 insn 31) }
;;   UD chains for insn luid 27 uid 33
;;      reg 13 { d66(bb 0 insn -1) }
;;      reg 0 { d3(bb 2 insn 32) }
;;   UD chains for insn luid 29 uid 38
;;      reg 145 { d1196(bb 2 insn 31) }
;;   UD chains for insn luid 30 uid 39
;;      reg 148 { d1198(bb 2 insn 38) }
;;   UD chains for insn luid 31 uid 40
;;      reg 145 { d1196(bb 2 insn 31) }
;;      reg 149 { d1199(bb 2 insn 39) }
;;   UD chains for insn luid 32 uid 41
;;      reg 13 { d66(bb 0 insn -1) }
;;   UD chains for insn luid 33 uid 45
;;      reg 145 { d1196(bb 2 insn 31) }
;;   UD chains for insn luid 34 uid 46
;;      reg 151 { d1200(bb 2 insn 45) }
;;   UD chains for insn luid 35 uid 47
;;      reg 145 { d1196(bb 2 insn 31) }
;;      reg 152 { d1201(bb 2 insn 46) }
;;   UD chains for insn luid 37 uid 49
;;      reg 13 { d66(bb 0 insn -1) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u45(11){ d54(bb 0 insn -1) }u46(13){ d66(bb 0 insn -1) }u47(14){ }u48(25){ d177(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(22)
15, 29, 42, 53, 54, 65, 66, 177, 178, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(22)
15, 29, 42, 53, 54, 65, 66, 177, 178, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201
;;  UD chains for artificial uses
;;   reg 11 { d54(bb 0 insn -1) }
;;   reg 13 { d66(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d177(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 49 to worklist
  Adding insn 48 to worklist
  Adding insn 47 to worklist
  Adding insn 41 to worklist
  Adding insn 40 to worklist
  Adding insn 34 to worklist
  Adding insn 33 to worklist
  Adding insn 28 to worklist
  Adding insn 25 to worklist
  Adding insn 24 to worklist
  Adding insn 21 to worklist
  Adding insn 17 to worklist
  Adding insn 15 to worklist
  Adding insn 10 to worklist
  Adding insn 5 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 5:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 7 to worklist
Processing use of (reg 1 r1) in insn 10:
  Adding insn 8 to worklist
Processing use of (reg 2 r2) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 140) in insn 7:
  Adding insn 6 to worklist
Processing use of (reg 13 sp) in insn 15:
Processing use of (reg 0 r0) in insn 15:
  Adding insn 12 to worklist
Processing use of (reg 1 r1) in insn 15:
  Adding insn 13 to worklist
Processing use of (reg 2 r2) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 141) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 13 sp) in insn 17:
Processing use of (reg 13 sp) in insn 21:
Processing use of (reg 0 r0) in insn 21:
  Adding insn 19 to worklist
Processing use of (reg 1 r1) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 142) in insn 20:
  Adding insn 18 to worklist
Processing use of (reg 138 [ pid ]) in insn 19:
  Adding insn 16 to worklist
Processing use of (reg 0 r0) in insn 16:
Processing use of (reg 139 [ kthreadd_task.419 ]) in insn 24:
  Adding insn 22 to worklist
Processing use of (reg 143) in insn 24:
  Adding insn 23 to worklist
Processing use of (reg 0 r0) in insn 22:
Processing use of (reg 13 sp) in insn 25:
Processing use of (reg 13 sp) in insn 28:
Processing use of (reg 0 r0) in insn 28:
  Adding insn 27 to worklist
Processing use of (reg 144) in insn 27:
  Adding insn 26 to worklist
Processing use of (reg 13 sp) in insn 33:
Processing use of (reg 0 r0) in insn 33:
  Adding insn 32 to worklist
Processing use of (reg 145) in insn 32:
  Adding insn 31 to worklist
Processing use of (reg 146) in insn 31:
  Adding insn 30 to worklist
Processing use of (reg 13 sp) in insn 30:
Processing use of (reg 145) in insn 40:
Processing use of (reg 149) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 148 [ <variable>.preempt_count ]) in insn 39:
  Adding insn 38 to worklist
Processing use of (reg 145) in insn 38:
Processing use of (reg 13 sp) in insn 41:
Processing use of (reg 145) in insn 47:
Processing use of (reg 152) in insn 47:
  Adding insn 46 to worklist
Processing use of (reg 151 [ <variable>.preempt_count ]) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 145) in insn 45:
Processing use of (reg 13 sp) in insn 49:


rest_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={16d,7u} r1={14d,3u} r2={13d,2u} r3={11d} r11={1d,2u} r12={11d} r13={1d,13u,1d} r14={10d,1u} r15={10d} r16={10d} r17={10d} r18={10d} r19={10d} r20={10d} r21={10d} r22={10d} r23={10d} r24={10d} r25={1d,2u} r26={1d,1u} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} r81={10d} r82={10d} r83={10d} r84={10d} r85={10d} r86={10d} r87={10d} r88={10d} r89={10d} r90={10d} r91={10d} r92={10d} r93={10d} r94={10d} r95={10d} r96={10d} r97={10d} r98={10d} r99={10d} r100={10d} r101={10d} r102={10d} r103={10d} r104={10d} r105={10d} r106={10d} r107={10d} r108={10d} r109={10d} r110={10d} r111={10d} r112={10d} r113={10d} r114={10d} r115={10d} r116={10d} r117={10d} r118={10d} r119={10d} r120={10d} r121={10d} r122={10d} r123={10d} r124={10d} r125={10d} r126={10d} r127={10d} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,5u} r146={1d,1u} r148={1d,1u} r149={1d,1u} r151={1d,1u} r152={1d,1u} 
;;    total ref usage 1251{1202d,48u,1e} in 38{28 regular + 10 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,16] 1[16,14] 2[30,13] 3[43,11] 11[54,1] 12[55,11] 13[66,1] 14[67,10] 15[77,10] 16[87,10] 17[97,10] 18[107,10] 19[117,10] 20[127,10] 21[137,10] 22[147,10] 23[157,10] 24[167,10] 25[177,1] 26[178,1] 27[179,10] 28[189,10] 29[199,10] 30[209,10] 31[219,10] 32[229,10] 33[239,10] 34[249,10] 35[259,10] 36[269,10] 37[279,10] 38[289,10] 39[299,10] 40[309,10] 41[319,10] 42[329,10] 43[339,10] 44[349,10] 45[359,10] 46[369,10] 47[379,10] 48[389,10] 49[399,10] 50[409,10] 51[419,10] 52[429,10] 53[439,10] 54[449,10] 55[459,10] 56[469,10] 57[479,10] 58[489,10] 59[499,10] 60[509,10] 61[519,10] 62[529,10] 63[539,10] 64[549,10] 65[559,10] 66[569,10] 67[579,10] 68[589,10] 69[599,10] 70[609,10] 71[619,10] 72[629,10] 73[639,10] 74[649,10] 75[659,10] 76[669,10] 77[679,10] 78[689,10] 79[699,10] 80[709,10] 81[719,10] 82[729,10] 83[739,10] 84[749,10] 85[759,10] 86[769,10] 87[779,10] 88[789,10] 89[799,10] 90[809,10] 91[819,10] 92[829,10] 93[839,10] 94[849,10] 95[859,10] 96[869,10] 97[879,10] 98[889,10] 99[899,10] 100[909,10] 101[919,10] 102[929,10] 103[939,10] 104[949,10] 105[959,10] 106[969,10] 107[979,10] 108[989,10] 109[999,10] 110[1009,10] 111[1019,10] 112[1029,10] 113[1039,10] 114[1049,10] 115[1059,10] 116[1069,10] 117[1079,10] 118[1089,10] 119[1099,10] 120[1109,10] 121[1119,10] 122[1129,10] 123[1139,10] 124[1149,10] 125[1159,10] 126[1169,10] 127[1179,10] 138[1189,1] 139[1190,1] 140[1191,1] 141[1192,1] 142[1193,1] 143[1194,1] 144[1195,1] 145[1196,1] 146[1197,1] 148[1198,1] 149[1199,1] 151[1200,1] 152[1201,1] 
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 139 140 141 142 143 144 145 146 148 149 151 152
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 138 139 140 141 142 143 144 145 146 148 149 151 152
;; live  kill	 14 [lr]
;; rd  in  	(10)
15, 29, 42, 53, 54, 65, 66, 76, 177, 178
;; rd  gen 	(13)
1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201
;; rd  kill	(23)
67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(call_insn 5 2 6 2 init/main.c:362 (parallel [
            (call (mem:SI (symbol_ref:SI ("rcu_scheduler_starting") [flags 0x41] <function_decl 0x10d6a480 rcu_scheduler_starting>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 6 5 7 2 init/main.c:368 (set (reg/f:SI 140)
        (symbol_ref:SI ("kernel_init") [flags 0x3] <function_decl 0x11a3bc80 kernel_init>)) 167 {*arm_movsi_insn} (nil))

(insn 7 6 8 2 init/main.c:368 (set (reg:SI 0 r0)
        (reg/f:SI 140)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_EQUAL (symbol_ref:SI ("kernel_init") [flags 0x3] <function_decl 0x11a3bc80 kernel_init>)
            (nil))))

(insn 8 7 9 2 init/main.c:368 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 9 8 10 2 init/main.c:368 (set (reg:SI 2 r2)
        (const_int 2560 [0xa00])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 9 11 2 init/main.c:368 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kernel_thread") [flags 0x41] <function_decl 0x10ab8900 kernel_thread>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 11 10 12 2 init/main.c:370 (set (reg/f:SI 141)
        (symbol_ref:SI ("kthreadd") [flags 0x41] <function_decl 0x119ac180 kthreadd>)) 167 {*arm_movsi_insn} (nil))

(insn 12 11 13 2 init/main.c:370 (set (reg:SI 0 r0)
        (reg/f:SI 141)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 141)
        (expr_list:REG_EQUAL (symbol_ref:SI ("kthreadd") [flags 0x41] <function_decl 0x119ac180 kthreadd>)
            (nil))))

(insn 13 12 14 2 init/main.c:370 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 14 13 15 2 init/main.c:370 (set (reg:SI 2 r2)
        (const_int 1536 [0x600])) 167 {*arm_movsi_insn} (nil))

(call_insn 15 14 16 2 init/main.c:370 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kernel_thread") [flags 0x41] <function_decl 0x10ab8900 kernel_thread>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 16 15 17 2 init/main.c:370 (set (reg/v:SI 138 [ pid ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(call_insn 17 16 18 2 include/linux/rcupdate.h:592 (parallel [
            (call (mem:SI (symbol_ref:SI ("__rcu_read_lock") [flags 0x41] <function_decl 0x10d64600 __rcu_read_lock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 18 17 19 2 init/main.c:372 (set (reg/f:SI 142)
        (symbol_ref:SI ("init_pid_ns") [flags 0xc0] <var_decl 0x10f01540 init_pid_ns>)) 167 {*arm_movsi_insn} (nil))

(insn 19 18 20 2 init/main.c:372 (set (reg:SI 0 r0)
        (reg/v:SI 138 [ pid ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ pid ])
        (nil)))

(insn 20 19 21 2 init/main.c:372 (set (reg:SI 1 r1)
        (reg/f:SI 142)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 142)
        (expr_list:REG_EQUAL (symbol_ref:SI ("init_pid_ns") [flags 0xc0] <var_decl 0x10f01540 init_pid_ns>)
            (nil))))

(call_insn 21 20 22 2 init/main.c:372 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("find_task_by_pid_ns") [flags 0x41] <function_decl 0x11342000 find_task_by_pid_ns>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 22 21 23 2 init/main.c:372 (set (reg/f:SI 139 [ kthreadd_task.419 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 23 22 24 2 init/main.c:372 (set (reg/f:SI 143)
        (symbol_ref:SI ("kthreadd_task") [flags 0xc0] <var_decl 0x119a3b40 kthreadd_task>)) 167 {*arm_movsi_insn} (nil))

(insn 24 23 25 2 init/main.c:372 (set (mem/f/c/i:SI (reg/f:SI 143) [0 kthreadd_task+0 S4 A32])
        (reg/f:SI 139 [ kthreadd_task.419 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 143)
        (expr_list:REG_DEAD (reg/f:SI 139 [ kthreadd_task.419 ])
            (nil))))

(call_insn 25 24 26 2 include/linux/rcupdate.h:616 (parallel [
            (call (mem:SI (symbol_ref:SI ("__rcu_read_unlock") [flags 0x41] <function_decl 0x10d64680 __rcu_read_unlock>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 26 25 27 2 init/main.c:374 (set (reg/f:SI 144)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 27 26 28 2 init/main.c:374 (set (reg:SI 0 r0)
        (reg/f:SI 144)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 144)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
            (nil))))

(call_insn 28 27 30 2 init/main.c:374 (parallel [
            (call (mem:SI (symbol_ref:SI ("complete") [flags 0x41] <function_decl 0x10d64000 complete>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 30 28 31 2 init/main.c:380 (set (reg:SI 146)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 31 30 32 2 init/main.c:380 (set (reg:SI 145)
        (and:SI (reg:SI 146)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 146)
        (expr_list:REG_EQUAL (and:SI (reg/f:SI 13 sp)
                (const_int -8192 [0xffffffffffffe000]))
            (nil))))

(insn 32 31 33 2 init/main.c:380 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg:SI 145)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 33 32 34 2 init/main.c:380 (parallel [
            (call (mem:SI (symbol_ref:SI ("init_idle_bootup_task") [flags 0x41] <function_decl 0x112b7480 init_idle_bootup_task>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 34 33 38 2 init/main.c:381 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 12103554)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 38 34 39 2 init/main.c:381 (set (reg:SI 148 [ <variable>.preempt_count ])
        (mem/s/j:SI (plus:SI (reg:SI 145)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 39 38 40 2 init/main.c:381 (set (reg:SI 149)
        (plus:SI (reg:SI 148 [ <variable>.preempt_count ])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 148 [ <variable>.preempt_count ])
        (nil)))

(insn 40 39 41 2 init/main.c:381 (set (mem/s/j:SI (plus:SI (reg:SI 145)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 149)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 149)
        (nil)))

(call_insn 41 40 45 2 init/main.c:382 (parallel [
            (call (mem:SI (symbol_ref:SI ("schedule") [flags 0x41] <function_decl 0x112be200 schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 45 41 46 2 init/main.c:385 (set (reg:SI 151 [ <variable>.preempt_count ])
        (mem/s/j:SI (plus:SI (reg:SI 145)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 46 45 47 2 init/main.c:385 (set (reg:SI 152)
        (plus:SI (reg:SI 151 [ <variable>.preempt_count ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 151 [ <variable>.preempt_count ])
        (nil)))

(insn 47 46 48 2 init/main.c:385 (set (mem/s/j:SI (plus:SI (reg:SI 145)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 152)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 152)
        (expr_list:REG_DEAD (reg:SI 145)
            (nil))))

(insn 48 47 49 2 init/main.c:385 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 12104066)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(call_insn/j 49 48 50 2 init/main.c:386 (parallel [
            (call (mem:SI (symbol_ref:SI ("cpu_idle") [flags 0x41] <function_decl 0x10c8ed80 cpu_idle>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(22)
15, 29, 42, 53, 54, 65, 66, 177, 178, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 50 49 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function run_init_process (run_init_process)[0:2069]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


run_init_process

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={3d,1u} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} r134={1d,2u} r137={2d,3u} 
;;    total ref usage 151{132d,19u,0e} in 7{6 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127
0[0,2] 1[2,3] 2[5,3] 3[8,2] 11[10,1] 12[11,2] 13[13,1] 14[14,1] 15[15,1] 16[16,1] 17[17,1] 18[18,1] 19[19,1] 20[20,1] 21[21,1] 22[22,1] 23[23,1] 24[24,1] 25[25,1] 26[26,1] 27[27,1] 28[28,1] 29[29,1] 30[30,1] 31[31,1] 32[32,1] 33[33,1] 34[34,1] 35[35,1] 36[36,1] 37[37,1] 38[38,1] 39[39,1] 40[40,1] 41[41,1] 42[42,1] 43[43,1] 44[44,1] 45[45,1] 46[46,1] 47[47,1] 48[48,1] 49[49,1] 50[50,1] 51[51,1] 52[52,1] 53[53,1] 54[54,1] 55[55,1] 56[56,1] 57[57,1] 58[58,1] 59[59,1] 60[60,1] 61[61,1] 62[62,1] 63[63,1] 64[64,1] 65[65,1] 66[66,1] 67[67,1] 68[68,1] 69[69,1] 70[70,1] 71[71,1] 72[72,1] 73[73,1] 74[74,1] 75[75,1] 76[76,1] 77[77,1] 78[78,1] 79[79,1] 80[80,1] 81[81,1] 82[82,1] 83[83,1] 84[84,1] 85[85,1] 86[86,1] 87[87,1] 88[88,1] 89[89,1] 90[90,1] 91[91,1] 92[92,1] 93[93,1] 94[94,1] 95[95,1] 96[96,1] 97[97,1] 98[98,1] 99[99,1] 100[100,1] 101[101,1] 102[102,1] 103[103,1] 104[104,1] 105[105,1] 106[106,1] 107[107,1] 108[108,1] 109[109,1] 110[110,1] 111[111,1] 112[112,1] 113[113,1] 114[114,1] 115[115,1] 116[116,1] 117[117,1] 118[118,1] 119[119,1] 120[120,1] 121[121,1] 122[122,1] 123[123,1] 124[124,1] 125[125,1] 126[126,1] 127[127,1] 133[128,1] 134[129,1] 137[130,2] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d4(1){ }d7(2){ }d9(3){ }d10(11){ }d12(12){ }d13(13){ }d14(14){ }d25(25){ }d26(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  kill	(17)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 25, 26
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d10(bb 0 insn -1) }u1(13){ d13(bb 0 insn -1) }u2(25){ d25(bb 0 insn -1) }u3(26){ d26(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 137
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 133 134 137
;; live  kill	
;; rd  in  	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  gen 	(4)
0, 128, 129, 131
;; rd  kill	(6)
0, 1, 128, 129, 130, 131
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(13)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26, 128, 129, 131
;;  UD chains for artificial uses
;;   reg 11 { d10(bb 0 insn -1) }
;;   reg 13 { d13(bb 0 insn -1) }
;;   reg 25 { d25(bb 0 insn -1) }
;;   reg 26 { d26(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d1(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 23
;;      reg 134 { d129(bb 2 insn 6) }
;;   UD chains for insn luid 3 uid 7
;;      reg 133 { d128(bb 2 insn 2) }
;;      reg 137 { d130(bb 2 insn 23) }
;;      reg 137 { d130(bb 2 insn 23) }
;;   UD chains for insn luid 4 uid 12
;;      reg 134 { d129(bb 2 insn 6) }
;;   UD chains for insn luid 5 uid 13
;;      reg 137 { d131(bb 2 insn 7) }
;;   UD chains for insn luid 6 uid 14
;;      reg 13 { d13(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d2(bb 2 insn 12) }
;;      reg 2 { d6(bb 2 insn 13) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u14(11){ d10(bb 0 insn -1) }u15(13){ d13(bb 0 insn -1) }u16(14){ d14(bb 0 insn -1) }u17(25){ d25(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(13)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26, 128, 129, 131
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(13)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26, 128, 129, 131
;;  UD chains for artificial uses
;;   reg 11 { d10(bb 0 insn -1) }
;;   reg 13 { d13(bb 0 insn -1) }
;;   reg 14 { d14(bb 0 insn -1) }
;;   reg 25 { d25(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 14 to worklist
  Adding insn 7 to worklist
Finished finding needed instructions:
Processing use of (reg 133 [ init_filename ]) in insn 7:
  Adding insn 2 to worklist
Processing use of (reg 137) in insn 7:
  Adding insn 23 to worklist
Processing use of (reg 137) in insn 7:
Processing use of (reg 134) in insn 23:
  Adding insn 6 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 13 sp) in insn 14:
Processing use of (reg 0 r0) in insn 14:
Processing use of (reg 1 r1) in insn 14:
  Adding insn 12 to worklist
Processing use of (reg 2 r2) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 137) in insn 13:
Processing use of (reg 134) in insn 12:


run_init_process

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={3d,1u} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} r134={1d,2u} r137={2d,3u} 
;;    total ref usage 151{132d,19u,0e} in 7{6 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127
0[0,2] 1[2,3] 2[5,3] 3[8,2] 11[10,1] 12[11,2] 13[13,1] 14[14,1] 15[15,1] 16[16,1] 17[17,1] 18[18,1] 19[19,1] 20[20,1] 21[21,1] 22[22,1] 23[23,1] 24[24,1] 25[25,1] 26[26,1] 27[27,1] 28[28,1] 29[29,1] 30[30,1] 31[31,1] 32[32,1] 33[33,1] 34[34,1] 35[35,1] 36[36,1] 37[37,1] 38[38,1] 39[39,1] 40[40,1] 41[41,1] 42[42,1] 43[43,1] 44[44,1] 45[45,1] 46[46,1] 47[47,1] 48[48,1] 49[49,1] 50[50,1] 51[51,1] 52[52,1] 53[53,1] 54[54,1] 55[55,1] 56[56,1] 57[57,1] 58[58,1] 59[59,1] 60[60,1] 61[61,1] 62[62,1] 63[63,1] 64[64,1] 65[65,1] 66[66,1] 67[67,1] 68[68,1] 69[69,1] 70[70,1] 71[71,1] 72[72,1] 73[73,1] 74[74,1] 75[75,1] 76[76,1] 77[77,1] 78[78,1] 79[79,1] 80[80,1] 81[81,1] 82[82,1] 83[83,1] 84[84,1] 85[85,1] 86[86,1] 87[87,1] 88[88,1] 89[89,1] 90[90,1] 91[91,1] 92[92,1] 93[93,1] 94[94,1] 95[95,1] 96[96,1] 97[97,1] 98[98,1] 99[99,1] 100[100,1] 101[101,1] 102[102,1] 103[103,1] 104[104,1] 105[105,1] 106[106,1] 107[107,1] 108[108,1] 109[109,1] 110[110,1] 111[111,1] 112[112,1] 113[113,1] 114[114,1] 115[115,1] 116[116,1] 117[117,1] 118[118,1] 119[119,1] 120[120,1] 121[121,1] 122[122,1] 123[123,1] 124[124,1] 125[125,1] 126[126,1] 127[127,1] 133[128,1] 134[129,1] 137[130,2] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 137
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 133 134 137
;; live  kill	
;; rd  in  	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  gen 	(4)
0, 128, 129, 131
;; rd  kill	(6)
0, 1, 128, 129, 130, 131

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 init/main.c:746 (set (reg/v/f:SI 133 [ init_filename ])
        (reg:SI 0 r0 [ init_filename ])) 167 {*arm_movsi_insn} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 23 2 init/main.c:747 (set (reg/f:SI 134)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 23 6 7 2 init/main.c:747 (set (reg/f:SI 137)
        (reg/f:SI 134)) -1 (nil))

(insn 7 23 12 2 init/main.c:747 (set (mem/s/f/j:SI (post_modify:SI (reg/f:SI 137)
                (plus:SI (reg/f:SI 137)
                    (const_int 136 [0x88]))) [0 argv_init+0 S4 A32])
        (reg/v/f:SI 133 [ init_filename ])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 137)
        (expr_list:REG_DEAD (reg/v/f:SI 133 [ init_filename ])
            (nil))))

(insn 12 7 13 2 init/main.c:748 (set (reg:SI 1 r1)
        (reg/f:SI 134)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 134)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
            (nil))))

(insn 13 12 14 2 init/main.c:748 (set (reg:SI 2 r2)
        (reg/f:SI 137)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 137)
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 136 [0x88])))
            (nil))))

(call_insn/j 14 13 15 2 init/main.c:748 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kernel_execve") [flags 0x41] <function_decl 0x11490800 kernel_execve>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(13)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26, 128, 129, 131


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 15 14 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function init_post (init_post)[0:2070]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 7 count 11 (  1.6)


init_post

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={21d,10u} r1={14d,2u} r2={12d} r3={12d} r11={1d,6u} r12={12d} r13={1d,18u,1d} r14={12d,1u} r15={11d} r16={11d} r17={11d} r18={11d} r19={11d} r20={11d} r21={11d} r22={11d} r23={11d} r24={13d,2u} r25={1d,6u} r26={1d,5u} r27={11d} r28={11d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={11d} r38={11d} r39={11d} r40={11d} r41={11d} r42={11d} r43={11d} r44={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} r81={11d} r82={11d} r83={11d} r84={11d} r85={11d} r86={11d} r87={11d} r88={11d} r89={11d} r90={11d} r91={11d} r92={11d} r93={11d} r94={11d} r95={11d} r96={11d} r97={11d} r98={11d} r99={11d} r100={11d} r101={11d} r102={11d} r103={11d} r104={11d} r105={11d} r106={11d} r107={11d} r108={11d} r109={11d} r110={11d} r111={11d} r112={11d} r113={11d} r114={11d} r115={11d} r116={11d} r117={11d} r118={11d} r119={11d} r120={11d} r121={11d} r122={11d} r123={11d} r124={11d} r125={11d} r126={11d} r127={11d} r134={1d,2u} r135={1d,2u} r136={1d,2u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r148={1d,2u} 
;;    total ref usage 1390{1322d,67u,1e} in 40{29 regular + 11 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,21] 1[21,14] 2[35,12] 3[47,12] 11[59,1] 12[60,12] 13[72,1] 14[73,12] 15[85,11] 16[96,11] 17[107,11] 18[118,11] 19[129,11] 20[140,11] 21[151,11] 22[162,11] 23[173,11] 24[184,13] 25[197,1] 26[198,1] 27[199,11] 28[210,11] 29[221,11] 30[232,11] 31[243,11] 32[254,11] 33[265,11] 34[276,11] 35[287,11] 36[298,11] 37[309,11] 38[320,11] 39[331,11] 40[342,11] 41[353,11] 42[364,11] 43[375,11] 44[386,11] 45[397,11] 46[408,11] 47[419,11] 48[430,11] 49[441,11] 50[452,11] 51[463,11] 52[474,11] 53[485,11] 54[496,11] 55[507,11] 56[518,11] 57[529,11] 58[540,11] 59[551,11] 60[562,11] 61[573,11] 62[584,11] 63[595,11] 64[606,11] 65[617,11] 66[628,11] 67[639,11] 68[650,11] 69[661,11] 70[672,11] 71[683,11] 72[694,11] 73[705,11] 74[716,11] 75[727,11] 76[738,11] 77[749,11] 78[760,11] 79[771,11] 80[782,11] 81[793,11] 82[804,11] 83[815,11] 84[826,11] 85[837,11] 86[848,11] 87[859,11] 88[870,11] 89[881,11] 90[892,11] 91[903,11] 92[914,11] 93[925,11] 94[936,11] 95[947,11] 96[958,11] 97[969,11] 98[980,11] 99[991,11] 100[1002,11] 101[1013,11] 102[1024,11] 103[1035,11] 104[1046,11] 105[1057,11] 106[1068,11] 107[1079,11] 108[1090,11] 109[1101,11] 110[1112,11] 111[1123,11] 112[1134,11] 113[1145,11] 114[1156,11] 115[1167,11] 116[1178,11] 117[1189,11] 118[1200,11] 119[1211,11] 120[1222,11] 121[1233,11] 122[1244,11] 123[1255,11] 124[1266,11] 125[1277,11] 126[1288,11] 127[1299,11] 134[1310,1] 135[1311,1] 136[1312,1] 138[1313,1] 139[1314,1] 140[1315,1] 141[1316,1] 142[1317,1] 143[1318,1] 144[1319,1] 145[1320,1] 148[1321,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d20(0){ }d34(1){ }d46(2){ }d58(3){ }d59(11){ }d71(12){ }d72(13){ }d84(14){ }d197(25){ }d198(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
20, 34, 46, 58, 59, 71, 72, 84, 197, 198
;; rd  kill	(87)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 197, 198
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
20, 34, 46, 58, 59, 71, 72, 84, 197, 198

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d59(bb 0 insn -1) }u1(13){ d72(bb 0 insn -1) }u2(25){ d197(bb 0 insn -1) }u3(26){ d198(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 138 139 140 141 142 143 144 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 135 136 138 139 140 141 142 143 144 145
;; live  kill	 14 [lr]
;; rd  in  	(10)
20, 34, 46, 58, 59, 71, 72, 84, 197, 198
;; rd  gen 	(11)
194, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320
;; rd  kill	(35)
73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; rd  out 	(20)
20, 34, 46, 58, 59, 71, 72, 194, 197, 198, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320
;;  UD chains for artificial uses
;;   reg 11 { d59(bb 0 insn -1) }
;;   reg 13 { d72(bb 0 insn -1) }
;;   reg 25 { d197(bb 0 insn -1) }
;;   reg 26 { d198(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 5
;;      reg 13 { d72(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 6
;;      reg 13 { d72(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 9
;;      reg 138 { d1313(bb 2 insn 7) }
;;      reg 139 { d1314(bb 2 insn 8) }
;;   UD chains for insn luid 5 uid 11
;;      reg 13 { d72(bb 0 insn -1) }
;;   UD chains for insn luid 6 uid 12
;;      reg 141 { d1316(bb 2 insn 11) }
;;   eq_note reg 13 { }
;;   UD chains for insn luid 7 uid 13
;;      reg 140 { d1315(bb 2 insn 12) }
;;   UD chains for insn luid 8 uid 14
;;      reg 142 { d1317(bb 2 insn 13) }
;;   UD chains for insn luid 9 uid 15
;;      reg 136 { d1312(bb 2 insn 14) }
;;   UD chains for insn luid 10 uid 16
;;      reg 143 { d1318(bb 2 insn 15) }
;;   UD chains for insn luid 11 uid 17
;;      reg 136 { d1312(bb 2 insn 14) }
;;      reg 144 { d1319(bb 2 insn 16) }
;;   UD chains for insn luid 13 uid 19
;;      reg 145 { d1320(bb 2 insn 18) }
;;   UD chains for insn luid 14 uid 20
;;      reg 135 { d1311(bb 2 insn 19) }
;;   UD chains for insn luid 15 uid 21
;;      reg 24 { d194(bb 2 insn 20) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(11){ d59(bb 0 insn -1) }u21(13){ d72(bb 0 insn -1) }u22(25){ d197(bb 0 insn -1) }u23(26){ d198(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(20)
20, 34, 46, 58, 59, 71, 72, 194, 197, 198, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320
;; rd  gen 	(1)
15
;; rd  kill	(33)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(20)
15, 34, 46, 58, 59, 71, 72, 194, 197, 198, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320
;;  UD chains for artificial uses
;;   reg 11 { d59(bb 0 insn -1) }
;;   reg 13 { d72(bb 0 insn -1) }
;;   reg 25 { d197(bb 0 insn -1) }
;;   reg 26 { d198(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 23
;;      reg 135 { d1311(bb 2 insn 19) }
;;   UD chains for insn luid 1 uid 24
;;      reg 13 { d72(bb 0 insn -1) }
;;      reg 0 { d17(bb 3 insn 23) }
;;   UD chains for insn luid 3 uid 28
;;      reg 145 { d1320(bb 2 insn 18) }
;;   UD chains for insn luid 4 uid 29
;;      reg 13 { d72(bb 0 insn -1) }
;;      reg 0 { d6(bb 3 insn 27) }
;;      reg 1 { d22(bb 3 insn 28) }

( 2 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u31(11){ d59(bb 0 insn -1) }u32(13){ d72(bb 0 insn -1) }u33(25){ d197(bb 0 insn -1) }u34(26){ d198(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 134 148
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 134 148
;; live  kill	
;; rd  in  	(21)
15, 20, 34, 46, 58, 59, 71, 72, 194, 197, 198, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320
;; rd  gen 	(3)
191, 1310, 1321
;; rd  kill	(15)
184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 1310, 1321
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; rd  out 	(23)
15, 20, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321
;;  UD chains for artificial uses
;;   reg 11 { d59(bb 0 insn -1) }
;;   reg 13 { d72(bb 0 insn -1) }
;;   reg 25 { d197(bb 0 insn -1) }
;;   reg 26 { d198(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 33
;;      reg 148 { d1321(bb 4 insn 32) }
;;   UD chains for insn luid 2 uid 34
;;      reg 134 { d1310(bb 4 insn 33) }
;;   UD chains for insn luid 3 uid 35
;;      reg 24 { d191(bb 4 insn 34) }

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u38(11){ d59(bb 0 insn -1) }u39(13){ d72(bb 0 insn -1) }u40(25){ d197(bb 0 insn -1) }u41(26){ d198(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(23)
15, 20, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321
;; rd  gen 	(1)
12
;; rd  kill	(33)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(22)
12, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321
;;  UD chains for artificial uses
;;   reg 11 { d59(bb 0 insn -1) }
;;   reg 13 { d72(bb 0 insn -1) }
;;   reg 25 { d197(bb 0 insn -1) }
;;   reg 26 { d198(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 37
;;      reg 134 { d1310(bb 4 insn 33) }
;;   UD chains for insn luid 1 uid 38
;;      reg 13 { d72(bb 0 insn -1) }
;;      reg 0 { d14(bb 5 insn 37) }
;;   UD chains for insn luid 3 uid 42
;;      reg 148 { d1321(bb 4 insn 32) }
;;   UD chains for insn luid 4 uid 43
;;      reg 13 { d72(bb 0 insn -1) }
;;      reg 0 { d5(bb 5 insn 41) }
;;      reg 1 { d21(bb 5 insn 42) }

( 4 5 )->[6]->( )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u49(11){ d59(bb 0 insn -1) }u50(13){ d72(bb 0 insn -1) }u51(25){ d197(bb 0 insn -1) }u52(26){ d198(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; rd  in  	(24)
12, 15, 20, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321
;; rd  gen 	(0)

;; rd  kill	(12)
73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(24)
12, 15, 20, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321
;;  UD chains for artificial uses
;;   reg 11 { d59(bb 0 insn -1) }
;;   reg 13 { d72(bb 0 insn -1) }
;;   reg 25 { d197(bb 0 insn -1) }
;;   reg 26 { d198(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 48
;;      reg 13 { d72(bb 0 insn -1) }
;;      reg 0 { d4(bb 6 insn 47) }
;;   UD chains for insn luid 3 uid 51
;;      reg 13 { d72(bb 0 insn -1) }
;;      reg 0 { d3(bb 6 insn 50) }
;;   UD chains for insn luid 5 uid 54
;;      reg 13 { d72(bb 0 insn -1) }
;;      reg 0 { d2(bb 6 insn 53) }
;;   UD chains for insn luid 7 uid 57
;;      reg 13 { d72(bb 0 insn -1) }
;;      reg 0 { d1(bb 6 insn 56) }
;;   UD chains for insn luid 9 uid 60
;;      reg 13 { d72(bb 0 insn -1) }
;;      reg 0 { d0(bb 6 insn 59) }

( )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u63(0){ }u64(11){ }u65(13){ }u66(14){ }u67(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(0)

;;  UD chains for artificial uses
;;   reg 0 { }
;;   reg 11 { }
;;   reg 13 { }
;;   reg 14 { }
;;   reg 25 { }

Finding needed instructions:
  Adding insn 21 to worklist
  Adding insn 17 to worklist
  Adding insn 9 to worklist
  Adding insn 6 to worklist
  Adding insn 5 to worklist
  Adding insn 29 to worklist
  Adding insn 24 to worklist
  Adding insn 35 to worklist
  Adding insn 43 to worklist
  Adding insn 38 to worklist
  Adding insn 60 to worklist
  Adding insn 57 to worklist
  Adding insn 54 to worklist
  Adding insn 51 to worklist
  Adding insn 48 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 48:
Processing use of (reg 0 r0) in insn 48:
  Adding insn 47 to worklist
Processing use of (reg 13 sp) in insn 51:
Processing use of (reg 0 r0) in insn 51:
  Adding insn 50 to worklist
Processing use of (reg 13 sp) in insn 54:
Processing use of (reg 0 r0) in insn 54:
  Adding insn 53 to worklist
Processing use of (reg 13 sp) in insn 57:
Processing use of (reg 0 r0) in insn 57:
  Adding insn 56 to worklist
Processing use of (reg 13 sp) in insn 60:
Processing use of (reg 0 r0) in insn 60:
  Adding insn 59 to worklist
Processing use of (reg 13 sp) in insn 38:
Processing use of (reg 0 r0) in insn 38:
  Adding insn 37 to worklist
Processing use of (reg 134 [ execute_command.441 ]) in insn 37:
  Adding insn 33 to worklist
Processing use of (reg 148) in insn 33:
  Adding insn 32 to worklist
Processing use of (reg 13 sp) in insn 43:
Processing use of (reg 0 r0) in insn 43:
  Adding insn 41 to worklist
Processing use of (reg 1 r1) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 148) in insn 42:
Processing use of (reg 24 cc) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 134 [ execute_command.441 ]) in insn 34:
Processing use of (reg 13 sp) in insn 24:
Processing use of (reg 0 r0) in insn 24:
  Adding insn 23 to worklist
Processing use of (reg 135 [ ramdisk_execute_command.440 ]) in insn 23:
  Adding insn 19 to worklist
Processing use of (reg 145) in insn 19:
  Adding insn 18 to worklist
Processing use of (reg 13 sp) in insn 29:
Processing use of (reg 0 r0) in insn 29:
  Adding insn 27 to worklist
Processing use of (reg 1 r1) in insn 29:
  Adding insn 28 to worklist
Processing use of (reg 145) in insn 28:
Processing use of (reg 13 sp) in insn 5:
Processing use of (reg 13 sp) in insn 6:
Processing use of (reg 138) in insn 9:
  Adding insn 7 to worklist
Processing use of (reg 139) in insn 9:
  Adding insn 8 to worklist
Processing use of (reg 136 [ D.38070 ]) in insn 17:
  Adding insn 14 to worklist
Processing use of (reg 144) in insn 17:
  Adding insn 16 to worklist
Processing use of (reg 143 [ <variable>.flags ]) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 136 [ D.38070 ]) in insn 15:
Processing use of (reg 142 [ <variable>.task ]) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 140) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 141) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 13 sp) in insn 11:
Processing use of (reg 24 cc) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 135 [ ramdisk_execute_command.440 ]) in insn 20:


init_post

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={21d,10u} r1={14d,2u} r2={12d} r3={12d} r11={1d,6u} r12={12d} r13={1d,18u,1d} r14={12d,1u} r15={11d} r16={11d} r17={11d} r18={11d} r19={11d} r20={11d} r21={11d} r22={11d} r23={11d} r24={13d,2u} r25={1d,6u} r26={1d,5u} r27={11d} r28={11d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={11d} r38={11d} r39={11d} r40={11d} r41={11d} r42={11d} r43={11d} r44={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} r81={11d} r82={11d} r83={11d} r84={11d} r85={11d} r86={11d} r87={11d} r88={11d} r89={11d} r90={11d} r91={11d} r92={11d} r93={11d} r94={11d} r95={11d} r96={11d} r97={11d} r98={11d} r99={11d} r100={11d} r101={11d} r102={11d} r103={11d} r104={11d} r105={11d} r106={11d} r107={11d} r108={11d} r109={11d} r110={11d} r111={11d} r112={11d} r113={11d} r114={11d} r115={11d} r116={11d} r117={11d} r118={11d} r119={11d} r120={11d} r121={11d} r122={11d} r123={11d} r124={11d} r125={11d} r126={11d} r127={11d} r134={1d,2u} r135={1d,2u} r136={1d,2u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r148={1d,2u} 
;;    total ref usage 1390{1322d,67u,1e} in 40{29 regular + 11 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309
0[0,21] 1[21,14] 2[35,12] 3[47,12] 11[59,1] 12[60,12] 13[72,1] 14[73,12] 15[85,11] 16[96,11] 17[107,11] 18[118,11] 19[129,11] 20[140,11] 21[151,11] 22[162,11] 23[173,11] 24[184,13] 25[197,1] 26[198,1] 27[199,11] 28[210,11] 29[221,11] 30[232,11] 31[243,11] 32[254,11] 33[265,11] 34[276,11] 35[287,11] 36[298,11] 37[309,11] 38[320,11] 39[331,11] 40[342,11] 41[353,11] 42[364,11] 43[375,11] 44[386,11] 45[397,11] 46[408,11] 47[419,11] 48[430,11] 49[441,11] 50[452,11] 51[463,11] 52[474,11] 53[485,11] 54[496,11] 55[507,11] 56[518,11] 57[529,11] 58[540,11] 59[551,11] 60[562,11] 61[573,11] 62[584,11] 63[595,11] 64[606,11] 65[617,11] 66[628,11] 67[639,11] 68[650,11] 69[661,11] 70[672,11] 71[683,11] 72[694,11] 73[705,11] 74[716,11] 75[727,11] 76[738,11] 77[749,11] 78[760,11] 79[771,11] 80[782,11] 81[793,11] 82[804,11] 83[815,11] 84[826,11] 85[837,11] 86[848,11] 87[859,11] 88[870,11] 89[881,11] 90[892,11] 91[903,11] 92[914,11] 93[925,11] 94[936,11] 95[947,11] 96[958,11] 97[969,11] 98[980,11] 99[991,11] 100[1002,11] 101[1013,11] 102[1024,11] 103[1035,11] 104[1046,11] 105[1057,11] 106[1068,11] 107[1079,11] 108[1090,11] 109[1101,11] 110[1112,11] 111[1123,11] 112[1134,11] 113[1145,11] 114[1156,11] 115[1167,11] 116[1178,11] 117[1189,11] 118[1200,11] 119[1211,11] 120[1222,11] 121[1233,11] 122[1244,11] 123[1255,11] 124[1266,11] 125[1277,11] 126[1288,11] 127[1299,11] 134[1310,1] 135[1311,1] 136[1312,1] 138[1313,1] 139[1314,1] 140[1315,1] 141[1316,1] 142[1317,1] 143[1318,1] 144[1319,1] 145[1320,1] 148[1321,1] 
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 138 139 140 141 142 143 144 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 135 136 138 139 140 141 142 143 144 145
;; live  kill	 14 [lr]
;; rd  in  	(10)
20, 34, 46, 58, 59, 71, 72, 84, 197, 198
;; rd  gen 	(11)
194, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320
;; rd  kill	(35)
73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(call_insn 5 2 6 2 init/main.c:757 (parallel [
            (call (mem:SI (symbol_ref:SI ("async_synchronize_full") [flags 0x41] <function_decl 0x11a1fd00 async_synchronize_full>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 6 5 7 2 init/main.c:758 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_initmem") [flags 0x41] <function_decl 0x11a52000 free_initmem>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 7 6 8 2 init/main.c:760 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 8 7 9 2 init/main.c:760 (set (reg:SI 139)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 9 8 11 2 init/main.c:760 (set (mem/c/i:SI (reg/f:SI 138) [0 system_state+0 S4 A32])
        (reg:SI 139)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_DEAD (reg/f:SI 138)
            (expr_list:REG_EQUAL (const_int 1 [0x1])
                (nil)))))

(insn 11 9 12 2 init/main.c:764 (set (reg:SI 141)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 12 11 13 2 init/main.c:764 (set (reg:SI 140)
        (and:SI (reg:SI 141)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 141)
        (expr_list:REG_EQUAL (and:SI (reg/f:SI 13 sp)
                (const_int -8192 [0xffffffffffffe000]))
            (nil))))

(insn 13 12 14 2 init/main.c:764 (set (reg/f:SI 142 [ <variable>.task ])
        (mem/s/f/j:SI (plus:SI (reg:SI 140)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 140)
        (nil)))

(insn 14 13 15 2 init/main.c:764 (set (reg/f:SI 136 [ D.38070 ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 142 [ <variable>.task ])
                (const_int 936 [0x3a8])) [0 <variable>.signal+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 142 [ <variable>.task ])
        (nil)))

(insn 15 14 16 2 init/main.c:764 (set (reg:SI 143 [ <variable>.flags ])
        (mem/s/j:SI (plus:SI (reg/f:SI 136 [ D.38070 ])
                (const_int 64 [0x40])) [0 <variable>.flags+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 16 15 17 2 init/main.c:764 (set (reg:SI 144)
        (ior:SI (reg:SI 143 [ <variable>.flags ])
            (const_int 64 [0x40]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 143 [ <variable>.flags ])
        (nil)))

(insn 17 16 18 2 init/main.c:764 (set (mem/s/j:SI (plus:SI (reg/f:SI 136 [ D.38070 ])
                (const_int 64 [0x40])) [0 <variable>.flags+0 S4 A64])
        (reg:SI 144)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 144)
        (expr_list:REG_DEAD (reg/f:SI 136 [ D.38070 ])
            (nil))))

(insn 18 17 19 2 init/main.c:766 (set (reg/f:SI 145)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 19 18 20 2 init/main.c:766 (set (reg/f:SI 135 [ ramdisk_execute_command.440 ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 145)
                (const_int 8 [0x8])) [0 ramdisk_execute_command+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 ramdisk_execute_command+0 S4 A32])
        (nil)))

(insn 20 19 21 2 init/main.c:766 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 135 [ ramdisk_execute_command.440 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 2 init/main.c:766 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; rd  out 	(20)
20, 34, 46, 58, 59, 71, 72, 194, 197, 198, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(11){ }u21(13){ }u22(25){ }u23(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 145
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(20)
20, 34, 46, 58, 59, 71, 72, 194, 197, 198, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320
;; rd  gen 	(1)
15
;; rd  kill	(33)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84

;; Pred edge  2 [0.0%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 3 init/main.c:767 (set (reg:SI 0 r0)
        (reg/f:SI 135 [ ramdisk_execute_command.440 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 135 [ ramdisk_execute_command.440 ])
        (nil)))

(call_insn 24 23 27 3 init/main.c:767 (parallel [
            (call (mem:SI (symbol_ref:SI ("run_init_process") [flags 0x3] <function_decl 0x11a78b80 run_init_process>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 27 24 28 3 init/main.c:768 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11b21d00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11b21d00>)
        (nil)))

(insn 28 27 29 3 init/main.c:768 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 145)
                (const_int 8 [0x8])) [0 ramdisk_execute_command+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 145)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 ramdisk_execute_command+0 S4 A32])
            (nil))))

(call_insn 29 28 30 3 init/main.c:768 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(20)
15, 34, 46, 58, 59, 71, 72, 194, 197, 198, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u31(11){ }u32(13){ }u33(25){ }u34(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 134 148
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 134 148
;; live  kill	
;; rd  in  	(21)
15, 20, 34, 46, 58, 59, 71, 72, 194, 197, 198, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320
;; rd  gen 	(3)
191, 1310, 1321
;; rd  kill	(15)
184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 1310, 1321

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 30 29 31 4 59 "" [1 uses])

(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 4 init/main.c:778 (set (reg/f:SI 148)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 33 32 34 4 init/main.c:778 (set (reg/f:SI 134 [ execute_command.441 ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 148)
                (const_int 4 [0x4])) [0 execute_command+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 execute_command+0 S4 A32])
        (nil)))

(insn 34 33 35 4 init/main.c:778 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 134 [ execute_command.441 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 35 34 36 4 init/main.c:778 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; rd  out 	(23)
15, 20, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u38(11){ }u39(13){ }u40(25){ }u41(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 148
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(23)
15, 20, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321
;; rd  gen 	(1)
12
;; rd  kill	(33)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84

;; Pred edge  4 [0.0%]  (fallthru)
(note 36 35 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 37 36 38 5 init/main.c:779 (set (reg:SI 0 r0)
        (reg/f:SI 134 [ execute_command.441 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 134 [ execute_command.441 ])
        (nil)))

(call_insn 38 37 41 5 init/main.c:779 (parallel [
            (call (mem:SI (symbol_ref:SI ("run_init_process") [flags 0x3] <function_decl 0x11a78b80 run_init_process>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 41 38 42 5 init/main.c:780 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11add780>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11add780>)
        (nil)))

(insn 42 41 43 5 init/main.c:780 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 148)
                (const_int 4 [0x4])) [0 execute_command+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 148)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 4 [0x4]))) [0 execute_command+0 S4 A32])
            (nil))))

(call_insn 43 42 44 5 init/main.c:780 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(22)
12, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u49(11){ }u50(13){ }u51(25){ }u52(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; rd  in  	(24)
12, 15, 20, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321
;; rd  gen 	(0)

;; rd  kill	(12)
73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84

;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 44 43 45 6 60 "" [1 uses])

(note 45 44 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 47 45 48 6 init/main.c:783 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11b2d090>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11b2d090>)
        (nil)))

(call_insn 48 47 50 6 init/main.c:783 (parallel [
            (call (mem:SI (symbol_ref:SI ("run_init_process") [flags 0x3] <function_decl 0x11a78b80 run_init_process>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 50 48 51 6 init/main.c:784 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11b2d150>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x11b2d150>)
        (nil)))

(call_insn 51 50 53 6 init/main.c:784 (parallel [
            (call (mem:SI (symbol_ref:SI ("run_init_process") [flags 0x3] <function_decl 0x11a78b80 run_init_process>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 53 51 54 6 init/main.c:785 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x11b2d210>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x11b2d210>)
        (nil)))

(call_insn 54 53 56 6 init/main.c:785 (parallel [
            (call (mem:SI (symbol_ref:SI ("run_init_process") [flags 0x3] <function_decl 0x11a78b80 run_init_process>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 56 54 57 6 init/main.c:786 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x11b2d2d0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x11b2d2d0>)
        (nil)))

(call_insn 57 56 59 6 init/main.c:786 (parallel [
            (call (mem:SI (symbol_ref:SI ("run_init_process") [flags 0x3] <function_decl 0x11a78b80 run_init_process>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 59 57 60 6 init/main.c:788 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11ac8680>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11ac8680>)
        (nil)))

(call_insn 60 59 61 6 init/main.c:788 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a67680 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_NORETURN (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(24)
12, 15, 20, 34, 46, 58, 59, 71, 72, 191, 197, 198, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321



(barrier 61 60 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function kernel_init (kernel_init)[0:2071] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 19 count 17 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 19 count 30 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 19 count 30 (    2)


kernel_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={32d,14u} r1={24d,3u} r2={22d,1u} r3={21d} r11={1d,14u} r12={21d} r13={1d,35u,1d} r14={21d,1u} r15={20d} r16={20d} r17={20d} r18={20d} r19={20d} r20={20d} r21={20d} r22={20d} r23={20d} r24={25d,5u} r25={1d,14u} r26={1d,13u} r27={20d} r28={20d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={20d} r38={20d} r39={20d} r40={20d} r41={20d} r42={20d} r43={20d} r44={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} r81={20d} r82={20d} r83={20d} r84={20d} r85={20d} r86={20d} r87={20d} r88={20d} r89={20d} r90={20d} r91={20d} r92={20d} r93={20d} r94={20d} r95={20d} r96={20d} r97={20d} r98={20d} r99={20d} r100={20d} r101={20d} r102={20d} r103={20d} r104={20d} r105={20d} r106={20d} r107={20d} r108={20d} r109={20d} r110={20d} r111={20d} r112={20d} r113={20d} r114={20d} r115={20d} r116={20d} r117={20d} r118={20d} r119={20d} r120={20d} r121={20d} r122={20d} r123={20d} r124={20d} r125={20d} r126={20d} r127={20d} r133={2d,2u,1d} r134={2d,2u,1d} r137={1d,1u} r138={1d,1u} r142={1d,2u} r143={1d,1u} r145={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r155={1d,2u} r156={1d,1u} r158={1d,1u} r159={1d,2u} r161={1d,1u} r163={1d,1u} r164={1d,1u} 
;;    total ref usage 2514{2389d,122u,3e} in 68{48 regular + 20 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,32] 1[32,24] 2[56,22] 3[78,21] 11[99,1] 12[100,21] 13[121,1] 14[122,21] 15[143,20] 16[163,20] 17[183,20] 18[203,20] 19[223,20] 20[243,20] 21[263,20] 22[283,20] 23[303,20] 24[323,25] 25[348,1] 26[349,1] 27[350,20] 28[370,20] 29[390,20] 30[410,20] 31[430,20] 32[450,20] 33[470,20] 34[490,20] 35[510,20] 36[530,20] 37[550,20] 38[570,20] 39[590,20] 40[610,20] 41[630,20] 42[650,20] 43[670,20] 44[690,20] 45[710,20] 46[730,20] 47[750,20] 48[770,20] 49[790,20] 50[810,20] 51[830,20] 52[850,20] 53[870,20] 54[890,20] 55[910,20] 56[930,20] 57[950,20] 58[970,20] 59[990,20] 60[1010,20] 61[1030,20] 62[1050,20] 63[1070,20] 64[1090,20] 65[1110,20] 66[1130,20] 67[1150,20] 68[1170,20] 69[1190,20] 70[1210,20] 71[1230,20] 72[1250,20] 73[1270,20] 74[1290,20] 75[1310,20] 76[1330,20] 77[1350,20] 78[1370,20] 79[1390,20] 80[1410,20] 81[1430,20] 82[1450,20] 83[1470,20] 84[1490,20] 85[1510,20] 86[1530,20] 87[1550,20] 88[1570,20] 89[1590,20] 90[1610,20] 91[1630,20] 92[1650,20] 93[1670,20] 94[1690,20] 95[1710,20] 96[1730,20] 97[1750,20] 98[1770,20] 99[1790,20] 100[1810,20] 101[1830,20] 102[1850,20] 103[1870,20] 104[1890,20] 105[1910,20] 106[1930,20] 107[1950,20] 108[1970,20] 109[1990,20] 110[2010,20] 111[2030,20] 112[2050,20] 113[2070,20] 114[2090,20] 115[2110,20] 116[2130,20] 117[2150,20] 118[2170,20] 119[2190,20] 120[2210,20] 121[2230,20] 122[2250,20] 123[2270,20] 124[2290,20] 125[2310,20] 126[2330,20] 127[2350,20] 133[2370,2] 134[2372,2] 137[2374,1] 138[2375,1] 142[2376,1] 143[2377,1] 145[2378,1] 148[2379,1] 149[2380,1] 150[2381,1] 155[2382,1] 156[2383,1] 158[2384,1] 159[2385,1] 161[2386,1] 163[2387,1] 164[2388,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d31(0){ }d55(1){ }d77(2){ }d98(3){ }d99(11){ }d120(12){ }d121(13){ }d142(14){ }d348(25){ }d349(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
31, 55, 77, 98, 99, 120, 121, 142, 348, 349
;; rd  kill	(145)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 348, 349
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
31, 55, 77, 98, 99, 120, 121, 142, 348, 349

( 0 )->[2]->( 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d99(bb 0 insn -1) }u1(13){ d121(bb 0 insn -1) }u2(25){ d348(bb 0 insn -1) }u3(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 142 143 145 148 149 150 164
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 134 142 143 145 148 149 150 164
;; live  kill	 14 [lr]
;; rd  in  	(10)
31, 55, 77, 98, 99, 120, 121, 142, 348, 349
;; rd  gen 	(8)
2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;; rd  kill	(30)
122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; rd  out 	(17)
31, 55, 77, 98, 99, 120, 121, 348, 349, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 8
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d5(bb 2 insn 7) }
;;   UD chains for insn luid 2 uid 10
;;      reg 13 { d121(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 11
;;      reg 143 { d2377(bb 2 insn 10) }
;;   eq_note reg 13 { }
;;   UD chains for insn luid 4 uid 13
;;      reg 142 { d2376(bb 2 insn 11) }
;;   UD chains for insn luid 6 uid 15
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d29(bb 2 insn 13) }
;;      reg 1 { d32(bb 2 insn 14) }
;;   UD chains for insn luid 8 uid 20
;;      reg 142 { d2376(bb 2 insn 11) }
;;   UD chains for insn luid 9 uid 21
;;      reg 148 { d2379(bb 2 insn 20) }
;;   UD chains for insn luid 10 uid 22
;;      reg 145 { d2378(bb 2 insn 17) }
;;      reg 149 { d2380(bb 2 insn 21) }
;;   UD chains for insn luid 12 uid 24
;;      reg 150 { d2381(bb 2 insn 23) }
;;   UD chains for insn luid 13 uid 25
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d27(bb 2 insn 24) }

( 4 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(11){ d99(bb 0 insn -1) }u21(13){ d121(bb 0 insn -1) }u22(25){ d348(bb 0 insn -1) }u23(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  gen 	 0 [r0] 134
;; live  kill	 14 [lr]
;; rd  in  	(20)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;; rd  gen 	(2)
25, 2372
;; rd  kill	(55)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2372, 2373
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; rd  out 	(18)
25, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 30
;;      reg 134 { d2373(bb 2 insn 26) d2372(bb 3 insn 30) }
;;   UD chains for insn luid 1 uid 31
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d1(bb 3 insn 30) }

( 3 2 )->[4]->( 3 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u28(11){ d99(bb 0 insn -1) }u29(13){ d121(bb 0 insn -1) }u30(25){ d348(bb 0 insn -1) }u31(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(20)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;; rd  gen 	(1)
323
;; rd  kill	(25)
323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; rd  out 	(20)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 37
;;      reg 134 { d2373(bb 2 insn 26) d2372(bb 3 insn 30) }
;;      reg 164 { d2388(bb 2 insn 36) }
;;   eq_note reg 134 { }
;;   UD chains for insn luid 1 uid 38
;;      reg 24 { d323(bb 4 insn 37) }

( 4 )->[5]->( 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u36(11){ d99(bb 0 insn -1) }u37(13){ d121(bb 0 insn -1) }u38(25){ d348(bb 0 insn -1) }u39(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 163
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 133 163
;; live  kill	 14 [lr]
;; rd  in  	(20)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;; rd  gen 	(2)
2371, 2387
;; rd  kill	(24)
122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2370, 2371, 2387
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; rd  out 	(22)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 40
;;      reg 13 { d121(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 41
;;      reg 13 { d121(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 42
;;      reg 13 { d121(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 43
;;      reg 13 { d121(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 44
;;      reg 13 { d121(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 45
;;      reg 13 { d121(bb 0 insn -1) }
;;   UD chains for insn luid 6 uid 46
;;      reg 13 { d121(bb 0 insn -1) }
;;   UD chains for insn luid 7 uid 47
;;      reg 13 { d121(bb 0 insn -1) }

( 7 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u48(11){ d99(bb 0 insn -1) }u49(13){ d121(bb 0 insn -1) }u50(25){ d348(bb 0 insn -1) }u51(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  gen 	 0 [r0] 133
;; live  kill	 14 [lr]
;; rd  in  	(24)
16, 25, 31, 55, 77, 98, 99, 120, 121, 324, 348, 349, 2370, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(2)
16, 2370
;; rd  kill	(55)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2370, 2371
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; rd  out 	(21)
16, 55, 77, 98, 99, 120, 121, 324, 348, 349, 2370, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 52
;;      reg 133 { d2371(bb 5 insn 48) d2370(bb 6 insn 52) }
;;   UD chains for insn luid 1 uid 53
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d0(bb 6 insn 52) }

( 6 5 )->[7]->( 6 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u56(11){ d99(bb 0 insn -1) }u57(13){ d121(bb 0 insn -1) }u58(25){ d348(bb 0 insn -1) }u59(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(25)
16, 25, 31, 55, 77, 98, 99, 120, 121, 323, 324, 348, 349, 2370, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(1)
324
;; rd  kill	(25)
323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; rd  out 	(24)
16, 25, 31, 55, 77, 98, 99, 120, 121, 324, 348, 349, 2370, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 59
;;      reg 133 { d2371(bb 5 insn 48) d2370(bb 6 insn 52) }
;;      reg 163 { d2387(bb 5 insn 58) }
;;   eq_note reg 133 { }
;;   UD chains for insn luid 1 uid 60
;;      reg 24 { d324(bb 7 insn 59) }

( 7 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u64(11){ d99(bb 0 insn -1) }u65(13){ d121(bb 0 insn -1) }u66(25){ d348(bb 0 insn -1) }u67(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 138
;; live  kill	 14 [lr]
;; rd  in  	(24)
16, 25, 31, 55, 77, 98, 99, 120, 121, 324, 348, 349, 2370, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(3)
15, 333, 2375
;; rd  kill	(79)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 2375
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(23)
15, 55, 77, 98, 99, 120, 121, 333, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 66
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d4(bb 8 insn 63) }
;;      reg 1 { d41(bb 8 insn 64) }
;;      reg 2 { d63(bb 8 insn 65) }
;;   UD chains for insn luid 4 uid 67
;;      reg 0 { d15(bb 8 insn 66) }
;;   UD chains for insn luid 5 uid 68
;;      reg 138 { d2375(bb 8 insn 67) }
;;   UD chains for insn luid 6 uid 69
;;      reg 24 { d333(bb 8 insn 68) }

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u75(11){ d99(bb 0 insn -1) }u76(13){ d121(bb 0 insn -1) }u77(25){ d348(bb 0 insn -1) }u78(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; rd  in  	(23)
15, 55, 77, 98, 99, 120, 121, 333, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(1)
14
;; rd  kill	(53)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(23)
14, 55, 77, 98, 99, 120, 121, 333, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 73
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d3(bb 9 insn 72) }

( 8 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u81(11){ d99(bb 0 insn -1) }u82(13){ d121(bb 0 insn -1) }u83(25){ d348(bb 0 insn -1) }u84(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 155 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 24 [cc] 155 156
;; live  kill	 14 [lr]
;; rd  in  	(24)
14, 15, 55, 77, 98, 99, 120, 121, 333, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(4)
10, 329, 2382, 2383
;; rd  kill	(80)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 2382, 2383
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; rd  out 	(25)
10, 55, 77, 98, 99, 120, 121, 329, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 77
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d13(bb 10 insn 76) }
;;   UD chains for insn luid 3 uid 79
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d11(bb 10 insn 78) }
;;   UD chains for insn luid 5 uid 81
;;      reg 155 { d2382(bb 10 insn 80) }
;;   UD chains for insn luid 6 uid 82
;;      reg 156 { d2383(bb 10 insn 81) }
;;   UD chains for insn luid 7 uid 83
;;      reg 24 { d329(bb 10 insn 82) }

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u92(11){ d99(bb 0 insn -1) }u93(13){ d121(bb 0 insn -1) }u94(25){ d348(bb 0 insn -1) }u95(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 158
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; live  gen 	 158
;; live  kill	
;; rd  in  	(25)
10, 55, 77, 98, 99, 120, 121, 329, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388
;; rd  gen 	(1)
2384
;; rd  kill	(1)
2384
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(26)
10, 55, 77, 98, 99, 120, 121, 329, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 87
;;      reg 155 { d2382(bb 10 insn 80) }
;;      reg 158 { d2384(bb 11 insn 86) }

( 10 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u98(11){ d99(bb 0 insn -1) }u99(13){ d121(bb 0 insn -1) }u100(25){ d348(bb 0 insn -1) }u101(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 137 159
;; live  kill	 14 [lr]
;; rd  in  	(26)
10, 55, 77, 98, 99, 120, 121, 329, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2387, 2388
;; rd  gen 	(4)
8, 327, 2374, 2385
;; rd  kill	(80)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 2374, 2385
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; rd  out 	(28)
8, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 91
;;      reg 159 { d2385(bb 12 insn 90) }
;;   UD chains for insn luid 3 uid 93
;;      reg 13 { d121(bb 0 insn -1) }
;;      reg 0 { d9(bb 12 insn 91) }
;;      reg 1 { d36(bb 12 insn 92) }
;;   UD chains for insn luid 4 uid 94
;;      reg 0 { d8(bb 12 insn 93) }
;;   UD chains for insn luid 5 uid 95
;;      reg 137 { d2374(bb 12 insn 94) }
;;   UD chains for insn luid 6 uid 96
;;      reg 24 { d327(bb 12 insn 95) }

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u109(11){ d99(bb 0 insn -1) }u110(13){ d121(bb 0 insn -1) }u111(25){ d348(bb 0 insn -1) }u112(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 161
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; live  gen 	 161
;; live  kill	 14 [lr]
;; rd  in  	(28)
8, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2387, 2388
;; rd  gen 	(1)
2386
;; rd  kill	(22)
122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2386
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(29)
8, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 100
;;      reg 159 { d2385(bb 12 insn 90) }
;;      reg 161 { d2386(bb 13 insn 99) }
;;   UD chains for insn luid 2 uid 101
;;      reg 13 { d121(bb 0 insn -1) }

( 12 13 )->[14]->( 1 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u116(11){ d99(bb 0 insn -1) }u117(13){ d121(bb 0 insn -1) }u118(25){ d348(bb 0 insn -1) }u119(26){ d349(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; rd  in  	(29)
8, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388
;; rd  gen 	(1)
2
;; rd  kill	(53)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(29)
2, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388
;;  UD chains for artificial uses
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 25 { d348(bb 0 insn -1) }
;;   reg 26 { d349(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 104
;;      reg 13 { d121(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 115
;;      reg 0 { d2(bb 14 insn 109) }

( 14 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u122(0){ d2(bb 14 insn 109) }u123(11){ d99(bb 0 insn -1) }u124(13){ d121(bb 0 insn -1) }u125(14){ }u126(25){ d348(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(29)
2, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(29)
2, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388
;;  UD chains for artificial uses
;;   reg 0 { d2(bb 14 insn 109) }
;;   reg 11 { d99(bb 0 insn -1) }
;;   reg 13 { d121(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d348(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 121 to worklist
  Adding insn 25 to worklist
  Adding insn 22 to worklist
  Adding insn 15 to worklist
  Adding insn 8 to worklist
  Adding insn 31 to worklist
  Adding insn 38 to worklist
  Adding insn 123 to worklist
  Adding insn 47 to worklist
  Adding insn 46 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
  Adding insn 42 to worklist
  Adding insn 41 to worklist
  Adding insn 40 to worklist
  Adding insn 53 to worklist
  Adding insn 60 to worklist
  Adding insn 69 to worklist
  Adding insn 66 to worklist
  Adding insn 73 to worklist
  Adding insn 83 to worklist
  Adding insn 79 to worklist
  Adding insn 77 to worklist
  Adding insn 87 to worklist
  Adding insn 96 to worklist
  Adding insn 93 to worklist
  Adding insn 101 to worklist
  Adding insn 100 to worklist
  Adding insn 115 to worklist
  Adding insn 104 to worklist
Finished finding needed instructions:
  Adding insn 109 to worklist
Processing use of (reg 13 sp) in insn 104:
Processing use of (reg 0 r0) in insn 115:
Processing use of (reg 159) in insn 100:
  Adding insn 90 to worklist
Processing use of (reg 161) in insn 100:
  Adding insn 99 to worklist
Processing use of (reg 13 sp) in insn 101:
Processing use of (reg 13 sp) in insn 93:
Processing use of (reg 0 r0) in insn 93:
  Adding insn 91 to worklist
Processing use of (reg 1 r1) in insn 93:
  Adding insn 92 to worklist
Processing use of (reg 159) in insn 91:
Processing use of (reg 24 cc) in insn 96:
  Adding insn 95 to worklist
Processing use of (reg 137 [ D.38092 ]) in insn 95:
  Adding insn 94 to worklist
Processing use of (reg 0 r0) in insn 94:
Processing use of (reg 155) in insn 87:
  Adding insn 80 to worklist
Processing use of (reg 158) in insn 87:
  Adding insn 86 to worklist
Processing use of (reg 13 sp) in insn 77:
Processing use of (reg 0 r0) in insn 77:
  Adding insn 76 to worklist
Processing use of (reg 13 sp) in insn 79:
Processing use of (reg 0 r0) in insn 79:
  Adding insn 78 to worklist
Processing use of (reg 24 cc) in insn 83:
  Adding insn 82 to worklist
Processing use of (reg 156 [ ramdisk_execute_command ]) in insn 82:
  Adding insn 81 to worklist
Processing use of (reg 155) in insn 81:
Processing use of (reg 13 sp) in insn 73:
Processing use of (reg 0 r0) in insn 73:
  Adding insn 72 to worklist
Processing use of (reg 13 sp) in insn 66:
Processing use of (reg 0 r0) in insn 66:
  Adding insn 63 to worklist
Processing use of (reg 1 r1) in insn 66:
  Adding insn 64 to worklist
Processing use of (reg 2 r2) in insn 66:
  Adding insn 65 to worklist
Processing use of (reg 24 cc) in insn 69:
  Adding insn 68 to worklist
Processing use of (reg 138 [ D.38086 ]) in insn 68:
  Adding insn 67 to worklist
Processing use of (reg 0 r0) in insn 67:
Processing use of (reg 24 cc) in insn 60:
  Adding insn 59 to worklist
Processing use of (reg 133 [ fn ]) in insn 59:
  Adding insn 48 to worklist
  Adding insn 52 to worklist
Processing use of (reg 163) in insn 59:
  Adding insn 58 to worklist
Processing use of (reg 133 [ fn ]) in insn 52:
Processing use of (reg 13 sp) in insn 53:
Processing use of (reg 0 r0) in insn 53:
Processing use of (reg 13 sp) in insn 40:
Processing use of (reg 13 sp) in insn 41:
Processing use of (reg 13 sp) in insn 42:
Processing use of (reg 13 sp) in insn 43:
Processing use of (reg 13 sp) in insn 44:
Processing use of (reg 13 sp) in insn 45:
Processing use of (reg 13 sp) in insn 46:
Processing use of (reg 13 sp) in insn 47:
Processing use of (reg 24 cc) in insn 38:
  Adding insn 37 to worklist
Processing use of (reg 134 [ fn ]) in insn 37:
  Adding insn 26 to worklist
  Adding insn 30 to worklist
Processing use of (reg 164) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 134 [ fn ]) in insn 30:
Processing use of (reg 13 sp) in insn 31:
Processing use of (reg 0 r0) in insn 31:
Processing use of (reg 13 sp) in insn 8:
Processing use of (reg 0 r0) in insn 8:
  Adding insn 7 to worklist
Processing use of (reg 13 sp) in insn 15:
Processing use of (reg 0 r0) in insn 15:
  Adding insn 13 to worklist
Processing use of (reg 1 r1) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 142) in insn 13:
  Adding insn 11 to worklist
Processing use of (reg 143) in insn 11:
  Adding insn 10 to worklist
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 145) in insn 22:
  Adding insn 17 to worklist
Processing use of (reg 149 [ <variable>.pid ]) in insn 22:
  Adding insn 21 to worklist
Processing use of (reg 148 [ <variable>.task ]) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 142) in insn 20:
Processing use of (reg 13 sp) in insn 25:
Processing use of (reg 0 r0) in insn 25:
  Adding insn 24 to worklist
Processing use of (reg 150) in insn 24:
  Adding insn 23 to worklist


kernel_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={32d,14u} r1={24d,3u} r2={22d,1u} r3={21d} r11={1d,14u} r12={21d} r13={1d,35u,1d} r14={21d,1u} r15={20d} r16={20d} r17={20d} r18={20d} r19={20d} r20={20d} r21={20d} r22={20d} r23={20d} r24={25d,5u} r25={1d,14u} r26={1d,13u} r27={20d} r28={20d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={20d} r38={20d} r39={20d} r40={20d} r41={20d} r42={20d} r43={20d} r44={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} r81={20d} r82={20d} r83={20d} r84={20d} r85={20d} r86={20d} r87={20d} r88={20d} r89={20d} r90={20d} r91={20d} r92={20d} r93={20d} r94={20d} r95={20d} r96={20d} r97={20d} r98={20d} r99={20d} r100={20d} r101={20d} r102={20d} r103={20d} r104={20d} r105={20d} r106={20d} r107={20d} r108={20d} r109={20d} r110={20d} r111={20d} r112={20d} r113={20d} r114={20d} r115={20d} r116={20d} r117={20d} r118={20d} r119={20d} r120={20d} r121={20d} r122={20d} r123={20d} r124={20d} r125={20d} r126={20d} r127={20d} r133={2d,2u,1d} r134={2d,2u,1d} r137={1d,1u} r138={1d,1u} r142={1d,2u} r143={1d,1u} r145={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r155={1d,2u} r156={1d,1u} r158={1d,1u} r159={1d,2u} r161={1d,1u} r163={1d,1u} r164={1d,1u} 
;;    total ref usage 2514{2389d,122u,3e} in 68{48 regular + 20 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,32] 1[32,24] 2[56,22] 3[78,21] 11[99,1] 12[100,21] 13[121,1] 14[122,21] 15[143,20] 16[163,20] 17[183,20] 18[203,20] 19[223,20] 20[243,20] 21[263,20] 22[283,20] 23[303,20] 24[323,25] 25[348,1] 26[349,1] 27[350,20] 28[370,20] 29[390,20] 30[410,20] 31[430,20] 32[450,20] 33[470,20] 34[490,20] 35[510,20] 36[530,20] 37[550,20] 38[570,20] 39[590,20] 40[610,20] 41[630,20] 42[650,20] 43[670,20] 44[690,20] 45[710,20] 46[730,20] 47[750,20] 48[770,20] 49[790,20] 50[810,20] 51[830,20] 52[850,20] 53[870,20] 54[890,20] 55[910,20] 56[930,20] 57[950,20] 58[970,20] 59[990,20] 60[1010,20] 61[1030,20] 62[1050,20] 63[1070,20] 64[1090,20] 65[1110,20] 66[1130,20] 67[1150,20] 68[1170,20] 69[1190,20] 70[1210,20] 71[1230,20] 72[1250,20] 73[1270,20] 74[1290,20] 75[1310,20] 76[1330,20] 77[1350,20] 78[1370,20] 79[1390,20] 80[1410,20] 81[1430,20] 82[1450,20] 83[1470,20] 84[1490,20] 85[1510,20] 86[1530,20] 87[1550,20] 88[1570,20] 89[1590,20] 90[1610,20] 91[1630,20] 92[1650,20] 93[1670,20] 94[1690,20] 95[1710,20] 96[1730,20] 97[1750,20] 98[1770,20] 99[1790,20] 100[1810,20] 101[1830,20] 102[1850,20] 103[1870,20] 104[1890,20] 105[1910,20] 106[1930,20] 107[1950,20] 108[1970,20] 109[1990,20] 110[2010,20] 111[2030,20] 112[2050,20] 113[2070,20] 114[2090,20] 115[2110,20] 116[2130,20] 117[2150,20] 118[2170,20] 119[2190,20] 120[2210,20] 121[2230,20] 122[2250,20] 123[2270,20] 124[2290,20] 125[2310,20] 126[2330,20] 127[2350,20] 133[2370,2] 134[2372,2] 137[2374,1] 138[2375,1] 142[2376,1] 143[2377,1] 145[2378,1] 148[2379,1] 149[2380,1] 150[2381,1] 155[2382,1] 156[2383,1] 158[2384,1] 159[2385,1] 161[2386,1] 163[2387,1] 164[2388,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 142 143 145 148 149 150 164
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 134 142 143 145 148 149 150 164
;; live  kill	 14 [lr]
;; rd  in  	(10)
31, 55, 77, 98, 99, 120, 121, 142, 348, 349
;; rd  gen 	(8)
2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;; rd  kill	(30)
122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 3 8 2 init/main.c:797 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(call_insn 8 7 10 2 init/main.c:797 (parallel [
            (call (mem:SI (symbol_ref:SI ("wait_for_completion") [flags 0x41] <function_decl 0x10d1ac00 wait_for_completion>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 10 8 11 2 init/main.c:805 (set (reg:SI 143)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 11 10 13 2 init/main.c:805 (set (reg:SI 142)
        (and:SI (reg:SI 143)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 143)
        (expr_list:REG_EQUAL (and:SI (reg/f:SI 13 sp)
                (const_int -8192 [0xffffffffffffe000]))
            (nil))))

(insn 13 11 14 2 init/main.c:805 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg:SI 142)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 14 13 15 2 init/main.c:805 (set (reg:SI 1 r1)
        (symbol_ref:SI ("cpu_all_bits") [flags 0xc0] <var_decl 0x10c81900 cpu_all_bits>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("cpu_all_bits") [flags 0xc0] <var_decl 0x10c81900 cpu_all_bits>)
        (nil)))

(call_insn 15 14 17 2 init/main.c:805 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("set_cpus_allowed_ptr") [flags 0x41] <function_decl 0x11332480 set_cpus_allowed_ptr>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 17 15 20 2 init/main.c:807 (set (reg/f:SI 145)
        (symbol_ref:SI ("cad_pid") [flags 0xc0] <var_decl 0x1132e420 cad_pid>)) 167 {*arm_movsi_insn} (nil))

(insn 20 17 21 2 init/main.c:807 (set (reg/f:SI 148 [ <variable>.task ])
        (mem/s/f/j:SI (plus:SI (reg:SI 142)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 142)
        (nil)))

(insn 21 20 22 2 init/main.c:807 (set (reg/f:SI 149 [ <variable>.pid ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 148 [ <variable>.task ])
                (const_int 592 [0x250])) [0 <variable>.pid+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 148 [ <variable>.task ])
        (nil)))

(insn 22 21 23 2 init/main.c:807 (set (mem/f/c/i:SI (reg/f:SI 145) [0 cad_pid+0 S4 A32])
        (reg/f:SI 149 [ <variable>.pid ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 149 [ <variable>.pid ])
        (expr_list:REG_DEAD (reg/f:SI 145)
            (nil))))

(insn 23 22 24 2 init/main.c:809 (set (reg/f:SI 150)
        (symbol_ref:SI ("setup_max_cpus") [flags 0xc0] <var_decl 0x10c98de0 setup_max_cpus>)) 167 {*arm_movsi_insn} (nil))

(insn 24 23 25 2 init/main.c:809 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 150) [0 setup_max_cpus+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 150)
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("setup_max_cpus") [flags 0xc0] <var_decl 0x10c98de0 setup_max_cpus>) [0 setup_max_cpus+0 S4 A32])
            (nil))))

(call_insn 25 24 26 2 init/main.c:809 (parallel [
            (call (mem:SI (symbol_ref:SI ("smp_prepare_cpus") [flags 0x41] <function_decl 0x10c9f900 smp_prepare_cpus>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 26 25 36 2 init/main.c:741 (set (reg/v/f:SI 134 [ fn ])
        (symbol_ref:SI ("__initcall_start") [flags 0xc0] <var_decl 0x11a8fa80 __initcall_start>)) 167 {*arm_movsi_insn} (nil))

(insn 36 26 121 2 init/main.c:741 discrim 1 (set (reg/f:SI 164)
        (symbol_ref:SI ("__early_initcall_end") [flags 0xc0] <var_decl 0x11a8fb40 __early_initcall_end>)) 167 {*arm_movsi_insn} (nil))

(jump_insn 121 36 122 2 (set (pc)
        (label_ref 33)) -1 (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; rd  out 	(17)
31, 55, 77, 98, 99, 120, 121, 348, 349, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388


;; Succ edge  4 [100.0%] 

(barrier 122 121 35)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(11){ }u21(13){ }u22(25){ }u23(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  gen 	 0 [r0] 134
;; live  kill	 14 [lr]
;; rd  in  	(20)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;; rd  gen 	(2)
25, 2372
;; rd  kill	(55)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2372, 2373

;; Pred edge  4 [91.0%] 
(code_label 35 122 29 3 66 "" [1 uses])

(note 29 35 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 31 3 init/main.c:742 (set (reg:SI 0 r0)
        (mem/f:SI (post_inc:SI (reg/v/f:SI 134 [ fn ])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/v/f:SI 134 [ fn ])
        (nil)))

(call_insn 31 30 33 3 init/main.c:742 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_one_initcall") [flags 0x3] <function_decl 0x10a49a00 do_one_initcall>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; rd  out 	(18)
25, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2376, 2377, 2378, 2379, 2380, 2381, 2388


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u28(11){ }u29(13){ }u30(25){ }u31(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(20)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;; rd  gen 	(1)
323
;; rd  kill	(25)
323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 33 31 34 4 65 "" [1 uses])

(note 34 33 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 37 34 38 4 init/main.c:741 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 134 [ fn ])
            (reg/f:SI 164))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 134 [ fn ])
            (symbol_ref:SI ("__early_initcall_end") [flags 0xc0] <var_decl 0x11a8fb40 __early_initcall_end>))
        (nil)))

(jump_insn 38 37 39 4 init/main.c:741 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 164
;; rd  out 	(20)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 163
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 133 163
;; live  kill	 14 [lr]
;; rd  in  	(20)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2388
;; rd  gen 	(2)
2371, 2387
;; rd  kill	(24)
122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2370, 2371, 2387

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 40 39 41 5 init/main.c:812 (parallel [
            (call (mem:SI (symbol_ref:SI ("lockup_detector_init") [flags 0x41] <function_decl 0x112b7e80 lockup_detector_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 41 40 42 5 init/main.c:814 (parallel [
            (call (mem:SI (symbol_ref:SI ("smp_init") [flags 0x41] <function_decl 0x10ca2180 smp_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 42 41 43 5 init/main.c:815 (parallel [
            (call (mem:SI (symbol_ref:SI ("sched_init_smp") [flags 0x41] <function_decl 0x112b7300 sched_init_smp>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 43 42 44 5 init/main.c:728 (parallel [
            (call (mem:SI (symbol_ref:SI ("usermodehelper_init") [flags 0x41] <function_decl 0x10d84a80 usermodehelper_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 44 43 45 5 init/main.c:729 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("shmem_init") [flags 0x41] <function_decl 0x11a3b300 shmem_init>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (nil))

(call_insn 45 44 46 5 init/main.c:730 (parallel [
            (call (mem:SI (symbol_ref:SI ("driver_init") [flags 0x41] <function_decl 0x11564a80 driver_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 46 45 47 5 init/main.c:731 (parallel [
            (call (mem:SI (symbol_ref:SI ("init_irq_proc") [flags 0x41] <function_decl 0x115f3500 init_irq_proc>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 47 46 48 5 init/main.c:733 (parallel [
            (call (mem:SI (symbol_ref:SI ("usermodehelper_enable") [flags 0x41] <function_decl 0x10d84b80 usermodehelper_enable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 48 47 58 5 init/main.c:714 (set (reg/v/f:SI 133 [ fn ])
        (symbol_ref:SI ("__early_initcall_end") [flags 0xc0] <var_decl 0x11a8fb40 __early_initcall_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__early_initcall_end") [flags 0xc0] <var_decl 0x11a8fb40 __early_initcall_end>)
        (nil)))

(insn 58 48 123 5 init/main.c:714 discrim 1 (set (reg/f:SI 163)
        (symbol_ref:SI ("__initcall_end") [flags 0xc0] <var_decl 0x11a8fae0 __initcall_end>)) 167 {*arm_movsi_insn} (nil))

(jump_insn 123 58 124 5 (set (pc)
        (label_ref 55)) -1 (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; rd  out 	(22)
25, 31, 55, 77, 98, 99, 120, 121, 323, 348, 349, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388


;; Succ edge  7 [100.0%] 

(barrier 124 123 57)

;; Start of basic block ( 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u48(11){ }u49(13){ }u50(25){ }u51(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  gen 	 0 [r0] 133
;; live  kill	 14 [lr]
;; rd  in  	(24)
16, 25, 31, 55, 77, 98, 99, 120, 121, 324, 348, 349, 2370, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(2)
16, 2370
;; rd  kill	(55)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2370, 2371

;; Pred edge  7 [91.0%] 
(code_label 57 124 51 6 68 "" [1 uses])

(note 51 57 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 6 init/main.c:715 (set (reg:SI 0 r0)
        (mem/f:SI (post_inc:SI (reg/v/f:SI 133 [ fn ])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/v/f:SI 133 [ fn ])
        (nil)))

(call_insn 53 52 55 6 init/main.c:715 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_one_initcall") [flags 0x3] <function_decl 0x10a49a00 do_one_initcall>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; rd  out 	(21)
16, 55, 77, 98, 99, 120, 121, 324, 348, 349, 2370, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u56(11){ }u57(13){ }u58(25){ }u59(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(25)
16, 25, 31, 55, 77, 98, 99, 120, 121, 323, 324, 348, 349, 2370, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(1)
324
;; rd  kill	(25)
323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347

;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
;; Pred edge  5 [100.0%] 
(code_label 55 53 56 7 67 "" [1 uses])

(note 56 55 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 59 56 60 7 init/main.c:714 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 133 [ fn ])
            (reg/f:SI 163))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 133 [ fn ])
            (symbol_ref:SI ("__initcall_end") [flags 0xc0] <var_decl 0x11a8fae0 __initcall_end>))
        (nil)))

(jump_insn 60 59 61 7 init/main.c:714 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 57)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 7 -> ( 6 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 163
;; rd  out 	(24)
16, 25, 31, 55, 77, 98, 99, 120, 121, 324, 348, 349, 2370, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388


;; Succ edge  6 [91.0%] 
;; Succ edge  8 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u64(11){ }u65(13){ }u66(25){ }u67(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 138
;; live  kill	 14 [lr]
;; rd  in  	(24)
16, 25, 31, 55, 77, 98, 99, 120, 121, 324, 348, 349, 2370, 2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(3)
15, 333, 2375
;; rd  kill	(79)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 2375

;; Pred edge  7 [9.0%]  (fallthru,loop_exit)
(note 61 60 63 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 63 61 64 8 init/main.c:820 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x11b3de10>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x11b3de10>)
        (nil)))

(insn 64 63 65 8 init/main.c:820 (set (reg:SI 1 r1)
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (nil))

(insn 65 64 66 8 init/main.c:820 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 66 65 67 8 init/main.c:820 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_open") [flags 0x41] <function_decl 0x1146d100 sys_open>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 67 66 68 8 init/main.c:820 (set (reg:SI 138 [ D.38086 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 68 67 69 8 init/main.c:820 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 138 [ D.38086 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 138 [ D.38086 ])
        (nil)))

(jump_insn 69 68 70 8 init/main.c:820 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(23)
15, 55, 77, 98, 99, 120, 121, 333, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388


;; Succ edge  9 [0.0%]  (fallthru)
;; Succ edge  10 [100.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u75(11){ }u76(13){ }u77(25){ }u78(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; rd  in  	(23)
15, 55, 77, 98, 99, 120, 121, 333, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(1)
14
;; rd  kill	(53)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142

;; Pred edge  8 [0.0%]  (fallthru)
(note 70 69 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 72 70 73 9 init/main.c:821 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x11add870>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x11add870>)
        (nil)))

(call_insn 73 72 74 9 init/main.c:821 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(23)
14, 55, 77, 98, 99, 120, 121, 333, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u81(11){ }u82(13){ }u83(25){ }u84(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 155 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 24 [cc] 155 156
;; live  kill	 14 [lr]
;; rd  in  	(24)
14, 15, 55, 77, 98, 99, 120, 121, 333, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2387, 2388
;; rd  gen 	(4)
10, 329, 2382, 2383
;; rd  kill	(80)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 2382, 2383

;; Pred edge  8 [100.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 74 73 75 10 69 "" [1 uses])

(note 75 74 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 76 75 77 10 init/main.c:823 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 77 76 78 10 init/main.c:823 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_dup") [flags 0x41] <function_decl 0x11468980 sys_dup>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 78 77 79 10 init/main.c:824 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 79 78 80 10 init/main.c:824 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_dup") [flags 0x41] <function_decl 0x11468980 sys_dup>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 80 79 81 10 init/main.c:830 (set (reg/f:SI 155)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 81 80 82 10 init/main.c:830 (set (reg/f:SI 156 [ ramdisk_execute_command ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 155)
                (const_int 8 [0x8])) [0 ramdisk_execute_command+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 ramdisk_execute_command+0 S4 A32])
        (nil)))

(insn 82 81 83 10 init/main.c:830 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 156 [ ramdisk_execute_command ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 156 [ ramdisk_execute_command ])
        (nil)))

(jump_insn 83 82 84 10 init/main.c:830 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; rd  out 	(25)
10, 55, 77, 98, 99, 120, 121, 329, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388


;; Succ edge  11 [15.0%]  (fallthru)
;; Succ edge  12 [85.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u92(11){ }u93(13){ }u94(25){ }u95(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 158
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; live  gen 	 158
;; live  kill	
;; rd  in  	(25)
10, 55, 77, 98, 99, 120, 121, 329, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388
;; rd  gen 	(1)
2384
;; rd  kill	(1)
2384

;; Pred edge  10 [15.0%]  (fallthru)
(note 84 83 86 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 86 84 87 11 init/main.c:831 (set (reg/f:SI 158)
        (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x11b3c440>)) 167 {*arm_movsi_insn} (nil))

(insn 87 86 88 11 init/main.c:831 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 155)
                (const_int 8 [0x8])) [0 ramdisk_execute_command+0 S4 A32])
        (reg/f:SI 158)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 158)
        (expr_list:REG_DEAD (reg/f:SI 155)
            (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x11b3c440>)
                (nil)))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(26)
10, 55, 77, 98, 99, 120, 121, 329, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2387, 2388


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u98(11){ }u99(13){ }u100(25){ }u101(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 137 159
;; live  kill	 14 [lr]
;; rd  in  	(26)
10, 55, 77, 98, 99, 120, 121, 329, 348, 349, 2370, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2387, 2388
;; rd  gen 	(4)
8, 327, 2374, 2385
;; rd  kill	(80)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 2374, 2385

;; Pred edge  10 [85.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 88 87 89 12 70 "" [1 uses])

(note 89 88 90 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 90 89 91 12 init/main.c:833 (set (reg/f:SI 159)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 91 90 92 12 init/main.c:833 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 159)
                (const_int 8 [0x8])) [0 ramdisk_execute_command+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 ramdisk_execute_command+0 S4 A32])
        (nil)))

(insn 92 91 93 12 init/main.c:833 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 93 92 94 12 init/main.c:833 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_access") [flags 0x41] <function_decl 0x1146d200 sys_access>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 94 93 95 12 init/main.c:833 (set (reg:SI 137 [ D.38092 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 95 94 96 12 init/main.c:833 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 137 [ D.38092 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 137 [ D.38092 ])
        (nil)))

(jump_insn 96 95 97 12 init/main.c:833 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; rd  out 	(28)
8, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2387, 2388


;; Succ edge  13 [39.0%]  (fallthru)
;; Succ edge  14 [61.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u109(11){ }u110(13){ }u111(25){ }u112(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 161
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 159
;; live  gen 	 161
;; live  kill	 14 [lr]
;; rd  in  	(28)
8, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2387, 2388
;; rd  gen 	(1)
2386
;; rd  kill	(22)
122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 2386

;; Pred edge  12 [39.0%]  (fallthru)
(note 97 96 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 99 97 100 13 init/main.c:834 (set (reg:SI 161)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 100 99 101 13 init/main.c:834 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 159)
                (const_int 8 [0x8])) [0 ramdisk_execute_command+0 S4 A32])
        (reg:SI 161)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 161)
        (expr_list:REG_DEAD (reg/f:SI 159)
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(call_insn 101 100 102 13 init/main.c:835 (parallel [
            (call (mem:SI (symbol_ref:SI ("prepare_namespace") [flags 0x41] <function_decl 0x10a49b00 prepare_namespace>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(29)
8, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 12 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u116(11){ }u117(13){ }u118(25){ }u119(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; rd  in  	(29)
8, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388
;; rd  gen 	(1)
2
;; rd  kill	(53)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142

;; Pred edge  12 [61.0%] 
;; Pred edge  13 [100.0%]  (fallthru)
(code_label 102 101 103 14 71 "" [1 uses])

(note 103 102 104 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(call_insn 104 103 109 14 init/main.c:844 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("init_post") [flags 0x3] <function_decl 0x11a78c80 init_post>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (nil))

(insn 109 104 115 14 init/main.c:846 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 115 109 0 14 init/main.c:846 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 14 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(29)
2, 55, 77, 98, 99, 120, 121, 327, 348, 349, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function unknown_bootoption (unknown_bootoption)[0:2049] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 34 n_edges 50 count 68 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 34 n_edges 50 count 68 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 34 n_edges 50 count 75 (  2.2)


unknown_bootoption

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={21d,20u} r1={17d,7u} r2={14d,3u} r3={11d} r11={1d,33u} r12={11d} r13={1d,43u} r14={11d,1u} r15={10d} r16={10d} r17={10d} r18={10d} r19={10d} r20={10d} r21={10d} r22={10d} r23={10d} r24={32d,23u} r25={1d,33u} r26={1d,32u} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} r81={10d} r82={10d} r83={10d} r84={10d} r85={10d} r86={10d} r87={10d} r88={10d} r89={10d} r90={10d} r91={10d} r92={10d} r93={10d} r94={10d} r95={10d} r96={10d} r97={10d} r98={10d} r99={10d} r100={10d} r101={10d} r102={10d} r103={10d} r104={10d} r105={10d} r106={10d} r107={10d} r108={10d} r109={10d} r110={10d} r111={10d} r112={10d} r113={10d} r114={10d} r115={10d} r116={10d} r117={10d} r118={10d} r119={10d} r120={10d} r121={10d} r122={10d} r123={10d} r124={10d} r125={10d} r126={10d} r127={10d} r135={2d,2u} r136={2d,3u} r137={1d,3u} r140={1d,2u} r141={1d,2u} r142={1d,1u} r143={2d,5u,1d} r144={2d,2u} r145={2d,5u} r146={2d,5u} r148={1d,2u} r151={1d,2u} r154={1d,12u} r155={2d,13u} r156={1d,2u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r165={1d,1u} r166={1d,1u} r168={1d,3u} r169={1d,1u} r170={1d,1u} r172={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r179={1d,1u} r181={1d,2u} r182={1d,3u} r183={1d,2u} r189={1d,1u} r192={1d,1d} r193={1d,1u} r195={1d,1u,1d} r196={1d,1u} r198={1d,1u} r199={1d,1d} r200={1d,1u} r201={1d,2u} r206={1d,1u} r207={1d,2u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} 
;;    total ref usage 1581{1279d,298u,4e} in 143{133 regular + 10 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,21] 1[21,17] 2[38,14] 3[52,11] 11[63,1] 12[64,11] 13[75,1] 14[76,11] 15[87,10] 16[97,10] 17[107,10] 18[117,10] 19[127,10] 20[137,10] 21[147,10] 22[157,10] 23[167,10] 24[177,32] 25[209,1] 26[210,1] 27[211,10] 28[221,10] 29[231,10] 30[241,10] 31[251,10] 32[261,10] 33[271,10] 34[281,10] 35[291,10] 36[301,10] 37[311,10] 38[321,10] 39[331,10] 40[341,10] 41[351,10] 42[361,10] 43[371,10] 44[381,10] 45[391,10] 46[401,10] 47[411,10] 48[421,10] 49[431,10] 50[441,10] 51[451,10] 52[461,10] 53[471,10] 54[481,10] 55[491,10] 56[501,10] 57[511,10] 58[521,10] 59[531,10] 60[541,10] 61[551,10] 62[561,10] 63[571,10] 64[581,10] 65[591,10] 66[601,10] 67[611,10] 68[621,10] 69[631,10] 70[641,10] 71[651,10] 72[661,10] 73[671,10] 74[681,10] 75[691,10] 76[701,10] 77[711,10] 78[721,10] 79[731,10] 80[741,10] 81[751,10] 82[761,10] 83[771,10] 84[781,10] 85[791,10] 86[801,10] 87[811,10] 88[821,10] 89[831,10] 90[841,10] 91[851,10] 92[861,10] 93[871,10] 94[881,10] 95[891,10] 96[901,10] 97[911,10] 98[921,10] 99[931,10] 100[941,10] 101[951,10] 102[961,10] 103[971,10] 104[981,10] 105[991,10] 106[1001,10] 107[1011,10] 108[1021,10] 109[1031,10] 110[1041,10] 111[1051,10] 112[1061,10] 113[1071,10] 114[1081,10] 115[1091,10] 116[1101,10] 117[1111,10] 118[1121,10] 119[1131,10] 120[1141,10] 121[1151,10] 122[1161,10] 123[1171,10] 124[1181,10] 125[1191,10] 126[1201,10] 127[1211,10] 135[1221,2] 136[1223,2] 137[1225,1] 140[1226,1] 141[1227,1] 142[1228,1] 143[1229,2] 144[1231,2] 145[1233,2] 146[1235,2] 148[1237,1] 151[1238,1] 154[1239,1] 155[1240,2] 156[1242,1] 157[1243,1] 158[1244,1] 159[1245,1] 161[1246,1] 162[1247,1] 163[1248,1] 165[1249,1] 166[1250,1] 168[1251,1] 169[1252,1] 170[1253,1] 172[1254,1] 174[1255,1] 175[1256,1] 176[1257,1] 177[1258,1] 179[1259,1] 181[1260,1] 182[1261,1] 183[1262,1] 189[1263,1] 192[1264,1] 193[1265,1] 195[1266,1] 196[1267,1] 198[1268,1] 199[1269,1] 200[1270,1] 201[1271,1] 206[1272,1] 207[1273,1] 208[1274,1] 209[1275,1] 210[1276,1] 211[1277,1] 212[1278,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d20(0){ }d37(1){ }d51(2){ }d62(3){ }d63(11){ }d74(12){ }d75(13){ }d86(14){ }d209(25){ }d210(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
20, 37, 51, 62, 63, 74, 75, 86, 209, 210
;; rd  kill	(89)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 209, 210
;; lr  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
20, 37, 51, 62, 63, 74, 75, 86, 209, 210

( 0 )->[2]->( 3 8 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d63(bb 0 insn -1) }u1(13){ d75(bb 0 insn -1) }u2(25){ d209(bb 0 insn -1) }u3(26){ d210(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 154 155
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 154 155
;; live  kill	
;; rd  in  	(10)
20, 37, 51, 62, 63, 74, 75, 86, 209, 210
;; rd  gen 	(3)
208, 1239, 1241
;; rd  kill	(35)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1239, 1240, 1241
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(13)
20, 37, 51, 62, 63, 74, 75, 86, 208, 209, 210, 1239, 1241
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 4
;;      reg 0 { d20(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 5
;;      reg 1 { d37(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 9
;;      reg 155 { d1241(bb 2 insn 5) }
;;   UD chains for insn luid 3 uid 10
;;      reg 24 { d208(bb 2 insn 9) }

( 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ d63(bb 0 insn -1) }u9(13){ d75(bb 0 insn -1) }u10(25){ d209(bb 0 insn -1) }u11(26){ d210(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 156 157 158
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 0 [r0] 24 [cc] 156 157 158
;; live  kill	 14 [lr]
;; rd  in  	(13)
20, 37, 51, 62, 63, 74, 75, 86, 208, 209, 210, 1239, 1241
;; rd  gen 	(5)
19, 206, 1242, 1243, 1244
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1242, 1243, 1244
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; rd  out 	(15)
19, 37, 51, 62, 63, 74, 75, 206, 209, 210, 1239, 1241, 1242, 1243, 1244
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 13
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d20(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 14
;;      reg 0 { d19(bb 3 insn 13) }
;;   UD chains for insn luid 2 uid 16
;;      reg 156 { d1242(bb 3 insn 14) }
;;   UD chains for insn luid 3 uid 17
;;      reg 154 { d1239(bb 2 insn 4) }
;;      reg 157 { d1243(bb 3 insn 16) }
;;   UD chains for insn luid 4 uid 18
;;      reg 155 { d1241(bb 2 insn 5) }
;;      reg 158 { d1244(bb 3 insn 17) }
;;   UD chains for insn luid 5 uid 19
;;      reg 24 { d206(bb 3 insn 18) }

( 3 )->[4]->( 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u21(11){ d63(bb 0 insn -1) }u22(13){ d75(bb 0 insn -1) }u23(25){ d209(bb 0 insn -1) }u24(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 159
;; live  kill	
;; rd  in  	(15)
19, 37, 51, 62, 63, 74, 75, 206, 209, 210, 1239, 1241, 1242, 1243, 1244
;; rd  gen 	(1)
1245
;; rd  kill	(1)
1245
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(16)
19, 37, 51, 62, 63, 74, 75, 206, 209, 210, 1239, 1241, 1242, 1243, 1244, 1245
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 23
;;      reg 155 { d1241(bb 2 insn 5) }
;;      reg 159 { d1245(bb 4 insn 21) }

( 3 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u27(11){ d63(bb 0 insn -1) }u28(13){ d75(bb 0 insn -1) }u29(25){ d209(bb 0 insn -1) }u30(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; lr  def 	 24 [cc] 161 162
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; live  gen 	 24 [cc] 161 162
;; live  kill	
;; rd  in  	(15)
19, 37, 51, 62, 63, 74, 75, 206, 209, 210, 1239, 1241, 1242, 1243, 1244
;; rd  gen 	(3)
205, 1246, 1247
;; rd  kill	(34)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1246, 1247
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(17)
19, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1239, 1241, 1242, 1243, 1244, 1246, 1247
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 28
;;      reg 156 { d1242(bb 3 insn 14) }
;;   UD chains for insn luid 1 uid 29
;;      reg 154 { d1239(bb 2 insn 4) }
;;      reg 161 { d1246(bb 5 insn 28) }
;;   UD chains for insn luid 2 uid 30
;;      reg 155 { d1241(bb 2 insn 5) }
;;      reg 162 { d1247(bb 5 insn 29) }
;;   UD chains for insn luid 3 uid 31
;;      reg 24 { d205(bb 5 insn 30) }

( 5 )->[6]->( 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u37(11){ d63(bb 0 insn -1) }u38(13){ d75(bb 0 insn -1) }u39(25){ d209(bb 0 insn -1) }u40(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 151 155 163 165 166
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 151 155 163 165 166
;; live  kill	 14 [lr]
;; rd  in  	(17)
19, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1239, 1241, 1242, 1243, 1244, 1246, 1247
;; rd  gen 	(6)
15, 1238, 1240, 1248, 1249, 1250
;; rd  kill	(38)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 1238, 1240, 1241, 1248, 1249, 1250
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(21)
15, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1238, 1239, 1240, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 35
;;      reg 155 { d1241(bb 2 insn 5) }
;;      reg 163 { d1248(bb 6 insn 33) }
;;   UD chains for insn luid 2 uid 36
;;      reg 155 { d1241(bb 2 insn 5) }
;;   UD chains for insn luid 3 uid 37
;;      reg 155 { d1241(bb 2 insn 5) }
;;   UD chains for insn luid 4 uid 38
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d18(bb 6 insn 37) }
;;   UD chains for insn luid 5 uid 39
;;      reg 0 { d17(bb 6 insn 38) }
;;   UD chains for insn luid 6 uid 41
;;      reg 165 { d1249(bb 6 insn 39) }
;;   UD chains for insn luid 7 uid 42
;;      reg 151 { d1238(bb 6 insn 36) }
;;   UD chains for insn luid 8 uid 43
;;      reg 155 { d1241(bb 2 insn 5) }
;;   UD chains for insn luid 9 uid 44
;;      reg 166 { d1250(bb 6 insn 41) }
;;   UD chains for insn luid 10 uid 45
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d16(bb 6 insn 42) }
;;      reg 1 { d34(bb 6 insn 43) }
;;      reg 2 { d48(bb 6 insn 44) }
;;   UD chains for insn luid 11 uid 46
;;      reg 151 { d1238(bb 6 insn 36) }

( 5 )->[7]->( )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u57(11){ d63(bb 0 insn -1) }u58(13){ d75(bb 0 insn -1) }u59(25){ d209(bb 0 insn -1) }u60(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(17)
19, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1239, 1241, 1242, 1243, 1244, 1246, 1247
;; rd  gen 	(0)

;; rd  kill	(11)
76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(17)
19, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1239, 1241, 1242, 1243, 1244, 1246, 1247
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 54
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d2(bb 7 insn 52) }
;;      reg 1 { d32(bb 7 insn 53) }

( 2 4 6 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u64(11){ d63(bb 0 insn -1) }u65(13){ d75(bb 0 insn -1) }u66(25){ d209(bb 0 insn -1) }u67(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 143 144 212
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 143 144 212
;; live  kill	
;; rd  in  	(28)
15, 19, 20, 37, 51, 62, 63, 74, 75, 86, 205, 206, 208, 209, 210, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250
;; rd  gen 	(3)
1230, 1232, 1278
;; rd  kill	(5)
1229, 1230, 1231, 1232, 1278
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; rd  out 	(31)
15, 19, 20, 37, 51, 62, 63, 74, 75, 86, 205, 206, 208, 209, 210, 1230, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }

( 8 15 )->[9]->( 10 15 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u68(11){ d63(bb 0 insn -1) }u69(13){ d75(bb 0 insn -1) }u70(25){ d209(bb 0 insn -1) }u71(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 154
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 168 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 137 168 169
;; live  kill	 14 [lr]
;; rd  in  	(49)
7, 10, 15, 19, 20, 37, 51, 62, 63, 74, 75, 86, 177, 205, 206, 208, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(5)
10, 183, 1225, 1251, 1252
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1225, 1251, 1252
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; rd  out 	(41)
10, 37, 51, 62, 63, 74, 75, 183, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 61
;;      reg 143 { d1230(bb 8 insn 59) d1229(bb 15 insn 117) }
;;   UD chains for insn luid 1 uid 62
;;      reg 137 { d1225(bb 9 insn 61) }
;;   UD chains for insn luid 2 uid 63
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d13(bb 9 insn 62) }
;;   UD chains for insn luid 3 uid 64
;;      reg 0 { d12(bb 9 insn 63) }
;;   UD chains for insn luid 4 uid 66
;;      reg 154 { d1239(bb 2 insn 4) }
;;   UD chains for insn luid 5 uid 67
;;      reg 137 { d1225(bb 9 insn 61) }
;;   UD chains for insn luid 6 uid 68
;;      reg 168 { d1251(bb 9 insn 64) }
;;   UD chains for insn luid 7 uid 69
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d11(bb 9 insn 66) }
;;      reg 1 { d29(bb 9 insn 67) }
;;      reg 2 { d39(bb 9 insn 68) }
;;   UD chains for insn luid 8 uid 70
;;      reg 0 { d10(bb 9 insn 69) }
;;   UD chains for insn luid 9 uid 72
;;      reg 169 { d1252(bb 9 insn 70) }
;;   UD chains for insn luid 10 uid 73
;;      reg 24 { d183(bb 9 insn 72) }

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u87(11){ d63(bb 0 insn -1) }u88(13){ d75(bb 0 insn -1) }u89(25){ d209(bb 0 insn -1) }u90(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; live  gen 	 24 [cc] 170
;; live  kill	
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 183, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(2)
199, 1253
;; rd  kill	(33)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1253
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; rd  out 	(41)
10, 37, 51, 62, 63, 74, 75, 199, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 75
;;      reg 143 { d1230(bb 8 insn 59) d1229(bb 15 insn 117) }
;;   UD chains for insn luid 1 uid 76
;;      reg 170 { d1253(bb 10 insn 75) }
;;   UD chains for insn luid 2 uid 77
;;      reg 24 { d199(bb 10 insn 76) }

( 10 )->[11]->( 15 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u94(11){ d63(bb 0 insn -1) }u95(13){ d75(bb 0 insn -1) }u96(25){ d209(bb 0 insn -1) }u97(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 168 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 154 168
;; lr  def 	 24 [cc] 140 144 172 174 175 176 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 168 212
;; live  gen 	 24 [cc] 140 144 172 174 175 176 177
;; live  kill	
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 199, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(8)
179, 1226, 1231, 1254, 1255, 1256, 1257, 1258
;; rd  kill	(40)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1226, 1231, 1232, 1254, 1255, 1256, 1257, 1258
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; rd  out 	(40)
10, 37, 51, 62, 63, 74, 75, 179, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 79
;;      reg 154 { d1239(bb 2 insn 4) }
;;      reg 168 { d1251(bb 9 insn 64) }
;;   UD chains for insn luid 1 uid 80
;;      reg 140 { d1226(bb 11 insn 79) }
;;   UD chains for insn luid 2 uid 81
;;      reg 24 { d198(bb 11 insn 80) }
;;   UD chains for insn luid 3 uid 83
;;      reg 140 { d1226(bb 11 insn 79) }
;;   UD chains for insn luid 4 uid 84
;;      reg 24 { d197(bb 11 insn 83) }
;;   UD chains for insn luid 5 uid 86
;;      reg 172 { d1254(bb 11 insn 81) }
;;      reg 174 { d1255(bb 11 insn 84) }
;;   UD chains for insn luid 6 uid 87
;;      reg 175 { d1256(bb 11 insn 86) }
;;   UD chains for insn luid 7 uid 88
;;      reg 176 { d1257(bb 11 insn 87) }
;;   UD chains for insn luid 8 uid 241
;;      reg 177 { d1258(bb 11 insn 88) }
;;   UD chains for insn luid 9 uid 242
;;      reg 24 { d179(bb 11 insn 241) }
;;      reg 144 { d1232(bb 8 insn 58) d1231(bb 11 insn 242) }

( 10 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u111(11){ d63(bb 0 insn -1) }u112(13){ d75(bb 0 insn -1) }u113(25){ d209(bb 0 insn -1) }u114(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; live  gen 	 24 [cc] 141
;; live  kill	
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 199, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(2)
196, 1227
;; rd  kill	(33)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1227
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 143 144 154 155 168 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 143 144 154 155 168 212
;; rd  out 	(41)
10, 37, 51, 62, 63, 74, 75, 196, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 97
;;      reg 143 { d1230(bb 8 insn 59) d1229(bb 15 insn 117) }
;;   UD chains for insn luid 1 uid 98
;;      reg 141 { d1227(bb 12 insn 97) }
;;   UD chains for insn luid 2 uid 99
;;      reg 24 { d196(bb 12 insn 98) }

( 12 )->[13]->( 33 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u118(11){ d63(bb 0 insn -1) }u119(13){ d75(bb 0 insn -1) }u120(25){ d209(bb 0 insn -1) }u121(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 196, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(1)
9
;; rd  kill	(32)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(41)
9, 37, 51, 62, 63, 74, 75, 196, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 103
;;      reg 137 { d1225(bb 9 insn 61) }
;;   UD chains for insn luid 2 uid 104
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d1(bb 13 insn 102) }
;;      reg 1 { d27(bb 13 insn 103) }

( 12 )->[14]->( 33 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u126(11){ d63(bb 0 insn -1) }u127(13){ d75(bb 0 insn -1) }u128(25){ d209(bb 0 insn -1) }u129(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 144 154 155 168 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 168
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 144 154 155 168 212
;; live  gen 	 0 [r0] 24 [cc] 142 179
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 196, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(4)
7, 193, 1228, 1259
;; rd  kill	(66)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1228, 1259
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; rd  out 	(41)
7, 37, 51, 62, 63, 74, 75, 193, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 109
;;      reg 154 { d1239(bb 2 insn 4) }
;;      reg 168 { d1251(bb 9 insn 64) }
;;   UD chains for insn luid 1 uid 110
;;      reg 179 { d1259(bb 14 insn 109) }
;;   UD chains for insn luid 2 uid 111
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d8(bb 14 insn 110) }
;;      reg 141 { d1227(bb 12 insn 97) }
;;   UD chains for insn luid 3 uid 112
;;      reg 0 { d7(bb 14 insn 111) }
;;   UD chains for insn luid 4 uid 113
;;      reg 142 { d1228(bb 14 insn 112) }
;;   UD chains for insn luid 5 uid 114
;;      reg 24 { d193(bb 14 insn 113) }

( 9 14 11 )->[15]->( 9 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u139(11){ d63(bb 0 insn -1) }u140(13){ d75(bb 0 insn -1) }u141(25){ d209(bb 0 insn -1) }u142(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 212
;; lr  def 	 24 [cc] 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  gen 	 24 [cc] 143
;; live  kill	
;; rd  in  	(44)
7, 10, 37, 51, 62, 63, 74, 75, 179, 183, 193, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(2)
177, 1229
;; rd  kill	(34)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1229, 1230
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; rd  out 	(41)
7, 10, 37, 51, 62, 63, 74, 75, 177, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 117
;;      reg 143 { d1230(bb 8 insn 59) d1229(bb 15 insn 117) }
;;   UD chains for insn luid 1 uid 120
;;      reg 143 { d1229(bb 15 insn 117) }
;;      reg 212 { d1278(bb 8 insn 119) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 2 uid 121
;;      reg 24 { d177(bb 15 insn 120) }

( 15 )->[16]->( 33 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u148(11){ d63(bb 0 insn -1) }u149(13){ d75(bb 0 insn -1) }u150(25){ d209(bb 0 insn -1) }u151(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 154 155
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(41)
7, 10, 37, 51, 62, 63, 74, 75, 177, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(1)
192
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(41)
7, 10, 37, 51, 62, 63, 74, 75, 192, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 123
;;      reg 144 { d1232(bb 8 insn 58) d1231(bb 11 insn 242) }
;;   UD chains for insn luid 1 uid 124
;;      reg 24 { d192(bb 16 insn 123) }

( 16 )->[17]->( 18 20 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u154(11){ d63(bb 0 insn -1) }u155(13){ d75(bb 0 insn -1) }u156(25){ d209(bb 0 insn -1) }u157(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 181
;; live  kill	 14 [lr]
;; rd  in  	(41)
7, 10, 37, 51, 62, 63, 74, 75, 192, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(3)
5, 182, 1260
;; rd  kill	(65)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1260
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 181
;; rd  out 	(41)
5, 37, 51, 62, 63, 74, 75, 182, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 126
;;      reg 154 { d1239(bb 2 insn 4) }
;;   UD chains for insn luid 2 uid 128
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d6(bb 17 insn 126) }
;;      reg 1 { d24(bb 17 insn 127) }
;;   UD chains for insn luid 3 uid 129
;;      reg 0 { d5(bb 17 insn 128) }
;;   UD chains for insn luid 4 uid 131
;;      reg 181 { d1260(bb 17 insn 129) }
;;   UD chains for insn luid 5 uid 132
;;      reg 24 { d182(bb 17 insn 131) }

( 17 )->[18]->( 33 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u165(11){ d63(bb 0 insn -1) }u166(13){ d75(bb 0 insn -1) }u167(25){ d209(bb 0 insn -1) }u168(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 181
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 181
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(41)
5, 37, 51, 62, 63, 74, 75, 182, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278
;; rd  gen 	(1)
190
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 181
;; rd  out 	(41)
5, 37, 51, 62, 63, 74, 75, 190, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 134
;;      reg 155 { d1241(bb 2 insn 5) d1240(bb 6 insn 46) }
;;   UD chains for insn luid 1 uid 135
;;      reg 24 { d190(bb 18 insn 134) }

( 18 )->[19]->( 33 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u171(11){ d63(bb 0 insn -1) }u172(13){ d75(bb 0 insn -1) }u173(25){ d209(bb 0 insn -1) }u174(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 181
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 181
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 181
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(41)
5, 37, 51, 62, 63, 74, 75, 190, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278
;; rd  gen 	(1)
181
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(41)
5, 37, 51, 62, 63, 74, 75, 181, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 137
;;      reg 155 { d1241(bb 2 insn 5) d1240(bb 6 insn 46) }
;;      reg 181 { d1260(bb 17 insn 129) }
;;   UD chains for insn luid 1 uid 138
;;      reg 24 { d181(bb 19 insn 137) }

( 17 19 )->[20]->( 33 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u178(11){ d63(bb 0 insn -1) }u179(13){ d75(bb 0 insn -1) }u180(25){ d209(bb 0 insn -1) }u181(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 182 183
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 24 [cc] 182 183
;; live  kill	
;; rd  in  	(42)
5, 37, 51, 62, 63, 74, 75, 181, 182, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278
;; rd  gen 	(3)
189, 1261, 1262
;; rd  kill	(34)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1261, 1262
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182 183
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; rd  out 	(43)
5, 37, 51, 62, 63, 74, 75, 189, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 142
;;      reg 182 { d1261(bb 20 insn 141) }
;;   UD chains for insn luid 2 uid 143
;;      reg 183 { d1262(bb 20 insn 142) }
;;   UD chains for insn luid 3 uid 144
;;      reg 24 { d189(bb 20 insn 143) }

( 20 )->[21]->( 22 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u185(11){ d63(bb 0 insn -1) }u186(13){ d75(bb 0 insn -1) }u187(25){ d209(bb 0 insn -1) }u188(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182 183
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(43)
5, 37, 51, 62, 63, 74, 75, 189, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278
;; rd  gen 	(1)
188
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182 183
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; rd  out 	(43)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 146
;;      reg 155 { d1241(bb 2 insn 5) d1240(bb 6 insn 46) }
;;   UD chains for insn luid 1 uid 147
;;      reg 24 { d188(bb 21 insn 146) }

( 21 )->[22]->( 28 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u191(11){ d63(bb 0 insn -1) }u192(13){ d75(bb 0 insn -1) }u193(25){ d209(bb 0 insn -1) }u194(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182 183
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; lr  def 	 146 206 207 208 209
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; live  gen 	 146 206 207 208 209
;; live  kill	
;; rd  in  	(43)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278
;; rd  gen 	(5)
1235, 1272, 1273, 1274, 1275
;; rd  kill	(6)
1235, 1236, 1272, 1273, 1274, 1275
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; rd  out 	(48)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1272, 1273, 1274, 1275, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 149
;;      reg 183 { d1262(bb 20 insn 142) }
;;   UD chains for insn luid 2 uid 164
;;      reg 182 { d1261(bb 20 insn 141) }
;;   UD chains for insn luid 4 uid 171
;;      reg 154 { d1239(bb 2 insn 4) }
;;      reg 155 { d1241(bb 2 insn 5) d1240(bb 6 insn 46) }

( 21 )->[23]->( 31 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u199(11){ d63(bb 0 insn -1) }u200(13){ d75(bb 0 insn -1) }u201(25){ d209(bb 0 insn -1) }u202(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 182
;; lr  def 	 135 136 145 210 211
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182
;; live  gen 	 135 136 145 210 211
;; live  kill	
;; rd  in  	(43)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278
;; rd  gen 	(5)
1222, 1224, 1233, 1276, 1277
;; rd  kill	(8)
1221, 1222, 1223, 1224, 1233, 1234, 1276, 1277
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; rd  out 	(48)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1276, 1277, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 155
;;      reg 182 { d1261(bb 20 insn 141) }
;;   UD chains for insn luid 1 uid 156
;;      reg 155 { d1241(bb 2 insn 5) d1240(bb 6 insn 46) }
;;   UD chains for insn luid 2 uid 157
;;      reg 136 { d1224(bb 23 insn 156) }

( 28 )->[24]->( 25 26 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u206(11){ d63(bb 0 insn -1) }u207(13){ d75(bb 0 insn -1) }u208(25){ d209(bb 0 insn -1) }u209(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(53)
3, 5, 37, 51, 62, 63, 74, 75, 185, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(1)
187
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; rd  out 	(53)
3, 5, 37, 51, 62, 63, 74, 75, 187, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 161
;;      reg 146 { d1236(bb 27 insn 181) d1235(bb 22 insn 149) }
;;   UD chains for insn luid 1 uid 162
;;      reg 24 { d187(bb 24 insn 161) }

( 24 )->[25]->( 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u212(11){ d63(bb 0 insn -1) }u213(13){ d75(bb 0 insn -1) }u214(25){ d209(bb 0 insn -1) }u215(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 207 208
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  gen 	
;; live  kill	
;; rd  in  	(53)
3, 5, 37, 51, 62, 63, 74, 75, 187, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; rd  out 	(53)
3, 5, 37, 51, 62, 63, 74, 75, 187, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 166
;;      reg 207 { d1273(bb 22 insn 164) }
;;      reg 208 { d1274(bb 22 insn 165) }
;;   UD chains for insn luid 1 uid 168
;;      reg 154 { d1239(bb 2 insn 4) }
;;      reg 207 { d1273(bb 22 insn 164) }

( 24 25 )->[26]->( 29 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u220(11){ d63(bb 0 insn -1) }u221(13){ d75(bb 0 insn -1) }u222(25){ d209(bb 0 insn -1) }u223(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 154 209
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 189
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 189
;; live  kill	 14 [lr]
;; rd  in  	(53)
3, 5, 37, 51, 62, 63, 74, 75, 187, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(3)
3, 180, 1263
;; rd  kill	(65)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1263
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; rd  out 	(52)
3, 37, 51, 62, 63, 74, 75, 180, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 172
;;      reg 154 { d1239(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 173
;;      reg 148 { d1237(bb 28 insn 187) }
;;   UD chains for insn luid 2 uid 174
;;      reg 209 { d1275(bb 22 insn 171) }
;;   UD chains for insn luid 3 uid 175
;;      reg 13 { d75(bb 0 insn -1) }
;;      reg 0 { d4(bb 26 insn 172) }
;;      reg 1 { d22(bb 26 insn 173) }
;;      reg 2 { d38(bb 26 insn 174) }
;;   UD chains for insn luid 4 uid 176
;;      reg 0 { d3(bb 26 insn 175) }
;;   UD chains for insn luid 5 uid 178
;;      reg 189 { d1263(bb 26 insn 176) }
;;   UD chains for insn luid 6 uid 179
;;      reg 24 { d180(bb 26 insn 178) }

( 26 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u234(11){ d63(bb 0 insn -1) }u235(13){ d75(bb 0 insn -1) }u236(25){ d209(bb 0 insn -1) }u237(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  gen 	 146
;; live  kill	
;; rd  in  	(52)
3, 37, 51, 62, 63, 74, 75, 180, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(1)
1236
;; rd  kill	(2)
1235, 1236
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; rd  out 	(51)
3, 37, 51, 62, 63, 74, 75, 180, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 181
;;      reg 146 { d1236(bb 27 insn 181) d1235(bb 22 insn 149) }

( 27 22 )->[28]->( 24 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u239(11){ d63(bb 0 insn -1) }u240(13){ d75(bb 0 insn -1) }u241(25){ d209(bb 0 insn -1) }u242(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 206
;; lr  def 	 24 [cc] 148 192
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  gen 	 24 [cc] 148 192
;; live  kill	
;; rd  in  	(54)
3, 5, 37, 51, 62, 63, 74, 75, 180, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(3)
185, 1237, 1264
;; rd  kill	(34)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1237, 1264
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; rd  out 	(53)
3, 5, 37, 51, 62, 63, 74, 75, 185, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 186
;;      reg 146 { d1236(bb 27 insn 181) d1235(bb 22 insn 149) }
;;   UD chains for insn luid 1 uid 187
;;      reg 146 { d1236(bb 27 insn 181) d1235(bb 22 insn 149) }
;;      reg 206 { d1272(bb 22 insn 185) }
;;   eq_note reg 192 { }
;;   UD chains for insn luid 2 uid 189
;;      reg 148 { d1237(bb 28 insn 187) }
;;   UD chains for insn luid 3 uid 190
;;      reg 24 { d185(bb 28 insn 189) }

( 26 28 )->[29]->( 33 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u249(11){ d63(bb 0 insn -1) }u250(13){ d75(bb 0 insn -1) }u251(25){ d209(bb 0 insn -1) }u252(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154
;; lr  def 	 193 195 196
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154
;; live  gen 	 193 195 196
;; live  kill	
;; rd  in  	(54)
3, 5, 37, 51, 62, 63, 74, 75, 180, 185, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(3)
1265, 1266, 1267
;; rd  kill	(3)
1265, 1266, 1267
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(57)
3, 5, 37, 51, 62, 63, 74, 75, 180, 185, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1272, 1273, 1274, 1275, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 195
;;      reg 146 { d1236(bb 27 insn 181) d1235(bb 22 insn 149) }
;;   UD chains for insn luid 2 uid 196
;;      reg 193 { d1265(bb 29 insn 193) }
;;      reg 195 { d1266(bb 29 insn 195) }
;;   eq_note reg 195 { }
;;   UD chains for insn luid 3 uid 198
;;      reg 154 { d1239(bb 2 insn 4) }
;;      reg 196 { d1267(bb 29 insn 196) }

( 31 )->[30]->( 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u259(11){ d63(bb 0 insn -1) }u260(13){ d75(bb 0 insn -1) }u261(25){ d209(bb 0 insn -1) }u262(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 211
;; lr  def 	 24 [cc] 135 136 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; live  gen 	 24 [cc] 135 136 145
;; live  kill	
;; rd  in  	(54)
5, 37, 51, 62, 63, 74, 75, 184, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278
;; rd  gen 	(4)
178, 1221, 1223, 1234
;; rd  kill	(38)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1221, 1222, 1223, 1224, 1233, 1234
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; rd  out 	(51)
5, 37, 51, 62, 63, 74, 75, 178, 209, 210, 1221, 1223, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 243
;;      reg 145 { d1234(bb 30 insn 209) d1233(bb 23 insn 157) }
;;   UD chains for insn luid 1 uid 244
;;      reg 24 { d178(bb 30 insn 243) }
;;      reg 135 { d1222(bb 23 insn 155) d1221(bb 30 insn 244) }
;;      reg 154 { d1239(bb 2 insn 4) }
;;   UD chains for insn luid 2 uid 247
;;      reg 24 { d178(bb 30 insn 243) }
;;      reg 136 { d1224(bb 23 insn 156) d1223(bb 30 insn 247) }
;;      reg 211 { d1277(bb 23 insn 245) }
;;   UD chains for insn luid 3 uid 209
;;      reg 145 { d1234(bb 30 insn 209) d1233(bb 23 insn 157) }

( 30 23 )->[31]->( 30 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u271(11){ d63(bb 0 insn -1) }u272(13){ d75(bb 0 insn -1) }u273(25){ d209(bb 0 insn -1) }u274(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 210
;; lr  def 	 24 [cc] 198 199 200
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; live  gen 	 24 [cc] 198 199 200
;; live  kill	
;; rd  in  	(55)
5, 37, 51, 62, 63, 74, 75, 178, 188, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278
;; rd  gen 	(4)
184, 1268, 1269, 1270
;; rd  kill	(35)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1268, 1269, 1270
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 198 210 211
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 198 210 211
;; rd  out 	(54)
5, 37, 51, 62, 63, 74, 75, 184, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 214
;;      reg 145 { d1234(bb 30 insn 209) d1233(bb 23 insn 157) }
;;   UD chains for insn luid 2 uid 215
;;      reg 145 { d1234(bb 30 insn 209) d1233(bb 23 insn 157) }
;;      reg 210 { d1276(bb 23 insn 213) }
;;   eq_note reg 199 { }
;;   UD chains for insn luid 3 uid 216
;;      reg 200 { d1270(bb 31 insn 215) }
;;   UD chains for insn luid 4 uid 217
;;      reg 24 { d184(bb 31 insn 216) }

( 31 )->[32]->( 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u281(11){ d63(bb 0 insn -1) }u282(13){ d75(bb 0 insn -1) }u283(25){ d209(bb 0 insn -1) }u284(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 198
;; lr  def 	 201
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 198
;; live  gen 	 201
;; live  kill	
;; rd  in  	(54)
5, 37, 51, 62, 63, 74, 75, 184, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278
;; rd  gen 	(1)
1271
;; rd  kill	(1)
1271
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(55)
5, 37, 51, 62, 63, 74, 75, 184, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1271, 1276, 1277, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 220
;;      reg 136 { d1224(bb 23 insn 156) d1223(bb 30 insn 247) }
;;      reg 201 { d1271(bb 32 insn 219) }
;;   UD chains for insn luid 2 uid 222
;;      reg 135 { d1222(bb 23 insn 155) d1221(bb 30 insn 244) }
;;      reg 201 { d1271(bb 32 insn 219) }
;;   UD chains for insn luid 3 uid 224
;;      reg 145 { d1234(bb 30 insn 209) d1233(bb 23 insn 157) }
;;      reg 154 { d1239(bb 2 insn 4) }
;;      reg 198 { d1268(bb 31 insn 254) }

( 16 19 20 32 18 13 14 29 )->[33]->( 1 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u292(11){ d63(bb 0 insn -1) }u293(13){ d75(bb 0 insn -1) }u294(25){ d209(bb 0 insn -1) }u295(26){ d210(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(80)
3, 5, 7, 9, 10, 37, 51, 62, 63, 74, 75, 180, 181, 184, 185, 189, 190, 192, 193, 196, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278
;; rd  gen 	(1)
0
;; rd  kill	(21)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(76)
0, 37, 51, 62, 63, 74, 75, 180, 181, 184, 185, 189, 190, 192, 193, 196, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 25 { d209(bb 0 insn -1) }
;;   reg 26 { d210(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 237
;;      reg 0 { d0(bb 33 insn 231) }

( 33 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u297(0){ d0(bb 33 insn 231) }u298(11){ d63(bb 0 insn -1) }u299(13){ d75(bb 0 insn -1) }u300(14){ }u301(25){ d209(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(76)
0, 37, 51, 62, 63, 74, 75, 180, 181, 184, 185, 189, 190, 192, 193, 196, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(76)
0, 37, 51, 62, 63, 74, 75, 180, 181, 184, 185, 189, 190, 192, 193, 196, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 33 insn 231) }
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d75(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d209(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 10 to worklist
  Adding insn 19 to worklist
  Adding insn 257 to worklist
  Adding insn 23 to worklist
  Adding insn 31 to worklist
  Adding insn 259 to worklist
  Adding insn 45 to worklist
  Adding insn 35 to worklist
  Adding insn 54 to worklist
  Adding insn 73 to worklist
  Adding insn 77 to worklist
  Adding insn 261 to worklist
  Adding insn 99 to worklist
  Adding insn 263 to worklist
  Adding insn 104 to worklist
  Adding insn 114 to worklist
  Adding insn 111 to worklist
  Adding insn 121 to worklist
  Adding insn 124 to worklist
  Adding insn 132 to worklist
  Adding insn 135 to worklist
  Adding insn 138 to worklist
  Adding insn 144 to worklist
  Adding insn 147 to worklist
  Adding insn 265 to worklist
  Adding insn 267 to worklist
  Adding insn 162 to worklist
  Adding insn 168 to worklist
  Adding insn 166 to worklist
  Adding insn 179 to worklist
  Adding insn 190 to worklist
  Adding insn 269 to worklist
  Adding insn 198 to worklist
  Adding insn 217 to worklist
  Adding insn 224 to worklist
  Adding insn 222 to worklist
  Adding insn 220 to worklist
  Adding insn 237 to worklist
Finished finding needed instructions:
  Adding insn 231 to worklist
Processing use of (reg 0 r0) in insn 237:
Processing use of (reg 136 [ panic_later_lsm.842 ]) in insn 220:
  Adding insn 156 to worklist
  Adding insn 247 to worklist
Processing use of (reg 201) in insn 220:
  Adding insn 219 to worklist
Processing use of (reg 24 cc) in insn 247:
  Adding insn 243 to worklist
Processing use of (reg 136 [ panic_later_lsm.842 ]) in insn 247:
Processing use of (reg 211) in insn 247:
  Adding insn 245 to worklist
Processing use of (reg 145 [ i ]) in insn 243:
  Adding insn 209 to worklist
  Adding insn 157 to worklist
Processing use of (reg 136 [ panic_later_lsm.842 ]) in insn 157:
Processing use of (reg 145 [ i ]) in insn 209:
Processing use of (reg 155 [ val ]) in insn 156:
  Adding insn 5 to worklist
  Adding insn 46 to worklist
Processing use of (reg 151 [ D.37769 ]) in insn 46:
  Adding insn 36 to worklist
Processing use of (reg 155 [ val ]) in insn 36:
Processing use of (reg 1 r1) in insn 5:
Processing use of (reg 135 [ param.868 ]) in insn 222:
  Adding insn 155 to worklist
  Adding insn 244 to worklist
Processing use of (reg 201) in insn 222:
Processing use of (reg 24 cc) in insn 244:
Processing use of (reg 135 [ param.868 ]) in insn 244:
Processing use of (reg 154 [ param ]) in insn 244:
  Adding insn 4 to worklist
Processing use of (reg 0 r0) in insn 4:
Processing use of (reg 182) in insn 155:
  Adding insn 141 to worklist
Processing use of (reg 145 [ i ]) in insn 224:
Processing use of (reg 154 [ param ]) in insn 224:
Processing use of (reg 198) in insn 224:
  Adding insn 254 to worklist
Processing use of (reg 24 cc) in insn 217:
  Adding insn 216 to worklist
Processing use of (reg 200) in insn 216:
  Adding insn 215 to worklist
Processing use of (reg 145 [ i ]) in insn 215:
Processing use of (reg 210) in insn 215:
  Adding insn 213 to worklist
Processing use of (reg 154 [ param ]) in insn 198:
Processing use of (reg 196) in insn 198:
  Adding insn 196 to worklist
Processing use of (reg 193) in insn 196:
  Adding insn 193 to worklist
Processing use of (reg 195) in insn 196:
  Adding insn 195 to worklist
Processing use of (reg 146 [ i ]) in insn 195:
  Adding insn 181 to worklist
  Adding insn 149 to worklist
Processing use of (reg 183 [ panic_later ]) in insn 149:
  Adding insn 142 to worklist
Processing use of (reg 182) in insn 142:
Processing use of (reg 146 [ i ]) in insn 181:
Processing use of (reg 24 cc) in insn 190:
  Adding insn 189 to worklist
Processing use of (reg 148 [ D.37792 ]) in insn 189:
  Adding insn 187 to worklist
Processing use of (reg 146 [ i ]) in insn 187:
Processing use of (reg 206) in insn 187:
  Adding insn 185 to worklist
Processing use of (reg 24 cc) in insn 179:
  Adding insn 178 to worklist
Processing use of (reg 189) in insn 178:
  Adding insn 176 to worklist
Processing use of (reg 0 r0) in insn 176:
  Adding insn 175 to worklist
Processing use of (reg 13 sp) in insn 175:
Processing use of (reg 0 r0) in insn 175:
  Adding insn 172 to worklist
Processing use of (reg 1 r1) in insn 175:
  Adding insn 173 to worklist
Processing use of (reg 2 r2) in insn 175:
  Adding insn 174 to worklist
Processing use of (reg 209) in insn 174:
  Adding insn 171 to worklist
Processing use of (reg 154 [ param ]) in insn 171:
Processing use of (reg 155 [ val ]) in insn 171:
Processing use of (reg 148 [ D.37792 ]) in insn 173:
Processing use of (reg 154 [ param ]) in insn 172:
Processing use of (reg 207) in insn 166:
  Adding insn 164 to worklist
Processing use of (reg 208) in insn 166:
  Adding insn 165 to worklist
Processing use of (reg 182) in insn 164:
Processing use of (reg 154 [ param ]) in insn 168:
Processing use of (reg 207) in insn 168:
Processing use of (reg 24 cc) in insn 162:
  Adding insn 161 to worklist
Processing use of (reg 146 [ i ]) in insn 161:
Processing use of (reg 24 cc) in insn 147:
  Adding insn 146 to worklist
Processing use of (reg 155 [ val ]) in insn 146:
Processing use of (reg 24 cc) in insn 144:
  Adding insn 143 to worklist
Processing use of (reg 183 [ panic_later ]) in insn 143:
Processing use of (reg 24 cc) in insn 138:
  Adding insn 137 to worklist
Processing use of (reg 155 [ val ]) in insn 137:
Processing use of (reg 181) in insn 137:
  Adding insn 129 to worklist
Processing use of (reg 0 r0) in insn 129:
  Adding insn 128 to worklist
Processing use of (reg 13 sp) in insn 128:
Processing use of (reg 0 r0) in insn 128:
  Adding insn 126 to worklist
Processing use of (reg 1 r1) in insn 128:
  Adding insn 127 to worklist
Processing use of (reg 154 [ param ]) in insn 126:
Processing use of (reg 24 cc) in insn 135:
  Adding insn 134 to worklist
Processing use of (reg 155 [ val ]) in insn 134:
Processing use of (reg 24 cc) in insn 132:
  Adding insn 131 to worklist
Processing use of (reg 181) in insn 131:
Processing use of (reg 24 cc) in insn 124:
  Adding insn 123 to worklist
Processing use of (reg 144 [ had_early_param ]) in insn 123:
  Adding insn 58 to worklist
  Adding insn 242 to worklist
Processing use of (reg 24 cc) in insn 242:
  Adding insn 241 to worklist
Processing use of (reg 144 [ had_early_param ]) in insn 242:
Processing use of (reg 177) in insn 241:
  Adding insn 88 to worklist
Processing use of (reg 176) in insn 88:
  Adding insn 87 to worklist
Processing use of (subreg (reg 175) 0) in insn 87:
  Adding insn 86 to worklist
Processing use of (reg 172) in insn 86:
  Adding insn 81 to worklist
Processing use of (reg 174) in insn 86:
  Adding insn 84 to worklist
Processing use of (reg 24 cc) in insn 84:
  Adding insn 83 to worklist
Processing use of (reg 140 [ D.38248 ]) in insn 83:
  Adding insn 79 to worklist
Processing use of (reg 154 [ param ]) in insn 79:
Processing use of (reg 168) in insn 79:
  Adding insn 64 to worklist
Processing use of (reg 0 r0) in insn 64:
  Adding insn 63 to worklist
Processing use of (reg 13 sp) in insn 63:
Processing use of (reg 0 r0) in insn 63:
  Adding insn 62 to worklist
Processing use of (reg 137 [ D.38255 ]) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 143 [ p ]) in insn 61:
  Adding insn 59 to worklist
  Adding insn 117 to worklist
Processing use of (reg 143 [ p ]) in insn 117:
Processing use of (reg 24 cc) in insn 81:
  Adding insn 80 to worklist
Processing use of (reg 140 [ D.38248 ]) in insn 80:
Processing use of (reg 24 cc) in insn 121:
  Adding insn 120 to worklist
Processing use of (reg 143 [ p ]) in insn 120:
Processing use of (reg 212) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 13 sp) in insn 111:
Processing use of (reg 0 r0) in insn 111:
  Adding insn 110 to worklist
Processing use of (reg 141 [ D.38244 ]) in insn 111:
  Adding insn 97 to worklist
Processing use of (reg 143 [ p ]) in insn 97:
Processing use of (reg 179) in insn 110:
  Adding insn 109 to worklist
Processing use of (reg 154 [ param ]) in insn 109:
Processing use of (reg 168) in insn 109:
Processing use of (reg 24 cc) in insn 114:
  Adding insn 113 to worklist
Processing use of (reg 142 [ D.38243 ]) in insn 113:
  Adding insn 112 to worklist
Processing use of (reg 0 r0) in insn 112:
Processing use of (reg 13 sp) in insn 104:
Processing use of (reg 0 r0) in insn 104:
  Adding insn 102 to worklist
Processing use of (reg 1 r1) in insn 104:
  Adding insn 103 to worklist
Processing use of (reg 137 [ D.38255 ]) in insn 103:
Processing use of (reg 24 cc) in insn 99:
  Adding insn 98 to worklist
Processing use of (reg 141 [ D.38244 ]) in insn 98:
Processing use of (reg 24 cc) in insn 77:
  Adding insn 76 to worklist
Processing use of (reg 170 [ <variable>.early ]) in insn 76:
  Adding insn 75 to worklist
Processing use of (reg 143 [ p ]) in insn 75:
Processing use of (reg 24 cc) in insn 73:
  Adding insn 72 to worklist
Processing use of (reg 169) in insn 72:
  Adding insn 70 to worklist
Processing use of (reg 0 r0) in insn 70:
  Adding insn 69 to worklist
Processing use of (reg 13 sp) in insn 69:
Processing use of (reg 0 r0) in insn 69:
  Adding insn 66 to worklist
Processing use of (reg 1 r1) in insn 69:
  Adding insn 67 to worklist
Processing use of (reg 2 r2) in insn 69:
  Adding insn 68 to worklist
Processing use of (reg 168) in insn 68:
Processing use of (reg 137 [ D.38255 ]) in insn 67:
Processing use of (reg 154 [ param ]) in insn 66:
Processing use of (reg 13 sp) in insn 54:
Processing use of (reg 0 r0) in insn 54:
  Adding insn 52 to worklist
Processing use of (reg 1 r1) in insn 54:
  Adding insn 53 to worklist
Processing use of (reg 155 [ val ]) in insn 35:
Processing use of (subreg (reg 163) 0) in insn 35:
  Adding insn 33 to worklist
Processing use of (reg 13 sp) in insn 45:
Processing use of (reg 0 r0) in insn 45:
  Adding insn 42 to worklist
Processing use of (reg 1 r1) in insn 45:
  Adding insn 43 to worklist
Processing use of (reg 2 r2) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 166) in insn 44:
  Adding insn 41 to worklist
Processing use of (reg 165) in insn 41:
  Adding insn 39 to worklist
Processing use of (reg 0 r0) in insn 39:
  Adding insn 38 to worklist
Processing use of (reg 13 sp) in insn 38:
Processing use of (reg 0 r0) in insn 38:
  Adding insn 37 to worklist
Processing use of (reg 155 [ val ]) in insn 37:
Processing use of (reg 155 [ val ]) in insn 43:
Processing use of (reg 151 [ D.37769 ]) in insn 42:
Processing use of (reg 24 cc) in insn 31:
  Adding insn 30 to worklist
Processing use of (reg 155 [ val ]) in insn 30:
Processing use of (reg 162) in insn 30:
  Adding insn 29 to worklist
Processing use of (reg 154 [ param ]) in insn 29:
Processing use of (reg 161) in insn 29:
  Adding insn 28 to worklist
Processing use of (reg 156) in insn 28:
  Adding insn 14 to worklist
Processing use of (reg 0 r0) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 13 sp) in insn 13:
Processing use of (reg 0 r0) in insn 13:
Processing use of (reg 155 [ val ]) in insn 23:
Processing use of (subreg (reg 159) 0) in insn 23:
  Adding insn 21 to worklist
Processing use of (reg 24 cc) in insn 19:
  Adding insn 18 to worklist
Processing use of (reg 155 [ val ]) in insn 18:
Processing use of (reg 158) in insn 18:
  Adding insn 17 to worklist
Processing use of (reg 154 [ param ]) in insn 17:
Processing use of (reg 157) in insn 17:
  Adding insn 16 to worklist
Processing use of (reg 156) in insn 16:
Processing use of (reg 24 cc) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 155 [ val ]) in insn 9:
DCE: Deleting insn 214
deleting insn with uid = 214.
DCE: Deleting insn 186
deleting insn with uid = 186.


unknown_bootoption

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={21d,20u} r1={17d,7u} r2={14d,3u} r3={11d} r11={1d,33u} r12={11d} r13={1d,43u} r14={11d,1u} r15={10d} r16={10d} r17={10d} r18={10d} r19={10d} r20={10d} r21={10d} r22={10d} r23={10d} r24={32d,23u} r25={1d,33u} r26={1d,32u} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} r81={10d} r82={10d} r83={10d} r84={10d} r85={10d} r86={10d} r87={10d} r88={10d} r89={10d} r90={10d} r91={10d} r92={10d} r93={10d} r94={10d} r95={10d} r96={10d} r97={10d} r98={10d} r99={10d} r100={10d} r101={10d} r102={10d} r103={10d} r104={10d} r105={10d} r106={10d} r107={10d} r108={10d} r109={10d} r110={10d} r111={10d} r112={10d} r113={10d} r114={10d} r115={10d} r116={10d} r117={10d} r118={10d} r119={10d} r120={10d} r121={10d} r122={10d} r123={10d} r124={10d} r125={10d} r126={10d} r127={10d} r135={2d,2u} r136={2d,3u} r137={1d,3u} r140={1d,2u} r141={1d,2u} r142={1d,1u} r143={2d,5u,1d} r144={2d,2u} r145={2d,4u} r146={2d,4u} r148={1d,2u} r151={1d,2u} r154={1d,12u} r155={2d,13u} r156={1d,2u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r165={1d,1u} r166={1d,1u} r168={1d,3u} r169={1d,1u} r170={1d,1u} r172={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r179={1d,1u} r181={1d,2u} r182={1d,3u} r183={1d,2u} r189={1d,1u} r193={1d,1u} r195={1d,1u,1d} r196={1d,1u} r198={1d,1u} r200={1d,1u} r201={1d,2u} r206={1d,1u} r207={1d,2u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} 
;;    total ref usage 1575{1277d,296u,2e} in 141{131 regular + 10 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,21] 1[21,17] 2[38,14] 3[52,11] 11[63,1] 12[64,11] 13[75,1] 14[76,11] 15[87,10] 16[97,10] 17[107,10] 18[117,10] 19[127,10] 20[137,10] 21[147,10] 22[157,10] 23[167,10] 24[177,32] 25[209,1] 26[210,1] 27[211,10] 28[221,10] 29[231,10] 30[241,10] 31[251,10] 32[261,10] 33[271,10] 34[281,10] 35[291,10] 36[301,10] 37[311,10] 38[321,10] 39[331,10] 40[341,10] 41[351,10] 42[361,10] 43[371,10] 44[381,10] 45[391,10] 46[401,10] 47[411,10] 48[421,10] 49[431,10] 50[441,10] 51[451,10] 52[461,10] 53[471,10] 54[481,10] 55[491,10] 56[501,10] 57[511,10] 58[521,10] 59[531,10] 60[541,10] 61[551,10] 62[561,10] 63[571,10] 64[581,10] 65[591,10] 66[601,10] 67[611,10] 68[621,10] 69[631,10] 70[641,10] 71[651,10] 72[661,10] 73[671,10] 74[681,10] 75[691,10] 76[701,10] 77[711,10] 78[721,10] 79[731,10] 80[741,10] 81[751,10] 82[761,10] 83[771,10] 84[781,10] 85[791,10] 86[801,10] 87[811,10] 88[821,10] 89[831,10] 90[841,10] 91[851,10] 92[861,10] 93[871,10] 94[881,10] 95[891,10] 96[901,10] 97[911,10] 98[921,10] 99[931,10] 100[941,10] 101[951,10] 102[961,10] 103[971,10] 104[981,10] 105[991,10] 106[1001,10] 107[1011,10] 108[1021,10] 109[1031,10] 110[1041,10] 111[1051,10] 112[1061,10] 113[1071,10] 114[1081,10] 115[1091,10] 116[1101,10] 117[1111,10] 118[1121,10] 119[1131,10] 120[1141,10] 121[1151,10] 122[1161,10] 123[1171,10] 124[1181,10] 125[1191,10] 126[1201,10] 127[1211,10] 135[1221,2] 136[1223,2] 137[1225,1] 140[1226,1] 141[1227,1] 142[1228,1] 143[1229,2] 144[1231,2] 145[1233,2] 146[1235,2] 148[1237,1] 151[1238,1] 154[1239,1] 155[1240,2] 156[1242,1] 157[1243,1] 158[1244,1] 159[1245,1] 161[1246,1] 162[1247,1] 163[1248,1] 165[1249,1] 166[1250,1] 168[1251,1] 169[1252,1] 170[1253,1] 172[1254,1] 174[1255,1] 175[1256,1] 176[1257,1] 177[1258,1] 179[1259,1] 181[1260,1] 182[1261,1] 183[1262,1] 189[1263,1] 192[1264,1] 193[1265,1] 195[1266,1] 196[1267,1] 198[1268,1] 199[1269,1] 200[1270,1] 201[1271,1] 206[1272,1] 207[1273,1] 208[1274,1] 209[1275,1] 210[1276,1] 211[1277,1] 212[1278,1] 
(note 3 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 154 155
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 154 155
;; live  kill	
;; rd  in  	(10)
20, 37, 51, 62, 63, 74, 75, 86, 209, 210
;; rd  gen 	(3)
208, 1239, 1241
;; rd  kill	(35)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1239, 1240, 1241

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 3 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 4 7 5 2 init/main.c:234 (set (reg/v/f:SI 154 [ param ])
        (reg:SI 0 r0 [ param ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 6 2 init/main.c:234 (set (reg/v/f:SI 155 [ val ])
        (reg:SI 1 r1 [ val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ val ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 init/main.c:236 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 155 [ val ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 init/main.c:236 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 56)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 2 -> ( 3 8)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(13)
20, 37, 51, 62, 63, 74, 75, 86, 208, 209, 210, 1239, 1241


;; Succ edge  3 [100.0%]  (fallthru)
;; Succ edge  8 [0.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 156 157 158
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 0 [r0] 24 [cc] 156 157 158
;; live  kill	 14 [lr]
;; rd  in  	(13)
20, 37, 51, 62, 63, 74, 75, 86, 208, 209, 210, 1239, 1241
;; rd  gen 	(5)
19, 206, 1242, 1243, 1244
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1242, 1243, 1244

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 10 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn/i 13 11 14 3 init/main.c:238 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41] <function_decl 0x51157b80 strlen>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 14 13 16 3 init/main.c:238 (set (reg:SI 156)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 16 14 17 3 init/main.c:238 (set (reg:SI 157)
        (plus:SI (reg:SI 156)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 17 16 18 3 init/main.c:238 (set (reg:SI 158)
        (plus:SI (reg/v/f:SI 154 [ param ])
            (reg:SI 157))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 157)
        (nil)))

(insn 18 17 19 3 init/main.c:238 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 155 [ val ])
            (reg:SI 158))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 158)
        (nil)))

(jump_insn 19 18 20 3 init/main.c:238 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; rd  out 	(15)
19, 37, 51, 62, 63, 74, 75, 206, 209, 210, 1239, 1241, 1242, 1243, 1244


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u21(11){ }u22(13){ }u23(25){ }u24(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 159
;; live  kill	
;; rd  in  	(15)
19, 37, 51, 62, 63, 74, 75, 206, 209, 210, 1239, 1241, 1242, 1243, 1244
;; rd  gen 	(1)
1245
;; rd  kill	(1)
1245

;; Pred edge  3 [0.0%]  (fallthru)
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 23 4 init/main.c:239 (set (reg:SI 159)
        (const_int 61 [0x3d])) 167 {*arm_movsi_insn} (nil))

(insn 23 21 257 4 init/main.c:239 (set (mem:QI (plus:SI (reg/v/f:SI 155 [ val ])
                (const_int -1 [0xffffffffffffffff])) [0 S1 A8])
        (subreg:QI (reg:SI 159) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 159)
        (expr_list:REG_EQUAL (const_int 61 [0x3d])
            (nil))))

(jump_insn 257 23 258 4 (set (pc)
        (label_ref 56)) -1 (nil))
;; End of basic block 4 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(16)
19, 37, 51, 62, 63, 74, 75, 206, 209, 210, 1239, 1241, 1242, 1243, 1244, 1245


;; Succ edge  8 [100.0%] 

(barrier 258 257 26)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u27(11){ }u28(13){ }u29(25){ }u30(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; lr  def 	 24 [cc] 161 162
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 156
;; live  gen 	 24 [cc] 161 162
;; live  kill	
;; rd  in  	(15)
19, 37, 51, 62, 63, 74, 75, 206, 209, 210, 1239, 1241, 1242, 1243, 1244
;; rd  gen 	(3)
205, 1246, 1247
;; rd  kill	(34)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1246, 1247

;; Pred edge  3 [100.0%] 
(code_label 26 258 27 5 77 "" [1 uses])

(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 5 init/main.c:240 (set (reg:SI 161)
        (plus:SI (reg:SI 156)
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(insn 29 28 30 5 init/main.c:240 (set (reg:SI 162)
        (plus:SI (reg/v/f:SI 154 [ param ])
            (reg:SI 161))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 161)
        (nil)))

(insn 30 29 31 5 init/main.c:240 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 155 [ val ])
            (reg:SI 162))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 162)
        (nil)))

(jump_insn 31 30 32 5 init/main.c:240 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(17)
19, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1239, 1241, 1242, 1243, 1244, 1246, 1247


;; Succ edge  6 [100.0%]  (fallthru)
;; Succ edge  7 [0.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u37(11){ }u38(13){ }u39(25){ }u40(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 151 155 163 165 166
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 151 155 163 165 166
;; live  kill	 14 [lr]
;; rd  in  	(17)
19, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1239, 1241, 1242, 1243, 1244, 1246, 1247
;; rd  gen 	(6)
15, 1238, 1240, 1248, 1249, 1250
;; rd  kill	(38)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 1238, 1240, 1241, 1248, 1249, 1250

;; Pred edge  5 [100.0%]  (fallthru)
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 33 32 35 6 init/main.c:241 (set (reg:SI 163)
        (const_int 61 [0x3d])) 167 {*arm_movsi_insn} (nil))

(insn 35 33 36 6 init/main.c:241 (set (mem:QI (plus:SI (reg/v/f:SI 155 [ val ])
                (const_int -2 [0xfffffffffffffffe])) [0 S1 A8])
        (subreg:QI (reg:SI 163) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 163)
        (expr_list:REG_EQUAL (const_int 61 [0x3d])
            (nil))))

(insn 36 35 37 6 init/main.c:242 (set (reg/f:SI 151 [ D.37769 ])
        (plus:SI (reg/v/f:SI 155 [ val ])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 37 36 38 6 init/main.c:242 (set (reg:SI 0 r0)
        (reg/v/f:SI 155 [ val ])) 167 {*arm_movsi_insn} (nil))

(call_insn/i 38 37 39 6 init/main.c:242 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41] <function_decl 0x51157b80 strlen>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 39 38 41 6 init/main.c:242 (set (reg:SI 165)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 41 39 42 6 init/main.c:242 (set (reg:SI 166)
        (plus:SI (reg:SI 165)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 165)
        (nil)))

(insn 42 41 43 6 init/main.c:242 (set (reg:SI 0 r0)
        (reg/f:SI 151 [ D.37769 ])) 167 {*arm_movsi_insn} (nil))

(insn 43 42 44 6 init/main.c:242 (set (reg:SI 1 r1)
        (reg/v/f:SI 155 [ val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 155 [ val ])
        (nil)))

(insn 44 43 45 6 init/main.c:242 (set (reg:SI 2 r2)
        (reg:SI 166)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 166)
        (nil)))

(call_insn 45 44 46 6 init/main.c:242 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memmove") [flags 0x41] <function_decl 0x51154d80 memmove>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 46 45 259 6 init/main.c:243 (set (reg/v/f:SI 155 [ val ])
        (reg/f:SI 151 [ D.37769 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 151 [ D.37769 ])
        (nil)))

(jump_insn 259 46 260 6 (set (pc)
        (label_ref 56)) -1 (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(21)
15, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1238, 1239, 1240, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250


;; Succ edge  8 [100.0%] 

(barrier 260 259 49)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u57(11){ }u58(13){ }u59(25){ }u60(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(17)
19, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1239, 1241, 1242, 1243, 1244, 1246, 1247
;; rd  gen 	(0)

;; rd  kill	(11)
76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86

;; Pred edge  5 [0.0%] 
(code_label 49 260 50 7 78 "" [1 uses])

(note 50 49 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 52 50 53 7 init/main.c:245 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x11b56450>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x11b56450>)
        (nil)))

(insn 53 52 54 7 init/main.c:245 (set (reg:SI 1 r1)
        (const_int 245 [0xf5])) 167 {*arm_movsi_insn} (nil))

(call_insn 54 53 55 7 init/main.c:245 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(17)
19, 37, 51, 62, 63, 74, 75, 205, 209, 210, 1239, 1241, 1242, 1243, 1244, 1246, 1247



(barrier 55 54 56)

;; Start of basic block ( 2 4 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u64(11){ }u65(13){ }u66(25){ }u67(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 143 144 212
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 143 144 212
;; live  kill	
;; rd  in  	(28)
15, 19, 20, 37, 51, 62, 63, 74, 75, 86, 205, 206, 208, 209, 210, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250
;; rd  gen 	(3)
1230, 1232, 1278
;; rd  kill	(5)
1229, 1230, 1231, 1232, 1278

;; Pred edge  2 [0.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  6 [100.0%] 
(code_label 56 55 57 8 76 "" [3 uses])

(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 8 init/main.c:161 (set (reg/v:SI 144 [ had_early_param ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 59 58 119 8 init/main.c:163 (set (reg/v/f:SI 143 [ p ])
        (symbol_ref:SI ("__setup_start") [flags 0xc0] <var_decl 0x11a54420 __setup_start>)) 167 {*arm_movsi_insn} (nil))

(insn 119 59 118 8 init/main.c:182 (set (reg/f:SI 212)
        (symbol_ref:SI ("__setup_end") [flags 0xc0] <var_decl 0x11a54480 __setup_end>)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; rd  out 	(31)
15, 19, 20, 37, 51, 62, 63, 74, 75, 86, 205, 206, 208, 209, 210, 1230, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1278


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 15) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u68(11){ }u69(13){ }u70(25){ }u71(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 154
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 168 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 137 168 169
;; live  kill	 14 [lr]
;; rd  in  	(49)
7, 10, 15, 19, 20, 37, 51, 62, 63, 74, 75, 86, 177, 205, 206, 208, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(5)
10, 183, 1225, 1251, 1252
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1225, 1251, 1252

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  15 [86.0%]  (dfs_back)
(code_label 118 119 60 9 83 "" [1 uses])

(note 60 118 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 9 init/main.c:165 (set (reg/f:SI 137 [ D.38255 ])
        (mem/s/f/j:SI (reg/v/f:SI 143 [ p ]) [0 <variable>.str+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 62 61 63 9 init/main.c:165 (set (reg:SI 0 r0)
        (reg/f:SI 137 [ D.38255 ])) 167 {*arm_movsi_insn} (nil))

(call_insn/i 63 62 64 9 init/main.c:165 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41] <function_decl 0x51157b80 strlen>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 64 63 66 9 init/main.c:165 (set (reg:SI 168)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 66 64 67 9 init/main.c:166 (set (reg:SI 0 r0)
        (reg/v/f:SI 154 [ param ])) 167 {*arm_movsi_insn} (nil))

(insn 67 66 68 9 init/main.c:166 (set (reg:SI 1 r1)
        (reg/f:SI 137 [ D.38255 ])) 167 {*arm_movsi_insn} (nil))

(insn 68 67 69 9 init/main.c:166 (set (reg:SI 2 r2)
        (reg:SI 168)) 167 {*arm_movsi_insn} (nil))

(call_insn/i 69 68 70 9 init/main.c:166 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strncmp") [flags 0x41] <function_decl 0x51157e80 strncmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 70 69 72 9 init/main.c:166 (set (reg:SI 169)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 72 70 73 9 init/main.c:166 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 169)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 169)
        (nil)))

(jump_insn 73 72 74 9 init/main.c:166 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 115)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 10 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; rd  out 	(41)
10, 37, 51, 62, 63, 74, 75, 183, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u87(11){ }u88(13){ }u89(25){ }u90(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; live  gen 	 24 [cc] 170
;; live  kill	
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 183, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(2)
199, 1253
;; rd  kill	(33)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1253

;; Pred edge  9 [50.0%]  (fallthru)
(note 74 73 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 75 74 76 10 init/main.c:167 (set (reg:SI 170 [ <variable>.early ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 143 [ p ])
                (const_int 8 [0x8])) [0 <variable>.early+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 76 75 77 10 init/main.c:167 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 170 [ <variable>.early ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 170 [ <variable>.early ])
        (nil)))

(jump_insn 77 76 78 10 init/main.c:167 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 95)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; rd  out 	(41)
10, 37, 51, 62, 63, 74, 75, 199, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278


;; Succ edge  11 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u94(11){ }u95(13){ }u96(25){ }u97(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 168 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 154 168
;; lr  def 	 24 [cc] 140 144 172 174 175 176 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 168 212
;; live  gen 	 24 [cc] 140 144 172 174 175 176 177
;; live  kill	
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 199, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(8)
179, 1226, 1231, 1254, 1255, 1256, 1257, 1258
;; rd  kill	(40)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1226, 1231, 1232, 1254, 1255, 1256, 1257, 1258

;; Pred edge  10 [50.0%]  (fallthru)
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 79 78 80 11 init/main.c:172 (set (reg:SI 140 [ D.38248 ])
        (zero_extend:SI (mem:QI (plus:SI (reg/v/f:SI 154 [ param ])
                    (reg:SI 168)) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(insn 80 79 81 11 init/main.c:172 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 140 [ D.38248 ])
            (const_int 61 [0x3d]))) 219 {*arm_cmpsi_insn} (nil))

(insn 81 80 83 11 init/main.c:172 (set (reg:SI 172)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 83 81 84 11 init/main.c:172 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 140 [ D.38248 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 140 [ D.38248 ])
        (nil)))

(insn 84 83 86 11 init/main.c:172 (set (reg:SI 174)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 86 84 87 11 init/main.c:172 (set (reg:SI 175)
        (ior:SI (reg:SI 172)
            (reg:SI 174))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 174)
        (expr_list:REG_DEAD (reg:SI 172)
            (nil))))

(insn 87 86 88 11 init/main.c:172 (set (reg:QI 176)
        (subreg:QI (reg:SI 175) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 175)
        (nil)))

(insn 88 87 241 11 init/main.c:172 (set (reg:SI 177)
        (zero_extend:SI (reg:QI 176))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 176)
        (nil)))

(insn 241 88 242 11 init/main.c:173 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 177)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 177)
        (nil)))

(insn 242 241 261 11 init/main.c:173 (set (reg/v:SI 144 [ had_early_param ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 144 [ had_early_param ])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 261 242 262 11 (set (pc)
        (label_ref 115)) -1 (nil))
;; End of basic block 11 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; rd  out 	(40)
10, 37, 51, 62, 63, 74, 75, 179, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278


;; Succ edge  15 [100.0%] 

(barrier 262 261 95)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u111(11){ }u112(13){ }u113(25){ }u114(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 144 154 155 168 212
;; live  gen 	 24 [cc] 141
;; live  kill	
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 199, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(2)
196, 1227
;; rd  kill	(33)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1227

;; Pred edge  10 [50.0%] 
(code_label 95 262 96 12 80 "" [1 uses])

(note 96 95 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 97 96 98 12 init/main.c:174 (set (reg/f:SI 141 [ D.38244 ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 143 [ p ])
                (const_int 4 [0x4])) [0 <variable>.setup_func+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 98 97 99 12 init/main.c:174 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 141 [ D.38244 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 99 98 100 12 init/main.c:174 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 143 144 154 155 168 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 143 144 154 155 168 212
;; rd  out 	(41)
10, 37, 51, 62, 63, 74, 75, 196, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278


;; Succ edge  13 [0.0%]  (fallthru,loop_exit)
;; Succ edge  14 [100.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u118(11){ }u119(13){ }u120(25){ }u121(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 196, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(1)
9
;; rd  kill	(32)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86

;; Pred edge  12 [0.0%]  (fallthru,loop_exit)
(note 100 99 102 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 102 100 103 13 init/main.c:175 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x11b39ec0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x11b39ec0>)
        (nil)))

(insn 103 102 104 13 init/main.c:175 (set (reg:SI 1 r1)
        (reg/f:SI 137 [ D.38255 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 137 [ D.38255 ])
        (nil)))

(call_insn 104 103 263 13 init/main.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 263 104 264 13 (set (pc)
        (label_ref 225)) -1 (nil))
;; End of basic block 13 -> ( 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(41)
9, 37, 51, 62, 63, 74, 75, 196, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278


;; Succ edge  33 [100.0%] 

(barrier 264 263 107)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u126(11){ }u127(13){ }u128(25){ }u129(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 144 154 155 168 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 154 168
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 144 154 155 168 212
;; live  gen 	 0 [r0] 24 [cc] 142 179
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 37, 51, 62, 63, 74, 75, 196, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(4)
7, 193, 1228, 1259
;; rd  kill	(66)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1228, 1259

;; Pred edge  12 [100.0%] 
(code_label 107 264 108 14 81 "" [1 uses])

(note 108 107 109 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 14 init/main.c:178 (set (reg:SI 179)
        (plus:SI (reg/v/f:SI 154 [ param ])
            (reg:SI 168))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(insn 110 109 111 14 init/main.c:178 (set (reg:SI 0 r0)
        (reg:SI 179)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 179)
        (nil)))

(call_insn 111 110 112 14 init/main.c:178 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 141 [ D.38244 ]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 249 {*call_value_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 141 [ D.38244 ])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 112 111 113 14 init/main.c:178 (set (reg:SI 142 [ D.38243 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 113 112 114 14 init/main.c:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 142 [ D.38243 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 142 [ D.38243 ])
        (nil)))

(jump_insn 114 113 115 14 init/main.c:178 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 225)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 300 [0x12c])
            (nil))))
;; End of basic block 14 -> ( 33 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; rd  out 	(41)
7, 37, 51, 62, 63, 74, 75, 193, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278


;; Succ edge  33 [3.0%]  (loop_exit)
;; Succ edge  15 [97.0%]  (fallthru)

;; Start of basic block ( 9 14 11) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u139(11){ }u140(13){ }u141(25){ }u142(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 212
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 212
;; lr  def 	 24 [cc] 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  gen 	 24 [cc] 143
;; live  kill	
;; rd  in  	(44)
7, 10, 37, 51, 62, 63, 74, 75, 179, 183, 193, 209, 210, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(2)
177, 1229
;; rd  kill	(34)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1229, 1230

;; Pred edge  9 [50.0%] 
;; Pred edge  14 [97.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 115 114 116 15 79 "" [2 uses])

(note 116 115 117 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 117 116 120 15 init/main.c:181 (set (reg/v/f:SI 143 [ p ])
        (plus:SI (reg/v/f:SI 143 [ p ])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn 120 117 121 15 init/main.c:182 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 143 [ p ])
            (reg/f:SI 212))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 143 [ p ])
            (symbol_ref:SI ("__setup_end") [flags 0xc0] <var_decl 0x11a54480 __setup_end>))
        (nil)))

(jump_insn 121 120 122 15 init/main.c:182 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 118)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 15 -> ( 9 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 154 155 212
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 154 155 212
;; rd  out 	(41)
7, 10, 37, 51, 62, 63, 74, 75, 177, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278


;; Succ edge  9 [86.0%]  (dfs_back)
;; Succ edge  16 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u148(11){ }u149(13){ }u150(25){ }u151(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 154 155
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(41)
7, 10, 37, 51, 62, 63, 74, 75, 177, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(1)
192
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208

;; Pred edge  15 [14.0%]  (fallthru,loop_exit)
(note 122 121 123 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 123 122 124 16 init/main.c:249 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 144 [ had_early_param ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 144 [ had_early_param ])
        (nil)))

(jump_insn 124 123 125 16 init/main.c:249 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 225)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3567 [0xdef])
            (nil))))
;; End of basic block 16 -> ( 33 17)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(41)
7, 10, 37, 51, 62, 63, 74, 75, 192, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278


;; Succ edge  33 [35.7%] 
;; Succ edge  17 [64.3%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u154(11){ }u155(13){ }u156(25){ }u157(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 181
;; live  kill	 14 [lr]
;; rd  in  	(41)
7, 10, 37, 51, 62, 63, 74, 75, 192, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1278
;; rd  gen 	(3)
5, 182, 1260
;; rd  kill	(65)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1260

;; Pred edge  16 [64.3%]  (fallthru)
(note 125 124 126 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 126 125 127 17 init/main.c:253 (set (reg:SI 0 r0)
        (reg/v/f:SI 154 [ param ])) 167 {*arm_movsi_insn} (nil))

(insn 127 126 128 17 init/main.c:253 (set (reg:SI 1 r1)
        (const_int 46 [0x2e])) 167 {*arm_movsi_insn} (nil))

(call_insn/i 128 127 129 17 init/main.c:253 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strchr") [flags 0x41] <function_decl 0x51157580 strchr>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 129 128 131 17 init/main.c:253 (set (reg:SI 181)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 131 129 132 17 init/main.c:253 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 181)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 132 131 133 17 init/main.c:253 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 139)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 17 -> ( 18 20)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 181
;; rd  out 	(41)
5, 37, 51, 62, 63, 74, 75, 182, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278


;; Succ edge  18 [85.0%]  (fallthru)
;; Succ edge  20 [15.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u165(11){ }u166(13){ }u167(25){ }u168(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 181
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 181
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(41)
5, 37, 51, 62, 63, 74, 75, 182, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278
;; rd  gen 	(1)
190
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208

;; Pred edge  17 [85.0%]  (fallthru)
(note 133 132 134 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 134 133 135 18 init/main.c:253 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 155 [ val ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 135 134 136 18 init/main.c:253 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 225)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 18 -> ( 33 19)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 181
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 181
;; rd  out 	(41)
5, 37, 51, 62, 63, 74, 75, 190, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278


;; Succ edge  33 [10.1%] 
;; Succ edge  19 [89.9%]  (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u171(11){ }u172(13){ }u173(25){ }u174(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 181
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 181
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 181
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(41)
5, 37, 51, 62, 63, 74, 75, 190, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278
;; rd  gen 	(1)
181
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208

;; Pred edge  18 [89.9%]  (fallthru)
(note 136 135 137 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 137 136 138 19 init/main.c:253 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 181)
            (reg/v/f:SI 155 [ val ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 181)
        (nil)))

(jump_insn 138 137 139 19 init/main.c:253 discrim 2 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 225)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 19 -> ( 33 20)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; rd  out 	(41)
5, 37, 51, 62, 63, 74, 75, 181, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278


;; Succ edge  33 [39.0%] 
;; Succ edge  20 [61.0%]  (fallthru)

;; Start of basic block ( 17 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u178(11){ }u179(13){ }u180(25){ }u181(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 182 183
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155
;; live  gen 	 24 [cc] 182 183
;; live  kill	
;; rd  in  	(42)
5, 37, 51, 62, 63, 74, 75, 181, 182, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278
;; rd  gen 	(3)
189, 1261, 1262
;; rd  kill	(34)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1261, 1262

;; Pred edge  17 [15.0%] 
;; Pred edge  19 [61.0%]  (fallthru)
(code_label 139 138 140 20 84 "" [1 uses])

(note 140 139 141 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 141 140 142 20 init/main.c:256 (set (reg/f:SI 182)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 142 141 143 20 init/main.c:256 (set (reg/f:SI 183 [ panic_later ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 182)
                (const_int 80 [0x50])) [0 panic_later+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 80 [0x50]))) [0 panic_later+0 S4 A32])
        (nil)))

(insn 143 142 144 20 init/main.c:256 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 183 [ panic_later ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 144 143 145 20 init/main.c:256 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 225)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7837 [0x1e9d])
            (nil))))
;; End of basic block 20 -> ( 33 21)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182 183
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; rd  out 	(43)
5, 37, 51, 62, 63, 74, 75, 189, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278


;; Succ edge  33 [78.4%] 
;; Succ edge  21 [21.6%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u185(11){ }u186(13){ }u187(25){ }u188(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182 183
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(43)
5, 37, 51, 62, 63, 74, 75, 189, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278
;; rd  gen 	(1)
188
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208

;; Pred edge  20 [21.6%]  (fallthru)
(note 145 144 146 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 146 145 147 21 init/main.c:259 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 155 [ val ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 147 146 148 21 init/main.c:259 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 152)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182 183
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; rd  out 	(43)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278


;; Succ edge  22 [85.0%]  (fallthru)
;; Succ edge  23 [15.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u191(11){ }u192(13){ }u193(25){ }u194(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182 183
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; lr  def 	 146 206 207 208 209
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182 183
;; live  gen 	 146 206 207 208 209
;; live  kill	
;; rd  in  	(43)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278
;; rd  gen 	(5)
1235, 1272, 1273, 1274, 1275
;; rd  kill	(6)
1235, 1236, 1272, 1273, 1274, 1275

;; Pred edge  21 [85.0%]  (fallthru)
(note 148 147 149 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 149 148 185 22 init/main.c:259 (set (reg/v:SI 146 [ i ])
        (reg/f:SI 183 [ panic_later ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 183 [ panic_later ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 185 149 164 22 init/main.c:262 discrim 1 (set (reg/f:SI 206)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 136 [0x88])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 136 [0x88])))
        (nil)))

(insn 164 185 165 22 init/main.c:264 (set (reg/f:SI 207)
        (reg/f:SI 182)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 182)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
            (nil))))

(insn 165 164 171 22 init/main.c:264 (set (reg/f:SI 208)
        (symbol_ref/v/f:SI ("*.LC19") [flags 0x82] <string_cst 0x11ae3740>)) 167 {*arm_movsi_insn} (nil))

(insn 171 165 265 22 init/main.c:267 (set (reg:SI 209)
        (minus:SI (reg/v/f:SI 155 [ val ])
            (reg/v/f:SI 154 [ param ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/v/f:SI 155 [ val ])
        (nil)))

(jump_insn 265 171 266 22 (set (pc)
        (label_ref 182)) -1 (nil))
;; End of basic block 22 -> ( 28)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; rd  out 	(48)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1272, 1273, 1274, 1275, 1278


;; Succ edge  28 [100.0%] 

(barrier 266 265 152)

;; Start of basic block ( 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u199(11){ }u200(13){ }u201(25){ }u202(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 154 155 182
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 182
;; lr  def 	 135 136 145 210 211
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 155 182
;; live  gen 	 135 136 145 210 211
;; live  kill	
;; rd  in  	(43)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1278
;; rd  gen 	(5)
1222, 1224, 1233, 1276, 1277
;; rd  kill	(8)
1221, 1222, 1223, 1224, 1233, 1234, 1276, 1277

;; Pred edge  21 [15.0%] 
(code_label 152 266 153 23 85 "" [1 uses])

(note 153 152 155 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 155 153 156 23 init/main.c:259 (set (reg/v/f:SI 135 [ param.868 ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 182)
                (const_int 84 [0x54])) [0 panic_param+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 182)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 84 [0x54]))) [0 panic_param+0 S4 A32])
            (nil))))

(insn 156 155 157 23 init/main.c:259 (set (reg/f:SI 136 [ panic_later_lsm.842 ])
        (reg/v/f:SI 155 [ val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 155 [ val ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 157 156 213 23 init/main.c:259 (set (reg/v:SI 145 [ i ])
        (reg/f:SI 136 [ panic_later_lsm.842 ])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 213 157 245 23 init/main.c:274 discrim 1 (set (reg/f:SI 210)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 245 213 267 23 init/main.c:277 (set (reg/f:SI 211)
        (symbol_ref/v/f:SI ("*.LC20") [flags 0x82] <string_cst 0x11ae3780>)) 167 {*arm_movsi_insn} (nil))

(jump_insn 267 245 268 23 (set (pc)
        (label_ref 210)) -1 (nil))
;; End of basic block 23 -> ( 31)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; rd  out 	(48)
5, 37, 51, 62, 63, 74, 75, 188, 209, 210, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1276, 1277, 1278


;; Succ edge  31 [100.0%] 

(barrier 268 267 188)

;; Start of basic block ( 28) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u206(11){ }u207(13){ }u208(25){ }u209(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(53)
3, 5, 37, 51, 62, 63, 74, 75, 185, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(1)
187
;; rd  kill	(32)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208

;; Pred edge  28 [95.5%] 
(code_label 188 268 160 24 90 "" [1 uses])

(note 160 188 161 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 161 160 162 24 init/main.c:263 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 146 [ i ])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 162 161 163 24 init/main.c:263 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 169)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; rd  out 	(53)
3, 5, 37, 51, 62, 63, 74, 75, 187, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278


;; Succ edge  25 [28.0%]  (fallthru)
;; Succ edge  26 [72.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u212(11){ }u213(13){ }u214(25){ }u215(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 154 207 208
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  gen 	
;; live  kill	
;; rd  in  	(53)
3, 5, 37, 51, 62, 63, 74, 75, 187, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  24 [28.0%]  (fallthru)
(note 163 162 166 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 166 163 168 25 init/main.c:264 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 207)
                (const_int 80 [0x50])) [0 panic_later+0 S4 A32])
        (reg/f:SI 208)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC19") [flags 0x82] <string_cst 0x11ae3740>)
        (nil)))

(insn 168 166 169 25 init/main.c:265 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 207)
                (const_int 84 [0x54])) [0 panic_param+0 S4 A32])
        (reg/v/f:SI 154 [ param ])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; rd  out 	(53)
3, 5, 37, 51, 62, 63, 74, 75, 187, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278


;; Succ edge  26 [100.0%]  (fallthru)

;; Start of basic block ( 24 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u220(11){ }u221(13){ }u222(25){ }u223(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 154 209
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 189
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 189
;; live  kill	 14 [lr]
;; rd  in  	(53)
3, 5, 37, 51, 62, 63, 74, 75, 187, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(3)
3, 180, 1263
;; rd  kill	(65)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1263

;; Pred edge  24 [72.0%] 
;; Pred edge  25 [100.0%]  (fallthru)
(code_label 169 168 170 26 88 "" [1 uses])

(note 170 169 172 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 172 170 173 26 init/main.c:267 (set (reg:SI 0 r0)
        (reg/v/f:SI 154 [ param ])) 167 {*arm_movsi_insn} (nil))

(insn 173 172 174 26 init/main.c:267 (set (reg:SI 1 r1)
        (reg/f:SI 148 [ D.37792 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 148 [ D.37792 ])
        (nil)))

(insn 174 173 175 26 init/main.c:267 (set (reg:SI 2 r2)
        (reg:SI 209)) 167 {*arm_movsi_insn} (nil))

(call_insn/i 175 174 176 26 init/main.c:267 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strncmp") [flags 0x41] <function_decl 0x51157e80 strncmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 176 175 178 26 init/main.c:267 (set (reg:SI 189)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 178 176 179 26 init/main.c:267 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 189)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 189)
        (nil)))

(jump_insn 179 178 180 26 init/main.c:267 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 191)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 26 -> ( 29 27)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; rd  out 	(52)
3, 37, 51, 62, 63, 74, 75, 180, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278


;; Succ edge  29 [4.5%]  (loop_exit)
;; Succ edge  27 [95.5%]  (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u234(11){ }u235(13){ }u236(25){ }u237(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  gen 	 146
;; live  kill	
;; rd  in  	(52)
3, 37, 51, 62, 63, 74, 75, 180, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(1)
1236
;; rd  kill	(2)
1235, 1236

;; Pred edge  26 [95.5%]  (fallthru)
(note 180 179 181 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 181 180 182 27 init/main.c:262 (set (reg/v:SI 146 [ i ])
        (plus:SI (reg/v:SI 146 [ i ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 27 -> ( 28)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; rd  out 	(51)
3, 37, 51, 62, 63, 74, 75, 180, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278


;; Succ edge  28 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 27 22) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u239(11){ }u240(13){ }u241(25){ }u242(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 206
;; lr  def 	 24 [cc] 148 192
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154 206 207 208 209
;; live  gen 	 24 [cc] 148 192
;; live  kill	
;; rd  in  	(54)
3, 5, 37, 51, 62, 63, 74, 75, 180, 188, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(3)
185, 1237, 1264
;; rd  kill	(34)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1237, 1264

;; Pred edge  27 [100.0%]  (fallthru,dfs_back)
;; Pred edge  22 [100.0%] 
(code_label 182 181 183 28 86 "" [1 uses])

(note 183 182 187 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 187 183 189 28 init/main.c:262 discrim 1 (set (reg/f:SI 148 [ D.37792 ])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 146 [ i ])
                    (const_int 4 [0x4]))
                (reg/f:SI 206)) [0 envp_init S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 189 187 190 28 init/main.c:262 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 148 [ D.37792 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 190 189 191 28 init/main.c:262 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 188)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 28 -> ( 24 29)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 148 154 206 207 208 209
;; rd  out 	(53)
3, 5, 37, 51, 62, 63, 74, 75, 185, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278


;; Succ edge  24 [95.5%] 
;; Succ edge  29 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 26 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u249(11){ }u250(13){ }u251(25){ }u252(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 146 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154
;; lr  def 	 193 195 196
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 154
;; live  gen 	 193 195 196
;; live  kill	
;; rd  in  	(54)
3, 5, 37, 51, 62, 63, 74, 75, 180, 185, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1278
;; rd  gen 	(3)
1265, 1266, 1267
;; rd  kill	(3)
1265, 1266, 1267

;; Pred edge  26 [4.5%]  (loop_exit)
;; Pred edge  28 [4.5%]  (fallthru,loop_exit)
(code_label 191 190 192 29 89 "" [1 uses])

(note 192 191 193 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 193 192 195 29 init/main.c:270 (set (reg/f:SI 193)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 195 193 196 29 init/main.c:270 (set (reg:SI 195)
        (ashift:SI (reg/v:SI 146 [ i ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 146 [ i ])
        (nil)))

(insn 196 195 198 29 init/main.c:270 (set (reg:SI 196)
        (plus:SI (reg/f:SI 193)
            (reg:SI 195))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 195)
        (expr_list:REG_DEAD (reg/f:SI 193)
            (expr_list:REG_EQUAL (plus:SI (reg:SI 195)
                    (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]))
                (nil)))))

(insn 198 196 269 29 init/main.c:270 (set (mem/s/f/j:SI (plus:SI (reg:SI 196)
                (const_int 136 [0x88])) [0 envp_init S4 A32])
        (reg/v/f:SI 154 [ param ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 196)
        (expr_list:REG_DEAD (reg/v/f:SI 154 [ param ])
            (nil))))

(jump_insn 269 198 270 29 (set (pc)
        (label_ref 225)) -1 (nil))
;; End of basic block 29 -> ( 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(57)
3, 5, 37, 51, 62, 63, 74, 75, 180, 185, 209, 210, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1272, 1273, 1274, 1275, 1278


;; Succ edge  33 [100.0%] 

(barrier 270 269 212)

;; Start of basic block ( 31) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u259(11){ }u260(13){ }u261(25){ }u262(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 211
;; lr  def 	 24 [cc] 135 136 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; live  gen 	 24 [cc] 135 136 145
;; live  kill	
;; rd  in  	(54)
5, 37, 51, 62, 63, 74, 75, 184, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278
;; rd  gen 	(4)
178, 1221, 1223, 1234
;; rd  kill	(38)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1221, 1222, 1223, 1224, 1233, 1234

;; Pred edge  31 [97.1%] 
(code_label 212 270 201 30 92 "" [1 uses])

(note 201 212 243 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 243 201 244 30 init/main.c:277 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 145 [ i ])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(insn 244 243 247 30 init/main.c:277 (set (reg/v/f:SI 135 [ param.868 ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/v/f:SI 135 [ param.868 ])
            (reg/v/f:SI 154 [ param ]))) 240 {*movsicc_insn} (nil))

(insn 247 244 209 30 init/main.c:277 (set (reg/f:SI 136 [ panic_later_lsm.842 ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/f:SI 136 [ panic_later_lsm.842 ])
            (reg/f:SI 211))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 209 247 210 30 init/main.c:274 (set (reg/v:SI 145 [ i ])
        (plus:SI (reg/v:SI 145 [ i ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 30 -> ( 31)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; rd  out 	(51)
5, 37, 51, 62, 63, 74, 75, 178, 209, 210, 1221, 1223, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278


;; Succ edge  31 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 30 23) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u271(11){ }u272(13){ }u273(25){ }u274(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145 210
;; lr  def 	 24 [cc] 198 199 200
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 210 211
;; live  gen 	 24 [cc] 198 199 200
;; live  kill	
;; rd  in  	(55)
5, 37, 51, 62, 63, 74, 75, 178, 188, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278
;; rd  gen 	(4)
184, 1268, 1269, 1270
;; rd  kill	(35)
177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 1268, 1269, 1270

;; Pred edge  30 [100.0%]  (fallthru,dfs_back)
;; Pred edge  23 [100.0%] 
(code_label 210 209 211 31 87 "" [1 uses])

(note 211 210 254 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 254 211 215 31 init/main.c:274 discrim 1 (set (reg/f:SI 198)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 215 254 216 31 init/main.c:233 (set (reg/f:SI 200)
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 145 [ i ])
                    (const_int 4 [0x4]))
                (reg/f:SI 210)) [0 argv_init S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 216 215 217 31 init/main.c:233 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 200)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 200)
        (nil)))

(jump_insn 217 216 218 31 init/main.c:233 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 212)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9706 [0x25ea])
            (nil))))
;; End of basic block 31 -> ( 30 32)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 198 210 211
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 198 210 211
;; rd  out 	(54)
5, 37, 51, 62, 63, 74, 75, 184, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278


;; Succ edge  30 [97.1%] 
;; Succ edge  32 [2.9%]  (fallthru,loop_exit)

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u281(11){ }u282(13){ }u283(25){ }u284(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 145 154 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 198
;; lr  def 	 201
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 145 154 198
;; live  gen 	 201
;; live  kill	
;; rd  in  	(54)
5, 37, 51, 62, 63, 74, 75, 184, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1276, 1277, 1278
;; rd  gen 	(1)
1271
;; rd  kill	(1)
1271

;; Pred edge  31 [2.9%]  (fallthru,loop_exit)
(note 218 217 219 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 219 218 220 32 init/main.c:233 (set (reg/f:SI 201)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 220 219 222 32 init/main.c:233 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 201)
                (const_int 80 [0x50])) [0 panic_later+0 S4 A32])
        (reg/f:SI 136 [ panic_later_lsm.842 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 136 [ panic_later_lsm.842 ])
        (nil)))

(insn 222 220 224 32 init/main.c:233 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 201)
                (const_int 84 [0x54])) [0 panic_param+0 S4 A32])
        (reg/v/f:SI 135 [ param.868 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 201)
        (expr_list:REG_DEAD (reg/v/f:SI 135 [ param.868 ])
            (nil))))

(insn 224 222 225 32 init/main.c:280 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 145 [ i ])
                    (const_int 4 [0x4]))
                (reg/f:SI 198)) [0 argv_init S4 A32])
        (reg/v/f:SI 154 [ param ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 198)
        (expr_list:REG_DEAD (reg/v/f:SI 154 [ param ])
            (expr_list:REG_DEAD (reg/v:SI 145 [ i ])
                (nil)))))
;; End of basic block 32 -> ( 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(55)
5, 37, 51, 62, 63, 74, 75, 184, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1268, 1269, 1270, 1271, 1276, 1277, 1278


;; Succ edge  33 [100.0%]  (fallthru)

;; Start of basic block ( 16 19 20 32 18 13 14 29) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u292(11){ }u293(13){ }u294(25){ }u295(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(80)
3, 5, 7, 9, 10, 37, 51, 62, 63, 74, 75, 180, 181, 184, 185, 189, 190, 192, 193, 196, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278
;; rd  gen 	(1)
0
;; rd  kill	(21)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20

;; Pred edge  16 [35.7%] 
;; Pred edge  19 [39.0%] 
;; Pred edge  20 [78.4%] 
;; Pred edge  32 [100.0%]  (fallthru)
;; Pred edge  18 [10.1%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  14 [3.0%]  (loop_exit)
;; Pred edge  29 [100.0%] 
(code_label 225 224 226 33 82 "" [7 uses])

(note 226 225 231 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 231 226 237 33 init/main.c:283 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 237 231 0 33 init/main.c:283 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 33 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(76)
0, 37, 51, 62, 63, 74, 75, 180, 181, 184, 185, 189, 190, 192, 193, 196, 209, 210, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function parse_early_param (parse_early_param)[0:2056] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


parse_early_param

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,2u} r1={4d,1u} r2={4d,1u} r3={3d} r11={1d,4u} r12={3d} r13={1d,6u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r25={1d,4u} r26={1d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={1d,4u} r134={1d,1u} r143={1d,1u} 
;;    total ref usage 281{252d,29u,0e} in 12{10 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248
0[0,5] 1[5,4] 2[9,4] 3[13,3] 11[16,1] 12[17,3] 13[20,1] 14[21,3] 15[24,2] 16[26,2] 17[28,2] 18[30,2] 19[32,2] 20[34,2] 21[36,2] 22[38,2] 23[40,2] 24[42,3] 25[45,1] 26[46,1] 27[47,2] 28[49,2] 29[51,2] 30[53,2] 31[55,2] 32[57,2] 33[59,2] 34[61,2] 35[63,2] 36[65,2] 37[67,2] 38[69,2] 39[71,2] 40[73,2] 41[75,2] 42[77,2] 43[79,2] 44[81,2] 45[83,2] 46[85,2] 47[87,2] 48[89,2] 49[91,2] 50[93,2] 51[95,2] 52[97,2] 53[99,2] 54[101,2] 55[103,2] 56[105,2] 57[107,2] 58[109,2] 59[111,2] 60[113,2] 61[115,2] 62[117,2] 63[119,2] 64[121,2] 65[123,2] 66[125,2] 67[127,2] 68[129,2] 69[131,2] 70[133,2] 71[135,2] 72[137,2] 73[139,2] 74[141,2] 75[143,2] 76[145,2] 77[147,2] 78[149,2] 79[151,2] 80[153,2] 81[155,2] 82[157,2] 83[159,2] 84[161,2] 85[163,2] 86[165,2] 87[167,2] 88[169,2] 89[171,2] 90[173,2] 91[175,2] 92[177,2] 93[179,2] 94[181,2] 95[183,2] 96[185,2] 97[187,2] 98[189,2] 99[191,2] 100[193,2] 101[195,2] 102[197,2] 103[199,2] 104[201,2] 105[203,2] 106[205,2] 107[207,2] 108[209,2] 109[211,2] 110[213,2] 111[215,2] 112[217,2] 113[219,2] 114[221,2] 115[223,2] 116[225,2] 117[227,2] 118[229,2] 119[231,2] 120[233,2] 121[235,2] 122[237,2] 123[239,2] 124[241,2] 125[243,2] 126[245,2] 127[247,2] 133[249,1] 134[250,1] 143[251,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d4(0){ }d8(1){ }d12(2){ }d15(3){ }d16(11){ }d19(12){ }d20(13){ }d23(14){ }d45(25){ }d46(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
4, 8, 12, 15, 16, 19, 20, 23, 45, 46
;; rd  kill	(26)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 45, 46
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
4, 8, 12, 15, 16, 19, 20, 23, 45, 46

( 0 )->[2]->( 4 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d16(bb 0 insn -1) }u1(13){ d20(bb 0 insn -1) }u2(25){ d45(bb 0 insn -1) }u3(26){ d46(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 133 134
;; live  kill	
;; rd  in  	(10)
4, 8, 12, 15, 16, 19, 20, 23, 45, 46
;; rd  gen 	(3)
44, 249, 250
;; rd  kill	(5)
42, 43, 44, 249, 250
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; rd  out 	(13)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250
;;  UD chains for artificial uses
;;   reg 11 { d16(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d45(bb 0 insn -1) }
;;   reg 26 { d46(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 6
;;      reg 133 { d249(bb 2 insn 5) }
;;   UD chains for insn luid 2 uid 7
;;      reg 134 { d250(bb 2 insn 6) }
;;   UD chains for insn luid 3 uid 8
;;      reg 24 { d44(bb 2 insn 7) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u7(11){ d16(bb 0 insn -1) }u8(13){ d20(bb 0 insn -1) }u9(25){ d45(bb 0 insn -1) }u10(26){ d46(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 143
;; live  kill	 14 [lr]
;; rd  in  	(13)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250
;; rd  gen 	(1)
251
;; rd  kill	(4)
21, 22, 23, 251
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(13)
4, 8, 12, 15, 16, 19, 20, 44, 45, 46, 249, 250, 251
;;  UD chains for artificial uses
;;   reg 11 { d16(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d45(bb 0 insn -1) }
;;   reg 26 { d46(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 15
;;      reg 133 { d249(bb 2 insn 5) }
;;   UD chains for insn luid 3 uid 18
;;      reg 13 { d20(bb 0 insn -1) }
;;      reg 0 { d1(bb 3 insn 15) }
;;      reg 1 { d5(bb 3 insn 16) }
;;      reg 2 { d11(bb 3 insn 17) }
;;   UD chains for insn luid 4 uid 21
;;      reg 133 { d249(bb 2 insn 5) }
;;   UD chains for insn luid 5 uid 22
;;      reg 13 { d20(bb 0 insn -1) }
;;      reg 0 { d0(bb 3 insn 21) }
;;   UD chains for insn luid 7 uid 25
;;      reg 133 { d249(bb 2 insn 5) }
;;      reg 143 { d251(bb 3 insn 24) }

( 3 2 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u21(11){ d16(bb 0 insn -1) }u22(13){ d20(bb 0 insn -1) }u23(25){ d45(bb 0 insn -1) }u24(26){ d46(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(14)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250, 251
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(14)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250, 251
;;  UD chains for artificial uses
;;   reg 11 { d16(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d45(bb 0 insn -1) }
;;   reg 26 { d46(bb 0 insn -1) }

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u25(11){ d16(bb 0 insn -1) }u26(13){ d20(bb 0 insn -1) }u27(14){ d23(bb 0 insn -1) }u28(25){ d45(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(14)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250, 251
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(14)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250, 251
;;  UD chains for artificial uses
;;   reg 11 { d16(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 14 { d23(bb 0 insn -1) }
;;   reg 25 { d45(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 8 to worklist
  Adding insn 25 to worklist
  Adding insn 22 to worklist
  Adding insn 18 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 18:
Processing use of (reg 0 r0) in insn 18:
  Adding insn 15 to worklist
Processing use of (reg 1 r1) in insn 18:
  Adding insn 16 to worklist
Processing use of (reg 2 r2) in insn 18:
  Adding insn 17 to worklist
Processing use of (reg 133) in insn 15:
  Adding insn 5 to worklist
Processing use of (reg 13 sp) in insn 22:
Processing use of (reg 0 r0) in insn 22:
  Adding insn 21 to worklist
Processing use of (reg 133) in insn 21:
Processing use of (reg 133) in insn 25:
Processing use of (reg 143) in insn 25:
  Adding insn 24 to worklist
Processing use of (reg 24 cc) in insn 8:
  Adding insn 7 to worklist
Processing use of (reg 134 [ done ]) in insn 7:
  Adding insn 6 to worklist
Processing use of (reg 133) in insn 6:


parse_early_param

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,2u} r1={4d,1u} r2={4d,1u} r3={3d} r11={1d,4u} r12={3d} r13={1d,6u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r25={1d,4u} r26={1d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={1d,4u} r134={1d,1u} r143={1d,1u} 
;;    total ref usage 281{252d,29u,0e} in 12{10 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248
0[0,5] 1[5,4] 2[9,4] 3[13,3] 11[16,1] 12[17,3] 13[20,1] 14[21,3] 15[24,2] 16[26,2] 17[28,2] 18[30,2] 19[32,2] 20[34,2] 21[36,2] 22[38,2] 23[40,2] 24[42,3] 25[45,1] 26[46,1] 27[47,2] 28[49,2] 29[51,2] 30[53,2] 31[55,2] 32[57,2] 33[59,2] 34[61,2] 35[63,2] 36[65,2] 37[67,2] 38[69,2] 39[71,2] 40[73,2] 41[75,2] 42[77,2] 43[79,2] 44[81,2] 45[83,2] 46[85,2] 47[87,2] 48[89,2] 49[91,2] 50[93,2] 51[95,2] 52[97,2] 53[99,2] 54[101,2] 55[103,2] 56[105,2] 57[107,2] 58[109,2] 59[111,2] 60[113,2] 61[115,2] 62[117,2] 63[119,2] 64[121,2] 65[123,2] 66[125,2] 67[127,2] 68[129,2] 69[131,2] 70[133,2] 71[135,2] 72[137,2] 73[139,2] 74[141,2] 75[143,2] 76[145,2] 77[147,2] 78[149,2] 79[151,2] 80[153,2] 81[155,2] 82[157,2] 83[159,2] 84[161,2] 85[163,2] 86[165,2] 87[167,2] 88[169,2] 89[171,2] 90[173,2] 91[175,2] 92[177,2] 93[179,2] 94[181,2] 95[183,2] 96[185,2] 97[187,2] 98[189,2] 99[191,2] 100[193,2] 101[195,2] 102[197,2] 103[199,2] 104[201,2] 105[203,2] 106[205,2] 107[207,2] 108[209,2] 109[211,2] 110[213,2] 111[215,2] 112[217,2] 113[219,2] 114[221,2] 115[223,2] 116[225,2] 117[227,2] 118[229,2] 119[231,2] 120[233,2] 121[235,2] 122[237,2] 123[239,2] 124[241,2] 125[243,2] 126[245,2] 127[247,2] 133[249,1] 134[250,1] 143[251,1] 
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 134
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 133 134
;; live  kill	
;; rd  in  	(10)
4, 8, 12, 15, 16, 19, 20, 23, 45, 46
;; rd  gen 	(3)
44, 249, 250
;; rd  kill	(5)
42, 43, 44, 249, 250

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 init/main.c:419 (set (reg/f:SI 133)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 6 5 7 2 init/main.c:419 (set (reg:SI 134 [ done ])
        (mem/c/i:SI (plus:SI (reg/f:SI 133)
                (const_int 20 [0x14])) [0 done+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                    (const_int 20 [0x14]))) [0 done+0 S4 A32])
        (nil)))

(insn 7 6 8 2 init/main.c:419 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ done ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ done ])
        (nil)))

(jump_insn 8 7 9 2 init/main.c:419 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 31)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; rd  out 	(13)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250


;; Succ edge  4 [100.0%] 
;; Succ edge  3 [0.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u7(11){ }u8(13){ }u9(25){ }u10(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 143
;; live  kill	 14 [lr]
;; rd  in  	(13)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250
;; rd  gen 	(1)
251
;; rd  kill	(4)
21, 22, 23, 251

;; Pred edge  2 [0.0%]  (fallthru)
(note 9 8 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 9 16 3 init/main.c:423 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 133)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 24 [0x18])))
        (nil)))

(insn 16 15 17 3 init/main.c:423 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 1048 [0x418])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 1048 [0x418])))
        (nil)))

(insn 17 16 18 3 init/main.c:423 (set (reg:SI 2 r2)
        (const_int 1024 [0x400])) 167 {*arm_movsi_insn} (nil))

(call_insn 18 17 21 3 init/main.c:423 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlcpy") [flags 0x41] <function_decl 0x10bb1380 strlcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 21 18 22 3 init/main.c:424 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 133)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 24 [0x18])))
        (nil)))

(call_insn 22 21 24 3 init/main.c:424 (parallel [
            (call (mem:SI (symbol_ref:SI ("parse_early_options") [flags 0x3] <function_decl 0x10a57480 parse_early_options>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 24 22 25 3 init/main.c:425 (set (reg:SI 143)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 25 24 31 3 init/main.c:425 (set (mem/c/i:SI (plus:SI (reg/f:SI 133)
                (const_int 20 [0x14])) [0 done+0 S4 A32])
        (reg:SI 143)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 143)
        (expr_list:REG_DEAD (reg/f:SI 133)
            (expr_list:REG_EQUAL (const_int 1 [0x1])
                (nil)))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(13)
4, 8, 12, 15, 16, 19, 20, 44, 45, 46, 249, 250, 251


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u21(11){ }u22(13){ }u23(25){ }u24(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(14)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250, 251
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 31 25 34 4 99 "" [1 uses])

(note 34 31 0 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(14)
4, 8, 12, 15, 16, 19, 20, 23, 44, 45, 46, 249, 250, 251


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function start_kernel (start_kernel)[0:2061] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 28 (  1.9)


start_kernel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={95d,26u} r1={86d,13u} r2={77d,4u} r3={74d,1u} r11={1d,14u} r12={73d} r13={1d,88u,1d} r14={73d,1u} r15={72d} r16={72d} r17={72d} r18={72d} r19={72d} r20={72d} r21={72d} r22={72d} r23={72d} r24={84d,7u} r25={1d,16u,1d} r26={1d,13u} r27={72d} r28={72d} r29={72d} r30={72d} r31={72d} r32={72d} r33={72d} r34={72d} r35={72d} r36={72d} r37={72d} r38={72d} r39={72d} r40={72d} r41={72d} r42={72d} r43={72d} r44={72d} r45={72d} r46={72d} r47={72d} r48={72d} r49={72d} r50={72d} r51={72d} r52={72d} r53={72d} r54={72d} r55={72d} r56={72d} r57={72d} r58={72d} r59={72d} r60={72d} r61={72d} r62={72d} r63={72d} r64={72d} r65={72d} r66={72d} r67={72d} r68={72d} r69={72d} r70={72d} r71={72d} r72={72d} r73={72d} r74={72d} r75={72d} r76={72d} r77={72d} r78={72d} r79={72d} r80={72d} r81={72d} r82={72d} r83={72d} r84={72d} r85={72d} r86={72d} r87={72d} r88={72d} r89={72d} r90={72d} r91={72d} r92={72d} r93={72d} r94={72d} r95={72d} r96={72d} r97={72d} r98={72d} r99={72d} r100={72d} r101={72d} r102={72d} r103={72d} r104={72d} r105={72d} r106={72d} r107={72d} r108={72d} r109={72d} r110={72d} r111={72d} r112={72d} r113={72d} r114={72d} r115={72d} r116={72d} r117={72d} r118={72d} r119={72d} r120={72d} r121={72d} r122={72d} r123={72d} r124={72d} r125={72d} r126={72d} r127={72d} r136={1d,1u} r138={1d,1u} r139={1d,4u} r141={1d,1u} r142={1d,1u} r143={1d,2u} r144={1d,2u} r146={1d,2u} r147={1d,2u} r148={1d,2u} r149={1d,1u} r150={1d,5u} r152={1d,3u} r153={1d,1u} r156={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,5u} r163={1d,1u} r164={1d,1u} r177={1d,2u} r178={1d,1u,1d} r179={1d,1u} r182={1d,1u} r183={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r189={1d,1u} r191={1d,1u} r192={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,2u} r198={1d,2u} r199={1d,1u} r200={1d,2u} r201={1d,1u} r202={1d,1u} r203={1d,1u,1d} r204={1d,2u} r205={1d,1u} r209={1d,1u} r210={1d,2u} 
;;    total ref usage 8785{8530d,251u,4e} in 182{110 regular + 72 call} insns.
;; Reaching defs:

  sparse invalidated 	0, 1, 2, 3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127
  dense invalidated 	
0[0,95] 1[95,86] 2[181,77] 3[258,74] 11[332,1] 12[333,73] 13[406,1] 14[407,73] 15[480,72] 16[552,72] 17[624,72] 18[696,72] 19[768,72] 20[840,72] 21[912,72] 22[984,72] 23[1056,72] 24[1128,84] 25[1212,1] 26[1213,1] 27[1214,72] 28[1286,72] 29[1358,72] 30[1430,72] 31[1502,72] 32[1574,72] 33[1646,72] 34[1718,72] 35[1790,72] 36[1862,72] 37[1934,72] 38[2006,72] 39[2078,72] 40[2150,72] 41[2222,72] 42[2294,72] 43[2366,72] 44[2438,72] 45[2510,72] 46[2582,72] 47[2654,72] 48[2726,72] 49[2798,72] 50[2870,72] 51[2942,72] 52[3014,72] 53[3086,72] 54[3158,72] 55[3230,72] 56[3302,72] 57[3374,72] 58[3446,72] 59[3518,72] 60[3590,72] 61[3662,72] 62[3734,72] 63[3806,72] 64[3878,72] 65[3950,72] 66[4022,72] 67[4094,72] 68[4166,72] 69[4238,72] 70[4310,72] 71[4382,72] 72[4454,72] 73[4526,72] 74[4598,72] 75[4670,72] 76[4742,72] 77[4814,72] 78[4886,72] 79[4958,72] 80[5030,72] 81[5102,72] 82[5174,72] 83[5246,72] 84[5318,72] 85[5390,72] 86[5462,72] 87[5534,72] 88[5606,72] 89[5678,72] 90[5750,72] 91[5822,72] 92[5894,72] 93[5966,72] 94[6038,72] 95[6110,72] 96[6182,72] 97[6254,72] 98[6326,72] 99[6398,72] 100[6470,72] 101[6542,72] 102[6614,72] 103[6686,72] 104[6758,72] 105[6830,72] 106[6902,72] 107[6974,72] 108[7046,72] 109[7118,72] 110[7190,72] 111[7262,72] 112[7334,72] 113[7406,72] 114[7478,72] 115[7550,72] 116[7622,72] 117[7694,72] 118[7766,72] 119[7838,72] 120[7910,72] 121[7982,72] 122[8054,72] 123[8126,72] 124[8198,72] 125[8270,72] 126[8342,72] 127[8414,72] 136[8486,1] 138[8487,1] 139[8488,1] 141[8489,1] 142[8490,1] 143[8491,1] 144[8492,1] 146[8493,1] 147[8494,1] 148[8495,1] 149[8496,1] 150[8497,1] 152[8498,1] 153[8499,1] 156[8500,1] 160[8501,1] 161[8502,1] 162[8503,1] 163[8504,1] 164[8505,1] 177[8506,1] 178[8507,1] 179[8508,1] 182[8509,1] 183[8510,1] 185[8511,1] 186[8512,1] 187[8513,1] 189[8514,1] 191[8515,1] 192[8516,1] 194[8517,1] 195[8518,1] 196[8519,1] 198[8520,1] 199[8521,1] 200[8522,1] 201[8523,1] 202[8524,1] 203[8525,1] 204[8526,1] 205[8527,1] 209[8528,1] 210[8529,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d94(0){ }d180(1){ }d257(2){ }d331(3){ }d332(11){ }d405(12){ }d406(13){ }d479(14){ }d1212(25){ }d1213(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
94, 180, 257, 331, 332, 405, 406, 479, 1212, 1213
;; rd  kill	(4)
332, 406, 1212, 1213
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
94, 180, 257, 331, 332, 405, 406, 479, 1212, 1213

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d332(bb 0 insn -1) }u1(13){ d406(bb 0 insn -1) }u2(25){ d1212(bb 0 insn -1) }u3(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 138 139 142 148 149 150 152 153 156 160 161 162 163 164 177 178 179 182 183 185 186 187
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 136 138 139 142 148 149 150 152 153 156 160 161 162 163 164 177 178 179 182 183 185 186 187
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(10)
94, 180, 257, 331, 332, 405, 406, 479, 1212, 1213
;; rd  gen 	(24)
1175, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513
;; rd  kill	(23)
8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(33)
94, 180, 257, 331, 332, 405, 406, 1175, 1212, 1213, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 5
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 6
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 11
;;      reg 149 { d8496(bb 2 insn 8) }
;;      reg 150 { d8497(bb 2 insn 9) }
;;   UD chains for insn luid 6 uid 12
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 7 uid 14
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 8 uid 15
;;      reg 153 { d8499(bb 2 insn 14) }
;;   eq_note reg 13 { }
;;   UD chains for insn luid 9 uid 16
;;      reg 152 { d8498(bb 2 insn 15) }
;;   UD chains for insn luid 10 uid 17
;;      reg 139 { d8488(bb 2 insn 16) }
;;   UD chains for insn luid 11 uid 18
;;      reg 150 { d8497(bb 2 insn 9) }
;;   UD chains for insn luid 12 uid 19
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d90(bb 2 insn 17) }
;;      reg 1 { d98(bb 2 insn 18) }
;;   UD chains for insn luid 13 uid 20
;;      reg 139 { d8488(bb 2 insn 16) }
;;   UD chains for insn luid 14 uid 21
;;      reg 150 { d8497(bb 2 insn 9) }
;;   UD chains for insn luid 15 uid 22
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d88(bb 2 insn 20) }
;;      reg 1 { d97(bb 2 insn 21) }
;;   UD chains for insn luid 16 uid 23
;;      reg 139 { d8488(bb 2 insn 16) }
;;   UD chains for insn luid 17 uid 24
;;      reg 150 { d8497(bb 2 insn 9) }
;;   UD chains for insn luid 18 uid 25
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d86(bb 2 insn 23) }
;;      reg 1 { d96(bb 2 insn 24) }
;;   UD chains for insn luid 19 uid 26
;;      reg 139 { d8488(bb 2 insn 16) }
;;   UD chains for insn luid 20 uid 27
;;      reg 150 { d8497(bb 2 insn 9) }
;;   UD chains for insn luid 21 uid 28
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d84(bb 2 insn 26) }
;;      reg 1 { d95(bb 2 insn 27) }
;;   UD chains for insn luid 22 uid 29
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 25 uid 34
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d6(bb 2 insn 32) }
;;      reg 1 { d101(bb 2 insn 33) }
;;   UD chains for insn luid 26 uid 35
;;      reg 25 { d1212(bb 0 insn -1) }
;;   UD chains for insn luid 27 uid 36
;;      reg 156 { d8500(bb 2 insn 35) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 28 uid 37
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d80(bb 2 insn 36) }
;;   UD chains for insn luid 29 uid 38
;;      reg 25 { d1212(bb 0 insn -1) }
;;   UD chains for insn luid 31 uid 43
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d5(bb 2 insn 42) }
;;   UD chains for insn luid 32 uid 44
;;      reg 0 { d78(bb 2 insn 43) }
;;   UD chains for insn luid 33 uid 46
;;      reg 160 { d8501(bb 2 insn 44) }
;;   UD chains for insn luid 34 uid 47
;;      reg 161 { d8502(bb 2 insn 46) }
;;   UD chains for insn luid 37 uid 50
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d77(bb 2 insn 47) }
;;      reg 1 { d168(bb 2 insn 48) }
;;      reg 2 { d245(bb 2 insn 49) }
;;   UD chains for insn luid 38 uid 51
;;      reg 0 { d76(bb 2 insn 50) }
;;   UD chains for insn luid 40 uid 53
;;      reg 136 { d8486(bb 2 insn 51) }
;;      reg 162 { d8503(bb 2 insn 52) }
;;   UD chains for insn luid 41 uid 54
;;      reg 148 { d8495(bb 2 insn 38) }
;;   UD chains for insn luid 42 uid 55
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d75(bb 2 insn 54) }
;;   UD chains for insn luid 43 uid 56
;;      reg 0 { d74(bb 2 insn 55) }
;;   UD chains for insn luid 44 uid 58
;;      reg 163 { d8504(bb 2 insn 56) }
;;   UD chains for insn luid 45 uid 59
;;      reg 164 { d8505(bb 2 insn 58) }
;;   UD chains for insn luid 48 uid 62
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d73(bb 2 insn 59) }
;;      reg 1 { d165(bb 2 insn 60) }
;;      reg 2 { d242(bb 2 insn 61) }
;;   UD chains for insn luid 49 uid 63
;;      reg 0 { d72(bb 2 insn 62) }
;;   UD chains for insn luid 50 uid 65
;;      reg 138 { d8487(bb 2 insn 63) }
;;      reg 162 { d8503(bb 2 insn 52) }
;;   UD chains for insn luid 51 uid 70
;;      reg 162 { d8503(bb 2 insn 52) }
;;   UD chains for insn luid 53 uid 72
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d9(bb 2 insn 70) }
;;      reg 1 { d100(bb 2 insn 71) }
;;   UD chains for insn luid 54 uid 74
;;      reg 162 { d8503(bb 2 insn 52) }
;;   UD chains for insn luid 55 uid 75
;;      reg 148 { d8495(bb 2 insn 38) }
;;   UD chains for insn luid 56 uid 76
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d8(bb 2 insn 74) }
;;      reg 1 { d162(bb 2 insn 75) }
;;   UD chains for insn luid 57 uid 77
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 58 uid 78
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 59 uid 79
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 61 uid 81
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d66(bb 2 insn 80) }
;;   UD chains for insn luid 62 uid 82
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 65 uid 89
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d4(bb 2 insn 87) }
;;      reg 1 { d99(bb 2 insn 88) }
;;   UD chains for insn luid 66 uid 90
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 69 uid 96
;;      reg 177 { d8506(bb 2 insn 93) }
;;      reg 179 { d8508(bb 2 insn 94) }
;;   UD chains for insn luid 70 uid 97
;;      reg 178 { d8507(bb 2 insn 96) }
;;   eq_note reg 178 { }
;;   UD chains for insn luid 72 uid 99
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 183 { d8510(bb 2 insn 98) }
;;   UD chains for insn luid 74 uid 101
;;      reg 162 { d8503(bb 2 insn 52) }
;;   UD chains for insn luid 75 uid 102
;;      reg 177 { d8506(bb 2 insn 93) }
;;   UD chains for insn luid 76 uid 103
;;      reg 182 { d8509(bb 2 insn 97) }
;;   UD chains for insn luid 77 uid 104
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d3(bb 2 insn 100) }
;;      reg 1 { d104(bb 2 insn 101) }
;;      reg 2 { d181(bb 2 insn 102) }
;;      reg 3 { d307(bb 2 insn 103) }
;;   UD chains for insn luid 79 uid 106
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d60(bb 2 insn 105) }
;;   UD chains for insn luid 80 uid 107
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 81 uid 108
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 82 uid 109
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 83 uid 110
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 84 uid 111
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 85 uid 112
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 86 uid 113
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 87 uid 114
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 88 uid 115
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 89 uid 119
;;      reg 152 { d8498(bb 2 insn 15) }
;;   UD chains for insn luid 90 uid 120
;;      reg 185 { d8511(bb 2 insn 119) }
;;   UD chains for insn luid 91 uid 121
;;      reg 152 { d8498(bb 2 insn 15) }
;;      reg 186 { d8512(bb 2 insn 120) }
;;   UD chains for insn luid 94 uid 124
;;      reg 142 { d8490(bb 2 insn 123) }
;;   UD chains for insn luid 95 uid 125
;;      reg 187 { d8513(bb 2 insn 124) }
;;   UD chains for insn luid 96 uid 126
;;      reg 24 { d1175(bb 2 insn 125) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u119(11){ d332(bb 0 insn -1) }u120(13){ d406(bb 0 insn -1) }u121(25){ d1212(bb 0 insn -1) }u122(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(33)
94, 180, 257, 331, 332, 405, 406, 1175, 1212, 1213, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513
;; rd  gen 	(1)
49
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(32)
49, 180, 257, 331, 332, 405, 406, 1212, 1213, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 130
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d2(bb 3 insn 129) }

( 2 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u125(11){ d332(bb 0 insn -1) }u126(13){ d406(bb 0 insn -1) }u127(25){ d1212(bb 0 insn -1) }u128(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 141 189
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 24 [cc] 141 189
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(34)
49, 94, 180, 257, 331, 332, 405, 406, 1175, 1212, 1213, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513
;; rd  gen 	(3)
1157, 8489, 8514
;; rd  kill	(2)
8489, 8514
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(36)
49, 94, 180, 257, 331, 332, 405, 406, 1157, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 134
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 135
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 136
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 137
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 138
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 139
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 6 uid 140
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 7 uid 141
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 8 uid 142
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 9 uid 143
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 10 uid 144
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 11 uid 145
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 12 uid 146
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 13 uid 147
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 15 uid 149
;;      reg 141 { d8489(bb 4 insn 148) }
;;   UD chains for insn luid 16 uid 150
;;      reg 189 { d8514(bb 4 insn 149) }
;;   UD chains for insn luid 17 uid 151
;;      reg 24 { d1157(bb 4 insn 150) }

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u146(11){ d332(bb 0 insn -1) }u147(13){ d406(bb 0 insn -1) }u148(25){ d1212(bb 0 insn -1) }u149(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; rd  in  	(36)
49, 94, 180, 257, 331, 332, 405, 406, 1157, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514
;; rd  gen 	(1)
34
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(35)
34, 180, 257, 331, 332, 405, 406, 1157, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 155
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d1(bb 5 insn 154) }

( 4 5 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u152(11){ d332(bb 0 insn -1) }u153(13){ d406(bb 0 insn -1) }u154(25){ d1212(bb 0 insn -1) }u155(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 147 191 192 194 195 196
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 147 191 192 194 195 196
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(37)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1157, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514
;; rd  gen 	(7)
1152, 8494, 8515, 8516, 8517, 8518, 8519
;; rd  kill	(6)
8494, 8515, 8516, 8517, 8518, 8519
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; rd  out 	(43)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1152, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 161
;;      reg 191 { d8515(bb 6 insn 158) }
;;      reg 192 { d8516(bb 6 insn 159) }
;;   UD chains for insn luid 6 uid 165
;;      reg 194 { d8517(bb 6 insn 163) }
;;      reg 195 { d8518(bb 6 insn 164) }
;;   UD chains for insn luid 7 uid 166
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 8 uid 167
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 10 uid 169
;;      reg 196 { d8519(bb 6 insn 168) }
;;   UD chains for insn luid 11 uid 170
;;      reg 147 { d8494(bb 6 insn 169) }
;;   UD chains for insn luid 12 uid 171
;;      reg 24 { d1152(bb 6 insn 170) }

( 6 )->[7]->( )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u165(11){ d332(bb 0 insn -1) }u166(13){ d406(bb 0 insn -1) }u167(25){ d1212(bb 0 insn -1) }u168(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(43)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1152, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(43)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1152, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 174
;;      reg 147 { d8494(bb 6 insn 169) }
;;   UD chains for insn luid 1 uid 175
;;      reg 196 { d8519(bb 6 insn 168) }
;;   UD chains for insn luid 2 uid 176
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d31(bb 7 insn 174) }
;;      reg 1 { d103(bb 7 insn 175) }

( 6 )->[8]->( 9 12 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u174(11){ d332(bb 0 insn -1) }u175(13){ d406(bb 0 insn -1) }u176(25){ d1212(bb 0 insn -1) }u177(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 146 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 146 198
;; live  kill	
;; rd  in  	(43)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1152, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519
;; rd  gen 	(3)
1150, 8493, 8520
;; rd  kill	(2)
8493, 8520
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198
;; rd  out 	(45)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1150, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 181
;;      reg 198 { d8520(bb 8 insn 180) }
;;   UD chains for insn luid 2 uid 182
;;      reg 146 { d8493(bb 8 insn 181) }
;;   UD chains for insn luid 3 uid 183
;;      reg 24 { d1150(bb 8 insn 182) }

( 8 )->[9]->( 10 12 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u181(11){ d332(bb 0 insn -1) }u182(13){ d406(bb 0 insn -1) }u183(25){ d1212(bb 0 insn -1) }u184(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 199 200
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198
;; live  gen 	 24 [cc] 199 200
;; live  kill	
;; rd  in  	(45)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1150, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520
;; rd  gen 	(3)
1149, 8521, 8522
;; rd  kill	(2)
8521, 8522
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198 200
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198 200
;; rd  out 	(47)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1149, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 186
;;      reg 199 { d8521(bb 9 insn 185) }
;;   UD chains for insn luid 2 uid 187
;;      reg 200 { d8522(bb 9 insn 186) }
;;   UD chains for insn luid 3 uid 188
;;      reg 24 { d1149(bb 9 insn 187) }

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u188(11){ d332(bb 0 insn -1) }u189(13){ d406(bb 0 insn -1) }u190(25){ d1212(bb 0 insn -1) }u191(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198 200
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 24 [cc] 144 201 202 203 204 205
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198 200
;; live  gen 	 24 [cc] 144 201 202 203 204 205
;; live  kill	
;; rd  in  	(47)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1149, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522
;; rd  gen 	(7)
1128, 8492, 8523, 8524, 8525, 8526, 8527
;; rd  kill	(6)
8492, 8523, 8524, 8525, 8526, 8527
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; rd  out 	(53)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1128, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 190
;;      reg 146 { d8493(bb 8 insn 181) }
;;   UD chains for insn luid 1 uid 191
;;      reg 201 { d8523(bb 10 insn 190) }
;;   UD chains for insn luid 2 uid 192
;;      reg 202 { d8524(bb 10 insn 191) }
;;   UD chains for insn luid 3 uid 193
;;      reg 203 { d8525(bb 10 insn 192) }
;;   eq_note reg 203 { }
;;   UD chains for insn luid 5 uid 196
;;      reg 205 { d8527(bb 10 insn 195) }
;;   UD chains for insn luid 6 uid 197
;;      reg 144 { d8492(bb 10 insn 196) }
;;      reg 204 { d8526(bb 10 insn 193) }
;;   UD chains for insn luid 7 uid 198
;;      reg 24 { d1128(bb 10 insn 197) }

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u201(11){ d332(bb 0 insn -1) }u202(13){ d406(bb 0 insn -1) }u203(25){ d1212(bb 0 insn -1) }u204(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; rd  in  	(53)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1128, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527
;; rd  gen 	(1)
29
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(51)
29, 180, 257, 331, 332, 405, 406, 1128, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 202
;;      reg 204 { d8526(bb 10 insn 193) }
;;   UD chains for insn luid 2 uid 203
;;      reg 144 { d8492(bb 10 insn 196) }
;;   UD chains for insn luid 3 uid 204
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d0(bb 11 insn 201) }
;;      reg 1 { d102(bb 11 insn 202) }
;;      reg 2 { d201(bb 11 insn 203) }
;;   UD chains for insn luid 4 uid 207
;;      reg 198 { d8520(bb 8 insn 180) }
;;      reg 200 { d8522(bb 9 insn 186) }

( 8 9 10 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u213(11){ d332(bb 0 insn -1) }u214(13){ d406(bb 0 insn -1) }u215(25){ d1212(bb 0 insn -1) }u216(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 143 209
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 143 209
;; live  kill	 14 [lr]
;; rd  in  	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1128, 1149, 1150, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527
;; rd  gen 	(3)
1146, 8491, 8528
;; rd  kill	(2)
8491, 8528
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; rd  out 	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 210
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 212
;;      reg 209 { d8528(bb 12 insn 211) }
;;   UD chains for insn luid 3 uid 213
;;      reg 143 { d8491(bb 12 insn 212) }
;;   UD chains for insn luid 4 uid 214
;;      reg 24 { d1146(bb 12 insn 213) }

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u221(11){ d332(bb 0 insn -1) }u222(13){ d406(bb 0 insn -1) }u223(25){ d1212(bb 0 insn -1) }u224(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; live  gen 	
;; live  kill	 14 [lr]
;; rd  in  	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 216
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 143 { d8491(bb 12 insn 212) }

( 12 13 )->[14]->( 1 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u227(11){ d332(bb 0 insn -1) }u228(13){ d406(bb 0 insn -1) }u229(25){ d1212(bb 0 insn -1) }u230(26){ d1213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 210
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 210
;; live  kill	 14 [lr]
;; rd  in  	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528
;; rd  gen 	(1)
8529
;; rd  kill	(1)
8529
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(57)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528, 8529
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 25 { d1212(bb 0 insn -1) }
;;   reg 26 { d1213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 219
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 220
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 221
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 222
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 223
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 224
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 7 uid 226
;;      reg 210 { d8529(bb 14 insn 225) }
;;   UD chains for insn luid 8 uid 227
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d20(bb 14 insn 226) }
;;   UD chains for insn luid 9 uid 228
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 10 uid 229
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 11 uid 231
;;      reg 210 { d8529(bb 14 insn 225) }
;;   UD chains for insn luid 12 uid 232
;;      reg 13 { d406(bb 0 insn -1) }
;;      reg 0 { d7(bb 14 insn 231) }
;;   UD chains for insn luid 13 uid 233
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 14 uid 234
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 15 uid 235
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 16 uid 236
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 17 uid 237
;;      reg 13 { d406(bb 0 insn -1) }
;;   UD chains for insn luid 18 uid 238
;;      reg 13 { d406(bb 0 insn -1) }

( 14 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u251(11){ d332(bb 0 insn -1) }u252(13){ d406(bb 0 insn -1) }u253(14){ }u254(25){ d1212(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(57)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528, 8529
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(57)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528, 8529
;;  UD chains for artificial uses
;;   reg 11 { d332(bb 0 insn -1) }
;;   reg 13 { d406(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d1212(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 126 to worklist
  Adding insn 123 to worklist
  Adding insn 122 to worklist
  Adding insn 121 to worklist
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 113 to worklist
  Adding insn 112 to worklist
  Adding insn 111 to worklist
  Adding insn 110 to worklist
  Adding insn 109 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 106 to worklist
  Adding insn 104 to worklist
  Adding insn 99 to worklist
  Adding insn 90 to worklist
  Adding insn 89 to worklist
  Adding insn 82 to worklist
  Adding insn 81 to worklist
  Adding insn 79 to worklist
  Adding insn 78 to worklist
  Adding insn 77 to worklist
  Adding insn 76 to worklist
  Adding insn 72 to worklist
  Adding insn 65 to worklist
  Adding insn 62 to worklist
  Adding insn 53 to worklist
  Adding insn 50 to worklist
  Adding insn 37 to worklist
  Adding insn 34 to worklist
  Adding insn 29 to worklist
  Adding insn 28 to worklist
  Adding insn 25 to worklist
  Adding insn 22 to worklist
  Adding insn 19 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 5 to worklist
  Adding insn 131 to worklist
  Adding insn 130 to worklist
  Adding insn 151 to worklist
  Adding insn 148 to worklist
  Adding insn 147 to worklist
  Adding insn 146 to worklist
  Adding insn 145 to worklist
  Adding insn 144 to worklist
  Adding insn 143 to worklist
  Adding insn 142 to worklist
  Adding insn 141 to worklist
  Adding insn 140 to worklist
  Adding insn 139 to worklist
  Adding insn 138 to worklist
  Adding insn 137 to worklist
  Adding insn 136 to worklist
  Adding insn 135 to worklist
  Adding insn 134 to worklist
  Adding insn 155 to worklist
  Adding insn 171 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 165 to worklist
  Adding insn 162 to worklist
  Adding insn 161 to worklist
  Adding insn 176 to worklist
  Adding insn 183 to worklist
  Adding insn 188 to worklist
  Adding insn 198 to worklist
  Adding insn 207 to worklist
  Adding insn 204 to worklist
  Adding insn 214 to worklist
  Adding insn 210 to worklist
  Adding insn 216 to worklist
  Adding insn 238 to worklist
  Adding insn 237 to worklist
  Adding insn 236 to worklist
  Adding insn 235 to worklist
  Adding insn 234 to worklist
  Adding insn 233 to worklist
  Adding insn 232 to worklist
  Adding insn 229 to worklist
  Adding insn 228 to worklist
  Adding insn 227 to worklist
  Adding insn 224 to worklist
  Adding insn 223 to worklist
  Adding insn 222 to worklist
  Adding insn 221 to worklist
  Adding insn 220 to worklist
  Adding insn 219 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 219:
Processing use of (reg 13 sp) in insn 220:
Processing use of (reg 13 sp) in insn 221:
Processing use of (reg 13 sp) in insn 222:
Processing use of (reg 13 sp) in insn 223:
Processing use of (reg 13 sp) in insn 224:
Processing use of (reg 13 sp) in insn 227:
Processing use of (reg 0 r0) in insn 227:
  Adding insn 226 to worklist
Processing use of (reg 210) in insn 226:
  Adding insn 225 to worklist
Processing use of (reg 13 sp) in insn 228:
Processing use of (reg 13 sp) in insn 229:
Processing use of (reg 13 sp) in insn 232:
Processing use of (reg 0 r0) in insn 232:
  Adding insn 231 to worklist
Processing use of (reg 210) in insn 231:
Processing use of (reg 13 sp) in insn 233:
Processing use of (reg 13 sp) in insn 234:
Processing use of (reg 13 sp) in insn 235:
Processing use of (reg 13 sp) in insn 236:
Processing use of (reg 13 sp) in insn 237:
Processing use of (reg 13 sp) in insn 238:
Processing use of (reg 13 sp) in insn 216:
Processing use of (reg 143 [ late_time_init.433 ]) in insn 216:
  Adding insn 212 to worklist
Processing use of (reg 209) in insn 212:
  Adding insn 211 to worklist
Processing use of (reg 13 sp) in insn 210:
Processing use of (reg 24 cc) in insn 214:
  Adding insn 213 to worklist
Processing use of (reg 143 [ late_time_init.433 ]) in insn 213:
Processing use of (reg 13 sp) in insn 204:
Processing use of (reg 0 r0) in insn 204:
  Adding insn 201 to worklist
Processing use of (reg 1 r1) in insn 204:
  Adding insn 202 to worklist
Processing use of (reg 2 r2) in insn 204:
  Adding insn 203 to worklist
Processing use of (reg 144 [ min_low_pfn.432 ]) in insn 203:
  Adding insn 196 to worklist
Processing use of (reg 205) in insn 196:
  Adding insn 195 to worklist
Processing use of (reg 204) in insn 202:
  Adding insn 193 to worklist
Processing use of (reg 203) in insn 193:
  Adding insn 192 to worklist
Processing use of (reg 202) in insn 192:
  Adding insn 191 to worklist
Processing use of (reg 201) in insn 191:
  Adding insn 190 to worklist
Processing use of (reg 146 [ initrd_start.430 ]) in insn 190:
  Adding insn 181 to worklist
Processing use of (reg 198) in insn 181:
  Adding insn 180 to worklist
Processing use of (reg 198) in insn 207:
Processing use of (reg 200 [ initrd_below_start_ok ]) in insn 207:
  Adding insn 186 to worklist
Processing use of (reg 199) in insn 186:
  Adding insn 185 to worklist
Processing use of (reg 24 cc) in insn 198:
  Adding insn 197 to worklist
Processing use of (reg 144 [ min_low_pfn.432 ]) in insn 197:
Processing use of (reg 204) in insn 197:
Processing use of (reg 24 cc) in insn 188:
  Adding insn 187 to worklist
Processing use of (reg 200 [ initrd_below_start_ok ]) in insn 187:
Processing use of (reg 24 cc) in insn 183:
  Adding insn 182 to worklist
Processing use of (reg 146 [ initrd_start.430 ]) in insn 182:
Processing use of (reg 13 sp) in insn 176:
Processing use of (reg 0 r0) in insn 176:
  Adding insn 174 to worklist
Processing use of (reg 1 r1) in insn 176:
  Adding insn 175 to worklist
Processing use of (reg 196) in insn 175:
  Adding insn 168 to worklist
Processing use of (reg 147 [ panic_later.428 ]) in insn 174:
  Adding insn 169 to worklist
Processing use of (reg 196) in insn 169:
Processing use of (reg 191) in insn 161:
  Adding insn 158 to worklist
Processing use of (subreg (reg 192) 0) in insn 161:
  Adding insn 159 to worklist
Processing use of (reg 194) in insn 165:
  Adding insn 163 to worklist
Processing use of (reg 195) in insn 165:
  Adding insn 164 to worklist
Processing use of (reg 13 sp) in insn 166:
Processing use of (reg 13 sp) in insn 167:
Processing use of (reg 24 cc) in insn 171:
  Adding insn 170 to worklist
Processing use of (reg 147 [ panic_later.428 ]) in insn 170:
Processing use of (reg 13 sp) in insn 155:
Processing use of (reg 0 r0) in insn 155:
  Adding insn 154 to worklist
Processing use of (reg 13 sp) in insn 134:
Processing use of (reg 13 sp) in insn 135:
Processing use of (reg 13 sp) in insn 136:
Processing use of (reg 13 sp) in insn 137:
Processing use of (reg 13 sp) in insn 138:
Processing use of (reg 13 sp) in insn 139:
Processing use of (reg 13 sp) in insn 140:
Processing use of (reg 13 sp) in insn 141:
Processing use of (reg 13 sp) in insn 142:
Processing use of (reg 13 sp) in insn 143:
Processing use of (reg 13 sp) in insn 144:
Processing use of (reg 13 sp) in insn 145:
Processing use of (reg 13 sp) in insn 146:
Processing use of (reg 13 sp) in insn 147:
Processing use of (reg 24 cc) in insn 151:
  Adding insn 150 to worklist
Processing use of (reg 189) in insn 150:
  Adding insn 149 to worklist
Processing use of (reg 141 [ _flags ]) in insn 149:
Processing use of (reg 13 sp) in insn 130:
Processing use of (reg 0 r0) in insn 130:
  Adding insn 129 to worklist
Processing use of (reg 13 sp) in insn 5:
Processing use of (reg 13 sp) in insn 6:
Processing use of (reg 149) in insn 11:
  Adding insn 8 to worklist
Processing use of (subreg (reg 150) 0) in insn 11:
  Adding insn 9 to worklist
Processing use of (reg 13 sp) in insn 12:
Processing use of (reg 13 sp) in insn 19:
Processing use of (reg 0 r0) in insn 19:
  Adding insn 17 to worklist
Processing use of (reg 1 r1) in insn 19:
  Adding insn 18 to worklist
Processing use of (reg 150) in insn 18:
Processing use of (reg 139 [ D.38262 ]) in insn 17:
  Adding insn 16 to worklist
Processing use of (reg 152) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 153) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 13 sp) in insn 14:
Processing use of (reg 13 sp) in insn 22:
Processing use of (reg 0 r0) in insn 22:
  Adding insn 20 to worklist
Processing use of (reg 1 r1) in insn 22:
  Adding insn 21 to worklist
Processing use of (reg 150) in insn 21:
Processing use of (reg 139 [ D.38262 ]) in insn 20:
Processing use of (reg 13 sp) in insn 25:
Processing use of (reg 0 r0) in insn 25:
  Adding insn 23 to worklist
Processing use of (reg 1 r1) in insn 25:
  Adding insn 24 to worklist
Processing use of (reg 150) in insn 24:
Processing use of (reg 139 [ D.38262 ]) in insn 23:
Processing use of (reg 13 sp) in insn 28:
Processing use of (reg 0 r0) in insn 28:
  Adding insn 26 to worklist
Processing use of (reg 1 r1) in insn 28:
  Adding insn 27 to worklist
Processing use of (reg 150) in insn 27:
Processing use of (reg 139 [ D.38262 ]) in insn 26:
Processing use of (reg 13 sp) in insn 29:
Processing use of (reg 13 sp) in insn 34:
Processing use of (reg 0 r0) in insn 34:
  Adding insn 32 to worklist
Processing use of (reg 1 r1) in insn 34:
  Adding insn 33 to worklist
Processing use of (reg 13 sp) in insn 37:
Processing use of (reg 0 r0) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 156) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 25 sfp) in insn 35:
Processing use of (reg 13 sp) in insn 50:
Processing use of (reg 0 r0) in insn 50:
  Adding insn 47 to worklist
Processing use of (reg 1 r1) in insn 50:
  Adding insn 48 to worklist
Processing use of (reg 2 r2) in insn 50:
  Adding insn 49 to worklist
Processing use of (reg 161) in insn 47:
  Adding insn 46 to worklist
Processing use of (reg 160) in insn 46:
  Adding insn 44 to worklist
Processing use of (reg 0 r0) in insn 44:
  Adding insn 43 to worklist
Processing use of (reg 13 sp) in insn 43:
Processing use of (reg 0 r0) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 136 [ D.38274 ]) in insn 53:
  Adding insn 51 to worklist
Processing use of (reg 162) in insn 53:
  Adding insn 52 to worklist
Processing use of (reg 0 r0) in insn 51:
Processing use of (reg 13 sp) in insn 62:
Processing use of (reg 0 r0) in insn 62:
  Adding insn 59 to worklist
Processing use of (reg 1 r1) in insn 62:
  Adding insn 60 to worklist
Processing use of (reg 2 r2) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 164) in insn 59:
  Adding insn 58 to worklist
Processing use of (reg 163) in insn 58:
  Adding insn 56 to worklist
Processing use of (reg 0 r0) in insn 56:
  Adding insn 55 to worklist
Processing use of (reg 13 sp) in insn 55:
Processing use of (reg 0 r0) in insn 55:
  Adding insn 54 to worklist
Processing use of (reg 148 [ command_line.422 ]) in insn 54:
  Adding insn 38 to worklist
Processing use of (reg 25 sfp) in insn 38:
Processing use of (reg 138 [ D.38270 ]) in insn 65:
  Adding insn 63 to worklist
Processing use of (reg 162) in insn 65:
Processing use of (reg 0 r0) in insn 63:
Processing use of (reg 13 sp) in insn 72:
Processing use of (reg 0 r0) in insn 72:
  Adding insn 70 to worklist
Processing use of (reg 1 r1) in insn 72:
  Adding insn 71 to worklist
Processing use of (reg 162) in insn 70:
Processing use of (reg 13 sp) in insn 76:
Processing use of (reg 0 r0) in insn 76:
  Adding insn 74 to worklist
Processing use of (reg 1 r1) in insn 76:
  Adding insn 75 to worklist
Processing use of (reg 148 [ command_line.422 ]) in insn 75:
Processing use of (reg 162) in insn 74:
Processing use of (reg 13 sp) in insn 77:
Processing use of (reg 13 sp) in insn 78:
Processing use of (reg 13 sp) in insn 79:
Processing use of (reg 13 sp) in insn 81:
Processing use of (reg 0 r0) in insn 81:
  Adding insn 80 to worklist
Processing use of (reg 13 sp) in insn 82:
Processing use of (reg 13 sp) in insn 89:
Processing use of (reg 0 r0) in insn 89:
  Adding insn 87 to worklist
Processing use of (reg 1 r1) in insn 89:
  Adding insn 88 to worklist
Processing use of (reg 13 sp) in insn 90:
Processing use of (reg 13 sp) in insn 99:
Processing use of (reg 183) in insn 99:
  Adding insn 98 to worklist
Processing use of (reg 13 sp) in insn 104:
Processing use of (reg 0 r0) in insn 104:
  Adding insn 100 to worklist
Processing use of (reg 1 r1) in insn 104:
  Adding insn 101 to worklist
Processing use of (reg 2 r2) in insn 104:
  Adding insn 102 to worklist
Processing use of (reg 3 r3) in insn 104:
  Adding insn 103 to worklist
Processing use of (reg 182) in insn 103:
  Adding insn 97 to worklist
Processing use of (reg 178) in insn 97:
  Adding insn 96 to worklist
Processing use of (reg 177) in insn 96:
  Adding insn 93 to worklist
Processing use of (reg 179) in insn 96:
  Adding insn 94 to worklist
Processing use of (reg 177) in insn 102:
Processing use of (reg 162) in insn 101:
Processing use of (reg 13 sp) in insn 106:
Processing use of (reg 0 r0) in insn 106:
  Adding insn 105 to worklist
Processing use of (reg 13 sp) in insn 107:
Processing use of (reg 13 sp) in insn 108:
Processing use of (reg 13 sp) in insn 109:
Processing use of (reg 13 sp) in insn 110:
Processing use of (reg 13 sp) in insn 111:
Processing use of (reg 13 sp) in insn 112:
Processing use of (reg 13 sp) in insn 113:
Processing use of (reg 13 sp) in insn 114:
Processing use of (reg 13 sp) in insn 115:
Processing use of (reg 152) in insn 121:
Processing use of (reg 186) in insn 121:
  Adding insn 120 to worklist
Processing use of (reg 185 [ <variable>.preempt_count ]) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 152) in insn 119:
Processing use of (reg 24 cc) in insn 126:
  Adding insn 125 to worklist
Processing use of (reg 187) in insn 125:
  Adding insn 124 to worklist
Processing use of (reg 142 [ _flags ]) in insn 124:


start_kernel

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={95d,26u} r1={86d,13u} r2={77d,4u} r3={74d,1u} r11={1d,14u} r12={73d} r13={1d,88u,1d} r14={73d,1u} r15={72d} r16={72d} r17={72d} r18={72d} r19={72d} r20={72d} r21={72d} r22={72d} r23={72d} r24={84d,7u} r25={1d,16u,1d} r26={1d,13u} r27={72d} r28={72d} r29={72d} r30={72d} r31={72d} r32={72d} r33={72d} r34={72d} r35={72d} r36={72d} r37={72d} r38={72d} r39={72d} r40={72d} r41={72d} r42={72d} r43={72d} r44={72d} r45={72d} r46={72d} r47={72d} r48={72d} r49={72d} r50={72d} r51={72d} r52={72d} r53={72d} r54={72d} r55={72d} r56={72d} r57={72d} r58={72d} r59={72d} r60={72d} r61={72d} r62={72d} r63={72d} r64={72d} r65={72d} r66={72d} r67={72d} r68={72d} r69={72d} r70={72d} r71={72d} r72={72d} r73={72d} r74={72d} r75={72d} r76={72d} r77={72d} r78={72d} r79={72d} r80={72d} r81={72d} r82={72d} r83={72d} r84={72d} r85={72d} r86={72d} r87={72d} r88={72d} r89={72d} r90={72d} r91={72d} r92={72d} r93={72d} r94={72d} r95={72d} r96={72d} r97={72d} r98={72d} r99={72d} r100={72d} r101={72d} r102={72d} r103={72d} r104={72d} r105={72d} r106={72d} r107={72d} r108={72d} r109={72d} r110={72d} r111={72d} r112={72d} r113={72d} r114={72d} r115={72d} r116={72d} r117={72d} r118={72d} r119={72d} r120={72d} r121={72d} r122={72d} r123={72d} r124={72d} r125={72d} r126={72d} r127={72d} r136={1d,1u} r138={1d,1u} r139={1d,4u} r141={1d,1u} r142={1d,1u} r143={1d,2u} r144={1d,2u} r146={1d,2u} r147={1d,2u} r148={1d,2u} r149={1d,1u} r150={1d,5u} r152={1d,3u} r153={1d,1u} r156={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,5u} r163={1d,1u} r164={1d,1u} r177={1d,2u} r178={1d,1u,1d} r179={1d,1u} r182={1d,1u} r183={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r189={1d,1u} r191={1d,1u} r192={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,2u} r198={1d,2u} r199={1d,1u} r200={1d,2u} r201={1d,1u} r202={1d,1u} r203={1d,1u,1d} r204={1d,2u} r205={1d,1u} r209={1d,1u} r210={1d,2u} 
;;    total ref usage 8785{8530d,251u,4e} in 182{110 regular + 72 call} insns.
;; Reaching defs:

  sparse invalidated 	0, 1, 2, 3, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127
  dense invalidated 	
0[0,95] 1[95,86] 2[181,77] 3[258,74] 11[332,1] 12[333,73] 13[406,1] 14[407,73] 15[480,72] 16[552,72] 17[624,72] 18[696,72] 19[768,72] 20[840,72] 21[912,72] 22[984,72] 23[1056,72] 24[1128,84] 25[1212,1] 26[1213,1] 27[1214,72] 28[1286,72] 29[1358,72] 30[1430,72] 31[1502,72] 32[1574,72] 33[1646,72] 34[1718,72] 35[1790,72] 36[1862,72] 37[1934,72] 38[2006,72] 39[2078,72] 40[2150,72] 41[2222,72] 42[2294,72] 43[2366,72] 44[2438,72] 45[2510,72] 46[2582,72] 47[2654,72] 48[2726,72] 49[2798,72] 50[2870,72] 51[2942,72] 52[3014,72] 53[3086,72] 54[3158,72] 55[3230,72] 56[3302,72] 57[3374,72] 58[3446,72] 59[3518,72] 60[3590,72] 61[3662,72] 62[3734,72] 63[3806,72] 64[3878,72] 65[3950,72] 66[4022,72] 67[4094,72] 68[4166,72] 69[4238,72] 70[4310,72] 71[4382,72] 72[4454,72] 73[4526,72] 74[4598,72] 75[4670,72] 76[4742,72] 77[4814,72] 78[4886,72] 79[4958,72] 80[5030,72] 81[5102,72] 82[5174,72] 83[5246,72] 84[5318,72] 85[5390,72] 86[5462,72] 87[5534,72] 88[5606,72] 89[5678,72] 90[5750,72] 91[5822,72] 92[5894,72] 93[5966,72] 94[6038,72] 95[6110,72] 96[6182,72] 97[6254,72] 98[6326,72] 99[6398,72] 100[6470,72] 101[6542,72] 102[6614,72] 103[6686,72] 104[6758,72] 105[6830,72] 106[6902,72] 107[6974,72] 108[7046,72] 109[7118,72] 110[7190,72] 111[7262,72] 112[7334,72] 113[7406,72] 114[7478,72] 115[7550,72] 116[7622,72] 117[7694,72] 118[7766,72] 119[7838,72] 120[7910,72] 121[7982,72] 122[8054,72] 123[8126,72] 124[8198,72] 125[8270,72] 126[8342,72] 127[8414,72] 136[8486,1] 138[8487,1] 139[8488,1] 141[8489,1] 142[8490,1] 143[8491,1] 144[8492,1] 146[8493,1] 147[8494,1] 148[8495,1] 149[8496,1] 150[8497,1] 152[8498,1] 153[8499,1] 156[8500,1] 160[8501,1] 161[8502,1] 162[8503,1] 163[8504,1] 164[8505,1] 177[8506,1] 178[8507,1] 179[8508,1] 182[8509,1] 183[8510,1] 185[8511,1] 186[8512,1] 187[8513,1] 189[8514,1] 191[8515,1] 192[8516,1] 194[8517,1] 195[8518,1] 196[8519,1] 198[8520,1] 199[8521,1] 200[8522,1] 201[8523,1] 202[8524,1] 203[8525,1] 204[8526,1] 205[8527,1] 209[8528,1] 210[8529,1] 
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 138 139 142 148 149 150 152 153 156 160 161 162 163 164 177 178 179 182 183 185 186 187
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 136 138 139 142 148 149 150 152 153 156 160 161 162 163 164 177 178 179 182 183 185 186 187
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(10)
94, 180, 257, 331, 332, 405, 406, 479, 1212, 1213
;; rd  gen 	(24)
1175, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513
;; rd  kill	(23)
8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(call_insn 5 2 6 2 init/main.c:472 (parallel [
            (call (mem:SI (symbol_ref/i:SI ("smp_setup_processor_id") [flags 0x1] <function_decl 0x10ca2280 smp_setup_processor_id>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 6 5 7 2 init/main.c:486 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cgroup_init_early") [flags 0x41] <function_decl 0x11385c00 cgroup_init_early>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (nil))

(insn 7 6 8 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:35 (parallel [
            (asm_operands/v ("	cpsid i			@ arch_local_irq_disable") ("") 0 []
                 [] 1105913)
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn 8 7 9 2 init/main.c:489 (set (reg/f:SI 149)
        (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 9 8 11 2 init/main.c:489 (set (reg:SI 150)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 11 9 12 2 init/main.c:489 (set (mem/c/i:QI (plus:SI (reg/f:SI 149)
                (const_int 4 [0x4])) [0 early_boot_irqs_disabled+0 S1 A8])
        (subreg:QI (reg:SI 150) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg/f:SI 149)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(call_insn 12 11 14 2 init/main.c:495 (parallel [
            (call (mem:SI (symbol_ref:SI ("tick_init") [flags 0x41] <function_decl 0x1185d480 tick_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 14 12 15 2 init/main.c:434 (set (reg:SI 153)
        (and:SI (reg/f:SI 13 sp)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 15 14 16 2 init/main.c:434 (set (reg:SI 152)
        (and:SI (reg:SI 153)
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_EQUAL (and:SI (reg/f:SI 13 sp)
                (const_int -8192 [0xffffffffffffe000]))
            (nil))))

(insn 16 15 17 2 init/main.c:434 (set (reg:SI 139 [ D.38262 ])
        (mem/s/j:SI (plus:SI (reg:SI 152)
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 17 16 18 2 init/main.c:436 (set (reg:SI 0 r0)
        (reg:SI 139 [ D.38262 ])) 167 {*arm_movsi_insn} (nil))

(insn 18 17 19 2 init/main.c:436 (set (reg:SI 1 r1)
        (reg:SI 150)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(call_insn 19 18 20 2 init/main.c:436 (parallel [
            (call (mem:SI (symbol_ref:SI ("set_cpu_online") [flags 0x41] <function_decl 0x10c85600 set_cpu_online>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 20 19 21 2 init/main.c:437 (set (reg:SI 0 r0)
        (reg:SI 139 [ D.38262 ])) 167 {*arm_movsi_insn} (nil))

(insn 21 20 22 2 init/main.c:437 (set (reg:SI 1 r1)
        (reg:SI 150)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(call_insn 22 21 23 2 init/main.c:437 (parallel [
            (call (mem:SI (symbol_ref:SI ("set_cpu_active") [flags 0x41] <function_decl 0x10c85680 set_cpu_active>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 23 22 24 2 init/main.c:438 (set (reg:SI 0 r0)
        (reg:SI 139 [ D.38262 ])) 167 {*arm_movsi_insn} (nil))

(insn 24 23 25 2 init/main.c:438 (set (reg:SI 1 r1)
        (reg:SI 150)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(call_insn 25 24 26 2 init/main.c:438 (parallel [
            (call (mem:SI (symbol_ref:SI ("set_cpu_present") [flags 0x41] <function_decl 0x10c85580 set_cpu_present>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 26 25 27 2 init/main.c:439 (set (reg:SI 0 r0)
        (reg:SI 139 [ D.38262 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139 [ D.38262 ])
        (nil)))

(insn 27 26 28 2 init/main.c:439 (set (reg:SI 1 r1)
        (reg:SI 150)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 150)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(call_insn 28 27 29 2 init/main.c:439 (parallel [
            (call (mem:SI (symbol_ref:SI ("set_cpu_possible") [flags 0x41] <function_decl 0x10c85500 set_cpu_possible>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(call_insn 29 28 32 2 init/main.c:497 (parallel [
            (call (mem:SI (symbol_ref:SI ("page_address_init") [flags 0x41] <function_decl 0x111b9a00 page_address_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 32 29 33 2 init/main.c:498 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC21") [flags 0x82] <string_cst 0x11aee220>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC21") [flags 0x82] <string_cst 0x11aee220>)
        (nil)))

(insn 33 32 34 2 init/main.c:498 (set (reg:SI 1 r1)
        (symbol_ref:SI ("linux_banner") [flags 0xc0] <var_decl 0x10a4fe40 linux_banner>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("linux_banner") [flags 0xc0] <var_decl 0x10a4fe40 linux_banner>)
        (nil)))

(call_insn 34 33 35 2 init/main.c:498 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 35 34 36 2 init/main.c:499 (set (reg/f:SI 156)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(insn 36 35 37 2 init/main.c:499 (set (reg:SI 0 r0)
        (reg/f:SI 156)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 156)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc]))
            (nil))))

(call_insn 37 36 38 2 init/main.c:499 (parallel [
            (call (mem:SI (symbol_ref:SI ("setup_arch") [flags 0x41] <function_decl 0x10a49a80 setup_arch>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 38 37 42 2 init/main.c:502 (set (reg/f:SI 148 [ command_line.422 ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 command_line+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 38 43 2 init/main.c:341 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 1048 [0x418])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 1048 [0x418])))
        (nil)))

(call_insn/i 43 42 44 2 init/main.c:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41] <function_decl 0x51157b80 strlen>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 44 43 46 2 init/main.c:341 (set (reg:SI 160)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 46 44 47 2 init/main.c:341 (set (reg:SI 161)
        (plus:SI (reg:SI 160)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 160)
        (nil)))

(insn 47 46 48 2 init/main.c:341 (set (reg:SI 0 r0)
        (reg:SI 161)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 161)
        (nil)))

(insn 48 47 49 2 init/main.c:341 (set (reg:SI 1 r1)
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (nil))

(insn 49 48 50 2 init/main.c:341 (set (reg:SI 2 r2)
        (const_int 1073741823 [0x3fffffff])) 167 {*arm_movsi_insn} (nil))

(call_insn 50 49 51 2 init/main.c:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__alloc_bootmem") [flags 0x41] <function_decl 0x114b6380 __alloc_bootmem>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 51 50 52 2 init/main.c:341 (set (reg/f:SI 136 [ D.38274 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 52 51 53 2 init/main.c:341 (set (reg/f:SI 162)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 53 52 54 2 init/main.c:341 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 162)
                (const_int 88 [0x58])) [0 saved_command_line+0 S4 A32])
        (reg/f:SI 136 [ D.38274 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 136 [ D.38274 ])
        (nil)))

(insn 54 53 55 2 init/main.c:342 (set (reg:SI 0 r0)
        (reg/f:SI 148 [ command_line.422 ])) 167 {*arm_movsi_insn} (nil))

(call_insn/i 55 54 56 2 init/main.c:342 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41] <function_decl 0x51157b80 strlen>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 56 55 58 2 init/main.c:342 (set (reg:SI 163)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 58 56 59 2 init/main.c:342 (set (reg:SI 164)
        (plus:SI (reg:SI 163)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 163)
        (nil)))

(insn 59 58 60 2 init/main.c:342 (set (reg:SI 0 r0)
        (reg:SI 164)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 164)
        (nil)))

(insn 60 59 61 2 init/main.c:342 (set (reg:SI 1 r1)
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (nil))

(insn 61 60 62 2 init/main.c:342 (set (reg:SI 2 r2)
        (const_int 1073741823 [0x3fffffff])) 167 {*arm_movsi_insn} (nil))

(call_insn 62 61 63 2 init/main.c:342 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__alloc_bootmem") [flags 0x41] <function_decl 0x114b6380 __alloc_bootmem>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 63 62 65 2 init/main.c:342 (set (reg/f:SI 138 [ D.38270 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 65 63 70 2 init/main.c:342 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 162)
                (const_int 92 [0x5c])) [0 static_command_line+0 S4 A32])
        (reg/f:SI 138 [ D.38270 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 138 [ D.38270 ])
        (nil)))

(insn 70 65 71 2 init/main.c:343 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 162)
                (const_int 88 [0x58])) [0 saved_command_line+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 88 [0x58]))) [0 saved_command_line+0 S4 A32])
        (nil)))

(insn 71 70 72 2 init/main.c:343 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 1048 [0x418])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 1048 [0x418])))
        (nil)))

(call_insn 72 71 74 2 init/main.c:343 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcpy") [flags 0x41] <function_decl 0x51157780 strcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 74 72 75 2 init/main.c:344 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 162)
                (const_int 92 [0x5c])) [0 static_command_line+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 92 [0x5c]))) [0 static_command_line+0 S4 A32])
        (nil)))

(insn 75 74 76 2 init/main.c:344 (set (reg:SI 1 r1)
        (reg/f:SI 148 [ command_line.422 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 148 [ command_line.422 ])
        (nil)))

(call_insn 76 75 77 2 init/main.c:344 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcpy") [flags 0x41] <function_decl 0x51157780 strcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(call_insn 77 76 78 2 init/main.c:503 (parallel [
            (call (mem:SI (symbol_ref:SI ("setup_nr_cpu_ids") [flags 0x41] <function_decl 0x10ca2100 setup_nr_cpu_ids>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 78 77 79 2 init/main.c:504 (parallel [
            (call (mem:SI (symbol_ref:SI ("setup_per_cpu_areas") [flags 0x41] <function_decl 0x10ca2880 setup_per_cpu_areas>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 79 78 80 2 init/main.c:505 (parallel [
            (call (mem:SI (symbol_ref:SI ("smp_prepare_boot_cpu") [flags 0x41] <function_decl 0x10ca2080 smp_prepare_boot_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 80 79 81 2 init/main.c:507 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 81 80 82 2 init/main.c:507 (parallel [
            (call (mem:SI (symbol_ref:SI ("build_all_zonelists") [flags 0x41] <function_decl 0x10c53300 build_all_zonelists>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(call_insn 82 81 87 2 init/main.c:508 (parallel [
            (call (mem:SI (symbol_ref:SI ("page_alloc_init") [flags 0x41] <function_decl 0x10cd6a80 page_alloc_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 87 82 88 2 init/main.c:510 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC22") [flags 0x82] <string_cst 0x11ae73c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC22") [flags 0x82] <string_cst 0x11ae73c0>)
        (nil)))

(insn 88 87 89 2 init/main.c:510 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 1048 [0x418])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 1048 [0x418])))
        (nil)))

(call_insn 89 88 90 2 init/main.c:510 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(call_insn 90 89 93 2 init/main.c:511 (parallel [
            (call (mem:SI (symbol_ref:SI ("parse_early_param") [flags 0x3] <function_decl 0x10a57400 parse_early_param>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 93 90 94 2 init/main.c:512 (set (reg/f:SI 177)
        (symbol_ref:SI ("__start___param") [flags 0xc0] <var_decl 0x11a75480 __start___param>)) 167 {*arm_movsi_insn} (nil))

(insn 94 93 96 2 init/main.c:512 (set (reg/f:SI 179)
        (symbol_ref:SI ("__stop___param") [flags 0xc0] <var_decl 0x11a754e0 __stop___param>)) 167 {*arm_movsi_insn} (nil))

(insn 96 94 97 2 init/main.c:512 (set (reg:SI 178)
        (minus:SI (reg/f:SI 179)
            (reg/f:SI 177))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 179)
        (expr_list:REG_EQUAL (minus:SI (symbol_ref:SI ("__stop___param") [flags 0xc0] <var_decl 0x11a754e0 __stop___param>)
                (symbol_ref:SI ("__start___param") [flags 0xc0] <var_decl 0x11a75480 __start___param>))
            (nil))))

(insn 97 96 98 2 init/main.c:512 (set (reg:SI 182)
        (ashiftrt:SI (reg:SI 178)
            (const_int 4 [0x4]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 178)
        (expr_list:REG_EQUAL (div:SI (reg:SI 178)
                (const_int 16 [0x10]))
            (nil))))

(insn 98 97 99 2 init/main.c:512 (set (reg/f:SI 183)
        (symbol_ref:SI ("unknown_bootoption") [flags 0x3] <function_decl 0x11a52800 unknown_bootoption>)) 167 {*arm_movsi_insn} (nil))

(insn 99 98 100 2 init/main.c:512 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 183)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 183)
        (expr_list:REG_EQUAL (symbol_ref:SI ("unknown_bootoption") [flags 0x3] <function_decl 0x11a52800 unknown_bootoption>)
            (nil))))

(insn 100 99 101 2 init/main.c:512 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC23") [flags 0x82] <string_cst 0x11ae4120>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC23") [flags 0x82] <string_cst 0x11ae4120>)
        (nil)))

(insn 101 100 102 2 init/main.c:512 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 162)
                (const_int 92 [0x5c])) [0 static_command_line+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 162)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 92 [0x5c]))) [0 static_command_line+0 S4 A32])
            (nil))))

(insn 102 101 103 2 init/main.c:512 (set (reg:SI 2 r2)
        (reg/f:SI 177)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 177)
        (expr_list:REG_EQUAL (symbol_ref:SI ("__start___param") [flags 0xc0] <var_decl 0x11a75480 __start___param>)
            (nil))))

(insn 103 102 104 2 init/main.c:512 (set (reg:SI 3 r3)
        (reg:SI 182)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 182)
        (nil)))

(call_insn 104 103 105 2 init/main.c:512 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("parse_args") [flags 0x41] <function_decl 0x10ddb900 parse_args>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 105 104 106 2 init/main.c:519 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 106 105 107 2 init/main.c:519 (parallel [
            (call (mem:SI (symbol_ref:SI ("setup_log_buf") [flags 0x41] <function_decl 0x10a57d00 setup_log_buf>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(call_insn 107 106 108 2 init/main.c:520 (parallel [
            (call (mem:SI (symbol_ref:SI ("pidhash_init") [flags 0x41] <function_decl 0x113bf200 pidhash_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 108 107 109 2 init/main.c:521 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfs_caches_init_early") [flags 0x41] <function_decl 0x10feaa80 vfs_caches_init_early>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 109 108 110 2 init/main.c:522 (parallel [
            (call (mem:SI (symbol_ref:SI ("sort_main_extable") [flags 0x41] <function_decl 0x10e04e00 sort_main_extable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 110 109 111 2 init/main.c:523 (parallel [
            (call (mem:SI (symbol_ref:SI ("trap_init") [flags 0x41] <function_decl 0x112b7a80 trap_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 111 110 112 2 init/main.c:460 (parallel [
            (call (mem:SI (symbol_ref:SI ("mem_init") [flags 0x41] <function_decl 0x111e0480 mem_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 112 111 113 2 init/main.c:461 (parallel [
            (call (mem:SI (symbol_ref:SI ("kmem_cache_init") [flags 0x41] <function_decl 0x10e39700 kmem_cache_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 113 112 114 2 init/main.c:462 (parallel [
            (call (mem:SI (symbol_ref:SI ("percpu_init_late") [flags 0x41] <function_decl 0x10ca2900 percpu_init_late>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 114 113 115 2 init/main.c:464 (parallel [
            (call (mem:SI (symbol_ref:SI ("vmalloc_init") [flags 0x41] <function_decl 0x115b4580 vmalloc_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 115 114 119 2 init/main.c:531 (parallel [
            (call (mem:SI (symbol_ref:SI ("sched_init") [flags 0x41] <function_decl 0x112b7280 sched_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 119 115 120 2 init/main.c:536 (set (reg:SI 185 [ <variable>.preempt_count ])
        (mem/s/j:SI (plus:SI (reg:SI 152)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 120 119 121 2 init/main.c:536 (set (reg:SI 186)
        (plus:SI (reg:SI 185 [ <variable>.preempt_count ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 185 [ <variable>.preempt_count ])
        (nil)))

(insn 121 120 122 2 init/main.c:536 (set (mem/s/j:SI (plus:SI (reg:SI 152)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 186)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 186)
        (expr_list:REG_DEAD (reg:SI 152)
            (nil))))

(insn 122 121 123 2 init/main.c:536 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 12123394)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 123 122 124 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:131 (parallel [
            (set (reg/v:SI 142 [ _flags ])
                (asm_operands/v:SI ("	mrs	%0, cpsr	@ local_save_flags") ("=r") 0 []
                     [] 1118201))
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn 124 123 125 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:SI 187)
        (and:SI (reg/v:SI 142 [ _flags ])
            (const_int 128 [0x80]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 142 [ _flags ])
        (nil)))

(insn 125 124 126 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 187)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 187)
        (nil)))

(jump_insn 126 125 127 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 132)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(33)
94, 180, 257, 331, 332, 405, 406, 1175, 1212, 1213, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u119(11){ }u120(13){ }u121(25){ }u122(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(33)
94, 180, 257, 331, 332, 405, 406, 1175, 1212, 1213, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513
;; rd  gen 	(1)
49
;; rd  kill	(0)


;; Pred edge  2 [0.0%]  (fallthru)
(note 127 126 129 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 129 127 130 3 init/main.c:538 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC24") [flags 0x82] <string_cst 0x11b6d770>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC24") [flags 0x82] <string_cst 0x11b6d770>)
        (nil)))

(call_insn 130 129 131 3 init/main.c:538 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 131 130 132 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:35 (parallel [
            (asm_operands/v ("	cpsid i			@ arch_local_irq_disable") ("") 0 []
                 [] 1105913)
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(32)
49, 180, 257, 331, 332, 405, 406, 1212, 1213, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u125(11){ }u126(13){ }u127(25){ }u128(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 141 189
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 24 [cc] 141 189
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(34)
49, 94, 180, 257, 331, 332, 405, 406, 1175, 1212, 1213, 8486, 8487, 8488, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513
;; rd  gen 	(3)
1157, 8489, 8514
;; rd  kill	(2)
8489, 8514

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 132 131 133 4 103 "" [1 uses])

(note 133 132 134 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(call_insn 134 133 135 4 init/main.c:542 (parallel [
            (call (mem:SI (symbol_ref:SI ("idr_init_cache") [flags 0x41] <function_decl 0x11385b80 idr_init_cache>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 135 134 136 4 init/main.c:543 (parallel [
            (call (mem:SI (symbol_ref:SI ("perf_event_init") [flags 0x41] <function_decl 0x11430600 perf_event_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 136 135 137 4 init/main.c:544 (parallel [
            (call (mem:SI (symbol_ref:SI ("rcu_init") [flags 0x41] <function_decl 0x10d64a00 rcu_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 137 136 138 4 init/main.c:545 (parallel [
            (call (mem:SI (symbol_ref:SI ("radix_tree_init") [flags 0x41] <function_decl 0x10ef4180 radix_tree_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 138 137 139 4 init/main.c:547 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("early_irq_init") [flags 0x41] <function_decl 0x115f3680 early_irq_init>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (nil))

(call_insn 139 138 140 4 init/main.c:548 (parallel [
            (call (mem:SI (symbol_ref:SI ("init_IRQ") [flags 0x41] <function_decl 0x11212d80 init_IRQ>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 140 139 141 4 init/main.c:549 (parallel [
            (call (mem:SI (symbol_ref:SI ("prio_tree_init") [flags 0x41] <function_decl 0x11a3bf00 prio_tree_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 141 140 142 4 init/main.c:550 (parallel [
            (call (mem:SI (symbol_ref:SI ("init_timers") [flags 0x41] <function_decl 0x10d01f00 init_timers>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 142 141 143 4 init/main.c:551 (parallel [
            (call (mem:SI (symbol_ref:SI ("hrtimers_init") [flags 0x41] <function_decl 0x112a1380 hrtimers_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 143 142 144 4 init/main.c:552 (parallel [
            (call (mem:SI (symbol_ref:SI ("softirq_init") [flags 0x41] <function_decl 0x115d0f80 softirq_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 144 143 145 4 init/main.c:553 (parallel [
            (call (mem:SI (symbol_ref:SI ("timekeeping_init") [flags 0x41] <function_decl 0x10b86200 timekeeping_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 145 144 146 4 init/main.c:554 (parallel [
            (call (mem:SI (symbol_ref:SI ("time_init") [flags 0x41] <function_decl 0x11a52180 time_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 146 145 147 4 init/main.c:555 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("profile_init") [flags 0x41] <function_decl 0x1177f280 profile_init>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (nil))

(call_insn 147 146 148 4 init/main.c:556 (parallel [
            (call (mem:SI (symbol_ref:SI ("call_function_init") [flags 0x41] <function_decl 0x10c9fc80 call_function_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 148 147 149 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:131 (parallel [
            (set (reg/v:SI 141 [ _flags ])
                (asm_operands/v:SI ("	mrs	%0, cpsr	@ local_save_flags") ("=r") 0 []
                     [] 1118201))
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn 149 148 150 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:SI 189)
        (and:SI (reg/v:SI 141 [ _flags ])
            (const_int 128 [0x80]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ _flags ])
        (nil)))

(insn 150 149 151 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 189)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 189)
        (nil)))

(jump_insn 151 150 152 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 156)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(36)
49, 94, 180, 257, 331, 332, 405, 406, 1157, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u146(11){ }u147(13){ }u148(25){ }u149(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; rd  in  	(36)
49, 94, 180, 257, 331, 332, 405, 406, 1157, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514
;; rd  gen 	(1)
34
;; rd  kill	(0)


;; Pred edge  4 [0.0%]  (fallthru)
(note 152 151 154 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 154 152 155 5 init/main.c:558 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC25") [flags 0x82] <string_cst 0x11adda50>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC25") [flags 0x82] <string_cst 0x11adda50>)
        (nil)))

(call_insn 155 154 156 5 init/main.c:558 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(35)
34, 180, 257, 331, 332, 405, 406, 1157, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u152(11){ }u153(13){ }u154(25){ }u155(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 147 191 192 194 195 196
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 147 191 192 194 195 196
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(37)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1157, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514
;; rd  gen 	(7)
1152, 8494, 8515, 8516, 8517, 8518, 8519
;; rd  kill	(6)
8494, 8515, 8516, 8517, 8518, 8519

;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 156 155 157 6 104 "" [1 uses])

(note 157 156 158 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 158 157 159 6 init/main.c:560 (set (reg/f:SI 191)
        (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 159 158 161 6 init/main.c:560 (set (reg:SI 192)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 161 159 162 6 init/main.c:560 (set (mem/c/i:QI (plus:SI (reg/f:SI 191)
                (const_int 4 [0x4])) [0 early_boot_irqs_disabled+0 S1 A8])
        (subreg:QI (reg:SI 192) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 192)
        (expr_list:REG_DEAD (reg/f:SI 191)
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(insn 162 161 163 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:26 (parallel [
            (asm_operands/v ("	cpsie i			@ arch_local_irq_enable") ("") 0 []
                 [] 1104761)
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn 163 162 164 6 init/main.c:564 (set (reg/f:SI 194)
        (symbol_ref:SI ("gfp_allowed_mask") [flags 0xc0] <var_decl 0x10cd82a0 gfp_allowed_mask>)) 167 {*arm_movsi_insn} (nil))

(insn 164 163 165 6 init/main.c:564 (set (reg:SI 195)
        (const_int 16777215 [0xffffff])) 167 {*arm_movsi_insn} (nil))

(insn 165 164 166 6 init/main.c:564 (set (mem/c/i:SI (reg/f:SI 194) [0 gfp_allowed_mask+0 S4 A32])
        (reg:SI 195)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 195)
        (expr_list:REG_DEAD (reg/f:SI 194)
            (expr_list:REG_EQUAL (const_int 16777215 [0xffffff])
                (nil)))))

(call_insn 166 165 167 6 init/main.c:566 (parallel [
            (call (mem:SI (symbol_ref:SI ("kmem_cache_init_late") [flags 0x41] <function_decl 0x10e60880 kmem_cache_init_late>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 167 166 168 6 init/main.c:573 (parallel [
            (call (mem:SI (symbol_ref:SI ("console_init") [flags 0x41] <function_decl 0x11588300 console_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 168 167 169 6 init/main.c:574 (set (reg/f:SI 196)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 169 168 170 6 init/main.c:574 (set (reg/f:SI 147 [ panic_later.428 ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 196)
                (const_int 80 [0x50])) [0 panic_later+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 80 [0x50]))) [0 panic_later+0 S4 A32])
        (nil)))

(insn 170 169 171 6 init/main.c:574 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 147 [ panic_later.428 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 171 170 172 6 init/main.c:574 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 178)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; rd  out 	(43)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1152, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519


;; Succ edge  7 [0.0%]  (fallthru)
;; Succ edge  8 [100.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u165(11){ }u166(13){ }u167(25){ }u168(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 196
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(43)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1152, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  6 [0.0%]  (fallthru)
(note 172 171 174 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 174 172 175 7 init/main.c:575 (set (reg:SI 0 r0)
        (reg/f:SI 147 [ panic_later.428 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 147 [ panic_later.428 ])
        (nil)))

(insn 175 174 176 7 init/main.c:575 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 196)
                (const_int 84 [0x54])) [0 panic_param+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 196)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 84 [0x54]))) [0 panic_param+0 S4 A32])
            (nil))))

(call_insn 176 175 177 7 init/main.c:575 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a67680 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(43)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1152, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519



(barrier 177 176 178)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u174(11){ }u175(13){ }u176(25){ }u177(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 146 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 146 198
;; live  kill	
;; rd  in  	(43)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1152, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519
;; rd  gen 	(3)
1150, 8493, 8520
;; rd  kill	(2)
8493, 8520

;; Pred edge  6 [100.0%] 
(code_label 178 177 179 8 105 "" [1 uses])

(note 179 178 180 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 180 179 181 8 init/main.c:587 (set (reg/f:SI 198)
        (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114a4f00 initrd_start>)) 167 {*arm_movsi_insn} (nil))

(insn 181 180 182 8 init/main.c:587 (set (reg:SI 146 [ initrd_start.430 ])
        (mem/c/i:SI (reg/f:SI 198) [0 initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114a4f00 initrd_start>) [0 initrd_start+0 S4 A32])
        (nil)))

(insn 182 181 183 8 init/main.c:587 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 146 [ initrd_start.430 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 183 182 184 8 init/main.c:587 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 9 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198
;; rd  out 	(45)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1150, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u181(11){ }u182(13){ }u183(25){ }u184(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 199 200
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198
;; live  gen 	 24 [cc] 199 200
;; live  kill	
;; rd  in  	(45)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1150, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520
;; rd  gen 	(3)
1149, 8521, 8522
;; rd  kill	(2)
8521, 8522

;; Pred edge  8 [50.0%]  (fallthru)
(note 184 183 185 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 185 184 186 9 init/main.c:587 discrim 1 (set (reg/f:SI 199)
        (symbol_ref:SI ("initrd_below_start_ok") [flags 0xc0] <var_decl 0x114a4ea0 initrd_below_start_ok>)) 167 {*arm_movsi_insn} (nil))

(insn 186 185 187 9 init/main.c:587 discrim 1 (set (reg:SI 200 [ initrd_below_start_ok ])
        (mem/c/i:SI (reg/f:SI 199) [0 initrd_below_start_ok+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 199)
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_below_start_ok") [flags 0xc0] <var_decl 0x114a4ea0 initrd_below_start_ok>) [0 initrd_below_start_ok+0 S4 A32])
            (nil))))

(insn 187 186 188 9 init/main.c:587 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 200 [ initrd_below_start_ok ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 188 187 189 9 init/main.c:587 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198 200
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198 200
;; rd  out 	(47)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1149, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u188(11){ }u189(13){ }u190(25){ }u191(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198 200
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 24 [cc] 144 201 202 203 204 205
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 198 200
;; live  gen 	 24 [cc] 144 201 202 203 204 205
;; live  kill	
;; rd  in  	(47)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1149, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522
;; rd  gen 	(7)
1128, 8492, 8523, 8524, 8525, 8526, 8527
;; rd  kill	(6)
8492, 8523, 8524, 8525, 8526, 8527

;; Pred edge  9 [50.0%]  (fallthru)
(note 189 188 190 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 190 189 191 10 init/main.c:588 (set (reg:SI 201)
        (plus:SI (reg:SI 146 [ initrd_start.430 ])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 146 [ initrd_start.430 ])
        (nil)))

(insn 191 190 192 10 init/main.c:588 (set (reg:SI 202)
        (lshiftrt:SI (reg:SI 201)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 201)
        (nil)))

(insn 192 191 193 10 init/main.c:588 (set (reg:SI 203)
        (ashift:SI (reg:SI 202)
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 202)
        (nil)))

(insn 193 192 195 10 init/main.c:588 (set (reg:SI 204)
        (ashiftrt:SI (reg:SI 203)
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 203)
        (expr_list:REG_EQUAL (div:SI (reg:SI 203)
                (const_int 32 [0x20]))
            (nil))))

(insn 195 193 196 10 init/main.c:588 (set (reg/f:SI 205)
        (symbol_ref:SI ("min_low_pfn") [flags 0xc0] <var_decl 0x114a4480 min_low_pfn>)) 167 {*arm_movsi_insn} (nil))

(insn 196 195 197 10 init/main.c:588 (set (reg:SI 144 [ min_low_pfn.432 ])
        (mem/c/i:SI (reg/f:SI 205) [0 min_low_pfn+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 205)
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("min_low_pfn") [flags 0xc0] <var_decl 0x114a4480 min_low_pfn>) [0 min_low_pfn+0 S4 A32])
            (nil))))

(insn 197 196 198 10 init/main.c:587 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 204)
            (reg:SI 144 [ min_low_pfn.432 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 198 197 199 10 init/main.c:587 discrim 2 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; rd  out 	(53)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1128, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u201(11){ }u202(13){ }u203(25){ }u204(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 198 200 204
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; rd  in  	(53)
34, 49, 94, 180, 257, 331, 332, 405, 406, 1128, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527
;; rd  gen 	(1)
29
;; rd  kill	(0)


;; Pred edge  10 [0.0%]  (fallthru)
(note 199 198 201 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 201 199 202 11 init/main.c:589 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC26") [flags 0x82] <string_cst 0x10e89900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC26") [flags 0x82] <string_cst 0x10e89900>)
        (nil)))

(insn 202 201 203 11 init/main.c:589 (set (reg:SI 1 r1)
        (reg:SI 204)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 204)
        (nil)))

(insn 203 202 204 11 init/main.c:589 (set (reg:SI 2 r2)
        (reg:SI 144 [ min_low_pfn.432 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 144 [ min_low_pfn.432 ])
        (nil)))

(call_insn 204 203 207 11 init/main.c:589 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 207 204 208 11 init/main.c:593 (set (mem/c/i:SI (reg/f:SI 198) [0 initrd_start+0 S4 A32])
        (reg:SI 200 [ initrd_below_start_ok ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 200 [ initrd_below_start_ok ])
        (expr_list:REG_DEAD (reg/f:SI 198)
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(51)
29, 180, 257, 331, 332, 405, 406, 1128, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 8 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u213(11){ }u214(13){ }u215(25){ }u216(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 143 209
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 143 209
;; live  kill	 14 [lr]
;; rd  in  	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1128, 1149, 1150, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527
;; rd  gen 	(3)
1146, 8491, 8528
;; rd  kill	(2)
8491, 8528

;; Pred edge  8 [50.0%] 
;; Pred edge  9 [50.0%] 
;; Pred edge  10 [100.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 208 207 209 12 106 "" [3 uses])

(note 209 208 210 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(call_insn 210 209 211 12 init/main.c:600 (parallel [
            (call (mem:SI (symbol_ref:SI ("setup_per_cpu_pageset") [flags 0x41] <function_decl 0x111e0780 setup_per_cpu_pageset>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 211 210 212 12 init/main.c:602 (set (reg/f:SI 209)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 212 211 213 12 init/main.c:602 (set (reg/f:SI 143 [ late_time_init.433 ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 209)
                (const_int 2072 [0x818])) [0 late_time_init+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 209)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                        (const_int 2072 [0x818]))) [0 late_time_init+0 S4 A32])
            (nil))))

(insn 213 212 214 12 init/main.c:602 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 143 [ late_time_init.433 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 214 213 215 12 init/main.c:602 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 217)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; rd  out 	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528


;; Succ edge  13 [78.3%]  (fallthru)
;; Succ edge  14 [21.6%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u221(11){ }u222(13){ }u223(25){ }u224(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; live  gen 	
;; live  kill	 14 [lr]
;; rd  in  	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  12 [78.3%]  (fallthru)
(note 215 214 216 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(call_insn 216 215 217 13 init/main.c:603 (parallel [
            (call (mem:SI (reg/f:SI 143 [ late_time_init.433 ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 143 [ late_time_init.433 ])
        (nil))
    (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 12 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u227(11){ }u228(13){ }u229(25){ }u230(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 210
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 210
;; live  kill	 14 [lr]
;; rd  in  	(56)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528
;; rd  gen 	(1)
8529
;; rd  kill	(1)
8529

;; Pred edge  12 [21.6%] 
;; Pred edge  13 [100.0%]  (fallthru)
(code_label 217 216 218 14 107 "" [1 uses])

(note 218 217 219 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(call_insn 219 218 220 14 init/main.c:604 (parallel [
            (call (mem:SI (symbol_ref:SI ("sched_clock_init") [flags 0x41] <function_decl 0x11332800 sched_clock_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 220 219 221 14 init/main.c:605 (parallel [
            (call (mem:SI (symbol_ref:SI ("calibrate_delay") [flags 0x41] <function_decl 0x1149bc00 calibrate_delay>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 221 220 222 14 init/main.c:606 (parallel [
            (call (mem:SI (symbol_ref:SI ("pidmap_init") [flags 0x41] <function_decl 0x113bf280 pidmap_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 222 221 223 14 init/main.c:607 (parallel [
            (call (mem:SI (symbol_ref:SI ("anon_vma_init") [flags 0x41] <function_decl 0x1187ce80 anon_vma_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 223 222 224 14 init/main.c:612 (parallel [
            (call (mem:SI (symbol_ref/i:SI ("thread_info_cache_init") [flags 0x1] <function_decl 0x11359880 thread_info_cache_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 224 223 225 14 init/main.c:613 (parallel [
            (call (mem:SI (symbol_ref:SI ("cred_init") [flags 0x41] <function_decl 0x112ac480 cred_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 225 224 226 14 init/main.c:614 (set (reg/f:SI 210)
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x110b50c0 totalram_pages>)) 167 {*arm_movsi_insn} (nil))

(insn 226 225 227 14 init/main.c:614 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 210) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x110b50c0 totalram_pages>) [0 totalram_pages+0 S4 A32])
        (nil)))

(call_insn 227 226 228 14 init/main.c:614 (parallel [
            (call (mem:SI (symbol_ref:SI ("fork_init") [flags 0x41] <function_decl 0x11a3bd80 fork_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(call_insn 228 227 229 14 init/main.c:615 (parallel [
            (call (mem:SI (symbol_ref:SI ("proc_caches_init") [flags 0x41] <function_decl 0x11342700 proc_caches_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 229 228 231 14 init/main.c:616 (parallel [
            (call (mem:SI (symbol_ref:SI ("buffer_init") [flags 0x41] <function_decl 0x1197b680 buffer_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 231 229 232 14 init/main.c:620 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 210) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 210)
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x110b50c0 totalram_pages>) [0 totalram_pages+0 S4 A32])
            (nil))))

(call_insn 232 231 233 14 init/main.c:620 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfs_caches_init") [flags 0x41] <function_decl 0x10feab00 vfs_caches_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(call_insn 233 232 234 14 init/main.c:621 (parallel [
            (call (mem:SI (symbol_ref:SI ("signals_init") [flags 0x41] <function_decl 0x11269280 signals_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 234 233 235 14 init/main.c:623 (parallel [
            (call (mem:SI (symbol_ref:SI ("page_writeback_init") [flags 0x41] <function_decl 0x1178b780 page_writeback_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 235 234 236 14 init/main.c:625 (parallel [
            (call (mem:SI (symbol_ref:SI ("proc_root_init") [flags 0x41] <function_decl 0x11036280 proc_root_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 236 235 237 14 init/main.c:627 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cgroup_init") [flags 0x41] <function_decl 0x11385c80 cgroup_init>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (nil))

(call_insn 237 236 238 14 init/main.c:632 (parallel [
            (call (mem:SI (symbol_ref:SI ("check_writebuffer_bugs") [flags 0x41] <function_decl 0x11a3b800 check_writebuffer_bugs>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn 238 237 0 14 init/main.c:640 (parallel [
            (call (mem:SI (symbol_ref:SI ("rest_init") [flags 0x3] <function_decl 0x11a52c00 rest_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))
;; End of basic block 14 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(57)
29, 34, 49, 94, 180, 257, 331, 332, 405, 406, 1146, 1212, 1213, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493, 8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503, 8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523, 8524, 8525, 8526, 8527, 8528, 8529


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_early_param (do_early_param)[0:2054] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 17 count 26 (  2.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 17 count 27 (  2.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 17 count 30 (  2.5)


do_early_param

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,12u} r1={10d,5u} r2={6d} r3={6d} r11={1d,11u} r12={6d} r13={1d,16u} r14={6d,1u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={11d,6u} r25={1d,11u} r26={1d,10u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} r133={2d,6u,1d} r134={1d,1u} r139={1d,3u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r144={1d,1u} r146={1d,1u} r147={1d,1u} r151={1d,1u} 
;;    total ref usage 712{622d,89u,1e} in 40{35 regular + 5 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610
0[0,12] 1[12,10] 2[22,6] 3[28,6] 11[34,1] 12[35,6] 13[41,1] 14[42,6] 15[48,5] 16[53,5] 17[58,5] 18[63,5] 19[68,5] 20[73,5] 21[78,5] 22[83,5] 23[88,5] 24[93,11] 25[104,1] 26[105,1] 27[106,5] 28[111,5] 29[116,5] 30[121,5] 31[126,5] 32[131,5] 33[136,5] 34[141,5] 35[146,5] 36[151,5] 37[156,5] 38[161,5] 39[166,5] 40[171,5] 41[176,5] 42[181,5] 43[186,5] 44[191,5] 45[196,5] 46[201,5] 47[206,5] 48[211,5] 49[216,5] 50[221,5] 51[226,5] 52[231,5] 53[236,5] 54[241,5] 55[246,5] 56[251,5] 57[256,5] 58[261,5] 59[266,5] 60[271,5] 61[276,5] 62[281,5] 63[286,5] 64[291,5] 65[296,5] 66[301,5] 67[306,5] 68[311,5] 69[316,5] 70[321,5] 71[326,5] 72[331,5] 73[336,5] 74[341,5] 75[346,5] 76[351,5] 77[356,5] 78[361,5] 79[366,5] 80[371,5] 81[376,5] 82[381,5] 83[386,5] 84[391,5] 85[396,5] 86[401,5] 87[406,5] 88[411,5] 89[416,5] 90[421,5] 91[426,5] 92[431,5] 93[436,5] 94[441,5] 95[446,5] 96[451,5] 97[456,5] 98[461,5] 99[466,5] 100[471,5] 101[476,5] 102[481,5] 103[486,5] 104[491,5] 105[496,5] 106[501,5] 107[506,5] 108[511,5] 109[516,5] 110[521,5] 111[526,5] 112[531,5] 113[536,5] 114[541,5] 115[546,5] 116[551,5] 117[556,5] 118[561,5] 119[566,5] 120[571,5] 121[576,5] 122[581,5] 123[586,5] 124[591,5] 125[596,5] 126[601,5] 127[606,5] 133[611,2] 134[613,1] 139[614,1] 140[615,1] 141[616,1] 142[617,1] 144[618,1] 146[619,1] 147[620,1] 151[621,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d11(0){ }d21(1){ }d27(2){ }d33(3){ }d34(11){ }d40(12){ }d41(13){ }d47(14){ }d104(25){ }d105(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
11, 21, 27, 33, 34, 40, 41, 47, 104, 105
;; rd  kill	(50)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 104, 105
;; lr  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
11, 21, 27, 33, 34, 40, 41, 47, 104, 105

( 0 )->[2]->( 10 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d34(bb 0 insn -1) }u1(13){ d41(bb 0 insn -1) }u2(25){ d104(bb 0 insn -1) }u3(26){ d105(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133 139 140 151
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 133 139 140 151
;; live  kill	
;; rd  in  	(10)
11, 21, 27, 33, 34, 40, 41, 47, 104, 105
;; rd  gen 	(4)
612, 614, 615, 621
;; rd  kill	(5)
611, 612, 614, 615, 621
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(14)
11, 21, 27, 33, 34, 40, 41, 47, 104, 105, 612, 614, 615, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d11(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d21(bb 0 insn -1) }

( 10 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u6(11){ d34(bb 0 insn -1) }u7(13){ d41(bb 0 insn -1) }u8(25){ d104(bb 0 insn -1) }u9(26){ d105(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 24 [cc] 141
;; live  kill	
;; rd  in  	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(2)
103, 616
;; rd  kill	(12)
93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 616
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 103, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 11
;;      reg 133 { d612(bb 2 insn 7) d611(bb 9 insn 56) }
;;   UD chains for insn luid 1 uid 12
;;      reg 141 { d616(bb 3 insn 11) }
;;   UD chains for insn luid 2 uid 13
;;      reg 24 { d103(bb 3 insn 12) }

( 3 )->[4]->( 7 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u13(11){ d34(bb 0 insn -1) }u14(13){ d41(bb 0 insn -1) }u15(25){ d104(bb 0 insn -1) }u16(26){ d105(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 142
;; live  kill	 14 [lr]
;; rd  in  	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 103, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(3)
9, 96, 617
;; rd  kill	(30)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 617
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
9, 21, 27, 33, 34, 40, 41, 96, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 15
;;      reg 139 { d614(bb 2 insn 2) }
;;   UD chains for insn luid 1 uid 16
;;      reg 133 { d612(bb 2 insn 7) d611(bb 9 insn 56) }
;;   UD chains for insn luid 2 uid 17
;;      reg 13 { d41(bb 0 insn -1) }
;;      reg 0 { d10(bb 4 insn 15) }
;;      reg 1 { d20(bb 4 insn 16) }
;;   UD chains for insn luid 3 uid 18
;;      reg 0 { d9(bb 4 insn 17) }
;;   UD chains for insn luid 4 uid 20
;;      reg 142 { d617(bb 4 insn 18) }
;;   UD chains for insn luid 5 uid 21
;;      reg 24 { d96(bb 4 insn 20) }

( 3 4 )->[5]->( 6 9 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u25(11){ d34(bb 0 insn -1) }u26(13){ d41(bb 0 insn -1) }u27(25){ d104(bb 0 insn -1) }u28(26){ d105(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 144
;; live  kill	 14 [lr]
;; rd  in  	(28)
2, 3, 5, 7, 9, 11, 21, 27, 33, 34, 40, 41, 47, 96, 103, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(3)
7, 95, 618
;; rd  kill	(30)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 618
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
7, 21, 27, 33, 34, 40, 41, 95, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 25
;;      reg 139 { d614(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 27
;;      reg 13 { d41(bb 0 insn -1) }
;;      reg 0 { d8(bb 5 insn 25) }
;;      reg 1 { d13(bb 5 insn 80) }
;;   UD chains for insn luid 3 uid 28
;;      reg 0 { d7(bb 5 insn 27) }
;;   UD chains for insn luid 4 uid 30
;;      reg 144 { d618(bb 5 insn 28) }
;;   UD chains for insn luid 5 uid 31
;;      reg 24 { d95(bb 5 insn 30) }

( 5 )->[6]->( 7 9 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u36(11){ d34(bb 0 insn -1) }u37(13){ d41(bb 0 insn -1) }u38(25){ d104(bb 0 insn -1) }u39(26){ d105(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 146
;; live  kill	 14 [lr]
;; rd  in  	(21)
7, 21, 27, 33, 34, 40, 41, 95, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(3)
5, 94, 619
;; rd  kill	(30)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 619
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
5, 21, 27, 33, 34, 40, 41, 94, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 34
;;      reg 133 { d612(bb 2 insn 7) d611(bb 9 insn 56) }
;;   UD chains for insn luid 2 uid 36
;;      reg 13 { d41(bb 0 insn -1) }
;;      reg 0 { d6(bb 6 insn 34) }
;;      reg 1 { d12(bb 6 insn 81) }
;;   UD chains for insn luid 3 uid 37
;;      reg 0 { d5(bb 6 insn 36) }
;;   UD chains for insn luid 4 uid 39
;;      reg 146 { d619(bb 6 insn 37) }
;;   UD chains for insn luid 5 uid 40
;;      reg 24 { d94(bb 6 insn 39) }

( 4 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u47(11){ d34(bb 0 insn -1) }u48(13){ d41(bb 0 insn -1) }u49(25){ d104(bb 0 insn -1) }u50(26){ d105(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 24 [cc] 134 147
;; live  kill	 14 [lr]
;; rd  in  	(23)
5, 9, 21, 27, 33, 34, 40, 41, 94, 96, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(4)
3, 98, 613, 620
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 613, 620
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
3, 21, 27, 33, 34, 40, 41, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 43
;;      reg 133 { d612(bb 2 insn 7) d611(bb 9 insn 56) }
;;   UD chains for insn luid 1 uid 44
;;      reg 140 { d615(bb 2 insn 3) }
;;   UD chains for insn luid 2 uid 45
;;      reg 13 { d41(bb 0 insn -1) }
;;      reg 0 { d4(bb 7 insn 44) }
;;      reg 147 { d620(bb 7 insn 43) }
;;   UD chains for insn luid 3 uid 46
;;      reg 0 { d3(bb 7 insn 45) }
;;   UD chains for insn luid 4 uid 47
;;      reg 134 { d613(bb 7 insn 46) }
;;   UD chains for insn luid 5 uid 48
;;      reg 24 { d98(bb 7 insn 47) }

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u59(11){ d34(bb 0 insn -1) }u60(13){ d41(bb 0 insn -1) }u61(25){ d104(bb 0 insn -1) }u62(26){ d105(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(21)
3, 21, 27, 33, 34, 40, 41, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(1)
2
;; rd  kill	(18)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
2, 21, 27, 33, 34, 40, 41, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 52
;;      reg 139 { d614(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 53
;;      reg 13 { d41(bb 0 insn -1) }
;;      reg 0 { d0(bb 8 insn 79) }
;;      reg 1 { d15(bb 8 insn 52) }

( 5 6 7 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u67(11){ d34(bb 0 insn -1) }u68(13){ d41(bb 0 insn -1) }u69(25){ d104(bb 0 insn -1) }u70(26){ d105(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 133
;; live  kill	
;; rd  in  	(26)
2, 3, 5, 7, 21, 27, 33, 34, 40, 41, 94, 95, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(1)
611
;; rd  kill	(2)
611, 612
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(25)
2, 3, 5, 7, 21, 27, 33, 34, 40, 41, 94, 95, 98, 104, 105, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 56
;;      reg 133 { d612(bb 2 insn 7) d611(bb 9 insn 56) }

( 9 2 )->[10]->( 3 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u72(11){ d34(bb 0 insn -1) }u73(13){ d41(bb 0 insn -1) }u74(25){ d104(bb 0 insn -1) }u75(26){ d105(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 151
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(28)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 94, 95, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(1)
93
;; rd  kill	(11)
93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 61
;;      reg 133 { d612(bb 2 insn 7) d611(bb 9 insn 56) }
;;      reg 151 { d621(bb 2 insn 60) }
;;   eq_note reg 133 { }
;;   UD chains for insn luid 1 uid 62
;;      reg 24 { d93(bb 10 insn 61) }

( 10 )->[11]->( 1 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u80(11){ d34(bb 0 insn -1) }u81(13){ d41(bb 0 insn -1) }u82(25){ d104(bb 0 insn -1) }u83(26){ d105(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(1)
1
;; rd  kill	(12)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(22)
1, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }
;;   reg 26 { d105(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 74
;;      reg 0 { d1(bb 11 insn 68) }

( 11 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u85(0){ d1(bb 11 insn 68) }u86(11){ d34(bb 0 insn -1) }u87(13){ d41(bb 0 insn -1) }u88(14){ d47(bb 0 insn -1) }u89(25){ d104(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(22)
1, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(22)
1, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;;  UD chains for artificial uses
;;   reg 0 { d1(bb 11 insn 68) }
;;   reg 11 { d34(bb 0 insn -1) }
;;   reg 13 { d41(bb 0 insn -1) }
;;   reg 14 { d47(bb 0 insn -1) }
;;   reg 25 { d104(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 82 to worklist
  Adding insn 13 to worklist
  Adding insn 21 to worklist
  Adding insn 31 to worklist
  Adding insn 40 to worklist
  Adding insn 48 to worklist
  Adding insn 45 to worklist
  Adding insn 53 to worklist
  Adding insn 62 to worklist
  Adding insn 74 to worklist
Finished finding needed instructions:
  Adding insn 68 to worklist
Processing use of (reg 0 r0) in insn 74:
Processing use of (reg 24 cc) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 133 [ p ]) in insn 61:
  Adding insn 7 to worklist
  Adding insn 56 to worklist
Processing use of (reg 151) in insn 61:
  Adding insn 60 to worklist
Processing use of (reg 133 [ p ]) in insn 56:
Processing use of (reg 13 sp) in insn 53:
Processing use of (reg 0 r0) in insn 53:
  Adding insn 79 to worklist
Processing use of (reg 1 r1) in insn 53:
  Adding insn 52 to worklist
Processing use of (reg 139 [ param ]) in insn 52:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 13 sp) in insn 45:
Processing use of (reg 0 r0) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 147 [ <variable>.setup_func ]) in insn 45:
  Adding insn 43 to worklist
Processing use of (reg 133 [ p ]) in insn 43:
Processing use of (reg 140 [ val ]) in insn 44:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 24 cc) in insn 48:
  Adding insn 47 to worklist
Processing use of (reg 134 [ D.37871 ]) in insn 47:
  Adding insn 46 to worklist
Processing use of (reg 0 r0) in insn 46:
Processing use of (reg 24 cc) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 146) in insn 39:
  Adding insn 37 to worklist
Processing use of (reg 0 r0) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 13 sp) in insn 36:
Processing use of (reg 0 r0) in insn 36:
  Adding insn 34 to worklist
Processing use of (reg 1 r1) in insn 36:
  Adding insn 81 to worklist
Processing use of (reg 133 [ p ]) in insn 34:
Processing use of (reg 24 cc) in insn 31:
  Adding insn 30 to worklist
Processing use of (reg 144) in insn 30:
  Adding insn 28 to worklist
Processing use of (reg 0 r0) in insn 28:
  Adding insn 27 to worklist
Processing use of (reg 13 sp) in insn 27:
Processing use of (reg 0 r0) in insn 27:
  Adding insn 25 to worklist
Processing use of (reg 1 r1) in insn 27:
  Adding insn 80 to worklist
Processing use of (reg 139 [ param ]) in insn 25:
Processing use of (reg 24 cc) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 142) in insn 20:
  Adding insn 18 to worklist
Processing use of (reg 0 r0) in insn 18:
  Adding insn 17 to worklist
Processing use of (reg 13 sp) in insn 17:
Processing use of (reg 0 r0) in insn 17:
  Adding insn 15 to worklist
Processing use of (reg 1 r1) in insn 17:
  Adding insn 16 to worklist
Processing use of (reg 133 [ p ]) in insn 16:
Processing use of (reg 139 [ param ]) in insn 15:
Processing use of (reg 24 cc) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 141 [ <variable>.early ]) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 133 [ p ]) in insn 11:


do_early_param

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,12u} r1={10d,5u} r2={6d} r3={6d} r11={1d,11u} r12={6d} r13={1d,16u} r14={6d,1u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={11d,6u} r25={1d,11u} r26={1d,10u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} r133={2d,6u,1d} r134={1d,1u} r139={1d,3u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r144={1d,1u} r146={1d,1u} r147={1d,1u} r151={1d,1u} 
;;    total ref usage 712{622d,89u,1e} in 40{35 regular + 5 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610
0[0,12] 1[12,10] 2[22,6] 3[28,6] 11[34,1] 12[35,6] 13[41,1] 14[42,6] 15[48,5] 16[53,5] 17[58,5] 18[63,5] 19[68,5] 20[73,5] 21[78,5] 22[83,5] 23[88,5] 24[93,11] 25[104,1] 26[105,1] 27[106,5] 28[111,5] 29[116,5] 30[121,5] 31[126,5] 32[131,5] 33[136,5] 34[141,5] 35[146,5] 36[151,5] 37[156,5] 38[161,5] 39[166,5] 40[171,5] 41[176,5] 42[181,5] 43[186,5] 44[191,5] 45[196,5] 46[201,5] 47[206,5] 48[211,5] 49[216,5] 50[221,5] 51[226,5] 52[231,5] 53[236,5] 54[241,5] 55[246,5] 56[251,5] 57[256,5] 58[261,5] 59[266,5] 60[271,5] 61[276,5] 62[281,5] 63[286,5] 64[291,5] 65[296,5] 66[301,5] 67[306,5] 68[311,5] 69[316,5] 70[321,5] 71[326,5] 72[331,5] 73[336,5] 74[341,5] 75[346,5] 76[351,5] 77[356,5] 78[361,5] 79[366,5] 80[371,5] 81[376,5] 82[381,5] 83[386,5] 84[391,5] 85[396,5] 86[401,5] 87[406,5] 88[411,5] 89[416,5] 90[421,5] 91[426,5] 92[431,5] 93[436,5] 94[441,5] 95[446,5] 96[451,5] 97[456,5] 98[461,5] 99[466,5] 100[471,5] 101[476,5] 102[481,5] 103[486,5] 104[491,5] 105[496,5] 106[501,5] 107[506,5] 108[511,5] 109[516,5] 110[521,5] 111[526,5] 112[531,5] 113[536,5] 114[541,5] 115[546,5] 116[551,5] 117[556,5] 118[561,5] 119[566,5] 120[571,5] 121[576,5] 122[581,5] 123[586,5] 124[591,5] 125[596,5] 126[601,5] 127[606,5] 133[611,2] 134[613,1] 139[614,1] 140[615,1] 141[616,1] 142[617,1] 144[618,1] 146[619,1] 147[620,1] 151[621,1] 
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133 139 140 151
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 133 139 140 151
;; live  kill	
;; rd  in  	(10)
11, 21, 27, 33, 34, 40, 41, 47, 104, 105
;; rd  gen 	(4)
612, 614, 615, 621
;; rd  kill	(5)
611, 612, 614, 615, 621

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 init/main.c:391 (set (reg/v/f:SI 139 [ param ])
        (reg:SI 0 r0 [ param ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ param ])
        (nil)))

(insn 3 2 4 2 init/main.c:391 (set (reg/v/f:SI 140 [ val ])
        (reg:SI 1 r1 [ val ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ val ])
        (nil)))

(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 60 2 init/main.c:394 (set (reg/v/f:SI 133 [ p ])
        (symbol_ref:SI ("__setup_start") [flags 0xc0] <var_decl 0x11a54420 __setup_start>)) 167 {*arm_movsi_insn} (nil))

(insn 60 7 82 2 init/main.c:394 discrim 1 (set (reg/f:SI 151)
        (symbol_ref:SI ("__setup_end") [flags 0xc0] <var_decl 0x11a54480 __setup_end>)) 167 {*arm_movsi_insn} (nil))

(jump_insn 82 60 83 2 init/main.c:394 (set (pc)
        (label_ref 57)) -1 (nil))
;; End of basic block 2 -> ( 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(14)
11, 21, 27, 33, 34, 40, 41, 47, 104, 105, 612, 614, 615, 621


;; Succ edge  10 [100.0%] 

(barrier 83 82 59)

;; Start of basic block ( 10) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u6(11){ }u7(13){ }u8(25){ }u9(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 24 [cc] 141
;; live  kill	
;; rd  in  	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(2)
103, 616
;; rd  kill	(12)
93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 616

;; Pred edge  10 [91.0%] 
(code_label 59 83 10 3 116 "" [1 uses])

(note 10 59 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 3 init/main.c:395 (set (reg:SI 141 [ <variable>.early ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ p ])
                (const_int 8 [0x8])) [0 <variable>.early+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 12 11 13 3 init/main.c:395 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 141 [ <variable>.early ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 141 [ <variable>.early ])
        (nil)))

(jump_insn 13 12 14 3 init/main.c:395 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 103, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u13(11){ }u14(13){ }u15(25){ }u16(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 142
;; live  kill	 14 [lr]
;; rd  in  	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 103, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(3)
9, 96, 617
;; rd  kill	(30)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 617

;; Pred edge  3 [50.0%]  (fallthru)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 4 init/main.c:395 discrim 1 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ param ])) 167 {*arm_movsi_insn} (nil))

(insn 16 15 17 4 init/main.c:395 discrim 1 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (reg/v/f:SI 133 [ p ]) [0 <variable>.str+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn/i 17 16 18 4 init/main.c:395 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 18 17 20 4 init/main.c:395 discrim 1 (set (reg:SI 142)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 20 18 21 4 init/main.c:395 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 142)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 142)
        (nil)))

(jump_insn 21 20 22 4 init/main.c:395 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 7 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
9, 21, 27, 33, 34, 40, 41, 96, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621


;; Succ edge  7 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u25(11){ }u26(13){ }u27(25){ }u28(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 144
;; live  kill	 14 [lr]
;; rd  in  	(28)
2, 3, 5, 7, 9, 11, 21, 27, 33, 34, 40, 41, 47, 96, 103, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(3)
7, 95, 618
;; rd  kill	(30)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 618

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [50.0%]  (fallthru)
(code_label 22 21 23 5 113 "" [1 uses])

(note 23 22 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 23 80 5 init/main.c:396 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ param ])) 167 {*arm_movsi_insn} (nil))

(insn 80 25 27 5 init/main.c:396 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC27") [flags 0x82] <string_cst 0x11b9acf0>)) 167 {*arm_movsi_insn} (nil))

(call_insn/i 27 80 28 5 init/main.c:396 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 28 27 30 5 init/main.c:396 (set (reg:SI 144)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 30 28 31 5 init/main.c:395 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 144)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 144)
        (nil)))

(jump_insn 31 30 32 5 init/main.c:395 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
7, 21, 27, 33, 34, 40, 41, 95, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 146
;; live  kill	 14 [lr]
;; rd  in  	(21)
7, 21, 27, 33, 34, 40, 41, 95, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(3)
5, 94, 619
;; rd  kill	(30)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 619

;; Pred edge  5 [50.0%]  (fallthru)
(note 32 31 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 34 32 81 6 init/main.c:397 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (reg/v/f:SI 133 [ p ]) [0 <variable>.str+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 81 34 36 6 init/main.c:397 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC28") [flags 0x82] <string_cst 0x11b9af30>)) 167 {*arm_movsi_insn} (nil))

(call_insn/i 36 81 37 6 init/main.c:397 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 37 36 39 6 init/main.c:397 (set (reg:SI 146)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 39 37 40 6 init/main.c:395 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 146)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 146)
        (nil)))

(jump_insn 40 39 41 6 init/main.c:395 discrim 3 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
5, 21, 27, 33, 34, 40, 41, 94, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 4 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u47(11){ }u48(13){ }u49(25){ }u50(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 24 [cc] 134 147
;; live  kill	 14 [lr]
;; rd  in  	(23)
5, 9, 21, 27, 33, 34, 40, 41, 94, 96, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(4)
3, 98, 613, 620
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 613, 620

;; Pred edge  4 [50.0%] 
;; Pred edge  6 [50.0%]  (fallthru)
(code_label 41 40 42 7 114 "" [1 uses])

(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 7 init/main.c:399 (set (reg/f:SI 147 [ <variable>.setup_func ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 133 [ p ])
                (const_int 4 [0x4])) [0 <variable>.setup_func+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 44 43 45 7 init/main.c:399 (set (reg:SI 0 r0)
        (reg/v/f:SI 140 [ val ])) 167 {*arm_movsi_insn} (nil))

(call_insn 45 44 46 7 init/main.c:399 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 147 [ <variable>.setup_func ]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 249 {*call_value_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 147 [ <variable>.setup_func ])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 46 45 47 7 init/main.c:399 (set (reg:SI 134 [ D.37871 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 47 46 48 7 init/main.c:399 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.37871 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ D.37871 ])
        (nil)))

(jump_insn 48 47 49 7 init/main.c:399 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
3, 21, 27, 33, 34, 40, 41, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u59(11){ }u60(13){ }u61(25){ }u62(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(21)
3, 21, 27, 33, 34, 40, 41, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(1)
2
;; rd  kill	(18)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47

;; Pred edge  7 [0.0%]  (fallthru)
(note 49 48 79 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 79 49 52 8 init/main.c:400 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC29") [flags 0x82] <string_cst 0x11af05c0>)) 167 {*arm_movsi_insn} (nil))

(insn 52 79 53 8 init/main.c:400 (set (reg:SI 1 r1)
        (reg/v/f:SI 139 [ param ])) 167 {*arm_movsi_insn} (nil))

(call_insn 53 52 54 8 init/main.c:400 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(21)
2, 21, 27, 33, 34, 40, 41, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 5 6 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u67(11){ }u68(13){ }u69(25){ }u70(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 133
;; live  kill	
;; rd  in  	(26)
2, 3, 5, 7, 21, 27, 33, 34, 40, 41, 94, 95, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(1)
611
;; rd  kill	(2)
611, 612

;; Pred edge  5 [50.0%] 
;; Pred edge  6 [50.0%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 54 53 55 9 115 "" [3 uses])

(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 9 init/main.c:394 (set (reg/v/f:SI 133 [ p ])
        (plus:SI (reg/v/f:SI 133 [ p ])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(25)
2, 3, 5, 7, 21, 27, 33, 34, 40, 41, 94, 95, 98, 104, 105, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621


;; Succ edge  10 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 9 2) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u72(11){ }u73(13){ }u74(25){ }u75(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 151
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(28)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 94, 95, 98, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(1)
93
;; rd  kill	(11)
93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103

;; Pred edge  9 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 57 56 58 10 112 "" [1 uses])

(note 58 57 61 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 61 58 62 10 init/main.c:394 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 133 [ p ])
            (reg/f:SI 151))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 133 [ p ])
            (symbol_ref:SI ("__setup_end") [flags 0xc0] <var_decl 0x11a54480 __setup_end>))
        (nil)))

(jump_insn 62 61 63 10 init/main.c:394 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 10 -> ( 3 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 139 140 151
;; rd  out 	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621


;; Succ edge  3 [91.0%] 
;; Succ edge  11 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u80(11){ }u81(13){ }u82(25){ }u83(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(26)
2, 3, 5, 7, 11, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621
;; rd  gen 	(1)
1
;; rd  kill	(12)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11

;; Pred edge  10 [9.0%]  (fallthru,loop_exit)
(note 63 62 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 68 63 74 11 init/main.c:406 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 74 68 0 11 init/main.c:406 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 11 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(22)
1, 21, 27, 33, 34, 40, 41, 47, 93, 104, 105, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns
