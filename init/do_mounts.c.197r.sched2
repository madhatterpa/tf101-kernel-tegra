
;; Function readonly (readonly)[0:2703] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 63 -- after reload
;;   ======================================================

;;	  0-->     6 r3=zxn([r0])                      :cortex_a8_load_store_1
;;	  2-->     7 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  3-->    20 (!cc) r0=0x1                      :cortex_a8_default
;;	  3-->    10 (cc) r0=0x0                       :cortex_a8_default
;;	  4-->    15 (!cc) r3=`*.LANCHOR0'             :cortex_a8_load_store_1
;;	  7-->    17 (!cc) r2=[r3]                     :cortex_a8_load_store_1
;;	  9-->    18 (!cc) r2=r2|r0                    :cortex_a8_default
;;	 10-->    19 (!cc) [r3]=r2                     :cortex_a8_load_store_1
;;	 10-->    33 use r0                            :nothing
;;	 11-->    63 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 11
;;   new head = 6
;;   new tail = 63





readonly

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,6u} r1={1d} r2={3d,4u} r3={3d,4u,2d} r13={1d,2u} r14={1d,1u} r24={1d,6u} 
;;    total ref usage 38{13d,23u,2e} in 10{10 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 60 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 60 4 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 60 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 7 2 init/do_mounts.c:44 (set (reg:SI 3 r3 [136])
        (zero_extend:SI (mem:QI (reg:SI 0 r0 [ str ]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 7 6 20 2 init/do_mounts.c:44 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 20 7 10 2 init/do_mounts.c:47 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:133 D.52645 ] [133])
            (const_int 1 [0x1]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 10 20 15 2 init/do_mounts.c:45 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:133 D.52645 ] [133])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 15 10 17 2 init/do_mounts.c:46 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [137])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 17 15 18 2 init/do_mounts.c:46 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [orig:139 root_mountflags ] [139])
            (mem/c/i:SI (reg/f:SI 3 r3 [137]) [0 root_mountflags+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [137]) [0 root_mountflags+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 root_mountflags+0 S4 A32])
            (nil))))

(insn:TI 18 17 19 2 init/do_mounts.c:46 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [140])
            (ior:SI (reg:SI 2 r2 [orig:139 root_mountflags ] [139])
                (reg:SI 0 r0)))) 2310 {neon_vornv2di+43} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [137]) [0 root_mountflags+0 S4 A32])
        (nil)))

(insn:TI 19 18 33 2 init/do_mounts.c:46 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (reg/f:SI 3 r3 [137]) [0 root_mountflags+0 S4 A32])
            (reg:SI 2 r2 [140]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [137])
            (expr_list:REG_DEAD (reg:SI 2 r2 [140])
                (nil)))))

(insn 33 19 63 2 init/do_mounts.c:48 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 63 33 62 2 init/do_mounts.c:48 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 62 63 58)

(note 58 62 59 NOTE_INSN_DELETED)

(note 59 58 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function readwrite (readwrite)[0:2704] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 44 -- after reload
;;   ======================================================

;;	  0-->     6 r3=zxn([r0])                      :cortex_a8_load_store_1
;;	  2-->     7 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  3-->    10 (cc) r0=0x0                       :cortex_a8_default
;;	  3-->    20 (!cc) r0=0x1                      :cortex_a8_default
;;	  4-->    15 (!cc) r3=`*.LANCHOR0'             :cortex_a8_load_store_1
;;	  7-->    17 (!cc) r2=[r3]                     :cortex_a8_load_store_1
;;	  9-->    18 (!cc) r2=r2&0xfffffffffffffffe    :cortex_a8_default
;;	 10-->    19 (!cc) [r3]=r2                     :cortex_a8_load_store_1
;;	 10-->    33 use r0                            :nothing
;;	 11-->    44 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 11
;;   new head = 6
;;   new tail = 44





readwrite

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d} r2={3d,4u} r3={3d,4u,2d} r13={1d,2u} r14={1d,1u} r24={1d,6u} 
;;    total ref usage 37{13d,22u,2e} in 10{10 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 41 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 41 4 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 41 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 7 2 init/do_mounts.c:52 (set (reg:SI 3 r3 [136])
        (zero_extend:SI (mem:QI (reg:SI 0 r0 [ str ]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 7 6 10 2 init/do_mounts.c:52 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 10 7 20 2 init/do_mounts.c:53 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:133 D.52654 ] [133])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 20 10 15 2 init/do_mounts.c:55 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:133 D.52654 ] [133])
            (const_int 1 [0x1]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 15 20 17 2 init/do_mounts.c:54 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [137])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 17 15 18 2 init/do_mounts.c:54 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [orig:139 root_mountflags ] [139])
            (mem/c/i:SI (reg/f:SI 3 r3 [137]) [0 root_mountflags+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [137]) [0 root_mountflags+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 root_mountflags+0 S4 A32])
            (nil))))

(insn:TI 18 17 19 2 init/do_mounts.c:54 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [140])
            (and:SI (reg:SI 2 r2 [orig:139 root_mountflags ] [139])
                (const_int -2 [0xfffffffffffffffe])))) 2295 {neon_vornv2di+28} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [137]) [0 root_mountflags+0 S4 A32])
        (nil)))

(insn:TI 19 18 33 2 init/do_mounts.c:54 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (reg/f:SI 3 r3 [137]) [0 root_mountflags+0 S4 A32])
            (reg:SI 2 r2 [140]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [137])
            (expr_list:REG_DEAD (reg:SI 2 r2 [140])
                (nil)))))

(insn 33 19 44 2 init/do_mounts.c:56 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 44 33 43 2 init/do_mounts.c:56 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 43 44 39)

(note 39 43 40 NOTE_INSN_DELETED)

(note 40 39 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function rootwait_setup (rootwait_setup)[0:2709] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 43 -- after reload
;;   ======================================================

;;	  0-->     6 r3=zxn([r0])                      :cortex_a8_load_store_1
;;	  2-->     7 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  3-->    16 (!cc) r3=0x1                      :cortex_a8_default
;;	  3-->    10 (cc) r0=0x0                       :cortex_a8_default
;;	  4-->    38 (!cc) r2=`*.LANCHOR1'             :cortex_a8_load_store_1
;;	  4-->    18 (!cc) r0=r3                       :cortex_a8_default
;;	  7-->    17 (!cc) [r2]=r3                     :cortex_a8_load_store_1
;;	  7-->    31 use r0                            :nothing
;;	  8-->    43 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 8
;;   new head = 6
;;   new tail = 43





rootwait_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d} r2={2d,2u} r3={3d,4u} r13={1d,2u} r14={1d,1u} r24={1d,5u} 
;;    total ref usage 31{12d,19u,0e} in 9{9 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 40 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 40 4 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 40 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 7 2 init/do_mounts.c:228 (set (reg:SI 3 r3 [136])
        (zero_extend:SI (mem:QI (reg:SI 0 r0 [ str ]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 7 6 16 2 init/do_mounts.c:228 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 16 7 10 2 init/do_mounts.c:230 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [138])
            (const_int 1 [0x1]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 10 16 38 2 init/do_mounts.c:229 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:133 D.52778 ] [133])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 38 10 18 2 init/do_mounts.c:230 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 2 r2 [137])
            (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 18 38 17 2 init/do_mounts.c:231 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:133 D.52778 ] [133])
            (reg:SI 3 r3 [138]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 17 18 31 2 init/do_mounts.c:230 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (reg/f:SI 2 r2 [137]) [0 root_wait+0 S4 A32])
            (reg:SI 3 r3 [138]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [138])
            (expr_list:REG_DEAD (reg/f:SI 2 r2 [137])
                (expr_list:REG_EQUAL (const_int 1 [0x1])
                    (nil))))))

(insn 31 17 43 2 init/do_mounts.c:232 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 43 31 42 2 init/do_mounts.c:232 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 42 43 37)

(note 37 42 39 NOTE_INSN_DELETED)

(note 39 37 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function root_data_setup (root_data_setup)[0:2710] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 26 -- after reload
;;   ======================================================

;;	  0-->     6 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  3-->     7 [r3+0x4]=r0                       :cortex_a8_load_store_1
;;	  3-->    12 r0=0x1                            :cortex_a8_default
;;	  4-->    18 use r0                            :nothing
;;	  4-->    26 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 6
;;   new tail = 26





root_data_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d} r3={2d,1u} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 15{8d,7u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 24 4 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 24 3 2 NOTE_INSN_DELETED)

(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 3 6 2 NOTE_INSN_DELETED)

(insn:TI 6 8 7 2 init/do_mounts.c:239 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 7 6 12 2 init/do_mounts.c:239 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 4 [0x4])) [0 root_mount_data+0 S4 A32])
        (reg:SI 0 r0 [ str ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [135])
        (expr_list:REG_DEAD (reg:SI 0 r0 [ str ])
            (nil))))

(insn 12 7 18 2 init/do_mounts.c:241 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 18 12 25 2 init/do_mounts.c:241 (use (reg/i:SI 0 r0)) -1 (nil))

(note 25 18 26 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 26 25 27 2 init/do_mounts.c:241 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 27 26 22)

(note 22 27 23 NOTE_INSN_DELETED)

(note 23 22 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function fs_names_setup (fs_names_setup)[0:2711] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 26 -- after reload
;;   ======================================================

;;	  0-->     6 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  3-->     7 [r3+0x8]=r0                       :cortex_a8_load_store_1
;;	  3-->    12 r0=0x1                            :cortex_a8_default
;;	  4-->    18 use r0                            :nothing
;;	  4-->    26 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 6
;;   new tail = 26





fs_names_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d} r3={2d,1u} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 15{8d,7u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 24 4 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 24 3 2 NOTE_INSN_DELETED)

(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 3 6 2 NOTE_INSN_DELETED)

(insn:TI 6 8 7 2 init/do_mounts.c:246 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 7 6 12 2 init/do_mounts.c:246 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 8 [0x8])) [0 root_fs_names+0 S4 A32])
        (reg:SI 0 r0 [ str ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [135])
        (expr_list:REG_DEAD (reg:SI 0 r0 [ str ])
            (nil))))

(insn 12 7 18 2 init/do_mounts.c:248 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 18 12 25 2 init/do_mounts.c:248 (use (reg/i:SI 0 r0)) -1 (nil))

(note 25 18 26 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 26 25 27 2 init/do_mounts.c:248 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 27 26 22)

(note 22 27 23 NOTE_INSN_DELETED)

(note 23 22 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function load_ramdisk (load_ramdisk)[0:2702] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 31 to 34 -- after reload
;;   ======================================================

;;	  0-->     7 r1=0x0                            :cortex_a8_default
;;	  1-->    31 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  2-->     8 r2=r1                             :cortex_a8_default
;;	  3-->     9 r0=call [`simple_strtol']         :cortex_a8_issue_branch
;;	  3-->    29 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	 35-->    12 r0=r0&0x3                         :cortex_a8_default
;;	 35-->    13 [r3+0xc]=r0                       :cortex_a8_load_store_1
;;	 36-->    18 r0=0x1                            :cortex_a8_default
;;	 36-->    24 use r0                            :nothing
;;	 36-->    34 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 36
;;   new head = 31
;;   new tail = 34





load_ramdisk

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={4d,5u} r1={3d,2u} r2={3d,1u} r3={3d,1u} r4={1d,2u} r12={1d} r13={2d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 147{130d,17u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 3 14 2 NOTE_INSN_DELETED)

(note 14 10 7 2 NOTE_INSN_DELETED)

(insn:TI 7 14 31 2 init/do_mounts.c:37 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 31 7 32 2 init/do_mounts.c:36 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 32 31 8 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 8 32 9 2 init/do_mounts.c:37 (set (reg:SI 2 r2)
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn:TI 9 8 29 2 init/do_mounts.c:37 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("simple_strtol") [flags 0x41] <function_decl 0x10a77e80 simple_strtol>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 29 9 12 2 init/do_mounts.c:37 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 12 29 13 2 init/do_mounts.c:37 (set (reg:SI 0 r0 [137])
        (and:SI (reg:SI 0 r0)
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (nil))

(insn 13 12 18 2 init/do_mounts.c:37 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [136])
                (const_int 12 [0xc])) [0 rd_doload+0 S4 A32])
        (reg:SI 0 r0 [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [136])
        (expr_list:REG_DEAD (reg:SI 0 r0 [137])
            (nil))))

(insn:TI 18 13 24 2 init/do_mounts.c:39 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 24 18 33 2 init/do_mounts.c:39 (use (reg/i:SI 0 r0)) -1 (nil))

(note 33 24 34 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 34 33 35 2 init/do_mounts.c:39 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 35 34 28)

(note 28 35 30 NOTE_INSN_DELETED)

(note 30 28 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function root_dev_setup (root_dev_setup)[0:2708] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 28 to 31 -- after reload
;;   ======================================================

;;	  0-->     2 r1=r0                             :cortex_a8_default
;;	  0-->    10 r2=0x40                           :cortex_a8_default
;;	  1-->    28 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  2-->     8 r0=const(`*.LANCHOR1'+0x10)       :cortex_a8_load_store_1
;;	  3-->    11 r0=call [`strlcpy']               :cortex_a8_issue_branch
;;	  3-->    16 r0=0x1                            :cortex_a8_default
;;	  4-->    22 use r0                            :nothing
;;	  4-->    31 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 28
;;   new tail = 31





root_dev_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={3d,1u} r3={2d} r4={1d,2u} r12={1d} r13={2d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 143{129d,14u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(note 7 6 12 2 NOTE_INSN_DELETED)

(note 12 7 2 2 NOTE_INSN_DELETED)

(insn:TI 2 12 10 2 init/do_mounts.c:219 (set (reg/v/f:SI 1 r1 [orig:134 line ] [134])
        (reg:SI 0 r0 [ line ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ line ])
        (nil)))

(insn 10 2 28 2 init/do_mounts.c:220 (set (reg:SI 2 r2)
        (const_int 64 [0x40])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 28 10 29 2 init/do_mounts.c:219 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 29 28 8 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 8 29 11 2 init/do_mounts.c:220 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn:TI 11 8 16 2 init/do_mounts.c:220 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlcpy") [flags 0x41] <function_decl 0x10bb1380 strlcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 16 11 22 2 init/do_mounts.c:222 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 22 16 30 2 init/do_mounts.c:222 (use (reg/i:SI 0 r0)) -1 (nil))

(note 30 22 31 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 31 30 32 2 init/do_mounts.c:222 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 32 31 26)

(note 26 32 27 NOTE_INSN_DELETED)

(note 27 26 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function root_delay_setup (root_delay_setup)[0:2712] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 29 to 32 -- after reload
;;   ======================================================

;;	  0-->     7 r1=0x0                            :cortex_a8_default
;;	  1-->    29 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  2-->     8 r2=r1                             :cortex_a8_default
;;	  3-->     9 r0=call [`simple_strtoul']        :cortex_a8_issue_branch
;;	  3-->    11 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	 35-->    12 [r3+0x50]=r0                      :cortex_a8_load_store_1
;;	 35-->    17 r0=0x1                            :cortex_a8_default
;;	 36-->    23 use r0                            :nothing
;;	 36-->    32 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 36
;;   new head = 29
;;   new tail = 32





root_delay_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={3d,4u} r1={3d,2u} r2={3d,1u} r3={3d,1u} r4={1d,2u} r12={1d} r13={2d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 145{129d,16u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 3 13 2 NOTE_INSN_DELETED)

(note 13 10 7 2 NOTE_INSN_DELETED)

(insn:TI 7 13 29 2 init/do_mounts.c:253 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 29 7 30 2 init/do_mounts.c:252 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 30 29 8 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 8 30 9 2 init/do_mounts.c:253 (set (reg:SI 2 r2)
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn:TI 9 8 11 2 init/do_mounts.c:253 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("simple_strtoul") [flags 0x41] <function_decl 0x10a77e00 simple_strtoul>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 11 9 12 2 init/do_mounts.c:253 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 12 11 17 2 init/do_mounts.c:253 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [136])
                (const_int 80 [0x50])) [0 root_delay+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [136])
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil))))

(insn 17 12 23 2 init/do_mounts.c:255 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 23 17 31 2 init/do_mounts.c:255 (use (reg/i:SI 0 r0)) -1 (nil))

(note 31 23 32 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 32 31 33 2 init/do_mounts.c:255 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 33 32 27)

(note 27 33 28 NOTE_INSN_DELETED)

(note 28 27 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_mount_root (do_mount_root)[0:2714] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 100 to 18 -- after reload
;;   ======================================================

;;	  0-->     4 ip=r2                             :cortex_a8_default
;;	  0-->    13 r2=r1                             :cortex_a8_default
;;	  1-->   100 {[--sp]=unspec[r0] 2;use r1;use r4:cortex_a8_load_store_2
;;	  2-->    12 r1=`*.LC0'                        :cortex_a8_load_store_1
;;	  3-->    10 [sp]=r3                           :cortex_a8_load_store_1
;;	  3-->    14 r3=ip                             :cortex_a8_default
;;	  4-->    15 r0=call [`sys_mount']             :cortex_a8_issue_branch
;;	 36-->    17 {cc=cmp(r0,0x0);r4=r0;}           :cortex_a8_default
;;	 38-->    18 pc={(cc!=0x0)?L72:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 38
;;   new head = 100
;;   new tail = 18

;;   ======================================================
;;   -- basic block 3 from 21 to 71 -- after reload
;;   ======================================================

;;	  0-->    21 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  1-->    22 r0=call [`sys_chdir']             :cortex_a8_issue_branch
;;	  1-->    99 r2=sp                             :cortex_a8_default
;;	  2-->    92 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->    97 r1=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  3-->    93 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  3-->    96 lr=`*.LC2'                        :cortex_a8_load_store_1
;;	  4-->    67 r0=`*.LC3'                        :cortex_a8_load_store_1
;;	  5-->    26 r2=[r3+0xc]                       :cortex_a8_load_store_1
;;	  8-->    27 r3=[r2+0x39c]                     :cortex_a8_load_store_1
;;	 11-->    28 r3=[r3+0x20]                      :cortex_a8_load_store_1
;;	 14-->    29 r3=[r3+0x14]                      :cortex_a8_load_store_1
;;	 17-->    30 r3=[r3+0x8]                       :cortex_a8_load_store_1
;;	 19-->    64 ip=r3&0xffffff                    :cortex_a8_default
;;	 20-->    32 [r1]=r3                           :cortex_a8_load_store_1
;;	 20-->    70 r3=r3 0>>0x14                     :cortex_a8_default
;;	 21-->    37 r2=[r2+0x39c]                     :cortex_a8_load_store_1
;;	 21-->    65 ip=ip&0xffffffffff0fffff          :cortex_a8_default
;;	 24-->    38 r2=[r2+0x20]                      :cortex_a8_load_store_1
;;	 27-->    39 r2=[r2+0x14]                      :cortex_a8_load_store_1
;;	 30-->    40 r1=[r2+0x20]                      :cortex_a8_load_store_1
;;	 31-->    49 r2=[r2+0x34]                      :cortex_a8_load_store_1
;;	 33-->    51 cc=cmp(zxt(r2,0x1,0x0),0x0)       :cortex_a8_default
;;	 33-->    95 r2=`*.LC1'                        :cortex_a8_load_store_1
;;	 34-->    41 r1=[r1]                           :cortex_a8_load_store_1
;;	 35-->    69 r2={(cc!=0x0)?lr:r2}              :cortex_a8_default
;;	 35-->    66 [sp]=ip                           :cortex_a8_load_store_1
;;	 36-->    71 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 21
;;   new tail = 71

;;   ======================================================
;;   -- basic block 4 from 78 to 103 -- after reload
;;   ======================================================

;;	  0-->    78 r0=r4                             :cortex_a8_default
;;	  0-->    84 use r0                            :nothing
;;	  0-->   103 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 78
;;   new tail = 103





do_mount_root

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,8u} r1={8d,6u} r2={13d,12u,1d} r3={12d,11u,1d} r4={2d,3u} r12={6d,3u} r13={2d,11u} r14={5d,3u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={5d,2u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 451{390d,59u,2e} in 40{37 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 7 6 2 NOTE_INSN_DELETED)

(note 6 5 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 6 4 2 NOTE_INSN_DELETED)

(insn:TI 4 16 13 2 init/do_mounts.c:289 (set (reg/v:SI 12 ip [orig:143 flags ] [143])
        (reg:SI 2 r2 [ flags ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ flags ])
        (nil)))

(insn 13 4 100 2 init/do_mounts.c:290 (set (reg:SI 2 r2)
        (reg/v/f:SI 1 r1 [orig:142 fs ] [142])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:142 fs ] [142])
        (nil)))

(insn/f:TI 100 13 101 2 init/do_mounts.c:289 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 4 r4))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -16 [0xfffffffffffffff0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 0 r0))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 1 r1))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 101 100 12 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 12 101 10 2 init/do_mounts.c:290 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x121b28c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x121b28c0>)
        (nil)))

(insn:TI 10 12 14 2 init/do_mounts.c:290 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 3 r3 [ data ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ data ])
        (nil)))

(insn 14 10 15 2 init/do_mounts.c:290 (set (reg:SI 3 r3)
        (reg/v:SI 12 ip [orig:143 flags ] [143])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:143 flags ] [143])
        (nil)))

(call_insn:TI 15 14 17 2 init/do_mounts.c:290 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_mount") [flags 0x41] <function_decl 0x120f7880 sys_mount>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 17 15 18 2 init/do_mounts.c:291 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:136 err ] [136])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 18 17 19 2 init/do_mounts.c:291 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  4 [100.0%] 
;; Succ edge  3 [0.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 19 18 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 24 19 50 3 NOTE_INSN_DELETED)

(note 50 24 91 3 NOTE_INSN_DELETED)

(note 91 50 63 3 NOTE_INSN_DELETED)

(note 63 91 21 3 NOTE_INSN_DELETED)

(insn:TI 21 63 22 3 init/do_mounts.c:294 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x121b28c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x121b28c0>)
        (nil)))

(call_insn:TI 22 21 99 3 init/do_mounts.c:294 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chdir") [flags 0x41] <function_decl 0x12110280 sys_chdir>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 99 22 92 3 init/do_mounts.c:295 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 92 99 97 3 init/do_mounts.c:295 (set (reg:SI 3 r3 [147])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 97 92 93 3 init/do_mounts.c:295 (set (reg/f:SI 1 r1 [153])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 93 97 96 3 init/do_mounts.c:295 (set (reg:SI 3 r3 [147])
        (and:SI (reg:SI 3 r3 [147])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 96 93 67 3 init/do_mounts.c:296 discrim 3 (set (reg/f:SI 14 lr [174])
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1217b540>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1217b540>)
        (nil)))

(insn:TI 67 96 26 3 init/do_mounts.c:296 discrim 3 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10bf1ea0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10bf1ea0>)
        (nil)))

(insn:TI 26 67 27 3 init/do_mounts.c:295 (set (reg/f:SI 2 r2 [orig:149 <variable>.task ] [149])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [147])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [147])
        (nil)))

(insn:TI 27 26 28 3 init/do_mounts.c:295 (set (reg/f:SI 3 r3 [orig:150 <variable>.fs ] [150])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:149 <variable>.task ] [149])
                (const_int 924 [0x39c])) [0 <variable>.fs+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:149 <variable>.task ] [149])
                (const_int 924 [0x39c])) [0 <variable>.fs+0 S4 A32])
        (nil)))

(insn:TI 28 27 29 3 init/do_mounts.c:295 (set (reg/f:SI 3 r3 [orig:151 <variable>.pwd.mnt ] [151])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 <variable>.fs ] [150])
                (const_int 32 [0x20])) [0 <variable>.pwd.mnt+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 29 28 30 3 init/do_mounts.c:295 (set (reg/f:SI 3 r3 [orig:152 <variable>.mnt_sb ] [152])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:151 <variable>.pwd.mnt ] [151])
                (const_int 20 [0x14])) [0 <variable>.mnt_sb+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 30 29 64 3 init/do_mounts.c:295 (set (reg:SI 3 r3 [orig:139 ROOT_DEV.894 ] [139])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:152 <variable>.mnt_sb ] [152])
                (const_int 8 [0x8])) [0 <variable>.s_dev+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 64 30 32 3 init/do_mounts.c:296 discrim 3 (set (reg:SI 12 ip [172])
        (and:SI (reg:SI 3 r3 [orig:139 ROOT_DEV.894 ] [139])
            (const_int 16777215 [0xffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 32 64 70 3 init/do_mounts.c:295 (set (mem/c/i:SI (reg/f:SI 1 r1 [153]) [0 ROOT_DEV+0 S4 A32])
        (reg:SI 3 r3 [orig:139 ROOT_DEV.894 ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [153])
        (nil)))

(insn 70 32 37 3 init/do_mounts.c:296 discrim 3 (set (reg:SI 3 r3)
        (lshiftrt:SI (reg:SI 3 r3 [orig:139 ROOT_DEV.894 ] [139])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 37 70 65 3 init/do_mounts.c:296 (set (reg/f:SI 2 r2 [orig:157 <variable>.fs ] [157])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:149 <variable>.task ] [149])
                (const_int 924 [0x39c])) [0 <variable>.fs+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 65 37 38 3 init/do_mounts.c:296 discrim 3 (set (reg:SI 12 ip [171])
        (and:SI (reg:SI 12 ip [172])
            (const_int -15728641 [0xffffffffff0fffff]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg:SI 3 r3 [orig:139 ROOT_DEV.894 ] [139])
            (const_int 1048575 [0xfffff]))
        (nil)))

(insn:TI 38 65 39 3 init/do_mounts.c:296 (set (reg/f:SI 2 r2 [orig:158 <variable>.pwd.mnt ] [158])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:157 <variable>.fs ] [157])
                (const_int 32 [0x20])) [0 <variable>.pwd.mnt+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 39 38 40 3 init/do_mounts.c:296 (set (reg/f:SI 2 r2 [orig:159 <variable>.mnt_sb ] [159])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:158 <variable>.pwd.mnt ] [158])
                (const_int 20 [0x14])) [0 <variable>.mnt_sb+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 40 39 49 3 init/do_mounts.c:296 (set (reg/f:SI 1 r1 [orig:160 <variable>.s_type ] [160])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:159 <variable>.mnt_sb ] [159])
                (const_int 32 [0x20])) [0 <variable>.s_type+0 S4 A256])) 167 {*arm_movsi_insn} (nil))

(insn:TI 49 40 51 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2 [orig:168 <variable>.s_flags ] [168])
        (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:159 <variable>.mnt_sb ] [159])
                (const_int 52 [0x34])) [0 <variable>.s_flags+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 51 49 95 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [orig:168 <variable>.s_flags ] [168])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:168 <variable>.s_flags ] [168])
        (nil)))

(insn 95 51 41 3 init/do_mounts.c:296 discrim 3 (set (reg/f:SI 2 r2 [175])
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x121b9920>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x121b9920>)
        (nil)))

(insn:TI 41 95 69 3 init/do_mounts.c:296 (set (reg/f:SI 1 r1 [orig:138 D.52856 ] [138])
        (mem/s/f/j:SI (reg/f:SI 1 r1 [orig:160 <variable>.s_type ] [160]) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 69 41 66 3 init/do_mounts.c:296 discrim 3 (set (reg:SI 2 r2)
        (if_then_else:SI (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg/f:SI 14 lr [174])
            (reg/f:SI 2 r2 [175]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 14 lr [174])
            (nil))))

(insn 66 69 71 3 init/do_mounts.c:296 discrim 3 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [171])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [171])
        (nil)))

(call_insn:TI 71 66 72 3 init/do_mounts.c:296 discrim 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 72 71 73 4 40 "" [1 uses])

(note 73 72 78 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 78 73 84 4 init/do_mounts.c:302 (set (reg/i:SI 0 r0)
        (reg/v:SI 4 r4 [orig:136 err ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 84 78 102 4 init/do_mounts.c:302 (use (reg/i:SI 0 r0)) -1 (nil))

(note 102 84 103 4 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 103 102 104 4 init/do_mounts.c:302 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 104 103 94)

(note 94 104 98 NOTE_INSN_DELETED)

(note 98 94 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function mount_block_root (mount_block_root)[0:2715] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 37 count 58 (    2)


mount_block_root

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={37d,29u} r1={31d,12u} r2={24d,5u} r3={35d,17u} r4={3d,11u} r5={8d,12u} r6={3d,4u} r7={2d,3u} r8={5d,8u} r9={2d,6u} r10={2d,3u} r12={19d} r13={3d,54u,4d} r14={20d,2u} r15={19d} r16={19d} r17={19d} r18={19d} r19={19d} r20={19d} r21={19d} r22={19d} r23={19d} r24={30d,12u} r27={19d} r28={19d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={19d} r38={19d} r39={19d} r40={19d} r41={19d} r42={19d} r43={19d} r44={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} r76={19d} r77={19d} r78={19d} r79={19d} r80={19d} r81={19d} r82={19d} r83={19d} r84={19d} r85={19d} r86={19d} r87={19d} r88={19d} r89={19d} r90={19d} r91={19d} r92={19d} r93={19d} r94={19d} r95={19d} r96={19d} r97={19d} r98={19d} r99={19d} r100={19d} r101={19d} r102={19d} r103={19d} r104={19d} r105={19d} r106={19d} r107={19d} r108={19d} r109={19d} r110={19d} r111={19d} r112={19d} r113={19d} r114={19d} r115={19d} r116={19d} r117={19d} r118={19d} r119={19d} r120={19d} r121={19d} r122={19d} r123={19d} r124={19d} r125={19d} r126={19d} r127={19d} 
;;    total ref usage 2496{2314d,178u,4e} in 120{101 regular + 19 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 7 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]

( 2 )->[3]->( 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 5 [r5]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]

( 5 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]

( 4 3 )->[5]->( 4 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]

( 5 )->[6]->( 13 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]

( 2 )->[7]->( 12 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5] 8 [r8] 10 [sl]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 12 )->[8]->( 9 11 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 9 8 )->[9]->( 9 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 9 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 10 [sl] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]

( 10 8 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 5 [r5] 8 [r8]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 8 [r8]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 11 7 )->[12]->( 8 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 12 6 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8]
;; live  kill	
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 13 19 )->[14]->( 22 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 22 )->[15]->( 19 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 15 )->[16]->( 28 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 16 )->[17]->( 18 21 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 17 )->[18]->( 20 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 15 )->[19]->( 14 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 18 )->[20]->( 22 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 17 )->[21]->( 27 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 14 20 )->[22]->( 15 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 22 )->[23]->( 25 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 25 )->[24]->( 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 24 23 )->[25]->( 24 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]

( 25 )->[26]->( 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 26 21 )->[27]->( )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 16 )->[28]->( 1 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 28 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 44 to worklist
  Adding insn 38 to worklist
  Adding insn 298 to worklist
  Adding insn 309 to worklist
  Adding insn 48 to worklist
  Adding insn 58 to worklist
  Adding insn 65 to worklist
  Adding insn 312 to worklist
  Adding insn 314 to worklist
  Adding insn 76 to worklist
  Adding insn 72 to worklist
  Adding insn 90 to worklist
  Adding insn 85 to worklist
  Adding insn 108 to worklist
  Adding insn 101 to worklist
  Adding insn 113 to worklist
  Adding insn 122 to worklist
  Adding insn 127 to worklist
  Adding insn 316 to worklist
  Adding insn 142 to worklist
  Adding insn 139 to worklist
  Adding insn 144 to worklist
  Adding insn 146 to worklist
  Adding insn 320 to worklist
  Adding insn 322 to worklist
  Adding insn 324 to worklist
  Adding insn 157 to worklist
  Adding insn 326 to worklist
  Adding insn 181 to worklist
  Adding insn 180 to worklist
  Adding insn 177 to worklist
  Adding insn 170 to worklist
  Adding insn 193 to worklist
  Adding insn 328 to worklist
  Adding insn 201 to worklist
  Adding insn 198 to worklist
  Adding insn 197 to worklist
  Adding insn 211 to worklist
  Adding insn 209 to worklist
  Adding insn 221 to worklist
  Adding insn 230 to worklist
  Adding insn 225 to worklist
  Adding insn 235 to worklist
  Adding insn 302 to worklist
  Adding insn 242 to worklist
Finished finding needed instructions:
processing block 4 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 53 to worklist
processing block 19 lr out =  4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 151 to worklist
processing block 28 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 240 to worklist
  Adding insn 292 to worklist
  Adding insn 241 to worklist
processing block 20 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 161 to worklist
  Adding insn 160 to worklist
  Adding insn 156 to worklist
processing block 18 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
processing block 27 lr out =  13 [sp]
  Adding insn 233 to worklist
  Adding insn 234 to worklist
processing block 21 lr out =  13 [sp]
  Adding insn 179 to worklist
  Adding insn 174 to worklist
  Adding insn 176 to worklist
  Adding insn 175 to worklist
  Adding insn 294 to worklist
  Adding insn 168 to worklist
  Adding insn 295 to worklist
  Adding insn 169 to worklist
processing block 17 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 145 to worklist
processing block 16 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 143 to worklist
processing block 15 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 141 to worklist
  Adding insn 138 to worklist
  Adding insn 137 to worklist
  Adding insn 136 to worklist
  Adding insn 135 to worklist
processing block 24 lr out =  4 [r4] 13 [sp]
  Adding insn 215 to worklist
  Adding insn 214 to worklist
  Adding insn 210 to worklist
  Adding insn 258 to worklist
  Adding insn 208 to worklist
processing block 26 lr out =  13 [sp]
  Adding insn 228 to worklist
  Adding insn 293 to worklist
  Adding insn 229 to worklist
  Adding insn 224 to worklist
processing block 25 lr out =  4 [r4] 13 [sp]
  Adding insn 220 to worklist
  Adding insn 219 to worklist
processing block 23 lr out =  4 [r4] 13 [sp]
  Adding insn 200 to worklist
  Adding insn 196 to worklist
processing block 22 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 192 to worklist
  Adding insn 191 to worklist
processing block 14 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 260 to worklist
processing block 13 lr out =  4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 125 to worklist
  Adding insn 134 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
processing block 5 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 64 to worklist
  Adding insn 61 to worklist
processing block 3 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 56 to worklist
  Adding insn 49 to worklist
  Adding insn 47 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 117 to worklist
  Adding insn 116 to worklist
processing block 10 lr out =  0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
processing block 9 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 105 to worklist
  Adding insn 107 to worklist
  Adding insn 103 to worklist
  Adding insn 104 to worklist
  Adding insn 269 to worklist
  Adding insn 99 to worklist
processing block 8 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 92 to worklist
  Adding insn 89 to worklist
  Adding insn 88 to worklist
  Adding insn 264 to worklist
  Adding insn 83 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 121 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 78 to worklist
  Adding insn 77 to worklist
  Adding insn 111 to worklist
processing block 2 lr out =  0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 43 to worklist
  Adding insn 42 to worklist
  Adding insn 41 to worklist
  Adding insn 39 to worklist
  Adding insn 36 to worklist
  Adding insn 296 to worklist
  Adding insn 37 to worklist
  Adding insn 31 to worklist
  Adding insn 30 to worklist
  Adding insn 299 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 37 count 65 (  2.2)
;;   ======================================================
;;   -- basic block 2 from 298 to 44 -- after reload
;;   ======================================================

;;	  0-->   296 r3=`names_cachep'                 :cortex_a8_load_store_1
;;	  1-->   298 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  2-->    30 r7=r0                             :cortex_a8_default
;;	  3-->   299 sp=sp-0x20                        :cortex_a8_default
;;	  3-->    36 r0=[r3]                           :cortex_a8_load_store_1
;;	  4-->    31 r6=r1                             :cortex_a8_default
;;	  4-->    37 r1=0xd0                           :cortex_a8_default
;;	  5-->    38 r0=call [`kmem_cache_alloc']      :cortex_a8_issue_branch
;;	  5-->    41 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  8-->    42 r9=[r3+0x8]                       :cortex_a8_load_store_1
;;	 10-->    43 cc=cmp(r9,0x0)                    :cortex_a8_default
;;	 37-->    39 r4=r0                             :cortex_a8_default
;;	 37-->    44 pc={(cc==0x0)?L69:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 37
;;   new head = 298
;;   new tail = 44

;;   ======================================================
;;   -- basic block 3 from 47 to 309 -- after reload
;;   ======================================================

;;	  0-->    47 r1=r9                             :cortex_a8_default
;;	  0-->    49 r5=r0                             :cortex_a8_default
;;	  1-->    48 r0=call [`strcpy']                :cortex_a8_issue_branch
;;	  1-->    56 r2=0x0                            :cortex_a8_default
;;	  2-->   309 pc=L268                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 47
;;   new tail = 309

;;   ======================================================
;;   -- basic block 4 from 53 to 58 -- after reload
;;   ======================================================

;;	  0-->    53 cc=cmp(r3,0x2c)                   :cortex_a8_default
;;	  0-->    58 (!cc) [r5-0x1]=r2                 :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 53
;;   new tail = 58

;;   ======================================================
;;   -- basic block 5 from 61 to 65 -- after reload
;;   ======================================================

;;	  0-->    61 r3=zxn([r5++])                    :cortex_a8_load_store_1
;;	  2-->    64 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->    65 pc={(cc!=0x0)?L63:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 61
;;   new tail = 65

;;   ======================================================
;;   -- basic block 6 from 312 to 312 -- after reload
;;   ======================================================

;;	  0-->   312 pc=L123                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 312
;;   new tail = 312

;;   ======================================================
;;   -- basic block 7 from 72 to 314 -- after reload
;;   ======================================================

;;	  0-->    72 r0=call [`get_filesystem_list']   :cortex_a8_issue_branch
;;	  0-->   111 sl=r9                             :cortex_a8_default
;;	  1-->    77 r8=r4-0x1                         :cortex_a8_default
;;	  1-->    78 r5=r4                             :cortex_a8_default
;;	 32-->    76 [r4+r0]=r9                        :cortex_a8_load_store_1
;;	 32-->   314 pc=L118                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 32
;;   new head = 72
;;   new tail = 314

;;   ======================================================
;;   -- basic block 8 from 83 to 90 -- after reload
;;   ======================================================

;;	  0-->    83 r0=r8+0x1                         :cortex_a8_default
;;	  0-->   264 r1=0xa                            :cortex_a8_default
;;	  1-->    85 r0=call [`strchr']                :cortex_a8_issue_branch
;;	  1-->    88 r3=zxn([r8+0x1])                  :cortex_a8_load_store_1
;;	  3-->    89 cc=cmp(r3,0x9)                    :cortex_a8_default
;;	  4-->    92 (cc) r3=r5                        :cortex_a8_default
;;	  5-->    90 pc={(cc!=0x0)?L114:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 83
;;   new tail = 90

;;   ======================================================
;;   -- basic block 9 from 99 to 108 -- after reload
;;   ======================================================

;;	  0-->    99 r2=zxn([r8+0x2])                  :cortex_a8_load_store_1
;;	  0-->   269 r3=r5                             :cortex_a8_default
;;	  1-->   104 r1=r5                             :cortex_a8_default
;;	  1-->   103 r8=r8+0x1                         :cortex_a8_default
;;	  2-->   107 cc=cmp(r2,0xa)                    :cortex_a8_default
;;	  3-->   101 [r3++]=r2                         :cortex_a8_load_store_1
;;	  3-->   105 r5=r3                             :cortex_a8_default
;;	  4-->   108 pc={(cc!=0x0)?L106:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 99
;;   new tail = 108

;;   ======================================================
;;   -- basic block 10 from 113 to 113 -- after reload
;;   ======================================================

;;	  0-->   113 [r1]=sl                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 113
;;   new tail = 113

;;   ======================================================
;;   -- basic block 11 from 116 to 117 -- after reload
;;   ======================================================

;;	  0-->   116 r8=r0                             :cortex_a8_default
;;	  0-->   117 r5=r3                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 116
;;   new tail = 117

;;   ======================================================
;;   -- basic block 12 from 121 to 122 -- after reload
;;   ======================================================

;;	  0-->   121 cc=cmp(r8,0x0)                    :cortex_a8_default
;;	  2-->   122 pc={(cc!=0x0)?L120:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 121
;;   new tail = 122

;;   ======================================================
;;   -- basic block 13 from 134 to 127 -- after reload
;;   ======================================================

;;	  0-->   134 r8=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  0-->   125 r3=0x0                            :cortex_a8_default
;;	  1-->   127 [r5]=r3                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 1
;;   new head = 134
;;   new tail = 127

;;   ======================================================
;;   -- basic block 14 from 260 to 316 -- after reload
;;   ======================================================

;;	  0-->   260 r5=r4                             :cortex_a8_default
;;	  0-->   316 pc=L188                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 260
;;   new tail = 316

;;   ======================================================
;;   -- basic block 15 from 135 to 142 -- after reload
;;   ======================================================

;;	  0-->   135 r0=r7                             :cortex_a8_default
;;	  0-->   136 r1=r5                             :cortex_a8_default
;;	  1-->   137 r2=r6                             :cortex_a8_default
;;	  1-->   138 r3=[r8+0x4]                       :cortex_a8_load_store_1
;;	  2-->   139 r0=call [`do_mount_root']         :cortex_a8_issue_branch
;;	 34-->   141 cc=cmp(r0,0xfffffffffffffff3)     :cortex_a8_default
;;	 36-->   142 pc={(cc==0x0)?L149:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 135
;;   new tail = 142

;;   ======================================================
;;   -- basic block 16 from 143 to 144 -- after reload
;;   ======================================================

;;	  0-->   143 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  2-->   144 pc={(cc==0x0)?L237:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 143
;;   new tail = 144

;;   ======================================================
;;   -- basic block 17 from 145 to 146 -- after reload
;;   ======================================================

;;	  0-->   145 cc=cmp(r0,0xffffffffffffffea)     :cortex_a8_default
;;	  2-->   146 pc={(cc!=0x0)?L281:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 145
;;   new tail = 146

;;   ======================================================
;;   -- basic block 18 from 320 to 320 -- after reload
;;   ======================================================

;;	  0-->   320 pc=L319                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 320
;;   new tail = 320

;;   ======================================================
;;   -- basic block 19 from 151 to 322 -- after reload
;;   ======================================================

;;	  0-->   151 r6=r6|0x1                         :cortex_a8_default
;;	  0-->   322 pc=L128                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 151
;;   new tail = 322

;;   ======================================================
;;   -- basic block 20 from 156 to 324 -- after reload
;;   ======================================================

;;	  0-->   156 r0=r5                             :cortex_a8_default
;;	  1-->   157 r0=call [`strlen']                :cortex_a8_issue_branch
;;	 33-->   160 r0=r0+0x1                         :cortex_a8_default
;;	 34-->   161 r5=r5+r0                          :cortex_a8_default
;;	 34-->   324 pc=L188                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 34
;;   new head = 156
;;   new tail = 324

;;   ======================================================
;;   -- basic block 21 from 169 to 326 -- after reload
;;   ======================================================

;;	  0-->   295 r3=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  0-->   169 r1=sp                             :cortex_a8_default
;;	  3-->   168 r0=[r3]                           :cortex_a8_load_store_1
;;	  4-->   170 r0=call [`__bdevname']            :cortex_a8_issue_branch
;;	  4-->   294 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  5-->   176 r2=sp                             :cortex_a8_default
;;	  5-->   174 r0=`*.LC4'                        :cortex_a8_load_store_1
;;	  7-->   175 r1=[r3+0x54]                      :cortex_a8_load_store_1
;;	  8-->   177 r0=call [`printk']                :cortex_a8_issue_branch
;;	  8-->   179 r0=`*.LC5'                        :cortex_a8_load_store_1
;;	  9-->   180 r0=call [`printk']                :cortex_a8_issue_branch
;;	 10-->   181 call [`printk_all_partitions']    :cortex_a8_issue_branch
;;	 10-->   326 pc=L306                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 10
;;   new head = 169
;;   new tail = 326

;;   ======================================================
;;   -- basic block 22 from 191 to 193 -- after reload
;;   ======================================================

;;	  0-->   191 r3=zxn([r5])                      :cortex_a8_load_store_1
;;	  2-->   192 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   193 pc={(cc!=0x0)?L190:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 191
;;   new tail = 193

;;   ======================================================
;;   -- basic block 23 from 196 to 328 -- after reload
;;   ======================================================

;;	  0-->   196 r0=`*.LC7'                        :cortex_a8_load_store_1
;;	  1-->   197 r0=call [`printk']                :cortex_a8_issue_branch
;;	  2-->   198 call [`printk_all_partitions']    :cortex_a8_issue_branch
;;	  2-->   200 r0=`*.LC8'                        :cortex_a8_load_store_1
;;	  3-->   201 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->   328 pc=L216                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 196
;;   new tail = 328

;;   ======================================================
;;   -- basic block 24 from 208 to 215 -- after reload
;;   ======================================================

;;	  0-->   208 r1=r4                             :cortex_a8_default
;;	  0-->   258 r0=`*.LC9'                        :cortex_a8_load_store_1
;;	  1-->   209 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->   210 r0=r4                             :cortex_a8_default
;;	  2-->   211 r0=call [`strlen']                :cortex_a8_issue_branch
;;	 34-->   214 r0=r0+0x1                         :cortex_a8_default
;;	 35-->   215 r4=r4+r0                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 35
;;   new head = 208
;;   new tail = 215

;;   ======================================================
;;   -- basic block 25 from 219 to 221 -- after reload
;;   ======================================================

;;	  0-->   219 r3=zxn([r4])                      :cortex_a8_load_store_1
;;	  2-->   220 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   221 pc={(cc!=0x0)?L218:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 219
;;   new tail = 221

;;   ======================================================
;;   -- basic block 26 from 224 to 230 -- after reload
;;   ======================================================

;;	  0-->   224 r0=`*.LC10'                       :cortex_a8_load_store_1
;;	  1-->   225 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->   293 r3=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  2-->   229 r1=sp                             :cortex_a8_default
;;	  4-->   228 r0=[r3]                           :cortex_a8_load_store_1
;;	  5-->   230 r0=call [`__bdevname']            :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 224
;;   new tail = 230

;;   ======================================================
;;   -- basic block 27 from 234 to 235 -- after reload
;;   ======================================================

;;	  0-->   234 r1=sp                             :cortex_a8_default
;;	  0-->   233 r0=`*.LC6'                        :cortex_a8_load_store_1
;;	  1-->   235 call [`panic']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 234
;;   new tail = 235

;;   ======================================================
;;   -- basic block 28 from 241 to 302 -- after reload
;;   ======================================================

;;	  0-->   292 r3=`names_cachep'                 :cortex_a8_load_store_1
;;	  0-->   241 r1=r4                             :cortex_a8_default
;;	  3-->   240 r0=[r3]                           :cortex_a8_load_store_1
;;	  4-->   242 call [`kmem_cache_free']          :cortex_a8_issue_branch
;;	  4-->   302 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 4
;;   new head = 241
;;   new tail = 302





mount_block_root

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={37d,29u} r1={31d,12u} r2={24d,5u} r3={35d,17u} r4={3d,11u} r5={8d,12u} r6={3d,4u} r7={2d,3u} r8={5d,8u} r9={2d,6u} r10={2d,3u} r12={19d} r13={3d,54u,4d} r14={20d,2u} r15={19d} r16={19d} r17={19d} r18={19d} r19={19d} r20={19d} r21={19d} r22={19d} r23={19d} r24={30d,12u} r27={19d} r28={19d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={19d} r38={19d} r39={19d} r40={19d} r41={19d} r42={19d} r43={19d} r44={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} r76={19d} r77={19d} r78={19d} r79={19d} r80={19d} r81={19d} r82={19d} r83={19d} r84={19d} r85={19d} r86={19d} r87={19d} r88={19d} r89={19d} r90={19d} r91={19d} r92={19d} r93={19d} r94={19d} r95={19d} r96={19d} r97={19d} r98={19d} r99={19d} r100={19d} r101={19d} r102={19d} r103={19d} r104={19d} r105={19d} r106={19d} r107={19d} r108={19d} r109={19d} r110={19d} r111={19d} r112={19d} r113={19d} r114={19d} r115={19d} r116={19d} r117={19d} r118={19d} r119={19d} r120={19d} r121={19d} r122={19d} r123={19d} r124={19d} r125={19d} r126={19d} r127={19d} 
;;    total ref usage 2496{2314d,178u,4e} in 120{101 regular + 19 call} insns.
(note 29 0 33 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 29 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 32 33 296 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 296 32 298 2 init/do_mounts.c:306 (set (reg/f:SI 3 r3 [181])
        (symbol_ref:SI ("names_cachep") [flags 0xc0] <var_decl 0x1114f6c0 names_cachep>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("names_cachep") [flags 0xc0] <var_decl 0x1114f6c0 names_cachep>)
        (nil)))

(insn/f:TI 298 296 30 2 init/do_mounts.c:305 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 9 r9)
            (expr_list:REG_DEAD (reg:SI 8 r8)
                (expr_list:REG_DEAD (reg:SI 7 r7)
                    (expr_list:REG_DEAD (reg:SI 6 r6)
                        (expr_list:REG_DEAD (reg:SI 5 r5)
                            (expr_list:REG_DEAD (reg:SI 4 r4)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -32 [0xffffffffffffffe0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(insn:TI 30 298 299 2 init/do_mounts.c:305 (set (reg/v/f:SI 7 r7 [orig:179 name ] [179])
        (reg:SI 0 r0 [ name ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ name ])
        (nil)))

(insn/f:TI 299 30 300 2 init/do_mounts.c:305 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(note 300 299 36 2 NOTE_INSN_PROLOGUE_END)

(insn 36 300 31 2 init/do_mounts.c:306 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (reg/f:SI 3 r3 [181]) [0 names_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [181])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("names_cachep") [flags 0xc0] <var_decl 0x1114f6c0 names_cachep>) [0 names_cachep+0 S4 A32])
            (nil))))

(insn:TI 31 36 37 2 init/do_mounts.c:305 (set (reg/v:SI 6 r6 [orig:180 flags ] [180])
        (reg:SI 1 r1 [ flags ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ flags ])
        (nil)))

(insn 37 31 38 2 init/do_mounts.c:306 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 38 37 41 2 init/do_mounts.c:306 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x11479e80 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 41 38 42 2 init/do_mounts.c:265 (set (reg/f:SI 3 r3 [182])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 42 41 43 2 init/do_mounts.c:265 (set (reg/f:SI 9 r9 [orig:169 root_fs_names.889 ] [169])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [182])
                (const_int 8 [0x8])) [0 root_fs_names+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [182])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 8 [0x8]))) [0 root_fs_names+0 S4 A32])
            (nil))))

(insn:TI 43 42 39 2 init/do_mounts.c:265 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 9 r9 [orig:169 root_fs_names.889 ] [169])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 39 43 44 2 init/do_mounts.c:306 (set (reg/v/f:SI 4 r4 [orig:175 fs_names ] [175])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 44 39 45 2 init/do_mounts.c:265 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 2 -> ( 3 7)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)
;; Succ edge  7 [0.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%]  (fallthru)
(note 45 44 47 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 47 45 49 3 init/do_mounts.c:266 (set (reg:SI 1 r1)
        (reg/f:SI 9 r9 [orig:169 root_fs_names.889 ] [169])) 167 {*arm_movsi_insn} (nil))

(insn 49 47 48 3 init/do_mounts.c:263 (set (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])
        (reg/f:SI 0 r0 [orig:175 fs_names ] [175])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 48 49 56 3 init/do_mounts.c:266 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcpy") [flags 0x41] <function_decl 0x51157780 strcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 56 48 309 3 init/do_mounts.c:269 (set (reg:SI 2 r2 [223])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 309 56 310 3 (set (pc)
        (label_ref 268)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 310 309 63)

;; Start of basic block ( 5) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [91.0%] 
(code_label 63 310 52 4 50 "" [1 uses])

(note 52 63 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 53 52 58 4 init/do_mounts.c:268 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:170 D.53045 ] [170])
            (const_int 44 [0x2c]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:170 D.53045 ] [170])
        (nil)))

(insn 58 53 268 4 init/do_mounts.c:269 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem:QI (plus:SI (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])
                    (const_int -1 [0xffffffffffffffff])) [0 S1 A8])
            (reg:QI 2 r2 [223]))) 2350 {neon_vornv2di+83} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 268 58 267 5 70 "" [1 uses])

(note 267 268 61 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 267 64 5 init/do_mounts.c:267 discrim 1 (set (reg:SI 3 r3 [orig:170 D.53045 ] [170])
        (zero_extend:SI (mem:QI (post_inc:SI (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_INC (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])
        (nil)))

(insn:TI 64 61 65 5 init/do_mounts.c:267 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:170 D.53045 ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 65 64 311 5 init/do_mounts.c:267 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 5 -> ( 4 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [91.0%] 
;; Succ edge  6 [9.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [9.0%]  (fallthru)
(note 311 65 312 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 312 311 313 6 (set (pc)
        (label_ref 123)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  13 [100.0%]  (loop_exit)

(barrier 313 312 69)

;; Start of basic block ( 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5] 8 [r8] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
(code_label 69 313 70 7 48 "" [1 uses])

(note 70 69 73 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 73 70 72 7 NOTE_INSN_DELETED)

(call_insn:TI 72 73 111 7 init/do_mounts.c:272 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_filesystem_list") [flags 0x41] <function_decl 0x1118fb80 get_filesystem_list>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 111 72 77 7 init/do_mounts.c:282 (set (reg:SI 10 sl [225])
        (reg/f:SI 9 r9 [orig:169 root_fs_names.889 ] [169])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 77 111 78 7 init/do_mounts.c:276 (set (reg/v/f:SI 8 r8 [orig:172 p ] [172])
        (plus:SI (reg/v/f:SI 4 r4 [orig:175 fs_names ] [175])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 78 77 76 7 init/do_mounts.c:263 (set (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])
        (reg/v/f:SI 4 r4 [orig:175 fs_names ] [175])) 167 {*arm_movsi_insn} (nil))

(insn:TI 76 78 314 7 init/do_mounts.c:275 (set (mem:QI (plus:SI (reg/v/f:SI 4 r4 [orig:175 fs_names ] [175])
                (reg:SI 0 r0)) [0 S1 A8])
        (reg:QI 9 r9 [orig:169 root_fs_names.889 ] [169])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 314 76 315 7 (set (pc)
        (label_ref 118)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 315 314 120)

;; Start of basic block ( 12) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [91.0%] 
(code_label 120 315 81 8 56 "" [1 uses])

(note 81 120 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 82 81 83 8 NOTE_INSN_DELETED)

(insn:TI 83 82 264 8 init/do_mounts.c:277 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 8 r8 [orig:172 p ] [172])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 264 83 85 8 init/do_mounts.c:277 (set (reg:SI 1 r1)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 85 264 88 8 init/do_mounts.c:277 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strchr") [flags 0x41] <function_decl 0x51157580 strchr>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 88 85 89 8 init/do_mounts.c:278 (set (reg:SI 3 r3 [188])
        (zero_extend:SI (mem:QI (plus:SI (reg/v/f:SI 8 r8 [orig:172 p ] [172])
                    (const_int 1 [0x1])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 89 88 92 8 init/do_mounts.c:278 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [188])
            (const_int 9 [0x9]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 92 89 90 8 init/do_mounts.c:278 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 3 r3 [orig:162 fs_names.1172 ] [162])
            (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 90 92 106 8 init/do_mounts.c:278 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 8 -> ( 9 11)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  9 [28.0%]  (fallthru)
;; Succ edge  11 [72.0%] 

;; Start of basic block ( 9 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  9 [86.0%]  (dfs_back)
;; Pred edge  8 [28.0%]  (fallthru)
(code_label 106 90 98 9 55 "" [1 uses])

(note 98 106 99 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 99 98 269 9 init/do_mounts.c:280 discrim 1 (set (reg:SI 2 r2 [orig:163 temp.1171 ] [163])
        (zero_extend:SI (mem:QI (plus:SI (reg:SI 8 r8 [orig:168 ivtmp.1163 ] [168])
                    (const_int 2 [0x2])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 269 99 104 9 init/do_mounts.c:280 discrim 1 (set (reg/v/f:SI 3 r3 [orig:162 fs_names.1172 ] [162])
        (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])) 167 {*arm_movsi_insn} (nil))

(insn:TI 104 269 103 9 init/do_mounts.c:280 discrim 1 (set (reg/v/f:SI 1 r1 [orig:161 fs_names.1173 ] [161])
        (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])
        (nil)))

(insn 103 104 107 9 init/do_mounts.c:280 discrim 1 (set (reg:SI 8 r8 [orig:168 ivtmp.1163 ] [168])
        (plus:SI (reg:SI 8 r8 [orig:168 ivtmp.1163 ] [168])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 107 103 101 9 init/do_mounts.c:280 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:163 temp.1171 ] [163])
            (const_int 10 [0xa]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 101 107 105 9 init/do_mounts.c:280 discrim 1 (set (mem:QI (post_inc:SI (reg/v/f:SI 3 r3 [orig:162 fs_names.1172 ] [162])) [0 S1 A8])
        (reg:QI 2 r2 [orig:163 temp.1171 ] [163])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 2 r2 [orig:163 temp.1171 ] [163])
        (expr_list:REG_INC (reg/v/f:SI 3 r3 [orig:162 fs_names.1172 ] [162])
            (nil))))

(insn 105 101 108 9 init/do_mounts.c:280 discrim 1 (set (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])
        (reg/v/f:SI 3 r3 [orig:162 fs_names.1172 ] [162])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 108 105 109 9 init/do_mounts.c:280 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 106)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 9 -> ( 9 10)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  9 [86.0%]  (dfs_back)
;; Succ edge  10 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 10 [sl] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [14.0%]  (fallthru,loop_exit)
(note 109 108 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 113 109 114 10 init/do_mounts.c:282 (set (mem:QI (reg/v/f:SI 1 r1 [orig:161 fs_names.1173 ] [161]) [0 S1 A8])
        (reg:QI 10 sl [225])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:161 fs_names.1173 ] [161])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 8) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 5 [r5] 8 [r8]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5] 8 [r8]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  8 [72.0%] 
(code_label 114 113 115 11 54 "" [1 uses])

(note 115 114 116 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 116 115 117 11 init/do_mounts.c:282 (set (reg/v/f:SI 8 r8 [orig:172 p ] [172])
        (reg/v/f:SI 0 r0 [orig:164 p.1170 ] [164])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:164 p.1170 ] [164])
        (nil)))

(insn 117 116 118 11 init/do_mounts.c:282 (set (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])
        (reg/v/f:SI 3 r3 [orig:162 fs_names.1172 ] [162])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:162 fs_names.1172 ] [162])
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 11 7) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru,dfs_back)
;; Pred edge  7 [100.0%] 
(code_label 118 117 119 12 52 "" [1 uses])

(note 119 118 121 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 121 119 122 12 init/do_mounts.c:276 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:172 p ] [172])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 122 121 123 12 init/do_mounts.c:276 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 12 -> ( 8 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [91.0%] 
;; Succ edge  13 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 12 6) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8]
;; live  kill	

;; Pred edge  12 [9.0%]  (fallthru,loop_exit)
;; Pred edge  6 [100.0%]  (loop_exit)
(code_label 123 122 124 13 51 "" [1 uses])

(note 124 123 134 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 134 124 125 13 init/do_mounts.c:318 (set (reg/f:SI 8 r8 [221])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 125 134 127 13 init/do_mounts.c:285 (set (reg:SI 3 r3 [192])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 127 125 128 13 init/do_mounts.c:285 (set (mem:QI (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166]) [0 S1 A8])
        (reg:QI 3 r3 [192])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg/v/f:SI 5 r5 [orig:166 fs_names.1168 ] [166])
        (expr_list:REG_DEAD (reg:QI 3 r3 [192])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 19) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  19 [100.0%] 
(code_label 128 127 129 14 57 ("retry") [1 uses])

(note 129 128 260 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 260 129 316 14 init/do_mounts.c:317 (set (reg/v/f:SI 5 r5 [orig:174 p ] [174])
        (reg/v/f:SI 4 r4 [orig:175 fs_names ] [175])) 167 {*arm_movsi_insn} (nil))

(jump_insn 316 260 317 14 init/do_mounts.c:317 (set (pc)
        (label_ref 188)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  22 [100.0%] 

(barrier 317 316 190)

;; Start of basic block ( 22) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  22 [100.0%] 
(code_label 190 317 133 15 63 "" [1 uses])

(note 133 190 135 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 135 133 136 15 init/do_mounts.c:318 (set (reg:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:179 name ] [179])) 167 {*arm_movsi_insn} (nil))

(insn 136 135 137 15 init/do_mounts.c:318 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:174 p ] [174])) 167 {*arm_movsi_insn} (nil))

(insn:TI 137 136 138 15 init/do_mounts.c:318 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:180 flags ] [180])) 167 {*arm_movsi_insn} (nil))

(insn 138 137 139 15 init/do_mounts.c:318 (set (reg:SI 3 r3)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 8 r8 [221])
                (const_int 4 [0x4])) [0 root_mount_data+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))) [0 root_mount_data+0 S4 A32])
        (nil)))

(call_insn:TI 139 138 141 15 init/do_mounts.c:318 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_mount_root") [flags 0x3] <function_decl 0x12135c00 do_mount_root>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 141 139 142 15 init/do_mounts.c:319 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:173 err ] [173])
            (const_int -13 [0xfffffffffffffff3]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 142 141 248 15 init/do_mounts.c:319 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 149)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 15 -> ( 19 16)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  19 [29.0%]  (loop_exit)
;; Succ edge  16 [71.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [71.0%]  (fallthru)
(note 248 142 143 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 143 248 144 16 init/do_mounts.c:319 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:173 err ] [173])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 144 143 249 16 init/do_mounts.c:319 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 237)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 16 -> ( 28 17)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  28 [50.0%]  (loop_exit)
;; Succ edge  17 [50.0%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  16 [50.0%]  (fallthru)
(note 249 144 145 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 145 249 146 17 init/do_mounts.c:319 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:173 err ] [173])
            (const_int -22 [0xffffffffffffffea]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 0 r0 [orig:173 err ] [173])
        (nil)))

(jump_insn:TI 146 145 318 17 init/do_mounts.c:319 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 281)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 17 -> ( 18 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  18 [29.0%]  (fallthru)
;; Succ edge  21 [71.0%]  (loop_exit)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  17 [29.0%]  (fallthru)
(note 318 146 320 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 320 318 321 18 (set (pc)
        (label_ref 319)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 20)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  20 [100.0%] 

(barrier 321 320 149)

;; Start of basic block ( 15) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  15 [29.0%]  (loop_exit)
(code_label 149 321 150 19 61 "" [1 uses])

(note 150 149 151 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 151 150 322 19 init/do_mounts.c:323 (set (reg/v:SI 6 r6 [orig:180 flags ] [180])
        (ior:SI (reg/v:SI 6 r6 [orig:180 flags ] [180])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(jump_insn 322 151 323 19 init/do_mounts.c:324 (set (pc)
        (label_ref 128)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 14)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 323 322 319)

;; Start of basic block ( 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  18 [100.0%] 
(code_label 319 323 155 20 73 "" [1 uses])

(note 155 319 158 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 158 155 156 20 NOTE_INSN_DELETED)

(insn:TI 156 158 157 20 init/do_mounts.c:317 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:174 p ] [174])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 157 156 160 20 init/do_mounts.c:317 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41] <function_decl 0x51157b80 strlen>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 160 157 161 20 init/do_mounts.c:317 (set (reg:SI 0 r0 [196])
        (plus:SI (reg:SI 0 r0)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 161 160 324 20 init/do_mounts.c:317 (set (reg/v/f:SI 5 r5 [orig:174 p ] [174])
        (plus:SI (reg/v/f:SI 5 r5 [orig:174 p ] [174])
            (reg:SI 0 r0 [196]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [196])
        (nil)))

(jump_insn 324 161 325 20 (set (pc)
        (label_ref 188)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  22 [100.0%] 

(barrier 325 324 281)

;; Start of basic block ( 17) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  17 [71.0%]  (loop_exit)
(code_label 281 325 165 21 71 "" [1 uses])

(note 165 281 295 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 295 165 169 21 init/do_mounts.c:334 (set (reg/f:SI 3 r3 [197])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 169 295 168 21 init/do_mounts.c:334 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 168 169 170 21 init/do_mounts.c:334 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 3 r3 [197]) [0 ROOT_DEV+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [197])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182]) [0 ROOT_DEV+0 S4 A32])
            (nil))))

(call_insn:TI 170 168 294 21 init/do_mounts.c:334 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__bdevname") [flags 0x41] <function_decl 0x1115b800 __bdevname>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 294 170 176 21 init/do_mounts.c:336 (set (reg/f:SI 3 r3 [194])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 176 294 174 21 init/do_mounts.c:336 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 174 176 175 21 init/do_mounts.c:336 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x121779b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x121779b0>)
        (nil)))

(insn:TI 175 174 177 21 init/do_mounts.c:336 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [194])
                (const_int 84 [0x54])) [0 root_device_name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [194])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 84 [0x54]))) [0 root_device_name+0 S4 A32])
            (nil))))

(call_insn:TI 177 175 179 21 init/do_mounts.c:336 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 179 177 180 21 init/do_mounts.c:338 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x121c2770>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x121c2770>)
        (nil)))

(call_insn:TI 180 179 181 21 init/do_mounts.c:338 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(call_insn:TI 181 180 326 21 init/do_mounts.c:340 (parallel [
            (call (mem:SI (symbol_ref:SI ("printk_all_partitions") [flags 0x41] <function_decl 0x115c3e80 printk_all_partitions>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 326 181 327 21 (set (pc)
        (label_ref 306)) 242 {*arm_jump} (nil))
;; End of basic block 21 -> ( 27)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  27 [100.0%] 

(barrier 327 326 188)

;; Start of basic block ( 14 20) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%] 
;; Pred edge  20 [100.0%] 
(code_label 188 327 189 22 58 "" [2 uses])

(note 189 188 191 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 191 189 192 22 init/do_mounts.c:317 discrim 1 (set (reg:SI 3 r3 [205])
        (zero_extend:SI (mem:QI (reg/v/f:SI 5 r5 [orig:174 p ] [174]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 192 191 193 22 init/do_mounts.c:317 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [205])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [205])
        (nil)))

(jump_insn:TI 193 192 194 22 init/do_mounts.c:317 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 190)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 22 -> ( 15 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15 [100.0%] 
;; Succ edge  23 [0.0%]  (fallthru,loop_exit)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  22 [0.0%]  (fallthru,loop_exit)
(note 194 193 196 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn:TI 196 194 197 23 init/do_mounts.c:348 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x1218bb40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x1218bb40>)
        (nil)))

(call_insn:TI 197 196 198 23 init/do_mounts.c:348 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(call_insn:TI 198 197 200 23 init/do_mounts.c:349 (parallel [
            (call (mem:SI (symbol_ref:SI ("printk_all_partitions") [flags 0x41] <function_decl 0x115c3e80 printk_all_partitions>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 200 198 201 23 init/do_mounts.c:350 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x12177a00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x12177a00>)
        (nil)))

(call_insn:TI 201 200 328 23 init/do_mounts.c:350 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 328 201 329 23 init/do_mounts.c:351 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 23 -> ( 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  25 [100.0%] 

(barrier 329 328 218)

;; Start of basic block ( 25) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  25 [0.0%] 
(code_label 218 329 205 24 65 "" [1 uses])

(note 205 218 212 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 212 205 208 24 NOTE_INSN_DELETED)

(insn:TI 208 212 258 24 init/do_mounts.c:352 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:167 p.1164 ] [167])) 167 {*arm_movsi_insn} (nil))

(insn 258 208 209 24 init/do_mounts.c:352 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x121ccfe0>)) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 209 258 210 24 init/do_mounts.c:352 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 210 209 211 24 init/do_mounts.c:351 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:167 p.1164 ] [167])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 211 210 214 24 init/do_mounts.c:351 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41] <function_decl 0x51157b80 strlen>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 214 211 215 24 init/do_mounts.c:351 discrim 2 (set (reg:SI 0 r0 [210])
        (plus:SI (reg:SI 0 r0)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 215 214 216 24 init/do_mounts.c:351 discrim 2 (set (reg/v/f:SI 4 r4 [orig:167 p.1164 ] [167])
        (plus:SI (reg/v/f:SI 4 r4 [orig:167 p.1164 ] [167])
            (reg:SI 0 r0 [210]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [210])
        (nil)))
;; End of basic block 24 -> ( 25)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  25 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 24 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  24 [100.0%]  (fallthru,dfs_back)
;; Pred edge  23 [100.0%] 
(code_label 216 215 217 25 64 "" [1 uses])

(note 217 216 219 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 219 217 220 25 init/do_mounts.c:351 discrim 1 (set (reg:SI 3 r3 [211])
        (zero_extend:SI (mem:QI (reg/v/f:SI 4 r4 [orig:167 p.1164 ] [167]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 220 219 221 25 init/do_mounts.c:351 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [211])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [211])
        (nil)))

(jump_insn:TI 221 220 222 25 init/do_mounts.c:351 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 218)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 25 -> ( 24 26)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  24 [0.0%] 
;; Succ edge  26 [100.0%]  (fallthru,loop_exit)

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  25 [100.0%]  (fallthru,loop_exit)
(note 222 221 224 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 224 222 225 26 init/do_mounts.c:353 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x121ccf60>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x121ccf60>)
        (nil)))

(call_insn:TI 225 224 293 26 init/do_mounts.c:353 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 293 225 229 26 init/do_mounts.c:355 (set (reg/f:SI 3 r3 [213])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 229 293 228 26 init/do_mounts.c:355 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 228 229 230 26 init/do_mounts.c:355 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 3 r3 [213]) [0 ROOT_DEV+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [213])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182]) [0 ROOT_DEV+0 S4 A32])
            (nil))))

(call_insn:TI 230 228 306 26 init/do_mounts.c:355 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__bdevname") [flags 0x41] <function_decl 0x1115b800 __bdevname>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 26 -> ( 27)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  27 [100.0%]  (fallthru)

;; Start of basic block ( 26 21) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  26 [100.0%]  (fallthru)
;; Pred edge  21 [100.0%] 
(code_label 306 230 304 27 72 "" [1 uses])

(note 304 306 234 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 234 304 233 27 init/do_mounts.c:357 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 233 234 235 27 init/do_mounts.c:357 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x1218bb00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x1218bb00>)
        (nil)))

(call_insn:TI 235 233 236 27 init/do_mounts.c:357 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a67680 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 27 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 236 235 237)

;; Start of basic block ( 16) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  16 [50.0%]  (loop_exit)
(code_label 237 236 238 28 62 ("out") [1 uses])

(note 238 237 292 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn:TI 292 238 241 28 init/do_mounts.c:359 (set (reg/f:SI 3 r3 [217])
        (symbol_ref:SI ("names_cachep") [flags 0xc0] <var_decl 0x1114f6c0 names_cachep>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("names_cachep") [flags 0xc0] <var_decl 0x1114f6c0 names_cachep>)
        (nil)))

(insn 241 292 240 28 init/do_mounts.c:359 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:175 fs_names ] [175])) 167 {*arm_movsi_insn} (nil))

(insn:TI 240 241 242 28 init/do_mounts.c:359 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (reg/f:SI 3 r3 [217]) [0 names_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [217])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("names_cachep") [flags 0xc0] <var_decl 0x1114f6c0 names_cachep>) [0 names_cachep+0 S4 A32])
            (nil))))

(call_insn:TI 242 240 301 28 init/do_mounts.c:359 (parallel [
            (call (mem:SI (symbol_ref:SI ("kmem_cache_free") [flags 0x41] <function_decl 0x11460b00 kmem_cache_free>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 301 242 302 28 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 302 301 303 28 init/do_mounts.c:360 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 28 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 303 302 291)

(note 291 303 297 NOTE_INSN_DELETED)

(note 297 291 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function mount_root (mount_root)[0:2717] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 20 (  1.8)


mount_root

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,10u} r1={12d,5u} r2={13d,6u} r3={17d,8u} r4={5d,8u} r5={3d,4u} r6={2d,3u} r7={2d,3u} r12={8d,1u} r13={2d,22u} r14={8d,2u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={12d,4u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 945{869d,76u,0e} in 52{45 regular + 7 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 9 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 13 [sp] 24 [cc]
;; live  kill	 3 [r3]
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 2 )->[3]->( 8 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  in  	 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 4 7 )->[5]->( 10 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 5 )->[6]->( 8 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 6 )->[7]->( 5 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 3 6 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 2 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 9 5 )->[10]->( 1 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 10 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 9 to worklist
  Adding insn 107 to worklist
  Adding insn 18 to worklist
  Adding insn 15 to worklist
  Adding insn 32 to worklist
  Adding insn 29 to worklist
  Adding insn 35 to worklist
  Adding insn 112 to worklist
  Adding insn 40 to worklist
  Adding insn 54 to worklist
  Adding insn 51 to worklist
  Adding insn 81 to worklist
  Adding insn 76 to worklist
  Adding insn 61 to worklist
  Adding insn 110 to worklist
Finished finding needed instructions:
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 80 to worklist
  Adding insn 101 to worklist
  Adding insn 79 to worklist
  Adding insn 75 to worklist
  Adding insn 69 to worklist
  Adding insn 97 to worklist
  Adding insn 66 to worklist
  Adding insn 73 to worklist
  Adding insn 68 to worklist
  Adding insn 74 to worklist
  Adding insn 96 to worklist
  Adding insn 58 to worklist
  Adding insn 102 to worklist
  Adding insn 60 to worklist
processing block 8 lr out =  5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 103 to worklist
  Adding insn 53 to worklist
  Adding insn 50 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 42 to worklist
  Adding insn 41 to worklist
processing block 6 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 43 to worklist
  Adding insn 34 to worklist
processing block 5 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 39 to worklist
  Adding insn 31 to worklist
  Adding insn 25 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 92 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 37 to worklist
  Adding insn 21 to worklist
  Adding insn 20 to worklist
  Adding insn 24 to worklist
processing block 3 lr out =  5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 17 to worklist
  Adding insn 14 to worklist
  Adding insn 13 to worklist
processing block 2 lr out =  5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 8 to worklist
  Adding insn 6 to worklist
  Adding insn 5 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 21 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 107 to 9 -- after reload
;;   ======================================================

;;	  0-->     5 r3=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  1-->   107 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  3-->     6 r3=[r3]                           :cortex_a8_load_store_1
;;	  5-->     8 {cc=cmp(r3 0>>0x14,0x0);clobber r3:cortex_a8_default
;;	  7-->     9 pc={(cc!=0x0)?L55:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 107
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 13 to 18 -- after reload
;;   ======================================================

;;	  0-->    13 r0=sp+0x4                         :cortex_a8_default
;;	  0-->    14 r1=sp                             :cortex_a8_default
;;	  1-->    15 r0=call [`nfs_root_data']         :cortex_a8_issue_branch
;;	 33-->    17 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->    18 pc={(cc!=0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 13
;;   new tail = 18

;;   ======================================================
;;   -- basic block 4 from 24 to 37 -- after reload
;;   ======================================================

;;	  0-->    24 r7=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->    20 r5=0x1                            :cortex_a8_default
;;	  1-->    21 r4=0x5                            :cortex_a8_default
;;	  1-->    37 r6=0x3e8                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 24
;;   new tail = 37

;;   ======================================================
;;   -- basic block 5 from 92 to 32 -- after reload
;;   ======================================================

;;	  0-->    92 r1=`*.LC11'                       :cortex_a8_load_store_1
;;	  1-->    27 r2=[r7]                           :cortex_a8_load_store_1
;;	  2-->    28 r3=[sp]                           :cortex_a8_load_store_1
;;	  3-->    25 r0=[sp+0x4]                       :cortex_a8_load_store_1
;;	  4-->    29 r0=call [`do_mount_root']         :cortex_a8_issue_branch
;;	 36-->    31 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 37-->    39 r0=r6*r4                          :cortex_a8_multiply_2
;;	 38-->    32 pc={(cc==0x0)?L87:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 38
;;   new head = 92
;;   new tail = 32

;;   ======================================================
;;   -- basic block 6 from 34 to 35 -- after reload
;;   ======================================================

;;	  0-->    34 cc=cmp(r5,0x6)                    :cortex_a8_default
;;	  0-->    43 r5=r5+0x1                         :cortex_a8_default
;;	  2-->    35 pc={(cc==0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 34
;;   new tail = 35

;;   ======================================================
;;   -- basic block 7 from 40 to 112 -- after reload
;;   ======================================================

;;	  0-->    41 r4=r4<<0x1                        :cortex_a8_default
;;	  0-->    40 call [`msleep']                   :cortex_a8_issue_branch
;;	  1-->    42 {r4=umin(r4,0x1e);clobber cc;}    :cortex_a8_default
;;	  1-->   112 pc=L44                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 40
;;   new tail = 112

;;   ======================================================
;;   -- basic block 8 from 50 to 54 -- after reload
;;   ======================================================

;;	  0-->    50 r0=`*.LC12'                       :cortex_a8_load_store_1
;;	  1-->    51 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->   103 r3=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  2-->    53 r2=0x200000                       :cortex_a8_default
;;	  4-->    54 [r3]=r2                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 50
;;   new tail = 54

;;   ======================================================
;;   -- basic block 9 from 60 to 81 -- after reload
;;   ======================================================

;;	  0-->   102 r3=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  1-->    60 r0=`*.LC13'                       :cortex_a8_load_store_1
;;	  3-->    58 r4=[r3]                           :cortex_a8_load_store_1
;;	  3-->    61 r0=call [`sys_unlink']            :cortex_a8_issue_branch
;;	  4-->    96 r3=0xfff00                        :cortex_a8_load_store_1
;;	  4-->    74 r1=0x6180                         :cortex_a8_default
;;	  5-->    68 r2=r4&0xff                        :cortex_a8_default
;;	  5-->    73 r0=`*.LC13'                       :cortex_a8_load_store_1
;;	  6-->    66 ip=r4 0>>0x14                     :cortex_a8_default
;;	  6-->    97 r3=r4&r3                          :cortex_a8_default
;;	  8-->    69 r2=ip<<0x8|r2                     :cortex_a8_default
;;	  9-->    75 r2=r3<<0xc|r2                     :cortex_a8_default
;;	 10-->    76 r0=call [`sys_mknod']             :cortex_a8_issue_branch
;;	 10-->   101 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	 11-->    79 r0=`*.LC13'                       :cortex_a8_load_store_1
;;	 13-->    80 r1=[r3]                           :cortex_a8_load_store_1
;;	 14-->    81 call [`mount_block_root']         :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 14
;;   new head = 60
;;   new tail = 81

;;   ======================================================
;;   -- basic block 10 from 110 to 110 -- after reload
;;   ======================================================

;;	  0-->   110 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 110
;;   new tail = 110





mount_root

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,10u} r1={12d,5u} r2={13d,6u} r3={17d,8u} r4={5d,8u} r5={3d,4u} r6={2d,3u} r7={2d,3u} r12={8d,1u} r13={2d,22u} r14={8d,2u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={12d,4u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 945{869d,76u,0e} in 52{45 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 13 [sp] 24 [cc]
;; live  kill	 3 [r3]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 2 5 2 NOTE_INSN_DELETED)

(insn:TI 5 7 107 2 init/do_mounts.c:435 (set (reg/f:SI 3 r3 [140])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn/f:TI 107 5 108 2 init/do_mounts.c:433 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_DEAD (reg:SI 2 r2)
                (expr_list:REG_DEAD (reg:SI 1 r1)
                    (expr_list:REG_DEAD (reg:SI 0 r0)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -32 [0xffffffffffffffe0])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 0 r0))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 1 r1))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 2 r2))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 24 [0x18])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 28 [0x1c])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 108 107 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 108 8 2 init/do_mounts.c:435 (set (reg:SI 3 r3 [orig:142 ROOT_DEV ] [142])
        (mem/c/i:SI (reg/f:SI 3 r3 [140]) [0 ROOT_DEV+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182]) [0 ROOT_DEV+0 S4 A32])
        (nil)))

(insn:TI 8 6 9 2 init/do_mounts.c:435 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg:SI 3 r3 [orig:142 ROOT_DEV ] [142])
                        (const_int 20 [0x14]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 3 r3))
        ]) 119 {*shiftsi3_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:142 ROOT_DEV ] [142])
        (expr_list:REG_UNUSED (reg:SI 3 r3)
            (nil))))

(jump_insn:TI 9 8 10 2 init/do_mounts.c:435 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 9)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [50.0%]  (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 11 10 12 3 NOTE_INSN_DELETED)

(note 12 11 16 3 NOTE_INSN_DELETED)

(note 16 12 13 3 NOTE_INSN_DELETED)

(insn:TI 13 16 14 3 init/do_mounts.c:374 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 14 13 15 3 init/do_mounts.c:374 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 15 14 17 3 init/do_mounts.c:374 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("nfs_root_data") [flags 0x41] <function_decl 0x11f60f00 nfs_root_data>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 17 15 18 3 init/do_mounts.c:375 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 18 17 19 3 init/do_mounts.c:375 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 8 4)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [100.0%] 
;; Succ edge  4 [0.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  in  	 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  3 [0.0%]  (fallthru)
(note 19 18 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 19 20 4 init/do_mounts.c:385 (set (reg/f:SI 7 r7 [166])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 20 24 21 4 init/do_mounts.c:375 (set (reg/v:SI 5 r5 [orig:138 try ] [138])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 21 20 37 4 init/do_mounts.c:375 (set (reg/v:SI 4 r4 [orig:137 timeout ] [137])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 37 21 44 4 include/linux/delay.h:52 (set (reg:SI 6 r6 [168])
        (const_int 1000 [0x3e8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1000 [0x3e8])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 7) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 44 37 22 5 81 "" [1 uses])

(note 22 44 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 30 22 92 5 NOTE_INSN_DELETED)

(insn:TI 92 30 27 5 init/do_mounts.c:385 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x121e0cc0>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 92 28 5 init/do_mounts.c:385 (set (reg:SI 2 r2)
        (mem/c/i:SI (reg/f:SI 7 r7 [166]) [0 root_mountflags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 root_mountflags+0 S4 A32])
        (nil)))

(insn:TI 28 27 25 5 init/do_mounts.c:385 (set (reg:SI 3 r3)
        (mem/f/c/i:SI (reg/f:SI 13 sp) [0 root_data+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn:TI 25 28 29 5 init/do_mounts.c:385 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 root_dev+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 29 25 31 5 init/do_mounts.c:385 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_mount_root") [flags 0x3] <function_decl 0x12135c00 do_mount_root>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 31 29 39 5 init/do_mounts.c:387 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 39 31 32 5 include/linux/delay.h:52 (set (reg:SI 0 r0)
        (mult:SI (reg:SI 6 r6 [168])
            (reg/v:SI 4 r4 [orig:137 timeout ] [137]))) 32 {*arm_mulsi3_v6} (nil))

(jump_insn:TI 32 39 33 5 init/do_mounts.c:387 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 5 -> ( 10 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [4.5%]  (loop_exit)
;; Succ edge  6 [95.5%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  5 [95.5%]  (fallthru)
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 34 33 43 6 init/do_mounts.c:389 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:138 try ] [138])
            (const_int 6 [0x6]))) 219 {*arm_cmpsi_insn} (nil))

(insn 43 34 35 6 init/do_mounts.c:384 (set (reg/v:SI 5 r5 [orig:138 try ] [138])
        (plus:SI (reg/v:SI 5 r5 [orig:138 try ] [138])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 35 43 36 6 init/do_mounts.c:389 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1667 [0x683])
            (nil))))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [16.7%]  (loop_exit)
;; Succ edge  7 [83.3%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  6 [83.3%]  (fallthru)
(note 36 35 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 38 36 41 7 NOTE_INSN_DELETED)

(insn:TI 41 38 40 7 init/do_mounts.c:394 (set (reg/v:SI 4 r4 [orig:133 timeout.1213 ] [133])
        (ashift:SI (reg/v:SI 4 r4 [orig:137 timeout ] [137])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(call_insn 40 41 42 7 include/linux/delay.h:52 (parallel [
            (call (mem:SI (symbol_ref:SI ("msleep") [flags 0x41] <function_decl 0x11595a80 msleep>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 42 40 112 7 init/do_mounts.c:394 (parallel [
            (set (reg/v:SI 4 r4 [orig:137 timeout ] [137])
                (umin:SI (reg/v:SI 4 r4 [orig:133 timeout.1213 ] [133])
                    (const_int 30 [0x1e])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(jump_insn 112 42 113 7 (set (pc)
        (label_ref 44)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 113 112 47)

;; Start of basic block ( 3 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  3 [100.0%] 
;; Pred edge  6 [16.7%]  (loop_exit)
(code_label 47 113 48 8 79 "" [2 uses])

(note 48 47 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 50 48 51 8 init/do_mounts.c:439 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x10c70d80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x10c70d80>)
        (nil)))

(call_insn:TI 51 50 103 8 init/do_mounts.c:439 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 103 51 53 8 init/do_mounts.c:440 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 53 103 54 8 init/do_mounts.c:440 (set (reg:SI 2 r2 [151])
        (const_int 2097152 [0x200000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2097152 [0x200000])
        (nil)))

(insn:TI 54 53 55 8 init/do_mounts.c:440 (set (mem/c/i:SI (reg/f:SI 3 r3 [150]) [0 ROOT_DEV+0 S4 A32])
        (reg:SI 2 r2 [151])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [150])
        (expr_list:REG_DEAD (reg:SI 2 r2 [151])
            (expr_list:REG_EQUAL (const_int 2097152 [0x200000])
                (nil)))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 2 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  2 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 55 54 56 9 78 "" [1 uses])

(note 56 55 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 62 56 63 9 NOTE_INSN_DELETED)

(note 63 62 67 9 NOTE_INSN_DELETED)

(note 67 63 71 9 NOTE_INSN_DELETED)

(note 71 67 72 9 NOTE_INSN_DELETED)

(note 72 71 102 9 NOTE_INSN_DELETED)

(insn:TI 102 72 60 9 init/do_mounts.c:456 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 60 102 58 9 init/do_mounts.h:18 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x121e4690>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x121e4690>)
        (nil)))

(insn:TI 58 60 61 9 init/do_mounts.c:456 (set (reg:SI 4 r4 [orig:135 ROOT_DEV.1211 ] [135])
        (mem/c/i:SI (reg/f:SI 3 r3 [152]) [0 ROOT_DEV+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [152])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182]) [0 ROOT_DEV+0 S4 A32])
            (nil))))

(call_insn 61 58 96 9 init/do_mounts.h:18 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_unlink") [flags 0x41] <function_decl 0x12103280 sys_unlink>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 96 61 74 9 init/do_mounts.h:19 (set (reg:SI 3 r3 [161])
        (const_int 1048320 [0xfff00])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1048320 [0xfff00])
        (nil)))

(insn 74 96 68 9 init/do_mounts.h:19 (set (reg:SI 1 r1)
        (const_int 24960 [0x6180])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 24960 [0x6180])
        (nil)))

(insn:TI 68 74 73 9 init/do_mounts.h:19 (set (reg:SI 2 r2 [159])
        (and:SI (reg:SI 4 r4 [orig:135 ROOT_DEV.1211 ] [135])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn 73 68 66 9 init/do_mounts.h:19 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x121e4690>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x121e4690>)
        (nil)))

(insn:TI 66 73 97 9 init/do_mounts.h:19 (set (reg:SI 12 ip [157])
        (lshiftrt:SI (reg:SI 4 r4 [orig:135 ROOT_DEV.1211 ] [135])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 97 66 69 9 init/do_mounts.h:19 (set (reg:SI 3 r3 [161])
        (and:SI (reg:SI 4 r4 [orig:135 ROOT_DEV.1211 ] [135])
            (reg:SI 3 r3 [161]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 69 97 75 9 init/do_mounts.h:19 (set (reg:SI 2 r2 [160])
        (ior:SI (ashift:SI (reg:SI 12 ip [157])
                (const_int 8 [0x8]))
            (reg:SI 2 r2 [159]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 12 ip [157])
        (nil)))

(insn:TI 75 69 76 9 init/do_mounts.h:19 (set (reg:SI 2 r2)
        (ior:SI (ashift:SI (reg:SI 3 r3 [161])
                (const_int 12 [0xc]))
            (reg:SI 2 r2 [160]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 3 r3 [161])
        (nil)))

(call_insn:TI 76 75 101 9 init/do_mounts.h:19 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_mknod") [flags 0x41] <function_decl 0x12103100 sys_mknod>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 101 76 79 9 init/do_mounts.c:457 (set (reg/f:SI 3 r3 [165])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 79 101 80 9 init/do_mounts.c:457 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x121e4690>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x121e4690>)
        (nil)))

(insn:TI 80 79 81 9 init/do_mounts.c:457 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 3 r3 [165]) [0 root_mountflags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [165])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 root_mountflags+0 S4 A32])
            (nil))))

(call_insn:TI 81 80 87 9 init/do_mounts.c:457 (parallel [
            (call (mem:SI (symbol_ref:SI ("mount_block_root") [flags 0x3] <function_decl 0x1212c900 mount_block_root>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 5) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  5 [4.5%]  (loop_exit)
(code_label 87 81 90 10 82 "" [1 uses])

(note 90 87 109 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 109 90 110 10 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 110 109 111 10 init/do_mounts.c:459 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 111 110 100)

(note 100 111 104 NOTE_INSN_DELETED)

(note 104 100 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function name_to_dev_t (name_to_dev_t)[0:2707]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 40 n_edges 63 count 78 (    2)


name_to_dev_t

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={36d,48u} r1={32d,16u} r2={36d,19u,2d} r3={35d,23u} r4={8d,23u} r5={5d,11u,1d} r6={12d,10u,1d} r7={2d,3u} r8={2d,3u} r12={17d} r13={3d,78u,8d} r14={18d,2u} r15={17d} r16={17d} r17={17d} r18={17d} r19={17d} r20={17d} r21={17d} r22={17d} r23={17d} r24={43d,28u} r25={5d} r27={17d} r28={17d} r29={17d} r30={17d} r31={17d} r32={17d} r33={17d} r34={17d} r35={17d} r36={17d} r37={17d} r38={17d} r39={17d} r40={17d} r41={17d} r42={17d} r43={17d} r44={17d} r45={17d} r46={17d} r47={17d} r48={17d} r49={17d} r50={17d} r51={17d} r52={17d} r53={17d} r54={17d} r55={17d} r56={17d} r57={17d} r58={17d} r59={17d} r60={17d} r61={17d} r62={17d} r63={17d} r64={17d} r65={17d} r66={17d} r67={17d} r68={17d} r69={17d} r70={17d} r71={17d} r72={17d} r73={17d} r74={17d} r75={17d} r76={17d} r77={17d} r78={17d} r79={17d} r80={17d} r81={17d} r82={17d} r83={17d} r84={17d} r85={17d} r86={17d} r87={17d} r88={17d} r89={17d} r90={17d} r91={17d} r92={17d} r93={17d} r94={17d} r95={17d} r96={17d} r97={17d} r98={17d} r99={17d} r100={17d} r101={17d} r102={17d} r103={17d} r104={17d} r105={17d} r106={17d} r107={17d} r108={17d} r109={17d} r110={17d} r111={17d} r112={17d} r113={17d} r114={17d} r115={17d} r116={17d} r117={17d} r118={17d} r119={17d} r120={17d} r121={17d} r122={17d} r123={17d} r124={17d} r125={17d} r126={17d} r127={17d} 
;;    total ref usage 2400{2119d,264u,17e} in 173{156 regular + 17 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 10 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 )->[3]->( 38 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]

( 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 4 7 )->[5]->( 7 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 5 6 )->[7]->( 5 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 7 )->[8]->( 38 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]

( 8 )->[9]->( 39 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 )->[10]->( 11 17 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 10 )->[11]->( 12 15 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]

( 11 )->[12]->( 38 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 12 )->[13]->( 38 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 13 )->[14]->( 39 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 11 )->[15]->( 16 37 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]

( 15 )->[16]->( 38 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 10 )->[17]->( 18 39 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 17 )->[18]->( 19 39 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 18 )->[19]->( 38 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]

( 19 )->[20]->( 22 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 5 [r5]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]

( 22 )->[21]->( 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]

( 21 20 )->[22]->( 21 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp]

( 22 )->[23]->( 39 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 23 )->[24]->( 26 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 28 )->[25]->( 27 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 24 )->[26]->( 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 26 25 )->[27]->( 28 29 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 27 )->[28]->( 25 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 27 28 )->[29]->( 39 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 29 )->[30]->( 39 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 30 )->[31]->( 39 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 31 )->[32]->( 39 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 32 )->[33]->( 39 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 33 )->[34]->( 39 35 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 34 )->[35]->( 39 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 35 )->[36]->( 39 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 15 )->[37]->( 39 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 6 [r6]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 8 12 3 13 19 16 )->[38]->( 39 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 38 14 17 23 32 18 31 36 9 35 34 33 29 30 37 )->[39]->( 1 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 39 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 11 to worklist
  Adding insn 363 to worklist
  Adding insn 23 to worklist
  Adding insn 19 to worklist
  Adding insn 44 to worklist
  Adding insn 41 to worklist
  Adding insn 33 to worklist
  Adding insn 29 to worklist
  Adding insn 60 to worklist
  Adding insn 72 to worklist
  Adding insn 69 to worklist
  Adding insn 369 to worklist
  Adding insn 76 to worklist
  Adding insn 89 to worklist
  Adding insn 85 to worklist
  Adding insn 101 to worklist
  Adding insn 98 to worklist
  Adding insn 109 to worklist
  Adding insn 114 to worklist
  Adding insn 372 to worklist
  Adding insn 129 to worklist
  Adding insn 124 to worklist
  Adding insn 375 to worklist
  Adding insn 143 to worklist
  Adding insn 139 to worklist
  Adding insn 157 to worklist
  Adding insn 153 to worklist
  Adding insn 169 to worklist
  Adding insn 165 to worklist
  Adding insn 377 to worklist
  Adding insn 176 to worklist
  Adding insn 174 to worklist
  Adding insn 190 to worklist
  Adding insn 185 to worklist
  Adding insn 197 to worklist
  Adding insn 205 to worklist
  Adding insn 202 to worklist
  Adding insn 381 to worklist
  Adding insn 383 to worklist
  Adding insn 210 to worklist
  Adding insn 216 to worklist
  Adding insn 225 to worklist
  Adding insn 230 to worklist
  Adding insn 234 to worklist
  Adding insn 237 to worklist
  Adding insn 255 to worklist
  Adding insn 252 to worklist
  Adding insn 248 to worklist
  Adding insn 242 to worklist
  Adding insn 261 to worklist
  Adding insn 268 to worklist
  Adding insn 273 to worklist
  Adding insn 385 to worklist
  Adding insn 281 to worklist
  Adding insn 277 to worklist
  Adding insn 387 to worklist
  Adding insn 367 to worklist
  Adding insn 314 to worklist
Finished finding needed instructions:
processing block 39 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 308 to worklist
processing block 38 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 301 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 74 to worklist
processing block 8 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 71 to worklist
  Adding insn 68 to worklist
  Adding insn 67 to worklist
  Adding insn 66 to worklist
  Adding insn 65 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 59 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 54 to worklist
  Adding insn 48 to worklist
processing block 5 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 57 to worklist
  Adding insn 39 to worklist
  Adding insn 43 to worklist
  Adding insn 46 to worklist
  Adding insn 42 to worklist
  Adding insn 32 to worklist
  Adding insn 30 to worklist
  Adding insn 28 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 45 to worklist
  Adding insn 35 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 22 to worklist
  Adding insn 18 to worklist
  Adding insn 17 to worklist
processing block 14 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 13 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 113 to worklist
  Adding insn 112 to worklist
  Adding insn 111 to worklist
processing block 12 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 108 to worklist
  Adding insn 106 to worklist
  Adding insn 104 to worklist
  Adding insn 103 to worklist
processing block 16 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 37 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 296 to worklist
  Adding insn 291 to worklist
  Adding insn 355 to worklist
  Adding insn 290 to worklist
  Adding insn 294 to worklist
  Adding insn 287 to worklist
  Adding insn 354 to worklist
processing block 15 lr out =  0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 128 to worklist
  Adding insn 127 to worklist
  Adding insn 126 to worklist
  Adding insn 123 to worklist
  Adding insn 122 to worklist
  Adding insn 121 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 100 to worklist
  Adding insn 97 to worklist
  Adding insn 96 to worklist
  Adding insn 95 to worklist
  Adding insn 94 to worklist
processing block 21 lr out =  2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 189 to worklist
  Adding insn 188 to worklist
  Adding insn 180 to worklist
processing block 25 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 36 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 282 to worklist
  Adding insn 280 to worklist
  Adding insn 279 to worklist
processing block 35 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 272 to worklist
  Adding insn 271 to worklist
processing block 34 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 267 to worklist
  Adding insn 265 to worklist
  Adding insn 358 to worklist
  Adding insn 264 to worklist
processing block 33 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 260 to worklist
  Adding insn 259 to worklist
  Adding insn 257 to worklist
processing block 32 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 254 to worklist
  Adding insn 360 to worklist
  Adding insn 359 to worklist
  Adding insn 251 to worklist
  Adding insn 250 to worklist
  Adding insn 243 to worklist
  Adding insn 241 to worklist
  Adding insn 240 to worklist
processing block 31 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 236 to worklist
processing block 30 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 233 to worklist
  Adding insn 232 to worklist
processing block 29 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 229 to worklist
  Adding insn 228 to worklist
processing block 28 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 224 to worklist
  Adding insn 222 to worklist
  Adding insn 221 to worklist
processing block 27 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 218 to worklist
  Adding insn 215 to worklist
  Adding insn 213 to worklist
processing block 26 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 220 to worklist
processing block 24 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 23 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 204 to worklist
  Adding insn 200 to worklist
  Adding insn 199 to worklist
processing block 22 lr out =  1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 196 to worklist
  Adding insn 194 to worklist
  Adding insn 193 to worklist
processing block 20 lr out =  2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 183 to worklist
  Adding insn 172 to worklist
  Adding insn 173 to worklist
  Adding insn 171 to worklist
processing block 19 lr out =  4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 168 to worklist
  Adding insn 164 to worklist
processing block 18 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 159 to worklist
  Adding insn 156 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
processing block 17 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 145 to worklist
  Adding insn 142 to worklist
  Adding insn 137 to worklist
  Adding insn 138 to worklist
  Adding insn 135 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 88 to worklist
  Adding insn 84 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 14 to worklist
  Adding insn 3 to worklist
  Adding insn 10 to worklist
  Adding insn 9 to worklist
  Adding insn 364 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 40 n_edges 63 count 82 (    2)
;;   ======================================================
;;   -- basic block 2 from 363 to 15 -- after reload
;;   ======================================================

;;	  0-->   363 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     9 r1=`*.LC14'                       :cortex_a8_load_store_1
;;	  2-->   364 sp=sp-0x40                        :cortex_a8_default
;;	  2-->    10 r2=0x9                            :cortex_a8_default
;;	  3-->     3 r4=r0                             :cortex_a8_default
;;	  3-->    11 r0=call [`strncmp']               :cortex_a8_issue_branch
;;	 35-->    14 {cc=cmp(r0,0x0);r5=r0;}           :cortex_a8_default
;;	 37-->    15 pc={(cc!=0x0)?L79:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 37
;;   new head = 363
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 17 to 23 -- after reload
;;   ======================================================

;;	  0-->    17 r4=r4+0x9                         :cortex_a8_default
;;	  1-->    18 r0=r4                             :cortex_a8_default
;;	  2-->    19 r0=call [`strlen']                :cortex_a8_issue_branch
;;	 34-->    22 cc=cmp(r0,0x24)                   :cortex_a8_default
;;	 36-->    23 pc={(cc!=0x0)?L299:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 17
;;   new tail = 23

;;   ======================================================
;;   -- basic block 4 from 35 to 45 -- after reload
;;   ======================================================

;;	  0-->    35 r7=sp+0x24                        :cortex_a8_default
;;	  0-->    45 r6=0x1                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 35
;;   new tail = 45

;;   ======================================================
;;   -- basic block 5 from 28 to 44 -- after reload
;;   ======================================================

;;	  0-->    28 r0=zxn([r4])                      :cortex_a8_load_store_1
;;	  1-->    29 r0=call [`hex_to_bin']            :cortex_a8_issue_branch
;;	 33-->    30 r8=r0                             :cortex_a8_default
;;	 33-->    32 r0=zxn([r4+0x1])                  :cortex_a8_load_store_1
;;	 34-->    33 r0=call [`hex_to_bin']            :cortex_a8_issue_branch
;;	 34-->    43 cc=cmp(r5,0x9)                    :cortex_a8_default
;;	 35-->    46 r3=r6<<r5                         :cortex_a8_default
;;	 35-->    42 r4=r4+0x2                         :cortex_a8_default
;;	 66-->    39 r0=r8<<0x4|r0                     :cortex_a8_default
;;	 66-->    41 [r7+r5]=r0                        :cortex_a8_load_store_1
;;	 67-->    57 r5=r5+0x1                         :cortex_a8_default
;;	 67-->    44 pc={(gtu(cc,0x0))?L55:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 67
;;   new head = 28
;;   new tail = 44

;;   ======================================================
;;   -- basic block 6 from 48 to 54 -- after reload
;;   ======================================================

;;	  0-->    48 {cc=cmp(r3&0x2a8,0x0);clobber scra:cortex_a8_default
;;	  1-->    54 (cc) r4=r4+0x1                    :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 48
;;   new tail = 54

;;   ======================================================
;;   -- basic block 7 from 59 to 60 -- after reload
;;   ======================================================

;;	  0-->    59 cc=cmp(r5,0x10)                   :cortex_a8_default
;;	  2-->    60 pc={(cc!=0x0)?L58:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 59
;;   new tail = 60

;;   ======================================================
;;   -- basic block 8 from 65 to 72 -- after reload
;;   ======================================================

;;	  0-->    68 r3=`match_dev_by_uuid'            :cortex_a8_load_store_1
;;	  0-->    66 r1=0x0                            :cortex_a8_default
;;	  1-->    65 r0=`block_class'                  :cortex_a8_load_store_1
;;	  1-->    67 r2=sp+0x24                        :cortex_a8_default
;;	  2-->    69 r0=call [`class_find_device']     :cortex_a8_issue_branch
;;	 34-->    71 {cc=cmp(r0,0x0);r3=r0;}           :cortex_a8_default
;;	 36-->    72 pc={(cc==0x0)?L299:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 65
;;   new tail = 72

;;   ======================================================
;;   -- basic block 9 from 74 to 369 -- after reload
;;   ======================================================

;;	  0-->    74 r6=[r3+0x134]                     :cortex_a8_load_store_1
;;	  0-->    76 call [`put_device']               :cortex_a8_issue_branch
;;	  1-->   369 pc=L302                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 74
;;   new tail = 369

;;   ======================================================
;;   -- basic block 10 from 82 to 89 -- after reload
;;   ======================================================

;;	  0-->    82 r0=r4                             :cortex_a8_default
;;	  0-->    83 r1=`*.LC15'                       :cortex_a8_load_store_1
;;	  1-->    84 r2=0x5                            :cortex_a8_default
;;	  2-->    85 r0=call [`strncmp']               :cortex_a8_issue_branch
;;	 34-->    88 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    89 pc={(cc==0x0)?L133:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 82
;;   new tail = 89

;;   ======================================================
;;   -- basic block 11 from 94 to 101 -- after reload
;;   ======================================================

;;	  0-->    94 r0=r4                             :cortex_a8_default
;;	  0-->    95 r1=`*.LC16'                       :cortex_a8_load_store_1
;;	  1-->    96 r2=sp+0x38                        :cortex_a8_default
;;	  1-->    97 r3=sp+0x34                        :cortex_a8_default
;;	  2-->    98 r0=call [`sscanf']                :cortex_a8_issue_branch
;;	 34-->   100 cc=cmp(r0,0x2)                    :cortex_a8_default
;;	 36-->   101 pc={(cc!=0x0)?L118:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 94
;;   new tail = 101

;;   ======================================================
;;   -- basic block 12 from 103 to 109 -- after reload
;;   ======================================================

;;	  0-->   103 r2=[sp+0x38]                      :cortex_a8_load_store_1
;;	  1-->   104 r3=[sp+0x34]                      :cortex_a8_load_store_1
;;	  3-->   106 r6=r2<<0x14|r3                    :cortex_a8_default
;;	  5-->   108 cc=cmp(r6 0>>0x14,r2)             :cortex_a8_default
;;	  7-->   109 pc={(cc!=0x0)?L299:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 103
;;   new tail = 109

;;   ======================================================
;;   -- basic block 13 from 111 to 114 -- after reload
;;   ======================================================

;;	  0-->   111 r2=r6&0xffffff                    :cortex_a8_default
;;	  1-->   112 r2=r2&0xffffffffff0fffff          :cortex_a8_default
;;	  2-->   113 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  4-->   114 pc={(cc!=0x0)?L299:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 111
;;   new tail = 114

;;   ======================================================
;;   -- basic block 14 from 372 to 372 -- after reload
;;   ======================================================

;;	  0-->   372 pc=L302                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 372
;;   new tail = 372

;;   ======================================================
;;   -- basic block 15 from 121 to 129 -- after reload
;;   ======================================================

;;	  0-->   121 r0=r4                             :cortex_a8_default
;;	  0-->   122 r1=sp+0x3c                        :cortex_a8_default
;;	  1-->   123 r2=0x10                           :cortex_a8_default
;;	  2-->   124 r0=call [`simple_strtoul']        :cortex_a8_issue_branch
;;	  2-->   126 r3=[sp+0x3c]                      :cortex_a8_load_store_1
;;	  5-->   127 r3=zxn([r3])                      :cortex_a8_load_store_1
;;	  7-->   128 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  9-->   129 pc={(cc==0x0)?L333:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 121
;;   new tail = 129

;;   ======================================================
;;   -- basic block 16 from 375 to 375 -- after reload
;;   ======================================================

;;	  0-->   375 pc=L299                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 375
;;   new tail = 375

;;   ======================================================
;;   -- basic block 17 from 135 to 143 -- after reload
;;   ======================================================

;;	  0-->   135 r4=r4+0x5                         :cortex_a8_default
;;	  0-->   138 r1=`*.LC11'                       :cortex_a8_load_store_1
;;	  1-->   137 r0=r4                             :cortex_a8_default
;;	  2-->   139 r0=call [`strcmp']                :cortex_a8_issue_branch
;;	 34-->   142 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->   145 (!cc) r6=0xff                     :cortex_a8_default
;;	 36-->   143 pc={(cc==0x0)?L302:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 135
;;   new tail = 143

;;   ======================================================
;;   -- basic block 18 from 151 to 157 -- after reload
;;   ======================================================

;;	  0-->   151 r0=r4                             :cortex_a8_default
;;	  0-->   152 r1=`*.LC17'                       :cortex_a8_load_store_1
;;	  1-->   153 r0=call [`strcmp']                :cortex_a8_issue_branch
;;	 33-->   156 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->   159 (!cc) r6=0x100000                 :cortex_a8_default
;;	 35-->   157 pc={(cc==0x0)?L302:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 151
;;   new tail = 157

;;   ======================================================
;;   -- basic block 19 from 164 to 169 -- after reload
;;   ======================================================

;;	  0-->   164 r0=r4                             :cortex_a8_default
;;	  1-->   165 r0=call [`strlen']                :cortex_a8_issue_branch
;;	 33-->   168 cc=cmp(r0,0x1f)                   :cortex_a8_default
;;	 35-->   169 pc={(gtu(cc,0x0))?L299:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 164
;;   new tail = 169

;;   ======================================================
;;   -- basic block 20 from 171 to 377 -- after reload
;;   ======================================================

;;	  0-->   171 r5=sp+0x4                         :cortex_a8_default
;;	  0-->   173 r1=r4                             :cortex_a8_default
;;	  1-->   172 r0=r5                             :cortex_a8_default
;;	  2-->   174 r0=call [`strcpy']                :cortex_a8_issue_branch
;;	  2-->   176 [sp+0x3c]=r5                      :cortex_a8_load_store_1
;;	  3-->   183 r2=0x21                           :cortex_a8_default
;;	  3-->   377 pc=L191                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 171
;;   new tail = 377

;;   ======================================================
;;   -- basic block 21 from 180 to 190 -- after reload
;;   ======================================================

;;	  0-->   180 cc=cmp(r1,0x2f)                   :cortex_a8_default
;;	  0-->   185 (!cc) [r3]=r2                     :cortex_a8_load_store_1
;;	  1-->   188 r3=[sp+0x3c]                      :cortex_a8_load_store_1
;;	  3-->   189 r3=r3+0x1                         :cortex_a8_default
;;	  3-->   190 [sp+0x3c]=r3                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 180
;;   new tail = 190

;;   ======================================================
;;   -- basic block 22 from 193 to 197 -- after reload
;;   ======================================================

;;	  0-->   193 r3=[sp+0x3c]                      :cortex_a8_load_store_1
;;	  3-->   194 r1=zxn([r3])                      :cortex_a8_load_store_1
;;	  5-->   196 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  7-->   197 pc={(cc!=0x0)?L195:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 193
;;   new tail = 197

;;   ======================================================
;;   -- basic block 23 from 199 to 205 -- after reload
;;   ======================================================

;;	  0-->   199 r4=sp+0x4                         :cortex_a8_default
;;	  1-->   200 r0=r4                             :cortex_a8_default
;;	  2-->   202 r0=call [`blk_lookup_devt']       :cortex_a8_issue_branch
;;	 34-->   204 {cc=cmp(r0,0x0);r6=r0;}           :cortex_a8_default
;;	 36-->   205 pc={(cc!=0x0)?L302:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 199
;;   new tail = 205

;;   ======================================================
;;   -- basic block 24 from 381 to 381 -- after reload
;;   ======================================================

;;	  0-->   381 pc=L380                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 381
;;   new tail = 381

;;   ======================================================
;;   -- basic block 25 from 210 to 383 -- after reload
;;   ======================================================

;;	  0-->   210 [sp+0x3c]=r1                      :cortex_a8_load_store_1
;;	  0-->   383 pc=L347                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 210
;;   new tail = 383

;;   ======================================================
;;   -- basic block 26 from 220 to 220 -- after reload
;;   ======================================================

;;	  0-->   220 r3=`_ctype'                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 220
;;   new tail = 220

;;   ======================================================
;;   -- basic block 27 from 213 to 216 -- after reload
;;   ======================================================

;;	  0-->   213 r0=[sp+0x3c]                      :cortex_a8_load_store_1
;;	  2-->   215 cc=cmp(r0,r4)                     :cortex_a8_default
;;	  2-->   218 r1=r0-0x1                         :cortex_a8_default
;;	  4-->   216 pc={(leu(cc,0x0))?L226:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 213
;;   new tail = 216

;;   ======================================================
;;   -- basic block 28 from 221 to 225 -- after reload
;;   ======================================================

;;	  0-->   221 r2=zxn([r0-0x1])                  :cortex_a8_load_store_1
;;	  3-->   222 r2=zxn([r3+r2])                   :cortex_a8_load_store_1
;;	  5-->   224 cc=cmp(zxt(r2,0x1,0x2),0x0)       :cortex_a8_default
;;	  7-->   225 pc={(cc!=0x0)?L219:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 221
;;   new tail = 225

;;   ======================================================
;;   -- basic block 29 from 228 to 230 -- after reload
;;   ======================================================

;;	  0-->   228 r4=sp+0x4                         :cortex_a8_default
;;	  1-->   229 cc=cmp(r0,r4)                     :cortex_a8_default
;;	  3-->   230 pc={(cc==0x0)?L302:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 228
;;   new tail = 230

;;   ======================================================
;;   -- basic block 30 from 232 to 234 -- after reload
;;   ======================================================

;;	  0-->   232 r3=zxn([r0])                      :cortex_a8_load_store_1
;;	  2-->   233 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   234 pc={(cc==0x0)?L302:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 232
;;   new tail = 234

;;   ======================================================
;;   -- basic block 31 from 236 to 237 -- after reload
;;   ======================================================

;;	  0-->   236 cc=cmp(r3,0x30)                   :cortex_a8_default
;;	  2-->   237 pc={(cc==0x0)?L302:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 236
;;   new tail = 237

;;   ======================================================
;;   -- basic block 32 from 240 to 255 -- after reload
;;   ======================================================

;;	  0-->   240 r1=0x0                            :cortex_a8_default
;;	  0-->   241 r2=0xa                            :cortex_a8_default
;;	  1-->   242 r0=call [`simple_strtoul']        :cortex_a8_issue_branch
;;	  1-->   360 r3=[sp+0x3c]                      :cortex_a8_load_store_1
;;	  2-->   359 r2=0x0                            :cortex_a8_default
;;	  4-->   248 [r3]=r2                           :cortex_a8_load_store_1
;;	 33-->   243 r5=r0                             :cortex_a8_default
;;	 33-->   250 r0=r4                             :cortex_a8_default
;;	 34-->   251 r1=r5                             :cortex_a8_default
;;	 35-->   252 r0=call [`blk_lookup_devt']       :cortex_a8_issue_branch
;;	 67-->   254 {cc=cmp(r0,0x0);r6=r0;}           :cortex_a8_default
;;	 69-->   255 pc={(cc!=0x0)?L302:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 69
;;   new head = 240
;;   new tail = 255

;;   ======================================================
;;   -- basic block 33 from 257 to 261 -- after reload
;;   ======================================================

;;	  0-->   257 r3=[sp+0x3c]                      :cortex_a8_load_store_1
;;	  0-->   259 r2=r4+0x2                         :cortex_a8_default
;;	  2-->   260 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  4-->   261 pc={(ltu(cc,0x0))?L302:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 257
;;   new tail = 261

;;   ======================================================
;;   -- basic block 34 from 264 to 268 -- after reload
;;   ======================================================

;;	  0-->   264 r2=zxn([r3-0x2])                  :cortex_a8_load_store_1
;;	  1-->   358 r1=`_ctype'                       :cortex_a8_load_store_1
;;	  4-->   265 r2=zxn([r1+r2])                   :cortex_a8_load_store_1
;;	  6-->   267 cc=cmp(zxt(r2,0x1,0x2),0x0)       :cortex_a8_default
;;	  8-->   268 pc={(cc==0x0)?L302:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 264
;;   new tail = 268

;;   ======================================================
;;   -- basic block 35 from 271 to 273 -- after reload
;;   ======================================================

;;	  0-->   271 r2=zxn([r3-0x1])                  :cortex_a8_load_store_1
;;	  2-->   272 cc=cmp(r2,0x70)                   :cortex_a8_default
;;	  4-->   273 pc={(cc!=0x0)?L302:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 271
;;   new tail = 273

;;   ======================================================
;;   -- basic block 36 from 277 to 385 -- after reload
;;   ======================================================

;;	  0-->   277 [r3-0x1]=r6                       :cortex_a8_load_store_1
;;	  0-->   279 r0=r4                             :cortex_a8_default
;;	  1-->   280 r1=r5                             :cortex_a8_default
;;	  2-->   281 r0=call [`blk_lookup_devt']       :cortex_a8_issue_branch
;;	 34-->   282 r6=r0                             :cortex_a8_default
;;	 34-->   385 pc=L302                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 34
;;   new head = 277
;;   new tail = 385

;;   ======================================================
;;   -- basic block 37 from 354 to 387 -- after reload
;;   ======================================================

;;	  0-->   354 r3=0xfff00                        :cortex_a8_load_store_1
;;	  0-->   287 r2=r0 0>>0xc                      :cortex_a8_default
;;	  1-->   294 r6=zxt(r0,0xc,0x8)                :cortex_a8_default
;;	  1-->   290 r0=r0&0xff                        :cortex_a8_default
;;	  2-->   355 r3=r2&r3                          :cortex_a8_default
;;	  3-->   291 r3=r3|r0                          :cortex_a8_default
;;	  4-->   296 r6=r6<<0x14|r3                    :cortex_a8_default
;;	  4-->   387 pc=L302                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 354
;;   new tail = 387

;;   ======================================================
;;   -- basic block 38 from 301 to 301 -- after reload
;;   ======================================================

;;	  0-->   301 r6=0x0                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 301
;;   new tail = 301

;;   ======================================================
;;   -- basic block 39 from 308 to 367 -- after reload
;;   ======================================================

;;	  0-->   308 r0=r6                             :cortex_a8_default
;;	  0-->   314 use r0                            :nothing
;;	  0-->   367 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 308
;;   new tail = 367





name_to_dev_t

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={36d,48u} r1={32d,16u} r2={36d,19u,2d} r3={35d,23u} r4={8d,23u} r5={5d,11u,1d} r6={12d,10u,1d} r7={2d,3u} r8={2d,3u} r12={17d} r13={3d,78u,8d} r14={18d,2u} r15={17d} r16={17d} r17={17d} r18={17d} r19={17d} r20={17d} r21={17d} r22={17d} r23={17d} r24={43d,28u} r25={5d} r27={17d} r28={17d} r29={17d} r30={17d} r31={17d} r32={17d} r33={17d} r34={17d} r35={17d} r36={17d} r37={17d} r38={17d} r39={17d} r40={17d} r41={17d} r42={17d} r43={17d} r44={17d} r45={17d} r46={17d} r47={17d} r48={17d} r49={17d} r50={17d} r51={17d} r52={17d} r53={17d} r54={17d} r55={17d} r56={17d} r57={17d} r58={17d} r59={17d} r60={17d} r61={17d} r62={17d} r63={17d} r64={17d} r65={17d} r66={17d} r67={17d} r68={17d} r69={17d} r70={17d} r71={17d} r72={17d} r73={17d} r74={17d} r75={17d} r76={17d} r77={17d} r78={17d} r79={17d} r80={17d} r81={17d} r82={17d} r83={17d} r84={17d} r85={17d} r86={17d} r87={17d} r88={17d} r89={17d} r90={17d} r91={17d} r92={17d} r93={17d} r94={17d} r95={17d} r96={17d} r97={17d} r98={17d} r99={17d} r100={17d} r101={17d} r102={17d} r103={17d} r104={17d} r105={17d} r106={17d} r107={17d} r108={17d} r109={17d} r110={17d} r111={17d} r112={17d} r113={17d} r114={17d} r115={17d} r116={17d} r117={17d} r118={17d} r119={17d} r120={17d} r121={17d} r122={17d} r123={17d} r124={17d} r125={17d} r126={17d} r127={17d} 
;;    total ref usage 2400{2119d,264u,17e} in 173{156 regular + 17 call} insns.
(note 2 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 2 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 4 363 2 NOTE_INSN_DELETED)

(insn/f:TI 363 12 9 2 init/do_mounts.c:137 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -24 [0xffffffffffffffe8])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 7 r7))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 16 [0x10])) [0 S4 A32])
                                (reg:SI 8 r8))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 20 [0x14])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(insn:TI 9 363 364 2 init/do_mounts.c:144 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x121f8870>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x121f8870>)
        (nil)))

(insn/f:TI 364 9 365 2 init/do_mounts.c:137 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -64 [0xffffffffffffffc0]))) 4 {*arm_addsi3} (nil))

(note 365 364 10 2 NOTE_INSN_PROLOGUE_END)

(insn 10 365 3 2 init/do_mounts.c:144 (set (reg:SI 2 r2)
        (const_int 9 [0x9])) 167 {*arm_movsi_insn} (nil))

(insn:TI 3 10 11 2 init/do_mounts.c:137 (set (reg/v/f:SI 4 r4 [orig:161 name ] [161])
        (reg:SI 0 r0 [ name ])) 167 {*arm_movsi_insn} (nil))

(call_insn/i 11 3 14 2 init/do_mounts.c:144 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strncmp") [flags 0x41] <function_decl 0x51157e80 strncmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 14 11 15 2 init/do_mounts.c:144 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 5 r5 [163])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 15 14 16 2 init/do_mounts.c:144 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [50.0%]  (fallthru)
(note 16 15 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 20 16 17 3 NOTE_INSN_DELETED)

(insn:TI 17 20 18 3 init/do_mounts.c:145 (set (reg/v/f:SI 4 r4 [orig:134 name.1256 ] [134])
        (plus:SI (reg/v/f:SI 4 r4 [orig:161 name ] [161])
            (const_int 9 [0x9]))) 4 {*arm_addsi3} (nil))

(insn:TI 18 17 19 3 init/do_mounts.c:146 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:134 name.1256 ] [134])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 19 18 22 3 init/do_mounts.c:146 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41] <function_decl 0x51157b80 strlen>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 22 19 23 3 init/do_mounts.c:146 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 36 [0x24]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 23 22 24 3 init/do_mounts.c:146 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 299)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6218 [0x184a])
            (nil))))
;; End of basic block 3 -> ( 38 4)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  38 [62.2%] 
;; Succ edge  4 [37.8%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  3 [37.8%]  (fallthru)
(note 24 23 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 35 24 45 4 include/linux/genhd.h:210 (set (reg/f:SI 7 r7 [233])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 36 [0x24]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 36 [0x24]))
        (nil)))

(insn 45 35 58 4 include/linux/genhd.h:213 (set (reg:SI 6 r6 [234])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 7) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  7 [93.8%]  (dfs_back)
(code_label 58 45 26 5 90 "" [1 uses])

(note 26 58 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 27 26 31 5 NOTE_INSN_DELETED)

(note 31 27 34 5 NOTE_INSN_DELETED)

(note 34 31 36 5 NOTE_INSN_DELETED)

(note 36 34 28 5 NOTE_INSN_DELETED)

(insn:TI 28 36 29 5 include/linux/genhd.h:210 (set (reg:SI 0 r0)
        (zero_extend:SI (mem:QI (reg/v/f:SI 4 r4 [orig:134 name.1256 ] [134]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(call_insn:TI 29 28 30 5 include/linux/genhd.h:210 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hex_to_bin") [flags 0x41] <function_decl 0x10a82e00 hex_to_bin>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 30 29 32 5 include/linux/genhd.h:210 (set (reg:SI 8 r8 [orig:145 D.53098 ] [145])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 32 30 33 5 include/linux/genhd.h:211 (set (reg:SI 0 r0)
        (zero_extend:SI (mem:QI (plus:SI (reg/v/f:SI 4 r4 [orig:134 name.1256 ] [134])
                    (const_int 1 [0x1])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(call_insn:TI 33 32 43 5 include/linux/genhd.h:211 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("hex_to_bin") [flags 0x41] <function_decl 0x10a82e00 hex_to_bin>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 43 33 46 5 include/linux/genhd.h:213 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:143 i ] [143])
            (const_int 9 [0x9]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 46 43 42 5 include/linux/genhd.h:213 (set (reg:SI 3 r3 [173])
        (ashift:SI (reg:SI 6 r6 [234])
            (reg/v:SI 5 r5 [orig:143 i ] [143]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (ashift:SI (const_int 1 [0x1])
            (reg/v:SI 5 r5 [orig:143 i ] [143]))
        (nil)))

(insn 42 46 39 5 include/linux/genhd.h:212 (set (reg/v/f:SI 4 r4 [orig:134 name.1256 ] [134])
        (plus:SI (reg/v/f:SI 4 r4 [orig:134 name.1256 ] [134])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn:TI 39 42 41 5 include/linux/genhd.h:210 (set (reg:SI 0 r0 [171])
        (ior:SI (ashift:SI (reg:SI 8 r8 [orig:145 D.53098 ] [145])
                (const_int 4 [0x4]))
            (reg:SI 0 r0))) 270 {*arith_shiftsi} (nil))

(insn 41 39 57 5 include/linux/genhd.h:210 (set (mem:QI (plus:SI (reg/f:SI 7 r7 [233])
                (reg/v:SI 5 r5 [orig:143 i ] [143])) [0 S1 A8])
        (reg:QI 0 r0 [171])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 0 r0 [171])
        (nil)))

(insn:TI 57 41 44 5 include/linux/genhd.h:209 (set (reg/v:SI 5 r5 [orig:143 i ] [143])
        (plus:SI (reg/v:SI 5 r5 [orig:143 i ] [143])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 44 57 316 5 include/linux/genhd.h:213 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 7 6)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [50.0%] 
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 316 44 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 47 316 48 6 NOTE_INSN_DELETED)

(insn:TI 48 47 54 6 include/linux/genhd.h:213 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [173])
                        (const_int 680 [0x2a8]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [173])
        (nil)))

(insn:TI 54 48 55 6 include/linux/genhd.h:218 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 4 r4 [orig:134 name.1256 ] [134])
            (plus:SI (reg/v/f:SI 4 r4 [orig:134 name.1256 ] [134])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 55 54 56 7 88 "" [1 uses])

(note 56 55 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 59 56 60 7 include/linux/genhd.h:209 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:143 i ] [143])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 60 59 61 7 include/linux/genhd.h:209 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 58)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9375 [0x249f])
            (nil))))
;; End of basic block 7 -> ( 5 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [93.8%]  (dfs_back)
;; Succ edge  8 [6.2%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [6.2%]  (fallthru,loop_exit)
(note 61 60 63 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 63 61 70 8 NOTE_INSN_DELETED)

(note 70 63 68 8 NOTE_INSN_DELETED)

(insn:TI 68 70 66 8 init/do_mounts.c:105 (set (reg:SI 3 r3)
        (symbol_ref:SI ("match_dev_by_uuid") [flags 0x3] <function_decl 0x12135300 match_dev_by_uuid>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("match_dev_by_uuid") [flags 0x3] <function_decl 0x12135300 match_dev_by_uuid>)
        (nil)))

(insn 66 68 65 8 init/do_mounts.c:105 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 65 66 67 8 init/do_mounts.c:105 (set (reg:SI 0 r0)
        (symbol_ref:SI ("block_class") [flags 0xc0] <var_decl 0x11593de0 block_class>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("block_class") [flags 0xc0] <var_decl 0x11593de0 block_class>)
        (nil)))

(insn 67 65 69 8 init/do_mounts.c:105 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 36 [0x24]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 69 67 71 8 init/do_mounts.c:105 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("class_find_device") [flags 0x41] <function_decl 0x11201980 class_find_device>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 71 69 72 8 init/do_mounts.c:106 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 3 r3 [orig:142 dev ] [142])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn:TI 72 71 73 8 init/do_mounts.c:106 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 299)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 8 -> ( 38 9)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  38 [30.2%] 
;; Succ edge  9 [69.8%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  8 [69.8%]  (fallthru)
(note 73 72 74 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 74 73 76 9 init/do_mounts.c:109 (set (reg/v:SI 6 r6 [orig:147 res ] [147])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:142 dev ] [142])
                (const_int 308 [0x134])) [0 <variable>.devt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:142 dev ] [142])
        (nil)))

(call_insn 76 74 369 9 init/do_mounts.c:110 (parallel [
            (call (mem:SI (symbol_ref:SI ("put_device") [flags 0x41] <function_decl 0x11229c80 put_device>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn:TI 369 76 370 9 (set (pc)
        (label_ref 302)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 39)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [100.0%] 

(barrier 370 369 79)

;; Start of basic block ( 2) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [50.0%] 
(code_label 79 370 80 10 86 "" [1 uses])

(note 80 79 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 86 80 82 10 NOTE_INSN_DELETED)

(insn:TI 82 86 83 10 init/do_mounts.c:155 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:161 name ] [161])) 167 {*arm_movsi_insn} (nil))

(insn 83 82 84 10 init/do_mounts.c:155 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x121f9900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x121f9900>)
        (nil)))

(insn:TI 84 83 85 10 init/do_mounts.c:155 (set (reg:SI 2 r2)
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 85 84 88 10 init/do_mounts.c:155 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strncmp") [flags 0x41] <function_decl 0x51157e80 strncmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 88 85 89 10 init/do_mounts.c:155 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 89 88 90 10 init/do_mounts.c:155 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 133)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 10 -> ( 11 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  17 [71.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [29.0%]  (fallthru)
(note 90 89 92 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 92 90 93 11 NOTE_INSN_DELETED)

(note 93 92 99 11 NOTE_INSN_DELETED)

(note 99 93 94 11 NOTE_INSN_DELETED)

(insn:TI 94 99 95 11 init/do_mounts.c:158 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:161 name ] [161])) 167 {*arm_movsi_insn} (nil))

(insn 95 94 96 11 init/do_mounts.c:158 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x121f9960>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x121f9960>)
        (nil)))

(insn:TI 96 95 97 11 init/do_mounts.c:158 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (nil))

(insn 97 96 98 11 init/do_mounts.c:158 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 52 [0x34]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 98 97 100 11 init/do_mounts.c:158 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sscanf") [flags 0x41] <function_decl 0x5115e880 sscanf>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 100 98 101 11 init/do_mounts.c:158 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 101 100 102 11 init/do_mounts.c:158 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 118)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5123 [0x1403])
            (nil))))
;; End of basic block 11 -> ( 12 15)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [48.8%]  (fallthru)
;; Succ edge  15 [51.2%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  11 [48.8%]  (fallthru)
(note 102 101 105 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 105 102 107 12 NOTE_INSN_DELETED)

(note 107 105 103 12 NOTE_INSN_DELETED)

(insn:TI 103 107 104 12 init/do_mounts.c:159 (set (reg:SI 2 r2 [orig:155 maj.879 ] [155])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 maj+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 maj+0 S4 A64])
        (nil)))

(insn:TI 104 103 106 12 init/do_mounts.c:159 (set (reg:SI 3 r3 [orig:154 min.880 ] [154])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 52 [0x34])) [0 min+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 106 104 108 12 init/do_mounts.c:159 (set (reg/v:SI 6 r6 [orig:147 res ] [147])
        (ior:SI (ashift:SI (reg:SI 2 r2 [orig:155 maj.879 ] [155])
                (const_int 20 [0x14]))
            (reg:SI 3 r3 [orig:154 min.880 ] [154]))) 270 {*arith_shiftsi} (nil))

(insn:TI 108 106 109 12 init/do_mounts.c:160 (set (reg:CC_SWP 24 cc)
        (compare:CC_SWP (lshiftrt:SI (reg/v:SI 6 r6 [orig:147 res ] [147])
                (const_int 20 [0x14]))
            (reg:SI 2 r2 [orig:155 maj.879 ] [155]))) 221 {*arm_cmpsi_shiftsi_swp} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:155 maj.879 ] [155])
        (nil)))

(jump_insn:TI 109 108 110 12 init/do_mounts.c:160 (set (pc)
        (if_then_else (ne (reg:CC_SWP 24 cc)
                (const_int 0 [0x0]))
            (label_ref 299)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_SWP 24 cc)
        (expr_list:REG_BR_PROB (const_int 6218 [0x184a])
            (nil))))
;; End of basic block 12 -> ( 38 13)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  38 [62.2%] 
;; Succ edge  13 [37.8%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  12 [37.8%]  (fallthru)
(note 110 109 111 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 111 110 112 13 init/do_mounts.c:160 discrim 1 (set (reg:SI 2 r2 [187])
        (and:SI (reg/v:SI 6 r6 [orig:147 res ] [147])
            (const_int 16777215 [0xffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 112 111 113 13 init/do_mounts.c:160 discrim 1 (set (reg:SI 2 r2 [186])
        (and:SI (reg:SI 2 r2 [187])
            (const_int -15728641 [0xffffffffff0fffff]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg/v:SI 6 r6 [orig:147 res ] [147])
            (const_int 1048575 [0xfffff]))
        (nil)))

(insn:TI 113 112 114 13 init/do_mounts.c:160 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:154 min.880 ] [154])
            (reg:SI 2 r2 [186]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:154 min.880 ] [154])
        (expr_list:REG_DEAD (reg:SI 2 r2 [186])
            (nil))))

(jump_insn:TI 114 113 371 13 init/do_mounts.c:160 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 299)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6218 [0x184a])
            (nil))))
;; End of basic block 13 -> ( 38 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  38 [62.2%] 
;; Succ edge  14 [37.8%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  13 [37.8%]  (fallthru)
(note 371 114 372 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 372 371 373 14 (set (pc)
        (label_ref 302)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 39)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [100.0%] 

(barrier 373 372 118)

;; Start of basic block ( 11) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [51.2%] 
(code_label 118 373 119 15 93 "" [1 uses])

(note 119 118 120 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 120 119 121 15 NOTE_INSN_DELETED)

(insn:TI 121 120 122 15 init/do_mounts.c:163 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:161 name ] [161])) 167 {*arm_movsi_insn} (nil))

(insn 122 121 123 15 init/do_mounts.c:163 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 60 [0x3c]))) 4 {*arm_addsi3} (nil))

(insn:TI 123 122 124 15 init/do_mounts.c:163 (set (reg:SI 2 r2)
        (const_int 16 [0x10])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 124 123 126 15 init/do_mounts.c:163 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("simple_strtoul") [flags 0x41] <function_decl 0x10a77e00 simple_strtoul>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 126 124 127 15 init/do_mounts.c:164 (set (reg/f:SI 3 r3 [orig:189 p ] [189])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])
        (nil)))

(insn:TI 127 126 128 15 init/do_mounts.c:164 (set (reg:SI 3 r3 [190])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [orig:189 p ] [189]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 128 127 129 15 init/do_mounts.c:164 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [190])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [190])
        (nil)))

(jump_insn:TI 129 128 374 15 init/do_mounts.c:164 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 333)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 15 -> ( 16 37)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  16 [39.0%]  (fallthru)
;; Succ edge  37 [61.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  15 [39.0%]  (fallthru)
(note 374 129 375 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 375 374 376 16 (set (pc)
        (label_ref 299)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 38)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  38 [100.0%] 

(barrier 376 375 133)

;; Start of basic block ( 10) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [71.0%] 
(code_label 133 376 134 17 92 "" [1 uses])

(note 134 133 140 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 140 134 135 17 NOTE_INSN_DELETED)

(insn:TI 135 140 138 17 init/do_mounts.c:170 (set (reg/v/f:SI 4 r4 [orig:141 name.1246 ] [141])
        (plus:SI (reg/v/f:SI 4 r4 [orig:161 name ] [161])
            (const_int 5 [0x5]))) 4 {*arm_addsi3} (nil))

(insn 138 135 137 17 init/do_mounts.c:172 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x121e0cc0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x121e0cc0>)
        (nil)))

(insn:TI 137 138 139 17 init/do_mounts.c:172 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:141 name.1246 ] [141])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 139 137 142 17 init/do_mounts.c:172 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 142 139 145 17 init/do_mounts.c:172 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 145 142 143 17 init/do_mounts.c:171 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 6 r6 [orig:147 res ] [147])
            (const_int 255 [0xff]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 143 145 149 17 init/do_mounts.c:172 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 18 39)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  18 [50.0%]  (fallthru)
;; Succ edge  39 [50.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  17 [50.0%]  (fallthru)
(note 149 143 154 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 154 149 151 18 NOTE_INSN_DELETED)

(insn:TI 151 154 152 18 init/do_mounts.c:175 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:141 name.1246 ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 152 151 153 18 init/do_mounts.c:175 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x121ff060>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x121ff060>)
        (nil)))

(call_insn/i:TI 153 152 156 18 init/do_mounts.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 156 153 159 18 init/do_mounts.c:175 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 159 156 157 18 init/do_mounts.c:174 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 6 r6 [orig:147 res ] [147])
            (const_int 1048576 [0x100000]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 157 159 163 18 init/do_mounts.c:175 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 18 -> ( 19 39)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  39 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  18 [50.0%]  (fallthru)
(note 163 157 166 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 166 163 164 19 NOTE_INSN_DELETED)

(insn:TI 164 166 165 19 init/do_mounts.c:178 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:141 name.1246 ] [141])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 165 164 168 19 init/do_mounts.c:178 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41] <function_decl 0x51157b80 strlen>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 168 165 169 19 init/do_mounts.c:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 169 168 170 19 init/do_mounts.c:178 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 299)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 19 -> ( 38 20)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  38 [61.0%] 
;; Succ edge  20 [39.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  19 [39.0%]  (fallthru)
(note 170 169 171 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 171 170 173 20 init/do_mounts.c:180 (set (reg/f:SI 5 r5 [196])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(insn 173 171 172 20 init/do_mounts.c:180 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:141 name.1246 ] [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:141 name.1246 ] [141])
        (nil)))

(insn:TI 172 173 174 20 init/do_mounts.c:180 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -60 [0xffffffffffffffc4]))
        (nil)))

(call_insn:TI 174 172 176 20 init/do_mounts.c:180 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcpy") [flags 0x41] <function_decl 0x51157780 strcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 176 174 183 20 init/do_mounts.c:181 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])
        (reg/f:SI 5 r5 [196])) 167 {*arm_movsi_insn} (nil))

(insn:TI 183 176 377 20 init/do_mounts.c:183 (set (reg:SI 2 r2 [237])
        (const_int 33 [0x21])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 33 [0x21])
        (nil)))

(jump_insn 377 183 378 20 init/do_mounts.c:181 (set (pc)
        (label_ref 191)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 22)
;; lr  out 	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  22 [100.0%] 

(barrier 378 377 195)

;; Start of basic block ( 22) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  22 [91.0%] 
(code_label 195 378 179 21 99 "" [1 uses])

(note 179 195 180 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 180 179 185 21 init/do_mounts.c:182 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:139 temp.1248 ] [139])
            (const_int 47 [0x2f]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:139 temp.1248 ] [139])
        (nil)))

(insn 185 180 188 21 init/do_mounts.c:183 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem:QI (reg/f:SI 3 r3 [orig:140 p.1247 ] [140]) [0 S1 A8])
            (reg:QI 2 r2 [237]))) 2350 {neon_vornv2di+83} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:140 p.1247 ] [140])
            (expr_list:REG_EQUAL (const_int 33 [0x21])
                (nil)))))

(insn:TI 188 185 189 21 init/do_mounts.c:181 (set (reg/f:SI 3 r3 [orig:200 p ] [200])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])
        (nil)))

(insn:TI 189 188 190 21 init/do_mounts.c:181 (set (reg/f:SI 3 r3 [201])
        (plus:SI (reg/f:SI 3 r3 [orig:200 p ] [200])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 p+0 S4 A32])
        (nil)))

(insn 190 189 191 21 init/do_mounts.c:181 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])
        (reg/f:SI 3 r3 [201])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [201])
        (nil)))
;; End of basic block 21 -> ( 22)
;; lr  out 	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  22 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 21 20) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  21 [100.0%]  (fallthru,dfs_back)
;; Pred edge  20 [100.0%] 
(code_label 191 190 192 22 97 "" [1 uses])

(note 192 191 193 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 193 192 194 22 init/do_mounts.c:181 discrim 1 (set (reg/f:SI 3 r3 [orig:140 p.1247 ] [140])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 194 193 196 22 init/do_mounts.c:181 discrim 1 (set (reg:SI 1 r1 [orig:139 temp.1248 ] [139])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [orig:140 p.1247 ] [140]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 196 194 197 22 init/do_mounts.c:181 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:139 temp.1248 ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 197 196 198 22 init/do_mounts.c:181 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 22 -> ( 21 23)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  21 [91.0%] 
;; Succ edge  23 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  22 [9.0%]  (fallthru,loop_exit)
(note 198 197 203 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 203 198 199 23 NOTE_INSN_DELETED)

(insn:TI 199 203 200 23 init/do_mounts.c:184 (set (reg/f:SI 4 r4 [202])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(insn:TI 200 199 202 23 init/do_mounts.c:184 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [202])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -60 [0xffffffffffffffc4]))
        (nil)))

(call_insn:TI 202 200 204 23 init/do_mounts.c:184 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("blk_lookup_devt") [flags 0x41] <function_decl 0x115c3b00 blk_lookup_devt>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 204 202 205 23 init/do_mounts.c:185 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 6 r6 [orig:147 res ] [147])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 205 204 379 23 init/do_mounts.c:185 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 23 -> ( 39 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [50.0%] 
;; Succ edge  24 [50.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  23 [50.0%]  (fallthru)
(note 379 205 381 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 381 379 382 24 (set (pc)
        (label_ref 380)) 242 {*arm_jump} (nil))
;; End of basic block 24 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  26 [100.0%] 

(barrier 382 381 219)

;; Start of basic block ( 28) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  28 [95.5%] 
(code_label 219 382 209 25 102 "" [1 uses])

(note 209 219 210 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 210 209 383 25 init/do_mounts.c:193 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])
        (reg/f:SI 1 r1 [orig:149 p.885 ] [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:149 p.885 ] [149])
        (nil)))

(jump_insn 383 210 384 25 (set (pc)
        (label_ref 347)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 27)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  27 [100.0%] 

(barrier 384 383 380)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  24 [100.0%] 
(code_label 380 384 212 26 108 "" [1 uses])

(note 212 380 220 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 220 212 347 26 init/do_mounts.c:192 discrim 2 (set (reg/f:SI 3 r3 [236])
        (symbol_ref:SI ("_ctype") [flags 0xc0] <var_decl 0x10fff720 _ctype>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_ctype") [flags 0xc0] <var_decl 0x10fff720 _ctype>)
        (nil)))
;; End of basic block 26 -> ( 27)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  27 [100.0%]  (fallthru)

;; Start of basic block ( 26 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  26 [100.0%]  (fallthru)
;; Pred edge  25 [100.0%] 
(code_label 347 220 320 27 107 "" [1 uses])

(note 320 347 213 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 213 320 215 27 init/do_mounts.c:192 discrim 1 (set (reg/f:SI 0 r0 [orig:138 p.1250 ] [138])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 215 213 218 27 init/do_mounts.c:192 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:138 p.1250 ] [138])
            (reg/f:SI 4 r4 [235]))) 219 {*arm_cmpsi_insn} (nil))

(insn 218 215 216 27 init/do_mounts.c:192 discrim 2 (set (reg/f:SI 1 r1 [orig:149 p.885 ] [149])
        (plus:SI (reg/f:SI 0 r0 [orig:138 p.1250 ] [138])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 216 218 217 27 init/do_mounts.c:192 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 226)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 27 -> ( 28 29)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  28 [95.5%]  (fallthru)
;; Succ edge  29 [4.5%]  (loop_exit)

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  27 [95.5%]  (fallthru)
(note 217 216 223 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 223 217 221 28 NOTE_INSN_DELETED)

(insn:TI 221 223 222 28 init/do_mounts.c:192 discrim 2 (set (reg:SI 2 r2 [205])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 0 r0 [orig:138 p.1250 ] [138])
                    (const_int -1 [0xffffffffffffffff])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 222 221 224 28 init/do_mounts.c:192 discrim 2 (set (reg:SI 2 r2 [206])
        (zero_extend:SI (mem/s/u/j:QI (plus:SI (reg/f:SI 3 r3 [236])
                    (reg:SI 2 r2 [205])) [0 _ctype S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/s/u/j:QI (plus:SI (reg:SI 2 r2 [205])
                    (symbol_ref:SI ("_ctype") [flags 0xc0] <var_decl 0x10fff720 _ctype>)) [0 _ctype S1 A8]))
        (nil)))

(insn:TI 224 222 225 28 init/do_mounts.c:192 discrim 2 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [206])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 2 r2 [206])
        (nil)))

(jump_insn:TI 225 224 226 28 init/do_mounts.c:192 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 219)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 28 -> ( 25 29)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  25 [95.5%] 
;; Succ edge  29 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 27 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  27 [4.5%]  (loop_exit)
;; Pred edge  28 [4.5%]  (fallthru,loop_exit)
(code_label 226 225 227 29 101 "" [1 uses])

(note 227 226 228 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn:TI 228 227 229 29 init/do_mounts.c:194 (set (reg/f:SI 4 r4 [208])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))
        (nil)))

(insn:TI 229 228 230 29 init/do_mounts.c:194 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:138 p.1250 ] [138])
            (reg/f:SI 4 r4 [208]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 230 229 231 29 init/do_mounts.c:194 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1014 [0x3f6])
            (nil))))
;; End of basic block 29 -> ( 39 30)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [10.1%] 
;; Succ edge  30 [89.9%]  (fallthru)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  29 [89.9%]  (fallthru)
(note 231 230 232 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn:TI 232 231 233 30 init/do_mounts.c:194 discrim 1 (set (reg:SI 3 r3 [orig:137 temp.1251 ] [137])
        (zero_extend:SI (mem:QI (reg/f:SI 0 r0 [orig:138 p.1250 ] [138]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 233 232 234 30 init/do_mounts.c:194 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:137 temp.1251 ] [137])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 234 233 235 30 init/do_mounts.c:194 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 30 -> ( 39 31)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [39.0%] 
;; Succ edge  31 [61.0%]  (fallthru)

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  30 [61.0%]  (fallthru)
(note 235 234 236 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn:TI 236 235 237 31 init/do_mounts.c:194 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:137 temp.1251 ] [137])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:137 temp.1251 ] [137])
        (nil)))

(jump_insn:TI 237 236 238 31 init/do_mounts.c:194 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3784 [0xec8])
            (nil))))
;; End of basic block 31 -> ( 39 32)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [37.8%] 
;; Succ edge  32 [62.2%]  (fallthru)

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  31 [62.2%]  (fallthru)
(note 238 237 253 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(note 253 238 240 32 NOTE_INSN_DELETED)

(insn:TI 240 253 241 32 init/do_mounts.c:198 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 241 240 242 32 init/do_mounts.c:198 (set (reg:SI 2 r2)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 242 241 360 32 init/do_mounts.c:198 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("simple_strtoul") [flags 0x41] <function_decl 0x10a77e00 simple_strtoul>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 360 242 359 32 init/do_mounts.c:199 (set (reg/f:SI 3 r3 [orig:209 p ] [209])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])
        (nil)))

(insn:TI 359 360 248 32 init/do_mounts.c:199 (set (reg:SI 2 r2 [210])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 248 359 243 32 init/do_mounts.c:199 (set (mem:QI (reg/f:SI 3 r3 [orig:209 p ] [209]) [0 S1 A8])
        (reg:QI 2 r2 [210])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:209 p ] [209])
        (expr_list:REG_DEAD (reg:QI 2 r2 [210])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(insn:TI 243 248 250 32 init/do_mounts.c:198 (set (reg:SI 5 r5 [orig:148 D.52751 ] [148])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 250 243 251 32 init/do_mounts.c:200 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [208])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -60 [0xffffffffffffffc4]))
        (nil)))

(insn:TI 251 250 252 32 init/do_mounts.c:200 (set (reg:SI 1 r1)
        (reg:SI 5 r5 [orig:148 D.52751 ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 252 251 254 32 init/do_mounts.c:200 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("blk_lookup_devt") [flags 0x41] <function_decl 0x115c3b00 blk_lookup_devt>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 254 252 255 32 init/do_mounts.c:201 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 6 r6 [orig:147 res ] [147])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 255 254 256 32 init/do_mounts.c:201 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 32 -> ( 39 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [50.0%] 
;; Succ edge  33 [50.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  32 [50.0%]  (fallthru)
(note 256 255 257 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn:TI 257 256 259 33 init/do_mounts.c:205 (set (reg/f:SI 3 r3 [orig:136 p.1253 ] [136])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 p+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 259 257 260 33 init/do_mounts.c:205 (set (reg/f:SI 2 r2 [214])
        (plus:SI (reg/f:SI 4 r4 [208])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn:TI 260 259 261 33 init/do_mounts.c:205 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:136 p.1253 ] [136])
            (reg/f:SI 2 r2 [214]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [214])
        (nil)))

(jump_insn:TI 261 260 262 33 init/do_mounts.c:205 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 33 -> ( 39 34)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [39.0%] 
;; Succ edge  34 [61.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  33 [61.0%]  (fallthru)
(note 262 261 266 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(note 266 262 264 34 NOTE_INSN_DELETED)

(insn:TI 264 266 358 34 init/do_mounts.c:205 discrim 1 (set (reg:SI 2 r2 [216])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [orig:136 p.1253 ] [136])
                    (const_int -2 [0xfffffffffffffffe])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 358 264 265 34 init/do_mounts.c:205 discrim 1 (set (reg/f:SI 1 r1 [215])
        (symbol_ref:SI ("_ctype") [flags 0xc0] <var_decl 0x10fff720 _ctype>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_ctype") [flags 0xc0] <var_decl 0x10fff720 _ctype>)
        (nil)))

(insn:TI 265 358 267 34 init/do_mounts.c:205 discrim 1 (set (reg:SI 2 r2 [217])
        (zero_extend:SI (mem/s/u/j:QI (plus:SI (reg/f:SI 1 r1 [215])
                    (reg:SI 2 r2 [216])) [0 _ctype S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg/f:SI 1 r1 [215])
        (expr_list:REG_EQUAL (zero_extend:SI (mem/s/u/j:QI (plus:SI (reg:SI 2 r2 [216])
                        (symbol_ref:SI ("_ctype") [flags 0xc0] <var_decl 0x10fff720 _ctype>)) [0 _ctype S1 A8]))
            (nil))))

(insn:TI 267 265 268 34 init/do_mounts.c:205 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [217])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 2 r2 [217])
        (nil)))

(jump_insn:TI 268 267 269 34 init/do_mounts.c:205 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 34 -> ( 39 35)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [39.0%] 
;; Succ edge  35 [61.0%]  (fallthru)

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  34 [61.0%]  (fallthru)
(note 269 268 271 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn:TI 271 269 272 35 init/do_mounts.c:205 discrim 2 (set (reg:SI 2 r2 [219])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [orig:136 p.1253 ] [136])
                    (const_int -1 [0xffffffffffffffff])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 272 271 273 35 init/do_mounts.c:205 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [219])
            (const_int 112 [0x70]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [219])
        (nil)))

(jump_insn:TI 273 272 274 35 init/do_mounts.c:205 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 302)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8010 [0x1f4a])
            (nil))))
;; End of basic block 35 -> ( 39 36)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [80.1%] 
;; Succ edge  36 [19.9%]  (fallthru)

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  35 [19.9%]  (fallthru)
(note 274 273 277 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn:TI 277 274 279 36 init/do_mounts.c:207 (set (mem:QI (plus:SI (reg/f:SI 3 r3 [orig:136 p.1253 ] [136])
                (const_int -1 [0xffffffffffffffff])) [0 S1 A8])
        (reg:QI 6 r6 [orig:147 res ] [147])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 6 r6 [orig:147 res ] [147])
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:136 p.1253 ] [136])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(insn 279 277 280 36 init/do_mounts.c:208 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [208])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -60 [0xffffffffffffffc4]))
        (nil)))

(insn:TI 280 279 281 36 init/do_mounts.c:208 (set (reg:SI 1 r1)
        (reg:SI 5 r5 [orig:148 D.52751 ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 281 280 282 36 init/do_mounts.c:208 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("blk_lookup_devt") [flags 0x41] <function_decl 0x115c3b00 blk_lookup_devt>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 282 281 385 36 init/do_mounts.c:208 (set (reg/v:SI 6 r6 [orig:147 res ] [147])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 385 282 386 36 (set (pc)
        (label_ref 302)) 242 {*arm_jump} (nil))
;; End of basic block 36 -> ( 39)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [100.0%] 

(barrier 386 385 333)

;; Start of basic block ( 15) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 6 [r6]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	

;; Pred edge  15 [61.0%] 
(code_label 333 386 286 37 105 "" [1 uses])

(note 286 333 293 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(note 293 286 295 37 NOTE_INSN_DELETED)

(note 295 293 354 37 NOTE_INSN_DELETED)

(insn:TI 354 295 287 37 include/linux/kdev_t.h:52 (set (reg:SI 3 r3 [224])
        (const_int 1048320 [0xfff00])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1048320 [0xfff00])
        (nil)))

(insn 287 354 294 37 include/linux/kdev_t.h:52 (set (reg:SI 2 r2 [223])
        (lshiftrt:SI (reg:SI 0 r0 [orig:153 D.52725 ] [153])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 294 287 290 37 include/linux/kdev_t.h:52 (set (reg:SI 6 r6 [230])
        (zero_extract:SI (reg:SI 0 r0 [orig:153 D.52725 ] [153])
            (const_int 12 [0xc])
            (const_int 8 [0x8]))) 124 {extzv_t2} (nil))

(insn 290 294 355 37 include/linux/kdev_t.h:52 (set (reg:SI 0 r0 [226])
        (and:SI (reg:SI 0 r0 [orig:153 D.52725 ] [153])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 355 290 291 37 include/linux/kdev_t.h:52 (set (reg:SI 3 r3 [224])
        (and:SI (reg:SI 2 r2 [223])
            (reg:SI 3 r3 [224]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [223])
        (nil)))

(insn:TI 291 355 296 37 include/linux/kdev_t.h:52 (set (reg:SI 3 r3 [227])
        (ior:SI (reg:SI 3 r3 [224])
            (reg:SI 0 r0 [226]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [226])
        (nil)))

(insn:TI 296 291 387 37 include/linux/kdev_t.h:52 (set (reg/v:SI 6 r6 [orig:147 res ] [147])
        (ior:SI (ashift:SI (reg:SI 6 r6 [230])
                (const_int 20 [0x14]))
            (reg:SI 3 r3 [227]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 3 r3 [227])
        (nil)))

(jump_insn 387 296 388 37 (set (pc)
        (label_ref 302)) 242 {*arm_jump} (nil))
;; End of basic block 37 -> ( 39)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [100.0%] 

(barrier 388 387 299)

;; Start of basic block ( 8 12 3 13 19 16) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  8 [30.2%] 
;; Pred edge  12 [62.2%] 
;; Pred edge  3 [62.2%] 
;; Pred edge  13 [62.2%] 
;; Pred edge  19 [61.0%] 
;; Pred edge  16 [100.0%] 
(code_label 299 388 300 38 87 "" [6 uses])

(note 300 299 301 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn:TI 301 300 302 38 init/do_mounts.c:213 (set (reg/v:SI 6 r6 [orig:147 res ] [147])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 38 -> ( 39)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [100.0%]  (fallthru)

;; Start of basic block ( 38 14 17 23 32 18 31 36 9 35 34 33 29 30 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  38 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
;; Pred edge  17 [50.0%] 
;; Pred edge  23 [50.0%] 
;; Pred edge  32 [50.0%] 
;; Pred edge  18 [50.0%] 
;; Pred edge  31 [37.8%] 
;; Pred edge  36 [100.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  35 [80.1%] 
;; Pred edge  34 [39.0%] 
;; Pred edge  33 [39.0%] 
;; Pred edge  29 [10.1%] 
;; Pred edge  30 [39.0%] 
;; Pred edge  37 [100.0%] 
(code_label 302 301 303 39 91 "" [14 uses])

(note 303 302 308 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn:TI 308 303 314 39 init/do_mounts.c:216 (set (reg/i:SI 0 r0)
        (reg/v:SI 6 r6 [orig:147 res ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 314 308 366 39 init/do_mounts.c:216 (use (reg/i:SI 0 r0)) -1 (nil))

(note 366 314 367 39 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 367 366 368 39 init/do_mounts.c:216 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 39 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 368 367 357)

(note 357 368 361 NOTE_INSN_DELETED)

(note 361 357 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function prepare_namespace (prepare_namespace)[0:2718] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 37 (  1.9)


prepare_namespace

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={31d,22u} r1={26d,11u,1d} r2={22d,5u} r3={25d,7u} r4={4d,11u,2d} r5={4d,10u} r12={18d,2u} r13={2d,37u} r14={17d,3u} r15={17d} r16={17d} r17={17d} r18={17d} r19={17d} r20={17d} r21={17d} r22={17d} r23={17d} r24={27d,11u} r27={17d} r28={17d} r29={17d} r30={17d} r31={17d} r32={17d} r33={17d} r34={17d} r35={17d} r36={17d} r37={17d} r38={17d} r39={17d} r40={17d} r41={17d} r42={17d} r43={17d} r44={17d} r45={17d} r46={17d} r47={17d} r48={17d} r49={17d} r50={17d} r51={17d} r52={17d} r53={17d} r54={17d} r55={17d} r56={17d} r57={17d} r58={17d} r59={17d} r60={17d} r61={17d} r62={17d} r63={17d} r64={17d} r65={17d} r66={17d} r67={17d} r68={17d} r69={17d} r70={17d} r71={17d} r72={17d} r73={17d} r74={17d} r75={17d} r76={17d} r77={17d} r78={17d} r79={17d} r80={17d} r81={17d} r82={17d} r83={17d} r84={17d} r85={17d} r86={17d} r87={17d} r88={17d} r89={17d} r90={17d} r91={17d} r92={17d} r93={17d} r94={17d} r95={17d} r96={17d} r97={17d} r98={17d} r99={17d} r100={17d} r101={17d} r102={17d} r103={17d} r104={17d} r105={17d} r106={17d} r107={17d} r108={17d} r109={17d} r110={17d} r111={17d} r112={17d} r113={17d} r114={17d} r115={17d} r116={17d} r117={17d} r118={17d} r119={17d} r120={17d} r121={17d} r122={17d} r123={17d} r124={17d} r125={17d} r126={17d} r127={17d} 
;;    total ref usage 2168{2046d,119u,3e} in 84{67 regular + 17 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]

( 2 3 )->[4]->( 5 9 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 4 )->[5]->( 7 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 5 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 5 6 )->[7]->( 18 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 6 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 4 8 )->[9]->( 18 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 9 )->[10]->( 11 17 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 10 )->[11]->( 12 17 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]

( 11 )->[12]->( 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 14 15 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 13 12 )->[14]->( 13 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]

( 14 )->[15]->( 13 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 15 )->[16]->( 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 10 11 16 )->[17]->( 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 9 17 7 )->[18]->( 1 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 18 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 8 to worklist
  Adding insn 171 to worklist
  Adding insn 19 to worklist
  Adding insn 13 to worklist
  Adding insn 26 to worklist
  Adding insn 22 to worklist
  Adding insn 42 to worklist
  Adding insn 38 to worklist
  Adding insn 31 to worklist
  Adding insn 54 to worklist
  Adding insn 50 to worklist
  Adding insn 175 to worklist
  Adding insn 62 to worklist
  Adding insn 88 to worklist
  Adding insn 80 to worklist
  Adding insn 73 to worklist
  Adding insn 70 to worklist
  Adding insn 94 to worklist
  Adding insn 91 to worklist
  Adding insn 99 to worklist
  Adding insn 104 to worklist
  Adding insn 177 to worklist
  Adding insn 111 to worklist
  Adding insn 116 to worklist
  Adding insn 123 to worklist
  Adding insn 119 to worklist
  Adding insn 133 to worklist
  Adding insn 131 to worklist
  Adding insn 128 to worklist
  Adding insn 135 to worklist
  Adding insn 138 to worklist
  Adding insn 152 to worklist
  Adding insn 174 to worklist
  Adding insn 149 to worklist
  Adding insn 144 to worklist
Finished finding needed instructions:
processing block 18 lr out =  4 [r4] 5 [r5] 13 [sp] 14 [lr]
  Adding insn 151 to worklist
  Adding insn 148 to worklist
  Adding insn 146 to worklist
  Adding insn 147 to worklist
  Adding insn 145 to worklist
  Adding insn 143 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 61 to worklist
  Adding insn 169 to worklist
  Adding insn 60 to worklist
processing block 13 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 163 to worklist
processing block 17 lr out =  4 [r4] 5 [r5] 13 [sp]
processing block 16 lr out =  4 [r4] 5 [r5] 13 [sp]
processing block 15 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 132 to worklist
processing block 14 lr out =  0 [r0] 4 [r4] 5 [r5] 13 [sp]
  Adding insn 161 to worklist
  Adding insn 122 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 109 to worklist
  Adding insn 110 to worklist
processing block 11 lr out =  1 [r1] 4 [r4] 5 [r5] 13 [sp]
  Adding insn 103 to worklist
  Adding insn 102 to worklist
  Adding insn 101 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 98 to worklist
  Adding insn 97 to worklist
  Adding insn 96 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 93 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 87 to worklist
  Adding insn 83 to worklist
  Adding insn 77 to worklist
  Adding insn 168 to worklist
  Adding insn 78 to worklist
  Adding insn 79 to worklist
  Adding insn 75 to worklist
  Adding insn 69 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 53 to worklist
  Adding insn 49 to worklist
  Adding insn 48 to worklist
  Adding insn 47 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 41 to worklist
  Adding insn 37 to worklist
  Adding insn 35 to worklist
  Adding insn 36 to worklist
  Adding insn 30 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 25 to worklist
  Adding insn 24 to worklist
  Adding insn 23 to worklist
processing block 3 lr out =  5 [r5] 13 [sp]
  Adding insn 18 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 11 to worklist
processing block 2 lr out =  1 [r1] 4 [r4] 5 [r5] 13 [sp]
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 5 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 37 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 171 to 8 -- after reload
;;   ======================================================

;;	  0-->   171 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  1-->     5 r4=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  4-->     6 r1=[r4+0x50]                      :cortex_a8_load_store_1
;;	  6-->     7 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  8-->     8 pc={(cc==0x0)?L20:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 171
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 11 to 19 -- after reload
;;   ======================================================

;;	  0-->    11 r0=`*.LC18'                       :cortex_a8_load_store_1
;;	  1-->    13 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->    15 r3=[r4+0x50]                      :cortex_a8_load_store_1
;;	  2-->    16 r0=0x3e8                          :cortex_a8_default
;;	  4-->    18 r0=r0*r3                          :cortex_a8_multiply_2
;;	  5-->    19 call [`msleep']                   :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 11
;;   new tail = 19

;;   ======================================================
;;   -- basic block 4 from 23 to 26 -- after reload
;;   ======================================================

;;	  0-->    23 r4=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  0-->    22 call [`wait_for_device_probe']    :cortex_a8_issue_branch
;;	  3-->    24 r3=zxn([r4+0x10])                 :cortex_a8_load_store_1
;;	  5-->    25 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  7-->    26 pc={(cc==0x0)?L89:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 23
;;   new tail = 26

;;   ======================================================
;;   -- basic block 5 from 30 to 42 -- after reload
;;   ======================================================

;;	  0-->    30 r5=r4+0x10                        :cortex_a8_default
;;	  0-->    36 r1=`*.LC19'                       :cortex_a8_load_store_1
;;	  1-->    35 r0=r5                             :cortex_a8_default
;;	  1-->    37 r2=0x3                            :cortex_a8_default
;;	  2-->    31 [r4+0x54]=r5                      :cortex_a8_load_store_1
;;	  3-->    38 r0=call [`strncmp']               :cortex_a8_issue_branch
;;	 35-->    41 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 37-->    42 pc={(cc==0x0)?L55:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 37
;;   new head = 30
;;   new tail = 42

;;   ======================================================
;;   -- basic block 6 from 47 to 54 -- after reload
;;   ======================================================

;;	  0-->    47 r0=r5                             :cortex_a8_default
;;	  0-->    48 r1=`*.LC20'                       :cortex_a8_load_store_1
;;	  1-->    49 r2=0x3                            :cortex_a8_default
;;	  2-->    50 r0=call [`strncmp']               :cortex_a8_issue_branch
;;	 34-->    53 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    54 pc={(cc!=0x0)?L65:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 47
;;   new tail = 54

;;   ======================================================
;;   -- basic block 7 from 60 to 175 -- after reload
;;   ======================================================

;;	  0-->   169 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    60 r0=const(`*.LANCHOR1'+0x10)       :cortex_a8_load_store_1
;;	  3-->    61 r1=[r3]                           :cortex_a8_load_store_1
;;	  4-->    62 call [`mount_block_root']         :cortex_a8_issue_branch
;;	  4-->   175 pc=L139                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 60
;;   new tail = 175

;;   ======================================================
;;   -- basic block 8 from 69 to 88 -- after reload
;;   ======================================================

;;	  0-->    69 r0=r5                             :cortex_a8_default
;;	  1-->    70 r0=call [`name_to_dev_t']         :cortex_a8_issue_branch
;;	  1-->   168 r3=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  2-->    75 r5=[r4+0x54]                      :cortex_a8_load_store_1
;;	  2-->    79 r2=0x5                            :cortex_a8_default
;;	  3-->    78 r1=`*.LC15'                       :cortex_a8_load_store_1
;;	 33-->    73 [r3]=r0                           :cortex_a8_load_store_1
;;	 33-->    77 r0=r5                             :cortex_a8_default
;;	 34-->    80 r0=call [`strncmp']               :cortex_a8_issue_branch
;;	 66-->    83 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 67-->    87 (!cc) r5=r5+0x5                   :cortex_a8_default
;;	 67-->    88 (!cc) [r4+0x54]=r5                :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 67
;;   new head = 69
;;   new tail = 88

;;   ======================================================
;;   -- basic block 9 from 91 to 94 -- after reload
;;   ======================================================

;;	  0-->    91 r0=call [`initrd_load']           :cortex_a8_issue_branch
;;	 32-->    93 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->    94 pc={(cc!=0x0)?L139:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 91
;;   new tail = 94

;;   ======================================================
;;   -- basic block 10 from 96 to 99 -- after reload
;;   ======================================================

;;	  0-->    96 r4=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  3-->    97 r3=[r4]                           :cortex_a8_load_store_1
;;	  5-->    98 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  7-->    99 pc={(cc!=0x0)?L136:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 96
;;   new tail = 99

;;   ======================================================
;;   -- basic block 11 from 101 to 104 -- after reload
;;   ======================================================

;;	  0-->   101 r1=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  3-->   102 r3=[r1]                           :cortex_a8_load_store_1
;;	  5-->   103 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  7-->   104 pc={(cc==0x0)?L136:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 101
;;   new tail = 104

;;   ======================================================
;;   -- basic block 12 from 110 to 177 -- after reload
;;   ======================================================

;;	  0-->   110 r1=r1+0x10                        :cortex_a8_default
;;	  0-->   109 r0=`*.LC21'                       :cortex_a8_load_store_1
;;	  1-->   111 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->   177 pc=L117                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 110
;;   new tail = 177

;;   ======================================================
;;   -- basic block 13 from 163 to 116 -- after reload
;;   ======================================================

;;	  0-->   163 r0=0x64                           :cortex_a8_default
;;	  1-->   116 call [`msleep']                   :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 163
;;   new tail = 116

;;   ======================================================
;;   -- basic block 14 from 119 to 123 -- after reload
;;   ======================================================

;;	  0-->   119 r0=call [`driver_probe_done']     :cortex_a8_issue_branch
;;	 32-->   122 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 32-->   161 r0=const(`*.LANCHOR1'+0x10)       :cortex_a8_load_store_1
;;	 34-->   123 pc={(cc!=0x0)?L121:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 119
;;   new tail = 123

;;   ======================================================
;;   -- basic block 15 from 128 to 133 -- after reload
;;   ======================================================

;;	  0-->   128 r0=call [`name_to_dev_t']         :cortex_a8_issue_branch
;;	 32-->   132 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 32-->   131 [r4]=r0                           :cortex_a8_load_store_1
;;	 34-->   133 pc={(cc==0x0)?L121:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 128
;;   new tail = 133

;;   ======================================================
;;   -- basic block 16 from 135 to 135 -- after reload
;;   ======================================================

;;	  0-->   135 call [`async_synchronize_full']   :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 135
;;   new tail = 135

;;   ======================================================
;;   -- basic block 17 from 138 to 138 -- after reload
;;   ======================================================

;;	  0-->   138 call [`mount_root']               :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 138
;;   new tail = 138

;;   ======================================================
;;   -- basic block 18 from 143 to 152 -- after reload
;;   ======================================================

;;	  0-->   143 ip=0x0                            :cortex_a8_default
;;	  0-->   146 r1=`*.LC23'                       :cortex_a8_load_store_1
;;	  1-->   147 r2=ip                             :cortex_a8_default
;;	  1-->   148 r3=0x2000                         :cortex_a8_default
;;	  2-->   145 r0=`*.LC22'                       :cortex_a8_load_store_1
;;	  3-->   144 [sp]=ip                           :cortex_a8_load_store_1
;;	  3-->   149 r0=call [`sys_mount']             :cortex_a8_issue_branch
;;	  4-->   151 r0=`*.LC22'                       :cortex_a8_load_store_1
;;	 35-->   174 {unspec{lr;};unspec/v{return;};}  :nothing
;;	 36-->   152 r0=call [`sys_chroot']            :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 143
;;   new tail = 152





prepare_namespace

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={31d,22u} r1={26d,11u,1d} r2={22d,5u} r3={25d,7u} r4={4d,11u,2d} r5={4d,10u} r12={18d,2u} r13={2d,37u} r14={17d,3u} r15={17d} r16={17d} r17={17d} r18={17d} r19={17d} r20={17d} r21={17d} r22={17d} r23={17d} r24={27d,11u} r27={17d} r28={17d} r29={17d} r30={17d} r31={17d} r32={17d} r33={17d} r34={17d} r35={17d} r36={17d} r37={17d} r38={17d} r39={17d} r40={17d} r41={17d} r42={17d} r43={17d} r44={17d} r45={17d} r46={17d} r47={17d} r48={17d} r49={17d} r50={17d} r51={17d} r52={17d} r53={17d} r54={17d} r55={17d} r56={17d} r57={17d} r58={17d} r59={17d} r60={17d} r61={17d} r62={17d} r63={17d} r64={17d} r65={17d} r66={17d} r67={17d} r68={17d} r69={17d} r70={17d} r71={17d} r72={17d} r73={17d} r74={17d} r75={17d} r76={17d} r77={17d} r78={17d} r79={17d} r80={17d} r81={17d} r82={17d} r83={17d} r84={17d} r85={17d} r86={17d} r87={17d} r88={17d} r89={17d} r90={17d} r91={17d} r92={17d} r93={17d} r94={17d} r95={17d} r96={17d} r97={17d} r98={17d} r99={17d} r100={17d} r101={17d} r102={17d} r103={17d} r104={17d} r105={17d} r106={17d} r107={17d} r108={17d} r109={17d} r110={17d} r111={17d} r112={17d} r113={17d} r114={17d} r115={17d} r116={17d} r117={17d} r118={17d} r119={17d} r120={17d} r121={17d} r122={17d} r123={17d} r124={17d} r125={17d} r126={17d} r127={17d} 
;;    total ref usage 2168{2046d,119u,3e} in 84{67 regular + 17 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 171 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 171 2 172 2 init/do_mounts.c:465 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_DEAD (reg:SI 2 r2)
                (expr_list:REG_DEAD (reg:SI 1 r1)
                    (expr_list:REG_DEAD (reg:SI 0 r0)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -24 [0xffffffffffffffe8])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 0 r0))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 1 r1))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 2 r2))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 172 171 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 172 6 2 init/do_mounts.c:468 (set (reg/f:SI 4 r4 [142])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 init/do_mounts.c:468 (set (reg:SI 1 r1 [orig:141 root_delay.909 ] [141])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [142])
                (const_int 80 [0x50])) [0 root_delay+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 80 [0x50]))) [0 root_delay+0 S4 A32])
        (nil)))

(insn:TI 7 6 8 2 init/do_mounts.c:468 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:141 root_delay.909 ] [141])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 8 7 9 2 init/do_mounts.c:468 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 9 8 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 9 11 3 NOTE_INSN_DELETED)

(insn:TI 11 17 13 3 init/do_mounts.c:469 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x12177c80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC18") [flags 0x82] <string_cst 0x12177c80>)
        (nil)))

(call_insn:TI 13 11 15 3 init/do_mounts.c:469 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 15 13 16 3 include/linux/delay.h:52 (set (reg:SI 3 r3 [orig:146 root_delay ] [146])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [142])
                (const_int 80 [0x50])) [0 root_delay+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [142])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 80 [0x50]))) [0 root_delay+0 S4 A32])
            (nil))))

(insn:TI 16 15 18 3 include/linux/delay.h:52 (set (reg:SI 0 r0 [147])
        (const_int 1000 [0x3e8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1000 [0x3e8])
        (nil)))

(insn:TI 18 16 19 3 include/linux/delay.h:52 (set (reg:SI 0 r0)
        (mult:SI (reg:SI 0 r0 [147])
            (reg:SI 3 r3 [orig:146 root_delay ] [146]))) 32 {*arm_mulsi3_v6} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:146 root_delay ] [146])
        (nil)))

(call_insn:TI 19 18 20 3 include/linux/delay.h:52 (parallel [
            (call (mem:SI (symbol_ref:SI ("msleep") [flags 0x41] <function_decl 0x11595a80 msleep>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 20 19 21 4 113 "" [1 uses])

(note 21 20 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 21 22 4 init/do_mounts.c:485 (set (reg/f:SI 4 r4 [148])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn 22 23 24 4 init/do_mounts.c:481 (parallel [
            (call (mem:SI (symbol_ref:SI ("wait_for_device_probe") [flags 0x41] <function_decl 0x11201180 wait_for_device_probe>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn:TI 24 22 25 4 init/do_mounts.c:485 (set (reg:SI 3 r3 [orig:149 saved_root_name ] [149])
        (zero_extend:SI (mem/s/j:QI (plus:SI (reg/f:SI 4 r4 [148])
                    (const_int 16 [0x10])) [0 saved_root_name+0 S1 A32]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/s/j:QI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 16 [0x10]))) [0 saved_root_name+0 S1 A32]))
        (nil)))

(insn:TI 25 24 26 4 init/do_mounts.c:485 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:149 saved_root_name ] [149])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:149 saved_root_name ] [149])
        (nil)))

(jump_insn:TI 26 25 27 4 init/do_mounts.c:485 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 4 -> ( 5 9)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)
;; Succ edge  9 [0.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [100.0%]  (fallthru)
(note 27 26 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 39 27 30 5 NOTE_INSN_DELETED)

(insn:TI 30 39 36 5 init/do_mounts.c:486 (set (reg/f:SI 5 r5 [152])
        (plus:SI (reg/f:SI 4 r4 [148])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 36 30 35 5 init/do_mounts.c:487 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC19") [flags 0x82] <string_cst 0x12215340>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC19") [flags 0x82] <string_cst 0x12215340>)
        (nil)))

(insn:TI 35 36 37 5 init/do_mounts.c:487 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 37 35 31 5 init/do_mounts.c:487 (set (reg:SI 2 r2)
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (nil))

(insn:TI 31 37 38 5 init/do_mounts.c:486 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [148])
                (const_int 84 [0x54])) [0 root_device_name+0 S4 A32])
        (reg/f:SI 5 r5 [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn/i:TI 38 31 41 5 init/do_mounts.c:487 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strncmp") [flags 0x41] <function_decl 0x51157e80 strncmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 41 38 42 5 init/do_mounts.c:487 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 42 41 43 5 init/do_mounts.c:487 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 5 -> ( 7 6)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [0.0%] 
;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%]  (fallthru)
(note 43 42 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 51 43 47 6 NOTE_INSN_DELETED)

(insn:TI 47 51 48 6 init/do_mounts.c:488 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 48 47 49 6 init/do_mounts.c:488 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC20") [flags 0x82] <string_cst 0x122153c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC20") [flags 0x82] <string_cst 0x122153c0>)
        (nil)))

(insn:TI 49 48 50 6 init/do_mounts.c:488 (set (reg:SI 2 r2)
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 50 49 53 6 init/do_mounts.c:488 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strncmp") [flags 0x41] <function_decl 0x51157e80 strncmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 53 50 54 6 init/do_mounts.c:487 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 54 53 55 6 init/do_mounts.c:487 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 65)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4285 [0x10bd])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [57.1%]  (fallthru)
;; Succ edge  8 [42.9%] 

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%] 
;; Pred edge  6 [57.1%]  (fallthru)
(code_label 55 54 56 7 115 "" [1 uses])

(note 56 55 169 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 169 56 60 7 init/do_mounts.c:489 (set (reg/f:SI 3 r3 [163])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 60 169 61 7 init/do_mounts.c:489 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn:TI 61 60 62 7 init/do_mounts.c:489 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 3 r3 [163]) [0 root_mountflags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [163])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 root_mountflags+0 S4 A32])
            (nil))))

(call_insn:TI 62 61 175 7 init/do_mounts.c:489 (parallel [
            (call (mem:SI (symbol_ref:SI ("mount_block_root") [flags 0x3] <function_decl 0x1212c900 mount_block_root>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 175 62 176 7 init/do_mounts.c:490 (set (pc)
        (label_ref 139)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 18)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  18 [100.0%] 

(barrier 176 175 65)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [42.9%] 
(code_label 65 176 66 8 116 "" [1 uses])

(note 66 65 71 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 71 66 81 8 NOTE_INSN_DELETED)

(note 81 71 69 8 NOTE_INSN_DELETED)

(insn:TI 69 81 70 8 init/do_mounts.c:492 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [152])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 5 r5 [152])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 16 [0x10])))
            (nil))))

(call_insn:TI 70 69 168 8 init/do_mounts.c:492 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("name_to_dev_t") [flags 0x3] <function_decl 0x115cbe00 name_to_dev_t>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 168 70 75 8 init/do_mounts.c:492 (set (reg/f:SI 3 r3 [166])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 75 168 79 8 init/do_mounts.c:493 (set (reg/f:SI 5 r5 [orig:140 root_device_name.910 ] [140])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [148])
                (const_int 84 [0x54])) [0 root_device_name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 84 [0x54]))) [0 root_device_name+0 S4 A32])
        (nil)))

(insn 79 75 78 8 init/do_mounts.c:493 (set (reg:SI 2 r2)
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (nil))

(insn:TI 78 79 73 8 init/do_mounts.c:493 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x121f9900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x121f9900>)
        (nil)))

(insn:TI 73 78 77 8 init/do_mounts.c:492 (set (mem/c/i:SI (reg/f:SI 3 r3 [166]) [0 ROOT_DEV+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [166])
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil))))

(insn 77 73 80 8 init/do_mounts.c:493 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:140 root_device_name.910 ] [140])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 80 77 83 8 init/do_mounts.c:493 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strncmp") [flags 0x41] <function_decl 0x51157e80 strncmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 83 80 87 8 init/do_mounts.c:493 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 87 83 88 8 init/do_mounts.c:494 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 5 r5 [171])
            (plus:SI (reg/f:SI 5 r5 [orig:140 root_device_name.910 ] [140])
                (const_int 5 [0x5])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [148])
                (const_int 84 [0x54])) [0 root_device_name+0 S4 A32])
        (nil)))

(insn 88 87 89 8 init/do_mounts.c:494 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [148])
                    (const_int 84 [0x54])) [0 root_device_name+0 S4 A32])
            (reg/f:SI 5 r5 [171]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 4 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 89 88 90 9 114 "" [1 uses])

(note 90 89 92 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 92 90 91 9 NOTE_INSN_DELETED)

(call_insn:TI 91 92 93 9 init/do_mounts.c:497 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("initrd_load") [flags 0x41] <function_decl 0x1212ce00 initrd_load>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn:TI 93 91 94 9 init/do_mounts.c:497 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 94 93 95 9 init/do_mounts.c:497 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 139)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 9 -> ( 18 10)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  18 [100.0%] 
;; Succ edge  10 [0.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  9 [0.0%]  (fallthru)
(note 95 94 96 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 96 95 97 10 init/do_mounts.c:501 (set (reg/f:SI 4 r4 [172])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 97 96 98 10 init/do_mounts.c:501 (set (reg:SI 3 r3 [orig:173 ROOT_DEV ] [173])
        (mem/c/i:SI (reg/f:SI 4 r4 [172]) [0 ROOT_DEV+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 4 r4 [172]) [0 ROOT_DEV+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182]) [0 ROOT_DEV+0 S4 A32])
            (nil))))

(insn:TI 98 97 99 10 init/do_mounts.c:501 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:173 ROOT_DEV ] [173])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:173 ROOT_DEV ] [173])
        (nil)))

(jump_insn:TI 99 98 100 10 init/do_mounts.c:501 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 136)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 11 17)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  11 [50.0%]  (fallthru)
;; Succ edge  17 [50.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [50.0%]  (fallthru)
(note 100 99 101 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 101 100 102 11 init/do_mounts.c:501 discrim 1 (set (reg/f:SI 1 r1 [174])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 102 101 103 11 init/do_mounts.c:501 discrim 1 (set (reg:SI 3 r3 [orig:175 root_wait ] [175])
        (mem/c/i:SI (reg/f:SI 1 r1 [174]) [0 root_wait+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 1 r1 [174]) [0 root_wait+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 root_wait+0 S4 A32])
            (nil))))

(insn:TI 103 102 104 11 init/do_mounts.c:501 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:175 root_wait ] [175])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:175 root_wait ] [175])
        (nil)))

(jump_insn:TI 104 103 105 11 init/do_mounts.c:501 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 136)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 11 -> ( 12 17)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  12 [0.0%]  (fallthru)
;; Succ edge  17 [100.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  11 [0.0%]  (fallthru)
(note 105 104 110 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 110 105 109 12 init/do_mounts.c:502 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 1 r1 [174])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 109 110 111 12 init/do_mounts.c:502 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC21") [flags 0x82] <string_cst 0x12216340>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC21") [flags 0x82] <string_cst 0x12216340>)
        (nil)))

(call_insn:TI 111 109 177 12 init/do_mounts.c:502 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 177 111 178 12 init/do_mounts.c:504 (set (pc)
        (label_ref 117)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 178 177 121)

;; Start of basic block ( 14 15) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  14 [29.0%] 
;; Pred edge  15 [91.0%] 
(code_label 121 178 114 13 120 "" [2 uses])

(note 114 121 163 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 163 114 116 13 init/do_mounts.c:506 (set (reg:SI 0 r0)
        (const_int 100 [0x64])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 116 163 117 13 init/do_mounts.c:506 (parallel [
            (call (mem:SI (symbol_ref:SI ("msleep") [flags 0x41] <function_decl 0x11595a80 msleep>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 13 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  13 [100.0%]  (fallthru,dfs_back)
;; Pred edge  12 [100.0%] 
(code_label 117 116 118 14 119 "" [1 uses])

(note 118 117 120 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 120 118 119 14 NOTE_INSN_DELETED)

(call_insn:TI 119 120 122 14 init/do_mounts.c:504 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("driver_probe_done") [flags 0x41] <function_decl 0x11201100 driver_probe_done>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn:TI 122 119 161 14 init/do_mounts.c:504 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 161 122 123 14 init/do_mounts.c:505 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 123 161 124 14 init/do_mounts.c:504 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 14 -> ( 13 15)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  13 [29.0%] 
;; Succ edge  15 [71.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  14 [71.0%]  (fallthru)
(note 124 123 128 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 128 124 132 15 init/do_mounts.c:505 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("name_to_dev_t") [flags 0x3] <function_decl 0x115cbe00 name_to_dev_t>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 132 128 131 15 init/do_mounts.c:504 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:133 ROOT_DEV.916 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 131 132 133 15 init/do_mounts.c:504 discrim 2 (set (mem/c/i:SI (reg/f:SI 4 r4 [187]) [0 ROOT_DEV+0 S4 A32])
        (reg:SI 0 r0 [orig:133 ROOT_DEV.916 ] [133])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:133 ROOT_DEV.916 ] [133])
        (nil)))

(jump_insn:TI 133 131 134 15 init/do_mounts.c:504 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 15 -> ( 13 16)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  13 [91.0%] 
;; Succ edge  16 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  15 [9.0%]  (fallthru,loop_exit)
(note 134 133 135 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 135 134 136 16 init/do_mounts.c:507 (parallel [
            (call (mem:SI (symbol_ref:SI ("async_synchronize_full") [flags 0x41] <function_decl 0x115d7000 async_synchronize_full>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 10 11 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  10 [50.0%] 
;; Pred edge  11 [100.0%] 
;; Pred edge  16 [100.0%]  (fallthru)
(code_label 136 135 137 17 118 "" [2 uses])

(note 137 136 138 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 138 137 139 17 init/do_mounts.c:515 (parallel [
            (call (mem:SI (symbol_ref:SI ("mount_root") [flags 0x3] <function_decl 0x1212c980 mount_root>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 9 17 7) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  9 [100.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 139 138 140 18 117 "" [2 uses])

(note 140 139 143 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 143 140 146 18 init/do_mounts.c:518 (set (reg:SI 12 ip [184])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 146 143 147 18 init/do_mounts.c:518 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC23") [flags 0x82] <string_cst 0x122230e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC23") [flags 0x82] <string_cst 0x122230e0>)
        (nil)))

(insn:TI 147 146 148 18 init/do_mounts.c:518 (set (reg:SI 2 r2)
        (reg:SI 12 ip [184])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 148 147 145 18 init/do_mounts.c:518 (set (reg:SI 3 r3)
        (const_int 8192 [0x2000])) 167 {*arm_movsi_insn} (nil))

(insn:TI 145 148 144 18 init/do_mounts.c:518 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC22") [flags 0x82] <string_cst 0x12223080>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC22") [flags 0x82] <string_cst 0x12223080>)
        (nil)))

(insn:TI 144 145 149 18 init/do_mounts.c:518 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [184])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [184])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn 149 144 151 18 init/do_mounts.c:518 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_mount") [flags 0x41] <function_decl 0x120f7880 sys_mount>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 151 149 173 18 init/do_mounts.c:519 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC22") [flags 0x82] <string_cst 0x12223080>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC22") [flags 0x82] <string_cst 0x12223080>)
        (nil)))

(note 173 151 174 18 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 174 173 152 18 init/do_mounts.c:520 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 152 174 153 18 init/do_mounts.c:519 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chroot") [flags 0x41] <function_decl 0x12103080 sys_chroot>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 18 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 153 152 170)

(note 170 153 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function match_dev_by_uuid (match_dev_by_uuid)[0:2705]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 45 to 9 -- after reload
;;   ======================================================

;;	  0-->    45 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->     7 r3=[r0+0x174]                     :cortex_a8_load_store_1
;;	  3-->     8 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->    11 (!cc) r0=r3                       :cortex_a8_default
;;	  5-->     9 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 45
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 16 to 49 -- after reload
;;   ======================================================

;;	  0-->    16 r0=r1                             :cortex_a8_default
;;	  0-->    18 r2=0x10                           :cortex_a8_default
;;	  1-->    17 r1=r3                             :cortex_a8_default
;;	  2-->    19 r0=call [`memcmp']                :cortex_a8_issue_branch
;;	 34-->    23 {r0=r0==0x0;clobber cc;}          :cortex_a8_default
;;	 34-->    37 use r0                            :nothing
;;	 34-->    49 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 34
;;   new head = 16
;;   new tail = 49





match_dev_by_uuid

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,6u} r1={3d,2u} r2={3d,1u} r3={3d,3u} r4={1d,2u} r12={1d} r13={2d,5u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 156{133d,23u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 45 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 45 4 46 2 init/do_mounts.c:70 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 46 45 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 46 8 2 init/do_mounts.c:74 (set (reg/f:SI 3 r3 [orig:135 D.52671 ] [135])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ dev ])
                (const_int 372 [0x174])) [0 <variable>.info+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 8 7 11 2 init/do_mounts.c:74 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:135 D.52671 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 11 8 9 2 init/do_mounts.c:82 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:133 D.52676 ] [133])
            (reg/f:SI 3 r3 [orig:135 D.52671 ] [135]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 9 11 15 2 init/do_mounts.c:74 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 2 -> ( 3 1)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [85.0%]  (fallthru)
;; Succ edge  EXIT [15.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [85.0%]  (fallthru)
(note 15 9 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 20 15 22 3 NOTE_INSN_DELETED)

(note 22 20 16 3 NOTE_INSN_DELETED)

(insn:TI 16 22 18 3 init/do_mounts.c:77 (set (reg:SI 0 r0)
        (reg/v/f:SI 1 r1 [orig:138 data ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:138 data ] [138])
        (nil)))

(insn 18 16 17 3 init/do_mounts.c:77 (set (reg:SI 2 r2)
        (const_int 16 [0x10])) 167 {*arm_movsi_insn} (nil))

(insn:TI 17 18 19 3 init/do_mounts.c:77 (set (reg:SI 1 r1)
        (reg/f:SI 3 r3 [orig:135 D.52671 ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:135 D.52671 ] [135])
        (nil)))

(call_insn/i:TI 19 17 23 3 init/do_mounts.c:77 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcmp") [flags 0x41] <function_decl 0x51154b80 memcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 23 19 37 3 init/do_mounts.c:80 (parallel [
            (set (reg:SI 0 r0 [orig:133 D.52676 ] [133])
                (eq:SI (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 37 23 49 3 init/do_mounts.c:83 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 49 37 48 3 init/do_mounts.c:83 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 48 49 43)

(note 43 48 44 NOTE_INSN_DELETED)

(note 44 43 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns
