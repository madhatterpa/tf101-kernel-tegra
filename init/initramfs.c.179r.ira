
;; Function error (error)[0:1311] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 12(l0): point = 1
   Insn 9(l0): point = 4
   Insn 8(l0): point = 6
   Insn 7(l0): point = 8
   Insn 2(l0): point = 10
   Insn 6(l0): point = 12
 a0(r134): [2..12]
 a1(r133): [2..10]
 a2(r135): [7..8]
Compressing live ranges: from 15 to 5 - 33%
Ranges after the compression:
 a0(r134): [0..4]
 a1(r133): [0..3]
 a2(r135): [1..2]
+++Allocating 24 bytes for conflict table (uncompressed size 24)
;; a0(r134,l0) conflicts: a1(r133,l0) a2(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r133,l0) conflicts: a0(r134,l0) a2(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r135,l0) conflicts: a1(r133,l0) a0(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=5, points=5
    allocnos=3, copies=0, conflicts=0, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r134 1r133 2r135
    modified regnos: 133 134 135
    border:
    Pressure: GENERAL_REGS=4
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
      Pushing a2(r135,l0)
      Pushing a1(r133,l0)
      Pushing a0(r134,l0)
      Popping a0(r134,l0)  -- assign reg 3
      Popping a1(r133,l0)  -- assign reg 0
      Popping a2(r135,l0)  -- assign reg 2
Disposition:
    1:r133 l0     0    0:r134 l0     3    2:r135 l0     2
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 0, 13, 14, dead_or_set: 134
insn=2, live_throughout: 13, 14, 134, dead_or_set: 0, 133
insn=7, live_throughout: 13, 14, 133, 134, dead_or_set: 135
insn=8, live_throughout: 13, 14, 133, 134, dead_or_set: 135
insn=9, live_throughout: 13, 14, 133, 134, dead_or_set: 
insn=12, live_throughout: 13, 14, dead_or_set: 133, 134
insn=18, live_throughout: 13, 14, dead_or_set: 
init_insns for 134: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 135: (insn_list:REG_DEP_TRUE 7 (nil))
changing reg in insn 2
changing reg in insn 12
changing reg in insn 6
changing reg in insn 12
changing reg in insn 7
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
Spilling for insn 12.

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 3 r3 [134]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 3 r3 [134]) [0 message+0 S4 A32])
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


error

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={1d,1u} r1={1d} r2={2d,1u} r3={2d,2u,1d} r12={1d} r13={1d,4u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 21{10d,10u,1e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 init/initramfs.c:15 (set (reg/f:SI 3 r3 [134])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 7 6 8 2 init/initramfs.c:15 (set (reg/f:SI 2 r2 [orig:135 message ] [135])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [134]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [134]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 8 7 9 2 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:135 message ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 9 8 10 2 init/initramfs.c:15 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7837 [0x1e9d])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [21.6%]  (fallthru)
;; Succ edge  4 [78.4%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [21.6%]  (fallthru)
(note 10 9 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 10 18 3 init/initramfs.c:16 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [134]) [0 message+0 S4 A32])
        (reg/v/f:SI 0 r0 [orig:133 x ] [133])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [78.4%] 
(code_label 18 12 21 4 3 "" [1 uses])

(note 21 18 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 40 21 41 NOTE_INSN_DELETED)

(note 41 40 0 NOTE_INSN_DELETED)


;; Function do_start (do_start)[0:1321] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 68.
verify found no changes in insn with uid = 68.
deleting insn with uid = 22.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)

Pass 0 for finding allocno costs

    a2 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:160000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r159: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:160000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 60(l0): point = 0
   Insn 54(l0): point = 2
   Insn 36(l0): point = 5
   Insn 47(l0): point = 7
   Insn 46(l0): point = 9
   Insn 44(l0): point = 11
   Insn 43(l0): point = 13
   Insn 41(l0): point = 15
   Insn 40(l0): point = 17
   Insn 38(l0): point = 19
   Insn 65(l0): point = 22
   Insn 15(l0): point = 24
   Insn 30(l0): point = 26
   Insn 29(l0): point = 28
   Insn 24(l0): point = 30
   Insn 18(l0): point = 32
   Insn 23(l0): point = 34
   Insn 68(l0): point = 40
   Insn 17(l0): point = 42
   Insn 27(l0): point = 44
   Insn 26(l0): point = 46
   Insn 21(l0): point = 48
   Insn 13(l0): point = 50
   Insn 10(l0): point = 53
   Insn 9(l0): point = 55
   Insn 6(l0): point = 57
   Insn 8(l0): point = 59
   Insn 5(l0): point = 61
 a0(r137): [25..61] [6..21]
 a1(r135): [53..57] [6..21]
 a2(r159): [8..9]
 a3(r157): [12..13]
 a4(r155): [16..17]
 a5(r134): [25..50]
 a6(r151): [27..28]
 a7(r147): [31..48]
 a8(r142): [33..42]
 a9(r146): [35..40]
 a10(r149): [45..46]
 a11(r133): [47..59]
Compressing live ranges: from 64 to 25 - 39%
Ranges after the compression:
 a0(r137): [8..24] [0..7]
 a1(r135): [21..22] [0..7]
 a2(r159): [1..2]
 a3(r157): [3..4]
 a4(r155): [5..6]
 a5(r134): [8..20]
 a6(r151): [9..10]
 a7(r147): [11..19]
 a8(r142): [12..15]
 a9(r146): [13..14]
 a10(r149): [16..17]
 a11(r133): [18..23]
+++Allocating 96 bytes for conflict table (uncompressed size 96)
;; a0(r137,l0) conflicts: a1(r135,l0) a2(r159,l0) a3(r157,l0) a4(r155,l0) a5(r134,l0) a6(r151,l0) a7(r147,l0) a8(r142,l0) a9(r146,l0) a10(r149,l0) a11(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r135,l0) conflicts: a0(r137,l0) a2(r159,l0) a3(r157,l0) a4(r155,l0) a11(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r159,l0) conflicts: a1(r135,l0) a0(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r157,l0) conflicts: a1(r135,l0) a0(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r155,l0) conflicts: a1(r135,l0) a0(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r134,l0) conflicts: a0(r137,l0) a6(r151,l0) a7(r147,l0) a8(r142,l0) a9(r146,l0) a10(r149,l0) a11(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r151,l0) conflicts: a0(r137,l0) a5(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r147,l0) conflicts: a0(r137,l0) a5(r134,l0) a8(r142,l0) a9(r146,l0) a10(r149,l0) a11(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r142,l0) conflicts: a0(r137,l0) a5(r134,l0) a7(r147,l0) a9(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r146,l0) conflicts: a0(r137,l0) a5(r134,l0) a7(r147,l0) a8(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r149,l0) conflicts: a0(r137,l0) a5(r134,l0) a7(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r133,l0) conflicts: a1(r135,l0) a0(r137,l0) a5(r134,l0) a7(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a10(r149)<->a11(r133)@125:shuffle
  regions=1, blocks=6, points=25
    allocnos=12, copies=1, conflicts=0, ranges=14

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r137 1r135 2r159 3r157 4r155 5r134 6r151 7r147 8r142 9r146 10r149 11r133
    modified regnos: 133 134 135 137 142 146 147 149 151 155 157 159
    border:
    Pressure: GENERAL_REGS=8
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
      Pushing a10(r149,l0)
      Pushing a9(r146,l0)
      Pushing a8(r142,l0)
      Pushing a6(r151,l0)
      Pushing a4(r155,l0)
      Pushing a3(r157,l0)
      Pushing a2(r159,l0)
      Pushing a11(r133,l0)
      Pushing a5(r134,l0)
      Pushing a1(r135,l0)
      Pushing a7(r147,l0)
      Pushing a0(r137,l0)
      Popping a0(r137,l0)  -- assign reg 3
      Popping a7(r147,l0)  -- assign reg 0
      Popping a1(r135,l0)  -- assign reg 2
      Popping a5(r134,l0)  -- assign reg 2
      Popping a11(r133,l0)  -- assign reg 12
      Popping a2(r159,l0)  -- assign reg 1
      Popping a3(r157,l0)  -- assign reg 1
      Popping a4(r155,l0)  -- assign reg 1
      Popping a6(r151,l0)  -- assign reg 1
      Popping a8(r142,l0)  -- assign reg 12
      Popping a9(r146,l0)  -- assign reg 4
      Popping a10(r149,l0)  -- assign reg 12
Disposition:
   11:r133 l0    12    5:r134 l0     2    1:r135 l0     2    0:r137 l0     3
    8:r142 l0    12    9:r146 l0     4    7:r147 l0     0   10:r149 l0    12
    6:r151 l0     1    4:r155 l0     1    3:r157 l0     1    2:r159 l0     1
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, 14, dead_or_set: 137
insn=8, live_throughout: 13, 14, 137, dead_or_set: 133
insn=6, live_throughout: 13, 14, 133, 137, dead_or_set: 135
insn=9, live_throughout: 13, 14, 133, 135, 137, dead_or_set: 
insn=10, live_throughout: 13, 14, 133, 135, 137, dead_or_set: 
insn=13, live_throughout: 13, 14, 133, 137, dead_or_set: 134
insn=21, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 147
insn=26, live_throughout: 13, 14, 134, 137, 147, dead_or_set: 133, 149
insn=27, live_throughout: 13, 14, 134, 137, 147, dead_or_set: 149
insn=17, live_throughout: 13, 14, 134, 137, 147, dead_or_set: 142
insn=68, live_throughout: 13, 14, 134, 137, 142, 147, dead_or_set: 146
insn=23, live_throughout: 13, 14, 134, 137, 142, dead_or_set: 146, 147
insn=18, live_throughout: 13, 14, 134, 137, 147, dead_or_set: 142
insn=24, live_throughout: 13, 14, 134, 137, dead_or_set: 147
insn=29, live_throughout: 13, 14, 134, 137, dead_or_set: 151
insn=30, live_throughout: 13, 14, 134, 137, dead_or_set: 151
insn=15, live_throughout: 13, 14, dead_or_set: 134, 137
insn=65, live_throughout: 13, 14, dead_or_set: 
insn=33, live_throughout: 13, 14, 135, 137, dead_or_set: 
insn=38, live_throughout: 13, 14, 135, 137, dead_or_set: 
insn=40, live_throughout: 13, 14, 135, 137, dead_or_set: 155
insn=41, live_throughout: 13, 14, 135, 137, dead_or_set: 155
insn=43, live_throughout: 13, 14, 135, 137, dead_or_set: 157
insn=44, live_throughout: 13, 14, 135, 137, dead_or_set: 157
insn=46, live_throughout: 13, 14, 135, 137, dead_or_set: 159
insn=47, live_throughout: 13, 14, 135, 137, dead_or_set: 159
insn=36, live_throughout: 13, 14, dead_or_set: 135, 137
insn=48, live_throughout: 13, 14, dead_or_set: 
insn=54, live_throughout: 13, 14, dead_or_set: 0
insn=60, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 134: (insn_list:REG_DEP_TRUE 15 (nil))
init_insns for 137: (insn_list:REG_DEP_TRUE 5 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 18 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 68 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 27 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 29 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 40 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 43 (nil))
init_insns for 159: (insn_list:REG_DEP_TRUE 46 (nil))
changing reg in insn 8
changing reg in insn 26
changing reg in insn 9
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 6
changing reg in insn 38
changing reg in insn 36
changing reg in insn 5
changing reg in insn 21
changing reg in insn 47
changing reg in insn 44
changing reg in insn 41
changing reg in insn 38
changing reg in insn 36
changing reg in insn 30
changing reg in insn 27
changing reg in insn 24
changing reg in insn 18
changing reg in insn 15
changing reg in insn 13
changing reg in insn 8
changing reg in insn 6
changing reg in insn 13
changing reg in insn 17
changing reg in insn 26
changing reg in insn 17
changing reg in insn 18
changing reg in insn 68
changing reg in insn 23
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
Spilling for insn 27.
Spilling for insn 18.
Spilling for insn 24.
Spilling for insn 30.
Spilling for insn 15.
Spilling for insn 38.
Spilling for insn 41.
Spilling for insn 44.
Spilling for insn 47.
Spilling for insn 36.

Reloads for insn # 27
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 18
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])

Reloads for insn # 24
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])

Reloads for insn # 30
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 15
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])

Reloads for insn # 38
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 36 [0x24])) [0 collect+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 36 [0x24])) [0 collect+0 S4 A32])

Reloads for insn # 41
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 40 [0x28])) [0 remains+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 40 [0x28])) [0 remains+0 S4 A32])

Reloads for insn # 44
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])

Reloads for insn # 47
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 36
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


do_start

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 24[cc]
;;  ref usage 	r0={4d,4u} r1={7d,6u} r2={3d,4u} r3={2d,14u,3d} r4={1d,1u} r5={1d,1u} r12={4d,4u} r13={1d,5u} r14={1d,1u} r24={2d,1u} r145={1d} 
;;    total ref usage 71{26d,41u,4e} in 28{28 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 8 2 init/initramfs.c:200 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 8 5 6 2 init/initramfs.c:184 (set (reg:SI 12 ip [orig:133 count.331 ] [133])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn 6 8 9 2 init/initramfs.c:200 (set (reg/f:SI 2 r2 [orig:135 header_buf.335 ] [135])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 header_buf+0 S4 A32])
        (nil)))

(insn 9 6 10 2 init/initramfs.c:184 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:133 count.331 ] [133])
            (const_int 109 [0x6d]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 init/initramfs.c:184 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  2 [0.0%]  (fallthru)
(note 11 10 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 13 11 21 3 init/initramfs.c:185 (set (reg/f:SI 2 r2 [orig:134 victim.332 ] [134])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 21 13 26 3 init/initramfs.c:173 (set (reg:DI 0 r0 [147])
        (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
        (nil)))

(insn 26 21 27 3 init/initramfs.c:174 (set (reg:SI 12 ip [149])
        (plus:SI (reg:SI 12 ip [orig:133 count.331 ] [133])
            (const_int -110 [0xffffffffffffff92]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn 27 26 17 3 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (nil))

(insn 17 27 68 3 init/initramfs.c:172 (set (reg/f:SI 12 ip [142])
        (plus:SI (reg/f:SI 2 r2 [orig:134 victim.332 ] [134])
            (const_int 110 [0x6e]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 68 17 23 3 init/initramfs.c:173 (set (reg:DI 4 r4 [146])
        (const_int 110 [0x6e])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 110 [0x6e])
        (nil)))

(insn 23 68 18 3 init/initramfs.c:173 (parallel [
            (set (reg:DI 0 r0 [147])
                (plus:DI (reg:DI 0 r0 [147])
                    (reg:DI 4 r4 [146])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg:DI 145 [ this_header ])
            (const_int 110 [0x6e]))
        (nil)))

(insn 18 23 24 3 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg/f:SI 12 ip [142])) 167 {*arm_movsi_insn} (nil))

(insn 24 18 29 3 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 0 r0 [147])) 163 {*arm_movdi} (nil))

(insn 29 24 30 3 init/initramfs.c:187 (set (reg:SI 1 r1 [151])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 30 29 15 3 init/initramfs.c:187 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 1 r1 [151])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(insn 15 30 65 3 init/initramfs.c:185 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (reg/f:SI 2 r2 [orig:134 victim.332 ] [134])) 167 {*arm_movsi_insn} (nil))

(jump_insn 65 15 66 3 (set (pc)
        (label_ref 48)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 66 65 33)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 33 66 34 4 7 "" [1 uses])

(note 34 33 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 38 34 40 4 init/initramfs.c:189 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (reg/f:SI 2 r2 [orig:135 header_buf.335 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 40 38 41 4 init/initramfs.c:190 (set (reg:SI 1 r1 [155])
        (const_int 110 [0x6e])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 110 [0x6e])
        (nil)))

(insn 41 40 43 4 init/initramfs.c:190 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (reg:SI 1 r1 [155])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 110 [0x6e])
        (nil)))

(insn 43 41 44 4 init/initramfs.c:191 (set (reg:SI 1 r1 [157])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 44 43 46 4 init/initramfs.c:191 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 1 r1 [157])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(insn 46 44 47 4 init/initramfs.c:192 (set (reg:SI 1 r1 [159])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 47 46 36 4 init/initramfs.c:192 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 1 r1 [159])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 36 47 48 4 init/initramfs.c:189 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (reg/f:SI 2 r2 [orig:135 header_buf.335 ] [135])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 48 36 49 5 8 "" [1 uses])

(note 49 48 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 54 49 60 5 init/initramfs.c:202 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 60 54 67 5 init/initramfs.c:202 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 67 60 69 NOTE_INSN_DELETED)

(note 69 67 0 NOTE_INSN_DELETED)


;; Function do_skip (do_skip)[0:1324] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 85.
verify found no changes in insn with uid = 85.
deleting insn with uid = 33.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)

Pass 0 for finding allocno costs

    a16 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a2(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a10(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a12(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a14(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000


Pass 1 for finding allocno costs

    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a2(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a10(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a12(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a14(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000

   Insn 70(l0): point = 0
   Insn 64(l0): point = 2
   Insn 45(l0): point = 5
   Insn 52(l0): point = 7
   Insn 44(l0): point = 9
   Insn 56(l0): point = 11
   Insn 49(l0): point = 13
   Insn 43(l0): point = 15
   Insn 55(l0): point = 17
   Insn 51(l0): point = 19
   Insn 48(l0): point = 21
   Insn 40(l0): point = 26
   Insn 57(l0): point = 28
   Insn 41(l0): point = 30
   Insn 82(l0): point = 33
   Insn 29(l0): point = 35
   Insn 31(l0): point = 37
   Insn 28(l0): point = 39
   Insn 34(l0): point = 41
   Insn 85(l0): point = 43
   Insn 27(l0): point = 45
   Insn 35(l0): point = 47
   Insn 25(l0): point = 49
   Insn 18(l0): point = 52
   Insn 17(l0): point = 54
   Insn 16(l0): point = 57
   Insn 14(l0): point = 60
   Insn 13(l0): point = 62
   Insn 80(l0): point = 64
   Insn 10(l0): point = 66
   Insn 81(l0): point = 71
   Insn 8(l0): point = 73
   Insn 6(l0): point = 75
   Insn 5(l0): point = 77
 a0(r134): [33..47] [3..28]
 a1(r151): [6..30]
 a2(r154): [6..9]
 a3(r159): [8..19]
 a4(r133): [10..26]
 a5(r153): [10..15]
 a6(r162): [12..17]
 a7(r157): [14..23]
 a8(r137): [40..73] [20..32]
 a9(r138): [69..75] [52..67] [24..32] [22..22]
 a10(r164): [52..64] [27..32]
 a11(r144): [36..49]
 a12(r147): [36..39]
 a13(r136): [38..68]
 a14(r146): [40..45]
 a15(r150): [42..43]
 a16(r165): [63..71]
 a17(r140): [65..77]
Compressing live ranges: from 80 to 40 - 50%
Ranges after the compression:
 a0(r134): [19..27] [0..16]
 a1(r151): [1..17]
 a2(r154): [1..3]
 a3(r159): [2..9]
 a4(r133): [4..14]
 a5(r153): [4..7]
 a6(r162): [5..8]
 a7(r157): [6..12]
 a8(r137): [23..37] [10..18]
 a9(r138): [35..38] [29..33] [13..18] [11..11]
 a10(r164): [29..31] [15..18]
 a11(r144): [20..28]
 a12(r147): [20..22]
 a13(r136): [21..34]
 a14(r146): [23..26]
 a15(r150): [24..25]
 a16(r165): [30..36]
 a17(r140): [32..39]
+++Allocating 144 bytes for conflict table (uncompressed size 144)
;; a0(r134,l0) conflicts: a2(r154,l0) a1(r151,l0) a3(r159,l0) a5(r153,l0) a4(r133,l0) a6(r162,l0) a7(r157,l0) a8(r137,l0) a9(r138,l0) a10(r164,l0) a12(r147,l0) a11(r144,l0) a13(r136,l0) a14(r146,l0) a15(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r151,l0) conflicts: a0(r134,l0) a2(r154,l0) a3(r159,l0) a5(r153,l0) a4(r133,l0) a6(r162,l0) a7(r157,l0) a8(r137,l0) a9(r138,l0) a10(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r154,l0) conflicts: a0(r134,l0) a1(r151,l0) a3(r159,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r159,l0) conflicts: a0(r134,l0) a2(r154,l0) a1(r151,l0) a5(r153,l0) a4(r133,l0) a6(r162,l0) a7(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r133,l0) conflicts: a0(r134,l0) a1(r151,l0) a3(r159,l0) a5(r153,l0) a6(r162,l0) a7(r157,l0) a8(r137,l0) a9(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r153,l0) conflicts: a0(r134,l0) a1(r151,l0) a3(r159,l0) a4(r133,l0) a6(r162,l0) a7(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r162,l0) conflicts: a0(r134,l0) a1(r151,l0) a3(r159,l0) a5(r153,l0) a4(r133,l0) a7(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r157,l0) conflicts: a0(r134,l0) a1(r151,l0) a3(r159,l0) a5(r153,l0) a4(r133,l0) a6(r162,l0) a8(r137,l0) a9(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r137,l0) conflicts: a0(r134,l0) a1(r151,l0) a4(r133,l0) a7(r157,l0) a9(r138,l0) a10(r164,l0) a11(r144,l0) a13(r136,l0) a14(r146,l0) a15(r150,l0) a16(r165,l0) a17(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r138,l0) conflicts: a0(r134,l0) a1(r151,l0) a4(r133,l0) a7(r157,l0) a8(r137,l0) a10(r164,l0) a13(r136,l0) a16(r165,l0) a17(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r164,l0) conflicts: a0(r134,l0) a1(r151,l0) a8(r137,l0) a9(r138,l0) a13(r136,l0) a16(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r144,l0) conflicts: a0(r134,l0) a8(r137,l0) a12(r147,l0) a13(r136,l0) a14(r146,l0) a15(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r147,l0) conflicts: a0(r134,l0) a11(r144,l0) a13(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r136,l0) conflicts: a0(r134,l0) a8(r137,l0) a9(r138,l0) a10(r164,l0) a12(r147,l0) a11(r144,l0) a14(r146,l0) a15(r150,l0) a16(r165,l0) a17(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r146,l0) conflicts: a0(r134,l0) a8(r137,l0) a11(r144,l0) a13(r136,l0) a15(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r150,l0) conflicts: a0(r134,l0) a8(r137,l0) a11(r144,l0) a13(r136,l0) a14(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r165,l0) conflicts: a8(r137,l0) a9(r138,l0) a10(r164,l0) a13(r136,l0) a17(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r140,l0) conflicts: a8(r137,l0) a9(r138,l0) a13(r136,l0) a16(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a4(r133)<->a10(r164)@125:shuffle
  cp1:a3(r159)<->a8(r137)@125:shuffle
  cp2:a2(r154)<->a5(r153)@125:shuffle
  cp3:a2(r154)<->a4(r133)@125:shuffle
  cp4:a12(r147)<->a14(r146)@125:shuffle
  cp5:a8(r137)<->a12(r147)@125:shuffle
  regions=1, blocks=8, points=40
    allocnos=18, copies=6, conflicts=0, ranges=24

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r134 1r151 2r154 3r159 4r133 5r153 6r162 7r157 8r137 9r138 10r164 11r144 12r147 13r136 14r146 15r150 16r165 17r140
    modified regnos: 133 134 136 137 138 140 144 146 147 150 151 153 154 157 159 162 164 165
    border:
    Pressure: GENERAL_REGS=9
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
      Pushing a16(r165,l0)
      Pushing a15(r150,l0)
      Pushing a14(r146,l0)
      Pushing a12(r147,l0)
      Pushing a7(r157,l0)
      Pushing a6(r162,l0)
      Pushing a5(r153,l0)
      Pushing a3(r159,l0)
      Pushing a2(r154,l0)
      Pushing a10(r164,l0)
      Pushing a0(r134,l0)
      Pushing a13(r136,l0)
      Pushing a9(r138,l0)
      Pushing a8(r137,l0)
      Pushing a4(r133,l0)
      Pushing a17(r140,l0)
      Pushing a11(r144,l0)
      Pushing a1(r151,l0)
      Popping a1(r151,l0)  -- assign reg 3
      Popping a11(r144,l0)  -- assign reg 3
      Popping a17(r140,l0)  -- assign reg 3
      Popping a4(r133,l0)  -- assign reg 2
      Popping a8(r137,l0)  -- assign reg 1
      Popping a9(r138,l0)  -- assign reg 4
      Popping a13(r136,l0)  -- assign reg 6
      Popping a0(r134,l0)  -- assign reg 0
      Popping a10(r164,l0)  -- assign reg 2
      Popping a2(r154,l0)  -- assign reg 2
      Popping a3(r159,l0)  -- assign reg 1
      Popping a5(r153,l0)  -- assign reg 12
      Popping a6(r162,l0)  -- assign reg 4
      Popping a7(r157,l0)  -- assign reg 6
      Popping a12(r147,l0)  -- assign reg 1
      Popping a14(r146,l0)  -- assign reg 2
      Popping a15(r150,l0)  -- assign reg 12
      Popping a16(r165,l0)  -- assign reg 0
Disposition:
    4:r133 l0     2    0:r134 l0     0   13:r136 l0     6    8:r137 l0     1
    9:r138 l0     4   17:r140 l0     3   11:r144 l0     3   14:r146 l0     2
   12:r147 l0     1   15:r150 l0    12    1:r151 l0     3    5:r153 l0    12
    2:r154 l0     2    7:r157 l0     6    3:r159 l0     1    6:r162 l0     4
   10:r164 l0     2   16:r165 l0     0
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, 14, dead_or_set: 140
insn=6, live_throughout: 13, 14, 140, dead_or_set: 138
insn=8, live_throughout: 13, 14, 138, 140, dead_or_set: 137
insn=81, live_throughout: 13, 14, 137, 138, 140, dead_or_set: 165
insn=10, live_throughout: 13, 14, 137, 138, 140, 165, dead_or_set: 136
insn=80, live_throughout: 13, 14, 136, 137, 138, 165, dead_or_set: 140, 164
insn=13, live_throughout: 13, 14, 136, 137, 138, 164, dead_or_set: 165
insn=14, live_throughout: 13, 14, 24, 136, 137, 138, 164, dead_or_set: 
insn=16, live_throughout: 13, 14, 136, 137, 138, 164, dead_or_set: 
insn=17, live_throughout: 13, 14, 136, 137, 138, 164, dead_or_set: 
insn=18, live_throughout: 13, 14, 136, 137, 138, 164, dead_or_set: 
insn=79, live_throughout: 13, 14, 136, 137, dead_or_set: 
insn=25, live_throughout: 13, 14, 136, 137, dead_or_set: 144
insn=35, live_throughout: 13, 14, 136, 137, 144, dead_or_set: 134
insn=27, live_throughout: 13, 14, 134, 136, 137, 144, dead_or_set: 146
insn=85, live_throughout: 13, 14, 134, 136, 137, 144, 146, dead_or_set: 150
insn=34, live_throughout: 13, 14, 134, 136, 137, 144, 146, dead_or_set: 150
insn=28, live_throughout: 13, 14, 134, 136, 144, dead_or_set: 137, 146, 147
insn=31, live_throughout: 13, 14, 134, 144, 147, dead_or_set: 136
insn=29, live_throughout: 13, 14, 134, dead_or_set: 144, 147
insn=82, live_throughout: 13, 14, 134, dead_or_set: 
insn=38, live_throughout: 13, 14, 137, 138, 164, dead_or_set: 
insn=41, live_throughout: 13, 14, 137, 138, 164, dead_or_set: 151
insn=57, live_throughout: 13, 14, 137, 138, 151, 164, dead_or_set: 134
insn=40, live_throughout: 13, 14, 134, 137, 138, 151, dead_or_set: 133, 164
insn=48, live_throughout: 13, 14, 133, 134, 137, 151, dead_or_set: 138, 157
insn=51, live_throughout: 13, 14, 133, 134, 151, 157, dead_or_set: 137, 159
insn=55, live_throughout: 13, 14, 133, 134, 151, 157, 159, dead_or_set: 162
insn=43, live_throughout: 13, 14, 133, 134, 151, 157, 159, 162, dead_or_set: 153
insn=49, live_throughout: 13, 14, 133, 134, 151, 153, 159, 162, dead_or_set: 157
insn=56, live_throughout: 13, 14, 133, 134, 151, 153, 159, dead_or_set: 162
insn=44, live_throughout: 13, 14, 134, 151, 159, dead_or_set: 133, 153, 154
insn=52, live_throughout: 13, 14, 134, 151, 154, dead_or_set: 159
insn=45, live_throughout: 13, 14, 134, dead_or_set: 151, 154
insn=58, live_throughout: 13, 14, 134, dead_or_set: 
insn=64, live_throughout: 13, 14, dead_or_set: 0, 134
insn=70, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 140: (insn_list:REG_DEP_TRUE 5 (nil))
init_insns for 144: (insn_list:REG_DEP_TRUE 25 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 27 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 29 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 85 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 41 (nil))
init_insns for 153: (insn_list:REG_DEP_TRUE 43 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 49 (nil))
init_insns for 159: (insn_list:REG_DEP_TRUE 52 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 55 (nil))
changing reg in insn 40
changing reg in insn 48
changing reg in insn 51
changing reg in insn 44
changing reg in insn 57
changing reg in insn 35
changing reg in insn 64
changing reg in insn 10
changing reg in insn 31
changing reg in insn 8
changing reg in insn 10
changing reg in insn 51
changing reg in insn 28
changing reg in insn 6
changing reg in insn 48
changing reg in insn 10
changing reg in insn 5
changing reg in insn 81
changing reg in insn 80
changing reg in insn 8
changing reg in insn 6
changing reg in insn 25
changing reg in insn 34
changing reg in insn 31
changing reg in insn 27
changing reg in insn 29
changing reg in insn 28
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 85
changing reg in insn 34
changing reg in insn 41
changing reg in insn 56
changing reg in insn 55
changing reg in insn 52
changing reg in insn 49
changing reg in insn 43
changing reg in insn 45
changing reg in insn 44
changing reg in insn 51
changing reg in insn 48
changing reg in insn 43
changing reg in insn 55
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 55
changing reg in insn 56
changing reg in insn 80
changing reg in insn 40
changing reg in insn 17
changing reg in insn 81
changing reg in insn 13
Spilling for insn 34.
Spilling for insn 31.
Spilling for insn 29.
Spilling for insn 49.
Spilling for insn 56.
Spilling for insn 52.
Spilling for insn 45.

Reloads for insn # 34
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 31
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [144])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [144])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])

Reloads for insn # 29
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])

Reloads for insn # 49
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [151])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [151])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])

Reloads for insn # 56
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 52
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 45
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
deleting insn with uid = 64.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)


do_skip

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 24[cc]
;;  ref usage 	r0={4d,3u} r1={4d,5u} r2={5d,7u} r3={4d,14u,7d} r4={2d,4u} r5={1d,2u} r6={2d,3u} r7={2d,3u} r12={3d,2u} r13={1d,7u} r14={1d,1u} r24={4d,3u} 
;;    total ref usage 94{33d,54u,7e} in 33{33 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 2 5 2 NOTE_INSN_DELETED)

(insn 5 9 6 2 init/initramfs.c:250 (set (reg/f:SI 3 r3 [140])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 8 2 init/initramfs.c:250 (set (reg:DI 4 r4 [orig:138 this_header.355 ] [138])
        (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [140])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
        (nil)))

(insn 8 6 81 2 init/initramfs.c:250 (set (reg:SI 1 r1 [orig:137 count.356 ] [137])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [140])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn 81 8 10 2 init/initramfs.c:250 (set (reg:SI 0 r0 [orig:165 next_header.357+4 ] [165])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [140])
                (const_int 52 [0x34])) [0 next_header+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 52 [0x34]))) [0 next_header+4 S4 A32])
        (nil)))

(insn 10 81 80 2 init/initramfs.c:250 (parallel [
            (set (reg:DI 6 r6 [orig:136 D.25909 ] [136])
                (plus:DI (zero_extend:DI (reg:SI 1 r1 [orig:137 count.356 ] [137]))
                    (reg:DI 4 r4 [orig:138 this_header.355 ] [138])))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (nil))

(insn 80 10 13 2 init/initramfs.c:250 (set (reg:SI 2 r2 [orig:164 next_header.357 ] [164])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [140])
                (const_int 48 [0x30])) [0 next_header+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 48 [0x30]))) [0 next_header+0 S4 A64])
        (nil)))

(insn 13 80 14 2 init/initramfs.c:250 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:165 next_header.357+4 ] [165])
            (reg:SI 7 r7 [ D.25909+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 14 13 72 2 init/initramfs.c:250 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 72 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn 16 72 73 3 init/initramfs.c:250 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  6 [71.0%] 
;; Succ edge  4 [29.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [29.0%]  (fallthru)
(note 73 16 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 73 18 4 init/initramfs.c:250 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:164 next_header.357 ] [164])
            (reg:SI 6 r6 [orig:136 D.25909 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 18 17 79 4 init/initramfs.c:250 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  in  	 1 [r1] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
(code_label 79 18 24 5 19 "" [1 uses])

(note 24 79 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 35 5 init/initramfs.c:172 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 35 25 27 5 init/initramfs.c:252 (set (reg:SI 0 r0 [orig:134 D.25913 ] [134])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 27 35 85 5 init/initramfs.c:172 (set (reg/f:SI 2 r2 [orig:146 victim ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 85 27 34 5 init/initramfs.c:174 (set (reg:SI 12 ip [150])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 34 85 28 5 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 12 ip [150])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 28 34 31 5 init/initramfs.c:172 (set (reg:SI 1 r1 [147])
        (plus:SI (reg/f:SI 2 r2 [orig:146 victim ] [146])
            (reg:SI 1 r1 [orig:137 count.356 ] [137]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 31 28 29 5 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [orig:136 D.25909 ] [136])) 163 {*arm_movdi} (nil))

(insn 29 31 82 5 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 1 r1 [147])) 167 {*arm_movsi_insn} (nil))

(jump_insn 82 29 83 5 init/initramfs.c:252 (set (pc)
        (label_ref 58)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%] 

(barrier 83 82 38)

;; Start of basic block ( 3 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  3 [71.0%] 
;; Pred edge  4 [50.0%] 
(code_label 38 83 39 6 15 "" [2 uses])

(note 39 38 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 47 39 41 6 NOTE_INSN_DELETED)

(insn 41 47 57 6 init/initramfs.c:172 (set (reg/f:SI 3 r3 [151])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 57 41 40 6 init/initramfs.c:256 (set (reg:SI 0 r0 [orig:134 D.25913 ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 40 57 48 6 init/initramfs.c:254 (set (reg:SI 2 r2 [orig:133 D.25916 ] [133])
        (minus:SI (reg:SI 2 r2 [orig:164 next_header.357 ] [164])
            (reg:SI 4 r4 [orig:138 this_header.355 ] [138]))) 28 {*arm_subsi3_insn} (nil))

(insn 48 40 51 6 init/initramfs.c:173 (parallel [
            (set (reg:DI 6 r6 [157])
                (plus:DI (zero_extend:DI (reg:SI 2 r2 [orig:133 D.25916 ] [133]))
                    (reg:DI 4 r4 [orig:138 this_header.355 ] [138])))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (nil)))

(insn 51 48 55 6 init/initramfs.c:174 (set (reg:SI 1 r1 [159])
        (minus:SI (reg:SI 1 r1 [orig:137 count.356 ] [137])
            (reg:SI 2 r2 [orig:133 D.25916 ] [133]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn 55 51 43 6 init/initramfs.c:255 (set (reg:SI 4 r4 [orig:162 next_state ] [162])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 44 [0x2c]))) [0 next_state+0 S4 A32])
            (nil))))

(insn 43 55 49 6 init/initramfs.c:172 (set (reg/f:SI 12 ip [orig:153 victim ] [153])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 49 43 56 6 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [157])) 163 {*arm_movdi} (nil))

(insn 56 49 44 6 init/initramfs.c:255 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 4 r4 [orig:162 next_state ] [162])) 167 {*arm_movsi_insn} (nil))

(insn 44 56 52 6 init/initramfs.c:172 (set (reg:SI 2 r2 [154])
        (plus:SI (reg/f:SI 12 ip [orig:153 victim ] [153])
            (reg:SI 2 r2 [orig:133 D.25916 ] [133]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 52 44 45 6 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 1 r1 [159])) 167 {*arm_movsi_insn} (nil))

(insn 45 52 58 6 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 2 r2 [154])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 58 45 59 7 17 "" [1 uses])

(note 59 58 70 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 70 59 84 7 init/initramfs.c:258 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 84 70 86 NOTE_INSN_DELETED)

(note 86 84 0 NOTE_INSN_DELETED)


;; Function do_reset (do_reset)[0:1325] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 17 count 25 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 17 count 25 (  1.9)
scanning new insn with uid = 211.
verify found no changes in insn with uid = 211.
deleting insn with uid = 164.
scanning new insn with uid = 212.
verify found no changes in insn with uid = 212.
deleting insn with uid = 189.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 17 count 25 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 17 count 25 (  1.9)

Pass 0 for finding allocno costs

    a9 (r266,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r265,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r264,l1) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r264,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r263,l1) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r263,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r262,l1) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r262,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r258,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r256,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r253,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r252,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r249,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r247,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r245,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r244,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r241,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r238,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r236,l1) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r234,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r234,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r233,l1) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r233,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r232,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r232,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a1(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r256,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r253,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r234,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r264,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r233,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a13(r263,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r247,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r241,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a18(r244,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r238,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a21(r262,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r232,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r233,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a24(r234,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r262,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r263,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a27(r264,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a28(r236,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r266: preferred GENERAL_REGS, alternative NO_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS

  a0(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a1(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r256,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r253,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r234,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r264,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r233,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a13(r263,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r247,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r241,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a18(r244,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r238,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a21(r262,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r232,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r233,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a24(r234,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r262,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r263,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a27(r264,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a28(r236,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 197(l0): point = 0
   Insn 169(l0): point = 3
   Insn 159(l0): point = 5
   Insn 162(l0): point = 7
   Insn 157(l0): point = 9
   Insn 168(l0): point = 11
   Insn 156(l0): point = 13
   Insn 165(l0): point = 15
   Insn 211(l0): point = 20
   Insn 161(l0): point = 22
   Insn 153(l0): point = 24
   Insn 155(l0): point = 30
   Insn 210(l0): point = 32
   Insn 209(l0): point = 34
   Insn 152(l0): point = 36
   Insn 212(l0): point = 44
   Insn 208(l0): point = 46
   Insn 207(l0): point = 48
   Insn 180(l0): point = 51
   Insn 174(l0): point = 53
   Insn 143(l0): point = 56
   Insn 142(l0): point = 58
   Insn 139(l0): point = 61
   Insn 138(l0): point = 63
   Insn 137(l0): point = 65
   Insn 190(l0): point = 68
   Insn 117(l0): point = 70
   Insn 115(l0): point = 72
   Insn 113(l0): point = 74
   Insn 120(l0): point = 80
   Insn 206(l0): point = 82
   Insn 119(l0): point = 84
   Insn 205(l0): point = 86
   Insn 204(l0): point = 88
   Insn 203(l0): point = 90
   Insn 114(l0): point = 92
   Insn 102(l0): point = 95
   Insn 202(l0): point = 97
   Insn 201(l0): point = 99
   Insn 104(l0): point = 101
   Insn 126(l0): point = 103
   Insn 106(l0): point = 105
   Insn 99(l0): point = 107
   Insn 194(l1): point = 110
   Insn 131(l1): point = 113
   Insn 130(l1): point = 115
   Insn 127(l1): point = 117
   Insn 125(l1): point = 123
   Insn 111(l1): point = 126
   Insn 110(l1): point = 128
   Insn 109(l1): point = 131
   Insn 108(l1): point = 133
 a0(r252): [57..67] [0..30]
 a1(r231): [6..32]
 a2(r256): [8..22]
 a3(r253): [10..13]
 a4(r257): [18..18] [12..16]
 a5(r232): [73..101] [14..50]
 a6(r258): [16..20]
 a7(r227): [39..39] [23..37]
 a8(r234): [85..95] [23..50]
 a9(r266): [33..48]
 a10(r264): [87..97] [35..50]
 a11(r245): [40..44] [37..38]
 a12(r233): [75..105] [38..50]
 a13(r263): [89..99] [47..50]
 a14(r249): [57..58]
 a15(r247): [64..65]
 a16(r241): [71..92]
 a17(r230): [71..82]
 a18(r244): [81..84]
 a19(r265): [83..90]
 a20(r238): [96..107]
 a21(r262): [95..103]
 a22(r232): [110..135]
 a23(r233): [110..135]
 a24(r234): [110..135]
 a25(r262): [110..135]
 a26(r263): [110..135]
 a27(r264): [110..135]
 a28(r236): [116..123]
 Rebuilding regno allocno list for 236
Compressing live ranges: from 136 to 53 - 38%
Ranges after the compression:
 a0(r252): [24..28] [0..12]
 a1(r231): [1..13]
 a2(r256): [2..10]
 a3(r253): [3..5]
 a4(r257): [8..8] [4..7]
 a5(r232): [49..52] [30..45] [6..23]
 a6(r258): [7..9]
 a7(r227): [18..18] [11..16]
 a8(r234): [49..52] [36..41] [11..23]
 a9(r266): [14..22]
 a10(r264): [49..52] [37..43] [15..23]
 a11(r245): [19..20] [16..17]
 a12(r233): [49..52] [31..47] [17..23]
 a13(r263): [49..52] [38..44] [21..23]
 a14(r249): [24..25]
 a15(r247): [26..27]
 a16(r241): [29..40]
 a17(r230): [29..33]
 a18(r244): [32..35]
 a19(r265): [34..39]
 a20(r238): [42..48]
 a21(r262): [49..52] [41..46]
 a28(r236): [50..51]
+++Allocating 184 bytes for conflict table (uncompressed size 232)
;; a0(r252,l0) conflicts: a1(r231,l0) a2(r256,l0) a3(r253,l0) a4(r257,l0) a5(r232,l0) a6(r258,l0) a7(r227,l0) a8(r234,l0) a14(r249,l0) a15(r247,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r231,l0) conflicts: a0(r252,l0) a2(r256,l0) a3(r253,l0) a4(r257,l0) a5(r232,l0) a6(r258,l0) a7(r227,l0) a8(r234,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r256,l0) conflicts: a0(r252,l0) a1(r231,l0) a3(r253,l0) a4(r257,l0) a5(r232,l0) a6(r258,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r253,l0) conflicts: a0(r252,l0) a1(r231,l0) a2(r256,l0) a4(r257,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r257,l0) conflicts: a0(r252,l0) a1(r231,l0) a2(r256,l0) a3(r253,l0) a5(r232,l0) a6(r258,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r232,l0) conflicts: a0(r252,l0) a1(r231,l0) a2(r256,l0) a4(r257,l0) a6(r258,l0) a7(r227,l0) a8(r234,l0) a9(r266,l0) a10(r264,l0) a11(r245,l0) a12(r233,l0) a13(r263,l0) a17(r230,l0) a16(r241,l0) a18(r244,l0) a19(r265,l0) a21(r262,l0) a20(r238,l0) a28(r236,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r258,l0) conflicts: a0(r252,l0) a1(r231,l0) a2(r256,l0) a4(r257,l0) a5(r232,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r227,l0) conflicts: a0(r252,l0) a1(r231,l0) a5(r232,l0) a8(r234,l0) a9(r266,l0) a10(r264,l0) a11(r245,l0) a12(r233,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r234,l0) conflicts: a0(r252,l0) a1(r231,l0) a5(r232,l0) a7(r227,l0) a9(r266,l0) a10(r264,l0) a11(r245,l0) a12(r233,l0) a13(r263,l0) a16(r241,l0) a19(r265,l0) a21(r262,l0) a28(r236,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r266,l0) conflicts: a5(r232,l0) a7(r227,l0) a8(r234,l0) a10(r264,l0) a11(r245,l0) a12(r233,l0) a13(r263,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r264,l0) conflicts: a5(r232,l0) a7(r227,l0) a8(r234,l0) a9(r266,l0) a11(r245,l0) a12(r233,l0) a13(r263,l0) a16(r241,l0) a19(r265,l0) a21(r262,l0) a20(r238,l0) a28(r236,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r245,l0) conflicts: a5(r232,l0) a7(r227,l0) a8(r234,l0) a9(r266,l0) a10(r264,l0) a12(r233,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r233,l0) conflicts: a5(r232,l0) a7(r227,l0) a8(r234,l0) a9(r266,l0) a10(r264,l0) a11(r245,l0) a13(r263,l0) a17(r230,l0) a16(r241,l0) a18(r244,l0) a19(r265,l0) a21(r262,l0) a20(r238,l0) a28(r236,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r263,l0) conflicts: a5(r232,l0) a8(r234,l0) a9(r266,l0) a10(r264,l0) a12(r233,l0) a16(r241,l0) a19(r265,l0) a21(r262,l0) a20(r238,l0) a28(r236,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r249,l0) conflicts: a0(r252,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r247,l0) conflicts: a0(r252,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r241,l0) conflicts: a5(r232,l0) a8(r234,l0) a10(r264,l0) a12(r233,l0) a13(r263,l0) a17(r230,l0) a18(r244,l0) a19(r265,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r230,l0) conflicts: a5(r232,l0) a12(r233,l0) a16(r241,l0) a18(r244,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r244,l0) conflicts: a5(r232,l0) a12(r233,l0) a17(r230,l0) a16(r241,l0) a19(r265,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r265,l0) conflicts: a5(r232,l0) a8(r234,l0) a10(r264,l0) a12(r233,l0) a13(r263,l0) a16(r241,l0) a18(r244,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r238,l0) conflicts: a5(r232,l0) a10(r264,l0) a12(r233,l0) a13(r263,l0) a21(r262,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r262,l0) conflicts: a5(r232,l0) a8(r234,l0) a10(r264,l0) a12(r233,l0) a13(r263,l0) a20(r238,l0) a28(r236,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r236,l0) conflicts: a5(r232,l0) a8(r234,l0) a10(r264,l0) a12(r233,l0) a13(r263,l0) a21(r262,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a1(r231)<->a9(r266)@1000:move
  cp1:a2(r256)<->a8(r234)@125:shuffle
  cp2:a2(r256)<->a7(r227)@125:shuffle
  cp3:a3(r253)<->a5(r232)@125:shuffle
  cp4:a8(r234)<->a18(r244)@125:shuffle
  cp5:a17(r230)<->a19(r265)@1000:move
  regions=2, blocks=13, points=53
    allocnos=29, copies=6, conflicts=2, ranges=38

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 12 11 10 9 8 5 7 6 4 3 2
    all: 0r252 1r231 2r256 3r253 4r257 5r232 6r258 7r227 8r234 9r266 10r264 11r245 12r233 13r263 14r249 15r247 16r241 17r230 18r244 19r265 20r238 21r262 28r236
    modified regnos: 227 230 231 232 233 234 236 238 241 244 245 247 249 252 253 256 257 258 262 263 264 265 266
    border:
    Pressure: GENERAL_REGS=10
    Reg 252 of GENERAL_REGS has 1 regs less
    Reg 231 of GENERAL_REGS has 1 regs less
    Reg 256 of GENERAL_REGS has 1 regs less
    Reg 253 of GENERAL_REGS has 1 regs less
    Reg 257 of GENERAL_REGS has 1 regs less
    Reg 232 of GENERAL_REGS has 1 regs less
    Reg 258 of GENERAL_REGS has 1 regs less
    Reg 227 of GENERAL_REGS has 1 regs less
    Reg 234 of GENERAL_REGS has 1 regs less
    Reg 266 of GENERAL_REGS has 1 regs less
    Reg 264 of GENERAL_REGS has 1 regs less
    Reg 245 of GENERAL_REGS has 1 regs less
    Reg 233 of GENERAL_REGS has 1 regs less
    Reg 263 of GENERAL_REGS has 1 regs less
    Reg 249 of GENERAL_REGS has 1 regs less
    Reg 247 of GENERAL_REGS has 1 regs less
    Reg 241 of GENERAL_REGS has 1 regs less
    Reg 230 of GENERAL_REGS has 1 regs less
    Reg 244 of GENERAL_REGS has 1 regs less
    Reg 265 of GENERAL_REGS has 1 regs less
    Reg 238 of GENERAL_REGS has 1 regs less
    Reg 262 of GENERAL_REGS has 1 regs less
    Reg 236 of GENERAL_REGS has 1 regs less
      Pushing a28(r236,l0)
      Pushing a21(r262,l0)
      Pushing a18(r244,l0)
      Pushing a15(r247,l0)
      Pushing a14(r249,l0)
      Pushing a11(r245,l0)
      Pushing a6(r258,l0)
      Pushing a3(r253,l0)
      Pushing a2(r256,l0)
      Pushing a13(r263,l0)
      Pushing a7(r227,l0)
      Pushing a10(r264,l0)
      Pushing a4(r257,l0)
      Pushing a19(r265,l0)
      Pushing a17(r230,l0)
      Pushing a16(r241,l0)
      Pushing a9(r266,l0)
      Pushing a8(r234,l0)
      Pushing a20(r238,l0)
      Pushing a5(r232,l0)
      Pushing a1(r231,l0)
      Pushing a0(r252,l0)
      Pushing a12(r233,l0)
      Popping a12(r233,l0)  -- assign reg 2
      Popping a0(r252,l0)  -- assign reg 3
      Popping a1(r231,l0)  -- assign reg 0
      Popping a5(r232,l0)  -- assign reg 12
      Popping a20(r238,l0)  -- assign reg 1
      Popping a8(r234,l0)  -- assign reg 4
      Popping a9(r266,l0)  -- assign reg 0
      Popping a16(r241,l0)  -- assign reg 1
      Popping a17(r230,l0)  -- assign reg 6
      Popping a19(r265,l0)  -- assign reg 6
      Popping a4(r257,l0)  -- assign reg 6
      Popping a10(r264,l0)  -- assign reg 5
      Popping a7(r227,l0)  -- assign reg 6
      Popping a13(r263,l0)  -- assign reg 8
      Popping a2(r256,l0)  -- assign reg 4
      Popping a3(r253,l0)  -- assign reg 12
      Popping a6(r258,l0)  -- assign reg 8
      Popping a11(r245,l0)  -- assign reg 8
      Popping a14(r249,l0)  -- assign reg 2
      Popping a15(r247,l0)  -- assign reg 2
      Popping a18(r244,l0)  -- assign reg 4
      Popping a21(r262,l0)  -- assign reg 6
      Popping a28(r236,l0)  -- assign reg 1
Disposition:
    7:r227 l0     6   17:r230 l0     6    1:r231 l0     0    5:r232 l0    12
   12:r233 l0     2    8:r234 l0     4   28:r236 l0     1   20:r238 l0     1
   16:r241 l0     1   18:r244 l0     4   11:r245 l0     8   15:r247 l0     2
   14:r249 l0     2    0:r252 l0     3    3:r253 l0    12    2:r256 l0     4
    4:r257 l0     6    6:r258 l0     8   21:r262 l0     6   13:r263 l0     8
   10:r264 l0     5   19:r265 l0     6    9:r266 l0     0
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=99, live_throughout: 13, 14, dead_or_set: 238
insn=106, live_throughout: 13, 14, 238, dead_or_set: 233
insn=126, live_throughout: 13, 14, 233, 238, dead_or_set: 262
insn=104, live_throughout: 13, 14, 233, 238, 262, dead_or_set: 232
insn=201, live_throughout: 13, 14, 232, 233, 238, 262, dead_or_set: 263
insn=202, live_throughout: 13, 14, 232, 233, 238, 262, 263, dead_or_set: 264
insn=102, live_throughout: 13, 14, 232, 233, 262, 263, 264, dead_or_set: 234, 238
insn=129, live_throughout: 13, 14, 232, 233, 234, 262, 263, 264, dead_or_set: 
insn=108, live_throughout: 13, 14, 232, 233, 234, 262, 263, 264, dead_or_set: 
insn=109, live_throughout: 13, 14, 232, 233, 234, 262, 263, 264, dead_or_set: 
insn=110, live_throughout: 13, 14, 232, 233, 234, 262, 263, 264, dead_or_set: 
insn=111, live_throughout: 13, 14, 232, 233, 234, 262, 263, 264, dead_or_set: 
insn=114, live_throughout: 13, 14, 232, 233, 234, 263, 264, dead_or_set: 241
insn=203, live_throughout: 13, 14, 232, 233, 234, 241, 263, 264, dead_or_set: 265
insn=204, live_throughout: 13, 14, 232, 233, 234, 241, 264, dead_or_set: 263, 265
insn=205, live_throughout: 13, 14, 232, 233, 234, 241, 265, dead_or_set: 264, 265
insn=119, live_throughout: 13, 14, 232, 233, 241, 265, dead_or_set: 234, 244
insn=206, live_throughout: 13, 14, 232, 233, 241, 244, dead_or_set: 230, 265
insn=120, live_throughout: 13, 14, 230, 232, 233, 241, dead_or_set: 244
insn=113, live_throughout: 13, 14, 232, 241, dead_or_set: 230, 233
insn=115, live_throughout: 13, 14, 230, 241, dead_or_set: 232
insn=117, live_throughout: 13, 14, dead_or_set: 230, 241
insn=190, live_throughout: 13, 14, dead_or_set: 
insn=123, live_throughout: 13, 14, 232, 233, 234, 262, 263, 264, dead_or_set: 
insn=125, live_throughout: 13, 14, 233, 234, 262, 263, 264, dead_or_set: 232, 236
insn=127, live_throughout: 13, 14, 232, 234, 236, 262, 263, 264, dead_or_set: 233
insn=130, live_throughout: 13, 14, 232, 233, 234, 262, 263, 264, dead_or_set: 236
insn=131, live_throughout: 13, 14, 232, 233, 234, 262, 263, 264, dead_or_set: 
insn=194, live_throughout: 13, 14, 232, 233, 234, 262, 263, 264, dead_or_set: 
insn=163, live_throughout: 13, 14, 252, dead_or_set: 
insn=137, live_throughout: 13, 14, 252, dead_or_set: 247
insn=138, live_throughout: 13, 14, 252, dead_or_set: 247
insn=139, live_throughout: 13, 14, 252, dead_or_set: 
insn=142, live_throughout: 13, 14, 252, dead_or_set: 249
insn=143, live_throughout: 13, 14, dead_or_set: 249, 252
insn=144, live_throughout: 13, 14, dead_or_set: 
insn=174, live_throughout: 13, 14, dead_or_set: 0
insn=180, live_throughout: 0, 13, 14, dead_or_set: 
insn=192, live_throughout: 13, 14, 232, 233, 234, 263, 264, dead_or_set: 
insn=207, live_throughout: 13, 14, 232, 233, 234, 263, 264, dead_or_set: 266
insn=208, live_throughout: 13, 14, 232, 233, 234, 264, dead_or_set: 263, 266
insn=212, live_throughout: 13, 14, 232, 233, 234, 264, 266, dead_or_set: 245
insn=152, live_throughout: 13, 14, 232, 234, 264, 266, dead_or_set: 227, 233, 245
insn=209, live_throughout: 13, 14, 227, 232, 234, 266, dead_or_set: 264, 266
insn=210, live_throughout: 13, 14, 227, 232, 234, dead_or_set: 231, 266
insn=155, live_throughout: 13, 14, 227, 231, 232, 234, dead_or_set: 252
insn=153, live_throughout: 13, 14, 227, 232, 234, 252, dead_or_set: 231
insn=161, live_throughout: 13, 14, 231, 232, 252, dead_or_set: 227, 234, 256
insn=211, live_throughout: 13, 14, 231, 232, 252, 256, dead_or_set: 258
insn=165, live_throughout: 13, 14, 231, 232, 252, 256, dead_or_set: 257, 258
insn=156, live_throughout: 13, 14, 231, 252, 256, 257, dead_or_set: 232, 253
insn=168, live_throughout: 13, 14, 231, 252, 253, 256, dead_or_set: 257
insn=157, live_throughout: 13, 14, 24, 231, 252, 256, dead_or_set: 253
insn=162, live_throughout: 13, 14, 24, 231, 252, dead_or_set: 256
insn=159, live_throughout: 13, 14, 24, 252, dead_or_set: 231
insn=169, live_throughout: 13, 14, 252, dead_or_set: 
insn=197, live_throughout: 13, 14, 252, dead_or_set: 
init_insns for 238: (insn_list:REG_DEP_TRUE 99 (nil))
init_insns for 241: (insn_list:REG_DEP_TRUE 114 (nil))
init_insns for 244: (insn_list:REG_DEP_TRUE 120 (nil))
init_insns for 245: (insn_list:REG_DEP_TRUE 212 (nil))
init_insns for 247: (insn_list:REG_DEP_TRUE 137 (nil))
init_insns for 249: (insn_list:REG_DEP_TRUE 142 (nil))
init_insns for 252: (insn_list:REG_DEP_TRUE 155 (nil))
init_insns for 253: (insn_list:REG_DEP_TRUE 157 (nil))
init_insns for 256: (insn_list:REG_DEP_TRUE 162 (nil))
init_insns for 258: (insn_list:REG_DEP_TRUE 211 (nil))
init_insns for 262: (insn_list:REG_DEP_TRUE 126 (nil))
changing reg in insn 152
changing reg in insn 153
changing reg in insn 206
changing reg in insn 113
changing reg in insn 113
changing reg in insn 117
changing reg in insn 210
changing reg in insn 153
changing reg in insn 153
changing reg in insn 165
changing reg in insn 159
changing reg in insn 165
changing reg in insn 125
changing reg in insn 104
changing reg in insn 125
changing reg in insn 156
changing reg in insn 115
changing reg in insn 127
changing reg in insn 106
changing reg in insn 113
changing reg in insn 127
changing reg in insn 152
changing reg in insn 152
changing reg in insn 127
changing reg in insn 102
changing reg in insn 108
changing reg in insn 161
changing reg in insn 119
changing reg in insn 125
changing reg in insn 130
changing reg in insn 99
changing reg in insn 202
changing reg in insn 201
changing reg in insn 104
changing reg in insn 102
changing reg in insn 114
changing reg in insn 120
changing reg in insn 117
changing reg in insn 115
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 212
changing reg in insn 152
changing reg in insn 137
changing reg in insn 138
changing reg in insn 142
changing reg in insn 143
changing reg in insn 155
changing reg in insn 162
changing reg in insn 159
changing reg in insn 143
changing reg in insn 137
changing reg in insn 157
changing reg in insn 161
changing reg in insn 156
changing reg in insn 137
changing reg in insn 156
changing reg in insn 157
changing reg in insn 161
changing reg in insn 162
changing reg in insn 165
changing reg in insn 211
changing reg in insn 165
changing reg in insn 126
changing reg in insn 127
changing reg in insn 201
changing reg in insn 208
changing reg in insn 204
changing reg in insn 202
changing reg in insn 209
changing reg in insn 205
changing reg in insn 203
changing reg in insn 206
changing reg in insn 205
changing reg in insn 204
changing reg in insn 207
changing reg in insn 210
changing reg in insn 209
changing reg in insn 208
Spilling for insn 120.
Spilling for insn 115.
Spilling for insn 117.
Spilling for insn 143.
Spilling for insn 152.
Spilling for insn 168.
Using reg 2 for reload 0
Spilling for insn 157.
Spilling for insn 162.
Spilling for insn 159.

Reloads for insn # 120
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [241])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [241])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 115
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 1 r1 [241])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 1 r1 [241])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])

Reloads for insn # 117
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 1 r1 [241])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 1 r1 [241])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])

Reloads for insn # 143
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 3 r3 [252]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 3 r3 [252]) [0 message+0 S4 A32])

Reloads for insn # 152
Reload 0: reload_in (DI) = (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])
	reload_out (DI) = (reg:DI 6 r6 [orig:227 ivtmp.554 ] [227])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])
	reload_out_reg: (reg:DI 6 r6 [orig:227 ivtmp.554 ] [227])
	reload_reg_rtx: (reg:DI 6 r6 [orig:227 ivtmp.554 ] [227])

Reloads for insn # 168
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 157
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])

Reloads for insn # 162
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 159
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [252])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [252])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
deleting insn with uid = 203.
deleting insn with uid = 206.
deleting insn with uid = 207.
deleting insn with uid = 210.


try_optimize_cfg iteration 1

Forwarding edge 6->7 to 3 failed.
Forwarding edge 11->12 to 8 failed.
starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 17 count 25 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 17 count 25 (  1.9)


do_reset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 12[ip] 24[cc]
;;  ref usage 	r0={4d,5u,1d} r1={6d,11u,2d} r2={6d,7u,2d} r3={4d,9u,5d} r4={3d,5u} r5={1d,2u} r6={6d,7u} r7={6d,6u} r8={3d,4u} r9={2d,2u} r12={4d,4u} r13={1d,12u} r14={1d,1u} r24={9d,5u} 
;;    total ref usage 146{56d,80u,10e} in 49{49 regular + 0 call} insns.
(note 95 0 97 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 97 95 96 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 96 97 99 2 NOTE_INSN_FUNCTION_BEG)

(insn 99 96 106 2 init/initramfs.c:261 (set (reg/f:SI 1 r1 [238])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 106 99 126 2 init/initramfs.c:260 (set (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 126 106 104 2 init/initramfs.c:262 discrim 2 (set (reg:DI 6 r6 [262])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 104 126 201 2 init/initramfs.c:261 (set (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 1 r1 [238])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 victim+0 S4 A32])
        (nil)))

(insn 201 104 202 2 init/initramfs.c:261 (set (reg:SI 8 r8 [orig:263 this_header_lsm.527 ] [263])
        (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [238])
                (const_int 24 [0x18])) [0 this_header+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 202 201 102 2 init/initramfs.c:261 (set (reg:SI 5 r5 [orig:264 this_header_lsm.527+4 ] [264])
        (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [238])
                (const_int 28 [0x1c])) [0 this_header+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 102 202 129 2 init/initramfs.c:261 (set (reg:SI 4 r4 [orig:234 count_lsm.528 ] [234])
        (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [238])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 7) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%]  (dfs_back)
(code_label 129 102 107 3 25 "" [1 uses])

(note 107 129 108 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 108 107 109 3 init/initramfs.c:262 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])
            (reg:SI 4 r4 [orig:234 count_lsm.528 ] [234]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 109 108 182 3 init/initramfs.c:262 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  6 [71.0%] 
;; Succ edge  4 [29.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [29.0%]  (fallthru)
(note 182 109 110 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 110 182 111 4 init/initramfs.c:262 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ ivtmp.533+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 111 110 112 4 init/initramfs.c:262 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  6 [71.0%] 
;; Succ edge  5 [29.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 4 [r4] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  4 [29.0%]  (fallthru,loop_exit)
(note 112 111 114 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 114 112 204 5 init/initramfs.c:260 (set (reg/f:SI 1 r1 [241])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 204 114 205 5 init/initramfs.c:260 (set (reg:SI 6 r6 [orig:265 D.26681 ] [265])
        (reg:SI 8 r8 [orig:263 this_header_lsm.527 ] [263])) 167 {*arm_movsi_insn} (nil))

(insn 205 204 119 5 init/initramfs.c:260 (set (reg:SI 7 r7 [ D.26681+4 ])
        (reg:SI 5 r5 [orig:264 this_header_lsm.527+4 ] [264])) 167 {*arm_movsi_insn} (nil))

(insn 119 205 120 5 init/initramfs.c:260 (set (reg:SI 4 r4 [244])
        (minus:SI (reg:SI 4 r4 [orig:234 count_lsm.528 ] [234])
            (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [241])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn 120 119 113 5 init/initramfs.c:260 (set (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [241])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 4 r4 [244])) 167 {*arm_movsi_insn} (nil))

(insn 113 120 115 5 init/initramfs.c:260 (parallel [
            (set (reg:DI 6 r6 [orig:230 D.26681 ] [230])
                (plus:DI (reg:DI 6 r6 [orig:230 D.26681 ] [230])
                    (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 115 113 117 5 init/initramfs.c:260 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 1 r1 [241])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])) 167 {*arm_movsi_insn} (nil))

(insn 117 115 190 5 init/initramfs.c:260 (set (mem/c/i:DI (plus:SI (reg/f:SI 1 r1 [241])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [orig:230 D.26681 ] [230])) 163 {*arm_movdi} (nil))

(jump_insn 190 117 191 5 (set (pc)
        (label_ref 144)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 10)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  10 [100.0%] 

(barrier 191 190 123)

;; Start of basic block ( 4 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  4 [71.0%] 
;; Pred edge  3 [71.0%] 
(code_label 123 191 124 6 23 "" [2 uses])

(note 124 123 125 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 125 124 127 6 init/initramfs.c:262 discrim 2 (set (reg:SI 1 r1 [orig:236 D.25927 ] [236])
        (zero_extend:SI (mem:QI (post_inc:SI (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_INC (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])
        (nil)))

(insn 127 125 130 6 init/initramfs.c:262 discrim 2 (parallel [
            (set (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])
                (plus:DI (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])
                    (reg:DI 6 r6 [262])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])
            (const_int 1 [0x1]))
        (nil)))

(insn 130 127 131 6 init/initramfs.c:262 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:236 D.25927 ] [236])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 131 130 193 6 init/initramfs.c:262 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 192)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 6 -> ( 7 11)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [0.0%]  (fallthru)
;; Succ edge  11 [100.0%]  (loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [0.0%]  (fallthru)
(note 193 131 194 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(jump_insn 194 193 195 7 (set (pc)
        (label_ref 129)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 3)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%]  (dfs_back)

(barrier 195 194 163)

;; Start of basic block ( 12) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%] 
(code_label 163 195 135 8 27 "" [1 uses])

(note 135 163 137 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 137 135 138 8 init/initramfs.c:15 (set (reg/f:SI 2 r2 [orig:247 message ] [247])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 138 137 139 8 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:247 message ] [247])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 139 138 140 8 init/initramfs.c:15 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 144)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7837 [0x1e9d])
        (nil)))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  9 [21.6%]  (fallthru)
;; Succ edge  10 [78.4%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  8 [21.6%]  (fallthru)
(note 140 139 142 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 142 140 143 9 init/initramfs.c:16 (set (reg/f:SI 2 r2 [249])
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11561d50>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11561d50>)
        (nil)))

(insn 143 142 144 9 init/initramfs.c:16 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [252]) [0 message+0 S4 A32])
        (reg/f:SI 2 r2 [249])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11561d50>)
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 11 9 8 5) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  11 [100.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  8 [78.4%] 
;; Pred edge  5 [100.0%] 
(code_label 144 143 145 10 24 "" [3 uses])

(note 145 144 174 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 174 145 180 10 init/initramfs.c:267 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 180 174 192 10 init/initramfs.c:267 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 6) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  kill	 2 [r2] 24 [cc]

;; Pred edge  6 [100.0%]  (loop_exit)
(code_label 192 180 150 11 30 "" [1 uses])

(note 150 192 166 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 166 150 167 11 NOTE_INSN_DELETED)

(note 167 166 208 11 NOTE_INSN_DELETED)

(insn 208 167 212 11 init/initramfs.c:260 (set (reg:SI 0 r0 [orig:266 D.26679 ] [266])
        (reg:SI 8 r8 [orig:263 this_header_lsm.527 ] [263])) 167 {*arm_movsi_insn} (nil))

(insn 212 208 214 11 init/initramfs.c:267 (set (reg:DI 8 r8 [245])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 214 212 152 11 init/initramfs.c:267 (set (reg:DI 6 r6 [orig:227 ivtmp.554 ] [227])
        (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])) 163 {*arm_movdi} (nil))

(insn 152 214 209 11 init/initramfs.c:267 (parallel [
            (set (reg:DI 6 r6 [orig:227 ivtmp.554 ] [227])
                (minus:DI (reg:DI 6 r6 [orig:227 ivtmp.554 ] [227])
                    (reg:DI 8 r8 [245])))
            (clobber (reg:CC 24 cc))
        ]) 20 {*arm_subdi3} (expr_list:REG_EQUAL (plus:DI (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 209 152 155 11 init/initramfs.c:260 (set (reg:SI 1 r1 [ D.26679+4 ])
        (reg:SI 5 r5 [orig:264 this_header_lsm.527+4 ] [264])) 167 {*arm_movsi_insn} (nil))

(insn 155 209 153 11 init/initramfs.c:260 (set (reg/f:SI 3 r3 [252])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 153 155 161 11 init/initramfs.c:260 (parallel [
            (set (reg:DI 0 r0 [orig:231 D.26679 ] [231])
                (plus:DI (reg:DI 0 r0 [orig:231 D.26679 ] [231])
                    (reg:DI 6 r6 [orig:227 ivtmp.554 ] [227])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 161 153 211 11 init/initramfs.c:260 (set (reg:SI 4 r4 [256])
        (minus:SI (reg:SI 4 r4 [orig:234 count_lsm.528 ] [234])
            (reg:SI 6 r6 [orig:227 ivtmp.554 ] [227]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn 211 161 165 11 init/initramfs.c:264 discrim 1 (set (reg:DI 8 r8 [258])
        (const_int 3 [0x3])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 165 211 156 11 init/initramfs.c:264 discrim 1 (set (reg:DI 6 r6 [257])
        (and:DI (reg:DI 0 r0 [orig:231 D.26679 ] [231])
            (reg:DI 8 r8 [258]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:231 D.26679 ] [231])
            (const_int 3 [0x3]))
        (nil)))

(insn 156 165 168 11 init/initramfs.c:260 (set (reg:SI 12 ip [253])
        (plus:SI (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 168 156 157 11 init/initramfs.c:264 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 6 r6 [257])
                        (reg:SI 7 r7 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 2 r2))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 157 168 162 11 init/initramfs.c:260 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 12 ip [253])) 167 {*arm_movsi_insn} (nil))

(insn 162 157 159 11 init/initramfs.c:260 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 4 r4 [256])) 167 {*arm_movsi_insn} (nil))

(insn 159 162 169 11 init/initramfs.c:260 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [252])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 0 r0 [orig:231 D.26679 ] [231])) 163 {*arm_movdi} (nil))

(jump_insn 169 159 196 11 init/initramfs.c:264 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 144)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 11 -> ( 12 10)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  12 [0.0%]  (fallthru)
;; Succ edge  10 [100.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [0.0%]  (fallthru)
(note 196 169 197 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(jump_insn 197 196 198 12 (set (pc)
        (label_ref 163)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 8)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%] 

(barrier 198 197 213)

(note 213 198 0 NOTE_INSN_DELETED)


;; Function flush_buffer (flush_buffer)[0:1332] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a28 (r169,l2) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r169,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r168,l2) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r168,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r167,l2) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r167,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r166,l2) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r166,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r161,l1) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r157,l2) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r154,l2) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r141,l2) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r138,l2) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r137,l2) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r136,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a11(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a13(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a15(r168,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r169,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a19(r161,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a23(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a24(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a25(r166,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a27(r168,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a28(r169,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a29(r157,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a11(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a13(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a15(r168,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r169,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a19(r161,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a23(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a24(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a25(r166,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a27(r168,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a28(r169,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a29(r157,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 95(l0): point = 0
   Insn 89(l0): point = 2
   Insn 113(l0): point = 5
   Insn 41(l0): point = 7
   Insn 49(l0): point = 9
   Insn 103(l0): point = 11
   Insn 18(l0): point = 13
   Insn 53(l0): point = 15
   Insn 110(l0): point = 18
   Insn 13(l0): point = 20
   Insn 11(l0): point = 23
   Insn 10(l0): point = 25
   Insn 9(l0): point = 27
   Insn 7(l0): point = 29
   Insn 2(l0): point = 31
   Insn 3(l0): point = 33
   Insn 8(l0): point = 35
   Insn 82(l1): point = 38
   Insn 81(l1): point = 40
   Insn 80(l1): point = 42
   Insn 76(l1): point = 45
   Insn 75(l1): point = 47
   Insn 74(l1): point = 49
   Insn 73(l1): point = 51
   Insn 56(l1): point = 54
   Insn 54(l1): point = 56
   Insn 50(l1): point = 59
   Insn 117(l1): point = 62
   Insn 43(l1): point = 64
   Insn 42(l1): point = 66
   Insn 39(l1): point = 68
   Insn 37(l1): point = 71
   Insn 36(l1): point = 73
   Insn 115(l1): point = 76
   Insn 31(l1): point = 78
   Insn 30(l1): point = 80
   Insn 27(l1): point = 82
   Insn 25(l1): point = 85
   Insn 24(l1): point = 87
   Insn 22(l1): point = 89
   Insn 23(l1): point = 91
   Insn 70(l2): point = 94
   Insn 69(l2): point = 96
   Insn 66(l2): point = 98
   Insn 63(l2): point = 100
   Insn 60(l2): point = 102
 a0(r137): [23..33] [3..20]
 a1(r169): [5..7]
 a2(r168): [5..9]
 a3(r167): [5..11]
 a4(r166): [5..15]
 a5(r138): [5..13]
 a6(r140): [23..31] [14..17]
 a7(r142): [23..35] [16..17]
 a8(r141): [23..29] [5..17]
 a9(r143): [26..27]
 a10(r137): [38..93]
 a11(r138): [85..93] [71..78] [38..64]
 a12(r141): [38..93]
 a13(r166): [38..93]
 a14(r167): [38..93]
 a15(r168): [38..93]
 a16(r169): [38..93]
 a17(r163): [81..93] [38..42]
 a18(r135): [83..93] [69..75] [38..49]
 a19(r161): [50..51]
 a20(r133): [79..89] [65..75]
 a21(r136): [85..91] [74..75]
 a22(r137): [94..104]
 a23(r138): [94..104]
 a24(r141): [94..104]
 a25(r166): [94..104]
 a26(r167): [94..104]
 a27(r168): [94..104]
 a28(r169): [94..104]
 a29(r157): [99..100]
 a30(r154): [101..102]
 Rebuilding regno allocno list for 163
 Rebuilding regno allocno list for 161
 Rebuilding regno allocno list for 157
 Rebuilding regno allocno list for 154
 Rebuilding regno allocno list for 136
 Rebuilding regno allocno list for 135
 Rebuilding regno allocno list for 133
Compressing live ranges: from 105 to 42 - 40%
Ranges after the compression:
 a0(r137): [18..41] [11..16] [0..10]
 a1(r169): [18..41] [1..2]
 a2(r168): [18..41] [1..3]
 a3(r167): [18..41] [1..4]
 a4(r166): [18..41] [1..7]
 a5(r138): [33..41] [26..29] [18..23] [1..5]
 a6(r140): [11..15] [6..9]
 a7(r142): [11..17] [8..9]
 a8(r141): [18..41] [11..14] [1..9]
 a9(r143): [12..13]
 a17(r163): [31..36] [18..19]
 a18(r135): [32..36] [25..28] [18..20]
 a19(r161): [21..22]
 a20(r133): [30..34] [24..28]
 a21(r136): [33..35] [27..28]
 a29(r157): [37..38]
 a30(r154): [39..40]
+++Allocating 136 bytes for conflict table (uncompressed size 248)
;; a0(r137,l0) conflicts: a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0) a6(r140,l0) a7(r142,l0) a9(r143,l0) a17(r163,l0) a18(r135,l0) a19(r161,l0) a20(r133,l0) a21(r136,l0) a29(r157,l0) a30(r154,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r169,l0) conflicts: a0(r137,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0) a17(r163,l0) a18(r135,l0) a19(r161,l0) a20(r133,l0) a21(r136,l0) a29(r157,l0) a30(r154,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a2(r168,l0) conflicts: a0(r137,l0) a1(r169,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0) a17(r163,l0) a18(r135,l0) a19(r161,l0) a20(r133,l0) a21(r136,l0) a29(r157,l0) a30(r154,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a3(r167,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0) a17(r163,l0) a18(r135,l0) a19(r161,l0) a20(r133,l0) a21(r136,l0) a29(r157,l0) a30(r154,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a4(r166,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a5(r138,l0) a8(r141,l0) a6(r140,l0) a17(r163,l0) a18(r135,l0) a19(r161,l0) a20(r133,l0) a21(r136,l0) a29(r157,l0) a30(r154,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a5(r138,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a8(r141,l0) a17(r163,l0) a18(r135,l0) a19(r161,l0) a20(r133,l0) a21(r136,l0) a29(r157,l0) a30(r154,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a6(r140,l0) conflicts: a0(r137,l0) a4(r166,l0) a8(r141,l0) a7(r142,l0) a9(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r142,l0) conflicts: a0(r137,l0) a8(r141,l0) a6(r140,l0) a9(r143,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r141,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a6(r140,l0) a7(r142,l0) a9(r143,l0) a17(r163,l0) a18(r135,l0) a19(r161,l0) a20(r133,l0) a21(r136,l0) a29(r157,l0) a30(r154,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a9(r143,l0) conflicts: a0(r137,l0) a8(r141,l0) a6(r140,l0) a7(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r163,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0) a18(r135,l0) a20(r133,l0) a21(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r135,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0) a17(r163,l0) a20(r133,l0) a21(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r161,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r133,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0) a17(r163,l0) a18(r135,l0) a21(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r136,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0) a17(r163,l0) a18(r135,l0) a20(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r157,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r154,l0) conflicts: a0(r137,l0) a1(r169,l0) a2(r168,l0) a3(r167,l0) a4(r166,l0) a5(r138,l0) a8(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a18(r135)<->a19(r161)@125:shuffle
  cp1:a29(r157)<->a30(r154)@125:shuffle
  cp2:a4(r166)<->a7(r142)@1000:move
  cp3:a5(r138)<->a6(r140)@1000:move
  regions=3, blocks=15, points=42
    allocnos=31, copies=4, conflicts=0, ranges=35

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r137 1r169 2r168 3r167 4r166 5r138 6r140 7r142 8r141 9r143 17r163 18r135 19r161 20r133 21r136 29r157 30r154
    modified regnos: 133 135 136 137 138 140 141 142 143 154 157 161 163 166 167 168 169
    border:
    Pressure: GENERAL_REGS=11
    Reg 137 of GENERAL_REGS has 2 regs less
    Reg 169 of GENERAL_REGS has 2 regs less
    Reg 168 of GENERAL_REGS has 2 regs less
    Reg 167 of GENERAL_REGS has 2 regs less
    Reg 166 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
      Pushing a30(r154,l0)
      Pushing a21(r136,l0)
      Pushing a20(r133,l0)
      Pushing a29(r157,l0)
      Pushing a19(r161,l0)
      Pushing a9(r143,l0)
      Pushing a6(r140,l0)
      Pushing a17(r163,l0)
      Pushing a18(r135,l0)
      Pushing a2(r168,l0)
      Pushing a1(r169,l0)
      Pushing a0(r137,l0)
      Pushing a5(r138,l0)
      Pushing a4(r166,l0)
      Pushing a3(r167,l0)
      Pushing a8(r141,l0)
      Pushing a7(r142,l0)
      Popping a7(r142,l0)  -- assign reg 3
      Popping a8(r141,l0)  -- assign reg 4
      Popping a3(r167,l0)  -- assign reg 5
      Popping a4(r166,l0)  -- assign reg 6
      Popping a5(r138,l0)  -- assign reg 7
      Popping a0(r137,l0)  -- assign reg 8
      Popping a1(r169,l0)  -- assign reg 10
      Popping a2(r168,l0)  -- assign reg 9
      Popping a18(r135,l0)  -- assign reg 3
      Popping a17(r163,l0)  -- assign reg 2
      Popping a6(r140,l0)  -- assign reg 0
      Popping a9(r143,l0)  -- assign reg 2
      Popping a19(r161,l0)  -- assign reg 3
      Popping a29(r157,l0)  -- assign reg 3
      Popping a20(r133,l0)  -- assign reg 1
      Popping a21(r136,l0)  -- assign reg 0
      Popping a30(r154,l0)  -- assign reg 3
Disposition:
   20:r133 l0     1   18:r135 l0     3   21:r136 l0     0    0:r137 l0     8
    5:r138 l0     7    6:r140 l0     0    8:r141 l0     4    7:r142 l0     3
    9:r143 l0     2   30:r154 l0     3   29:r157 l0     3   19:r161 l0     3
   17:r163 l0     2    4:r166 l0     6    3:r167 l0     5    2:r168 l0     9
    1:r169 l0    10
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=8, live_throughout: 0, 1, 13, 14, dead_or_set: 142
insn=3, live_throughout: 0, 13, 14, 142, dead_or_set: 1, 137
insn=2, live_throughout: 13, 14, 137, 142, dead_or_set: 0, 140
insn=7, live_throughout: 13, 14, 137, 140, 142, dead_or_set: 141
insn=9, live_throughout: 13, 14, 137, 140, 141, 142, dead_or_set: 143
insn=10, live_throughout: 13, 14, 137, 140, 141, 142, dead_or_set: 143
insn=11, live_throughout: 13, 14, 137, 140, 141, 142, dead_or_set: 
insn=13, live_throughout: 13, 14, dead_or_set: 137
insn=110, live_throughout: 13, 14, 137, dead_or_set: 
insn=16, live_throughout: 13, 137, 140, 141, 142, dead_or_set: 
insn=53, live_throughout: 13, 137, 140, 141, dead_or_set: 142, 166
insn=18, live_throughout: 13, 137, 141, 166, dead_or_set: 138, 140
insn=103, live_throughout: 13, 137, 138, 141, 166, dead_or_set: 167
insn=49, live_throughout: 13, 137, 138, 141, 166, 167, dead_or_set: 168
insn=41, live_throughout: 13, 137, 138, 141, 166, 167, 168, dead_or_set: 169
insn=113, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=78, live_throughout: 13, 135, 137, 138, 141, 163, 166, 167, 168, 169, dead_or_set: 
insn=23, live_throughout: 13, 135, 137, 138, 141, 163, 166, 167, 168, 169, dead_or_set: 136
insn=22, live_throughout: 13, 135, 136, 137, 138, 141, 163, 166, 167, 168, 169, dead_or_set: 133
insn=24, live_throughout: 13, 133, 135, 136, 137, 138, 141, 163, 166, 167, 168, 169, dead_or_set: 
insn=25, live_throughout: 13, 133, 135, 136, 137, 138, 141, 163, 166, 167, 168, 169, dead_or_set: 
insn=27, live_throughout: 13, 133, 137, 163, 166, 167, 168, 169, dead_or_set: 135, 141
insn=30, live_throughout: 13, 133, 137, 141, 166, 167, 168, 169, dead_or_set: 163
insn=31, live_throughout: 13, 137, 141, 166, 167, 168, 169, dead_or_set: 133, 138
insn=115, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=34, live_throughout: 13, 133, 135, 136, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=36, live_throughout: 13, 133, 135, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 136
insn=37, live_throughout: 13, 133, 135, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=39, live_throughout: 13, 133, 137, 166, 167, 168, 169, dead_or_set: 135, 141
insn=42, live_throughout: 13, 133, 137, 141, 166, 167, 168, 169, dead_or_set: 
insn=43, live_throughout: 13, 137, 141, 166, 167, 168, 169, dead_or_set: 133, 138
insn=117, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=46, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=50, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=112, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=54, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=56, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=68, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=60, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 154
insn=63, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 154, 157
insn=66, live_throughout: 13, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 0, 14, 157
insn=69, live_throughout: 13, 14, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 0
insn=70, live_throughout: 13, 14, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=73, live_throughout: 13, 14, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 161
insn=74, live_throughout: 13, 14, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 135, 161
insn=75, live_throughout: 13, 14, 135, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=76, live_throughout: 13, 14, 135, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 
insn=80, live_throughout: 13, 14, 135, 137, 138, 141, 166, 167, 168, 169, dead_or_set: 163
insn=81, live_throughout: 13, 14, 135, 137, 138, 141, 163, 166, 167, 168, 169, dead_or_set: 
insn=82, live_throughout: 13, 14, 135, 137, 138, 141, 163, 166, 167, 168, 169, dead_or_set: 
insn=83, live_throughout: 13, 14, 137, dead_or_set: 
insn=89, live_throughout: 13, 14, dead_or_set: 0, 137
insn=95, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 142: (insn_list:REG_DEP_TRUE 8 (nil))
init_insns for 143: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 60 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 73 (nil))
init_insns for 166: (insn_list:REG_DEP_TRUE 53 (nil))
init_insns for 167: (insn_list:REG_DEP_TRUE 103 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 49 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 41 (nil))
changing reg in insn 22
changing reg in insn 43
changing reg in insn 31
changing reg in insn 74
changing reg in insn 23
changing reg in insn 75
changing reg in insn 39
changing reg in insn 27
changing reg in insn 22
changing reg in insn 23
changing reg in insn 36
changing reg in insn 24
changing reg in insn 3
changing reg in insn 13
changing reg in insn 89
changing reg in insn 7
changing reg in insn 43
changing reg in insn 31
changing reg in insn 18
changing reg in insn 23
changing reg in insn 56
changing reg in insn 22
changing reg in insn 2
changing reg in insn 18
changing reg in insn 7
changing reg in insn 39
changing reg in insn 27
changing reg in insn 54
changing reg in insn 75
changing reg in insn 74
changing reg in insn 39
changing reg in insn 27
changing reg in insn 8
changing reg in insn 53
changing reg in insn 9
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 60
changing reg in insn 63
changing reg in insn 63
changing reg in insn 66
changing reg in insn 73
changing reg in insn 74
changing reg in insn 80
changing reg in insn 30
changing reg in insn 81
changing reg in insn 53
changing reg in insn 63
changing reg in insn 103
changing reg in insn 60
changing reg in insn 56
changing reg in insn 54
changing reg in insn 60
changing reg in insn 103
changing reg in insn 80
changing reg in insn 73
changing reg in insn 50
changing reg in insn 42
changing reg in insn 30
changing reg in insn 73
changing reg in insn 49
changing reg in insn 50
changing reg in insn 41
changing reg in insn 42
Spilling for insn 30.
Spilling for insn 42.
Spilling for insn 50.
Spilling for insn 54.
Spilling for insn 56.

Reloads for insn # 30
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 42
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 50
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 5 r5 [167]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 5 r5 [167]) [0 message+0 S4 A32])

Reloads for insn # 54
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 56
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 66.
deleting insn with uid = 66.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 31 (  2.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 35 (  2.3)


flush_buffer

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,6u} r1={3d,3u} r2={4d,3u} r3={7d,10u,1d} r4={3d,5u} r5={1d,5u,1d} r6={1d,5u,1d} r7={3d,3u} r8={2d,2u} r9={1d,1u} r10={1d,1u} r12={2d} r13={1d,15u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={7d,6u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 221{152d,66u,3e} in 45{44 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(insn 8 4 3 2 init/initramfs.c:392 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 3 8 7 2 init/initramfs.c:388 (set (reg/v:SI 8 r8 [orig:137 origLen ] [137])
        (reg:SI 1 r1 [ len ])) 167 {*arm_movsi_insn} (nil))

(insn 7 3 9 2 init/initramfs.c:391 (set (reg/v:SI 4 r4 [orig:141 len ] [141])
        (reg/v:SI 8 r8 [orig:137 origLen ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 9 7 10 2 init/initramfs.c:392 (set (reg/f:SI 2 r2 [orig:143 message ] [143])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [142]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [142]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 10 9 11 2 init/initramfs.c:392 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:143 message ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 11 10 12 2 init/initramfs.c:392 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 16)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%]  (fallthru)
;; Succ edge  4 [0.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 8 [r8]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 110 3 init/initramfs.c:393 (set (reg/v:SI 8 r8 [orig:137 origLen ] [137])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(jump_insn 110 13 111 3 (set (pc)
        (label_ref 83)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 14)
;; lr  out 	 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  14 [100.0%] 

(barrier 111 110 16)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl]
;; live  kill	

;; Pred edge  2 [0.0%] 
(code_label 16 111 17 4 36 "" [1 uses])

(note 17 16 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 53 17 18 4 init/initramfs.c:379 (set (reg/f:SI 6 r6 [166])
        (reg/f:SI 3 r3 [142])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 18 53 103 4 init/initramfs.c:389 (set (reg/v/f:SI 7 r7 [orig:138 buf ] [138])
        (reg/v/f:SI 0 r0 [orig:140 bufv ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 103 18 49 4 init/initramfs.c:382 discrim 1 (set (reg/f:SI 5 r5 [167])
        (reg/f:SI 6 r6 [166])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 49 103 41 4 init/initramfs.c:16 (set (reg/f:SI 9 r9 [168])
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)
        (nil)))

(insn 41 49 113 4 init/initramfs.c:403 (set (reg:SI 10 sl [169])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(jump_insn 113 41 114 4 (set (pc)
        (label_ref 112)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 114 113 78)

;; Start of basic block ( 13) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  13 [0.0%] 
(code_label 78 114 21 5 42 "" [1 uses])

(note 21 78 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 23 21 22 5 init/initramfs.c:395 (set (reg/v:SI 0 r0 [orig:136 c ] [136])
        (zero_extend:SI (mem:QI (plus:SI (reg/v/f:SI 7 r7 [orig:138 buf ] [138])
                    (reg:SI 3 r3 [orig:135 D.26319 ] [135])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 22 23 24 5 init/initramfs.c:395 (set (reg/v/f:SI 1 r1 [orig:133 buf.581 ] [133])
        (plus:SI (reg/v/f:SI 7 r7 [orig:138 buf ] [138])
            (reg:SI 3 r3 [orig:135 D.26319 ] [135]))) 4 {*arm_addsi3} (nil))

(insn 24 22 25 5 init/initramfs.c:396 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:136 c ] [136])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 25 24 26 5 init/initramfs.c:396 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [28.0%]  (fallthru)
;; Succ edge  7 [72.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 4 [r4] 7 [r7]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4] 7 [r7]
;; live  kill	

;; Pred edge  5 [28.0%]  (fallthru)
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 30 6 init/initramfs.c:398 (set (reg/v:SI 4 r4 [orig:141 len ] [141])
        (minus:SI (reg/v:SI 4 r4 [orig:141 len ] [141])
            (reg:SI 3 r3 [orig:135 D.26319 ] [135]))) 28 {*arm_subsi3_insn} (nil))

(insn 30 27 31 6 init/initramfs.c:399 (set (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg/f:SI 2 r2 [orig:163 message ] [163])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 31 30 115 6 init/initramfs.c:397 (set (reg/v/f:SI 7 r7 [orig:138 buf ] [138])
        (reg/v/f:SI 1 r1 [orig:133 buf.581 ] [133])) 167 {*arm_movsi_insn} (nil))

(jump_insn 115 31 116 6 (set (pc)
        (label_ref 112)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%]  (dfs_back)

(barrier 116 115 34)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [72.0%] 
(code_label 34 116 35 7 39 "" [1 uses])

(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 36 35 37 7 init/initramfs.c:400 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:136 c ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 37 36 38 7 init/initramfs.c:400 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)
;; Succ edge  9 [0.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  def 	 4 [r4] 7 [r7]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4] 7 [r7]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 42 8 init/initramfs.c:402 (set (reg/v:SI 4 r4 [orig:141 len ] [141])
        (minus:SI (reg/v:SI 4 r4 [orig:141 len ] [141])
            (reg:SI 3 r3 [orig:135 D.26319 ] [135]))) 28 {*arm_subsi3_insn} (nil))

(insn 42 39 43 8 init/initramfs.c:403 (set (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 10 sl [169])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 7 [0x7])
        (nil)))

(insn 43 42 117 8 init/initramfs.c:401 (set (reg/v/f:SI 7 r7 [orig:138 buf ] [138])
        (reg/v/f:SI 1 r1 [orig:133 buf.581 ] [133])) 167 {*arm_movsi_insn} (nil))

(jump_insn 117 43 118 8 (set (pc)
        (label_ref 112)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%]  (dfs_back)

(barrier 118 117 46)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [0.0%] 
(code_label 46 118 47 9 40 "" [1 uses])

(note 47 46 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 50 47 112 9 init/initramfs.c:16 (set (mem/f/c/i:SI (reg/f:SI 5 r5 [167]) [0 message+0 S4 A32])
        (reg/f:SI 9 r9 [168])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 6 4 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%]  (dfs_back)
;; Pred edge  4 [100.0%] 
;; Pred edge  8 [100.0%]  (dfs_back)
(code_label 112 50 109 10 45 "" [3 uses])

(note 109 112 54 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 54 109 56 10 init/initramfs.c:379 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg/v:SI 4 r4 [orig:141 len ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 56 54 68 10 init/initramfs.c:380 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg/v/f:SI 7 r7 [orig:138 buf ] [138])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 11) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  11 [86.0%]  (dfs_back)
(code_label 68 56 57 11 41 "" [1 uses])

(note 57 68 62 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 62 57 65 11 NOTE_INSN_DELETED)

(note 65 62 67 11 NOTE_INSN_DELETED)

(note 67 65 60 11 NOTE_INSN_DELETED)

(insn 60 67 63 11 init/initramfs.c:382 discrim 1 (set (reg:SI 3 r3 [orig:154 state ] [154])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                (const_int 32 [0x20])) [0 state+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 32 [0x20]))) [0 state+0 S4 A32])
            (nil))))

(insn 63 60 66 11 init/initramfs.c:382 discrim 1 (set (reg:SI 3 r3 [157])
        (plus:SI (mult:SI (reg:SI 3 r3 [orig:154 state ] [154])
                (const_int 4 [0x4]))
            (reg/f:SI 6 r6 [166]))) 270 {*arith_shiftsi} (nil))

(call_insn 66 63 69 11 init/initramfs.c:382 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [157])
                                (const_int 56 [0x38])) [0 actions S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (nil)
    (nil))

(insn 69 66 70 11 init/initramfs.c:382 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 70 69 71 11 init/initramfs.c:382 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 11 -> ( 11 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [86.0%]  (dfs_back)
;; Succ edge  12 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  11 [14.0%]  (fallthru,loop_exit)
(note 71 70 73 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 73 71 74 12 init/initramfs.c:384 (set (reg:SI 3 r3 [orig:161 count ] [161])
        (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn 74 73 75 12 init/initramfs.c:384 (set (reg:SI 3 r3 [orig:135 D.26319 ] [135])
        (minus:SI (reg/v:SI 4 r4 [orig:141 len ] [141])
            (reg:SI 3 r3 [orig:161 count ] [161]))) 28 {*arm_subsi3_insn} (nil))

(insn 75 74 76 12 init/initramfs.c:394 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:135 D.26319 ] [135])
            (reg/v:SI 4 r4 [orig:141 len ] [141]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 76 75 77 12 init/initramfs.c:394 discrim 1 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 83)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  13 [95.5%]  (fallthru)
;; Succ edge  14 [4.5%]  (loop_exit)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  12 [95.5%]  (fallthru)
(note 77 76 80 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 80 77 81 13 init/initramfs.c:394 discrim 2 (set (reg/f:SI 2 r2 [orig:163 message ] [163])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [167]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
        (nil)))

(insn 81 80 82 13 init/initramfs.c:394 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:163 message ] [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 82 81 83 13 init/initramfs.c:394 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 13 -> ( 5 14)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [0.0%] 
;; Succ edge  14 [100.0%]  (fallthru,loop_exit)

;; Start of basic block ( 12 13 3) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  12 [4.5%]  (loop_exit)
;; Pred edge  13 [100.0%]  (fallthru,loop_exit)
;; Pred edge  3 [100.0%] 
(code_label 83 82 84 14 37 "" [2 uses])

(note 84 83 89 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 89 84 95 14 init/initramfs.c:408 (set (reg/i:SI 0 r0)
        (reg/v:SI 8 r8 [orig:137 origLen ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 95 89 119 14 init/initramfs.c:408 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 14 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 119 95 120 NOTE_INSN_DELETED)

(note 120 119 0 NOTE_INSN_DELETED)


;; Function retain_initrd_param (retain_initrd_param)[0:1334] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 38.
verify found no changes in insn with uid = 38.
deleting insn with uid = 15.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)

Pass 0 for finding allocno costs

    a2 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 31(l0): point = 0
   Insn 25(l0): point = 2
   Insn 17(l0): point = 5
   Insn 38(l0): point = 7
   Insn 18(l0): point = 9
   Insn 16(l0): point = 11
   Insn 35(l0): point = 14
   Insn 10(l0): point = 16
   Insn 8(l0): point = 19
   Insn 7(l0): point = 21
   Insn 6(l0): point = 23
 a0(r133): [14..16] [3..9]
 a1(r137): [6..7]
 a2(r138): [6..11]
 a3(r136): [22..23]
Compressing live ranges: from 26 to 9 - 34%
Ranges after the compression:
 a0(r133): [5..6] [0..3]
 a1(r137): [1..2]
 a2(r138): [1..4]
 a3(r136): [7..8]
+++Allocating 24 bytes for conflict table (uncompressed size 32)
;; a0(r133,l0) conflicts: a1(r137,l0) a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r137,l0) conflicts: a0(r133,l0) a2(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r138,l0) conflicts: a0(r133,l0) a1(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r136,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=6, points=9
    allocnos=4, copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r133 1r137 2r138 3r136
    modified regnos: 133 136 137 138
    border:
    Pressure: GENERAL_REGS=4
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
      Pushing a3(r136,l0)
      Pushing a1(r137,l0)
      Pushing a2(r138,l0)
      Pushing a0(r133,l0)
      Popping a0(r133,l0)  -- assign reg 0
      Popping a2(r138,l0)  -- assign reg 3
      Popping a1(r137,l0)  -- assign reg 2
      Popping a3(r136,l0)  -- assign reg 3
Disposition:
    0:r133 l0     0    3:r136 l0     3    1:r137 l0     2    2:r138 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 13, 14, dead_or_set: 0, 136
insn=7, live_throughout: 13, 14, dead_or_set: 136
insn=8, live_throughout: 13, 14, dead_or_set: 
insn=10, live_throughout: 13, 14, dead_or_set: 133
insn=35, live_throughout: 13, 14, 133, dead_or_set: 
insn=13, live_throughout: 13, 14, dead_or_set: 
insn=16, live_throughout: 13, 14, dead_or_set: 138
insn=18, live_throughout: 13, 14, 138, dead_or_set: 133
insn=38, live_throughout: 13, 14, 133, 138, dead_or_set: 137
insn=17, live_throughout: 13, 14, 133, dead_or_set: 137, 138
insn=19, live_throughout: 13, 14, 133, dead_or_set: 
insn=25, live_throughout: 13, 14, dead_or_set: 0, 133
insn=31, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 38 (nil))
init_insns for 138: (insn_list:REG_DEP_TRUE 16 (nil))
changing reg in insn 18
changing reg in insn 10
changing reg in insn 25
changing reg in insn 6
changing reg in insn 7
changing reg in insn 38
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
Spilling for insn 17.

Reloads for insn # 17
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [137])
                                                        (const_int 88 [0x58])) [0 do_retain_initrd+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [137])
                                                        (const_int 88 [0x58])) [0 do_retain_initrd+0 S4 A32])
deleting insn with uid = 25.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


retain_initrd_param

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,3u} r1={1d} r2={2d,1u} r3={3d,3u} r12={1d} r13={1d,5u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 27{13d,14u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 4 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 init/initramfs.c:479 (set (reg:SI 3 r3 [136])
        (zero_extend:SI (mem:QI (reg:SI 0 r0 [ str ]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 7 6 8 2 init/initramfs.c:479 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 init/initramfs.c:479 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 35 3 init/initramfs.c:480 (set (reg:SI 0 r0 [orig:133 D.26190 ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 35 10 36 3 (set (pc)
        (label_ref 19)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 36 35 13)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 13 36 14 4 50 "" [1 uses])

(note 14 13 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 16 14 18 4 init/initramfs.c:481 (set (reg:SI 3 r3 [138])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 18 16 38 4 init/initramfs.c:482 (set (reg:SI 0 r0 [orig:133 D.26190 ] [133])
        (reg:SI 3 r3 [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 38 18 17 4 init/initramfs.c:481 (set (reg/f:SI 2 r2 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 17 38 19 4 init/initramfs.c:481 (set (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [137])
                (const_int 88 [0x58])) [0 do_retain_initrd+0 S4 A32])
        (reg:SI 3 r3 [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 19 17 20 5 51 "" [1 uses])

(note 20 19 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 31 20 37 5 init/initramfs.c:483 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 37 31 39 NOTE_INSN_DELETED)

(note 39 37 0 NOTE_INSN_DELETED)


;; Function clean_path (clean_path)[0:1327] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 33(l0): point = 1
   Insn 32(l0): point = 3
   Insn 43(l0): point = 6
   Insn 27(l0): point = 8
   Insn 26(l0): point = 10
   Insn 24(l0): point = 13
   Insn 23(l0): point = 15
   Insn 22(l0): point = 17
   Insn 20(l0): point = 20
   Insn 19(l0): point = 22
   Insn 17(l0): point = 24
   Insn 15(l0): point = 26
   Insn 13(l0): point = 29
   Insn 12(l0): point = 31
   Insn 10(l0): point = 33
   Insn 2(l0): point = 35
   Insn 9(l0): point = 37
   Insn 3(l0): point = 39
 a0(r135): [11..35] [4..5]
 a1(r141): [16..17]
 a2(r133): [18..26]
 a3(r139): [23..24]
 a4(r136): [25..39]
Compressing live ranges: from 42 to 12 - 28%
Ranges after the compression:
 a0(r135): [2..10] [0..1]
 a1(r141): [3..4]
 a2(r133): [5..9]
 a3(r139): [6..7]
 a4(r136): [8..11]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r135,l0) conflicts: a1(r141,l0) a2(r133,l0) a3(r139,l0) a4(r136,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r141,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a2(r133,l0) conflicts: a0(r135,l0) a3(r139,l0) a4(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r139,l0) conflicts: a0(r135,l0) a2(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r136,l0) conflicts: a0(r135,l0) a2(r133,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  cp0:a1(r141)<->a2(r133)@125:shuffle
  cp1:a3(r139)<->a4(r136)@125:shuffle
  regions=1, blocks=8, points=12
    allocnos=5, copies=2, conflicts=1, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r135 1r141 2r133 3r139 4r136
    modified regnos: 133 135 136 139 141
    border:
    Pressure: GENERAL_REGS=5
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
      Pushing a1(r141,l0)
      Pushing a3(r139,l0)
      Pushing a2(r133,l0)
      Pushing a4(r136,l0)
      Pushing a0(r135,l0)
      Popping a0(r135,l0)  -- assign reg 4
      Popping a4(r136,l0)  -- assign reg 5
      Popping a2(r133,l0)  -- assign reg 3
      Popping a3(r139,l0)  -- assign reg 5
      Popping a1(r141,l0)  -- assign reg 3
Disposition:
    2:r133 l0     3    0:r135 l0     4    4:r136 l0     5    3:r139 l0     5
    1:r141 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 13, dead_or_set: 1, 136
insn=9, live_throughout: 0, 13, 136, dead_or_set: 1
insn=2, live_throughout: 0, 1, 13, 136, dead_or_set: 135
insn=10, live_throughout: 13, 135, 136, dead_or_set: 0, 1, 14
insn=12, live_throughout: 13, 14, 135, 136, dead_or_set: 0
insn=13, live_throughout: 13, 14, 135, 136, dead_or_set: 
insn=15, live_throughout: 13, 14, 135, 136, dead_or_set: 133
insn=17, live_throughout: 13, 14, 133, 135, dead_or_set: 136, 139
insn=19, live_throughout: 13, 14, 133, 135, dead_or_set: 139
insn=20, live_throughout: 13, 14, 133, 135, dead_or_set: 
insn=22, live_throughout: 13, 135, dead_or_set: 133, 141
insn=23, live_throughout: 13, 135, dead_or_set: 141
insn=24, live_throughout: 13, 135, dead_or_set: 
insn=26, live_throughout: 13, dead_or_set: 0, 135
insn=27, live_throughout: 13, dead_or_set: 0, 14
insn=43, live_throughout: 13, 14, dead_or_set: 
insn=30, live_throughout: 13, 135, dead_or_set: 
insn=32, live_throughout: 13, dead_or_set: 0, 135
insn=33, live_throughout: 13, dead_or_set: 0, 14
insn=39, live_throughout: 13, 14, dead_or_set: 
changing reg in insn 15
changing reg in insn 17
changing reg in insn 22
changing reg in insn 2
changing reg in insn 32
changing reg in insn 26
changing reg in insn 3
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 12 (  1.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)


clean_path

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,5u} r1={5d,2u} r2={4d} r3={6d,3u} r4={1d,2u} r5={2d,2u} r12={4d} r13={1d,12u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 399{369d,30u,0e} in 18{15 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 4 11 2 NOTE_INSN_DELETED)

(note 11 7 3 2 NOTE_INSN_DELETED)

(insn 3 11 9 2 init/initramfs.c:280 (set (reg/v:SI 5 r5 [orig:136 mode ] [136])
        (reg:SI 1 r1 [ mode ])) 167 {*arm_movsi_insn} (nil))

(insn 9 3 2 2 init/initramfs.c:283 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 2 9 10 2 init/initramfs.c:280 (set (reg/v/f:SI 4 r4 [orig:135 path ] [135])
        (reg:SI 0 r0 [ path ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 2 12 2 init/initramfs.c:283 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_newlstat") [flags 0x41] <function_decl 0x11452980 sys_newlstat>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 12 10 13 2 init/initramfs.c:283 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 13 12 14 2 init/initramfs.c:283 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 3 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 13 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 16 14 18 3 NOTE_INSN_DELETED)

(note 18 16 15 3 NOTE_INSN_DELETED)

(insn 15 18 17 3 init/initramfs.c:283 discrim 1 (set (reg:SI 3 r3 [orig:133 D.25967 ] [133])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 8 [0x8])) [0 st.st_mode+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 17 15 19 3 init/initramfs.c:283 discrim 1 (set (reg:SI 5 r5 [139])
        (xor:SI (reg/v:SI 5 r5 [orig:136 mode ] [136])
            (reg:SI 3 r3 [orig:133 D.25967 ] [133]))) 96 {*arm_xorsi3} (nil))

(insn 19 17 20 3 init/initramfs.c:283 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 5 r5 [139])
                        (const_int 61440 [0xf000]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 20 19 21 3 init/initramfs.c:283 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [61.0%]  (fallthru)
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 4 init/initramfs.c:284 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 3 r3 [orig:133 D.25967 ] [133])
            (const_int 61440 [0xf000]))) 67 {*arm_andsi3_insn} (nil))

(insn 23 22 24 4 init/initramfs.c:284 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (const_int 16384 [0x4000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 25 4 init/initramfs.c:284 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  5 [19.9%]  (fallthru)
;; Succ edge  6 [80.1%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [19.9%]  (fallthru)
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 5 init/initramfs.c:285 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 path ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn 27 26 43 5 init/initramfs.c:285 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_rmdir") [flags 0x41] <function_decl 0x11464e00 sys_rmdir>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 43 27 44 5 (set (pc)
        (label_ref 39)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 44 43 30)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [80.1%] 
(code_label 30 44 31 6 57 "" [1 uses])

(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 6 init/initramfs.c:287 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 path ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn 33 32 39 6 init/initramfs.c:287 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_unlink") [flags 0x41] <function_decl 0x11458d00 sys_unlink>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 2 3 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  5 [100.0%] 
(code_label 39 33 42 7 58 "" [3 uses])

(note 42 39 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 45 42 46 NOTE_INSN_DELETED)

(note 46 45 0 NOTE_INSN_DELETED)


;; Function do_utime (do_utime)[0:1315] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 30(l0): point = 0
   Insn 18(l0): point = 2
   Insn 9(l0): point = 4
   Insn 7(l0): point = 6
   Insn 12(l0): point = 8
   Insn 8(l0): point = 10
   Insn 10(l0): point = 12
   Insn 17(l0): point = 14
   Insn 16(l0): point = 16
   Insn 14(l0): point = 18
   Insn 15(l0): point = 20
   Insn 3(l0): point = 22
   Insn 2(l0): point = 24
 a0(r137): [5..10]
 a1(r136): [7..22]
 a2(r135): [21..24]
Compressing live ranges: from 27 to 6 - 22%
Ranges after the compression:
 a0(r137): [0..2]
 a1(r136): [1..4]
 a2(r135): [3..5]
+++Allocating 24 bytes for conflict table (uncompressed size 24)
;; a0(r137,l0) conflicts: a1(r136,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r136,l0) conflicts: a0(r137,l0) a2(r135,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a2(r135,l0) conflicts: a1(r136,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

  regions=1, blocks=3, points=6
    allocnos=3, copies=0, conflicts=2, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r137 1r136 2r135
    modified regnos: 135 136 137
    border:
    Pressure: GENERAL_REGS=6
    Reg 137 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
      Pushing a2(r135,l0)
      Pushing a1(r136,l0)
      Pushing a0(r137,l0)
      Popping a0(r137,l0)  -- assign reg 12
      Popping a1(r136,l0)  -- assign reg 14
      Popping a2(r135,l0)  -- assign reg 0
Disposition:
    2:r135 l0     0    1:r136 l0    14    0:r137 l0    12
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 13, dead_or_set: 0, 135
insn=3, live_throughout: 13, 135, dead_or_set: 1, 136
insn=15, live_throughout: 13, 136, dead_or_set: 1, 135
insn=14, live_throughout: 1, 13, 136, dead_or_set: 0
insn=16, live_throughout: 0, 1, 13, 136, dead_or_set: 2
insn=17, live_throughout: 0, 1, 2, 13, 136, dead_or_set: 3
insn=10, live_throughout: 0, 1, 2, 3, 13, 136, dead_or_set: 
insn=8, live_throughout: 0, 1, 2, 3, 13, 136, dead_or_set: 137
insn=12, live_throughout: 0, 1, 2, 3, 13, 136, 137, dead_or_set: 
insn=7, live_throughout: 0, 1, 2, 3, 13, 137, dead_or_set: 136
insn=9, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 137
insn=18, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=30, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 136: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 137: (insn_list:REG_DEP_TRUE 8 (nil))
changing reg in insn 2
changing reg in insn 15
changing reg in insn 3
changing reg in insn 10
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 9
Spilling for insn 10.
Spilling for insn 12.
Spilling for insn 7.
Spilling for insn 9.

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 <variable>.tv_sec+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 <variable>.tv_sec+0 S4 A64])

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 <variable>.tv_nsec+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 <variable>.tv_nsec+0 S4 A32])

Reloads for insn # 7
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/f:SI 13 sp) [0 <variable>.tv_sec+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/f:SI 13 sp) [0 <variable>.tv_sec+0 S4 A64])

Reloads for insn # 9
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 <variable>.tv_nsec+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 <variable>.tv_nsec+0 S4 A32])
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


do_utime

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={3d,4u} r1={3d,2u} r2={3d,1u} r3={3d,1u} r12={3d,2u} r13={1d,8u} r14={3d,3u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 152{130d,21u,1e} in 12{11 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 4 3 2 NOTE_INSN_DELETED)

(insn 3 13 15 2 init/initramfs.c:78 (set (reg/v:SI 14 lr [orig:136 mtime ] [136])
        (reg:SI 1 r1 [ mtime ])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 <variable>.tv_sec+0 S4 A64])
        (nil)))

(insn 15 3 14 2 init/initramfs.c:86 (set (reg:SI 1 r1)
        (reg/v/f:SI 0 r0 [orig:135 filename ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 14 15 16 2 init/initramfs.c:86 (set (reg:SI 0 r0)
        (const_int -100 [0xffffffffffffff9c])) 167 {*arm_movsi_insn} (nil))

(insn 16 14 17 2 init/initramfs.c:86 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 17 16 10 2 init/initramfs.c:86 (set (reg:SI 3 r3)
        (const_int 256 [0x100])) 167 {*arm_movsi_insn} (nil))

(insn 10 17 8 2 init/initramfs.c:83 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 <variable>.tv_sec+0 S4 A64])
        (reg/v:SI 14 lr [orig:136 mtime ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 8 10 12 2 init/initramfs.c:82 (set (reg:SI 12 ip [137])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 12 8 7 2 init/initramfs.c:84 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 <variable>.tv_nsec+0 S4 A32])
        (reg:SI 12 ip [137])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 7 12 9 2 init/initramfs.c:81 (set (mem/s/j:SI (reg/f:SI 13 sp) [0 <variable>.tv_sec+0 S4 A64])
        (reg/v:SI 14 lr [orig:136 mtime ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 9 7 18 2 init/initramfs.c:82 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 <variable>.tv_nsec+0 S4 A32])
        (reg:SI 12 ip [137])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 18 9 30 2 init/initramfs.c:86 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utimes") [flags 0x41] <function_decl 0x10c9bf80 do_utimes>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 30 18 34 2 init/initramfs.c:87 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 34 30 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)


;; Function do_symlink (do_symlink)[0:1330] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:180000
  a1(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:180000
  a1(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 62(l0): point = 0
   Insn 51(l0): point = 2
   Insn 50(l0): point = 4
   Insn 48(l0): point = 6
   Insn 47(l0): point = 8
   Insn 56(l0): point = 10
   Insn 45(l0): point = 12
   Insn 44(l0): point = 14
   Insn 43(l0): point = 16
   Insn 40(l0): point = 18
   Insn 37(l0): point = 20
   Insn 39(l0): point = 22
   Insn 38(l0): point = 24
   Insn 33(l0): point = 26
   Insn 31(l0): point = 28
   Insn 29(l0): point = 30
   Insn 32(l0): point = 32
   Insn 28(l0): point = 34
   Insn 27(l0): point = 36
   Insn 24(l0): point = 38
   Insn 26(l0): point = 40
   Insn 22(l0): point = 42
   Insn 19(l0): point = 44
   Insn 15(l0): point = 46
   Insn 14(l0): point = 48
   Insn 20(l0): point = 50
   Insn 11(l0): point = 52
   Insn 12(l0): point = 54
   Insn 10(l0): point = 56
   Insn 6(l0): point = 58
   Insn 9(l0): point = 60
   Insn 21(l0): point = 62
   Insn 17(l0): point = 64
   Insn 5(l0): point = 66
 a0(r136): [3..66]
 a1(r164): [3..4]
 a2(r162): [7..8]
 a3(r147): [11..64]
 a4(r154): [29..30]
 a5(r133): [29..38]
 a6(r153): [31..34]
 a7(r151): [35..36]
 a8(r152): [37..40]
 a9(r145): [45..46]
 a10(r142): [47..54]
 a11(r144): [47..48]
 a12(r141): [49..52]
 a13(r134): [49..58]
 a14(r139): [53..56]
 a15(r140): [57..60]
Compressing live ranges: from 69 to 28 - 40%
Ranges after the compression:
 a0(r136): [0..27]
 a1(r164): [0..1]
 a2(r162): [2..3]
 a3(r147): [4..26]
 a4(r154): [5..6]
 a5(r133): [5..12]
 a6(r153): [7..8]
 a7(r151): [9..10]
 a8(r152): [11..13]
 a9(r145): [14..15]
 a10(r142): [16..21]
 a11(r144): [16..17]
 a12(r141): [18..19]
 a13(r134): [18..24]
 a14(r139): [20..22]
 a15(r140): [23..25]
+++Allocating 128 bytes for conflict table (uncompressed size 128)
;; a0(r136,l0) conflicts: a1(r164,l0) a2(r162,l0) a3(r147,l0) a4(r154,l0) a5(r133,l0) a6(r153,l0) a7(r151,l0) a8(r152,l0) a9(r145,l0) a11(r144,l0) a10(r142,l0) a12(r141,l0) a13(r134,l0) a14(r139,l0) a15(r140,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r164,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a2(r162,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a3(r147,l0) conflicts: a0(r136,l0) a4(r154,l0) a5(r133,l0) a6(r153,l0) a7(r151,l0) a8(r152,l0) a9(r145,l0) a11(r144,l0) a10(r142,l0) a12(r141,l0) a13(r134,l0) a14(r139,l0) a15(r140,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r154,l0) conflicts: a0(r136,l0) a3(r147,l0) a5(r133,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a5(r133,l0) conflicts: a0(r136,l0) a3(r147,l0) a4(r154,l0) a6(r153,l0) a7(r151,l0) a8(r152,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a6(r153,l0) conflicts: a0(r136,l0) a3(r147,l0) a5(r133,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a7(r151,l0) conflicts: a0(r136,l0) a3(r147,l0) a5(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r152,l0) conflicts: a0(r136,l0) a3(r147,l0) a5(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r145,l0) conflicts: a0(r136,l0) a3(r147,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a10(r142,l0) conflicts: a0(r136,l0) a3(r147,l0) a11(r144,l0) a12(r141,l0) a13(r134,l0) a14(r139,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a11(r144,l0) conflicts: a0(r136,l0) a3(r147,l0) a10(r142,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a12(r141,l0) conflicts: a0(r136,l0) a3(r147,l0) a10(r142,l0) a13(r134,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a13(r134,l0) conflicts: a0(r136,l0) a3(r147,l0) a10(r142,l0) a12(r141,l0) a14(r139,l0) a15(r140,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a14(r139,l0) conflicts: a0(r136,l0) a3(r147,l0) a10(r142,l0) a13(r134,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a15(r140,l0) conflicts: a0(r136,l0) a3(r147,l0) a13(r134,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

  cp0:a14(r139)<->a15(r140)@125:shuffle
  cp1:a12(r141)<->a14(r139)@125:shuffle
  cp2:a11(r144)<->a13(r134)@125:shuffle
  cp3:a11(r144)<->a12(r141)@125:shuffle
  cp4:a9(r145)<->a11(r144)@125:shuffle
  cp5:a9(r145)<->a10(r142)@125:shuffle
  cp6:a7(r151)<->a8(r152)@125:shuffle
  cp7:a6(r153)<->a7(r151)@125:shuffle
  cp8:a4(r154)<->a6(r153)@125:shuffle
  regions=1, blocks=3, points=28
    allocnos=16, copies=9, conflicts=2, ranges=16

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r136 1r164 2r162 3r147 4r154 5r133 6r153 7r151 8r152 9r145 10r142 11r144 12r141 13r134 14r139 15r140
    modified regnos: 133 134 136 139 140 141 142 144 145 147 151 152 153 154 162 164
    border:
    Pressure: GENERAL_REGS=7
    Reg 136 of GENERAL_REGS has 4 regs less
    Reg 164 of GENERAL_REGS has 2 regs less
    Reg 162 of GENERAL_REGS has 2 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 2 regs less
    Reg 142 of GENERAL_REGS has 2 regs less
    Reg 144 of GENERAL_REGS has 2 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
      Pushing a8(r152,l0)
      Pushing a7(r151,l0)
      Pushing a15(r140,l0)
      Pushing a14(r139,l0)
      Pushing a6(r153,l0)
      Pushing a4(r154,l0)
      Pushing a5(r133,l0)
      Pushing a12(r141,l0)
      Pushing a11(r144,l0)
      Pushing a10(r142,l0)
      Pushing a9(r145,l0)
      Pushing a2(r162,l0)
      Pushing a1(r164,l0)
      Pushing a13(r134,l0)
      Pushing a3(r147,l0)
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 4
      Popping a3(r147,l0)  -- assign reg 5
      Popping a13(r134,l0)  -- assign reg 3
      Popping a1(r164,l0)  -- assign reg 3
      Popping a2(r162,l0)  -- assign reg 3
      Popping a9(r145,l0)  -- assign reg 3
      Popping a10(r142,l0)  -- assign reg 2
      Popping a11(r144,l0)  -- assign reg 3
      Popping a12(r141,l0)  -- assign reg 12
      Popping a5(r133,l0)  -- assign reg 3
      Popping a4(r154,l0)  -- assign reg 0
      Popping a6(r153,l0)  -- assign reg 0
      Popping a14(r139,l0)  -- assign reg 12
      Popping a15(r140,l0)  -- assign reg 12
      Popping a7(r151,l0)  -- assign reg 0
      Popping a8(r152,l0)  -- assign reg 0
Disposition:
    5:r133 l0     3   13:r134 l0     3    0:r136 l0     4   14:r139 l0    12
   15:r140 l0    12   12:r141 l0    12   10:r142 l0     2   11:r144 l0     3
    9:r145 l0     3    3:r147 l0     5    7:r151 l0     0    8:r152 l0     0
    6:r153 l0     0    4:r154 l0     0    2:r162 l0     3    1:r164 l0     3
New iteration of spill/restore move
+++Costs: overall -250, reg -250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 136
insn=17, live_throughout: 13, 136, dead_or_set: 147
insn=21, live_throughout: 13, 136, 147, dead_or_set: 1
insn=9, live_throughout: 1, 13, 136, 147, dead_or_set: 140
insn=6, live_throughout: 1, 13, 136, 140, 147, dead_or_set: 134
insn=10, live_throughout: 1, 13, 134, 136, 147, dead_or_set: 139, 140
insn=12, live_throughout: 1, 13, 134, 136, 139, 147, dead_or_set: 142
insn=11, live_throughout: 1, 13, 134, 136, 142, 147, dead_or_set: 139, 141
insn=20, live_throughout: 1, 13, 134, 136, 141, 142, 147, dead_or_set: 0
insn=14, live_throughout: 0, 1, 13, 136, 142, 147, dead_or_set: 134, 141, 144
insn=15, live_throughout: 0, 1, 13, 136, 147, dead_or_set: 142, 144, 145
insn=19, live_throughout: 0, 1, 13, 136, 147, dead_or_set: 145
insn=22, live_throughout: 13, 136, 147, dead_or_set: 0, 1, 14
insn=26, live_throughout: 13, 136, 147, dead_or_set: 152
insn=24, live_throughout: 13, 136, 147, 152, dead_or_set: 133
insn=27, live_throughout: 13, 133, 136, 147, dead_or_set: 151, 152
insn=28, live_throughout: 13, 133, 136, 147, dead_or_set: 151, 153
insn=32, live_throughout: 13, 133, 136, 147, 153, dead_or_set: 1
insn=29, live_throughout: 1, 13, 133, 136, 147, dead_or_set: 153, 154
insn=31, live_throughout: 1, 13, 136, 147, dead_or_set: 0, 133, 154
insn=33, live_throughout: 13, 136, 147, dead_or_set: 0, 1, 14
insn=38, live_throughout: 13, 136, 147, dead_or_set: 1
insn=39, live_throughout: 1, 13, 136, 147, dead_or_set: 2
insn=37, live_throughout: 1, 2, 13, 136, 147, dead_or_set: 0
insn=40, live_throughout: 13, 136, 147, dead_or_set: 0, 1, 2, 14
insn=43, live_throughout: 13, 136, 147, dead_or_set: 0
insn=44, live_throughout: 0, 13, 136, 147, dead_or_set: 1
insn=45, live_throughout: 13, 136, 147, dead_or_set: 0, 1, 14
insn=56, live_throughout: 13, 14, 136, dead_or_set: 0, 147
insn=47, live_throughout: 0, 13, 14, 136, dead_or_set: 162
insn=48, live_throughout: 0, 13, 14, 136, dead_or_set: 162
insn=50, live_throughout: 0, 13, 14, 136, dead_or_set: 164
insn=51, live_throughout: 0, 13, 14, dead_or_set: 136, 164
insn=62, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 133: (insn_list:REG_DEP_TRUE 24 (nil))
init_insns for 134: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 136: (insn_list:REG_DEP_TRUE 5 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 17 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 26 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 47 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 50 (nil))
changing reg in insn 24
changing reg in insn 31
changing reg in insn 32
changing reg in insn 6
changing reg in insn 20
changing reg in insn 14
changing reg in insn 5
changing reg in insn 51
changing reg in insn 48
changing reg in insn 44
changing reg in insn 43
changing reg in insn 39
changing reg in insn 38
changing reg in insn 37
changing reg in insn 26
changing reg in insn 24
changing reg in insn 12
changing reg in insn 9
changing reg in insn 6
changing reg in insn 24
changing reg in insn 26
changing reg in insn 12
changing reg in insn 6
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 12
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 17
changing reg in insn 56
changing reg in insn 21
changing reg in insn 27
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 31
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
Spilling for insn 19.
Spilling for insn 48.
Spilling for insn 51.

Reloads for insn # 19
Reload 0: reload_out (QI) = (mem:QI (plus:SI (reg:SI 3 r3 [145])
                                                        (const_int 2 [0x2])) [0 S1 A8])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:QI (plus:SI (reg:SI 3 r3 [145])
                                                        (const_int 2 [0x2])) [0 S1 A8])

Reloads for insn # 48
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 51
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 45.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


do_symlink

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={14d,10u} r1={9d,4u} r2={7d,2u} r3={11d,8u} r4={1d,12u,5d} r5={1d,3u} r12={8d,3u} r13={1d,6u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 555{501d,49u,5e} in 34{30 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 30 2 NOTE_INSN_FUNCTION_BEG)

(note 30 2 5 2 NOTE_INSN_DELETED)

(insn 5 30 17 2 init/initramfs.c:356 (set (reg/f:SI 4 r4 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 17 5 21 2 init/initramfs.c:356 (set (reg:SI 5 r5 [147])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 21 17 9 2 init/initramfs.c:357 (set (reg:SI 1 r1)
        (reg:SI 5 r5 [147])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 9 21 6 2 init/initramfs.c:356 (set (reg:SI 12 ip [orig:140 name_len ] [140])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])
        (nil)))

(insn 6 9 10 2 init/initramfs.c:356 (set (reg/f:SI 3 r3 [orig:134 collected.393 ] [134])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (nil)))

(insn 10 6 12 2 init/initramfs.c:356 (set (reg:SI 12 ip [139])
        (plus:SI (reg:SI 12 ip [orig:140 name_len ] [140])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 12 10 11 2 init/initramfs.c:356 (set (reg:SI 2 r2 [orig:142 body_len ] [142])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (nil)))

(insn 11 12 20 2 init/initramfs.c:356 (set (reg:SI 12 ip [141])
        (and:SI (reg:SI 12 ip [139])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 20 11 14 2 init/initramfs.c:357 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:134 collected.393 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 14 20 15 2 init/initramfs.c:356 (set (reg:SI 3 r3 [144])
        (plus:SI (reg/f:SI 3 r3 [orig:134 collected.393 ] [134])
            (reg:SI 12 ip [141]))) 4 {*arm_addsi3} (nil))

(insn 15 14 19 2 init/initramfs.c:356 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [144])
            (reg:SI 2 r2 [orig:142 body_len ] [142]))) 4 {*arm_addsi3} (nil))

(insn 19 15 22 2 init/initramfs.c:356 (set (mem:QI (plus:SI (reg:SI 3 r3 [145])
                (const_int 2 [0x2])) [0 S1 A8])
        (reg:QI 5 r5 [147])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 22 19 26 2 init/initramfs.c:357 (parallel [
            (call (mem:SI (symbol_ref:SI ("clean_path") [flags 0x3] <function_decl 0x114ad300 clean_path>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 26 22 24 2 init/initramfs.c:358 (set (reg:SI 0 r0 [orig:152 name_len ] [152])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])
        (nil)))

(insn 24 26 27 2 init/initramfs.c:358 (set (reg/f:SI 3 r3 [orig:133 collected.674 ] [133])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (nil)))

(insn 27 24 28 2 init/initramfs.c:358 (set (reg:SI 0 r0 [151])
        (plus:SI (reg:SI 0 r0 [orig:152 name_len ] [152])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 28 27 32 2 init/initramfs.c:358 (set (reg:SI 0 r0 [153])
        (and:SI (reg:SI 0 r0 [151])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 32 28 29 2 init/initramfs.c:358 (set (reg:SI 1 r1)
        (reg/f:SI 3 r3 [orig:133 collected.674 ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 29 32 31 2 init/initramfs.c:358 (set (reg:SI 0 r0 [154])
        (plus:SI (reg:SI 0 r0 [153])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn 31 29 33 2 init/initramfs.c:358 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 3 r3 [orig:133 collected.674 ] [133])
            (reg:SI 0 r0 [154]))) 4 {*arm_addsi3} (nil))

(call_insn 33 31 38 2 init/initramfs.c:358 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_symlink") [flags 0x41] <function_decl 0x11458c80 sys_symlink>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 38 33 39 2 init/initramfs.c:359 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 39 38 37 2 init/initramfs.c:359 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 37 39 40 2 init/initramfs.c:359 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 40 37 43 2 init/initramfs.c:359 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_lchown") [flags 0x41] <function_decl 0x1145eb00 sys_lchown>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 43 40 44 2 init/initramfs.c:360 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 44 43 45 2 init/initramfs.c:360 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 45 44 56 2 init/initramfs.c:360 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utime") [flags 0x3] <function_decl 0x11487700 do_utime>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 56 45 47 2 init/initramfs.c:364 (set (reg/i:SI 0 r0)
        (reg:SI 5 r5 [147])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 47 56 48 2 init/initramfs.c:361 (set (reg:SI 3 r3 [162])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 48 47 50 2 init/initramfs.c:361 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 3 r3 [162])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(insn 50 48 51 2 init/initramfs.c:362 (set (reg:SI 3 r3 [164])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(insn 51 50 62 2 init/initramfs.c:362 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 3 r3 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 7 [0x7])
        (nil)))

(insn 62 51 66 2 init/initramfs.c:364 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 66 62 67 NOTE_INSN_DELETED)

(note 67 66 0 NOTE_INSN_DELETED)


;; Function unpack_to_rootfs (unpack_to_rootfs)[0:1333] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
rescanning insn with uid = 324.
deleting insn with uid = 324.
deleting insn with uid = 308.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 47 count 77 (  2.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 47 count 87 (  2.7)

Pass 0 for finding allocno costs

    a17 (r266,l0) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r265,l3) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r265,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r265,l0) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r264,l3) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r264,l1) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r264,l0) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r260,l3) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r260,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r260,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r259,l3) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r259,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r259,l0) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r258,l3) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r258,l1) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r258,l0) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r257,l3) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r257,l1) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r256,l3) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r256,l1) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r256,l0) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r255,l3) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r255,l1) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r255,l0) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r254,l3) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r254,l1) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r252,l3) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r252,l1) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r252,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r250,l2) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r250,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r249,l2) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r249,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r248,l2) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r248,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r239,l2) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r239,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r235,l1) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r231,l1) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r226,l1) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r220,l1) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r218,l1) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r214,l1) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r206,l1) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r202,l1) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r198,l1) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r193,l1) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r190,l1) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r186,l3) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r183,l3) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r176,l1) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r175,l1) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r174,l1) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r155,l3) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r155,l1) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r154,l3) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r154,l1) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r151,l1) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r149,l1) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r148,l1) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r145,l1) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r139,l2) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r138,l2) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r135,l2) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r134,l2) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r239,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r250,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r256,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a15(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r264,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a26(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a28(r248,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r249,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r250,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a31(r239,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a34(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a35(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a36(r252,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:240000
  a37(r254,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r255,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a39(r256,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r257,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a41(r258,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r259,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a43(r260,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r264,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r265,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a46(r235,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r231,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r226,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a50(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a51(r220,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a52(r218,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a53(r214,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a54(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a55(r206,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a56(r202,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a57(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r198,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r193,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a60(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a61(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a62(r190,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a63(r176,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a64(r174,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a65(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r154,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a67(r155,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a68(r252,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a69(r254,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a70(r255,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a71(r256,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a72(r257,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a73(r258,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a74(r259,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a75(r260,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a76(r264,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a77(r265,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a78(r186,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a79(r183,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r266: preferred GENERAL_REGS, alternative NO_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r239,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r250,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r256,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a15(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r264,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a26(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a28(r248,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r249,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r250,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a31(r239,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a34(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a35(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a36(r252,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:240000
  a37(r254,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r255,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a39(r256,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r257,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a41(r258,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r259,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a43(r260,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r264,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r265,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a46(r235,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r231,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r226,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a50(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a51(r220,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a52(r218,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a53(r214,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a54(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a55(r206,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a56(r202,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a57(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r198,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r193,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a60(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a61(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a62(r190,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a63(r176,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a64(r174,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a65(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r154,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a67(r155,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a68(r252,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a69(r254,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a70(r255,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a71(r256,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a72(r257,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a73(r258,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a74(r259,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a75(r260,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a76(r264,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a77(r265,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a78(r186,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a79(r183,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 295(l0): point = 0
   Insn 289(l0): point = 2
   Insn 282(l0): point = 4
   Insn 281(l0): point = 6
   Insn 279(l0): point = 8
   Insn 278(l0): point = 10
   Insn 276(l0): point = 12
   Insn 275(l0): point = 14
   Insn 336(l0): point = 17
   Insn 242(l0): point = 19
   Insn 241(l0): point = 21
   Insn 253(l0): point = 23
   Insn 251(l0): point = 25
   Insn 324(l0): point = 27
   Insn 326(l0): point = 30
   Insn 159(l0): point = 32
   Insn 142(l0): point = 34
   Insn 307(l0): point = 36
   Insn 211(l0): point = 38
   Insn 175(l0): point = 40
   Insn 215(l0): point = 42
   Insn 128(l0): point = 44
   Insn 57(l0): point = 46
   Insn 341(l0): point = 48
   Insn 63(l0): point = 50
   Insn 56(l0): point = 52
   Insn 342(l0): point = 54
   Insn 60(l0): point = 56
   Insn 340(l0): point = 58
   Insn 229(l0): point = 60
   Insn 59(l0): point = 62
   Insn 51(l0): point = 65
   Insn 50(l0): point = 67
   Insn 46(l0): point = 70
   Insn 45(l0): point = 72
   Insn 43(l0): point = 75
   Insn 42(l0): point = 77
   Insn 41(l0): point = 79
   Insn 38(l0): point = 82
   Insn 37(l0): point = 84
   Insn 34(l0): point = 86
   Insn 36(l0): point = 88
   Insn 31(l0): point = 90
   Insn 30(l0): point = 92
   Insn 28(l0): point = 94
   Insn 24(l0): point = 96
   Insn 29(l0): point = 98
   Insn 21(l0): point = 100
   Insn 19(l0): point = 102
   Insn 15(l0): point = 104
   Insn 20(l0): point = 106
   Insn 12(l0): point = 108
   Insn 10(l0): point = 110
   Insn 14(l0): point = 112
   Insn 11(l0): point = 114
   Insn 3(l0): point = 116
   Insn 2(l0): point = 118
   Insn 9(l0): point = 120
   Insn 272(l2): point = 123
   Insn 303(l2): point = 125
   Insn 271(l2): point = 127
   Insn 265(l2): point = 130
   Insn 264(l2): point = 132
   Insn 261(l2): point = 134
   Insn 260(l2): point = 136
   Insn 259(l2): point = 138
   Insn 258(l2): point = 140
   Insn 257(l2): point = 142
   Insn 255(l2): point = 144
   Insn 256(l2): point = 146
   Insn 254(l2): point = 148
   Insn 252(l2): point = 150
   Insn 250(l2): point = 152
   Insn 249(l2): point = 154
   Insn 248(l2): point = 156
   Insn 247(l2): point = 158
   Insn 238(l1): point = 161
   Insn 237(l1): point = 163
   Insn 236(l1): point = 165
   Insn 230(l1): point = 171
   Insn 220(l1): point = 174
   Insn 219(l1): point = 176
   Insn 221(l1): point = 181
   Insn 222(l1): point = 183
   Insn 216(l1): point = 185
   Insn 212(l1): point = 188
   Insn 208(l1): point = 191
   Insn 207(l1): point = 193
   Insn 206(l1): point = 195
   Insn 203(l1): point = 198
   Insn 202(l1): point = 200
   Insn 201(l1): point = 202
   Insn 197(l1): point = 205
   Insn 193(l1): point = 208
   Insn 192(l1): point = 210
   Insn 191(l1): point = 212
   Insn 334(l1): point = 215
   Insn 185(l1): point = 217
   Insn 181(l1): point = 219
   Insn 179(l1): point = 221
   Insn 178(l1): point = 223
   Insn 177(l1): point = 225
   Insn 180(l1): point = 227
   Insn 172(l1): point = 230
   Insn 171(l1): point = 232
   Insn 170(l1): point = 234
   Insn 167(l1): point = 237
   Insn 166(l1): point = 239
   Insn 165(l1): point = 241
   Insn 332(l1): point = 244
   Insn 160(l1): point = 246
   Insn 156(l1): point = 249
   Insn 155(l1): point = 251
   Insn 154(l1): point = 253
   Insn 151(l1): point = 256
   Insn 150(l1): point = 258
   Insn 148(l1): point = 260
   Insn 147(l1): point = 262
   Insn 145(l1): point = 264
   Insn 144(l1): point = 266
   Insn 143(l1): point = 268
   Insn 146(l1): point = 270
   Insn 139(l1): point = 272
   Insn 141(l1): point = 274
   Insn 138(l1): point = 276
   Insn 135(l1): point = 279
   Insn 134(l1): point = 281
   Insn 132(l1): point = 283
   Insn 344(l1): point = 285
   Insn 343(l1): point = 287
   Insn 131(l1): point = 289
   Insn 130(l1): point = 291
   Insn 129(l1): point = 293
   Insn 330(l1): point = 296
   Insn 115(l1): point = 298
   Insn 119(l1): point = 300
   Insn 118(l1): point = 302
   Insn 114(l1): point = 308
   Insn 117(l1): point = 310
   Insn 112(l1): point = 313
   Insn 111(l1): point = 315
   Insn 328(l1): point = 318
   Insn 105(l1): point = 320
   Insn 106(l1): point = 322
   Insn 104(l1): point = 324
   Insn 103(l1): point = 326
   Insn 86(l1): point = 329
   Insn 84(l1): point = 331
   Insn 82(l1): point = 333
   Insn 78(l1): point = 336
   Insn 77(l1): point = 338
   Insn 74(l1): point = 340
   Insn 73(l1): point = 345
   Insn 71(l1): point = 348
   Insn 70(l1): point = 350
   Insn 68(l1): point = 352
   Insn 69(l1): point = 354
   Insn 100(l3): point = 357
   Insn 99(l3): point = 359
   Insn 96(l3): point = 361
   Insn 93(l3): point = 363
   Insn 90(l3): point = 365
 a0(r239): [3..16]
 a1(r134): [17..19]
 a2(r135): [17..21]
 a3(r248): [17..27]
 a4(r250): [17..23]
 a5(r249): [17..25]
 a6(r259): [30..32]
 a7(r258): [30..34]
 a8(r260): [30..36]
 a9(r252): [30..60]
 a10(r256): [30..38]
 a11(r257): [30..40]
 a12(r255): [30..42]
 a13(r254): [30..44]
 a14(r157): [70..112] [47..64]
 a15(r168): [47..52]
 a16(r264): [30..48]
 a17(r266): [49..58]
 a18(r265): [30..54]
 a19(r170): [57..62]
 a20(r154): [70..118] [30..64]
 a21(r155): [70..116] [30..64]
 a22(r142): [73..90]
 a23(r165): [78..79]
 a24(r163): [85..88]
 a25(r156): [95..120]
 a26(r134): [123..160]
 a27(r135): [137..160] [123..132]
 a28(r248): [123..160]
 a29(r249): [123..160]
 a30(r250): [123..160]
 a31(r239): [123..125]
 a32(r139): [153..158]
 a33(r138): [153..156]
 a34(r154): [161..356]
 a35(r155): [169..356] [161..167]
 a36(r252): [161..356]
 a37(r254): [161..356]
 a38(r255): [161..356]
 a39(r256): [161..356]
 a40(r257): [161..356]
 a41(r258): [161..356]
 a42(r259): [161..356]
 a43(r260): [161..356]
 a44(r264): [161..356]
 a45(r265): [161..356]
 a46(r235): [164..168]
 a47(r231): [166..171]
 a48(r226): [175..178]
 a49(r145): [336..352] [303..317] [179..295] [177..177]
 a50(r148): [177..185]
 a51(r220): [194..195]
 a52(r218): [201..202]
 a53(r214): [211..212]
 a54(r149): [228..241]
 a55(r206): [233..234]
 a56(r202): [252..253]
 a57(r146): [261..281]
 a58(r198): [271..276]
 a59(r193): [301..310]
 a60(r151): [348..354] [316..317]
 a61(r141): [321..324]
 a62(r190): [325..326]
 a63(r176): [334..338]
 a64(r174): [343..343] [339..341]
 a65(r175): [341..345]
 a66(r154): [357..367]
 a67(r155): [357..367]
 a68(r252): [357..367]
 a69(r254): [357..367]
 a70(r255): [357..367]
 a71(r256): [357..367]
 a72(r257): [357..367]
 a73(r258): [357..367]
 a74(r259): [357..367]
 a75(r260): [357..367]
 a76(r264): [357..367]
 a77(r265): [357..367]
 a78(r186): [362..363]
 a79(r183): [364..365]
Compressing live ranges: from 368 to 101 - 27%
Ranges after the compression:
 a0(r239): [0..1]
 a1(r134): [2..3]
 a2(r135): [2..4]
 a3(r248): [2..7]
 a4(r250): [2..5]
 a5(r249): [2..6]
 a6(r259): [8..9]
 a7(r258): [8..10]
 a8(r260): [8..11]
 a9(r252): [8..23]
 a10(r256): [8..12]
 a11(r257): [8..13]
 a12(r255): [8..14]
 a13(r254): [8..15]
 a14(r157): [26..34] [16..25]
 a15(r168): [16..19]
 a16(r264): [8..17]
 a17(r266): [18..22]
 a18(r265): [8..20]
 a19(r170): [21..24]
 a20(r154): [26..36] [8..25]
 a21(r155): [26..35] [8..25]
 a22(r142): [27..32]
 a23(r165): [28..29]
 a24(r163): [30..31]
 a25(r156): [33..37]
 a26(r134): [38..45]
 a27(r135): [41..45] [38..40]
 a28(r248): [38..45]
 a29(r249): [38..45]
 a30(r250): [38..45]
 a31(r239): [38..39]
 a32(r139): [42..44]
 a33(r138): [42..43]
 a34(r154): [46..94]
 a35(r155): [51..94] [46..49]
 a36(r252): [46..94]
 a37(r254): [46..94]
 a38(r255): [46..94]
 a39(r256): [46..94]
 a40(r257): [46..94]
 a41(r258): [46..94]
 a42(r259): [46..94]
 a43(r260): [46..94]
 a44(r264): [46..94]
 a45(r265): [46..94]
 a46(r235): [47..50]
 a47(r231): [48..52]
 a48(r226): [53..55]
 a49(r145): [85..92] [76..79] [56..74] [54..54]
 a50(r148): [54..57]
 a51(r220): [58..59]
 a52(r218): [60..61]
 a53(r214): [62..63]
 a54(r149): [64..67]
 a55(r206): [65..66]
 a56(r202): [68..69]
 a57(r146): [70..73]
 a58(r198): [71..72]
 a59(r193): [75..77]
 a60(r151): [91..93] [78..79]
 a61(r141): [80..81]
 a62(r190): [82..83]
 a63(r176): [84..86]
 a64(r174): [89..89] [87..88]
 a65(r175): [88..90]
 a66(r154): [95..100]
 a67(r155): [95..100]
 a68(r252): [95..100]
 a69(r254): [95..100]
 a70(r255): [95..100]
 a71(r256): [95..100]
 a72(r257): [95..100]
 a73(r258): [95..100]
 a74(r259): [95..100]
 a75(r260): [95..100]
 a76(r264): [95..100]
 a77(r265): [95..100]
 a78(r186): [96..97]
 a79(r183): [98..99]
    Creating cap  a80(r139,l0: a32(r139,l2))
    Creating cap  a81(r138,l0: a33(r138,l2))
    Creating cap  a82(r235,l0: a46(r235,l1))
    Creating cap  a83(r231,l0: a47(r231,l1))
    Creating cap  a84(r226,l0: a48(r226,l1))
    Creating cap  a85(r145,l0: a49(r145,l1))
    Creating cap  a86(r148,l0: a50(r148,l1))
    Creating cap  a87(r220,l0: a51(r220,l1))
    Creating cap  a88(r218,l0: a52(r218,l1))
    Creating cap  a89(r214,l0: a53(r214,l1))
    Creating cap  a90(r149,l0: a54(r149,l1))
    Creating cap  a91(r206,l0: a55(r206,l1))
    Creating cap  a92(r202,l0: a56(r202,l1))
    Creating cap  a93(r146,l0: a57(r146,l1))
    Creating cap  a94(r198,l0: a58(r198,l1))
    Creating cap  a95(r193,l0: a59(r193,l1))
    Creating cap  a96(r151,l0: a60(r151,l1))
    Creating cap  a97(r141,l0: a61(r141,l1))
    Creating cap  a98(r190,l0: a62(r190,l1))
    Creating cap  a99(r176,l0: a63(r176,l1))
    Creating cap  a100(r174,l0: a64(r174,l1))
    Creating cap  a101(r175,l0: a65(r175,l1))
    Creating cap  a102(r186,l1: a78(r186,l3))
    Creating cap  a103(r183,l1: a79(r183,l3))
    Creating cap  a104(r186,l0: a102(r186,l1: a78(r186,l3)))
    Creating cap  a105(r183,l0: a103(r183,l1: a79(r183,l3)))
+++Allocating 1344 bytes for conflict table (uncompressed size 1696)
;; a0(r239,l0) conflicts: a1(r134,l0) a2(r135,l0) a3(r248,l0) a4(r250,l0) a5(r249,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r134,l0) conflicts: a0(r239,l0) a2(r135,l0) a3(r248,l0) a4(r250,l0) a5(r249,l0) a81(r138,l0) a80(r139,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a2(r135,l0) conflicts: a0(r239,l0) a1(r134,l0) a3(r248,l0) a4(r250,l0) a5(r249,l0) a81(r138,l0) a80(r139,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a3(r248,l0) conflicts: a0(r239,l0) a1(r134,l0) a2(r135,l0) a4(r250,l0) a5(r249,l0) a81(r138,l0) a80(r139,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a4(r250,l0) conflicts: a0(r239,l0) a1(r134,l0) a2(r135,l0) a3(r248,l0) a5(r249,l0) a81(r138,l0) a80(r139,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a5(r249,l0) conflicts: a0(r239,l0) a1(r134,l0) a2(r135,l0) a3(r248,l0) a4(r250,l0) a81(r138,l0) a80(r139,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a6(r259,l0) conflicts: a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a7(r258,l0) conflicts: a6(r259,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a8(r260,l0) conflicts: a6(r259,l0) a7(r258,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a9(r252,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a15(r168,l0) a14(r157,l0) a17(r266,l0) a19(r170,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a10(r256,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a11(r257,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a12(r255,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a13(r254,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a14(r157,l0) conflicts: a9(r252,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a15(r168,l0) a17(r266,l0) a19(r170,l0) a22(r142,l0) a23(r165,l0) a24(r163,l0) a25(r156,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a15(r168,l0) conflicts: a9(r252,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a14(r157,l0) a17(r266,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r264,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a15(r168,l0) a14(r157,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a17(r266,l0) conflicts: a9(r252,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a15(r168,l0) a14(r157,l0) a19(r170,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r265,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a20(r154,l0) a21(r155,l0) a15(r168,l0) a14(r157,l0) a17(r266,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a19(r170,l0) conflicts: a9(r252,l0) a20(r154,l0) a21(r155,l0) a14(r157,l0) a17(r266,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r154,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a21(r155,l0) a15(r168,l0) a14(r157,l0) a17(r266,l0) a19(r170,l0) a22(r142,l0) a23(r165,l0) a24(r163,l0) a25(r156,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0 1 14
;; a21(r155,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a15(r168,l0) a14(r157,l0) a17(r266,l0) a19(r170,l0) a22(r142,l0) a23(r165,l0) a24(r163,l0) a25(r156,l0) a82(r235,l0) a83(r231,l0) a84(r226,l0) a86(r148,l0) a85(r145,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a97(r141,l0) a98(r190,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0) a104(r186,l0) a105(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0 1 14
;; a22(r142,l0) conflicts: a20(r154,l0) a21(r155,l0) a14(r157,l0) a23(r165,l0) a24(r163,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r165,l0) conflicts: a20(r154,l0) a21(r155,l0) a14(r157,l0) a22(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r163,l0) conflicts: a20(r154,l0) a21(r155,l0) a14(r157,l0) a22(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r156,l0) conflicts: a20(r154,l0) a21(r155,l0) a14(r157,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a26(r134,l2) conflicts: a31(r239,l2) a27(r135,l2) a28(r248,l2) a29(r249,l2) a30(r250,l2) a33(r138,l2) a32(r139,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a27(r135,l2) conflicts: a31(r239,l2) a26(r134,l2) a28(r248,l2) a29(r249,l2) a30(r250,l2) a33(r138,l2) a32(r139,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a28(r248,l2) conflicts: a31(r239,l2) a26(r134,l2) a27(r135,l2) a29(r249,l2) a30(r250,l2) a33(r138,l2) a32(r139,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a29(r249,l2) conflicts: a31(r239,l2) a26(r134,l2) a27(r135,l2) a28(r248,l2) a30(r250,l2) a33(r138,l2) a32(r139,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a30(r250,l2) conflicts: a31(r239,l2) a26(r134,l2) a27(r135,l2) a28(r248,l2) a29(r249,l2) a33(r138,l2) a32(r139,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a31(r239,l2) conflicts: a26(r134,l2) a27(r135,l2) a28(r248,l2) a29(r249,l2) a30(r250,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r139,l2) conflicts: a26(r134,l2) a27(r135,l2) a28(r248,l2) a29(r249,l2) a30(r250,l2) a33(r138,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r138,l2) conflicts: a26(r134,l2) a27(r135,l2) a28(r248,l2) a29(r249,l2) a30(r250,l2) a32(r139,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r154,l1) conflicts: a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a35(r155,l1) conflicts: a34(r154,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a36(r252,l1) conflicts: a34(r154,l1) a35(r155,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a37(r254,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a38(r255,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a39(r256,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a40(r257,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a41(r258,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a42(r259,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a43(r260,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a44(r264,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a45(r265,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a45(r265,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a46(r235,l1) a47(r231,l1) a48(r226,l1) a50(r148,l1) a49(r145,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a61(r141,l1) a62(r190,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1) a102(r186,l1) a103(r183,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a46(r235,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a47(r231,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a47(r231,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a46(r235,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a48(r226,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a50(r148,l1) a49(r145,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a49(r145,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a48(r226,l1) a50(r148,l1) a51(r220,l1) a52(r218,l1) a53(r214,l1) a54(r149,l1) a55(r206,l1) a56(r202,l1) a57(r146,l1) a58(r198,l1) a59(r193,l1) a60(r151,l1) a63(r176,l1) a64(r174,l1) a65(r175,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a50(r148,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a48(r226,l1) a49(r145,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a51(r220,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a52(r218,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a53(r214,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a54(r149,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1) a55(r206,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a55(r206,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1) a54(r149,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a56(r202,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a57(r146,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1) a58(r198,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a58(r198,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1) a57(r146,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a59(r193,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a60(r151,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a61(r141,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a62(r190,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a63(r176,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a64(r174,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1) a65(r175,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a65(r175,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1) a49(r145,l1) a64(r174,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a66(r154,l3) conflicts: a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a67(r155,l3) conflicts: a66(r154,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a68(r252,l3) conflicts: a66(r154,l3) a67(r155,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a69(r254,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a70(r255,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a71(r256,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a72(r257,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a73(r258,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a74(r259,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a75(r260,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a76(r264,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a76(r264,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a77(r265,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a77(r265,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a78(r186,l3) a79(r183,l3)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a78(r186,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a79(r183,l3) conflicts: a66(r154,l3) a67(r155,l3) a68(r252,l3) a69(r254,l3) a70(r255,l3) a71(r256,l3) a72(r257,l3) a73(r258,l3) a74(r259,l3) a75(r260,l3) a76(r264,l3) a77(r265,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a80(r139,l0) conflicts: a1(r134,l0) a2(r135,l0) a3(r248,l0) a4(r250,l0) a5(r249,l0) a81(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a81(r138,l0) conflicts: a1(r134,l0) a2(r135,l0) a3(r248,l0) a4(r250,l0) a5(r249,l0) a80(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a82(r235,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a83(r231,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a83(r231,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a82(r235,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a84(r226,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a86(r148,l0) a85(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a85(r145,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a84(r226,l0) a86(r148,l0) a87(r220,l0) a88(r218,l0) a89(r214,l0) a90(r149,l0) a91(r206,l0) a92(r202,l0) a93(r146,l0) a94(r198,l0) a95(r193,l0) a96(r151,l0) a99(r176,l0) a100(r174,l0) a101(r175,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a86(r148,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a84(r226,l0) a85(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a87(r220,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a88(r218,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a89(r214,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a90(r149,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0) a91(r206,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a91(r206,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0) a90(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a92(r202,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a93(r146,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0) a94(r198,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a94(r198,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0) a93(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a95(r193,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a96(r151,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a97(r141,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a98(r190,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a99(r176,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a100(r174,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0) a101(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a101(r175,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0) a85(r145,l0) a100(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a102(r186,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a103(r183,l1) conflicts: a34(r154,l1) a35(r155,l1) a36(r252,l1) a37(r254,l1) a38(r255,l1) a39(r256,l1) a40(r257,l1) a41(r258,l1) a42(r259,l1) a43(r260,l1) a44(r264,l1) a45(r265,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a104(r186,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a105(r183,l0) conflicts: a6(r259,l0) a7(r258,l0) a8(r260,l0) a9(r252,l0) a10(r256,l0) a11(r257,l0) a12(r255,l0) a13(r254,l0) a16(r264,l0) a18(r265,l0) a20(r154,l0) a21(r155,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a16(r264)<->a17(r266)@1000:move
  cp1:a61(r141)<->a62(r190)@125:shuffle
  cp2:a63(r176)<->a64(r174)@125:shuffle
  cp3:a78(r186)<->a79(r183)@125:shuffle
  cp4:a97(r141)<->a98(r190)@125:shuffle
  cp5:a99(r176)<->a100(r174)@125:shuffle
  cp6:a102(r186)<->a103(r183)@125:shuffle
  cp7:a104(r186)<->a105(r183)@125:shuffle
  regions=4, blocks=32, points=101
    allocnos=106, copies=8, conflicts=0, ranges=90

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 31 28(->30:l2) 6(->27:l1) 5 4 3 2
    all: 0r239 1r134 2r135 3r248 4r250 5r249 6r259 7r258 8r260 9r252 10r256 11r257 12r255 13r254 14r157 15r168 16r264 17r266 18r265 19r170 20r154 21r155 22r142 23r165 24r163 25r156 80r139 81r138 82r235 83r231 84r226 85r145 86r148 87r220 88r218 89r214 90r149 91r206 92r202 93r146 94r198 95r193 96r151 97r141 98r190 99r176 100r174 101r175 104r186 105r183
    modified regnos: 134 135 138 139 141 142 145 146 148 149 151 154 155 156 157 163 165 168 170 174 175 176 183 186 190 193 198 202 206 214 218 220 226 231 235 239 248 249 250 252 254 255 256 257 258 259 260 264 265 266
    border:
    Pressure: GENERAL_REGS=20
    Reg 239 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 248 of GENERAL_REGS has 3 regs less
    Reg 250 of GENERAL_REGS has 3 regs less
    Reg 249 of GENERAL_REGS has 3 regs less
    Reg 259 of GENERAL_REGS has 5 regs less
    Reg 258 of GENERAL_REGS has 5 regs less
    Reg 260 of GENERAL_REGS has 5 regs less
    Reg 252 of GENERAL_REGS has 5 regs less
    Reg 256 of GENERAL_REGS has 5 regs less
    Reg 257 of GENERAL_REGS has 5 regs less
    Reg 255 of GENERAL_REGS has 5 regs less
    Reg 254 of GENERAL_REGS has 5 regs less
    Reg 157 of GENERAL_REGS has 3 regs less
    Reg 264 of GENERAL_REGS has 5 regs less
    Reg 265 of GENERAL_REGS has 5 regs less
    Reg 154 of GENERAL_REGS has 5 regs less
    Reg 155 of GENERAL_REGS has 5 regs less
    Reg 156 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 186 of GENERAL_REGS has 1 regs less
      Pushing a105(r183,l0: a103(r183,l1: a79(r183,l3)))
      Pushing a98(r190,l0: a62(r190,l1))
      Pushing a83(r231,l0: a47(r231,l1))
      Pushing a82(r235,l0: a46(r235,l1))
      Pushing a24(r163,l0)
      Pushing a23(r165,l0)
      Pushing a97(r141,l0: a61(r141,l1))
      Pushing a81(r138,l0: a33(r138,l2))
      Pushing a80(r139,l0: a32(r139,l2))
      Pushing a22(r142,l0)
      Pushing a19(r170,l0)
      Pushing a17(r266,l0)
      Pushing a15(r168,l0)
      Pushing a0(r239,l0)
      Pushing a5(r249,l0)
      Pushing a4(r250,l0)
      Pushing a25(r156,l0)
      Pushing a3(r248,l0)
      Pushing a1(r134,l0)
      Pushing a14(r157,l0)
      Pushing a2(r135,l0)
      Pushing a6(r259,l0)(potential spill: pri=512, cost=20000)
      Pushing a99(r176,l0: a63(r176,l1))
      Pushing a92(r202,l0: a56(r202,l1))
      Pushing a89(r214,l0: a53(r214,l1))
      Pushing a88(r218,l0: a52(r218,l1))
      Pushing a87(r220,l0: a51(r220,l1))
      Pushing a96(r151,l0: a60(r151,l1))
      Pushing a104(r186,l0: a102(r186,l1: a78(r186,l3)))
      Pushing a7(r258,l0)(potential spill: pri=645, cost=20000)
      Pushing a91(r206,l0: a55(r206,l1))
      Pushing a94(r198,l0: a58(r198,l1))
      Pushing a90(r149,l0: a54(r149,l1))
      Pushing a95(r193,l0: a59(r193,l1))
      Pushing a101(r175,l0: a65(r175,l1))(potential spill: pri=689, cost=20000)
      Pushing a100(r174,l0: a64(r174,l1))
      Pushing a84(r226,l0: a48(r226,l1))(potential spill: pri=740, cost=20000)
      Pushing a86(r148,l0: a50(r148,l1))
      Pushing a11(r257,l0)(potential spill: pri=1111, cost=20000)
      Pushing a13(r254,l0)(potential spill: pri=1176, cost=20000)
      Pushing a16(r264,l0)(potential spill: pri=1250, cost=20000)
      Pushing a18(r265,l0)(potential spill: pri=1333, cost=20000)
      Pushing a93(r146,l0: a57(r146,l1))(potential spill: pri=1446, cost=20250)
      Pushing a85(r145,l0: a49(r145,l1))(potential spill: pri=1739, cost=40000)
      Pushing a8(r260,l0)(potential spill: pri=2727, cost=30000)
      Pushing a10(r256,l0)(potential spill: pri=3000, cost=30000)
      Pushing a12(r255,l0)
      Pushing a20(r154,l0)
      Pushing a21(r155,l0)
      Pushing a9(r252,l0)
      Popping a9(r252,l0)  -- assign reg 4
      Popping a21(r155,l0)  -- assign reg 5
      Popping a20(r154,l0)  -- assign reg 6
      Popping a12(r255,l0)  -- assign reg 7
      Popping a10(r256,l0)  -- assign reg 8
      Popping a8(r260,l0)  -- assign reg 10
      Popping a85(r145,l0: a49(r145,l1))  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a93(r146,l0: a57(r146,l1))  -- assign reg 12
      Popping a18(r265,l0)  -- assign reg 9
      Popping a16(r264,l0)  -- assign reg 11
      Popping a13(r254,l0)  -- spill
      Popping a11(r257,l0)  -- spill
      Popping a86(r148,l0: a50(r148,l1))  -- assign reg 3
      Popping a84(r226,l0: a48(r226,l1))  -- assign reg 0
      Popping a100(r174,l0: a64(r174,l1))  -- assign reg 2
      Popping a101(r175,l0: a65(r175,l1))  -- assign reg 0
      Popping a95(r193,l0: a59(r193,l1))  -- assign reg 2
      Popping a90(r149,l0: a54(r149,l1))  -- assign reg 3
      Popping a94(r198,l0: a58(r198,l1))  -- assign reg 2
      Popping a91(r206,l0: a55(r206,l1))  -- assign reg 2
      Popping a7(r258,l0)  -- spill
      Popping a104(r186,l0: a102(r186,l1: a78(r186,l3)))  -- assign reg 3
      Popping a96(r151,l0: a60(r151,l1))  -- assign reg 3
      Popping a87(r220,l0: a51(r220,l1))  -- assign reg 3
      Popping a88(r218,l0: a52(r218,l1))  -- assign reg 3
      Popping a89(r214,l0: a53(r214,l1))  -- assign reg 3
      Popping a92(r202,l0: a56(r202,l1))  -- assign reg 3
      Popping a99(r176,l0: a63(r176,l1))  -- assign reg 2
      Popping a6(r259,l0)  -- spill
      Popping a2(r135,l0)  -- assign reg 4
      Popping a14(r157,l0)  -- assign reg 7
      Popping a1(r134,l0)  -- assign reg 5
      Popping a3(r248,l0)  -- assign reg 6
      Popping a25(r156,l0)  -- assign reg 4
      Popping a4(r250,l0)  -- assign reg 7
      Popping a5(r249,l0)  -- assign reg 8
      Popping a0(r239,l0)  -- assign reg 10
      Popping a15(r168,l0)  -- assign reg 3
      Popping a17(r266,l0)  -- assign reg 0
      Popping a19(r170,l0)  -- assign reg 2
      Popping a22(r142,l0)  -- assign reg 0
      Popping a80(r139,l0: a32(r139,l2))  -- assign reg 3
      Popping a81(r138,l0: a33(r138,l2))  -- assign reg 2
      Popping a97(r141,l0: a61(r141,l1))  -- assign reg 3
      Popping a23(r165,l0)  -- assign reg 3
      Popping a24(r163,l0)  -- assign reg 3
      Popping a82(r235,l0: a46(r235,l1))  -- assign reg 3
      Popping a83(r231,l0: a47(r231,l1))  -- assign reg 2
      Popping a98(r190,l0: a62(r190,l1))  -- assign reg 3
      Popping a105(r183,l0: a103(r183,l1: a79(r183,l3)))  -- assign reg 3

  Loop 2 (parent 0, header bb30, depth 1)
    bbs: 30(->31:l0) 29
    all: 26r134 27r135 28r248 29r249 30r250 31r239 32r139 33r138
    modified regnos: 134 135 138 139 239
    border: 26r134 27r135 28r248 29r249 30r250 31r239
    Pressure: GENERAL_REGS=8
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 248 of GENERAL_REGS has 3 regs less
      Pushing a33(r138,l2)
      Pushing a32(r139,l2)
      Pushing a28(r248,l2)
      Pushing a26(r134,l2)
      Pushing a27(r135,l2)
      Popping a27(r135,l2)  -- assign reg 4
      Popping a26(r134,l2)  -- assign reg 5
      Popping a28(r248,l2)  -- assign reg 6
      Popping a32(r139,l2)  -- assign reg 3
      Popping a33(r138,l2)  -- assign reg 2

  Loop 1 (parent 0, header bb27, depth 1)
    bbs: 27(->28:l0) 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 9(->10:l3) 8 7
    all: 34r154 35r155 36r252 37r254 38r255 39r256 40r257 41r258 42r259 43r260 44r264 45r265 46r235 47r231 48r226 49r145 50r148 51r220 52r218 53r214 54r149 55r206 56r202 57r146 58r198 59r193 60r151 61r141 62r190 63r176 64r174 65r175 102r186 103r183
    modified regnos: 141 145 146 148 149 151 154 155 174 175 176 183 186 190 193 198 202 206 214 218 220 226 231 235
    border: 34r154 35r155 36r252 37r254 38r255 39r256 40r257 41r258 42r259 43r260 44r264 45r265
    Pressure: GENERAL_REGS=20
    Reg 154 of GENERAL_REGS has 5 regs less
    Reg 155 of GENERAL_REGS has 5 regs less
    Reg 264 of GENERAL_REGS has 5 regs less
    Reg 265 of GENERAL_REGS has 5 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 186 of GENERAL_REGS has 1 regs less
      Pushing a103(r183,l1: a79(r183,l3))
      Pushing a65(r175,l1)
      Pushing a63(r176,l1)
      Pushing a62(r190,l1)
      Pushing a56(r202,l1)
      Pushing a55(r206,l1)
      Pushing a53(r214,l1)
      Pushing a52(r218,l1)
      Pushing a51(r220,l1)
      Pushing a48(r226,l1)
      Pushing a47(r231,l1)
      Pushing a46(r235,l1)
      Pushing a61(r141,l1)
      Pushing a60(r151,l1)
      Pushing a58(r198,l1)
      Pushing a54(r149,l1)
      Pushing a59(r193,l1)
      Pushing a50(r148,l1)
      Pushing a64(r174,l1)
      Pushing a102(r186,l1: a78(r186,l3))
      Pushing a57(r146,l1)(potential spill: pri=1265, cost=20250)
      Pushing a49(r145,l1)(potential spill: pri=1481, cost=40000)
      Pushing a44(r264,l1)(potential spill: pri=3846, cost=50000)
      Pushing a45(r265,l1)(potential spill: pri=4166, cost=50000)
      Pushing a34(r154,l1)(potential spill: pri=12727, cost=140000)
      Pushing a35(r155,l1)(potential spill: pri=15000, cost=150000)
      Popping a35(r155,l1)  -- assign reg 5
      Popping a34(r154,l1)  -- assign reg 6
      Popping a45(r265,l1)  -- assign reg 9
      Popping a44(r264,l1)  -- assign reg 11
      Popping a49(r145,l1)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a57(r146,l1)  -- assign reg 12
      Popping a102(r186,l1: a78(r186,l3))  -- assign reg 3
      Popping a64(r174,l1)  -- assign reg 2
      Popping a50(r148,l1)  -- assign reg 3
      Popping a59(r193,l1)  -- assign reg 2
      Popping a54(r149,l1)  -- assign reg 3
      Popping a58(r198,l1)  -- assign reg 2
      Popping a60(r151,l1)  -- assign reg 3
      Popping a61(r141,l1)  -- assign reg 3
      Popping a46(r235,l1)  -- assign reg 3
      Popping a47(r231,l1)  -- assign reg 2
      Popping a48(r226,l1)  -- assign reg 0
      Popping a51(r220,l1)  -- assign reg 3
      Popping a52(r218,l1)  -- assign reg 3
      Popping a53(r214,l1)  -- assign reg 3
      Popping a55(r206,l1)  -- assign reg 2
      Popping a56(r202,l1)  -- assign reg 3
      Popping a62(r190,l1)  -- assign reg 3
      Popping a63(r176,l1)  -- assign reg 2
      Popping a65(r175,l1)  -- assign reg 0
      Popping a103(r183,l1: a79(r183,l3))  -- assign reg 3

  Loop 3 (parent 1, header bb10, depth 2)
    bbs: 10(->11:l1)
    all: 66r154 67r155 68r252 69r254 70r255 71r256 72r257 73r258 74r259 75r260 76r264 77r265 78r186 79r183
    modified regnos: 183 186
    border: 66r154 67r155 68r252 69r254 70r255 71r256 72r257 73r258 74r259 75r260 76r264 77r265
    Pressure: GENERAL_REGS=14
    Reg 154 of GENERAL_REGS has 2 regs less
    Reg 155 of GENERAL_REGS has 2 regs less
    Reg 264 of GENERAL_REGS has 2 regs less
    Reg 265 of GENERAL_REGS has 2 regs less
    Reg 186 of GENERAL_REGS has 1 regs less
      Pushing a79(r183,l3)
      Pushing a78(r186,l3)
      Pushing a77(r265,l3)
      Pushing a76(r264,l3)
      Pushing a67(r155,l3)
      Pushing a66(r154,l3)
      Popping a66(r154,l3)  -- assign reg 6
      Popping a67(r155,l3)  -- assign reg 5
      Popping a76(r264,l3)  -- assign reg 11
      Popping a77(r265,l3)  -- assign reg 9
      Popping a78(r186,l3)  -- assign reg 3
      Popping a79(r183,l3)  -- assign reg 3
Disposition:
   26:r134 l2     5    1:r134 l0     5   27:r135 l2     4    2:r135 l0     4
   33:r138 l2     2   32:r139 l2     3   61:r141 l1     3   22:r142 l0     0
   49:r145 l1   mem   57:r146 l1    12   50:r148 l1     3   54:r149 l1     3
   60:r151 l1     3   66:r154 l3     6   34:r154 l1     6   20:r154 l0     6
   67:r155 l3     5   35:r155 l1     5   21:r155 l0     5   25:r156 l0     4
   14:r157 l0     7   24:r163 l0     3   23:r165 l0     3   15:r168 l0     3
   19:r170 l0     2   64:r174 l1     2   65:r175 l1     0   63:r176 l1     2
   79:r183 l3     3   78:r186 l3     3   62:r190 l1     3   59:r193 l1     2
   58:r198 l1     2   56:r202 l1     3   55:r206 l1     2   53:r214 l1     3
   52:r218 l1     3   51:r220 l1     3   48:r226 l1     0   47:r231 l1     2
   46:r235 l1     3   31:r239 l2    10    0:r239 l0    10   28:r248 l2     6
    3:r248 l0     6   29:r249 l2     8    5:r249 l0     8   30:r250 l2     7
    4:r250 l0     7   68:r252 l3     4   36:r252 l1     4    9:r252 l0     4
   69:r254 l3   mem   37:r254 l1   mem   13:r254 l0   mem   70:r255 l3     7
   38:r255 l1     7   12:r255 l0     7   71:r256 l3     8   39:r256 l1     8
   10:r256 l0     8   72:r257 l3   mem   40:r257 l1   mem   11:r257 l0   mem
   73:r258 l3   mem   41:r258 l1   mem    7:r258 l0   mem   74:r259 l3   mem
   42:r259 l1   mem    6:r259 l0   mem   75:r260 l3    10   43:r260 l1    10
    8:r260 l0    10   76:r264 l3    11   44:r264 l1    11   16:r264 l0    11
   77:r265 l3     9   45:r265 l1     9   18:r265 l0     9   17:r266 l0     0
New iteration of spill/restore move
      Changing RTL for loop 2 (header bb30)
  5 vs parent 5:      Creating newreg=267 from oldreg=134
  4 vs parent 4:      Creating newreg=268 from oldreg=135
  6 vs parent 6:      Creating newreg=269 from oldreg=248
rescanning insn with uid = 271.
deleting insn with uid = 271.
rescanning insn with uid = 247.
deleting insn with uid = 247.
rescanning insn with uid = 248.
deleting insn with uid = 248.
rescanning insn with uid = 252.
deleting insn with uid = 252.
rescanning insn with uid = 254.
deleting insn with uid = 254.
rescanning insn with uid = 256.
deleting insn with uid = 256.
rescanning insn with uid = 255.
deleting insn with uid = 255.
rescanning insn with uid = 258.
deleting insn with uid = 258.
rescanning insn with uid = 260.
deleting insn with uid = 260.
rescanning insn with uid = 264.
deleting insn with uid = 264.
rescanning insn with uid = 265.
deleting insn with uid = 265.
      Changing RTL for loop 1 (header bb27)
  6 vs parent 6:      Creating newreg=270 from oldreg=154
  5 vs parent 5:      Creating newreg=271 from oldreg=155
  11 vs parent 11:      Creating newreg=272 from oldreg=264
  9 vs parent 9:      Creating newreg=273 from oldreg=265
rescanning insn with uid = 236.
deleting insn with uid = 236.
rescanning insn with uid = 222.
deleting insn with uid = 222.
rescanning insn with uid = 221.
deleting insn with uid = 221.
rescanning insn with uid = 144.
deleting insn with uid = 144.
rescanning insn with uid = 145.
deleting insn with uid = 145.
rescanning insn with uid = 129.
deleting insn with uid = 129.
rescanning insn with uid = 130.
deleting insn with uid = 130.
rescanning insn with uid = 343.
deleting insn with uid = 343.
rescanning insn with uid = 344.
deleting insn with uid = 344.
rescanning insn with uid = 114.
deleting insn with uid = 114.
rescanning insn with uid = 115.
deleting insn with uid = 115.
rescanning insn with uid = 104.
deleting insn with uid = 104.
rescanning insn with uid = 106.
deleting insn with uid = 106.
rescanning insn with uid = 105.
deleting insn with uid = 105.
rescanning insn with uid = 84.
deleting insn with uid = 84.
rescanning insn with uid = 86.
deleting insn with uid = 86.
rescanning insn with uid = 69.
deleting insn with uid = 69.
      Changing RTL for loop 3 (header bb10)
  6 vs parent 6:      Creating newreg=274 from oldreg=270
  5 vs parent 5:      Creating newreg=275 from oldreg=271
  11 vs parent 11:      Creating newreg=276 from oldreg=272
  9 vs parent 9:      Creating newreg=277 from oldreg=273
scanning new insn with uid = 350.
scanning new insn with uid = 351.
scanning new insn with uid = 352.
scanning new insn with uid = 353.
scanning new insn with uid = 354.
scanning new insn with uid = 355.
scanning new insn with uid = 356.
scanning new insn with uid = 357.
    Adding cp8:a20r154-a34r270
    Adding range [102..102] to allocno a20r154
    Adding cp9:a21r155-a35r271
    Adding range [102..104] to allocno a21r155
    Adding cp10:a16r264-a44r272
    Adding range [102..106] to allocno a16r264
    Adding cp11:a18r265-a45r273
    Adding range [102..108] to allocno a18r265
    Adding range [103..109] to allocno a34r270
    Adding range [105..109] to allocno a35r271
    Adding range [107..109] to allocno a44r272
    Adding range [109..109] to allocno a45r273
    Adding range [102..109] to live through  allocno a9r252
    Adding range [102..109] to live through  allocno a13r254
    Adding range [102..109] to live through  allocno a12r255
    Adding range [102..109] to live through  allocno a10r256
    Adding range [102..109] to live through  allocno a11r257
    Adding range [102..109] to live through  allocno a7r258
    Adding range [102..109] to live through  allocno a6r259
    Adding range [102..109] to live through  allocno a8r260
    Adding cp12:a34r270-a66r274
    Adding range [111..111] to allocno a34r270
    Adding cp13:a35r271-a67r275
    Adding range [111..113] to allocno a35r271
    Adding cp14:a44r272-a76r276
    Adding range [111..115] to allocno a44r272
    Adding cp15:a45r273-a77r277
    Adding range [111..117] to allocno a45r273
    Adding range [112..118] to allocno a66r274
    Adding range [114..118] to allocno a67r275
    Adding range [116..118] to allocno a76r276
    Adding range [118..118] to allocno a77r277
    Adding range [111..118] to live through  allocno a36r252
    Adding range [111..118] to live through  allocno a37r254
    Adding range [111..118] to live through  allocno a38r255
    Adding range [111..118] to live through  allocno a39r256
    Adding range [111..118] to live through  allocno a40r257
    Adding range [111..118] to live through  allocno a41r258
    Adding range [111..118] to live through  allocno a42r259
    Adding range [111..118] to live through  allocno a43r260
    Adding cp16:a34r270-a66r274
    Adding range [120..120] to allocno a66r274
    Adding cp17:a35r271-a67r275
    Adding range [120..122] to allocno a67r275
    Adding cp18:a44r272-a76r276
    Adding range [120..124] to allocno a76r276
    Adding cp19:a45r273-a77r277
    Adding range [120..126] to allocno a77r277
    Adding range [121..127] to allocno a34r270
    Adding range [123..127] to allocno a35r271
    Adding range [125..127] to allocno a44r272
    Adding range [127..127] to allocno a45r273
    Adding range [120..127] to live through  allocno a36r252
    Adding range [120..127] to live through  allocno a37r254
    Adding range [120..127] to live through  allocno a38r255
    Adding range [120..127] to live through  allocno a39r256
    Adding range [120..127] to live through  allocno a40r257
    Adding range [120..127] to live through  allocno a41r258
    Adding range [120..127] to live through  allocno a42r259
    Adding range [120..127] to live through  allocno a43r260
    Adding cp20:a1r134-a26r267
    Adding range [129..129] to allocno a1r134
    Adding cp21:a2r135-a27r268
    Adding range [129..131] to allocno a2r135
    Adding cp22:a3r248-a28r269
    Adding range [129..133] to allocno a3r248
    Adding range [130..134] to allocno a26r267
    Adding range [132..134] to allocno a27r268
    Adding range [134..134] to allocno a28r269
    Adding range [129..134] to live through  allocno a5r249
    Adding range [129..134] to live through  allocno a4r250
scanning new insn with uid = 346.
scanning new insn with uid = 347.
scanning new insn with uid = 348.
scanning new insn with uid = 349.
scanning new insn with uid = 358.
scanning new insn with uid = 359.
scanning new insn with uid = 360.
    New r267: setting preferred GENERAL_REGS, alternative NO_REGS
    New r268: setting preferred GENERAL_REGS, alternative NO_REGS
    New r269: setting preferred GENERAL_REGS, alternative NO_REGS
    New r270: setting preferred GENERAL_REGS, alternative NO_REGS
    New r271: setting preferred GENERAL_REGS, alternative NO_REGS
    New r272: setting preferred GENERAL_REGS, alternative NO_REGS
    New r273: setting preferred GENERAL_REGS, alternative NO_REGS
    New r274: setting preferred GENERAL_REGS, alternative NO_REGS
    New r275: setting preferred GENERAL_REGS, alternative NO_REGS
    New r276: setting preferred GENERAL_REGS, alternative NO_REGS
    New r277: setting preferred GENERAL_REGS, alternative NO_REGS
Flattening IR
      Moving ranges of a75r260 to a43r260:  [95..100]
      Moving ranges of a43r260 to a8r260:  [120..127] [111..118] [46..100]
      Moving ranges of a74r259 to a42r259:  [95..100]
      Moving ranges of a42r259 to a6r259:  [120..127] [111..118] [46..100]
      Moving ranges of a73r258 to a41r258:  [95..100]
      Moving ranges of a41r258 to a7r258:  [120..127] [111..118] [46..100]
      Moving ranges of a72r257 to a40r257:  [95..100]
      Moving ranges of a40r257 to a11r257:  [120..127] [111..118] [46..100]
      Moving ranges of a71r256 to a39r256:  [95..100]
      Moving ranges of a39r256 to a10r256:  [120..127] [111..118] [46..100]
      Moving ranges of a70r255 to a38r255:  [95..100]
      Moving ranges of a38r255 to a12r255:  [120..127] [111..118] [46..100]
      Moving ranges of a69r254 to a37r254:  [95..100]
      Moving ranges of a37r254 to a13r254:  [120..127] [111..118] [46..100]
      Moving ranges of a68r252 to a36r252:  [95..100]
      Moving ranges of a36r252 to a9r252:  [120..127] [111..118] [46..100]
      Moving ranges of a30r250 to a4r250:  [38..45]
      Moving ranges of a29r249 to a5r249:  [38..45]
      Moving ranges of a31r239 to a0r239:  [38..39]
      Remove cp4:c97r141-c98r190
      Remove cp5:c99r176-c100r174
      Remove cp6:c102r186-c103r183
      Remove cp7:c104r186-c105r183
      Remove a29r249
      Remove a30r250
      Remove a31r239
      Remove a36r252
      Remove a37r254
      Remove a38r255
      Remove a39r256
      Remove a40r257
      Remove a41r258
      Remove a42r259
      Remove a43r260
      Remove a68r252
      Remove a69r254
      Remove a70r255
      Remove a71r256
      Remove a72r257
      Remove a73r258
      Remove a74r259
      Remove a75r260
      Remove a80r139
      Remove a81r138
      Remove a82r235
      Remove a83r231
      Remove a84r226
      Remove a85r145
      Remove a86r148
      Remove a87r220
      Remove a88r218
      Remove a89r214
      Remove a90r149
      Remove a91r206
      Remove a92r202
      Remove a93r146
      Remove a94r198
      Remove a95r193
      Remove a96r151
      Remove a97r141
      Remove a98r190
      Remove a99r176
      Remove a100r174
      Remove a101r175
      Remove a102r186
      Remove a103r183
      Remove a104r186
      Remove a105r183
Compressing live ranges: from 135 to 131 - 97%
Ranges after the compression:
 a0(r239): [38..39] [0..1]
 a1(r134): [125..125] [2..3]
 a2(r135): [125..127] [2..4]
 a3(r248): [125..129] [2..7]
 a4(r250): [125..130] [38..45] [2..5]
 a5(r249): [125..130] [38..45] [2..6]
 a6(r259): [117..124] [109..116] [101..108] [46..100] [8..9]
 a7(r258): [117..124] [109..116] [101..108] [46..100] [8..10]
 a8(r260): [117..124] [109..116] [101..108] [46..100] [8..11]
 a9(r252): [117..124] [109..116] [101..108] [46..100] [8..23]
 a10(r256): [117..124] [109..116] [101..108] [46..100] [8..12]
 a11(r257): [117..124] [109..116] [101..108] [46..100] [8..13]
 a12(r255): [117..124] [109..116] [101..108] [46..100] [8..14]
 a13(r254): [117..124] [109..116] [101..108] [46..100] [8..15]
 a14(r157): [26..34] [16..25]
 a15(r168): [16..19]
 a16(r264): [101..105] [8..17]
 a17(r266): [18..22]
 a18(r265): [101..107] [8..20]
 a19(r170): [21..24]
 a20(r154): [101..101] [26..36] [8..25]
 a21(r155): [101..103] [26..35] [8..25]
 a22(r142): [27..32]
 a23(r165): [28..29]
 a24(r163): [30..31]
 a25(r156): [33..37]
 a26(r267): [126..130] [38..45]
 a27(r268): [128..130] [41..45] [38..40]
 a28(r269): [130..130] [38..45]
 a32(r139): [42..44]
 a33(r138): [42..43]
 a34(r270): [118..124] [109..109] [102..108] [46..94]
 a35(r271): [120..124] [109..111] [104..108] [51..94] [46..49]
 a44(r272): [122..124] [109..113] [106..108] [46..94]
 a45(r273): [124..124] [109..115] [108..108] [46..94]
 a46(r235): [47..50]
 a47(r231): [48..52]
 a48(r226): [53..55]
 a49(r145): [85..92] [76..79] [56..74] [54..54]
 a50(r148): [54..57]
 a51(r220): [58..59]
 a52(r218): [60..61]
 a53(r214): [62..63]
 a54(r149): [64..67]
 a55(r206): [65..66]
 a56(r202): [68..69]
 a57(r146): [70..73]
 a58(r198): [71..72]
 a59(r193): [75..77]
 a60(r151): [91..93] [78..79]
 a61(r141): [80..81]
 a62(r190): [82..83]
 a63(r176): [84..86]
 a64(r174): [89..89] [87..88]
 a65(r175): [88..90]
 a66(r274): [117..117] [110..116] [95..100]
 a67(r275): [117..119] [112..116] [95..100]
 a76(r276): [117..121] [114..116] [95..100]
 a77(r277): [117..123] [116..116] [95..100]
 a78(r186): [96..97]
 a79(r183): [98..99]
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 47 count 76 (  2.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 47 count 88 (  2.8)
+++Costs: overall 108000, reg -12000, mem 120000, ld 0, st 0, move 30000
+++       move loops 0, new jumps 2
insn=9, live_throughout: 0, 1, 13, dead_or_set: 156
insn=2, live_throughout: 1, 13, 156, dead_or_set: 0, 154
insn=3, live_throughout: 13, 154, 156, dead_or_set: 1, 155
insn=11, live_throughout: 13, 154, 155, 156, dead_or_set: 1
insn=14, live_throughout: 1, 13, 154, 155, 156, dead_or_set: 157
insn=10, live_throughout: 1, 13, 154, 155, 156, 157, dead_or_set: 0
insn=12, live_throughout: 13, 154, 155, 156, 157, dead_or_set: 0, 1, 14
insn=20, live_throughout: 0, 13, 154, 155, 156, 157, dead_or_set: 1
insn=15, live_throughout: 1, 13, 154, 155, 156, 157, dead_or_set: 0
insn=19, live_throughout: 1, 13, 154, 155, 156, 157, dead_or_set: 0
insn=21, live_throughout: 13, 154, 155, 156, 157, dead_or_set: 0, 1, 14
insn=29, live_throughout: 0, 13, 154, 155, 156, 157, dead_or_set: 1
insn=24, live_throughout: 1, 13, 154, 155, 156, 157, dead_or_set: 0
insn=28, live_throughout: 1, 13, 154, 155, 157, dead_or_set: 0, 156
insn=30, live_throughout: 13, 154, 155, 157, dead_or_set: 0, 1, 14
insn=31, live_throughout: 13, 154, 155, 157, dead_or_set: 0, 142
insn=36, live_throughout: 13, 142, 154, 155, 157, dead_or_set: 163
insn=34, live_throughout: 13, 142, 154, 155, 157, 163, dead_or_set: 
insn=37, live_throughout: 13, 142, 154, 155, 157, dead_or_set: 163
insn=38, live_throughout: 13, 142, 154, 155, 157, dead_or_set: 
insn=41, live_throughout: 13, 142, 154, 155, 157, dead_or_set: 165
insn=42, live_throughout: 13, 142, 154, 155, 157, dead_or_set: 165
insn=43, live_throughout: 13, 142, 154, 155, 157, dead_or_set: 
insn=45, live_throughout: 13, 154, 155, 157, dead_or_set: 142
insn=46, live_throughout: 13, 154, 155, 157, dead_or_set: 
insn=47, live_throughout: 13, dead_or_set: 
insn=50, live_throughout: 13, dead_or_set: 0
insn=51, live_throughout: 13, dead_or_set: 0, 14
insn=53, live_throughout: 13, 154, 155, 157, dead_or_set: 
insn=59, live_throughout: 13, 154, 155, 157, dead_or_set: 170
insn=229, live_throughout: 13, 154, 155, 157, 170, dead_or_set: 252
insn=340, live_throughout: 13, 154, 155, 157, 170, 252, dead_or_set: 266
insn=60, live_throughout: 13, 154, 155, 157, 252, 266, dead_or_set: 170
insn=342, live_throughout: 13, 154, 155, 157, 252, 266, dead_or_set: 265
insn=56, live_throughout: 13, 154, 155, 157, 252, 265, 266, dead_or_set: 168
insn=63, live_throughout: 13, 154, 155, 157, 168, 252, 265, 266, dead_or_set: 
insn=341, live_throughout: 13, 154, 155, 157, 168, 252, 265, dead_or_set: 264, 266
insn=57, live_throughout: 13, 154, 155, 252, 264, 265, dead_or_set: 157, 168
insn=128, live_throughout: 13, 154, 155, 252, 264, 265, dead_or_set: 254
insn=215, live_throughout: 13, 154, 155, 252, 254, 264, 265, dead_or_set: 255
insn=175, live_throughout: 13, 154, 155, 252, 254, 255, 264, 265, dead_or_set: 257
insn=211, live_throughout: 13, 154, 155, 252, 254, 255, 257, 264, 265, dead_or_set: 256
insn=307, live_throughout: 13, 154, 155, 252, 254, 255, 256, 257, 264, 265, dead_or_set: 260
insn=142, live_throughout: 13, 154, 155, 252, 254, 255, 256, 257, 260, 264, 265, dead_or_set: 258
insn=159, live_throughout: 13, 154, 155, 252, 254, 255, 256, 257, 258, 260, 264, 265, dead_or_set: 259
insn=346, live_throughout: 13, 155, 252, 254, 255, 256, 257, 258, 259, 260, 264, 265, dead_or_set: 154, 270
insn=347, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 264, 265, 270, dead_or_set: 155, 271
insn=348, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 265, 270, 271, dead_or_set: 264, 272
insn=349, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, dead_or_set: 265, 273
insn=326, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=225, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=69, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 151
insn=68, live_throughout: 13, 151, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 145
insn=70, live_throughout: 13, 145, 151, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=71, live_throughout: 13, 145, 151, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=73, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 175
insn=74, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 174, 175
insn=77, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 174, 176
insn=78, live_throughout: 13, 145, 176, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=82, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 176
insn=84, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=86, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=350, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 271, 272, 273, dead_or_set: 270, 274
insn=351, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 272, 273, 274, dead_or_set: 271, 275
insn=352, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 273, 274, 275, dead_or_set: 272, 276
insn=353, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 274, 275, 276, dead_or_set: 273, 277
insn=98, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 274, 275, 276, 277, dead_or_set: 
insn=90, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 274, 275, 276, 277, dead_or_set: 183
insn=93, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 274, 275, 276, 277, dead_or_set: 183, 186
insn=96, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 274, 275, 276, 277, dead_or_set: 0, 14, 186
insn=99, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 274, 275, 276, 277, dead_or_set: 0
insn=100, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 274, 275, 276, 277, dead_or_set: 
insn=354, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 275, 276, 277, dead_or_set: 270, 274
insn=355, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 276, 277, dead_or_set: 271, 275
insn=356, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 277, dead_or_set: 272, 276
insn=357, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, dead_or_set: 273, 277
insn=103, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 190
insn=104, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 141, 190
insn=106, live_throughout: 13, 141, 252, 254, 255, 256, 257, 258, 259, 260, 270, 272, 273, dead_or_set: 271
insn=105, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 271, 272, 273, dead_or_set: 141, 270
insn=328, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=109, live_throughout: 13, 145, 151, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=111, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 151
insn=112, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=117, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 193
insn=114, live_throughout: 13, 145, 193, 252, 254, 255, 256, 257, 258, 259, 260, 271, 272, 273, dead_or_set: 270
insn=118, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 145, 193
insn=119, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 193
insn=115, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 272, 273, dead_or_set: 271
insn=330, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=122, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=129, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 0
insn=130, live_throughout: 0, 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 1
insn=131, live_throughout: 0, 1, 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 2
insn=343, live_throughout: 0, 1, 2, 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=344, live_throughout: 0, 1, 2, 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=132, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 0, 1, 2, 14
insn=134, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 0, 146
insn=135, live_throughout: 13, 145, 146, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=138, live_throughout: 13, 145, 146, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 198
insn=141, live_throughout: 13, 145, 146, 198, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=139, live_throughout: 13, 145, 146, 198, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=146, live_throughout: 13, 145, 146, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 2, 198
insn=143, live_throughout: 2, 13, 145, 146, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=144, live_throughout: 2, 13, 145, 146, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 0
insn=145, live_throughout: 0, 2, 13, 145, 146, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 1
insn=147, live_throughout: 0, 1, 2, 13, 145, 146, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 3
insn=148, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 0, 1, 2, 3, 14, 146
insn=150, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 0
insn=151, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=154, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 202
insn=155, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 202
insn=156, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=160, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=332, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=163, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=165, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 149
insn=166, live_throughout: 13, 145, 149, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=167, live_throughout: 13, 145, 149, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=170, live_throughout: 13, 145, 149, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 206
insn=171, live_throughout: 13, 145, 149, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 206
insn=172, live_throughout: 13, 145, 149, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=180, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 3, 149
insn=177, live_throughout: 3, 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 0
insn=178, live_throughout: 0, 3, 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 1
insn=179, live_throughout: 0, 1, 3, 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 2
insn=181, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 0, 1, 2, 3, 14
insn=185, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=334, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=188, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=191, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 214
insn=192, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 214
insn=193, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=197, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=198, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=201, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 218
insn=202, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 218
insn=203, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=206, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 220
insn=207, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 220
insn=208, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=212, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=213, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=216, live_throughout: 13, 145, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 148
insn=222, live_throughout: 13, 145, 148, 252, 254, 255, 256, 257, 258, 259, 260, 270, 272, 273, dead_or_set: 271
insn=221, live_throughout: 13, 145, 148, 252, 254, 255, 256, 257, 258, 259, 260, 271, 272, 273, dead_or_set: 270
insn=219, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 145, 148, 226
insn=220, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 226
insn=325, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=230, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 231
insn=236, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 231, 235
insn=237, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 235
insn=238, live_throughout: 13, 252, 254, 255, 256, 257, 258, 259, 260, 270, 271, 272, 273, dead_or_set: 
insn=324, live_throughout: 13, dead_or_set: 248
insn=251, live_throughout: 13, 248, dead_or_set: 249
insn=253, live_throughout: 13, 248, 249, dead_or_set: 250
insn=241, live_throughout: 13, 249, 250, dead_or_set: 135, 248
insn=242, live_throughout: 13, 135, 248, 249, 250, dead_or_set: 134
insn=358, live_throughout: 13, 135, 248, 249, 250, dead_or_set: 134, 267
insn=359, live_throughout: 13, 248, 249, 250, 267, dead_or_set: 135, 268
insn=360, live_throughout: 13, 249, 250, 267, 268, dead_or_set: 248, 269
insn=336, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 
insn=268, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 
insn=247, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 139
insn=248, live_throughout: 13, 139, 249, 250, 267, 268, 269, dead_or_set: 138
insn=249, live_throughout: 13, 138, 139, 249, 250, 267, 268, 269, dead_or_set: 
insn=250, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 138, 139
insn=252, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 
insn=254, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 
insn=256, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 1
insn=255, live_throughout: 1, 13, 249, 250, 267, 268, 269, dead_or_set: 0
insn=257, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 0, 1, 14
insn=258, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 0
insn=259, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 0, 14
insn=260, live_throughout: 13, 249, 250, 267, 269, dead_or_set: 0, 268
insn=261, live_throughout: 13, 249, 250, 267, 269, dead_or_set: 0, 14
insn=264, live_throughout: 13, 249, 250, 267, 269, dead_or_set: 268
insn=265, live_throughout: 13, 249, 250, 268, 269, dead_or_set: 267
insn=266, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 
insn=271, live_throughout: 13, 249, 250, 267, 268, 269, dead_or_set: 
insn=303, live_throughout: 13, 24, 249, 250, 267, 268, 269, dead_or_set: 239
insn=272, live_throughout: 13, 239, 249, 250, 267, 268, 269, dead_or_set: 
insn=275, live_throughout: 13, 239, dead_or_set: 0
insn=276, live_throughout: 13, 239, dead_or_set: 0, 14
insn=278, live_throughout: 13, 239, dead_or_set: 0
insn=279, live_throughout: 13, 239, dead_or_set: 0, 14
insn=281, live_throughout: 13, 239, dead_or_set: 0
insn=282, live_throughout: 13, 239, dead_or_set: 0, 14
insn=289, live_throughout: 13, 14, dead_or_set: 0, 239
insn=295, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 148: (insn_list:REG_DEP_TRUE 216 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 14 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 36 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 41 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 56 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 59 (nil))
init_insns for 175: (insn_list:REG_DEP_TRUE 73 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 90 (nil))
init_insns for 190: (insn_list:REG_DEP_TRUE 103 (nil))
init_insns for 198: (insn_list:REG_DEP_TRUE 138 (nil))
init_insns for 202: (insn_list:REG_DEP_TRUE 154 (nil))
init_insns for 206: (insn_list:REG_DEP_TRUE 170 (nil))
init_insns for 214: (insn_list:REG_DEP_TRUE 191 (nil))
init_insns for 218: (insn_list:REG_DEP_TRUE 201 (nil))
init_insns for 220: (insn_list:REG_DEP_TRUE 206 (nil))
init_insns for 226: (insn_list:REG_DEP_TRUE 220 (nil))
init_insns for 231: (insn_list:REG_DEP_TRUE 230 (nil))
init_insns for 239: (insn_list:REG_DEP_TRUE 303 (nil))
init_insns for 249: (insn_list:REG_DEP_TRUE 251 (nil))
init_insns for 250: (insn_list:REG_DEP_TRUE 253 (nil))
init_insns for 252: (insn_list:REG_DEP_TRUE 229 (nil))
init_insns for 254: (insn_list:REG_DEP_TRUE 128 (nil))
init_insns for 255: (insn_list:REG_DEP_TRUE 215 (nil))
init_insns for 256: (insn_list:REG_DEP_TRUE 211 (nil))
init_insns for 257: (insn_list:REG_DEP_TRUE 175 (nil))
init_insns for 258: (insn_list:REG_DEP_TRUE 142 (nil))
init_insns for 259: (insn_list:REG_DEP_TRUE 159 (nil))
init_insns for 260: (insn_list:REG_DEP_TRUE 307 (nil))
      Slot 1 (freq,size): a49r145(4000,8)
      Assigning 145(freq=4000) a new slot 0
changing reg in insn 242
changing reg in insn 358
changing reg in insn 241
changing reg in insn 359
changing reg in insn 242
changing reg in insn 248
changing reg in insn 250
changing reg in insn 249
changing reg in insn 247
changing reg in insn 250
changing reg in insn 249
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 31
changing reg in insn 45
changing reg in insn 34
changing reg in insn 134
changing reg in insn 148
changing reg in insn 216
changing reg in insn 221
changing reg in insn 222
changing reg in insn 219
changing reg in insn 165
changing reg in insn 180
changing reg in insn 166
changing reg in insn 69
changing reg in insn 111
changing reg in insn 70
changing reg in insn 2
changing reg in insn 346
changing reg in insn 3
changing reg in insn 347
changing reg in insn 9
changing reg in insn 28
changing reg in insn 19
changing reg in insn 10
changing reg in insn 14
changing reg in insn 24
changing reg in insn 15
changing reg in insn 229
changing reg in insn 63
changing reg in insn 60
changing reg in insn 57
changing reg in insn 41
changing reg in insn 36
changing reg in insn 34
changing reg in insn 41
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 56
changing reg in insn 63
changing reg in insn 57
changing reg in insn 59
changing reg in insn 340
changing reg in insn 60
changing reg in insn 74
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 82
changing reg in insn 90
changing reg in insn 93
changing reg in insn 93
changing reg in insn 96
changing reg in insn 103
changing reg in insn 104
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 138
changing reg in insn 146
changing reg in insn 139
changing reg in insn 154
changing reg in insn 155
changing reg in insn 170
changing reg in insn 171
changing reg in insn 191
changing reg in insn 192
changing reg in insn 201
changing reg in insn 202
changing reg in insn 206
changing reg in insn 207
changing reg in insn 219
changing reg in insn 220
changing reg in insn 230
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 303
changing reg in insn 289
changing reg in insn 281
changing reg in insn 278
changing reg in insn 275
changing reg in insn 324
changing reg in insn 241
changing reg in insn 360
changing reg in insn 241
changing reg in insn 241
changing reg in insn 251
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 229
changing reg in insn 86
changing reg in insn 84
changing reg in insn 344
changing reg in insn 343
changing reg in insn 93
changing reg in insn 307
changing reg in insn 175
changing reg in insn 230
changing reg in insn 220
changing reg in insn 212
changing reg in insn 206
changing reg in insn 201
changing reg in insn 197
changing reg in insn 191
changing reg in insn 185
changing reg in insn 170
changing reg in insn 160
changing reg in insn 154
changing reg in insn 119
changing reg in insn 90
changing reg in insn 82
changing reg in insn 68
changing reg in insn 219
changing reg in insn 230
changing reg in insn 206
changing reg in insn 201
changing reg in insn 191
changing reg in insn 170
changing reg in insn 154
changing reg in insn 90
changing reg in insn 215
changing reg in insn 216
changing reg in insn 141
changing reg in insn 216
changing reg in insn 211
changing reg in insn 212
changing reg in insn 197
changing reg in insn 307
changing reg in insn 103
changing reg in insn 103
changing reg in insn 341
changing reg in insn 348
changing reg in insn 342
changing reg in insn 349
changing reg in insn 340
changing reg in insn 358
changing reg in insn 265
changing reg in insn 265
changing reg in insn 264
changing reg in insn 359
changing reg in insn 264
changing reg in insn 260
changing reg in insn 258
changing reg in insn 255
changing reg in insn 256
changing reg in insn 254
changing reg in insn 252
changing reg in insn 248
changing reg in insn 247
changing reg in insn 271
changing reg in insn 271
changing reg in insn 360
changing reg in insn 271
changing reg in insn 346
changing reg in insn 354
changing reg in insn 105
changing reg in insn 114
changing reg in insn 221
changing reg in insn 350
changing reg in insn 69
changing reg in insn 86
changing reg in insn 105
changing reg in insn 114
changing reg in insn 129
changing reg in insn 144
changing reg in insn 221
changing reg in insn 347
changing reg in insn 355
changing reg in insn 106
changing reg in insn 115
changing reg in insn 222
changing reg in insn 351
changing reg in insn 84
changing reg in insn 106
changing reg in insn 104
changing reg in insn 115
changing reg in insn 130
changing reg in insn 145
changing reg in insn 222
changing reg in insn 236
changing reg in insn 348
changing reg in insn 356
changing reg in insn 352
changing reg in insn 343
changing reg in insn 349
changing reg in insn 357
changing reg in insn 353
changing reg in insn 344
changing reg in insn 350
changing reg in insn 354
changing reg in insn 351
changing reg in insn 355
changing reg in insn 352
changing reg in insn 356
changing reg in insn 353
changing reg in insn 357
Spilling for insn 15.
Spilling for insn 24.
Spilling for insn 34.
Spilling for insn 60.
Spilling for insn 63.
Spilling for insn 57.
Spilling for insn 68.
Using reg 0 for reload 0
Spilling for insn 74.
Spilling for insn 82.
Spilling for insn 84.
Spilling for insn 86.
Spilling for insn 118.
Using reg 0 for reload 0
Spilling for insn 119.
Spilling for insn 343.
Spilling for insn 344.
Spilling for insn 141.
Spilling for insn 139.
Spilling for insn 143.
Using reg 3 for reload 1
Spilling for insn 160.
Using reg 3 for reload 1
Spilling for insn 185.
Using reg 3 for reload 1
Spilling for insn 197.
Spilling for insn 212.
Spilling for insn 219.
Using reg 0 for reload 0
Spilling for insn 220.
Spilling for insn 249.
Spilling for insn 250.
Spilling for insn 252.
Spilling for insn 254.
      Spill 226(a48), cost=20000
      Spilled regs 226
        Try assign 145(a49), cost=40000
        Try assign 259(a6), cost=20000
        Try assign 258(a7), cost=20000
        Try assign 257(a11), cost=20000
        Try assign 254(a13), cost=20000
changing reg in insn 219
changing reg in insn 220
 Register 226 now on stack.

Spilling for insn 15.
Spilling for insn 24.
Spilling for insn 34.
Spilling for insn 60.
Spilling for insn 63.
Spilling for insn 57.
Spilling for insn 68.
Using reg 0 for reload 0
Spilling for insn 74.
Spilling for insn 82.
Spilling for insn 84.
Spilling for insn 86.
Spilling for insn 118.
Using reg 0 for reload 0
Spilling for insn 119.
Spilling for insn 343.
Spilling for insn 344.
Spilling for insn 141.
Spilling for insn 139.
Spilling for insn 143.
Using reg 3 for reload 1
Spilling for insn 160.
Using reg 3 for reload 1
Spilling for insn 185.
Using reg 3 for reload 1
Spilling for insn 197.
Spilling for insn 212.
Spilling for insn 219.
Using reg 0 for reload 0
Using reg 2 for reload 1
Spilling for insn 220.
Using reg 2 for reload 1
Spilling for insn 249.
Spilling for insn 250.
Spilling for insn 252.
Spilling for insn 254.
      Spill 148(a50), cost=30000: reassign to 12
changing reg in insn 216
changing reg in insn 219
changing reg in insn 222
changing reg in insn 221
 Register 148 now in 12.

Spilling for insn 15.
Spilling for insn 24.
Spilling for insn 34.
Spilling for insn 60.
Spilling for insn 63.
Spilling for insn 57.
Spilling for insn 68.
Using reg 0 for reload 0
Spilling for insn 74.
Spilling for insn 82.
Spilling for insn 84.
Spilling for insn 86.
Spilling for insn 118.
Using reg 0 for reload 0
Spilling for insn 119.
Spilling for insn 343.
Spilling for insn 344.
Spilling for insn 141.
Spilling for insn 139.
Spilling for insn 143.
Using reg 3 for reload 1
Spilling for insn 160.
Using reg 3 for reload 1
Spilling for insn 185.
Using reg 3 for reload 1
Spilling for insn 197.
Spilling for insn 212.
Spilling for insn 219.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 220.
Using reg 2 for reload 1
Spilling for insn 249.
Spilling for insn 250.
Spilling for insn 252.
Spilling for insn 254.
deleting insn with uid = 220.
deleting insn with uid = 128.
deleting insn with uid = 175.
deleting insn with uid = 142.
deleting insn with uid = 159.

Reloads for insn # 15
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 4 [0x4])) [0 header_buf+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 4 [0x4])) [0 header_buf+0 S4 A32])

Reloads for insn # 24
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])

Reloads for insn # 34
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 116 [0x74])) [0 name_buf+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 116 [0x74])) [0 name_buf+0 S4 A32])

Reloads for insn # 60
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])

Reloads for insn # 63
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 7 r7 [157]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 7 r7 [157]) [0 message+0 S4 A32])

Reloads for insn # 57
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 68
Reload 0: reload_out (DI) = (reg/v:DI 145 [ saved_offset ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 145 [ saved_offset ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 74
Reload 0: reload_in (DI) = (reg/v:DI 145 [ saved_offset ])
	reload_out (DI) = (reg:DI 2 r2 [174])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 145 [ saved_offset ])
	reload_out_reg: (reg:DI 2 r2 [174])
	reload_reg_rtx: (reg:DI 2 r2 [174])

Reloads for insn # 82
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 84
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 86
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])

Reloads for insn # 118
Reload 0: reload_in (DI) = (reg/v:DI 145 [ saved_offset ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:DI 145 [ saved_offset ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 119
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])

Reloads for insn # 343
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 24 [0x18])) [0 this_header+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 24 [0x18])) [0 this_header+0 S4 A64])

Reloads for insn # 344
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 28 [0x1c])) [0 this_header+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                                                        (const_int 28 [0x1c])) [0 this_header+4 S4 A32])

Reloads for insn # 141
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 139
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 143
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
Reload 1: reload_in (SI) = (symbol_ref:SI ("error") [flags 0x3] <function_decl 0x11487300 error>)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 258)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 160
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
Reload 1: reload_in (SI) = (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x115a92d0>)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 259)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 185
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
Reload 1: reload_in (SI) = (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                                                        (const_int 120 [0x78])))
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 257)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 197
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])

Reloads for insn # 212
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])

Reloads for insn # 219
Reload 0: reload_out (DI) = (reg:DI 226)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 226)
	reload_reg_rtx: (reg:DI 0 r0)
Reload 1: reload_in (DI) = (reg/v:DI 145 [ saved_offset ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/v:DI 145 [ saved_offset ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 249
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:138 D.26386 ] [138])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:138 D.26386 ] [138])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])

Reloads for insn # 250
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:139 D.26385 ] [139]) [0 <variable>.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:139 D.26385 ] [139]) [0 <variable>.next+0 S4 A32])

Reloads for insn # 252
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135]) [0 <variable>.list.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135]) [0 <variable>.list.next+0 S4 A32])

Reloads for insn # 254
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
deleting insn with uid = 31.
deleting insn with uid = 346.
deleting insn with uid = 347.
deleting insn with uid = 348.
deleting insn with uid = 349.
deleting insn with uid = 350.
deleting insn with uid = 351.
deleting insn with uid = 352.
deleting insn with uid = 353.
deleting insn with uid = 354.
deleting insn with uid = 355.
deleting insn with uid = 356.
deleting insn with uid = 357.
deleting insn with uid = 146.
deleting insn with uid = 180.
deleting insn with uid = 358.
deleting insn with uid = 359.
deleting insn with uid = 360.
+++Overall after reload 128000


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 51.
rescanning insn with uid = 96.
deleting insn with uid = 96.
verify found no changes in insn with uid = 132.
rescanning insn with uid = 148.
deleting insn with uid = 148.
verify found no changes in insn with uid = 181.
verify found no changes in insn with uid = 257.
verify found no changes in insn with uid = 259.
verify found no changes in insn with uid = 261.
verify found no changes in insn with uid = 276.
verify found no changes in insn with uid = 279.
verify found no changes in insn with uid = 282.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 47 count 77 (  2.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 47 count 77 (  2.4)


unpack_to_rootfs

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={34d,29u} r1={28d,14u} r2={29d,18u} r3={38d,30u} r4={4d,34u,9d} r5={6d,10u} r6={6d,10u} r7={3d,12u,3d} r8={2d,3u} r9={1d,1u} r10={2d,5u,1d} r11={1d,1u} r12={17d,4u} r13={1d,54u,3d} r14={15d,1u} r15={14d} r16={14d} r17={14d} r18={14d} r19={14d} r20={14d} r21={14d} r22={14d} r23={14d} r24={34d,17u} r27={14d} r28={14d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={14d} r38={14d} r39={14d} r40={14d} r41={14d} r42={14d} r43={14d} r44={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} r77={14d} r78={14d} r79={14d} r80={14d} r81={14d} r82={14d} r83={14d} r84={14d} r85={14d} r86={14d} r87={14d} r88={14d} r89={14d} r90={14d} r91={14d} r92={14d} r93={14d} r94={14d} r95={14d} r96={14d} r97={14d} r98={14d} r99={14d} r100={14d} r101={14d} r102={14d} r103={14d} r104={14d} r105={14d} r106={14d} r107={14d} r108={14d} r109={14d} r110={14d} r111={14d} r112={14d} r113={14d} r114={14d} r115={14d} r116={14d} r117={14d} r118={14d} r119={14d} r120={14d} r121={14d} r122={14d} r123={14d} r124={14d} r125={14d} r126={14d} r127={14d} 
;;    total ref usage 2020{1761d,243u,16e} in 162{148 regular + 14 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 4 13 2 ("found") NOTE_INSN_DELETED_LABEL 66)

(note 13 7 16 2 NOTE_INSN_DELETED)

(note 16 13 22 2 ("found") NOTE_INSN_DELETED_LABEL 67)

(note 22 16 25 2 NOTE_INSN_DELETED)

(note 25 22 9 2 ("found") NOTE_INSN_DELETED_LABEL 68)

(insn 9 25 2 2 include/linux/slab_def.h:122 (set (reg/f:SI 4 r4 [156])
        (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
        (nil)))

(insn 2 9 3 2 init/initramfs.c:415 (set (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
        (reg:SI 0 r0 [ buf ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 11 2 init/initramfs.c:415 (set (reg/v:SI 5 r5 [orig:155 len ] [155])
        (reg:SI 1 r1 [ len ])) 167 {*arm_movsi_insn} (nil))

(insn 11 3 14 2 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn 14 11 10 2 init/initramfs.c:421 (set (reg/f:SI 7 r7 [157])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 10 14 12 2 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 28 [0x1c])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                    (const_int 28 [0x1c]))) [0 <variable>.cs_cachep+0 S4 A32])
        (nil)))

(call_insn 12 10 20 2 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 20 12 15 2 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn 15 20 19 2 init/initramfs.c:421 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 19 15 21 2 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 92 [0x5c])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                    (const_int 92 [0x5c]))) [0 <variable>.cs_cachep+0 S4 A32])
        (nil)))

(call_insn 21 19 29 2 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 29 21 24 2 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn 24 29 28 2 init/initramfs.c:422 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 28 24 30 2 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 84 [0x54])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                    (const_int 84 [0x54]))) [0 <variable>.cs_cachep+0 S4 A32])
        (nil)))

(call_insn 30 28 36 2 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 36 30 34 2 init/initramfs.c:425 (set (reg/f:SI 3 r3 [orig:163 header_buf ] [163])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 4 [0x4]))) [0 header_buf+0 S4 A32])
            (nil))))

(insn 34 36 37 2 init/initramfs.c:423 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 116 [0x74])) [0 name_buf+0 S4 A32])
        (reg/v/f:SI 0 r0 [orig:142 ret ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 37 34 38 2 init/initramfs.c:425 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:163 header_buf ] [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 38 37 39 2 init/initramfs.c:425 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 39 38 41 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 41 39 42 3 init/initramfs.c:425 discrim 1 (set (reg/f:SI 3 r3 [orig:165 symlink_buf ] [165])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 112 [0x70]))) [0 symlink_buf+0 S4 A32])
            (nil))))

(insn 42 41 43 3 init/initramfs.c:425 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:165 symlink_buf ] [165])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 43 42 44 3 init/initramfs.c:425 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [0.0%] 
;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
(note 44 43 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 4 init/initramfs.c:425 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:142 ret ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 46 45 47 4 init/initramfs.c:425 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 2 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
;; Pred edge  3 [0.0%] 
;; Pred edge  4 [0.0%]  (fallthru)
(code_label 47 46 48 5 69 "" [2 uses])

(note 48 47 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 50 48 51 5 init/initramfs.c:426 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1151e780>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1151e780>)
        (nil)))

(call_insn 51 50 52 5 init/initramfs.c:426 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a86f00 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 5 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 52 51 53)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 53 52 54 6 70 "" [1 uses])

(note 54 53 59 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 59 54 229 6 init/initramfs.c:429 (set (reg:DI 2 r2 [170])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 229 59 340 6 init/initramfs.c:431 discrim 1 (set (reg/f:SI 4 r4 [252])
        (reg/f:SI 7 r7 [157])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 340 229 60 6 init/initramfs.c:446 (set (reg:DI 0 r0 [266])
        (reg:DI 2 r2 [170])) 163 {*arm_movdi} (nil))

(insn 60 340 342 6 init/initramfs.c:429 (set (mem/c/i:DI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 2 r2 [170])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 342 60 56 6 init/initramfs.c:446 (set (reg:SI 9 r9 [orig:265+4 ] [265])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 56 342 63 6 init/initramfs.c:428 (set (reg:SI 3 r3 [168])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 63 56 341 6 init/initramfs.c:430 (set (mem/f/c/i:SI (reg/f:SI 7 r7 [157]) [0 message+0 S4 A32])
        (reg:SI 3 r3 [168])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 341 63 57 6 init/initramfs.c:446 (set (reg:SI 11 fp [264])
        (reg:SI 0 r0 [266])) 167 {*arm_movsi_insn} (nil))

(insn 57 341 128 6 init/initramfs.c:428 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 3 r3 [168])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 128 57 215 6 NOTE_INSN_DELETED)

(insn 215 128 175 6 init/initramfs.c:464 (set (reg/f:SI 7 r7 [255])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(note 175 215 211 6 NOTE_INSN_DELETED)

(insn 211 175 307 6 init/initramfs.c:16 (set (reg/f:SI 8 r8 [256])
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)
        (nil)))

(insn 307 211 142 6 init/initramfs.c:382 discrim 1 (set (reg/f:SI 10 sl [260])
        (reg/f:SI 4 r4 [252])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(note 142 307 159 6 NOTE_INSN_DELETED)

(note 159 142 326 6 NOTE_INSN_DELETED)

(jump_insn 326 159 327 6 init/initramfs.c:431 (set (pc)
        (label_ref 325)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  27 [100.0%] 

(barrier 327 326 225)

;; Start of basic block ( 27) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  27 [91.0%] 
(code_label 225 327 66 7 79 "" [1 uses])

(note 66 225 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 69 66 68 7 init/initramfs.c:433 (set (reg:SI 3 r3 [orig:151 D.26144 ] [151])
        (zero_extend:SI (mem:QI (reg/v/f:SI 6 r6 [orig:154 buf ] [154]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 68 69 362 7 init/initramfs.c:432 (set (reg:DI 0 r0)
        (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
        (nil)))

(insn 362 68 70 7 init/initramfs.c:432 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 70 362 71 7 init/initramfs.c:433 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:151 D.26144 ] [151])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 71 70 72 7 init/initramfs.c:433 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 7 -> ( 8 12)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [28.0%]  (fallthru)
;; Succ edge  12 [72.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  7 [28.0%]  (fallthru)
(note 72 71 75 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 75 72 76 8 NOTE_INSN_DELETED)

(note 76 75 73 8 NOTE_INSN_DELETED)

(insn 73 76 363 8 init/initramfs.c:433 discrim 1 (set (reg:DI 0 r0 [175])
        (const_int 3 [0x3])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 363 73 74 8 init/initramfs.c:433 discrim 1 (set (reg:DI 2 r2 [174])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) 163 {*arm_movdi} (nil))

(insn 74 363 77 8 init/initramfs.c:433 discrim 1 (set (reg:DI 2 r2 [174])
        (and:DI (reg:DI 2 r2 [174])
            (reg:DI 0 r0 [175]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                    (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])
            (const_int 3 [0x3]))
        (nil)))

(insn 77 74 78 8 init/initramfs.c:433 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [174])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [176])
                (ior:SI (reg:SI 2 r2 [174])
                    (reg:SI 3 r3 [+4 ])))
        ]) 91 {*iorsi3_compare0} (nil))

(jump_insn 78 77 79 8 init/initramfs.c:433 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 122)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 8 -> ( 9 14)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [0.0%]  (fallthru)
;; Succ edge  14 [100.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [0.0%]  (fallthru)
(note 79 78 82 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 82 79 84 9 init/initramfs.c:434 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 2 r2 [176])) 167 {*arm_movsi_insn} (nil))

(insn 84 82 86 9 init/initramfs.c:379 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg/v:SI 5 r5 [orig:155 len ] [155])) 167 {*arm_movsi_insn} (nil))

(insn 86 84 98 9 init/initramfs.c:380 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg/v/f:SI 6 r6 [orig:154 buf ] [154])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 10) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  10 [86.0%]  (dfs_back)
(code_label 98 86 87 10 74 "" [1 uses])

(note 87 98 92 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 92 87 95 10 NOTE_INSN_DELETED)

(note 95 92 97 10 NOTE_INSN_DELETED)

(note 97 95 90 10 NOTE_INSN_DELETED)

(insn 90 97 93 10 init/initramfs.c:382 discrim 1 (set (reg:SI 3 r3 [orig:183 state ] [183])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 32 [0x20]))) [0 state+0 S4 A32])
            (nil))))

(insn 93 90 96 10 init/initramfs.c:382 discrim 1 (set (reg:SI 3 r3 [186])
        (plus:SI (mult:SI (reg:SI 3 r3 [orig:183 state ] [183])
                (const_int 4 [0x4]))
            (reg/f:SI 4 r4 [252]))) 270 {*arith_shiftsi} (nil))

(call_insn 96 93 99 10 init/initramfs.c:382 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [186])
                                (const_int 56 [0x38])) [0 actions S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (nil)
    (nil))

(insn 99 96 100 10 init/initramfs.c:382 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 100 99 101 10 init/initramfs.c:382 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 98)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 10 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [86.0%]  (dfs_back)
;; Succ edge  11 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 6 [r6]
;; live  kill	

;; Pred edge  10 [14.0%]  (fallthru,loop_exit)
(note 101 100 103 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 103 101 104 11 init/initramfs.c:384 (set (reg:SI 3 r3 [orig:190 count ] [190])
        (mem/c/i:SI (plus:SI (reg/f:SI 10 sl [260])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 10 sl [260])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn 104 103 106 11 init/initramfs.c:384 (set (reg:SI 3 r3 [orig:141 D.26367 ] [141])
        (minus:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
            (reg:SI 3 r3 [orig:190 count ] [190]))) 28 {*arm_subsi3_insn} (nil))

(insn 106 104 105 11 init/initramfs.c:437 (set (reg/v:SI 5 r5 [orig:155 len ] [155])
        (minus:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
            (reg:SI 3 r3 [orig:141 D.26367 ] [141]))) 28 {*arm_subsi3_insn} (nil))

(insn 105 106 328 11 init/initramfs.c:436 (set (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
        (plus:SI (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
            (reg:SI 3 r3 [orig:141 D.26367 ] [141]))) 4 {*arm_addsi3} (nil))

(jump_insn 328 105 329 11 init/initramfs.c:438 (set (pc)
        (label_ref 325)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  27 [100.0%]  (dfs_back)

(barrier 329 328 109)

;; Start of basic block ( 7) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [72.0%] 
(code_label 109 329 110 12 72 "" [1 uses])

(note 110 109 111 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 112 12 init/initramfs.c:440 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:151 D.26144 ] [151])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 112 111 113 12 init/initramfs.c:440 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 122)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 140 [0x8c])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [98.6%]  (fallthru)
;; Succ edge  14 [1.4%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6]
;; live  kill	 24 [cc]

;; Pred edge  12 [98.6%]  (fallthru)
(note 113 112 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 117 113 114 13 init/initramfs.c:443 (set (reg:DI 2 r2 [193])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 114 117 364 13 init/initramfs.c:441 (set (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
        (plus:SI (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 364 114 118 13 init/initramfs.c:443 (set (reg:DI 0 r0)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) 163 {*arm_movdi} (nil))

(insn 118 364 119 13 init/initramfs.c:443 (parallel [
            (set (reg:DI 2 r2 [193])
                (plus:DI (reg:DI 2 r2 [193])
                    (reg:DI 0 r0)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                    (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])
            (const_int 1 [0x1]))
        (nil)))

(insn 119 118 115 13 init/initramfs.c:443 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 2 r2 [193])) 163 {*arm_movdi} (nil))

(insn 115 119 330 13 init/initramfs.c:442 (set (reg/v:SI 5 r5 [orig:155 len ] [155])
        (plus:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(jump_insn 330 115 331 13 init/initramfs.c:444 (set (pc)
        (label_ref 325)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  27 [100.0%]  (dfs_back)

(barrier 331 330 122)

;; Start of basic block ( 12 8) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [1.4%] 
;; Pred edge  8 [100.0%] 
(code_label 122 331 123 14 73 "" [2 uses])

(note 123 122 133 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 133 123 129 14 NOTE_INSN_DELETED)

(insn 129 133 130 14 init/initramfs.c:447 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:154 buf ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 130 129 131 14 init/initramfs.c:447 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:155 len ] [155])) 167 {*arm_movsi_insn} (nil))

(insn 131 130 343 14 init/initramfs.c:447 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 28 [0x1c]))
        (nil)))

(insn 343 131 344 14 init/initramfs.c:446 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 24 [0x18])) [0 this_header+0 S4 A64])
        (reg:SI 11 fp [264])) 167 {*arm_movsi_insn} (nil))

(insn 344 343 132 14 init/initramfs.c:446 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 28 [0x1c])) [0 this_header+4 S4 A32])
        (reg:SI 9 r9 [orig:265+4 ] [265])) 167 {*arm_movsi_insn} (nil))

(call_insn 132 344 134 14 init/initramfs.c:447 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("decompress_method") [flags 0x41] <function_decl 0x114ad900 decompress_method>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 134 132 135 14 init/initramfs.c:448 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 12 ip [orig:146 decompress ] [146])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 135 134 136 14 init/initramfs.c:448 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 163)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 14 -> ( 15 18)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  15 [69.8%]  (fallthru)
;; Succ edge  18 [30.2%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  14 [69.8%]  (fallthru)
(note 136 135 149 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 149 136 138 15 NOTE_INSN_DELETED)

(insn 138 149 141 15 init/initramfs.c:449 (set (reg:SI 2 r2 [198])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 141 138 139 15 init/initramfs.c:449 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 7 r7 [255])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 139 141 365 15 init/initramfs.c:449 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 2 r2 [198])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 365 139 143 15 init/initramfs.c:449 (set (reg:SI 1 r1)
        (symbol_ref:SI ("error") [flags 0x3] <function_decl 0x11487300 error>)) 167 {*arm_movsi_insn} (nil))

(insn 143 365 144 15 init/initramfs.c:449 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("error") [flags 0x3] <function_decl 0x11487300 error>)
        (nil)))

(insn 144 143 145 15 init/initramfs.c:449 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:154 buf ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 145 144 147 15 init/initramfs.c:449 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:155 len ] [155])) 167 {*arm_movsi_insn} (nil))

(insn 147 145 148 15 init/initramfs.c:449 (set (reg:SI 3 r3)
        (symbol_ref:SI ("flush_buffer") [flags 0x3] <function_decl 0x114ad800 flush_buffer>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("flush_buffer") [flags 0x3] <function_decl 0x114ad800 flush_buffer>)
        (nil)))

(call_insn 148 147 150 15 init/initramfs.c:449 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/v/f:SI 12 ip [orig:146 decompress ] [146]) [0 S4 A32])
                    (const_int 16 [0x10])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 249 {*call_value_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 150 148 151 15 init/initramfs.c:451 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 151 150 152 15 init/initramfs.c:451 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 15 -> ( 16 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  16 [0.0%]  (fallthru)
;; Succ edge  23 [100.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  15 [0.0%]  (fallthru)
(note 152 151 154 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 154 152 155 16 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:202 message ] [202])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 155 154 156 16 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:202 message ] [202])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 156 155 157 16 init/initramfs.c:15 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 16 -> ( 17 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  17 [15.0%]  (fallthru)
;; Succ edge  23 [85.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  16 [15.0%]  (fallthru)
(note 157 156 366 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 366 157 160 17 init/initramfs.c:16 (set (reg:SI 2 r2)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x115a92d0>)) 167 {*arm_movsi_insn} (nil))

(insn 160 366 332 17 init/initramfs.c:16 (set (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x115a92d0>)
        (nil)))

(jump_insn 332 160 333 17 (set (pc)
        (label_ref 198)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 333 332 163)

;; Start of basic block ( 14) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [30.2%] 
(code_label 163 333 164 18 75 "" [1 uses])

(note 164 163 165 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 165 164 166 18 init/initramfs.c:453 (set (reg/f:SI 3 r3 [orig:149 compress_name.420 ] [149])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 compress_name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 166 165 167 18 init/initramfs.c:453 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:149 compress_name.420 ] [149])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 167 166 168 18 init/initramfs.c:453 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 188)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 18 -> ( 19 21)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)
;; Succ edge  21 [0.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
(note 168 167 170 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 170 168 171 19 init/initramfs.c:454 (set (reg/f:SI 2 r2 [orig:206 message ] [206])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 171 170 172 19 init/initramfs.c:454 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:206 message ] [206])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 172 171 173 19 init/initramfs.c:454 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
        (nil)))
;; End of basic block 19 -> ( 20 23)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  20 [6.7%]  (fallthru)
;; Succ edge  23 [93.3%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  19 [6.7%]  (fallthru)
(note 173 172 177 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 177 173 178 20 init/initramfs.c:455 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 120 [0x78])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 120 [0x78])))
        (nil)))

(insn 178 177 179 20 init/initramfs.c:455 (set (reg:SI 1 r1)
        (const_int 64 [0x40])) 167 {*arm_movsi_insn} (nil))

(insn 179 178 181 20 init/initramfs.c:455 (set (reg:SI 2 r2)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114fc3c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114fc3c0>)
        (nil)))

(call_insn 181 179 367 20 init/initramfs.c:455 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("snprintf") [flags 0x41] <function_decl 0x5115e680 snprintf>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 367 181 185 20 init/initramfs.c:458 (set (reg:SI 3 r3)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 120 [0x78])))) 167 {*arm_movsi_insn} (nil))

(insn 185 367 334 20 init/initramfs.c:458 (set (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 120 [0x78])))
        (nil)))

(jump_insn 334 185 335 20 (set (pc)
        (label_ref 198)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 335 334 188)

;; Start of basic block ( 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  18 [0.0%] 
(code_label 188 335 189 21 77 "" [1 uses])

(note 189 188 191 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 191 189 192 21 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:214 message ] [214])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 192 191 193 21 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:214 message ] [214])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 193 192 194 21 init/initramfs.c:15 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  22 [15.0%]  (fallthru)
;; Succ edge  23 [85.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  21 [15.0%]  (fallthru)
(note 194 193 197 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 197 194 198 22 init/initramfs.c:16 (set (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (reg/f:SI 8 r8 [256])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)
        (nil)))
;; End of basic block 22 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 16 17 21 15 19 22 20) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  16 [85.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  21 [85.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  19 [93.3%] 
;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  20 [100.0%] 
(code_label 198 197 199 23 76 "" [6 uses])

(note 199 198 201 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 201 199 202 23 init/initramfs.c:462 (set (reg:SI 3 r3 [orig:218 state ] [218])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 32 [0x20]))) [0 state+0 S4 A32])
            (nil))))

(insn 202 201 203 23 init/initramfs.c:462 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:218 state ] [218])
            (const_int 7 [0x7]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 203 202 204 23 init/initramfs.c:462 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 213)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 23 -> ( 24 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [0.0%]  (fallthru)
;; Succ edge  26 [100.0%] 

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  23 [0.0%]  (fallthru)
(note 204 203 206 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 206 204 207 24 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:220 message ] [220])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 207 206 208 24 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:220 message ] [220])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 208 207 209 24 init/initramfs.c:15 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 213)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  25 [15.0%]  (fallthru)
;; Succ edge  26 [85.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  24 [15.0%]  (fallthru)
(note 209 208 212 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 212 209 213 25 init/initramfs.c:16 (set (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (reg/f:SI 8 r8 [256])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)
        (nil)))
;; End of basic block 25 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  26 [100.0%]  (fallthru)

;; Start of basic block ( 23 24 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  23 [100.0%] 
;; Pred edge  24 [85.0%] 
;; Pred edge  25 [100.0%]  (fallthru)
(code_label 213 212 214 26 78 "" [2 uses])

(note 214 213 218 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 218 214 216 26 NOTE_INSN_DELETED)

(insn 216 218 222 26 init/initramfs.c:464 (set (reg:SI 12 ip [orig:148 my_inptr.423 ] [148])
        (mem/c/i:SI (reg/f:SI 7 r7 [255]) [0 my_inptr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 7 r7 [255]) [0 my_inptr+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 my_inptr+0 S4 A32])
            (nil))))

(insn 222 216 221 26 init/initramfs.c:466 (set (reg/v:SI 5 r5 [orig:155 len ] [155])
        (minus:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
            (reg:SI 12 ip [orig:148 my_inptr.423 ] [148]))) 28 {*arm_subsi3_insn} (nil))

(insn 221 222 369 26 init/initramfs.c:465 (set (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
        (plus:SI (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
            (reg:SI 12 ip [orig:148 my_inptr.423 ] [148]))) 4 {*arm_addsi3} (nil))

(insn 369 221 219 26 init/initramfs.c:464 (set (reg:DI 2 r2)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) 163 {*arm_movdi} (nil))

(insn 219 369 368 26 init/initramfs.c:464 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (zero_extend:DI (reg:SI 12 ip [orig:148 my_inptr.423 ] [148]))
                    (reg:DI 2 r2)))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (nil)))

(insn 368 219 220 26 init/initramfs.c:464 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(note 220 368 325 26 NOTE_INSN_DELETED)
;; End of basic block 26 -> ( 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  27 [100.0%]  (fallthru)

;; Start of basic block ( 26 11 6 13) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  26 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%]  (dfs_back)
;; Pred edge  6 [100.0%] 
;; Pred edge  13 [100.0%]  (dfs_back)
(code_label 325 220 323 27 84 "" [3 uses])

(note 323 325 226 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(note 226 323 227 27 NOTE_INSN_DELETED)

(note 227 226 231 27 NOTE_INSN_DELETED)

(note 231 227 232 27 NOTE_INSN_DELETED)

(note 232 231 234 27 NOTE_INSN_DELETED)

(note 234 232 235 27 NOTE_INSN_DELETED)

(note 235 234 230 27 NOTE_INSN_DELETED)

(insn 230 235 236 27 init/initramfs.c:431 discrim 1 (set (reg/f:SI 2 r2 [orig:231 message ] [231])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 236 230 237 27 init/initramfs.c:431 discrim 1 (parallel [
            (set (reg:SI 3 r3 [235])
                (and:SI (ne:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
                        (const_int 0 [0x0]))
                    (eq:SI (reg/f:SI 2 r2 [orig:231 message ] [231])
                        (const_int 0 [0x0]))))
            (clobber (reg:CC 24 cc))
        ]) 290 {*and_scc_scc_nodom} (nil))

(insn 237 236 238 27 init/initramfs.c:431 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [235])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 238 237 239 27 init/initramfs.c:431 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 225)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 27 -> ( 7 28)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [91.0%] 
;; Succ edge  28 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  in  	 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  27 [9.0%]  (fallthru,loop_exit)
(note 239 238 324 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 324 239 251 28 init/initramfs.c:110 (set (reg/f:SI 6 r6 [248])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 251 324 253 28 include/linux/list.h:107 (set (reg:SI 8 r8 [249])
        (const_int 1048832 [0x100100])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1048832 [0x100100])
        (nil)))

(insn 253 251 241 28 include/linux/list.h:108 (set (reg:SI 7 r7 [250])
        (const_int 2097664 [0x200200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2097664 [0x200200])
        (nil)))

(insn 241 253 242 28 init/initramfs.c:110 (set (reg/v/f:SI 4 r4 [orig:135 de ] [135])
        (mem/s/f/j/c:SI (pre_modify:SI (reg/f:SI 6 r6 [248])
                (plus:SI (reg/f:SI 6 r6 [248])
                    (const_int 184 [0xb8]))) [0 dir_list.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 6 r6 [248])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 184 [0xb8]))) [0 dir_list.next+0 S4 A32])
            (nil))))

(insn 242 241 336 28 init/initramfs.c:110 (set (reg/v/f:SI 5 r5 [orig:134 de.751 ] [134])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 336 242 337 28 (set (pc)
        (label_ref 266)) 242 {*arm_jump} (nil))
;; End of basic block 28 -> ( 30)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  30 [100.0%] 

(barrier 337 336 268)

;; Start of basic block ( 30) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  30 [0.0%] 
(code_label 268 337 246 29 81 "" [1 uses])

(note 246 268 262 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 262 246 247 29 NOTE_INSN_DELETED)

(insn 247 262 248 29 include/linux/list.h:106 (set (reg/f:SI 3 r3 [orig:139 D.26385 ] [139])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 248 247 249 29 include/linux/list.h:106 (set (reg/f:SI 2 r2 [orig:138 D.26386 ] [138])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 249 248 250 29 include/linux/list.h:88 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:138 D.26386 ] [138])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/f:SI 3 r3 [orig:139 D.26385 ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 250 249 252 29 include/linux/list.h:89 (set (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:139 D.26385 ] [139]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:138 D.26386 ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 252 250 254 29 include/linux/list.h:107 (set (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135]) [0 <variable>.list.next+0 S4 A32])
        (reg:SI 8 r8 [249])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1048832 [0x100100])
        (nil)))

(insn 254 252 256 29 include/linux/list.h:108 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg:SI 7 r7 [250])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2097664 [0x200200])
        (nil)))

(insn 256 254 255 29 init/initramfs.c:112 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 12 [0xc])) [0 <variable>.mtime+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 255 256 257 29 init/initramfs.c:112 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 8 [0x8])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 257 255 258 29 init/initramfs.c:112 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utime") [flags 0x3] <function_decl 0x11487700 do_utime>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 258 257 259 29 init/initramfs.c:113 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 8 [0x8])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 259 258 260 29 init/initramfs.c:113 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 260 259 261 29 init/initramfs.c:114 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 de ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn 261 260 264 29 init/initramfs.c:114 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 264 261 265 29 init/initramfs.c:110 discrim 2 (set (reg/v/f:SI 4 r4 [orig:135 de ] [135])
        (reg/v/f:SI 5 r5 [orig:134 de.751 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 265 264 266 29 init/initramfs.c:110 discrim 2 (set (reg/v/f:SI 5 r5 [orig:134 de.751 ] [134])
        (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:134 de.751 ] [134]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 29 -> ( 30)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  30 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 29 28) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  29 [100.0%]  (fallthru,dfs_back)
;; Pred edge  28 [100.0%] 
(code_label 266 265 267 30 80 "" [1 uses])

(note 267 266 271 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 271 267 303 30 init/initramfs.c:110 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:135 de ] [135])
            (reg/f:SI 6 r6 [248]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 4 r4 [orig:135 de ] [135])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 184 [0xb8]))))
        (nil)))

(insn 303 271 272 30 init/initramfs.c:110 (set (reg/f:SI 10 sl [239])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 272 303 273 30 init/initramfs.c:110 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 268)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 30 -> ( 29 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  29 [0.0%] 
;; Succ edge  31 [100.0%]  (fallthru,loop_exit)

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  30 [100.0%]  (fallthru,loop_exit)
(note 273 272 284 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 284 273 275 31 NOTE_INSN_DELETED)

(insn 275 284 276 31 init/initramfs.c:469 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 10 sl [239])
                (const_int 116 [0x74])) [0 name_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 116 [0x74]))) [0 name_buf+0 S4 A32])
        (nil)))

(call_insn 276 275 278 31 init/initramfs.c:469 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 278 276 279 31 init/initramfs.c:470 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 10 sl [239])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 112 [0x70]))) [0 symlink_buf+0 S4 A32])
        (nil)))

(call_insn 279 278 281 31 init/initramfs.c:470 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 281 279 282 31 init/initramfs.c:471 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 10 sl [239])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 header_buf+0 S4 A32])
        (nil)))

(call_insn 282 281 289 31 init/initramfs.c:471 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 289 282 295 31 init/initramfs.c:473 (set (reg/i:SI 0 r0)
        (mem/f/c/i:SI (reg/f:SI 10 sl [239]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 295 289 345 31 init/initramfs.c:473 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 31 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 345 295 361 NOTE_INSN_DELETED)

(note 361 345 0 NOTE_INSN_DELETED)


;; Function do_copy (do_copy)[0:1329] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 102.
verify found no changes in insn with uid = 102.
deleting insn with uid = 80.
scanning new insn with uid = 103.
verify found no changes in insn with uid = 103.
deleting insn with uid = 48.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 8 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)

Pass 0 for finding allocno costs

    a8 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:340000
  a2(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r180: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:340000
  a2(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 95(l0): point = 0
   Insn 89(l0): point = 2
   Insn 78(l0): point = 5
   Insn 72(l0): point = 7
   Insn 67(l0): point = 9
   Insn 77(l0): point = 11
   Insn 71(l0): point = 16
   Insn 81(l0): point = 18
   Insn 102(l0): point = 20
   Insn 66(l0): point = 22
   Insn 76(l0): point = 24
   Insn 70(l0): point = 26
   Insn 82(l0): point = 28
   Insn 65(l0): point = 30
   Insn 62(l0): point = 32
   Insn 60(l0): point = 34
   Insn 58(l0): point = 36
   Insn 57(l0): point = 38
   Insn 59(l0): point = 40
   Insn 99(l0): point = 43
   Insn 46(l0): point = 45
   Insn 41(l0): point = 47
   Insn 35(l0): point = 49
   Insn 45(l0): point = 51
   Insn 40(l0): point = 53
   Insn 49(l0): point = 58
   Insn 103(l0): point = 60
   Insn 34(l0): point = 62
   Insn 44(l0): point = 64
   Insn 50(l0): point = 66
   Insn 39(l0): point = 68
   Insn 33(l0): point = 70
   Insn 30(l0): point = 72
   Insn 28(l0): point = 74
   Insn 27(l0): point = 76
   Insn 25(l0): point = 78
   Insn 23(l0): point = 80
   Insn 24(l0): point = 82
   Insn 20(l0): point = 84
   Insn 19(l0): point = 86
   Insn 17(l0): point = 88
   Insn 14(l0): point = 90
   Insn 15(l0): point = 92
   Insn 16(l0): point = 94
   Insn 10(l0): point = 97
   Insn 9(l0): point = 99
   Insn 8(l0): point = 101
   Insn 6(l0): point = 103
   Insn 5(l0): point = 105
 a0(r135): [43..66] [3..28]
 a1(r139): [46..105] [6..42]
 a2(r178): [6..13]
 a3(r173): [8..16]
 a4(r169): [10..22]
 a5(r177): [14..24] [12..12]
 a6(r133): [12..32]
 a7(r172): [17..26]
 a8(r180): [19..20]
 a9(r168): [23..30]
 a10(r137): [97..103] [41..42]
 a11(r160): [46..51]
 a12(r156): [48..55]
 a13(r151): [50..62]
 a14(r134): [52..72]
 a15(r159): [52..64]
 a16(r155): [56..68] [54..54]
 a17(r162): [59..60]
 a18(r150): [63..70]
 a19(r136): [95..101]
Compressing live ranges: from 108 to 43 - 39%
Ranges after the compression:
 a0(r135): [20..34] [0..15]
 a1(r139): [21..42] [1..19]
 a2(r178): [1..5]
 a3(r173): [2..7]
 a4(r169): [3..11]
 a5(r177): [6..13] [4..4]
 a6(r133): [4..17]
 a7(r172): [8..14]
 a8(r180): [9..10]
 a9(r168): [12..16]
 a10(r137): [39..41] [18..19]
 a11(r160): [21..24]
 a12(r156): [22..27]
 a13(r151): [23..31]
 a14(r134): [25..37]
 a15(r159): [25..33]
 a16(r155): [28..35] [26..26]
 a17(r162): [29..30]
 a18(r150): [32..36]
 a19(r136): [38..40]
+++Allocating 160 bytes for conflict table (uncompressed size 160)
;; a0(r135,l0) conflicts: a2(r178,l0) a1(r139,l0) a3(r173,l0) a4(r169,l0) a5(r177,l0) a6(r133,l0) a7(r172,l0) a8(r180,l0) a9(r168,l0) a11(r160,l0) a12(r156,l0) a13(r151,l0) a15(r159,l0) a14(r134,l0) a16(r155,l0) a17(r162,l0) a18(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r139,l0) conflicts: a0(r135,l0) a2(r178,l0) a3(r173,l0) a4(r169,l0) a5(r177,l0) a6(r133,l0) a7(r172,l0) a8(r180,l0) a9(r168,l0) a10(r137,l0) a11(r160,l0) a12(r156,l0) a13(r151,l0) a15(r159,l0) a14(r134,l0) a16(r155,l0) a17(r162,l0) a18(r150,l0) a19(r136,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r178,l0) conflicts: a0(r135,l0) a1(r139,l0) a3(r173,l0) a4(r169,l0) a5(r177,l0) a6(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r173,l0) conflicts: a0(r135,l0) a2(r178,l0) a1(r139,l0) a4(r169,l0) a5(r177,l0) a6(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r169,l0) conflicts: a0(r135,l0) a2(r178,l0) a1(r139,l0) a3(r173,l0) a5(r177,l0) a6(r133,l0) a7(r172,l0) a8(r180,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r177,l0) conflicts: a0(r135,l0) a2(r178,l0) a1(r139,l0) a3(r173,l0) a4(r169,l0) a6(r133,l0) a7(r172,l0) a8(r180,l0) a9(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r133,l0) conflicts: a0(r135,l0) a2(r178,l0) a1(r139,l0) a3(r173,l0) a4(r169,l0) a5(r177,l0) a7(r172,l0) a8(r180,l0) a9(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r172,l0) conflicts: a0(r135,l0) a1(r139,l0) a4(r169,l0) a5(r177,l0) a6(r133,l0) a8(r180,l0) a9(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r180,l0) conflicts: a0(r135,l0) a1(r139,l0) a4(r169,l0) a5(r177,l0) a6(r133,l0) a7(r172,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r168,l0) conflicts: a0(r135,l0) a1(r139,l0) a5(r177,l0) a6(r133,l0) a7(r172,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r137,l0) conflicts: a1(r139,l0) a19(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r160,l0) conflicts: a0(r135,l0) a1(r139,l0) a12(r156,l0) a13(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r156,l0) conflicts: a0(r135,l0) a1(r139,l0) a11(r160,l0) a13(r151,l0) a15(r159,l0) a14(r134,l0) a16(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r151,l0) conflicts: a0(r135,l0) a1(r139,l0) a11(r160,l0) a12(r156,l0) a15(r159,l0) a14(r134,l0) a16(r155,l0) a17(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r134,l0) conflicts: a0(r135,l0) a1(r139,l0) a12(r156,l0) a13(r151,l0) a15(r159,l0) a16(r155,l0) a17(r162,l0) a18(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r159,l0) conflicts: a0(r135,l0) a1(r139,l0) a12(r156,l0) a13(r151,l0) a14(r134,l0) a16(r155,l0) a17(r162,l0) a18(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r155,l0) conflicts: a0(r135,l0) a1(r139,l0) a12(r156,l0) a13(r151,l0) a15(r159,l0) a14(r134,l0) a17(r162,l0) a18(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r162,l0) conflicts: a0(r135,l0) a1(r139,l0) a13(r151,l0) a15(r159,l0) a14(r134,l0) a16(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r150,l0) conflicts: a0(r135,l0) a1(r139,l0) a15(r159,l0) a14(r134,l0) a16(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r136,l0) conflicts: a1(r139,l0) a10(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a4(r169)<->a9(r168)@125:shuffle
  cp1:a3(r173)<->a7(r172)@125:shuffle
  cp2:a13(r151)<->a18(r150)@125:shuffle
  cp3:a11(r160)<->a15(r159)@125:shuffle
  cp4:a11(r160)<->a14(r134)@125:shuffle
  regions=1, blocks=6, points=43
    allocnos=20, copies=5, conflicts=0, ranges=25

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r135 1r139 2r178 3r173 4r169 5r177 6r133 7r172 8r180 9r168 10r137 11r160 12r156 13r151 14r134 15r159 16r155 17r162 18r150 19r136
    modified regnos: 133 134 135 136 137 139 150 151 155 156 159 160 162 168 169 172 173 177 178 180
    border:
    Pressure: GENERAL_REGS=10
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 173 of GENERAL_REGS has 1 regs less
    Reg 169 of GENERAL_REGS has 1 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 172 of GENERAL_REGS has 1 regs less
    Reg 180 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
      Pushing a19(r136,l0)
      Pushing a10(r137,l0)
      Pushing a18(r150,l0)
      Pushing a17(r162,l0)
      Pushing a16(r155,l0)
      Pushing a15(r159,l0)
      Pushing a13(r151,l0)
      Pushing a12(r156,l0)
      Pushing a11(r160,l0)
      Pushing a9(r168,l0)
      Pushing a8(r180,l0)
      Pushing a7(r172,l0)
      Pushing a5(r177,l0)
      Pushing a4(r169,l0)
      Pushing a3(r173,l0)
      Pushing a2(r178,l0)
      Pushing a0(r135,l0)
      Pushing a14(r134,l0)
      Pushing a6(r133,l0)
      Pushing a1(r139,l0)
      Popping a1(r139,l0)  -- assign reg 4
      Popping a6(r133,l0)  -- assign reg 3
      Popping a14(r134,l0)  -- assign reg 3
      Popping a0(r135,l0)  -- assign reg 0
      Popping a2(r178,l0)  -- assign reg 6
      Popping a3(r173,l0)  -- assign reg 2
      Popping a4(r169,l0)  -- assign reg 1
      Popping a5(r177,l0)  -- assign reg 8
      Popping a7(r172,l0)  -- assign reg 2
      Popping a8(r180,l0)  -- assign reg 12
      Popping a9(r168,l0)  -- assign reg 1
      Popping a11(r160,l0)  -- assign reg 3
      Popping a12(r156,l0)  -- assign reg 6
      Popping a13(r151,l0)  -- assign reg 2
      Popping a15(r159,l0)  -- assign reg 1
      Popping a16(r155,l0)  -- assign reg 8
      Popping a17(r162,l0)  -- assign reg 12
      Popping a18(r150,l0)  -- assign reg 2
      Popping a10(r137,l0)  -- assign reg 3
      Popping a19(r136,l0)  -- assign reg 2
Disposition:
    6:r133 l0     3   14:r134 l0     3    0:r135 l0     0   19:r136 l0     2
   10:r137 l0     3    1:r139 l0     4   18:r150 l0     2   13:r151 l0     2
   16:r155 l0     8   12:r156 l0     6   15:r159 l0     1   11:r160 l0     3
   17:r162 l0    12    9:r168 l0     1    4:r169 l0     1    7:r172 l0     2
    3:r173 l0     2    5:r177 l0     8    2:r178 l0     6    8:r180 l0    12
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 139
insn=6, live_throughout: 13, 139, dead_or_set: 137
insn=8, live_throughout: 13, 137, 139, dead_or_set: 136
insn=9, live_throughout: 13, 136, 137, 139, dead_or_set: 
insn=10, live_throughout: 13, 136, 137, 139, dead_or_set: 
insn=16, live_throughout: 13, 139, dead_or_set: 2, 136
insn=15, live_throughout: 2, 13, 139, dead_or_set: 1
insn=14, live_throughout: 1, 2, 13, 139, dead_or_set: 0
insn=17, live_throughout: 13, 139, dead_or_set: 0, 1, 2, 14
insn=19, live_throughout: 13, 139, dead_or_set: 0
insn=20, live_throughout: 13, 139, dead_or_set: 0, 14
insn=24, live_throughout: 13, 139, dead_or_set: 1
insn=23, live_throughout: 1, 13, 139, dead_or_set: 0
insn=25, live_throughout: 13, 139, dead_or_set: 0, 1, 14
insn=27, live_throughout: 13, 139, dead_or_set: 0
insn=28, live_throughout: 13, 139, dead_or_set: 0, 14
insn=30, live_throughout: 13, 14, 139, dead_or_set: 134
insn=33, live_throughout: 13, 14, 134, 139, dead_or_set: 150
insn=39, live_throughout: 13, 14, 134, 139, 150, dead_or_set: 155
insn=50, live_throughout: 13, 14, 134, 139, 150, 155, dead_or_set: 135
insn=44, live_throughout: 13, 14, 134, 135, 139, 150, 155, dead_or_set: 159
insn=34, live_throughout: 13, 14, 134, 135, 139, 155, 159, dead_or_set: 150, 151
insn=103, live_throughout: 13, 14, 134, 135, 139, 151, 155, 159, dead_or_set: 162
insn=49, live_throughout: 13, 14, 134, 135, 139, 151, 155, 159, dead_or_set: 162
insn=40, live_throughout: 13, 14, 134, 135, 139, 151, 159, dead_or_set: 155, 156
insn=45, live_throughout: 13, 14, 135, 139, 151, 156, dead_or_set: 134, 159, 160
insn=35, live_throughout: 13, 14, 135, 139, 156, 160, dead_or_set: 151
insn=41, live_throughout: 13, 14, 135, 139, 160, dead_or_set: 156
insn=46, live_throughout: 13, 14, 135, dead_or_set: 139, 160
insn=99, live_throughout: 13, 14, 135, dead_or_set: 
insn=53, live_throughout: 13, 137, 139, dead_or_set: 
insn=59, live_throughout: 13, 139, dead_or_set: 2, 137
insn=57, live_throughout: 2, 13, 139, dead_or_set: 0
insn=58, live_throughout: 0, 2, 13, 139, dead_or_set: 1
insn=60, live_throughout: 13, 139, dead_or_set: 0, 1, 2, 14
insn=62, live_throughout: 13, 14, 139, dead_or_set: 133
insn=65, live_throughout: 13, 14, 133, 139, dead_or_set: 168
insn=82, live_throughout: 13, 14, 133, 139, 168, dead_or_set: 135
insn=70, live_throughout: 13, 14, 133, 135, 139, 168, dead_or_set: 172
insn=76, live_throughout: 13, 14, 133, 135, 139, 168, 172, dead_or_set: 177
insn=66, live_throughout: 13, 14, 133, 135, 139, 172, 177, dead_or_set: 168, 169
insn=102, live_throughout: 13, 14, 133, 135, 139, 169, 172, 177, dead_or_set: 180
insn=81, live_throughout: 13, 14, 133, 135, 139, 169, 172, 177, dead_or_set: 180
insn=71, live_throughout: 13, 14, 133, 135, 139, 169, 177, dead_or_set: 172, 173
insn=77, live_throughout: 13, 14, 135, 139, 169, 173, dead_or_set: 133, 177, 178
insn=67, live_throughout: 13, 14, 135, 139, 173, 178, dead_or_set: 169
insn=72, live_throughout: 13, 14, 135, 139, 178, dead_or_set: 173
insn=78, live_throughout: 13, 14, 135, dead_or_set: 139, 178
insn=83, live_throughout: 13, 14, 135, dead_or_set: 
insn=89, live_throughout: 13, 14, dead_or_set: 0, 135
insn=95, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 134: (insn_list:REG_DEP_TRUE 30 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 5 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 35 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 39 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 41 (nil))
init_insns for 159: (insn_list:REG_DEP_TRUE 44 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 46 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 103 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 65 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 67 (nil))
init_insns for 172: (insn_list:REG_DEP_TRUE 70 (nil))
init_insns for 173: (insn_list:REG_DEP_TRUE 72 (nil))
init_insns for 177: (insn_list:REG_DEP_TRUE 76 (nil))
init_insns for 178: (insn_list:REG_DEP_TRUE 78 (nil))
init_insns for 180: (insn_list:REG_DEP_TRUE 102 (nil))
changing reg in insn 62
changing reg in insn 77
changing reg in insn 71
changing reg in insn 66
changing reg in insn 30
changing reg in insn 40
changing reg in insn 45
changing reg in insn 34
changing reg in insn 82
changing reg in insn 50
changing reg in insn 89
changing reg in insn 8
changing reg in insn 16
changing reg in insn 9
changing reg in insn 6
changing reg in insn 59
changing reg in insn 9
changing reg in insn 5
changing reg in insn 81
changing reg in insn 78
changing reg in insn 76
changing reg in insn 72
changing reg in insn 70
changing reg in insn 67
changing reg in insn 65
changing reg in insn 62
changing reg in insn 58
changing reg in insn 57
changing reg in insn 49
changing reg in insn 46
changing reg in insn 44
changing reg in insn 41
changing reg in insn 39
changing reg in insn 35
changing reg in insn 33
changing reg in insn 30
changing reg in insn 27
changing reg in insn 24
changing reg in insn 23
changing reg in insn 19
changing reg in insn 15
changing reg in insn 14
changing reg in insn 8
changing reg in insn 6
changing reg in insn 77
changing reg in insn 71
changing reg in insn 66
changing reg in insn 45
changing reg in insn 40
changing reg in insn 34
changing reg in insn 76
changing reg in insn 70
changing reg in insn 65
changing reg in insn 44
changing reg in insn 39
changing reg in insn 33
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 103
changing reg in insn 49
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 102
changing reg in insn 81
Spilling for insn 49.
Spilling for insn 35.
Spilling for insn 41.
Spilling for insn 46.
Spilling for insn 81.
Spilling for insn 67.
Spilling for insn 72.
Spilling for insn 78.

Reloads for insn # 49
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 35
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])

Reloads for insn # 41
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])

Reloads for insn # 46
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 81
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 67
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 92 [0x5c])) [0 body_len+0 S4 A32])

Reloads for insn # 72
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])

Reloads for insn # 78
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
deleting insn with uid = 16.
deleting insn with uid = 89.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 60.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 8 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


do_copy

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 6[r6] 7[r7] 8[r8] 9[r9] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,7u} r1={12d,6u} r2={12d,7u} r3={10d,9u} r4={1d,26u,13d} r6={2d,2u} r7={2d,2u} r8={2d,2u} r9={2d,2u} r12={8d,2u} r13={1d,10u} r14={6d,1u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={8d,1u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 719{629d,77u,13e} in 47{42 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 init/initramfs.c:338 (set (reg/f:SI 4 r4 [139])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 8 2 init/initramfs.c:338 (set (reg:SI 3 r3 [orig:137 count.385 ] [137])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn 8 6 9 2 init/initramfs.c:338 (set (reg:SI 2 r2 [orig:136 body_len.386 ] [136])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 92 [0x5c]))) [0 body_len+0 S4 A32])
        (nil)))

(insn 9 8 10 2 init/initramfs.c:338 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:137 count.385 ] [137])
            (reg:SI 2 r2 [orig:136 body_len.386 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 init/initramfs.c:338 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9997 [0x270d])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [0.0%]  (fallthru)
(note 11 10 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 37 11 15 3 NOTE_INSN_DELETED)

(insn 15 37 14 3 init/initramfs.c:339 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 victim+0 S4 A32])
        (nil)))

(insn 14 15 17 3 init/initramfs.c:339 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
        (nil)))

(call_insn 17 14 19 3 init/initramfs.c:339 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_write") [flags 0x41] <function_decl 0x11464900 sys_write>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 19 17 20 3 init/initramfs.c:340 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
        (nil)))

(call_insn 20 19 24 3 init/initramfs.c:340 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_close") [flags 0x41] <function_decl 0x1145e900 sys_close>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 24 20 23 3 init/initramfs.c:341 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 108 [0x6c]))) [0 mtime+0 S4 A32])
        (nil)))

(insn 23 24 25 3 init/initramfs.c:341 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 196 [0xc4])) [0 vcollected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 196 [0xc4]))) [0 vcollected+0 S4 A32])
        (nil)))

(call_insn 25 23 27 3 init/initramfs.c:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utime") [flags 0x3] <function_decl 0x11487700 do_utime>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 27 25 28 3 init/initramfs.c:342 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 196 [0xc4])) [0 vcollected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 196 [0xc4]))) [0 vcollected+0 S4 A32])
        (nil)))

(call_insn 28 27 30 3 init/initramfs.c:342 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 30 28 33 3 init/initramfs.c:343 (set (reg:SI 3 r3 [orig:134 body_len.779 ] [134])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 92 [0x5c]))) [0 body_len+0 S4 A32])
            (nil))))

(insn 33 30 39 3 init/initramfs.c:172 (set (reg/f:SI 2 r2 [orig:150 victim ] [150])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 39 33 50 3 init/initramfs.c:173 (set (reg:DI 8 r8 [orig:155 this_header ] [155])
        (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
            (nil))))

(insn 50 39 44 3 init/initramfs.c:345 (set (reg:SI 0 r0 [orig:135 D.26039 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 44 50 34 3 init/initramfs.c:174 (set (reg:SI 1 r1 [orig:159 count ] [159])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn 34 44 103 3 init/initramfs.c:172 (set (reg:SI 2 r2 [151])
        (plus:SI (reg/f:SI 2 r2 [orig:150 victim ] [150])
            (reg:SI 3 r3 [orig:134 body_len.779 ] [134]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 103 34 49 3 init/initramfs.c:344 (set (reg:SI 12 ip [162])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 49 103 40 3 init/initramfs.c:344 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 12 ip [162])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(insn 40 49 45 3 init/initramfs.c:173 (parallel [
            (set (reg:DI 6 r6 [156])
                (plus:DI (zero_extend:DI (reg:SI 3 r3 [orig:134 body_len.779 ] [134]))
                    (reg:DI 8 r8 [orig:155 this_header ] [155])))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (nil)))

(insn 45 40 35 3 init/initramfs.c:174 (set (reg:SI 3 r3 [160])
        (minus:SI (reg:SI 1 r1 [orig:159 count ] [159])
            (reg:SI 3 r3 [orig:134 body_len.779 ] [134]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn 35 45 41 3 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 2 r2 [151])) 167 {*arm_movsi_insn} (nil))

(insn 41 35 46 3 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [156])) 163 {*arm_movdi} (nil))

(insn 46 41 99 3 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 3 r3 [160])) 167 {*arm_movsi_insn} (nil))

(jump_insn 99 46 100 3 init/initramfs.c:345 (set (pc)
        (label_ref 83)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 100 99 53)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [100.0%] 
(code_label 53 100 54 4 88 "" [1 uses])

(note 54 53 74 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 74 54 59 4 NOTE_INSN_DELETED)

(insn 59 74 57 4 init/initramfs.c:347 (set (reg:SI 2 r2)
        (reg:SI 3 r3 [orig:137 count.385 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 57 59 58 4 init/initramfs.c:347 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
        (nil)))

(insn 58 57 60 4 init/initramfs.c:347 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 victim+0 S4 A32])
        (nil)))

(call_insn 60 58 62 4 init/initramfs.c:347 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_write") [flags 0x41] <function_decl 0x11464900 sys_write>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 62 60 65 4 init/initramfs.c:348 (set (reg:SI 3 r3 [orig:133 count.784 ] [133])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn 65 62 82 4 init/initramfs.c:348 (set (reg:SI 1 r1 [orig:168 body_len ] [168])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 92 [0x5c]))) [0 body_len+0 S4 A32])
            (nil))))

(insn 82 65 70 4 init/initramfs.c:350 (set (reg:SI 0 r0 [orig:135 D.26039 ] [135])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 70 82 76 4 init/initramfs.c:172 (set (reg/f:SI 2 r2 [orig:172 victim ] [172])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 76 70 66 4 init/initramfs.c:173 (set (reg:DI 8 r8 [orig:177 this_header ] [177])
        (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
            (nil))))

(insn 66 76 102 4 init/initramfs.c:348 (set (reg:SI 1 r1 [169])
        (minus:SI (reg:SI 1 r1 [orig:168 body_len ] [168])
            (reg:SI 3 r3 [orig:133 count.784 ] [133]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (nil)))

(insn 102 66 81 4 init/initramfs.c:174 (set (reg:SI 12 ip [180])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 81 102 71 4 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 12 ip [180])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 71 81 77 4 init/initramfs.c:172 (set (reg:SI 2 r2 [173])
        (plus:SI (reg/f:SI 2 r2 [orig:172 victim ] [172])
            (reg:SI 3 r3 [orig:133 count.784 ] [133]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 77 71 67 4 init/initramfs.c:173 (parallel [
            (set (reg:DI 6 r6 [178])
                (plus:DI (zero_extend:DI (reg:SI 3 r3 [orig:133 count.784 ] [133]))
                    (reg:DI 8 r8 [orig:177 this_header ] [177])))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (nil)))

(insn 67 77 72 4 init/initramfs.c:348 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (reg:SI 1 r1 [169])) 167 {*arm_movsi_insn} (nil))

(insn 72 67 78 4 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 2 r2 [173])) 167 {*arm_movsi_insn} (nil))

(insn 78 72 83 4 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [178])) 163 {*arm_movdi} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 83 78 84 5 89 "" [1 uses])

(note 84 83 95 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 95 84 101 5 init/initramfs.c:352 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 101 95 104 NOTE_INSN_DELETED)

(note 104 101 0 NOTE_INSN_DELETED)


;; Function maybe_link (maybe_link)[0:1326] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 137.
verify found no changes in insn with uid = 137.
deleting insn with uid = 80.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 32 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 37 (  2.3)

Pass 0 for finding allocno costs

    a9 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r167,l1) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r165,l1) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r162,l1) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r161,l1) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r145,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r142,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a16(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a19(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a24(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r161,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r170: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a16(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a19(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a24(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r161,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 124(l0): point = 0
   Insn 118(l0): point = 2
   Insn 105(l0): point = 5
   Insn 104(l0): point = 7
   Insn 106(l0): point = 9
   Insn 102(l0): point = 11
   Insn 98(l0): point = 13
   Insn 97(l0): point = 15
   Insn 100(l0): point = 17
   Insn 96(l0): point = 19
   Insn 101(l0): point = 21
   Insn 95(l0): point = 23
   Insn 91(l0): point = 26
   Insn 90(l0): point = 28
   Insn 87(l0): point = 31
   Insn 86(l0): point = 33
   Insn 83(l0): point = 35
   Insn 81(l0): point = 37
   Insn 137(l0): point = 39
   Insn 82(l0): point = 41
   Insn 134(l0): point = 44
   Insn 129(l0): point = 46
   Insn 128(l0): point = 48
   Insn 61(l0): point = 50
   Insn 60(l0): point = 52
   Insn 59(l0): point = 54
   Insn 132(l0): point = 57
   Insn 34(l0): point = 59
   Insn 32(l0): point = 61
   Insn 31(l0): point = 63
   Insn 27(l0): point = 65
   Insn 24(l0): point = 67
   Insn 25(l0): point = 69
   Insn 22(l0): point = 71
   Insn 20(l0): point = 73
   Insn 18(l0): point = 75
   Insn 30(l0): point = 77
   Insn 16(l0): point = 79
   Insn 130(l0): point = 82
   Insn 10(l0): point = 84
   Insn 8(l0): point = 87
   Insn 7(l0): point = 89
   Insn 6(l0): point = 91
   Insn 5(l0): point = 93
   Insn 77(l1): point = 96
   Insn 76(l1): point = 98
   Insn 74(l1): point = 100
   Insn 71(l1): point = 103
   Insn 56(l1): point = 106
   Insn 55(l1): point = 108
   Insn 53(l1): point = 110
   Insn 50(l1): point = 112
   Insn 48(l1): point = 115
   Insn 47(l1): point = 117
   Insn 46(l1): point = 119
   Insn 44(l1): point = 122
   Insn 43(l1): point = 124
   Insn 42(l1): point = 126
   Insn 40(l1): point = 129
   Insn 39(l1): point = 131
   Insn 38(l1): point = 133
 a0(r140): [82..84] [44..46] [3..9]
 a1(r134): [57..59] [31..43] [6..25]
 a2(r138): [31..33] [6..25]
 a3(r133): [55..56] [31..43] [8..25]
 a4(r142): [57..71] [31..43] [14..25]
 a5(r143): [57..73] [31..43] [16..25]
 a6(r144): [57..75] [31..43] [20..25]
 a7(r141): [53..67] [31..43] [22..25]
 a8(r145): [57..79] [31..43] [24..25]
 a9(r170): [38..39]
 a10(r157): [60..77]
 a11(r159): [60..61]
 a12(r158): [62..63]
 a13(r136): [64..65]
 a14(r154): [66..69]
 a15(r147): [87..93] [68..81]
 a16(r148): [90..91]
 a17(r134): [96..103]
 a18(r141): [96..135]
 a19(r142): [96..135]
 a20(r143): [96..135]
 a21(r144): [96..135]
 a22(r145): [96..135]
 a23(r133): [104..135] [96..100]
 a24(r167): [109..110]
 a25(r165): [111..112]
 a26(r163): [118..119]
 a27(r162): [125..126]
 a28(r161): [132..133]
 Rebuilding regno allocno list for 167
 Rebuilding regno allocno list for 165
 Rebuilding regno allocno list for 163
 Rebuilding regno allocno list for 162
 Rebuilding regno allocno list for 161
Compressing live ranges: from 136 to 59 - 43%
Ranges after the compression:
 a0(r140): [38..39] [15..16] [0..3]
 a1(r134): [44..46] [20..21] [10..14] [1..9]
 a2(r138): [10..11] [1..9]
 a3(r133): [47..58] [44..45] [18..19] [10..14] [2..9]
 a4(r142): [44..58] [20..32] [10..14] [4..9]
 a5(r143): [44..58] [20..33] [10..14] [5..9]
 a6(r144): [44..58] [20..34] [10..14] [6..9]
 a7(r141): [44..58] [17..29] [10..14] [7..9]
 a8(r145): [44..58] [20..36] [10..14] [8..9]
 a9(r170): [12..13]
 a10(r157): [22..35]
 a11(r159): [22..23]
 a12(r158): [24..25]
 a13(r136): [26..27]
 a14(r154): [28..31]
 a15(r147): [40..43] [30..37]
 a16(r148): [41..42]
 a24(r167): [48..49]
 a25(r165): [50..51]
 a26(r163): [52..53]
 a27(r162): [54..55]
 a28(r161): [56..57]
+++Allocating 176 bytes for conflict table (uncompressed size 232)
;; a0(r140,l0) conflicts: a2(r138,l0) a1(r134,l0) a3(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts: a0(r140,l0) a2(r138,l0) a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0) a9(r170,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r138,l0) conflicts: a0(r140,l0) a1(r134,l0) a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r133,l0) conflicts: a0(r140,l0) a2(r138,l0) a1(r134,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0) a9(r170,l0) a24(r167,l0) a25(r165,l0) a26(r163,l0) a27(r162,l0) a28(r161,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r142,l0) conflicts: a2(r138,l0) a1(r134,l0) a3(r133,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0) a9(r170,l0) a11(r159,l0) a10(r157,l0) a12(r158,l0) a13(r136,l0) a14(r154,l0) a15(r147,l0) a24(r167,l0) a25(r165,l0) a26(r163,l0) a27(r162,l0) a28(r161,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r143,l0) conflicts: a2(r138,l0) a1(r134,l0) a3(r133,l0) a4(r142,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0) a9(r170,l0) a11(r159,l0) a10(r157,l0) a12(r158,l0) a13(r136,l0) a14(r154,l0) a15(r147,l0) a24(r167,l0) a25(r165,l0) a26(r163,l0) a27(r162,l0) a28(r161,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a6(r144,l0) conflicts: a2(r138,l0) a1(r134,l0) a3(r133,l0) a4(r142,l0) a5(r143,l0) a7(r141,l0) a8(r145,l0) a9(r170,l0) a11(r159,l0) a10(r157,l0) a12(r158,l0) a13(r136,l0) a14(r154,l0) a15(r147,l0) a24(r167,l0) a25(r165,l0) a26(r163,l0) a27(r162,l0) a28(r161,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a7(r141,l0) conflicts: a2(r138,l0) a1(r134,l0) a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a8(r145,l0) a9(r170,l0) a11(r159,l0) a10(r157,l0) a12(r158,l0) a13(r136,l0) a14(r154,l0) a24(r167,l0) a25(r165,l0) a26(r163,l0) a27(r162,l0) a28(r161,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r145,l0) conflicts: a2(r138,l0) a1(r134,l0) a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a9(r170,l0) a11(r159,l0) a10(r157,l0) a12(r158,l0) a13(r136,l0) a14(r154,l0) a15(r147,l0) a24(r167,l0) a25(r165,l0) a26(r163,l0) a27(r162,l0) a28(r161,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a9(r170,l0) conflicts: a1(r134,l0) a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a10(r157,l0) conflicts: a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0) a11(r159,l0) a12(r158,l0) a13(r136,l0) a14(r154,l0) a15(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r159,l0) conflicts: a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0) a10(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r158,l0) conflicts: a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0) a10(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r136,l0) conflicts: a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0) a10(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r154,l0) conflicts: a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0) a10(r157,l0) a15(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r147,l0) conflicts: a4(r142,l0) a5(r143,l0) a6(r144,l0) a8(r145,l0) a10(r157,l0) a14(r154,l0) a16(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r148,l0) conflicts: a15(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r167,l0) conflicts: a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r165,l0) conflicts: a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r163,l0) conflicts: a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r162,l0) conflicts: a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r161,l0) conflicts: a3(r133,l0) a4(r142,l0) a5(r143,l0) a6(r144,l0) a7(r141,l0) a8(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a24(r167)<->a25(r165)@125:shuffle
  cp1:a13(r136)<->a14(r154)@125:shuffle
  cp2:a12(r158)<->a13(r136)@250:shuffle
  cp3:a11(r159)<->a12(r158)@125:shuffle
  cp4:a1(r134)<->a10(r157)@125:shuffle
  cp5:a1(r134)<->a11(r159)@125:shuffle
  regions=2, blocks=16, points=59
    allocnos=29, copies=6, conflicts=1, ranges=48

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 15 14 13 12 9 11 10 8 7 6 5 4 3 2
    all: 0r140 1r134 2r138 3r133 4r142 5r143 6r144 7r141 8r145 9r170 10r157 11r159 12r158 13r136 14r154 15r147 16r148 24r167 25r165 26r163 27r162 28r161
    modified regnos: 133 134 136 138 140 141 142 143 144 145 147 148 154 157 158 159 161 162 163 165 167 170
    border:
    Pressure: GENERAL_REGS=10
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 143 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 3 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
      Pushing a28(r161,l0)
      Pushing a27(r162,l0)
      Pushing a26(r163,l0)
      Pushing a25(r165,l0)
      Pushing a24(r167,l0)
      Pushing a14(r154,l0)
      Pushing a12(r158,l0)
      Pushing a11(r159,l0)
      Pushing a10(r157,l0)
      Pushing a13(r136,l0)
      Pushing a16(r148,l0)
      Pushing a9(r170,l0)
      Pushing a0(r140,l0)
      Pushing a15(r147,l0)
      Pushing a7(r141,l0)
      Pushing a4(r142,l0)
      Pushing a8(r145,l0)
      Pushing a6(r144,l0)
      Pushing a5(r143,l0)
      Pushing a1(r134,l0)
      Pushing a2(r138,l0)
      Pushing a3(r133,l0)
      Popping a3(r133,l0)  -- assign reg 4
      Popping a2(r138,l0)  -- assign reg 5
      Popping a1(r134,l0)  -- assign reg 6
      Popping a5(r143,l0)  -- assign reg 7
      Popping a6(r144,l0)  -- assign reg 8
      Popping a8(r145,l0)  -- assign reg 10
      Popping a4(r142,l0)  -- assign reg 9
      Popping a7(r141,l0)  -- assign reg 11
      Popping a15(r147,l0)  -- assign reg 3
      Popping a0(r140,l0)  -- assign reg 0
      Popping a9(r170,l0)  -- assign reg 3
      Popping a16(r148,l0)  -- assign reg 2
      Popping a13(r136,l0)  -- assign reg 3
      Popping a10(r157,l0)  -- assign reg 2
      Popping a11(r159,l0)  -- assign reg 6
      Popping a12(r158,l0)  -- assign reg 3
      Popping a14(r154,l0)  -- assign reg 6
      Popping a24(r167,l0)  -- assign reg 3
      Popping a25(r165,l0)  -- assign reg 3
      Popping a26(r163,l0)  -- assign reg 3
      Popping a27(r162,l0)  -- assign reg 3
      Popping a28(r161,l0)  -- assign reg 3
Disposition:
    3:r133 l0     4    1:r134 l0     6   13:r136 l0     3    2:r138 l0     5
    0:r140 l0     0    7:r141 l0    11    4:r142 l0     9    5:r143 l0     7
    6:r144 l0     8    8:r145 l0    10   15:r147 l0     3   16:r148 l0     2
   14:r154 l0     6   10:r157 l0     2   12:r158 l0     3   11:r159 l0     6
   28:r161 l0     3   27:r162 l0     3   26:r163 l0     3   25:r165 l0     3
   24:r167 l0     3    9:r170 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, 14, dead_or_set: 147
insn=6, live_throughout: 13, 14, 147, dead_or_set: 148
insn=7, live_throughout: 13, 14, 147, dead_or_set: 148
insn=8, live_throughout: 13, 14, 147, dead_or_set: 
insn=10, live_throughout: 13, 14, dead_or_set: 140
insn=130, live_throughout: 13, 14, 140, dead_or_set: 
insn=13, live_throughout: 13, 147, dead_or_set: 
insn=16, live_throughout: 13, 147, dead_or_set: 145
insn=30, live_throughout: 13, 145, 147, dead_or_set: 157
insn=18, live_throughout: 13, 145, 147, 157, dead_or_set: 144
insn=20, live_throughout: 13, 144, 145, 147, 157, dead_or_set: 143
insn=22, live_throughout: 13, 143, 144, 145, 147, 157, dead_or_set: 142
insn=25, live_throughout: 13, 142, 143, 144, 145, 147, 157, dead_or_set: 154
insn=24, live_throughout: 13, 142, 143, 144, 145, 154, 157, dead_or_set: 141, 147
insn=27, live_throughout: 13, 141, 142, 143, 144, 145, 157, dead_or_set: 136, 154
insn=31, live_throughout: 13, 141, 142, 143, 144, 145, 157, dead_or_set: 136, 158
insn=32, live_throughout: 13, 141, 142, 143, 144, 145, 157, dead_or_set: 158, 159
insn=34, live_throughout: 13, 141, 142, 143, 144, 145, dead_or_set: 134, 157, 159
insn=132, live_throughout: 13, 134, 141, 142, 143, 144, 145, dead_or_set: 
insn=75, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 
insn=38, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 161
insn=39, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 161
insn=40, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 
insn=42, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 162
insn=43, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 162
insn=44, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 
insn=46, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 163
insn=47, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 163
insn=48, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 
insn=50, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 165
insn=53, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 165, 167
insn=55, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 167
insn=56, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 
insn=59, live_throughout: 13, 141, dead_or_set: 0, 133
insn=60, live_throughout: 0, 13, dead_or_set: 1, 141
insn=61, live_throughout: 13, dead_or_set: 0, 1, 14
insn=128, live_throughout: 13, 14, dead_or_set: 0
insn=129, live_throughout: 13, 14, dead_or_set: 140
insn=134, live_throughout: 13, 14, 140, dead_or_set: 
insn=69, live_throughout: 13, 133, 141, 142, 143, 144, 145, dead_or_set: 
insn=71, live_throughout: 13, 141, 142, 143, 144, 145, dead_or_set: 133, 134
insn=72, live_throughout: 13, 134, 141, 142, 143, 144, 145, dead_or_set: 
insn=74, live_throughout: 13, 134, 141, 142, 143, 144, 145, dead_or_set: 133
insn=76, live_throughout: 13, 133, 134, 141, 142, 143, 144, 145, dead_or_set: 
insn=77, live_throughout: 13, 133, 134, 141, 142, 143, 144, 145, dead_or_set: 
insn=82, live_throughout: 13, 133, 134, 141, 142, 143, 144, 145, dead_or_set: 1
insn=137, live_throughout: 1, 13, 133, 134, 141, 142, 143, 144, 145, dead_or_set: 170
insn=81, live_throughout: 1, 13, 133, 134, 141, 142, 143, 144, 145, dead_or_set: 0, 170
insn=83, live_throughout: 13, 133, 134, 141, 142, 143, 144, 145, dead_or_set: 0, 1, 14
insn=86, live_throughout: 13, 133, 134, 141, 142, 143, 144, 145, dead_or_set: 0, 138
insn=87, live_throughout: 13, 133, 134, 138, 141, 142, 143, 144, 145, dead_or_set: 
insn=90, live_throughout: 13, dead_or_set: 0
insn=91, live_throughout: 13, dead_or_set: 0, 14
insn=93, live_throughout: 13, 133, 134, 138, 141, 142, 143, 144, 145, dead_or_set: 
insn=95, live_throughout: 13, 133, 134, 138, 141, 142, 143, 144, dead_or_set: 145
insn=101, live_throughout: 13, 133, 134, 138, 142, 143, 144, dead_or_set: 1, 141
insn=96, live_throughout: 1, 13, 133, 134, 138, 142, 143, dead_or_set: 144
insn=100, live_throughout: 1, 13, 133, 134, 138, 142, 143, dead_or_set: 0
insn=97, live_throughout: 0, 1, 13, 133, 134, 138, 142, dead_or_set: 143
insn=98, live_throughout: 0, 1, 13, 133, 134, 138, dead_or_set: 142
insn=102, live_throughout: 13, 133, 134, 138, dead_or_set: 0, 1, 14
insn=106, live_throughout: 13, 14, 133, 134, 138, dead_or_set: 140
insn=104, live_throughout: 13, 14, 134, 138, 140, dead_or_set: 133
insn=105, live_throughout: 13, 14, 140, dead_or_set: 134, 138
insn=112, live_throughout: 13, 14, 140, dead_or_set: 
insn=118, live_throughout: 13, 14, dead_or_set: 0, 140
insn=124, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 147: (insn_list:REG_DEP_TRUE 5 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 30 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 38 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 42 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 46 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 137 (nil))
changing reg in insn 74
changing reg in insn 59
changing reg in insn 106
changing reg in insn 104
changing reg in insn 76
changing reg in insn 71
changing reg in insn 50
changing reg in insn 46
changing reg in insn 42
changing reg in insn 38
changing reg in insn 46
changing reg in insn 42
changing reg in insn 38
changing reg in insn 34
changing reg in insn 71
changing reg in insn 105
changing reg in insn 74
changing reg in insn 27
changing reg in insn 31
changing reg in insn 31
changing reg in insn 86
changing reg in insn 100
changing reg in insn 105
changing reg in insn 104
changing reg in insn 98
changing reg in insn 97
changing reg in insn 96
changing reg in insn 95
changing reg in insn 106
changing reg in insn 129
changing reg in insn 10
changing reg in insn 118
changing reg in insn 24
changing reg in insn 101
changing reg in insn 60
changing reg in insn 22
changing reg in insn 53
changing reg in insn 20
changing reg in insn 97
changing reg in insn 39
changing reg in insn 25
changing reg in insn 18
changing reg in insn 96
changing reg in insn 43
changing reg in insn 25
changing reg in insn 16
changing reg in insn 27
changing reg in insn 95
changing reg in insn 47
changing reg in insn 5
changing reg in insn 30
changing reg in insn 24
changing reg in insn 22
changing reg in insn 20
changing reg in insn 18
changing reg in insn 16
changing reg in insn 6
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 25
changing reg in insn 27
changing reg in insn 30
changing reg in insn 34
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 137
changing reg in insn 81
Spilling for insn 95.
Spilling for insn 96.
Spilling for insn 97.
Spilling for insn 98.
Spilling for insn 104.
Spilling for insn 105.

Reloads for insn # 95
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                                                        (const_int 8 [0x8])) [0 <variable>.major+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                                                        (const_int 8 [0x8])) [0 <variable>.major+0 S4 A32])

Reloads for insn # 96
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                                                        (const_int 4 [0x4])) [0 <variable>.minor+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                                                        (const_int 4 [0x4])) [0 <variable>.minor+0 S4 A32])

Reloads for insn # 97
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138]) [0 <variable>.ino+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138]) [0 <variable>.ino+0 S4 A32])

Reloads for insn # 98
Reload 0: reload_out (HI) = (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                                                        (const_int 12 [0xc])) [0 <variable>.mode+0 S2 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                                                        (const_int 12 [0xc])) [0 <variable>.mode+0 S2 A32])

Reloads for insn # 104
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                                                        (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                                                        (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])

Reloads for insn # 105
Reload 0: reload_out (SI) = (mem/f:SI (reg/v/f:SI 6 r6 [orig:134 p ] [134]) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f:SI (reg/v/f:SI 6 r6 [orig:134 p ] [134]) [0 S4 A32])
deleting insn with uid = 118.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 102.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 32 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 37 (  2.3)


maybe_link

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,9u} r1={8d,3u} r2={7d,2u} r3={14d,16u,1d} r4={1d,9u,3d} r5={1d,7u} r6={4d,4u} r7={1d,3u} r8={1d,3u} r9={1d,2u} r10={1d,3u} r11={1d,2u} r12={5d} r13={1d,19u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={12d,8u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 610{515d,91u,4e} in 60{56 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 init/initramfs.c:271 (set (reg/f:SI 3 r3 [147])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 7 2 init/initramfs.c:271 (set (reg:SI 2 r2 [orig:148 nlink ] [148])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 200 [0xc8])) [0 nlink+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 200 [0xc8])) [0 nlink+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 200 [0xc8]))) [0 nlink+0 S4 A32])
            (nil))))

(insn 7 6 8 2 init/initramfs.c:271 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:148 nlink ] [148])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 init/initramfs.c:271 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 130 3 init/initramfs.c:276 (set (reg:SI 0 r0 [orig:140 D.25953 ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 130 10 131 3 (set (pc)
        (label_ref 112)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 15)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  15 [100.0%] 

(barrier 131 130 13)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	

;; Pred edge  2 [0.0%] 
(code_label 13 131 14 4 94 "" [1 uses])

(note 14 13 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 26 14 28 4 NOTE_INSN_DELETED)

(note 28 26 33 4 NOTE_INSN_DELETED)

(note 33 28 16 4 NOTE_INSN_DELETED)

(insn 16 33 30 4 init/initramfs.c:272 (set (reg:SI 10 sl [orig:145 major.364 ] [145])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 204 [0xcc])) [0 major+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 204 [0xcc]))) [0 major+0 S4 A32])
        (nil)))

(insn 30 16 18 4 init/initramfs.c:41 (set (reg/f:SI 2 r2 [157])
        (plus:SI (reg/f:SI 3 r3 [147])
            (const_int 220 [0xdc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 220 [0xdc])))
        (nil)))

(insn 18 30 20 4 init/initramfs.c:272 (set (reg:SI 8 r8 [orig:144 minor.366 ] [144])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 208 [0xd0])) [0 minor+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 208 [0xd0]))) [0 minor+0 S4 A32])
        (nil)))

(insn 20 18 22 4 init/initramfs.c:272 (set (reg:SI 7 r7 [orig:143 ino.368 ] [143])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 212 [0xd4])) [0 ino+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 212 [0xd4]))) [0 ino+0 S4 A32])
        (nil)))

(insn 22 20 25 4 init/initramfs.c:272 (set (reg:SI 9 r9 [orig:142 mode.369 ] [142])
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 3 r3 [147])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/c/i:HI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 216 [0xd8]))) [0 mode+0 S2 A16]))
        (nil)))

(insn 25 22 24 4 init/initramfs.c:32 (set (reg:SI 6 r6 [154])
        (plus:SI (reg:SI 7 r7 [orig:143 ino.368 ] [143])
            (reg:SI 8 r8 [orig:144 minor.366 ] [144]))) 4 {*arm_addsi3} (nil))

(insn 24 25 27 4 init/initramfs.c:272 (set (reg/f:SI 11 fp [orig:141 collected.370 ] [141])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(insn 27 24 31 4 init/initramfs.c:32 (set (reg/v:SI 3 r3 [orig:136 tmp ] [136])
        (plus:SI (mult:SI (reg:SI 10 sl [orig:145 major.364 ] [145])
                (const_int 8 [0x8]))
            (reg:SI 6 r6 [154]))) 270 {*arith_shiftsi} (nil))

(insn 31 27 32 4 init/initramfs.c:41 (set (reg:SI 3 r3 [158])
        (plus:SI (lshiftrt:SI (reg/v:SI 3 r3 [orig:136 tmp ] [136])
                (const_int 5 [0x5]))
            (reg/v:SI 3 r3 [orig:136 tmp ] [136]))) 270 {*arith_shiftsi} (nil))

(insn 32 31 34 4 init/initramfs.c:41 (set (reg:SI 6 r6 [159])
        (and:SI (reg:SI 3 r3 [158])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (nil))

(insn 34 32 132 4 init/initramfs.c:41 (set (reg/v/f:SI 6 r6 [orig:134 p ] [134])
        (plus:SI (mult:SI (reg:SI 6 r6 [159])
                (const_int 4 [0x4]))
            (reg/f:SI 2 r2 [157]))) 270 {*arith_shiftsi} (nil))

(jump_insn 132 34 133 4 (set (pc)
        (label_ref 72)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 11)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 133 132 75)

;; Start of basic block ( 11) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  11 [95.5%] 
(code_label 75 133 37 5 99 "" [1 uses])

(note 37 75 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 5 init/initramfs.c:42 (set (reg:SI 3 r3 [orig:161 <variable>.ino ] [161])
        (mem/s/j:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133]) [0 <variable>.ino+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133]) [0 <variable>.ino+0 S4 A32])
        (nil)))

(insn 39 38 40 5 init/initramfs.c:42 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:161 <variable>.ino ] [161])
            (reg:SI 7 r7 [orig:143 ino.368 ] [143]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 40 39 41 5 init/initramfs.c:42 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 5 -> ( 10 6)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [72.0%] 
;; Succ edge  6 [28.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [28.0%]  (fallthru)
(note 41 40 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 6 init/initramfs.c:44 (set (reg:SI 3 r3 [orig:162 <variable>.minor ] [162])
        (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                (const_int 4 [0x4])) [0 <variable>.minor+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                (const_int 4 [0x4])) [0 <variable>.minor+0 S4 A32])
        (nil)))

(insn 43 42 44 6 init/initramfs.c:44 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:162 <variable>.minor ] [162])
            (reg:SI 8 r8 [orig:144 minor.366 ] [144]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 44 43 45 6 init/initramfs.c:44 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 6 -> ( 10 7)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [72.0%] 
;; Succ edge  7 [28.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [28.0%]  (fallthru)
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 7 init/initramfs.c:46 (set (reg:SI 3 r3 [orig:163 <variable>.major ] [163])
        (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                (const_int 8 [0x8])) [0 <variable>.major+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                (const_int 8 [0x8])) [0 <variable>.major+0 S4 A32])
        (nil)))

(insn 47 46 48 7 init/initramfs.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:163 <variable>.major ] [163])
            (reg:SI 10 sl [orig:145 major.364 ] [145]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 48 47 49 7 init/initramfs.c:46 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 7 -> ( 10 8)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [72.0%] 
;; Succ edge  8 [28.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  7 [28.0%]  (fallthru)
(note 49 48 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 52 49 54 8 NOTE_INSN_DELETED)

(note 54 52 50 8 NOTE_INSN_DELETED)

(insn 50 54 53 8 init/initramfs.c:48 (set (reg:SI 3 r3 [orig:165 <variable>.mode ] [165])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                    (const_int 12 [0xc])) [0 <variable>.mode+0 S2 A32]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 53 50 55 8 init/initramfs.c:48 (set (reg:SI 3 r3 [167])
        (xor:SI (reg:SI 9 r9 [orig:142 mode.369 ] [142])
            (reg:SI 3 r3 [orig:165 <variable>.mode ] [165]))) 96 {*arm_xorsi3} (nil))

(insn 55 53 56 8 init/initramfs.c:48 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [167])
                        (const_int 61440 [0xf000]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 56 55 57 8 init/initramfs.c:48 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru,loop_exit)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [50.0%]  (fallthru,loop_exit)
(note 57 56 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 58 57 62 9 NOTE_INSN_DELETED)

(note 62 58 59 9 NOTE_INSN_DELETED)

(insn 59 62 60 9 init/initramfs.c:274 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
            (const_int 20 [0x14]))) 4 {*arm_addsi3} (nil))

(insn 60 59 61 9 init/initramfs.c:274 (set (reg:SI 1 r1)
        (reg/f:SI 11 fp [orig:141 collected.370 ] [141])) 167 {*arm_movsi_insn} (nil))

(call_insn 61 60 128 9 init/initramfs.c:274 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_link") [flags 0x41] <function_decl 0x11458c00 sys_link>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 128 61 129 9 init/initramfs.c:274 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 129 128 134 9 init/initramfs.c:274 discrim 2 (set (reg:SI 0 r0 [orig:140 D.25953 ] [140])
        (if_then_else:SI (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int -1 [0xffffffffffffffff])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (nil))

(jump_insn 134 129 135 9 (set (pc)
        (label_ref 112)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 15)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 135 134 69)

;; Start of basic block ( 5 6 7 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  5 [72.0%] 
;; Pred edge  6 [72.0%] 
;; Pred edge  7 [72.0%] 
;; Pred edge  8 [50.0%] 
(code_label 69 135 70 10 97 "" [4 uses])

(note 70 69 71 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 72 10 init/initramfs.c:41 (set (reg/v/f:SI 6 r6 [orig:134 p ] [134])
        (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 10 4) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru,dfs_back)
;; Pred edge  4 [100.0%] 
(code_label 72 71 73 11 96 "" [1 uses])

(note 73 72 74 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 74 73 76 11 init/initramfs.c:41 discrim 1 (set (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
        (mem/f:SI (reg/v/f:SI 6 r6 [orig:134 p ] [134]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 76 74 77 11 init/initramfs.c:41 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 77 76 79 11 init/initramfs.c:41 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 11 -> ( 5 12)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  5 [95.5%] 
;; Succ edge  12 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [4.5%]  (fallthru,loop_exit)
(note 79 77 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 78 79 84 12 ("found") NOTE_INSN_DELETED_LABEL 100)

(note 84 78 82 12 NOTE_INSN_DELETED)

(insn 82 84 137 12 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn 137 82 81 12 include/linux/slab_def.h:122 (set (reg/f:SI 3 r3 [170])
        (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
        (nil)))

(insn 81 137 83 12 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [170])
                (const_int 84 [0x54])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                    (const_int 84 [0x54]))) [0 <variable>.cs_cachep+0 S4 A32])
        (nil)))

(call_insn 83 81 86 12 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 86 83 87 12 init/initramfs.c:53 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 87 86 88 12 init/initramfs.c:53 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [0.0%]  (fallthru)
;; Succ edge  14 [100.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  12 [0.0%]  (fallthru)
(note 88 87 90 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 90 88 91 13 init/initramfs.c:54 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x115c7780>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x115c7780>)
        (nil)))

(call_insn 91 90 92 13 init/initramfs.c:54 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a86f00 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 13 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 92 91 93)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%] 
(code_label 93 92 94 14 101 "" [1 uses])

(note 94 93 99 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 99 94 95 14 NOTE_INSN_DELETED)

(insn 95 99 101 14 init/initramfs.c:55 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (const_int 8 [0x8])) [0 <variable>.major+0 S4 A32])
        (reg:SI 10 sl [orig:145 major.364 ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 101 95 96 14 init/initramfs.c:59 (set (reg:SI 1 r1)
        (reg/f:SI 11 fp [orig:141 collected.370 ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 96 101 100 14 init/initramfs.c:56 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (const_int 4 [0x4])) [0 <variable>.minor+0 S4 A32])
        (reg:SI 8 r8 [orig:144 minor.366 ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 100 96 97 14 init/initramfs.c:59 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
            (const_int 20 [0x14]))) 4 {*arm_addsi3} (nil))

(insn 97 100 98 14 init/initramfs.c:57 (set (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138]) [0 <variable>.ino+0 S4 A32])
        (reg:SI 7 r7 [orig:143 ino.368 ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 98 97 102 14 init/initramfs.c:58 (set (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (const_int 12 [0xc])) [0 <variable>.mode+0 S2 A32])
        (reg:HI 9 r9 [orig:142 mode.369 ] [142])) 176 {*movhi_insn_arch4} (nil))

(call_insn 102 98 106 14 init/initramfs.c:59 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcpy") [flags 0x41] <function_decl 0x51157780 strcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 106 102 104 14 init/initramfs.c:276 (set (reg:SI 0 r0 [orig:140 D.25953 ] [140])
        (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 104 106 105 14 init/initramfs.c:60 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 105 104 112 14 init/initramfs.c:61 (set (mem/f:SI (reg/v/f:SI 6 r6 [orig:134 p ] [134]) [0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:138 ret ] [138])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 3 14 9) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%] 
;; Pred edge  14 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 112 105 113 15 95 "" [2 uses])

(note 113 112 124 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 124 113 136 15 init/initramfs.c:277 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 136 124 138 NOTE_INSN_DELETED)

(note 138 136 0 NOTE_INSN_DELETED)


;; Function do_name (do_name)[0:1328] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 307.
verify found no changes in insn with uid = 307.
deleting insn with uid = 182.
scanning new insn with uid = 308.
verify found no changes in insn with uid = 308.
deleting insn with uid = 287.
scanning new insn with uid = 309.
verify found no changes in insn with uid = 309.
deleting insn with uid = 39.
scanning new insn with uid = 310.
verify found no changes in insn with uid = 310.
deleting insn with uid = 36.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 41 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 47 (    2)

Pass 0 for finding allocno costs

    a23 (r249,l1) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r249,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r248,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r235,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r226,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r209,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r192,l1) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r170,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r164,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r235,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a1(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a2(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:260000
  a3(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a4(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r248,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a15(r172,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a16(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a23(r249,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a25(r192,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r249: preferred GENERAL_REGS, alternative NO_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS

  a0(r235,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a1(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a2(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:260000
  a3(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a4(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r248,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a15(r172,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a16(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a23(r249,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a25(r192,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 281(l0): point = 0
   Insn 275(l0): point = 2
   Insn 268(l0): point = 5
   Insn 266(l0): point = 7
   Insn 267(l0): point = 9
   Insn 263(l0): point = 11
   Insn 261(l0): point = 13
   Insn 262(l0): point = 15
   Insn 257(l0): point = 17
   Insn 254(l0): point = 19
   Insn 256(l0): point = 21
   Insn 255(l0): point = 23
   Insn 250(l0): point = 25
   Insn 247(l0): point = 27
   Insn 249(l0): point = 29
   Insn 248(l0): point = 31
   Insn 243(l0): point = 33
   Insn 241(l0): point = 36
   Insn 240(l0): point = 38
   Insn 238(l0): point = 40
   Insn 235(l0): point = 43
   Insn 234(l0): point = 45
   Insn 232(l0): point = 48
   Insn 231(l0): point = 50
   Insn 229(l0): point = 53
   Insn 228(l0): point = 55
   Insn 303(l0): point = 58
   Insn 214(l0): point = 60
   Insn 212(l0): point = 62
   Insn 209(l0): point = 64
   Insn 208(l0): point = 66
   Insn 207(l0): point = 68
   Insn 204(l0): point = 70
   Insn 205(l0): point = 72
   Insn 295(l0): point = 74
   Insn 202(l0): point = 76
   Insn 201(l0): point = 78
   Insn 199(l0): point = 80
   Insn 200(l0): point = 82
   Insn 198(l0): point = 84
   Insn 193(l0): point = 87
   Insn 192(l0): point = 89
   Insn 189(l0): point = 92
   Insn 188(l0): point = 94
   Insn 185(l0): point = 96
   Insn 183(l0): point = 98
   Insn 307(l0): point = 100
   Insn 179(l0): point = 102
   Insn 177(l0): point = 104
   Insn 184(l0): point = 106
   Insn 175(l0): point = 108
   Insn 173(l0): point = 110
   Insn 174(l0): point = 112
   Insn 169(l0): point = 114
   Insn 166(l0): point = 116
   Insn 167(l0): point = 118
   Insn 168(l0): point = 120
   Insn 162(l0): point = 122
   Insn 160(l0): point = 124
   Insn 161(l0): point = 126
   Insn 157(l0): point = 129
   Insn 156(l0): point = 131
   Insn 301(l0): point = 134
   Insn 148(l0): point = 136
   Insn 151(l0): point = 138
   Insn 150(l0): point = 140
   Insn 145(l0): point = 142
   Insn 143(l0): point = 144
   Insn 144(l0): point = 146
   Insn 142(l0): point = 148
   Insn 139(l0): point = 151
   Insn 138(l0): point = 153
   Insn 137(l0): point = 155
   Insn 134(l0): point = 158
   Insn 133(l0): point = 160
   Insn 132(l0): point = 162
   Insn 130(l0): point = 164
   Insn 129(l0): point = 166
   Insn 128(l0): point = 168
   Insn 124(l0): point = 170
   Insn 123(l0): point = 172
   Insn 122(l0): point = 174
   Insn 117(l0): point = 177
   Insn 115(l0): point = 179
   Insn 116(l0): point = 181
   Insn 113(l0): point = 183
   Insn 112(l0): point = 185
   Insn 111(l0): point = 187
   Insn 110(l0): point = 189
   Insn 308(l0): point = 191
   Insn 109(l0): point = 193
   Insn 93(l0): point = 196
   Insn 92(l0): point = 198
   Insn 90(l0): point = 200
   Insn 88(l0): point = 203
   Insn 87(l0): point = 205
   Insn 86(l0): point = 207
   Insn 85(l0): point = 209
   Insn 83(l0): point = 211
   Insn 82(l0): point = 213
   Insn 81(l0): point = 215
   Insn 299(l0): point = 218
   Insn 296(l0): point = 221
   Insn 65(l0): point = 223
   Insn 52(l0): point = 225
   Insn 50(l0): point = 228
   Insn 49(l0): point = 230
   Insn 46(l0): point = 232
   Insn 40(l0): point = 234
   Insn 309(l0): point = 236
   Insn 44(l0): point = 238
   Insn 37(l0): point = 240
   Insn 310(l0): point = 242
   Insn 42(l0): point = 244
   Insn 45(l0): point = 246
   Insn 35(l0): point = 248
   Insn 73(l1): point = 251
   Insn 72(l1): point = 253
   Insn 71(l1): point = 255
   Insn 69(l1): point = 258
   Insn 68(l1): point = 260
   Insn 66(l1): point = 262
   Insn 61(l1): point = 265
   Insn 59(l1): point = 267
   Insn 60(l1): point = 269
   Insn 58(l1): point = 271
 a0(r235): [8..33]
 a1(r178): [203..207] [129..133] [46..57]
 a2(r183): [224..248] [156..217] [92..133] [61..86]
 a3(r168): [92..94] [61..86]
 a4(r226): [63..74]
 a5(r169): [65..68]
 a6(r174): [92..102] [73..86]
 a7(r163): [92..104] [83..86]
 a8(r222): [99..100]
 a9(r179): [203..209] [127..133]
 a10(r209): [137..148]
 a11(r212): [139..140]
 a12(r176): [154..162]
 a13(r177): [180..183]
 a14(r248): [190..191]
 a15(r172): [190..198]
 a16(r181): [228..244] [216..217]
 a17(r249): [221..223]
 a18(r164): [221..225]
 a19(r189): [226..230]
 a20(r186): [235..236]
 a21(r184): [241..242]
 a22(r164): [251..273]
 a23(r249): [251..273]
 a24(r170): [270..273] [258..262]
 a25(r192): [268..271]
 Rebuilding regno allocno list for 192
 Rebuilding regno allocno list for 170
Compressing live ranges: from 274 to 58 - 21%
Ranges after the compression:
 a0(r235): [0..1]
 a1(r178): [33..34] [19..20] [2..3]
 a2(r183): [40..50] [26..37] [12..20] [4..11]
 a3(r168): [12..13] [4..11]
 a4(r226): [5..9]
 a5(r169): [6..7]
 a6(r174): [12..16] [8..11]
 a7(r163): [12..17] [10..11]
 a8(r222): [14..15]
 a9(r179): [33..35] [18..20]
 a10(r209): [21..24]
 a11(r212): [22..23]
 a12(r176): [25..27]
 a13(r177): [28..29]
 a14(r248): [30..31]
 a15(r172): [30..32]
 a16(r181): [43..49] [36..37]
 a17(r249): [51..57] [38..39]
 a18(r164): [51..57] [38..41]
 a19(r189): [42..44]
 a20(r186): [45..46]
 a21(r184): [47..48]
 a24(r170): [55..57] [52..53]
 a25(r192): [54..56]
+++Allocating 184 bytes for conflict table (uncompressed size 208)
;; a0(r235,l0) conflicts:
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r178,l0) conflicts: a2(r183,l0) a9(r179,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r183,l0) conflicts: a1(r178,l0) a3(r168,l0) a4(r226,l0) a5(r169,l0) a6(r174,l0) a7(r163,l0) a8(r222,l0) a9(r179,l0) a12(r176,l0) a13(r177,l0) a14(r248,l0) a15(r172,l0) a16(r181,l0) a18(r164,l0) a19(r189,l0) a20(r186,l0) a21(r184,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r168,l0) conflicts: a2(r183,l0) a4(r226,l0) a5(r169,l0) a6(r174,l0) a7(r163,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r226,l0) conflicts: a3(r168,l0) a2(r183,l0) a5(r169,l0) a6(r174,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a5(r169,l0) conflicts: a3(r168,l0) a2(r183,l0) a4(r226,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r174,l0) conflicts: a3(r168,l0) a2(r183,l0) a4(r226,l0) a7(r163,l0) a8(r222,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a7(r163,l0) conflicts: a3(r168,l0) a2(r183,l0) a6(r174,l0) a8(r222,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r222,l0) conflicts: a2(r183,l0) a6(r174,l0) a7(r163,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a9(r179,l0) conflicts: a1(r178,l0) a2(r183,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r209,l0) conflicts: a11(r212,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a11(r212,l0) conflicts: a10(r209,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a12(r176,l0) conflicts: a2(r183,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a13(r177,l0) conflicts: a2(r183,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a14(r248,l0) conflicts: a2(r183,l0) a15(r172,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a15(r172,l0) conflicts: a2(r183,l0) a14(r248,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a16(r181,l0) conflicts: a2(r183,l0) a19(r189,l0) a20(r186,l0) a21(r184,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a17(r249,l0) conflicts: a18(r164,l0) a24(r170,l0) a25(r192,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a18(r164,l0) conflicts: a2(r183,l0) a17(r249,l0) a24(r170,l0) a25(r192,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a19(r189,l0) conflicts: a2(r183,l0) a16(r181,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r186,l0) conflicts: a2(r183,l0) a16(r181,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a21(r184,l0) conflicts: a2(r183,l0) a16(r181,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a24(r170,l0) conflicts: a17(r249,l0) a18(r164,l0) a25(r192,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r192,l0) conflicts: a17(r249,l0) a18(r164,l0) a24(r170,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  cp0:a18(r164)<->a19(r189)@1000:move
  cp1:a2(r183)<->a17(r249)@125:shuffle
  regions=2, blocks=24, points=58
    allocnos=26, copies=2, conflicts=4, ranges=37

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r235 1r178 2r183 3r168 4r226 5r169 6r174 7r163 8r222 9r179 10r209 11r212 12r176 13r177 14r248 15r172 16r181 17r249 18r164 19r189 20r186 21r184 24r170 25r192
    modified regnos: 163 164 168 169 170 172 174 176 177 178 179 181 183 184 186 189 192 209 212 222 226 235 248 249
    border:
    Pressure: GENERAL_REGS=6
    Reg 235 of GENERAL_REGS has 4 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 183 of GENERAL_REGS has 4 regs less
    Reg 168 of GENERAL_REGS has 3 regs less
    Reg 226 of GENERAL_REGS has 2 regs less
    Reg 169 of GENERAL_REGS has 1 regs less
    Reg 174 of GENERAL_REGS has 3 regs less
    Reg 163 of GENERAL_REGS has 3 regs less
    Reg 222 of GENERAL_REGS has 1 regs less
    Reg 179 of GENERAL_REGS has 1 regs less
    Reg 209 of GENERAL_REGS has 3 regs less
    Reg 212 of GENERAL_REGS has 2 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 177 of GENERAL_REGS has 2 regs less
    Reg 248 of GENERAL_REGS has 1 regs less
    Reg 172 of GENERAL_REGS has 2 regs less
    Reg 181 of GENERAL_REGS has 3 regs less
    Reg 249 of GENERAL_REGS has 2 regs less
    Reg 164 of GENERAL_REGS has 2 regs less
    Reg 189 of GENERAL_REGS has 1 regs less
    Reg 186 of GENERAL_REGS has 2 regs less
    Reg 184 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 192 of GENERAL_REGS has 1 regs less
      Pushing a25(r192,l0)
      Pushing a21(r184,l0)
      Pushing a19(r189,l0)
      Pushing a14(r248,l0)
      Pushing a8(r222,l0)
      Pushing a12(r176,l0)
      Pushing a9(r179,l0)
      Pushing a5(r169,l0)
      Pushing a24(r170,l0)
      Pushing a1(r178,l0)
      Pushing a20(r186,l0)
      Pushing a15(r172,l0)
      Pushing a11(r212,l0)
      Pushing a17(r249,l0)
      Pushing a13(r177,l0)
      Pushing a4(r226,l0)
      Pushing a18(r164,l0)
      Pushing a7(r163,l0)
      Pushing a6(r174,l0)
      Pushing a16(r181,l0)
      Pushing a10(r209,l0)
      Pushing a3(r168,l0)
      Pushing a0(r235,l0)
      Pushing a2(r183,l0)
      Popping a2(r183,l0)  -- assign reg 4
      Popping a0(r235,l0)  -- assign reg 4
      Popping a3(r168,l0)  -- assign reg 5
      Popping a10(r209,l0)  -- assign reg 4
      Popping a16(r181,l0)  -- assign reg 5
      Popping a6(r174,l0)  -- assign reg 6
      Popping a7(r163,l0)  -- assign reg 7
      Popping a18(r164,l0)  -- assign reg 5
      Popping a4(r226,l0)  -- assign reg 3
      Popping a13(r177,l0)  -- assign reg 3
      Popping a17(r249,l0)  -- assign reg 4
      Popping a11(r212,l0)  -- assign reg 3
      Popping a15(r172,l0)  -- assign reg 3
      Popping a20(r186,l0)  -- assign reg 3
      Popping a1(r178,l0)  -- assign reg 3
      Popping a24(r170,l0)  -- assign reg 0
      Popping a5(r169,l0)  -- assign reg 2
      Popping a9(r179,l0)  -- assign reg 1
      Popping a12(r176,l0)  -- assign reg 1
      Popping a8(r222,l0)  -- assign reg 3
      Popping a14(r248,l0)  -- assign reg 1
      Popping a19(r189,l0)  -- assign reg 0
      Popping a21(r184,l0)  -- assign reg 3
      Popping a25(r192,l0)  -- assign reg 3
Disposition:
    7:r163 l0     7   18:r164 l0     5    3:r168 l0     5    5:r169 l0     2
   24:r170 l0     0   15:r172 l0     3    6:r174 l0     6   12:r176 l0     1
   13:r177 l0     3    1:r178 l0     3    9:r179 l0     1   16:r181 l0     5
    2:r183 l0     4   21:r184 l0     3   20:r186 l0     3   19:r189 l0     0
   25:r192 l0     3   10:r209 l0     4   11:r212 l0     3    8:r222 l0     3
    4:r226 l0     3    0:r235 l0     4   14:r248 l0     1   17:r249 l0     4
New iteration of spill/restore move
+++Costs: overall -8500, reg -8500, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=35, live_throughout: 13, dead_or_set: 183
insn=45, live_throughout: 13, 183, dead_or_set: 1
insn=42, live_throughout: 1, 13, 183, dead_or_set: 181
insn=310, live_throughout: 1, 13, 181, 183, dead_or_set: 184
insn=37, live_throughout: 1, 13, 181, 183, dead_or_set: 184
insn=44, live_throughout: 1, 13, 181, 183, dead_or_set: 0
insn=309, live_throughout: 0, 1, 13, 181, 183, dead_or_set: 186
insn=40, live_throughout: 0, 1, 13, 181, 183, dead_or_set: 186
insn=46, live_throughout: 13, 181, 183, dead_or_set: 0, 1, 14
insn=49, live_throughout: 13, 14, 181, 183, dead_or_set: 0, 189
insn=50, live_throughout: 13, 14, 181, 183, 189, dead_or_set: 
insn=52, live_throughout: 13, 14, 183, dead_or_set: 164, 189
insn=65, live_throughout: 13, 14, 164, dead_or_set: 183, 249
insn=296, live_throughout: 13, 14, 164, 249, dead_or_set: 
insn=67, live_throughout: 13, 164, 170, 249, dead_or_set: 
insn=58, live_throughout: 13, 164, 170, 249, dead_or_set: 192
insn=60, live_throughout: 13, 164, 192, 249, dead_or_set: 0, 170
insn=59, live_throughout: 0, 13, 164, 249, dead_or_set: 192
insn=61, live_throughout: 13, 164, 249, dead_or_set: 0, 14
insn=294, live_throughout: 13, 14, 164, 249, dead_or_set: 
insn=66, live_throughout: 13, 14, 164, 249, dead_or_set: 170
insn=68, live_throughout: 13, 14, 164, 170, 249, dead_or_set: 
insn=69, live_throughout: 13, 14, 164, 170, 249, dead_or_set: 
insn=71, live_throughout: 13, 14, 249, dead_or_set: 164
insn=72, live_throughout: 13, 14, 164, 249, dead_or_set: 
insn=73, live_throughout: 13, 14, 164, 249, dead_or_set: 
insn=299, live_throughout: 13, 14, dead_or_set: 
insn=77, live_throughout: 13, 181, 183, dead_or_set: 
insn=81, live_throughout: 13, 183, dead_or_set: 0, 181
insn=82, live_throughout: 0, 13, 183, dead_or_set: 1
insn=83, live_throughout: 13, 183, dead_or_set: 0, 1, 14
insn=85, live_throughout: 13, 14, 183, dead_or_set: 179
insn=86, live_throughout: 13, 14, 179, 183, dead_or_set: 178
insn=87, live_throughout: 13, 14, 178, 179, 183, dead_or_set: 
insn=88, live_throughout: 13, 14, 178, 179, 183, dead_or_set: 
insn=90, live_throughout: 13, 183, dead_or_set: 0, 14
insn=92, live_throughout: 13, 14, 183, dead_or_set: 0, 172
insn=93, live_throughout: 13, 14, 172, 183, dead_or_set: 
insn=109, live_throughout: 13, 172, 183, dead_or_set: 0
insn=308, live_throughout: 0, 13, 172, 183, dead_or_set: 248
insn=110, live_throughout: 0, 13, 183, dead_or_set: 1, 172, 248
insn=111, live_throughout: 0, 1, 13, 183, dead_or_set: 2
insn=112, live_throughout: 13, 183, dead_or_set: 0, 1, 2, 14
insn=113, live_throughout: 0, 13, 14, 183, dead_or_set: 177
insn=116, live_throughout: 0, 13, 14, 177, 183, dead_or_set: 
insn=115, live_throughout: 0, 13, 14, 24, 183, dead_or_set: 177
insn=117, live_throughout: 0, 13, 14, 183, dead_or_set: 
insn=122, live_throughout: 0, 13, 183, dead_or_set: 1
insn=123, live_throughout: 0, 1, 13, 183, dead_or_set: 2
insn=124, live_throughout: 13, 183, dead_or_set: 0, 1, 2, 14
insn=128, live_throughout: 13, 183, dead_or_set: 0
insn=129, live_throughout: 0, 13, 183, dead_or_set: 1
insn=130, live_throughout: 13, 183, dead_or_set: 0, 1, 14
insn=132, live_throughout: 13, 183, dead_or_set: 176
insn=133, live_throughout: 13, 176, 183, dead_or_set: 
insn=134, live_throughout: 13, 176, 183, dead_or_set: 
insn=137, live_throughout: 13, 176, dead_or_set: 0, 183
insn=138, live_throughout: 0, 13, dead_or_set: 1, 176
insn=139, live_throughout: 13, dead_or_set: 0, 1, 14
insn=140, live_throughout: 13, dead_or_set: 
insn=142, live_throughout: 13, dead_or_set: 209
insn=144, live_throughout: 13, 209, dead_or_set: 1
insn=143, live_throughout: 1, 13, 209, dead_or_set: 0
insn=145, live_throughout: 13, 209, dead_or_set: 0, 1, 14
insn=150, live_throughout: 0, 13, 14, 209, dead_or_set: 212
insn=151, live_throughout: 0, 13, 14, 209, dead_or_set: 212
insn=148, live_throughout: 13, 14, dead_or_set: 0, 209
insn=301, live_throughout: 13, 14, dead_or_set: 
insn=154, live_throughout: 13, 14, 178, 179, 183, dead_or_set: 
insn=156, live_throughout: 13, 14, 178, 179, 183, dead_or_set: 
insn=157, live_throughout: 13, 14, 178, 179, 183, dead_or_set: 
insn=161, live_throughout: 13, 183, dead_or_set: 1, 179
insn=160, live_throughout: 1, 13, 183, dead_or_set: 0
insn=162, live_throughout: 13, 183, dead_or_set: 0, 1, 14
insn=168, live_throughout: 13, 183, dead_or_set: 2
insn=167, live_throughout: 2, 13, 183, dead_or_set: 1
insn=166, live_throughout: 1, 2, 13, 183, dead_or_set: 0
insn=169, live_throughout: 13, 183, dead_or_set: 0, 1, 2, 14
insn=174, live_throughout: 13, 183, dead_or_set: 1
insn=173, live_throughout: 1, 13, 183, dead_or_set: 0
insn=175, live_throughout: 13, 183, dead_or_set: 0, 1, 14
insn=184, live_throughout: 13, 183, dead_or_set: 1
insn=177, live_throughout: 1, 13, 183, dead_or_set: 163
insn=179, live_throughout: 1, 13, 163, 183, dead_or_set: 174
insn=307, live_throughout: 1, 13, 163, 174, 183, dead_or_set: 222
insn=183, live_throughout: 1, 13, 163, 174, 183, dead_or_set: 0, 222
insn=185, live_throughout: 13, 163, 174, 183, dead_or_set: 0, 1, 14
insn=188, live_throughout: 13, 163, 174, 183, dead_or_set: 0, 168
insn=189, live_throughout: 13, 163, 168, 174, 183, dead_or_set: 
insn=192, live_throughout: 13, dead_or_set: 0
insn=193, live_throughout: 13, dead_or_set: 0, 14
insn=195, live_throughout: 13, 163, 168, 174, 183, dead_or_set: 
insn=198, live_throughout: 13, 163, 168, 174, 183, dead_or_set: 
insn=200, live_throughout: 13, 168, 174, 183, dead_or_set: 0, 163
insn=199, live_throughout: 0, 13, 168, 174, 183, dead_or_set: 
insn=201, live_throughout: 0, 13, 168, 174, 183, dead_or_set: 1
insn=202, live_throughout: 13, 168, 174, 183, dead_or_set: 0, 1, 14
insn=295, live_throughout: 0, 13, 14, 168, 174, 183, dead_or_set: 226
insn=205, live_throughout: 0, 13, 14, 168, 183, 226, dead_or_set: 174
insn=204, live_throughout: 13, 14, 168, 183, 226, dead_or_set: 0
insn=207, live_throughout: 13, 14, 168, 183, dead_or_set: 169, 226
insn=208, live_throughout: 13, 14, 168, 169, 183, 226, dead_or_set: 
insn=209, live_throughout: 13, 14, 168, 183, 226, dead_or_set: 169
insn=212, live_throughout: 13, 14, 168, 183, dead_or_set: 226
insn=214, live_throughout: 13, 14, dead_or_set: 168, 183
insn=303, live_throughout: 13, 14, dead_or_set: 
insn=217, live_throughout: 13, 14, 178, dead_or_set: 
insn=228, live_throughout: 13, 14, 178, dead_or_set: 
insn=229, live_throughout: 13, 14, 178, dead_or_set: 
insn=231, live_throughout: 13, 14, 178, dead_or_set: 
insn=232, live_throughout: 13, 14, 178, dead_or_set: 
insn=234, live_throughout: 13, 14, dead_or_set: 178
insn=235, live_throughout: 13, 14, dead_or_set: 
insn=236, live_throughout: 13, dead_or_set: 
insn=238, live_throughout: 13, dead_or_set: 0, 14
insn=240, live_throughout: 13, 14, dead_or_set: 0
insn=241, live_throughout: 13, 14, dead_or_set: 
insn=243, live_throughout: 13, dead_or_set: 235
insn=248, live_throughout: 13, 235, dead_or_set: 1
insn=249, live_throughout: 1, 13, 235, dead_or_set: 2
insn=247, live_throughout: 1, 2, 13, 235, dead_or_set: 0
insn=250, live_throughout: 13, 235, dead_or_set: 0, 1, 2, 14
insn=255, live_throughout: 13, 235, dead_or_set: 1
insn=256, live_throughout: 1, 13, 235, dead_or_set: 2
insn=254, live_throughout: 1, 2, 13, 235, dead_or_set: 0
insn=257, live_throughout: 13, 235, dead_or_set: 0, 1, 2, 14
insn=262, live_throughout: 13, 235, dead_or_set: 1
insn=261, live_throughout: 1, 13, 235, dead_or_set: 0
insn=263, live_throughout: 13, 235, dead_or_set: 0, 1, 14
insn=267, live_throughout: 13, 235, dead_or_set: 1
insn=266, live_throughout: 1, 13, dead_or_set: 0, 235
insn=268, live_throughout: 13, dead_or_set: 0, 1, 14
insn=269, live_throughout: 13, 14, dead_or_set: 
insn=275, live_throughout: 13, 14, dead_or_set: 0
insn=281, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 177: (insn_list:REG_DEP_TRUE 115 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 35 (nil))
init_insns for 184: (insn_list:REG_DEP_TRUE 310 (nil))
init_insns for 186: (insn_list:REG_DEP_TRUE 309 (nil))
init_insns for 192: (insn_list:REG_DEP_TRUE 59 (nil))
init_insns for 209: (insn_list:REG_DEP_TRUE 142 (nil))
init_insns for 212: (insn_list:REG_DEP_TRUE 150 (nil))
init_insns for 222: (insn_list:REG_DEP_TRUE 307 (nil))
init_insns for 235: (insn_list:REG_DEP_TRUE 243 (nil))
init_insns for 248: (insn_list:REG_DEP_TRUE 308 (nil))
init_insns for 249: (insn_list:REG_DEP_TRUE 65 (nil))
changing reg in insn 177
changing reg in insn 200
changing reg in insn 52
changing reg in insn 71
changing reg in insn 66
changing reg in insn 59
changing reg in insn 72
changing reg in insn 71
changing reg in insn 58
changing reg in insn 66
changing reg in insn 188
changing reg in insn 204
changing reg in insn 214
changing reg in insn 212
changing reg in insn 209
changing reg in insn 208
changing reg in insn 205
changing reg in insn 199
changing reg in insn 199
changing reg in insn 198
changing reg in insn 198
changing reg in insn 207
changing reg in insn 209
changing reg in insn 208
changing reg in insn 66
changing reg in insn 68
changing reg in insn 60
changing reg in insn 58
changing reg in insn 92
changing reg in insn 110
changing reg in insn 179
changing reg in insn 205
changing reg in insn 132
changing reg in insn 138
changing reg in insn 133
changing reg in insn 113
changing reg in insn 115
changing reg in insn 116
changing reg in insn 86
changing reg in insn 228
changing reg in insn 228
changing reg in insn 234
changing reg in insn 231
changing reg in insn 156
changing reg in insn 87
changing reg in insn 85
changing reg in insn 161
changing reg in insn 86
changing reg in insn 42
changing reg in insn 81
changing reg in insn 44
changing reg in insn 35
changing reg in insn 174
changing reg in insn 129
changing reg in insn 111
changing reg in insn 82
changing reg in insn 295
changing reg in insn 137
changing reg in insn 132
changing reg in insn 128
changing reg in insn 123
changing reg in insn 122
changing reg in insn 115
changing reg in insn 109
changing reg in insn 65
changing reg in insn 214
changing reg in insn 179
changing reg in insn 177
changing reg in insn 173
changing reg in insn 168
changing reg in insn 167
changing reg in insn 166
changing reg in insn 160
changing reg in insn 85
changing reg in insn 42
changing reg in insn 40
changing reg in insn 37
changing reg in insn 113
changing reg in insn 310
changing reg in insn 37
changing reg in insn 309
changing reg in insn 40
changing reg in insn 49
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
changing reg in insn 142
changing reg in insn 148
changing reg in insn 151
changing reg in insn 143
changing reg in insn 150
changing reg in insn 151
changing reg in insn 307
changing reg in insn 183
changing reg in insn 295
changing reg in insn 207
changing reg in insn 207
changing reg in insn 207
changing reg in insn 212
changing reg in insn 243
changing reg in insn 262
changing reg in insn 248
changing reg in insn 267
changing reg in insn 266
changing reg in insn 261
changing reg in insn 256
changing reg in insn 255
changing reg in insn 254
changing reg in insn 249
changing reg in insn 247
changing reg in insn 308
changing reg in insn 110
changing reg in insn 65
changing reg in insn 66
changing reg in insn 59
changing reg in insn 58
Spilling for insn 37.
Spilling for insn 40.
Spilling for insn 59.
Spilling for insn 115.
Spilling for insn 151.
Spilling for insn 148.
Spilling for insn 198.
Spilling for insn 199.
Spilling for insn 205.
Spilling for insn 204.
Spilling for insn 208.
Spilling for insn 209.
Spilling for insn 212.
Spilling for insn 214.

Reloads for insn # 37
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 40
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])

Reloads for insn # 59
Reload 0: reload_out (SI) = (mem/f:SI (plus:SI (reg/f:SI 4 r4 [249])
                                                        (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f:SI (plus:SI (reg/f:SI 4 r4 [249])
                                                        (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])) [0 S4 A32])

Reloads for insn # 115
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                                                        (const_int 192 [0xc0])) [0 wfd+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                                                        (const_int 192 [0xc0])) [0 wfd+0 S4 A32])

Reloads for insn # 151
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 148
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                                                        (const_int 196 [0xc4])) [0 vcollected+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                                                        (const_int 196 [0xc4])) [0 vcollected+0 S4 A32])

Reloads for insn # 198
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168]) [0 <variable>.list.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168]) [0 <variable>.list.next+0 S4 A32])

Reloads for insn # 199
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])

Reloads for insn # 205
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                                                        (const_int 12 [0xc])) [0 <variable>.mtime+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                                                        (const_int 12 [0xc])) [0 <variable>.mtime+0 S4 A32])

Reloads for insn # 204
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                                                        (const_int 8 [0x8])) [0 <variable>.name+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                                                        (const_int 8 [0x8])) [0 <variable>.name+0 S4 A32])

Reloads for insn # 208
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:169 D.26490 ] [169])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:169 D.26490 ] [169])
                                                        (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])

Reloads for insn # 209
Reload 0: reload_out (SI) = (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168]) [0 <variable>.list.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168]) [0 <variable>.list.next+0 S4 A32])

Reloads for insn # 212
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                                                        (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])

Reloads for insn # 214
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 4 r4 [183])
                                                        (const_int 184 [0xb8])) [0 dir_list.next+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 4 r4 [183])
                                                        (const_int 184 [0xb8])) [0 dir_list.next+0 S4 A32])
deleting insn with uid = 60.
deleting insn with uid = 138.
deleting insn with uid = 161.


try_optimize_cfg iteration 1

Forwarding edge 6->7 to 23 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 112.
verify found no changes in insn with uid = 124.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 145.
verify found no changes in insn with uid = 162.
verify found no changes in insn with uid = 169.
verify found no changes in insn with uid = 175.
verify found no changes in insn with uid = 185.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 202.
verify found no changes in insn with uid = 238.
verify found no changes in insn with uid = 250.
verify found no changes in insn with uid = 257.
verify found no changes in insn with uid = 263.
verify found no changes in insn with uid = 268.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 41 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 47 (    2)


do_name

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={40d,33u} r1={38d,19u} r2={27d,7u} r3={31d,17u} r4={4d,40u,2d} r5={4d,16u,2d} r6={1d,1u} r7={1d,1u} r12={21d} r13={1d,43u} r14={21d,1u} r15={20d} r16={20d} r17={20d} r18={20d} r19={20d} r20={20d} r21={20d} r22={20d} r23={20d} r24={34d,13u} r27={20d} r28={20d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={20d} r38={20d} r39={20d} r40={20d} r41={20d} r42={20d} r43={20d} r44={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} r81={20d} r82={20d} r83={20d} r84={20d} r85={20d} r86={20d} r87={20d} r88={20d} r89={20d} r90={20d} r91={20d} r92={20d} r93={20d} r94={20d} r95={20d} r96={20d} r97={20d} r98={20d} r99={20d} r100={20d} r101={20d} r102={20d} r103={20d} r104={20d} r105={20d} r106={20d} r107={20d} r108={20d} r109={20d} r110={20d} r111={20d} r112={20d} r113={20d} r114={20d} r115={20d} r116={20d} r117={20d} r118={20d} r119={20d} r120={20d} r121={20d} r122={20d} r123={20d} r124={20d} r125={20d} r126={20d} r127={20d} 
;;    total ref usage 2618{2423d,191u,4e} in 123{103 regular + 20 call} insns.
(note 31 0 33 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 31 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 32 33 47 2 NOTE_INSN_FUNCTION_BEG)

(note 47 32 35 2 NOTE_INSN_DELETED)

(insn 35 47 45 2 init/initramfs.c:295 (set (reg/f:SI 4 r4 [183])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 45 35 42 2 init/initramfs.c:297 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114dc5a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114dc5a0>)
        (nil)))

(insn 42 45 310 2 init/initramfs.c:297 (set (reg/f:SI 5 r5 [orig:181 collected.373 ] [181])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(insn 310 42 37 2 init/initramfs.c:295 (set (reg:SI 3 r3 [184])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 37 310 44 2 init/initramfs.c:295 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 3 r3 [184])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(insn 44 37 309 2 init/initramfs.c:297 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:181 collected.373 ] [181])) 167 {*arm_movsi_insn} (nil))

(insn 309 44 40 2 init/initramfs.c:296 (set (reg:SI 3 r3 [186])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(insn 40 309 46 2 init/initramfs.c:296 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 3 r3 [186])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 7 [0x7])
        (nil)))

(call_insn/i 46 40 49 2 init/initramfs.c:297 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 49 46 50 2 init/initramfs.c:297 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 0 r0 [189])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 50 49 51 2 init/initramfs.c:297 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 77)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3333 [0xd05])
        (nil)))
;; End of basic block 2 -> ( 3 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  3 [66.7%]  (fallthru)
;; Succ edge  8 [33.3%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  2 [66.7%]  (fallthru)
(note 51 50 52 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 65 3 init/initramfs.c:297 (set (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
        (reg:SI 0 r0 [189])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 65 52 296 3 init/initramfs.c:69 discrim 1 (set (reg/f:SI 4 r4 [249])
        (plus:SI (reg/f:SI 4 r4 [183])
            (const_int 220 [0xdc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 220 [0xdc])))
        (nil)))

(jump_insn 296 65 297 3 (set (pc)
        (label_ref 294)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 297 296 67)

;; Start of basic block ( 5) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [91.0%] 
(code_label 67 297 55 4 108 "" [1 uses])

(note 55 67 58 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 58 55 59 4 init/initramfs.c:71 (set (reg/f:SI 3 r3 [orig:192 <variable>.next ] [192])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 r0 [orig:170 D.26478 ] [170])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg/f:SI 4 r4 [249])
                (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])) [0 S4 A32])
        (nil)))

(insn 59 58 61 4 init/initramfs.c:71 (set (mem/f:SI (plus:SI (reg/f:SI 4 r4 [249])
                (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])) [0 S4 A32])
        (reg/f:SI 3 r3 [orig:192 <variable>.next ] [192])) 167 {*arm_movsi_insn} (nil))

(call_insn 61 59 294 4 init/initramfs.c:72 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 6 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  6 [96.9%]  (dfs_back)
;; Pred edge  4 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 294 61 293 5 121 "" [2 uses])

(note 293 294 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 66 293 68 5 init/initramfs.c:69 discrim 1 (set (reg/f:SI 0 r0 [orig:170 D.26478 ] [170])
        (mem/f:SI (plus:SI (reg/f:SI 4 r4 [249])
                (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f:SI (plus:SI (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
                (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 220 [0xdc])))) [0 S4 A32])
        (nil)))

(insn 68 66 69 5 init/initramfs.c:69 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:170 D.26478 ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 69 68 70 5 init/initramfs.c:69 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 67)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 5 -> ( 4 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  4 [91.0%] 
;; Succ edge  6 [9.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  5 [9.0%]  (fallthru)
(note 70 69 71 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 72 6 init/initramfs.c:69 discrim 1 (set (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
        (plus:SI (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 72 71 73 6 init/initramfs.c:68 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
            (const_int 128 [0x80]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 73 72 298 6 init/initramfs.c:68 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 294)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9688 [0x25d8])
        (nil)))
;; End of basic block 6 -> ( 5 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  5 [96.9%]  (dfs_back)
;; Succ edge  7 [3.1%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [3.1%]  (fallthru,loop_exit)
(note 298 73 299 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(jump_insn 299 298 300 7 (set (pc)
        (label_ref 269)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 23)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 300 299 77)

;; Start of basic block ( 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [33.3%] 
(code_label 77 300 78 8 106 "" [1 uses])

(note 78 77 80 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 80 78 81 8 NOTE_INSN_DELETED)

(insn 81 80 82 8 init/initramfs.c:301 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:181 collected.373 ] [181])) 167 {*arm_movsi_insn} (nil))

(insn 82 81 83 8 init/initramfs.c:301 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(call_insn 83 82 85 8 init/initramfs.c:301 (parallel [
            (call (mem:SI (symbol_ref:SI ("clean_path") [flags 0x3] <function_decl 0x114ad300 clean_path>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 85 83 86 8 init/initramfs.c:302 (set (reg:SI 1 r1 [orig:179 D.25990 ] [179])
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/c/i:HI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 216 [0xd8]))) [0 mode+0 S2 A16]))
        (nil)))

(insn 86 85 87 8 init/initramfs.c:302 (set (reg:SI 3 r3 [orig:178 D.25991 ] [178])
        (and:SI (reg:SI 1 r1 [orig:179 D.25990 ] [179])
            (const_int 61440 [0xf000]))) 67 {*arm_andsi3_insn} (nil))

(insn 87 86 88 8 init/initramfs.c:302 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:178 D.25991 ] [178])
            (const_int 32768 [0x8000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 88 87 89 8 init/initramfs.c:302 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 154)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 8 -> ( 9 14)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  9 [0.0%]  (fallthru)
;; Succ edge  14 [100.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [0.0%]  (fallthru)
(note 89 88 91 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 91 89 90 9 NOTE_INSN_DELETED)

(call_insn 90 91 92 9 init/initramfs.c:303 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("maybe_link") [flags 0x3] <function_decl 0x114ad200 maybe_link>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 92 90 93 9 init/initramfs.c:304 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:172 ml ] [172])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 93 92 94 9 init/initramfs.c:304 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 269)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1912 [0x778])
        (nil)))
;; End of basic block 9 -> ( 10 23)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  10 [80.9%]  (fallthru)
;; Succ edge  23 [19.1%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  9 [80.9%]  (fallthru)
(note 94 93 288 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 288 94 289 10 NOTE_INSN_DELETED)

(note 289 288 108 10 NOTE_INSN_DELETED)

(note 108 289 109 10 NOTE_INSN_DELETED)

(insn 109 108 308 10 init/initramfs.c:308 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(insn 308 109 110 10 init/initramfs.c:308 (set (reg:SI 1 r1 [248])
        (const_int 577 [0x241])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 577 [0x241])
        (nil)))

(insn 110 308 111 10 init/initramfs.c:308 (parallel [
            (set (reg:SI 1 r1)
                (if_then_else:SI (ne (reg/v:SI 3 r3 [orig:172 ml ] [172])
                        (const_int 1 [0x1]))
                    (reg:SI 1 r1 [248])
                    (const_int 65 [0x41])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(insn 111 110 112 10 init/initramfs.c:308 (set (reg:SI 2 r2)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(call_insn 112 111 113 10 init/initramfs.c:308 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_open") [flags 0x41] <function_decl 0x1145e880 sys_open>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 113 112 116 10 init/initramfs.c:308 (set (reg:SI 3 r3 [orig:177 wfd.376 ] [177])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])
        (nil)))

(insn 116 113 115 10 init/initramfs.c:310 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:177 wfd.376 ] [177])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 115 116 117 10 init/initramfs.c:308 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])
        (reg:SI 3 r3 [orig:177 wfd.376 ] [177])) 167 {*arm_movsi_insn} (nil))

(jump_insn 117 115 118 10 init/initramfs.c:310 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 269)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3666 [0xe52])
        (nil)))
;; End of basic block 10 -> ( 11 23)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  11 [63.3%]  (fallthru)
;; Succ edge  23 [36.7%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [63.3%]  (fallthru)
(note 118 117 127 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 127 118 122 11 NOTE_INSN_DELETED)

(insn 122 127 123 11 init/initramfs.c:311 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 100 [0x64]))) [0 uid+0 S4 A32])
        (nil)))

(insn 123 122 124 11 init/initramfs.c:311 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 104 [0x68]))) [0 gid+0 S4 A32])
        (nil)))

(call_insn 124 123 128 11 init/initramfs.c:311 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_fchown") [flags 0x41] <function_decl 0x1145eb80 sys_fchown>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 128 124 129 11 init/initramfs.c:312 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
        (nil)))

(insn 129 128 130 11 init/initramfs.c:312 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(call_insn 130 129 132 11 init/initramfs.c:312 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_fchmod") [flags 0x41] <function_decl 0x11458e80 sys_fchmod>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 132 130 133 11 init/initramfs.c:313 (set (reg:SI 1 r1 [orig:176 body_len.381 ] [176])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 92 [0x5c]))) [0 body_len+0 S4 A32])
        (nil)))

(insn 133 132 134 11 init/initramfs.c:313 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:176 body_len.381 ] [176])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 134 133 135 11 init/initramfs.c:313 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 140)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 1 [r1] 4 [r4] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 13 [sp]


;; Succ edge  12 [39.0%]  (fallthru)
;; Succ edge  13 [61.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  11 [39.0%]  (fallthru)
(note 135 134 137 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 137 135 139 12 init/initramfs.c:314 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
        (nil)))

(call_insn 139 137 140 12 init/initramfs.c:314 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_ftruncate") [flags 0x41] <function_decl 0x11452500 sys_ftruncate>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  11 [61.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
(code_label 140 139 141 13 113 "" [1 uses])

(note 141 140 146 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 146 141 142 13 NOTE_INSN_DELETED)

(insn 142 146 144 13 init/initramfs.c:315 (set (reg/f:SI 4 r4 [209])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 144 142 143 13 init/initramfs.c:315 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn 143 144 145 13 init/initramfs.c:315 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn 145 143 150 13 init/initramfs.c:315 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kstrdup") [flags 0x41] <function_decl 0x10b92580 kstrdup>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 150 145 151 13 init/initramfs.c:316 (set (reg:SI 3 r3 [212])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn 151 150 148 13 init/initramfs.c:316 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 3 r3 [212])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 5 [0x5])
        (nil)))

(insn 148 151 301 13 init/initramfs.c:315 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                (const_int 196 [0xc4])) [0 vcollected+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 301 148 302 13 (set (pc)
        (label_ref 269)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 23)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 302 301 154)

;; Start of basic block ( 8) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%] 
(code_label 154 302 155 14 110 "" [1 uses])

(note 155 154 156 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 156 155 157 14 init/initramfs.c:319 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:178 D.25991 ] [178])
            (const_int 16384 [0x4000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 157 156 158 14 init/initramfs.c:319 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 217)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 14 -> ( 15 18)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  15 [0.0%]  (fallthru)
;; Succ edge  18 [100.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  14 [0.0%]  (fallthru)
(note 158 157 172 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 172 158 180 15 NOTE_INSN_DELETED)

(note 180 172 186 15 ("found") NOTE_INSN_DELETED_LABEL 115)

(note 186 180 160 15 NOTE_INSN_DELETED)

(insn 160 186 162 15 init/initramfs.c:320 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn 162 160 168 15 init/initramfs.c:320 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_mkdir") [flags 0x41] <function_decl 0x11464c80 sys_mkdir>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 168 162 167 15 init/initramfs.c:321 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 104 [0x68]))) [0 gid+0 S4 A32])
        (nil)))

(insn 167 168 166 15 init/initramfs.c:321 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 100 [0x64]))) [0 uid+0 S4 A32])
        (nil)))

(insn 166 167 169 15 init/initramfs.c:321 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn 169 166 174 15 init/initramfs.c:321 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chown") [flags 0x41] <function_decl 0x1145ea80 sys_chown>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 174 169 173 15 init/initramfs.c:322 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 173 174 175 15 init/initramfs.c:322 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn 175 173 184 15 init/initramfs.c:322 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chmod") [flags 0x41] <function_decl 0x11458e00 sys_chmod>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 184 175 177 15 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn 177 184 179 15 init/initramfs.c:323 (set (reg/f:SI 7 r7 [orig:163 collected.860 ] [163])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(insn 179 177 307 15 init/initramfs.c:323 (set (reg:SI 6 r6 [orig:174 mtime.383 ] [174])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 108 [0x6c]))) [0 mtime+0 S4 A32])
        (nil)))

(insn 307 179 183 15 include/linux/slab_def.h:122 (set (reg/f:SI 3 r3 [222])
        (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
        (nil)))

(insn 183 307 185 15 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [222])
                (const_int 4 [0x4])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                    (const_int 4 [0x4]))) [0 <variable>.cs_cachep+0 S4 A32])
        (nil)))

(call_insn 185 183 188 15 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 188 185 189 15 init/initramfs.c:99 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 189 188 190 15 init/initramfs.c:99 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  16 [0.0%]  (fallthru)
;; Succ edge  17 [100.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  15 [0.0%]  (fallthru)
(note 190 189 192 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 192 190 193 16 init/initramfs.c:100 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11532800>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11532800>)
        (nil)))

(call_insn 193 192 194 16 init/initramfs.c:100 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a86f00 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 16 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 194 193 195)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  15 [100.0%] 
(code_label 195 194 196 17 116 "" [1 uses])

(note 196 195 203 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 203 196 198 17 NOTE_INSN_DELETED)

(insn 198 203 200 17 include/linux/list.h:26 (set (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168]) [0 <variable>.list.next+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:168 ret ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 200 198 199 17 init/initramfs.c:102 (set (reg:SI 0 r0)
        (reg/f:SI 7 r7 [orig:163 collected.860 ] [163])) 167 {*arm_movsi_insn} (nil))

(insn 199 200 201 17 include/linux/list.h:27 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:168 ret ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 201 199 202 17 init/initramfs.c:102 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(call_insn 202 201 295 17 init/initramfs.c:102 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kstrdup") [flags 0x41] <function_decl 0x10b92580 kstrdup>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 295 202 205 17 include/linux/list.h:62 (set (reg/f:SI 3 r3 [226])
        (reg/f:SI 4 r4 [183])) 167 {*arm_movsi_insn} (nil))

(insn 205 295 204 17 init/initramfs.c:103 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (const_int 12 [0xc])) [0 <variable>.mtime+0 S4 A32])
        (reg:SI 6 r6 [orig:174 mtime.383 ] [174])) 167 {*arm_movsi_insn} (nil))

(insn 204 205 207 17 init/initramfs.c:102 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (const_int 8 [0x8])) [0 <variable>.name+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 207 204 208 17 include/linux/list.h:62 (set (reg/f:SI 2 r2 [orig:169 D.26490 ] [169])
        (mem/s/f/j/c:SI (pre_modify:SI (reg/f:SI 3 r3 [226])
                (plus:SI (reg/f:SI 3 r3 [226])
                    (const_int 184 [0xb8]))) [0 dir_list.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 3 r3 [226])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 184 [0xb8]))) [0 dir_list.next+0 S4 A32])
            (nil))))

(insn 208 207 209 17 include/linux/list.h:41 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:169 D.26490 ] [169])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:168 ret ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 209 208 212 17 include/linux/list.h:42 (set (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168]) [0 <variable>.list.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:169 D.26490 ] [169])) 167 {*arm_movsi_insn} (nil))

(insn 212 209 214 17 include/linux/list.h:43 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/f:SI 3 r3 [226])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 184 [0xb8])))
        (nil)))

(insn 214 212 303 17 include/linux/list.h:44 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 184 [0xb8])) [0 dir_list.next+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:168 ret ] [168])) 167 {*arm_movsi_insn} (nil))

(jump_insn 303 214 304 17 (set (pc)
        (label_ref 269)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 23)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 304 303 217)

;; Start of basic block ( 14) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%] 
(code_label 217 304 218 18 114 "" [1 uses])

(note 218 217 219 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 219 218 220 18 NOTE_INSN_DELETED)

(note 220 219 222 18 NOTE_INSN_DELETED)

(note 222 220 223 18 NOTE_INSN_DELETED)

(note 223 222 225 18 NOTE_INSN_DELETED)

(note 225 223 226 18 NOTE_INSN_DELETED)

(note 226 225 227 18 NOTE_INSN_DELETED)

(note 227 226 228 18 NOTE_INSN_DELETED)

(insn 228 227 229 18 init/initramfs.c:324 (set (reg:CC_DEQ 24 cc)
        (compare:CC_DEQ (ior:SI (eq:SI (reg:SI 3 r3 [orig:178 D.25991 ] [178])
                    (const_int 8192 [0x2000]))
                (eq:SI (reg:SI 3 r3 [orig:178 D.25991 ] [178])
                    (const_int 24576 [0x6000])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (nil))

(jump_insn 229 228 230 18 init/initramfs.c:324 (set (pc)
        (if_then_else (ne (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (label_ref 236)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 18 -> ( 21 19)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  21 [0.0%] 
;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
(note 230 229 231 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 231 230 232 19 init/initramfs.c:324 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:178 D.25991 ] [178])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 232 231 233 19 init/initramfs.c:324 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 236)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 19 -> ( 21 20)
;; lr  out 	 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  21 [0.0%] 
;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
(note 233 232 234 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 234 233 235 20 init/initramfs.c:324 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:178 D.25991 ] [178])
            (const_int 49152 [0xc000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 235 234 236 20 init/initramfs.c:324 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 269)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 20 -> ( 21 23)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  21 [0.0%]  (fallthru)
;; Succ edge  23 [100.0%] 

;; Start of basic block ( 18 19 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  18 [0.0%] 
;; Pred edge  19 [0.0%] 
;; Pred edge  20 [0.0%]  (fallthru)
(code_label 236 235 237 21 117 "" [2 uses])

(note 237 236 239 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 239 237 238 21 NOTE_INSN_DELETED)

(call_insn 238 239 240 21 init/initramfs.c:326 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("maybe_link") [flags 0x3] <function_decl 0x114ad200 maybe_link>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 240 238 241 21 init/initramfs.c:326 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 241 240 242 21 init/initramfs.c:326 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 269)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  22 [0.0%]  (fallthru)
;; Succ edge  23 [100.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  21 [0.0%]  (fallthru)
(note 242 241 245 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 245 242 260 22 NOTE_INSN_DELETED)

(note 260 245 243 22 NOTE_INSN_DELETED)

(insn 243 260 248 22 init/initramfs.c:327 (set (reg/f:SI 4 r4 [235])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 248 243 249 22 init/initramfs.c:327 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [235])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 249 248 247 22 init/initramfs.c:327 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 348 [0x15c])) [0 rdev+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 348 [0x15c]))) [0 rdev+0 S4 A32])
        (nil)))

(insn 247 249 250 22 init/initramfs.c:327 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn 250 247 255 22 init/initramfs.c:327 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_mknod") [flags 0x41] <function_decl 0x11458b80 sys_mknod>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 255 250 256 22 init/initramfs.c:328 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 100 [0x64]))) [0 uid+0 S4 A32])
        (nil)))

(insn 256 255 254 22 init/initramfs.c:328 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 104 [0x68]))) [0 gid+0 S4 A32])
        (nil)))

(insn 254 256 257 22 init/initramfs.c:328 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn 257 254 262 22 init/initramfs.c:328 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chown") [flags 0x41] <function_decl 0x1145ea80 sys_chown>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 262 257 261 22 init/initramfs.c:329 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [235])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 261 262 263 22 init/initramfs.c:329 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn 263 261 267 22 init/initramfs.c:329 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chmod") [flags 0x41] <function_decl 0x11458e00 sys_chmod>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 267 263 266 22 init/initramfs.c:330 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 108 [0x6c]))) [0 mtime+0 S4 A32])
        (nil)))

(insn 266 267 268 22 init/initramfs.c:330 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn 268 266 269 22 init/initramfs.c:330 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utime") [flags 0x3] <function_decl 0x11487700 do_utime>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 22 -> ( 23)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 20 13 10 7 9 22 21 17) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  20 [100.0%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  10 [36.7%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  9 [19.1%] 
;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  21 [100.0%] 
;; Pred edge  17 [100.0%] 
(code_label 269 268 270 23 109 "" [7 uses])

(note 270 269 275 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 275 270 281 23 init/initramfs.c:334 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 281 275 306 23 init/initramfs.c:334 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 23 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 306 281 311 NOTE_INSN_DELETED)

(note 311 306 0 NOTE_INSN_DELETED)


;; Function do_collect (do_collect)[0:1322] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:250000
  a2(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a7(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r171: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:250000
  a2(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a7(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 73(l0): point = 0
   Insn 67(l0): point = 2
   Insn 59(l0): point = 5
   Insn 60(l0): point = 7
   Insn 58(l0): point = 9
   Insn 77(l0): point = 12
   Insn 51(l0): point = 14
   Insn 49(l0): point = 17
   Insn 47(l0): point = 19
   Insn 42(l0): point = 21
   Insn 37(l0): point = 23
   Insn 41(l0): point = 25
   Insn 32(l0): point = 27
   Insn 36(l0): point = 29
   Insn 26(l0): point = 31
   Insn 40(l0): point = 33
   Insn 25(l0): point = 35
   Insn 35(l0): point = 37
   Insn 48(l0): point = 39
   Insn 31(l0): point = 41
   Insn 24(l0): point = 46
   Insn 45(l0): point = 48
   Insn 30(l0): point = 50
   Insn 44(l0): point = 52
   Insn 20(l0): point = 54
   Insn 19(l0): point = 56
   Insn 18(l0): point = 58
   Insn 9(l0): point = 60
   Insn 17(l0): point = 62
   Insn 8(l0): point = 64
   Insn 6(l0): point = 66
   Insn 5(l0): point = 68
 a0(r135): [12..14] [3..7]
 a1(r138): [17..68] [6..11]
 a2(r171): [6..9]
 a3(r136): [17..48] [8..11]
 a4(r165): [22..25]
 a5(r161): [24..29]
 a6(r133): [26..60]
 a7(r164): [26..33]
 a8(r157): [28..43]
 a9(r160): [30..37]
 a10(r152): [32..35]
 a11(r151): [36..46]
 a12(r156): [44..50] [42..42]
 a13(r167): [49..52]
 a14(r140): [61..64]
 a15(r134): [61..66]
Compressing live ranges: from 71 to 34 - 47%
Ranges after the compression:
 a0(r135): [6..7] [0..2]
 a1(r138): [8..33] [1..5]
 a2(r171): [1..4]
 a3(r136): [8..25] [3..5]
 a4(r165): [9..11]
 a5(r161): [10..14]
 a6(r133): [12..29]
 a7(r164): [12..17]
 a8(r157): [13..22]
 a9(r160): [15..20]
 a10(r152): [16..18]
 a11(r151): [19..24]
 a12(r156): [23..27] [21..21]
 a13(r167): [26..28]
 a14(r140): [30..31]
 a15(r134): [30..32]
+++Allocating 128 bytes for conflict table (uncompressed size 128)
;; a0(r135,l0) conflicts: a2(r171,l0) a1(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r138,l0) conflicts: a0(r135,l0) a2(r171,l0) a3(r136,l0) a4(r165,l0) a5(r161,l0) a7(r164,l0) a6(r133,l0) a8(r157,l0) a9(r160,l0) a10(r152,l0) a11(r151,l0) a12(r156,l0) a13(r167,l0) a14(r140,l0) a15(r134,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r171,l0) conflicts: a0(r135,l0) a1(r138,l0) a3(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r136,l0) conflicts: a2(r171,l0) a1(r138,l0) a4(r165,l0) a5(r161,l0) a7(r164,l0) a6(r133,l0) a8(r157,l0) a9(r160,l0) a10(r152,l0) a11(r151,l0) a12(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r165,l0) conflicts: a1(r138,l0) a3(r136,l0) a5(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r161,l0) conflicts: a1(r138,l0) a3(r136,l0) a4(r165,l0) a7(r164,l0) a6(r133,l0) a8(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r133,l0) conflicts: a1(r138,l0) a3(r136,l0) a5(r161,l0) a7(r164,l0) a8(r157,l0) a9(r160,l0) a10(r152,l0) a11(r151,l0) a12(r156,l0) a13(r167,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a7(r164,l0) conflicts: a1(r138,l0) a3(r136,l0) a5(r161,l0) a6(r133,l0) a8(r157,l0) a9(r160,l0) a10(r152,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r157,l0) conflicts: a1(r138,l0) a3(r136,l0) a5(r161,l0) a7(r164,l0) a6(r133,l0) a9(r160,l0) a10(r152,l0) a11(r151,l0) a12(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r160,l0) conflicts: a1(r138,l0) a3(r136,l0) a7(r164,l0) a6(r133,l0) a8(r157,l0) a10(r152,l0) a11(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r152,l0) conflicts: a1(r138,l0) a3(r136,l0) a7(r164,l0) a6(r133,l0) a8(r157,l0) a9(r160,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r151,l0) conflicts: a1(r138,l0) a3(r136,l0) a6(r133,l0) a8(r157,l0) a9(r160,l0) a12(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r156,l0) conflicts: a1(r138,l0) a3(r136,l0) a6(r133,l0) a8(r157,l0) a11(r151,l0) a13(r167,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r167,l0) conflicts: a1(r138,l0) a6(r133,l0) a12(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r140,l0) conflicts: a1(r138,l0) a15(r134,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a15(r134,l0) conflicts: a1(r138,l0) a14(r140,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  cp0:a0(r135)<->a3(r136)@1000:move
  cp1:a6(r133)<->a15(r134)@125:shuffle
  cp2:a6(r133)<->a14(r140)@125:shuffle
  cp3:a3(r136)<->a13(r167)@125:shuffle
  cp4:a10(r152)<->a11(r151)@125:shuffle
  cp5:a5(r161)<->a9(r160)@125:shuffle
  cp6:a4(r165)<->a7(r164)@125:shuffle
  cp7:a4(r165)<->a6(r133)@125:shuffle
  regions=1, blocks=6, points=34
    allocnos=16, copies=8, conflicts=0, ranges=20

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r135 1r138 2r171 3r136 4r165 5r161 6r133 7r164 8r157 9r160 10r152 11r151 12r156 13r167 14r140 15r134
    modified regnos: 133 134 135 136 138 140 151 152 156 157 160 161 164 165 167 171
    border:
    Pressure: GENERAL_REGS=9
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
      Pushing a15(r134,l0)
      Pushing a14(r140,l0)
      Pushing a13(r167,l0)
      Pushing a12(r156,l0)
      Pushing a11(r151,l0)
      Pushing a10(r152,l0)
      Pushing a9(r160,l0)
      Pushing a8(r157,l0)
      Pushing a7(r164,l0)
      Pushing a5(r161,l0)
      Pushing a4(r165,l0)
      Pushing a2(r171,l0)
      Pushing a0(r135,l0)
      Pushing a3(r136,l0)
      Pushing a6(r133,l0)
      Pushing a1(r138,l0)
      Popping a1(r138,l0)  -- assign reg 4
      Popping a6(r133,l0)  -- assign reg 5
      Popping a3(r136,l0)  -- assign reg 0
      Popping a0(r135,l0)  -- assign reg 0
      Popping a2(r171,l0)  -- assign reg 3
      Popping a4(r165,l0)  -- assign reg 5
      Popping a5(r161,l0)  -- assign reg 3
      Popping a7(r164,l0)  -- assign reg 2
      Popping a8(r157,l0)  -- assign reg 6
      Popping a9(r160,l0)  -- assign reg 3
      Popping a10(r152,l0)  -- assign reg 1
      Popping a11(r151,l0)  -- assign reg 1
      Popping a12(r156,l0)  -- assign reg 2
      Popping a13(r167,l0)  -- assign reg 0
      Popping a14(r140,l0)  -- assign reg 3
      Popping a15(r134,l0)  -- assign reg 5
Disposition:
    6:r133 l0     5   15:r134 l0     5    0:r135 l0     0    3:r136 l0     0
    1:r138 l0     4   14:r140 l0     3   11:r151 l0     1   10:r152 l0     1
   12:r156 l0     2    8:r157 l0     6    9:r160 l0     3    5:r161 l0     3
    7:r164 l0     2    4:r165 l0     5   13:r167 l0     0    2:r171 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 138
insn=6, live_throughout: 13, 138, dead_or_set: 134
insn=8, live_throughout: 13, 134, 138, dead_or_set: 140
insn=17, live_throughout: 13, 134, 138, 140, dead_or_set: 0
insn=9, live_throughout: 0, 13, 138, dead_or_set: 133, 134, 140
insn=18, live_throughout: 0, 13, 133, 138, dead_or_set: 1
insn=19, live_throughout: 0, 1, 13, 133, 138, dead_or_set: 2
insn=20, live_throughout: 13, 133, 138, dead_or_set: 0, 1, 2, 14
insn=44, live_throughout: 13, 14, 133, 138, dead_or_set: 167
insn=30, live_throughout: 13, 14, 133, 138, 167, dead_or_set: 156
insn=45, live_throughout: 13, 14, 133, 138, 156, dead_or_set: 136, 167
insn=24, live_throughout: 13, 14, 133, 136, 138, 156, dead_or_set: 151
insn=31, live_throughout: 13, 14, 133, 136, 138, 151, dead_or_set: 156, 157
insn=48, live_throughout: 13, 14, 133, 136, 138, 151, 157, dead_or_set: 
insn=35, live_throughout: 13, 14, 24, 133, 136, 138, 151, 157, dead_or_set: 160
insn=25, live_throughout: 13, 14, 24, 133, 136, 138, 157, 160, dead_or_set: 151, 152
insn=40, live_throughout: 13, 14, 24, 133, 136, 138, 152, 157, 160, dead_or_set: 164
insn=26, live_throughout: 13, 14, 24, 133, 136, 138, 157, 160, 164, dead_or_set: 152
insn=36, live_throughout: 13, 14, 24, 133, 136, 138, 157, 164, dead_or_set: 160, 161
insn=32, live_throughout: 13, 14, 24, 133, 136, 138, 161, 164, dead_or_set: 157
insn=41, live_throughout: 13, 14, 24, 136, 138, 161, dead_or_set: 133, 164, 165
insn=37, live_throughout: 13, 14, 24, 136, 138, 165, dead_or_set: 161
insn=42, live_throughout: 13, 14, 24, 136, 138, dead_or_set: 165
insn=47, live_throughout: 13, 14, 24, 136, 138, dead_or_set: 
insn=49, live_throughout: 13, 14, 136, 138, dead_or_set: 
insn=51, live_throughout: 13, 14, dead_or_set: 135
insn=77, live_throughout: 13, 14, 135, dead_or_set: 
insn=54, live_throughout: 13, 14, 136, 138, dead_or_set: 
insn=58, live_throughout: 13, 14, 136, 138, dead_or_set: 171
insn=60, live_throughout: 13, 14, 138, 171, dead_or_set: 135, 136
insn=59, live_throughout: 13, 14, 135, dead_or_set: 138, 171
insn=61, live_throughout: 13, 14, 135, dead_or_set: 
insn=67, live_throughout: 13, 14, dead_or_set: 0, 135
insn=73, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 134: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 138: (insn_list:REG_DEP_TRUE 5 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 8 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 24 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 26 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 30 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 32 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 35 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 37 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 40 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 42 (nil))
init_insns for 167: (insn_list:REG_DEP_TRUE 44 (nil))
init_insns for 171: (insn_list:REG_DEP_TRUE 58 (nil))
changing reg in insn 9
changing reg in insn 31
changing reg in insn 19
changing reg in insn 45
changing reg in insn 41
changing reg in insn 36
changing reg in insn 25
changing reg in insn 6
changing reg in insn 9
changing reg in insn 60
changing reg in insn 51
changing reg in insn 67
changing reg in insn 45
changing reg in insn 60
changing reg in insn 47
changing reg in insn 48
changing reg in insn 5
changing reg in insn 18
changing reg in insn 17
changing reg in insn 59
changing reg in insn 58
changing reg in insn 47
changing reg in insn 44
changing reg in insn 42
changing reg in insn 40
changing reg in insn 37
changing reg in insn 35
changing reg in insn 32
changing reg in insn 30
changing reg in insn 26
changing reg in insn 24
changing reg in insn 8
changing reg in insn 6
changing reg in insn 41
changing reg in insn 36
changing reg in insn 31
changing reg in insn 25
changing reg in insn 58
changing reg in insn 40
changing reg in insn 35
changing reg in insn 24
changing reg in insn 30
changing reg in insn 44
changing reg in insn 8
changing reg in insn 6
changing reg in insn 8
changing reg in insn 9
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 58
changing reg in insn 59
Spilling for insn 26.
Spilling for insn 32.
Spilling for insn 37.
Spilling for insn 42.
Spilling for insn 47.
Spilling for insn 59.

Reloads for insn # 26
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])

Reloads for insn # 32
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])

Reloads for insn # 37
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 42
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 36 [0x24])) [0 collect+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 36 [0x24])) [0 collect+0 S4 A32])

Reloads for insn # 47
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 40 [0x28])) [0 remains+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 40 [0x28])) [0 remains+0 S4 A32])

Reloads for insn # 59
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
deleting insn with uid = 60.
deleting insn with uid = 67.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 9 (  1.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


do_collect

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,6u} r1={5d,3u} r2={5d,3u} r3={7d,5u} r4={1d,16u,12d} r5={3d,8u} r6={1d,1u} r7={1d,1u} r12={2d} r13={1d,6u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={4d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 211{148d,51u,12e} in 30{29 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 2 13 2 NOTE_INSN_DELETED)

(note 13 11 28 2 NOTE_INSN_DELETED)

(note 28 13 5 2 NOTE_INSN_DELETED)

(insn 5 28 6 2 init/initramfs.c:206 (set (reg/f:SI 4 r4 [138])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 6 5 8 2 init/initramfs.c:206 (set (reg/v:SI 5 r5 [orig:134 n ] [134])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 40 [0x28]))) [0 remains+0 S4 A32])
            (nil))))

(insn 8 6 17 2 init/initramfs.c:206 (set (reg:SI 3 r3 [orig:140 count ] [140])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn 17 8 9 2 init/initramfs.c:209 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 9 17 18 2 init/initramfs.c:206 (parallel [
            (set (reg/v:SI 5 r5 [orig:133 n.896 ] [133])
                (umin:SI (reg/v:SI 5 r5 [orig:134 n ] [134])
                    (reg:SI 3 r3 [orig:140 count ] [140])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 18 9 19 2 init/initramfs.c:209 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 19 18 20 2 init/initramfs.c:209 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:133 n.896 ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn 20 19 44 2 init/initramfs.c:209 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x1150cc00 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 44 20 30 2 init/initramfs.c:212 (set (reg:SI 0 r0 [orig:167 remains ] [167])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 40 [0x28]))) [0 remains+0 S4 A32])
            (nil))))

(insn 30 44 45 2 init/initramfs.c:173 (set (reg:DI 2 r2 [orig:156 this_header ] [156])
        (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
            (nil))))

(insn 45 30 24 2 init/initramfs.c:212 (set (reg:SI 0 r0 [orig:136 remains.342 ] [136])
        (minus:SI (reg:SI 0 r0 [orig:167 remains ] [167])
            (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))) 28 {*arm_subsi3_insn} (nil))

(insn 24 45 31 2 init/initramfs.c:172 (set (reg/f:SI 1 r1 [orig:151 victim ] [151])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 31 24 48 2 init/initramfs.c:173 (parallel [
            (set (reg:DI 6 r6 [157])
                (plus:DI (zero_extend:DI (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))
                    (reg:DI 2 r2 [orig:156 this_header ] [156])))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (nil)))

(insn 48 31 35 2 init/initramfs.c:212 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:136 remains.342 ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 35 48 25 2 init/initramfs.c:174 (set (reg:SI 3 r3 [orig:160 count ] [160])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn 25 35 40 2 init/initramfs.c:172 (set (reg:SI 1 r1 [152])
        (plus:SI (reg/f:SI 1 r1 [orig:151 victim ] [151])
            (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 40 25 26 2 init/initramfs.c:211 (set (reg/f:SI 2 r2 [orig:164 collect ] [164])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 36 [0x24]))) [0 collect+0 S4 A32])
            (nil))))

(insn 26 40 36 2 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 1 r1 [152])) 167 {*arm_movsi_insn} (nil))

(insn 36 26 32 2 init/initramfs.c:174 (set (reg:SI 3 r3 [161])
        (minus:SI (reg:SI 3 r3 [orig:160 count ] [160])
            (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn 32 36 41 2 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [157])) 163 {*arm_movdi} (nil))

(insn 41 32 37 2 init/initramfs.c:211 (set (reg:SI 5 r5 [165])
        (plus:SI (reg/f:SI 2 r2 [orig:164 collect ] [164])
            (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (nil)))

(insn 37 41 42 2 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 3 r3 [161])) 167 {*arm_movsi_insn} (nil))

(insn 42 37 47 2 init/initramfs.c:211 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (reg:SI 5 r5 [165])) 167 {*arm_movsi_insn} (nil))

(insn 47 42 49 2 init/initramfs.c:212 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (reg:SI 0 r0 [orig:136 remains.342 ] [136])) 167 {*arm_movsi_insn} (nil))

(jump_insn 49 47 50 2 init/initramfs.c:212 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 50 49 51 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 77 3 init/initramfs.c:213 (set (reg:SI 0 r0 [orig:135 D.25859 ] [135])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(jump_insn 77 51 78 3 (set (pc)
        (label_ref 61)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 78 77 54)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 54 78 55 4 127 "" [1 uses])

(note 55 54 58 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 58 55 59 4 init/initramfs.c:214 (set (reg:SI 3 r3 [orig:171 next_state ] [171])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 44 [0x2c]))) [0 next_state+0 S4 A32])
            (nil))))

(insn 59 58 61 4 init/initramfs.c:214 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 3 r3 [orig:171 next_state ] [171])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 61 59 62 5 128 "" [1 uses])

(note 62 61 73 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 73 62 79 5 init/initramfs.c:216 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 79 73 80 NOTE_INSN_DELETED)

(note 80 79 0 NOTE_INSN_DELETED)


;; Function do_header (do_header)[0:1323] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 277.
verify found no changes in insn with uid = 277.
deleting insn with uid = 222.
scanning new insn with uid = 278.
verify found no changes in insn with uid = 278.
deleting insn with uid = 146.
scanning new insn with uid = 279.
rescanning insn with uid = 279.
deleting insn with uid = 279.
deleting insn with uid = 110.
scanning new insn with uid = 280.
rescanning insn with uid = 280.
deleting insn with uid = 280.
deleting insn with uid = 107.
scanning new insn with uid = 281.
rescanning insn with uid = 281.
deleting insn with uid = 281.
deleting insn with uid = 101.
scanning new insn with uid = 282.
rescanning insn with uid = 282.
deleting insn with uid = 282.
deleting insn with uid = 98.
scanning new insn with uid = 283.
rescanning insn with uid = 283.
deleting insn with uid = 283.
deleting insn with uid = 95.
scanning new insn with uid = 284.
rescanning insn with uid = 284.
deleting insn with uid = 284.
deleting insn with uid = 92.
scanning new insn with uid = 285.
rescanning insn with uid = 285.
deleting insn with uid = 285.
deleting insn with uid = 85.
scanning new insn with uid = 286.
verify found no changes in insn with uid = 286.
deleting insn with uid = 142.
scanning new insn with uid = 287.
verify found no changes in insn with uid = 287.
deleting insn with uid = 139.
scanning new insn with uid = 288.
rescanning insn with uid = 288.
deleting insn with uid = 288.
deleting insn with uid = 114.
scanning new insn with uid = 289.
rescanning insn with uid = 289.
deleting insn with uid = 289.
deleting insn with uid = 112.
scanning new insn with uid = 290.
verify found no changes in insn with uid = 290.
deleting insn with uid = 48.
scanning new insn with uid = 291.
verify found no changes in insn with uid = 291.
deleting insn with uid = 25.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 32 count 40 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 32 count 42 (  1.9)

Pass 0 for finding allocno costs

    a60 (r256,l1) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r256,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r252,l1) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r252,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r250,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r248,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r243,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r241,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r238,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r233,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r232,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r218,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r217,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a1(r233,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:150000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r250,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r238,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r241,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r243,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a13(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:230000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a31(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a35(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a37(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a40(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a43(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a47(r256,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a49(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a50(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a51(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a52(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a53(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a55(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a57(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a58(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r252,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a60(r256,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r256: preferred GENERAL_REGS, alternative NO_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a1(r233,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:150000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r250,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r238,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r241,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r243,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a13(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:230000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a31(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a35(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a37(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a40(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a43(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a45(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a47(r256,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a49(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a50(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a51(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a52(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a53(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a55(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a57(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a58(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r252,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a60(r256,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 250(l0): point = 0
   Insn 244(l0): point = 2
   Insn 237(l0): point = 5
   Insn 271(l0): point = 8
   Insn 232(l0): point = 10
   Insn 269(l0): point = 13
   Insn 216(l0): point = 15
   Insn 223(l0): point = 17
   Insn 277(l0): point = 19
   Insn 227(l0): point = 21
   Insn 226(l0): point = 23
   Insn 225(l0): point = 25
   Insn 220(l0): point = 27
   Insn 218(l0): point = 29
   Insn 267(l0): point = 32
   Insn 198(l0): point = 34
   Insn 201(l0): point = 36
   Insn 210(l0): point = 38
   Insn 206(l0): point = 40
   Insn 200(l0): point = 42
   Insn 209(l0): point = 44
   Insn 208(l0): point = 46
   Insn 203(l0): point = 48
   Insn 205(l0): point = 50
   Insn 196(l0): point = 52
   Insn 193(l0): point = 55
   Insn 192(l0): point = 57
   Insn 189(l0): point = 59
   Insn 191(l0): point = 61
   Insn 188(l0): point = 63
   Insn 185(l0): point = 66
   Insn 184(l0): point = 68
   Insn 182(l0): point = 71
   Insn 181(l0): point = 73
   Insn 265(l0): point = 76
   Insn 163(l0): point = 78
   Insn 176(l0): point = 80
   Insn 175(l0): point = 82
   Insn 174(l0): point = 84
   Insn 165(l0): point = 86
   Insn 172(l0): point = 88
   Insn 171(l0): point = 90
   Insn 169(l0): point = 92
   Insn 168(l0): point = 94
   Insn 167(l0): point = 96
   Insn 161(l0): point = 98
   Insn 158(l0): point = 101
   Insn 157(l0): point = 103
   Insn 155(l0): point = 106
   Insn 154(l0): point = 108
   Insn 153(l0): point = 110
   Insn 151(l0): point = 113
   Insn 129(l0): point = 115
   Insn 105(l0): point = 117
   Insn 90(l0): point = 119
   Insn 147(l0): point = 121
   Insn 278(l0): point = 123
   Insn 144(l0): point = 125
   Insn 126(l0): point = 127
   Insn 111(l0): point = 129
   Insn 279(l0): point = 131
   Insn 108(l0): point = 133
   Insn 280(l0): point = 135
   Insn 102(l0): point = 137
   Insn 281(l0): point = 139
   Insn 99(l0): point = 141
   Insn 282(l0): point = 143
   Insn 96(l0): point = 145
   Insn 283(l0): point = 147
   Insn 93(l0): point = 149
   Insn 284(l0): point = 151
   Insn 86(l0): point = 153
   Insn 285(l0): point = 155
   Insn 143(l0): point = 157
   Insn 286(l0): point = 162
   Insn 125(l0): point = 164
   Insn 122(l0): point = 166
   Insn 121(l0): point = 168
   Insn 150(l0): point = 170
   Insn 274(l0): point = 172
   Insn 141(l0): point = 174
   Insn 119(l0): point = 180
   Insn 88(l0): point = 182
   Insn 148(l0): point = 184
   Insn 140(l0): point = 186
   Insn 287(l0): point = 191
   Insn 136(l0): point = 193
   Insn 132(l0): point = 198
   Insn 273(l0): point = 200
   Insn 135(l0): point = 202
   Insn 115(l0): point = 204
   Insn 289(l0): point = 206
   Insn 288(l0): point = 208
   Insn 103(l0): point = 210
   Insn 131(l0): point = 212
   Insn 130(l0): point = 214
   Insn 127(l0): point = 216
   Insn 84(l0): point = 218
   Insn 57(l0): point = 221
   Insn 76(l0): point = 223
   Insn 61(l0): point = 225
   Insn 59(l0): point = 227
   Insn 58(l0): point = 229
   Insn 263(l0): point = 232
   Insn 49(l0): point = 234
   Insn 290(l0): point = 236
   Insn 50(l0): point = 238
   Insn 45(l0): point = 241
   Insn 44(l0): point = 243
   Insn 43(l0): point = 245
   Insn 40(l0): point = 248
   Insn 39(l0): point = 250
   Insn 36(l0): point = 252
   Insn 35(l0): point = 254
   Insn 34(l0): point = 256
   Insn 33(l0): point = 258
   Insn 261(l0): point = 261
   Insn 26(l0): point = 263
   Insn 291(l0): point = 265
   Insn 27(l0): point = 267
   Insn 22(l0): point = 270
   Insn 21(l0): point = 272
   Insn 20(l0): point = 274
   Insn 17(l0): point = 277
   Insn 16(l0): point = 279
   Insn 13(l0): point = 281
   Insn 10(l0): point = 283
   Insn 8(l0): point = 285
   Insn 11(l0): point = 287
   Insn 12(l0): point = 289
   Insn 7(l0): point = 291
   Insn 82(l1): point = 294
   Insn 81(l1): point = 296
   Insn 79(l1): point = 298
   Insn 77(l1): point = 300
   Insn 74(l1): point = 302
   Insn 259(l1): point = 304
   Insn 258(l1): point = 306
   Insn 71(l1): point = 308
   Insn 68(l1): point = 310
   Insn 78(l1): point = 312
   Insn 65(l1): point = 314
   Insn 257(l1): point = 316
   Insn 66(l1): point = 318
 a0(r152): [261..267] [232..238] [76..80] [32..38] [13..21] [8..10] [3..5]
 a1(r233): [35..63] [16..31]
 a2(r145): [55..59] [16..31]
 a3(r248): [18..19]
 a4(r250): [24..25]
 a5(r149): [106..198] [43..75] [28..31]
 a6(r137): [35..52]
 a7(r238): [37..42]
 a8(r241): [41..50]
 a9(r243): [45..46]
 a10(r148): [106..195] [49..75]
 a11(r136): [51..61]
 a12(r140): [97..210] [69..75]
 a13(r147): [106..110] [74..75]
 a14(r178): [79..218]
 a15(r146): [79..98]
 a16(r232): [83..84]
 a17(r230): [89..90]
 a18(r228): [93..94]
 a19(r150): [95..212]
 a20(r227): [95..96]
 a21(r139): [111..182]
 a22(r142): [116..216]
 a23(r220): [122..123]
 a24(r218): [160..160] [126..158]
 a25(r206): [128..164]
 a26(r194): [130..131]
 a27(r192): [134..135]
 a28(r189): [138..139]
 a29(r187): [142..143]
 a30(r185): [146..147]
 a31(r183): [150..151]
 a32(r179): [154..155]
 a33(r217): [158..162]
 a34(r216): [158..188]
 a35(r203): [165..166]
 a36(r204): [165..200]
 a37(r202): [167..168]
 a38(r200): [167..180]
 a39(r141): [169..204]
 a40(r221): [171..184]
 a41(r215): [189..191] [187..187]
 a42(r211): [196..202] [194..194]
 a43(r197): [205..208]
 a44(r196): [205..206]
 a45(r208): [213..214]
 a46(r164): [248..250] [222..231]
 a47(r256): [221..223]
 a48(r252): [221..225]
 a49(r135): [221..227]
 a50(r144): [221..229]
 a51(r154): [277..285] [248..260] [230..231]
 a52(r156): [264..291] [235..260]
 a53(r168): [235..236]
 a54(r166): [244..245]
 a55(r162): [264..265]
 a56(r160): [273..274]
 a57(r135): [294..320]
 a58(r144): [294..320]
 a59(r252): [294..320]
 a60(r256): [294..320]
Compressing live ranges: from 321 to 129 - 40%
Ranges after the compression:
 a0(r152): [118..121] [109..112] [33..35] [13..16] [4..8] [2..3] [0..1]
 a1(r233): [14..29] [5..12]
 a2(r145): [26..27] [5..12]
 a3(r248): [6..7]
 a4(r250): [9..10]
 a5(r149): [46..88] [19..32] [11..12]
 a6(r137): [14..25]
 a7(r238): [15..18]
 a8(r241): [17..23]
 a9(r243): [20..21]
 a10(r148): [46..86] [22..32]
 a11(r136): [24..28]
 a12(r140): [44..95] [30..32]
 a13(r147): [46..47] [31..32]
 a14(r178): [34..100]
 a15(r146): [34..45]
 a16(r232): [36..37]
 a17(r230): [38..39]
 a18(r228): [40..41]
 a19(r150): [42..96]
 a20(r227): [42..43]
 a21(r139): [48..79]
 a22(r142): [49..99]
 a23(r220): [50..51]
 a24(r218): [69..69] [52..68]
 a25(r206): [53..71]
 a26(r194): [54..55]
 a27(r192): [56..57]
 a28(r189): [58..59]
 a29(r187): [60..61]
 a30(r185): [62..63]
 a31(r183): [64..65]
 a32(r179): [66..67]
 a33(r217): [68..70]
 a34(r216): [68..82]
 a35(r203): [72..73]
 a36(r204): [72..89]
 a37(r202): [74..75]
 a38(r200): [74..78]
 a39(r141): [76..91]
 a40(r221): [77..80]
 a41(r215): [83..84] [81..81]
 a42(r211): [87..90] [85..85]
 a43(r197): [92..94]
 a44(r196): [92..93]
 a45(r208): [97..98]
 a46(r164): [115..116] [102..108]
 a47(r256): [101..103]
 a48(r252): [101..104]
 a49(r135): [101..105]
 a50(r144): [101..106]
 a51(r154): [124..125] [115..117] [107..108]
 a52(r156): [119..126] [110..117]
 a53(r168): [110..111]
 a54(r166): [113..114]
 a55(r162): [119..120]
 a56(r160): [122..123]
 a57(r135): [127..128]
 a58(r144): [127..128]
 a59(r252): [127..128]
 a60(r256): [127..128]
+++Allocating 488 bytes for conflict table (uncompressed size 488)
;; a0(r152,l0) conflicts: a2(r145,l0) a1(r233,l0) a3(r248,l0) a6(r137,l0) a7(r238,l0) a15(r146,l0) a14(r178,l0) a53(r168,l0) a52(r156,l0) a55(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r233,l0) conflicts: a0(r152,l0) a2(r145,l0) a3(r248,l0) a4(r250,l0) a5(r149,l0) a6(r137,l0) a7(r238,l0) a8(r241,l0) a9(r243,l0) a10(r148,l0) a11(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r145,l0) conflicts: a0(r152,l0) a1(r233,l0) a3(r248,l0) a4(r250,l0) a5(r149,l0) a10(r148,l0) a11(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r248,l0) conflicts: a0(r152,l0) a2(r145,l0) a1(r233,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r250,l0) conflicts: a2(r145,l0) a1(r233,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r149,l0) conflicts: a2(r145,l0) a1(r233,l0) a6(r137,l0) a8(r241,l0) a9(r243,l0) a10(r148,l0) a11(r136,l0) a12(r140,l0) a13(r147,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a23(r220,l0) a24(r218,l0) a25(r206,l0) a26(r194,l0) a27(r192,l0) a28(r189,l0) a29(r187,l0) a30(r185,l0) a31(r183,l0) a32(r179,l0) a33(r217,l0) a34(r216,l0) a35(r203,l0) a36(r204,l0) a37(r202,l0) a38(r200,l0) a39(r141,l0) a40(r221,l0) a41(r215,l0) a42(r211,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r137,l0) conflicts: a0(r152,l0) a1(r233,l0) a5(r149,l0) a7(r238,l0) a8(r241,l0) a9(r243,l0) a10(r148,l0) a11(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r238,l0) conflicts: a0(r152,l0) a1(r233,l0) a6(r137,l0) a8(r241,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r241,l0) conflicts: a1(r233,l0) a5(r149,l0) a6(r137,l0) a7(r238,l0) a9(r243,l0) a10(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r243,l0) conflicts: a1(r233,l0) a5(r149,l0) a6(r137,l0) a8(r241,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r148,l0) conflicts: a2(r145,l0) a1(r233,l0) a5(r149,l0) a6(r137,l0) a8(r241,l0) a11(r136,l0) a12(r140,l0) a13(r147,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a23(r220,l0) a24(r218,l0) a25(r206,l0) a26(r194,l0) a27(r192,l0) a28(r189,l0) a29(r187,l0) a30(r185,l0) a31(r183,l0) a32(r179,l0) a33(r217,l0) a34(r216,l0) a35(r203,l0) a36(r204,l0) a37(r202,l0) a38(r200,l0) a39(r141,l0) a40(r221,l0) a41(r215,l0) a42(r211,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r136,l0) conflicts: a2(r145,l0) a1(r233,l0) a5(r149,l0) a6(r137,l0) a10(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r140,l0) conflicts: a5(r149,l0) a10(r148,l0) a13(r147,l0) a15(r146,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a23(r220,l0) a24(r218,l0) a25(r206,l0) a26(r194,l0) a27(r192,l0) a28(r189,l0) a29(r187,l0) a30(r185,l0) a31(r183,l0) a32(r179,l0) a33(r217,l0) a34(r216,l0) a35(r203,l0) a36(r204,l0) a37(r202,l0) a38(r200,l0) a39(r141,l0) a40(r221,l0) a41(r215,l0) a42(r211,l0) a44(r196,l0) a43(r197,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r147,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r178,l0) conflicts: a0(r152,l0) a5(r149,l0) a10(r148,l0) a12(r140,l0) a13(r147,l0) a15(r146,l0) a16(r232,l0) a17(r230,l0) a18(r228,l0) a20(r227,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a23(r220,l0) a24(r218,l0) a25(r206,l0) a26(r194,l0) a27(r192,l0) a28(r189,l0) a29(r187,l0) a30(r185,l0) a31(r183,l0) a32(r179,l0) a33(r217,l0) a34(r216,l0) a35(r203,l0) a36(r204,l0) a37(r202,l0) a38(r200,l0) a39(r141,l0) a40(r221,l0) a41(r215,l0) a42(r211,l0) a44(r196,l0) a43(r197,l0) a45(r208,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r146,l0) conflicts: a0(r152,l0) a12(r140,l0) a14(r178,l0) a16(r232,l0) a17(r230,l0) a18(r228,l0) a20(r227,l0) a19(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r232,l0) conflicts: a15(r146,l0) a14(r178,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r230,l0) conflicts: a15(r146,l0) a14(r178,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r228,l0) conflicts: a15(r146,l0) a14(r178,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r150,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a13(r147,l0) a15(r146,l0) a14(r178,l0) a20(r227,l0) a21(r139,l0) a22(r142,l0) a23(r220,l0) a24(r218,l0) a25(r206,l0) a26(r194,l0) a27(r192,l0) a28(r189,l0) a29(r187,l0) a30(r185,l0) a31(r183,l0) a32(r179,l0) a33(r217,l0) a34(r216,l0) a35(r203,l0) a36(r204,l0) a37(r202,l0) a38(r200,l0) a39(r141,l0) a40(r221,l0) a41(r215,l0) a42(r211,l0) a44(r196,l0) a43(r197,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r227,l0) conflicts: a15(r146,l0) a14(r178,l0) a19(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r139,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a22(r142,l0) a23(r220,l0) a24(r218,l0) a25(r206,l0) a26(r194,l0) a27(r192,l0) a28(r189,l0) a29(r187,l0) a30(r185,l0) a31(r183,l0) a32(r179,l0) a33(r217,l0) a34(r216,l0) a35(r203,l0) a36(r204,l0) a37(r202,l0) a38(r200,l0) a39(r141,l0) a40(r221,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r142,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a23(r220,l0) a24(r218,l0) a25(r206,l0) a26(r194,l0) a27(r192,l0) a28(r189,l0) a29(r187,l0) a30(r185,l0) a31(r183,l0) a32(r179,l0) a33(r217,l0) a34(r216,l0) a35(r203,l0) a36(r204,l0) a37(r202,l0) a38(r200,l0) a39(r141,l0) a40(r221,l0) a41(r215,l0) a42(r211,l0) a44(r196,l0) a43(r197,l0) a45(r208,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r220,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r218,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a25(r206,l0) a26(r194,l0) a27(r192,l0) a28(r189,l0) a29(r187,l0) a30(r185,l0) a31(r183,l0) a32(r179,l0) a33(r217,l0) a34(r216,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r206,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a26(r194,l0) a27(r192,l0) a28(r189,l0) a29(r187,l0) a30(r185,l0) a31(r183,l0) a32(r179,l0) a33(r217,l0) a34(r216,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r194,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a25(r206,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r192,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a25(r206,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r189,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a25(r206,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r187,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a25(r206,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r185,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a25(r206,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a31(r183,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a25(r206,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r179,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a25(r206,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r217,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a25(r206,l0) a34(r216,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r216,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a24(r218,l0) a25(r206,l0) a33(r217,l0) a35(r203,l0) a36(r204,l0) a37(r202,l0) a38(r200,l0) a39(r141,l0) a40(r221,l0) a41(r215,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a35(r203,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a34(r216,l0) a36(r204,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a36(r204,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a34(r216,l0) a35(r203,l0) a37(r202,l0) a38(r200,l0) a39(r141,l0) a40(r221,l0) a41(r215,l0) a42(r211,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a37(r202,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a34(r216,l0) a36(r204,l0) a38(r200,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a38(r200,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a34(r216,l0) a36(r204,l0) a37(r202,l0) a39(r141,l0) a40(r221,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a39(r141,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a34(r216,l0) a36(r204,l0) a38(r200,l0) a40(r221,l0) a41(r215,l0) a42(r211,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a40(r221,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a21(r139,l0) a22(r142,l0) a34(r216,l0) a36(r204,l0) a38(r200,l0) a39(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a41(r215,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a22(r142,l0) a34(r216,l0) a36(r204,l0) a39(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a42(r211,l0) conflicts: a5(r149,l0) a10(r148,l0) a12(r140,l0) a14(r178,l0) a19(r150,l0) a22(r142,l0) a36(r204,l0) a39(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a43(r197,l0) conflicts: a12(r140,l0) a14(r178,l0) a19(r150,l0) a22(r142,l0) a44(r196,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a44(r196,l0) conflicts: a12(r140,l0) a14(r178,l0) a19(r150,l0) a22(r142,l0) a43(r197,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a45(r208,l0) conflicts: a14(r178,l0) a22(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a46(r164,l0) conflicts: a47(r256,l0) a48(r252,l0) a49(r135,l0) a50(r144,l0) a51(r154,l0) a52(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a47(r256,l0) conflicts: a48(r252,l0) a49(r135,l0) a50(r144,l0) a46(r164,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a48(r252,l0) conflicts: a47(r256,l0) a49(r135,l0) a50(r144,l0) a46(r164,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a49(r135,l0) conflicts: a47(r256,l0) a48(r252,l0) a50(r144,l0) a46(r164,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a50(r144,l0) conflicts: a47(r256,l0) a48(r252,l0) a49(r135,l0) a46(r164,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a51(r154,l0) conflicts: a46(r164,l0) a52(r156,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a52(r156,l0) conflicts: a0(r152,l0) a46(r164,l0) a51(r154,l0) a53(r168,l0) a54(r166,l0) a55(r162,l0) a56(r160,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a53(r168,l0) conflicts: a0(r152,l0) a52(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a54(r166,l0) conflicts: a52(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a55(r162,l0) conflicts: a0(r152,l0) a52(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a56(r160,l0) conflicts: a52(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a57(r135,l1) conflicts: a58(r144,l1) a59(r252,l1) a60(r256,l1)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a58(r144,l1) conflicts: a57(r135,l1) a59(r252,l1) a60(r256,l1)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a59(r252,l1) conflicts: a57(r135,l1) a58(r144,l1) a60(r256,l1)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a60(r256,l1) conflicts: a57(r135,l1) a58(r144,l1) a59(r252,l1)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14

  cp0:a8(r241)<->a11(r136)@125:shuffle
  cp1:a5(r149)<->a7(r238)@125:shuffle
  cp2:a12(r140)<->a20(r227)@125:shuffle
  cp3:a18(r228)<->a20(r227)@125:shuffle
  cp4:a18(r228)<->a19(r150)@125:shuffle
  cp5:a13(r147)<->a21(r139)@125:shuffle
  cp6:a19(r150)<->a45(r208)@125:shuffle
  cp7:a39(r141)<->a43(r197)@125:shuffle
  cp8:a39(r141)<->a44(r196)@125:shuffle
  cp9:a37(r202)<->a39(r141)@125:shuffle
  cp10:a35(r203)<->a37(r202)@125:shuffle
  cp11:a35(r203)<->a38(r200)@125:shuffle
  cp12:a25(r206)<->a35(r203)@125:shuffle
  cp13:a25(r206)<->a36(r204)@125:shuffle
  cp14:a50(r144)<->a51(r154)@125:shuffle
  regions=2, blocks=22, points=129
    allocnos=61, copies=15, conflicts=2, ranges=81

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 21 20 19 18 17 16 15 14 13 12 11 10 8(->9:l1) 7 6 5 4 3 2
    all: 0r152 1r233 2r145 3r248 4r250 5r149 6r137 7r238 8r241 9r243 10r148 11r136 12r140 13r147 14r178 15r146 16r232 17r230 18r228 19r150 20r227 21r139 22r142 23r220 24r218 25r206 26r194 27r192 28r189 29r187 30r185 31r183 32r179 33r217 34r216 35r203 36r204 37r202 38r200 39r141 40r221 41r215 42r211 43r197 44r196 45r208 46r164 47r256 48r252 49r135 50r144 51r154 52r156 53r168 54r166 55r162 56r160
    modified regnos: 135 136 137 139 140 141 142 144 145 146 147 148 149 150 152 154 156 160 162 164 166 168 178 179 183 185 187 189 192 194 196 197 200 202 203 204 206 208 211 215 216 217 218 220 221 227 228 230 232 233 238 241 243 248 250 252 256
    border:
    Pressure: GENERAL_REGS=15
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 233 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 248 of GENERAL_REGS has 1 regs less
    Reg 250 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 238 of GENERAL_REGS has 1 regs less
    Reg 241 of GENERAL_REGS has 1 regs less
    Reg 243 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 232 of GENERAL_REGS has 1 regs less
    Reg 230 of GENERAL_REGS has 1 regs less
    Reg 228 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 227 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 220 of GENERAL_REGS has 1 regs less
    Reg 218 of GENERAL_REGS has 1 regs less
    Reg 206 of GENERAL_REGS has 1 regs less
    Reg 194 of GENERAL_REGS has 1 regs less
    Reg 192 of GENERAL_REGS has 1 regs less
    Reg 189 of GENERAL_REGS has 1 regs less
    Reg 187 of GENERAL_REGS has 1 regs less
    Reg 185 of GENERAL_REGS has 1 regs less
    Reg 183 of GENERAL_REGS has 1 regs less
    Reg 179 of GENERAL_REGS has 1 regs less
    Reg 217 of GENERAL_REGS has 1 regs less
    Reg 216 of GENERAL_REGS has 1 regs less
    Reg 203 of GENERAL_REGS has 1 regs less
    Reg 204 of GENERAL_REGS has 1 regs less
    Reg 202 of GENERAL_REGS has 1 regs less
    Reg 200 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 221 of GENERAL_REGS has 1 regs less
    Reg 215 of GENERAL_REGS has 1 regs less
    Reg 211 of GENERAL_REGS has 1 regs less
    Reg 197 of GENERAL_REGS has 1 regs less
    Reg 196 of GENERAL_REGS has 1 regs less
    Reg 208 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 256 of GENERAL_REGS has 4 regs less
    Reg 252 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 154 of GENERAL_REGS has 4 regs less
    Reg 156 of GENERAL_REGS has 4 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
      Pushing a56(r160,l0)
      Pushing a55(r162,l0)
      Pushing a54(r166,l0)
      Pushing a53(r168,l0)
      Pushing a45(r208,l0)
      Pushing a44(r196,l0)
      Pushing a43(r197,l0)
      Pushing a42(r211,l0)
      Pushing a35(r203,l0)
      Pushing a32(r179,l0)
      Pushing a31(r183,l0)
      Pushing a30(r185,l0)
      Pushing a29(r187,l0)
      Pushing a28(r189,l0)
      Pushing a27(r192,l0)
      Pushing a26(r194,l0)
      Pushing a23(r220,l0)
      Pushing a20(r227,l0)
      Pushing a18(r228,l0)
      Pushing a17(r230,l0)
      Pushing a16(r232,l0)
      Pushing a9(r243,l0)
      Pushing a8(r241,l0)
      Pushing a7(r238,l0)
      Pushing a4(r250,l0)
      Pushing a3(r248,l0)
      Pushing a46(r164,l0)
      Pushing a15(r146,l0)
      Pushing a13(r147,l0)
      Pushing a11(r136,l0)
      Pushing a6(r137,l0)
      Pushing a2(r145,l0)
      Pushing a0(r152,l0)
      Pushing a1(r233,l0)
      Pushing a47(r256,l0)
      Pushing a48(r252,l0)
      Pushing a51(r154,l0)
      Pushing a50(r144,l0)
      Pushing a49(r135,l0)
      Pushing a52(r156,l0)
      Pushing a24(r218,l0)(potential spill: pri=689, cost=20000)
      Pushing a10(r148,l0)(potential spill: pri=769, cost=30000)
      Pushing a41(r215,l0)
      Pushing a40(r221,l0)
      Pushing a38(r200,l0)
      Pushing a37(r202,l0)
      Pushing a33(r217,l0)
      Pushing a25(r206,l0)
      Pushing a21(r139,l0)
      Pushing a19(r150,l0)
      Pushing a39(r141,l0)
      Pushing a36(r204,l0)
      Pushing a34(r216,l0)
      Pushing a22(r142,l0)
      Pushing a12(r140,l0)
      Pushing a5(r149,l0)
      Pushing a14(r178,l0)
      Popping a14(r178,l0)  -- assign reg 3
      Popping a5(r149,l0)  -- assign reg 2
      Popping a12(r140,l0)  -- assign reg 1
      Popping a22(r142,l0)  -- assign reg 0
      Popping a34(r216,l0)  -- assign reg 4
      Popping a36(r204,l0)  -- assign reg 12
      Popping a39(r141,l0)  -- assign reg 6
      Popping a19(r150,l0)  -- assign reg 7
      Popping a21(r139,l0)  -- assign reg 8
      Popping a25(r206,l0)  -- assign reg 12
      Popping a33(r217,l0)  -- assign reg 10
      Popping a37(r202,l0)  -- assign reg 6
      Popping a38(r200,l0)  -- assign reg 10
      Popping a40(r221,l0)  -- assign reg 9
      Popping a41(r215,l0)  -- assign reg 8
      Popping a10(r148,l0)  -- spill
      Popping a24(r218,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a52(r156,l0)  -- assign reg 4
      Popping a49(r135,l0)  -- assign reg 4
      Popping a50(r144,l0)  -- assign reg 5
      Popping a51(r154,l0)  -- assign reg 5
      Popping a48(r252,l0)  -- assign reg 6
      Popping a47(r256,l0)  -- assign reg 7
      Popping a1(r233,l0)  -- assign reg 3
      Popping a0(r152,l0)  -- assign reg 0
      Popping a2(r145,l0)  -- assign reg 1
      Popping a6(r137,l0)  -- assign reg 1
      Popping a11(r136,l0)  -- assign reg 0
      Popping a13(r147,l0)  -- assign reg 8
      Popping a15(r146,l0)  -- assign reg 2
      Popping a46(r164,l0)  -- assign reg 0
      Popping a3(r248,l0)  -- assign reg 2
      Popping a4(r250,l0)  -- assign reg 2
      Popping a7(r238,l0)  -- assign reg 2
      Popping a8(r241,l0)  -- assign reg 0
      Popping a9(r243,l0)  -- assign reg 12
      Popping a16(r232,l0)  -- assign reg 1
      Popping a17(r230,l0)  -- assign reg 1
      Popping a18(r228,l0)  -- assign reg 7
      Popping a20(r227,l0)  -- assign reg 1
      Popping a23(r220,l0)  -- assign reg 12
      Popping a26(r194,l0)  -- assign reg 4
      Popping a27(r192,l0)  -- assign reg 4
      Popping a28(r189,l0)  -- assign reg 4
      Popping a29(r187,l0)  -- assign reg 4
      Popping a30(r185,l0)  -- assign reg 4
      Popping a31(r183,l0)  -- assign reg 4
      Popping a32(r179,l0)  -- assign reg 4
      Popping a35(r203,l0)  -- assign reg 6
      Popping a42(r211,l0)  -- assign reg 4
      Popping a43(r197,l0)  -- assign reg 2
      Popping a44(r196,l0)  -- assign reg 6
      Popping a45(r208,l0)  -- assign reg 7
      Popping a53(r168,l0)  -- assign reg 3
      Popping a54(r166,l0)  -- assign reg 3
      Popping a55(r162,l0)  -- assign reg 3
      Popping a56(r160,l0)  -- assign reg 3

  Loop 1 (parent 0, header bb9, depth 1)
    bbs: 9(->10:l0)
    all: 57r135 58r144 59r252 60r256
    modified regnos: 135 144
    border: 57r135 58r144 59r252 60r256
    Pressure: GENERAL_REGS=8
    Reg 135 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
      Pushing a58(r144,l1)
      Pushing a57(r135,l1)
      Popping a57(r135,l1)  -- assign reg 4
      Popping a58(r144,l1)  -- assign reg 5
Disposition:
   57:r135 l1     4   49:r135 l0     4   11:r136 l0     0    6:r137 l0     1
   21:r139 l0     8   12:r140 l0     1   39:r141 l0     6   22:r142 l0     0
   58:r144 l1     5   50:r144 l0     5    2:r145 l0     1   15:r146 l0     2
   13:r147 l0     8   10:r148 l0   mem    5:r149 l0     2   19:r150 l0     7
    0:r152 l0     0   51:r154 l0     5   52:r156 l0     4   56:r160 l0     3
   55:r162 l0     3   46:r164 l0     0   54:r166 l0     3   53:r168 l0     3
   14:r178 l0     3   32:r179 l0     4   31:r183 l0     4   30:r185 l0     4
   29:r187 l0     4   28:r189 l0     4   27:r192 l0     4   26:r194 l0     4
   44:r196 l0     6   43:r197 l0     2   38:r200 l0    10   37:r202 l0     6
   35:r203 l0     6   36:r204 l0    12   25:r206 l0    12   45:r208 l0     7
   42:r211 l0     4   41:r215 l0     8   34:r216 l0     4   33:r217 l0    10
   24:r218 l0   mem   23:r220 l0    12   40:r221 l0     9   20:r227 l0     1
   18:r228 l0     7   17:r230 l0     1   16:r232 l0     1    1:r233 l0     3
    7:r238 l0     2    8:r241 l0     0    9:r243 l0    12    3:r248 l0     2
    4:r250 l0     2   59:r252 l1     6   48:r252 l0     6   60:r256 l1     7
   47:r256 l0     7
New iteration of spill/restore move
      Changing RTL for loop 1 (header bb9)
  4 vs parent 4:      Creating newreg=257 from oldreg=135
  5 vs parent 5:      Creating newreg=258 from oldreg=144
rescanning insn with uid = 66.
deleting insn with uid = 66.
rescanning insn with uid = 78.
deleting insn with uid = 78.
rescanning insn with uid = 77.
deleting insn with uid = 77.
rescanning insn with uid = 79.
deleting insn with uid = 79.
rescanning insn with uid = 81.
deleting insn with uid = 81.
scanning new insn with uid = 292.
scanning new insn with uid = 293.
    Adding cp15:a49r135-a57r257
    Adding range [130..130] to allocno a49r135
    Adding cp16:a50r144-a58r258
    Adding range [130..132] to allocno a50r144
    Adding range [131..133] to allocno a57r257
    Adding range [133..133] to allocno a58r258
    Adding range [130..133] to live through  allocno a48r252
    Adding range [130..133] to live through  allocno a47r256
    New r257: setting preferred GENERAL_REGS, alternative NO_REGS
    New r258: setting preferred GENERAL_REGS, alternative NO_REGS
Flattening IR
      Moving ranges of a60r256 to a47r256:  [127..128]
      Moving ranges of a59r252 to a48r252:  [127..128]
      Remove a59r252
      Remove a60r256
Compressing live ranges: from 134 to 133 - 99%
Ranges after the compression:
 a0(r152): [118..121] [109..112] [33..35] [13..16] [4..8] [2..3] [0..1]
 a1(r233): [14..29] [5..12]
 a2(r145): [26..27] [5..12]
 a3(r248): [6..7]
 a4(r250): [9..10]
 a5(r149): [46..88] [19..32] [11..12]
 a6(r137): [14..25]
 a7(r238): [15..18]
 a8(r241): [17..23]
 a9(r243): [20..21]
 a10(r148): [46..86] [22..32]
 a11(r136): [24..28]
 a12(r140): [44..95] [30..32]
 a13(r147): [46..47] [31..32]
 a14(r178): [34..100]
 a15(r146): [34..45]
 a16(r232): [36..37]
 a17(r230): [38..39]
 a18(r228): [40..41]
 a19(r150): [42..96]
 a20(r227): [42..43]
 a21(r139): [48..79]
 a22(r142): [49..99]
 a23(r220): [50..51]
 a24(r218): [69..69] [52..68]
 a25(r206): [53..71]
 a26(r194): [54..55]
 a27(r192): [56..57]
 a28(r189): [58..59]
 a29(r187): [60..61]
 a30(r185): [62..63]
 a31(r183): [64..65]
 a32(r179): [66..67]
 a33(r217): [68..70]
 a34(r216): [68..82]
 a35(r203): [72..73]
 a36(r204): [72..89]
 a37(r202): [74..75]
 a38(r200): [74..78]
 a39(r141): [76..91]
 a40(r221): [77..80]
 a41(r215): [83..84] [81..81]
 a42(r211): [87..90] [85..85]
 a43(r197): [92..94]
 a44(r196): [92..93]
 a45(r208): [97..98]
 a46(r164): [115..116] [102..108]
 a47(r256): [129..132] [127..128] [101..103]
 a48(r252): [129..132] [127..128] [101..104]
 a49(r135): [129..129] [101..105]
 a50(r144): [129..131] [101..106]
 a51(r154): [124..125] [115..117] [107..108]
 a52(r156): [119..126] [110..117]
 a53(r168): [110..111]
 a54(r166): [113..114]
 a55(r162): [119..120]
 a56(r160): [122..123]
 a57(r257): [130..132] [127..128]
 a58(r258): [132..132] [127..128]
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 32 count 40 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 32 count 42 (  1.9)
+++Costs: overall 45750, reg -4250, mem 50000, ld 0, st 0, move 4000
+++       move loops 0, new jumps 0
insn=7, live_throughout: 13, dead_or_set: 156
insn=12, live_throughout: 13, 156, dead_or_set: 2
insn=11, live_throughout: 2, 13, 156, dead_or_set: 1
insn=8, live_throughout: 1, 2, 13, 156, dead_or_set: 154
insn=10, live_throughout: 1, 2, 13, 154, 156, dead_or_set: 0
insn=13, live_throughout: 13, 154, 156, dead_or_set: 0, 1, 2, 14
insn=16, live_throughout: 13, 14, 154, 156, dead_or_set: 0
insn=17, live_throughout: 13, 14, 154, 156, dead_or_set: 
insn=20, live_throughout: 13, 14, 156, dead_or_set: 160
insn=21, live_throughout: 13, 14, 156, dead_or_set: 160
insn=22, live_throughout: 13, 14, 156, dead_or_set: 
insn=27, live_throughout: 13, 14, 156, dead_or_set: 152
insn=291, live_throughout: 13, 14, 152, 156, dead_or_set: 162
insn=26, live_throughout: 13, 14, 152, dead_or_set: 156, 162
insn=261, live_throughout: 13, 14, 152, dead_or_set: 
insn=30, live_throughout: 13, 154, 156, dead_or_set: 
insn=33, live_throughout: 13, 154, 156, dead_or_set: 0
insn=34, live_throughout: 0, 13, 154, 156, dead_or_set: 1
insn=35, live_throughout: 0, 1, 13, 154, 156, dead_or_set: 2
insn=36, live_throughout: 13, 154, 156, dead_or_set: 0, 1, 2, 14
insn=39, live_throughout: 13, 14, 154, 156, dead_or_set: 0, 164
insn=40, live_throughout: 13, 14, 154, 156, 164, dead_or_set: 
insn=43, live_throughout: 13, 14, 156, dead_or_set: 166
insn=44, live_throughout: 13, 14, 156, dead_or_set: 166
insn=45, live_throughout: 13, 14, 156, dead_or_set: 
insn=50, live_throughout: 13, 14, 156, dead_or_set: 152
insn=290, live_throughout: 13, 14, 152, 156, dead_or_set: 168
insn=49, live_throughout: 13, 14, 152, dead_or_set: 156, 168
insn=263, live_throughout: 13, 14, 152, dead_or_set: 
insn=53, live_throughout: 13, 154, 164, dead_or_set: 
insn=58, live_throughout: 13, 164, dead_or_set: 144, 154
insn=59, live_throughout: 13, 144, 164, dead_or_set: 135
insn=61, live_throughout: 13, 135, 144, 164, dead_or_set: 252
insn=76, live_throughout: 13, 135, 144, 164, 252, dead_or_set: 256
insn=57, live_throughout: 13, 135, 144, 252, 256, dead_or_set: 164
insn=292, live_throughout: 13, 144, 252, 256, dead_or_set: 135, 257
insn=293, live_throughout: 13, 252, 256, 257, dead_or_set: 144, 258
insn=80, live_throughout: 13, 252, 256, 257, 258, dead_or_set: 
insn=66, live_throughout: 13, 252, 256, 257, 258, dead_or_set: 1
insn=257, live_throughout: 1, 13, 252, 256, 257, 258, dead_or_set: 2
insn=65, live_throughout: 1, 2, 13, 252, 256, 257, 258, dead_or_set: 0
insn=78, live_throughout: 0, 1, 2, 13, 252, 256, 257, dead_or_set: 258
insn=68, live_throughout: 13, 252, 256, 257, 258, dead_or_set: 0, 1, 2, 14
insn=71, live_throughout: 13, 252, 256, 257, 258, dead_or_set: 0
insn=258, live_throughout: 0, 13, 252, 256, 257, 258, dead_or_set: 1
insn=259, live_throughout: 0, 1, 13, 252, 256, 257, 258, dead_or_set: 2
insn=74, live_throughout: 13, 252, 256, 257, 258, dead_or_set: 0, 1, 2, 14
insn=77, live_throughout: 13, 14, 252, 256, 257, 258, dead_or_set: 0
insn=79, live_throughout: 13, 14, 252, 256, 258, dead_or_set: 257
insn=81, live_throughout: 13, 14, 252, 256, 257, 258, dead_or_set: 
insn=82, live_throughout: 13, 14, 252, 256, 257, 258, dead_or_set: 
insn=84, live_throughout: 13, 14, dead_or_set: 178
insn=127, live_throughout: 13, 14, 178, dead_or_set: 142
insn=130, live_throughout: 13, 14, 142, 178, dead_or_set: 208
insn=131, live_throughout: 13, 14, 142, 178, dead_or_set: 150, 208
insn=103, live_throughout: 13, 14, 142, 150, 178, dead_or_set: 140
insn=288, live_throughout: 13, 14, 140, 142, 150, 178, dead_or_set: 197
insn=289, live_throughout: 13, 14, 140, 142, 150, 178, 197, dead_or_set: 196
insn=115, live_throughout: 13, 14, 140, 142, 150, 178, dead_or_set: 141, 196, 197
insn=135, live_throughout: 13, 14, 140, 141, 142, 150, 178, dead_or_set: 211
insn=273, live_throughout: 13, 14, 140, 141, 142, 150, 178, 211, dead_or_set: 204
insn=132, live_throughout: 13, 14, 140, 141, 142, 150, 178, 204, 211, dead_or_set: 149
insn=136, live_throughout: 13, 14, 140, 141, 142, 149, 150, 178, 204, dead_or_set: 148, 211
insn=287, live_throughout: 13, 14, 140, 141, 142, 148, 149, 150, 178, 204, dead_or_set: 215
insn=140, live_throughout: 13, 14, 140, 141, 142, 148, 149, 150, 178, 204, dead_or_set: 215, 216
insn=148, live_throughout: 13, 14, 140, 141, 142, 148, 149, 150, 178, 204, 216, dead_or_set: 221
insn=88, live_throughout: 13, 14, 140, 141, 142, 148, 149, 150, 178, 204, 216, 221, dead_or_set: 139
insn=119, live_throughout: 13, 14, 139, 140, 141, 142, 148, 149, 150, 178, 204, 216, 221, dead_or_set: 200
insn=141, live_throughout: 13, 14, 139, 140, 141, 142, 148, 149, 150, 178, 200, 204, 221, dead_or_set: 216
insn=274, live_throughout: 13, 14, 139, 140, 141, 142, 148, 149, 150, 178, 200, 216, 221, dead_or_set: 204
insn=150, live_throughout: 13, 14, 139, 140, 141, 142, 148, 149, 150, 178, 200, 204, 216, dead_or_set: 221
insn=121, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 200, 204, 216, dead_or_set: 141, 202
insn=122, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 204, 216, dead_or_set: 200, 202, 203
insn=125, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 216, dead_or_set: 203, 204, 206
insn=286, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 216, dead_or_set: 217
insn=143, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, dead_or_set: 216, 217, 218
insn=285, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 179
insn=86, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 179
insn=284, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 183
insn=93, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 183
insn=283, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 185
insn=96, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 185
insn=282, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 187
insn=99, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 187
insn=281, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 189
insn=102, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 189
insn=280, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 192
insn=108, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 192
insn=279, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 194
insn=111, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 206, 218, dead_or_set: 194
insn=126, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, 218, dead_or_set: 206
insn=144, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, dead_or_set: 218
insn=278, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, dead_or_set: 220
insn=147, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, dead_or_set: 220
insn=90, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, dead_or_set: 
insn=105, live_throughout: 13, 14, 24, 139, 140, 142, 148, 149, 150, 178, dead_or_set: 
insn=129, live_throughout: 13, 14, 24, 139, 140, 148, 149, 150, 178, dead_or_set: 142
insn=151, live_throughout: 13, 14, 139, 140, 148, 149, 150, 178, dead_or_set: 
insn=153, live_throughout: 13, 14, 140, 148, 149, 150, 178, dead_or_set: 139, 147
insn=154, live_throughout: 13, 14, 140, 147, 148, 149, 150, 178, dead_or_set: 
insn=155, live_throughout: 13, 14, 140, 147, 148, 149, 150, 178, dead_or_set: 
insn=157, live_throughout: 13, 14, 140, 150, 178, dead_or_set: 
insn=158, live_throughout: 13, 14, 140, 150, 178, dead_or_set: 
insn=161, live_throughout: 13, 14, 140, 150, 178, dead_or_set: 146
insn=167, live_throughout: 13, 14, 146, 150, 178, dead_or_set: 140, 227
insn=168, live_throughout: 13, 14, 146, 178, dead_or_set: 150, 227, 228
insn=169, live_throughout: 13, 14, 146, 178, dead_or_set: 228
insn=171, live_throughout: 13, 14, 146, 178, dead_or_set: 230
insn=172, live_throughout: 13, 14, 146, 178, dead_or_set: 230
insn=165, live_throughout: 13, 14, 146, 178, dead_or_set: 
insn=174, live_throughout: 13, 14, 146, 178, dead_or_set: 232
insn=175, live_throughout: 13, 14, 146, 178, dead_or_set: 232
insn=176, live_throughout: 13, 14, 146, 178, dead_or_set: 152
insn=163, live_throughout: 13, 14, 152, dead_or_set: 146, 178
insn=265, live_throughout: 13, 14, 152, dead_or_set: 
insn=179, live_throughout: 13, 14, 140, 147, 148, 149, dead_or_set: 
insn=181, live_throughout: 13, 14, 140, 148, 149, dead_or_set: 147
insn=182, live_throughout: 13, 14, 140, 148, 149, dead_or_set: 
insn=184, live_throughout: 13, 14, 148, 149, dead_or_set: 140
insn=185, live_throughout: 13, 14, 148, 149, dead_or_set: 
insn=186, live_throughout: 13, 14, 148, 149, dead_or_set: 
insn=188, live_throughout: 13, 14, 148, 149, dead_or_set: 233
insn=191, live_throughout: 13, 14, 148, 149, 233, dead_or_set: 136
insn=189, live_throughout: 13, 14, 136, 148, 149, 233, dead_or_set: 145
insn=192, live_throughout: 13, 14, 136, 145, 148, 149, 233, dead_or_set: 
insn=193, live_throughout: 13, 14, 136, 145, 148, 149, 233, dead_or_set: 
insn=196, live_throughout: 13, 14, 136, 148, 149, 233, dead_or_set: 137
insn=205, live_throughout: 13, 14, 137, 148, 149, 233, dead_or_set: 136, 241
insn=203, live_throughout: 13, 14, 137, 149, 233, 241, dead_or_set: 148
insn=208, live_throughout: 13, 14, 137, 149, 233, 241, dead_or_set: 243
insn=209, live_throughout: 13, 14, 137, 149, 233, 241, dead_or_set: 243
insn=200, live_throughout: 13, 14, 137, 233, 241, dead_or_set: 149, 238
insn=206, live_throughout: 13, 14, 137, 233, 238, dead_or_set: 241
insn=210, live_throughout: 13, 14, 137, 233, 238, dead_or_set: 152
insn=201, live_throughout: 13, 14, 137, 152, 233, dead_or_set: 238
insn=198, live_throughout: 13, 14, 152, dead_or_set: 137, 233
insn=267, live_throughout: 13, 14, 152, dead_or_set: 
insn=213, live_throughout: 13, 14, 145, 149, 233, dead_or_set: 
insn=218, live_throughout: 13, 14, 145, 149, 233, dead_or_set: 
insn=220, live_throughout: 13, 14, 145, 233, dead_or_set: 149
insn=225, live_throughout: 13, 14, 145, 233, dead_or_set: 250
insn=226, live_throughout: 13, 14, 145, 233, dead_or_set: 250
insn=227, live_throughout: 13, 14, 145, 233, dead_or_set: 152
insn=277, live_throughout: 13, 14, 145, 152, 233, dead_or_set: 248
insn=223, live_throughout: 13, 14, 145, 152, 233, dead_or_set: 248
insn=216, live_throughout: 13, 14, 152, dead_or_set: 145, 233
insn=269, live_throughout: 13, 14, 152, dead_or_set: 
insn=230, live_throughout: 13, 14, dead_or_set: 
insn=232, live_throughout: 13, 14, dead_or_set: 152
insn=271, live_throughout: 13, 14, 152, dead_or_set: 
insn=235, live_throughout: 13, 14, dead_or_set: 
insn=237, live_throughout: 13, 14, dead_or_set: 152
insn=238, live_throughout: 13, 14, 152, dead_or_set: 
insn=244, live_throughout: 13, 14, dead_or_set: 0, 152
insn=250, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 198 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 127 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 161 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 20 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 291 (nil))
init_insns for 166: (insn_list:REG_DEP_TRUE 43 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 290 (nil))
init_insns for 178: (insn_list:REG_DEP_TRUE 84 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 285 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 284 (nil))
init_insns for 185: (insn_list:REG_DEP_TRUE 283 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 282 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 281 (nil))
init_insns for 192: (insn_list:REG_DEP_TRUE 280 (nil))
init_insns for 194: (insn_list:REG_DEP_TRUE 279 (nil))
init_insns for 196: (insn_list:REG_DEP_TRUE 289 (nil))
init_insns for 197: (insn_list:REG_DEP_TRUE 288 (nil))
init_insns for 206: (insn_list:REG_DEP_TRUE 126 (nil))
init_insns for 211: (insn_list:REG_DEP_TRUE 135 (nil))
init_insns for 215: (insn_list:REG_DEP_TRUE 287 (nil))
init_insns for 217: (insn_list:REG_DEP_TRUE 286 (nil))
init_insns for 218: (insn_list:REG_DEP_TRUE 144 (nil))
init_insns for 220: (insn_list:REG_DEP_TRUE 278 (nil))
init_insns for 228: (insn_list:REG_DEP_TRUE 169 (nil))
init_insns for 230: (insn_list:REG_DEP_TRUE 171 (nil))
init_insns for 232: (insn_list:REG_DEP_TRUE 174 (nil))
init_insns for 233: (insn_list:REG_DEP_TRUE 188 (nil))
init_insns for 238: (insn_list:REG_DEP_TRUE 201 (nil))
init_insns for 241: (insn_list:REG_DEP_TRUE 206 (nil))
init_insns for 243: (insn_list:REG_DEP_TRUE 208 (nil))
init_insns for 248: (insn_list:REG_DEP_TRUE 277 (nil))
init_insns for 250: (insn_list:REG_DEP_TRUE 225 (nil))
init_insns for 252: (insn_list:REG_DEP_TRUE 61 (nil))
init_insns for 256: (insn_list:REG_DEP_TRUE 76 (nil))
      Slot 1 (freq,size): a10r148(3000,8)
      Slot 2 (freq,size): a24r218(2000,8)
      Assigning 148(freq=3000) a new slot 0
changing reg in insn 59
changing reg in insn 292
changing reg in insn 191
changing reg in insn 205
changing reg in insn 192
changing reg in insn 196
changing reg in insn 198
changing reg in insn 200
changing reg in insn 88
changing reg in insn 153
changing reg in insn 103
changing reg in insn 140
changing reg in insn 105
changing reg in insn 184
changing reg in insn 167
changing reg in insn 157
changing reg in insn 115
changing reg in insn 274
changing reg in insn 121
changing reg in insn 119
changing reg in insn 127
changing reg in insn 129
changing reg in insn 148
changing reg in insn 130
changing reg in insn 58
changing reg in insn 293
changing reg in insn 189
changing reg in insn 218
changing reg in insn 216
changing reg in insn 161
changing reg in insn 165
changing reg in insn 163
changing reg in insn 153
changing reg in insn 181
changing reg in insn 154
changing reg in insn 132
changing reg in insn 136
changing reg in insn 220
changing reg in insn 205
changing reg in insn 200
changing reg in insn 192
changing reg in insn 131
changing reg in insn 168
changing reg in insn 132
changing reg in insn 237
changing reg in insn 232
changing reg in insn 227
changing reg in insn 210
changing reg in insn 176
changing reg in insn 50
changing reg in insn 27
changing reg in insn 244
changing reg in insn 8
changing reg in insn 58
changing reg in insn 33
changing reg in insn 10
changing reg in insn 7
changing reg in insn 49
changing reg in insn 43
changing reg in insn 26
changing reg in insn 20
changing reg in insn 8
changing reg in insn 43
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 291
changing reg in insn 26
changing reg in insn 39
changing reg in insn 59
changing reg in insn 43
changing reg in insn 44
changing reg in insn 290
changing reg in insn 49
changing reg in insn 84
changing reg in insn 175
changing reg in insn 172
changing reg in insn 169
changing reg in insn 165
changing reg in insn 163
changing reg in insn 161
changing reg in insn 147
changing reg in insn 144
changing reg in insn 135
changing reg in insn 129
changing reg in insn 126
changing reg in insn 111
changing reg in insn 108
changing reg in insn 105
changing reg in insn 102
changing reg in insn 99
changing reg in insn 96
changing reg in insn 93
changing reg in insn 90
changing reg in insn 86
changing reg in insn 168
changing reg in insn 143
changing reg in insn 125
changing reg in insn 161
changing reg in insn 135
changing reg in insn 285
changing reg in insn 86
changing reg in insn 284
changing reg in insn 93
changing reg in insn 283
changing reg in insn 96
changing reg in insn 282
changing reg in insn 99
changing reg in insn 281
changing reg in insn 102
changing reg in insn 280
changing reg in insn 108
changing reg in insn 279
changing reg in insn 111
changing reg in insn 289
changing reg in insn 115
changing reg in insn 288
changing reg in insn 115
changing reg in insn 119
changing reg in insn 122
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 125
changing reg in insn 274
changing reg in insn 273
changing reg in insn 274
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 135
changing reg in insn 136
changing reg in insn 287
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 143
changing reg in insn 143
changing reg in insn 286
changing reg in insn 143
changing reg in insn 278
changing reg in insn 147
changing reg in insn 148
changing reg in insn 150
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 188
changing reg in insn 226
changing reg in insn 223
changing reg in insn 220
changing reg in insn 218
changing reg in insn 216
changing reg in insn 209
changing reg in insn 206
changing reg in insn 203
changing reg in insn 201
changing reg in insn 198
changing reg in insn 196
changing reg in insn 191
changing reg in insn 189
changing reg in insn 196
changing reg in insn 200
changing reg in insn 205
changing reg in insn 200
changing reg in insn 201
changing reg in insn 205
changing reg in insn 206
changing reg in insn 208
changing reg in insn 209
changing reg in insn 277
changing reg in insn 223
changing reg in insn 225
changing reg in insn 226
changing reg in insn 61
changing reg in insn 71
changing reg in insn 65
changing reg in insn 76
changing reg in insn 77
changing reg in insn 292
changing reg in insn 79
changing reg in insn 81
changing reg in insn 79
changing reg in insn 77
changing reg in insn 293
changing reg in insn 78
changing reg in insn 78
changing reg in insn 66
Spilling for insn 26.
Spilling for insn 49.
Spilling for insn 57.
Spilling for insn 77.
Spilling for insn 136.
Using reg 8 for reload 0
Spilling for insn 141.
Using reg 10 for reload 0
Spilling for insn 143.
Using reg 10 for reload 0
Spilling for insn 86.
Spilling for insn 93.
Spilling for insn 96.
Spilling for insn 99.
Spilling for insn 102.
Spilling for insn 108.
Spilling for insn 111.
Spilling for insn 126.
Spilling for insn 144.
Using reg 4 for reload 1
Spilling for insn 147.
Spilling for insn 90.
Spilling for insn 105.
Spilling for insn 129.
Spilling for insn 169.
Spilling for insn 172.
Spilling for insn 165.
Spilling for insn 175.
Spilling for insn 163.
Spilling for insn 203.
Using reg 4 for reload 1
Spilling for insn 209.
Spilling for insn 206.
Spilling for insn 201.
Spilling for insn 198.
Spilling for insn 218.
Spilling for insn 220.
Spilling for insn 226.
Spilling for insn 223.
Spilling for insn 216.
      Spill 200(a38), cost=20000
      Spill 217(a33), cost=20000
      Spilled regs 200 217
        Try assign 218(a24), cost=20000
        Try assign 148(a10), cost=30000
changing reg in insn 119
changing reg in insn 122
      Assigning 200(freq=2000) a new slot 2
 Register 200 now on stack.

changing reg in insn 286
changing reg in insn 143
 Register 217 now on stack.

Spilling for insn 26.
Spilling for insn 49.
Spilling for insn 57.
Spilling for insn 77.
Spilling for insn 136.
Using reg 8 for reload 0
Spilling for insn 119.
Using reg 10 for reload 0
Spilling for insn 141.
Using reg 10 for reload 0
Spilling for insn 122.
Using reg 10 for reload 0
Spilling for insn 143.
Using reg 10 for reload 0
Using reg 6 for reload 1
Spilling for insn 86.
Spilling for insn 93.
Spilling for insn 96.
Spilling for insn 99.
Spilling for insn 102.
Spilling for insn 108.
Spilling for insn 111.
Spilling for insn 126.
Spilling for insn 144.
Using reg 4 for reload 1
Spilling for insn 147.
Spilling for insn 90.
Spilling for insn 105.
Spilling for insn 129.
Spilling for insn 169.
Spilling for insn 172.
Spilling for insn 165.
Spilling for insn 175.
Spilling for insn 163.
Spilling for insn 203.
Using reg 4 for reload 1
Spilling for insn 209.
Spilling for insn 206.
Spilling for insn 201.
Spilling for insn 198.
Spilling for insn 218.
Spilling for insn 220.
Spilling for insn 226.
Spilling for insn 223.
Spilling for insn 216.
      Spill 150(a19), cost=30000
      Spilled regs 150
        Try assign 217(a33), cost=20000
        Try assign 200(a38), cost=20000: reassign to 7
changing reg in insn 119
changing reg in insn 122
changing reg in insn 131
changing reg in insn 132
changing reg in insn 168
      Assigning 150(freq=3000) a new slot 3
 Register 150 now on stack.

 Register 200 now in 7.

Spilling for insn 26.
Spilling for insn 49.
Spilling for insn 57.
Spilling for insn 77.
Spilling for insn 131.
Spilling for insn 132.
Using reg 7 for reload 0
Spilling for insn 136.
Using reg 8 for reload 0
Spilling for insn 141.
Using reg 10 for reload 0
Spilling for insn 143.
Using reg 6 for reload 0
Using reg 10 for reload 1
Spilling for insn 86.
Spilling for insn 93.
Spilling for insn 96.
Spilling for insn 99.
Spilling for insn 102.
Spilling for insn 108.
Spilling for insn 111.
Spilling for insn 126.
Spilling for insn 144.
Using reg 4 for reload 1
Spilling for insn 147.
Spilling for insn 90.
Spilling for insn 105.
Spilling for insn 129.
Spilling for insn 168.
Using reg 0 for reload 0
Spilling for insn 169.
Spilling for insn 172.
Spilling for insn 165.
Spilling for insn 175.
Spilling for insn 163.
Spilling for insn 203.
Using reg 4 for reload 1
Spilling for insn 209.
Spilling for insn 206.
Spilling for insn 201.
Spilling for insn 198.
Spilling for insn 218.
Spilling for insn 220.
Spilling for insn 226.
Spilling for insn 223.
Spilling for insn 216.
deleting insn with uid = 286.
deleting insn with uid = 144.

Reloads for insn # 26
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])

Reloads for insn # 49
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])

Reloads for insn # 57
Reload 0: reload_out (QI) = (mem/s/j:QI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 84 [0x54])) [0 buf+8 S1 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:QI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 84 [0x54])) [0 buf+8 S1 A32])

Reloads for insn # 77
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [256])
                                                        (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])) [0 parsed S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [256])
                                                        (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])) [0 parsed S4 A32])

Reloads for insn # 131
Reload 0: reload_out (SI) = (reg:SI 150 [ D.25875 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 150 [ D.25875 ])
	reload_reg_rtx: (reg:SI 7 r7)

Reloads for insn # 132
Reload 0: reload_in (SI) = (reg:SI 150 [ D.25875 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:SI 150 [ D.25875 ])
	reload_reg_rtx: (reg:SI 7 r7)

Reloads for insn # 136
Reload 0: reload_out (DI) = (reg:DI 148 [ D.25878 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 148 [ D.25878 ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 141
Reload 0: reload_in (DI) = (reg:DI 148 [ D.25878 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 148 [ D.25878 ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 143
Reload 0: reload_out (DI) = (reg:DI 218)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 218)
	reload_reg_rtx: (reg:DI 6 r6)
Reload 1: reload_in (DI) = (const_int -4 [0xfffffffffffffffc])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 217)
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 86
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 212 [0xd4])) [0 ino+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 212 [0xd4])) [0 ino+0 S4 A32])

Reloads for insn # 93
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 100 [0x64])) [0 uid+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 100 [0x64])) [0 uid+0 S4 A32])

Reloads for insn # 96
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 104 [0x68])) [0 gid+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 104 [0x68])) [0 gid+0 S4 A32])

Reloads for insn # 99
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 200 [0xc8])) [0 nlink+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 200 [0xc8])) [0 nlink+0 S4 A32])

Reloads for insn # 102
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 108 [0x6c])) [0 mtime+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 108 [0x6c])) [0 mtime+0 S4 A32])

Reloads for insn # 108
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 204 [0xcc])) [0 major+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 204 [0xcc])) [0 major+0 S4 A32])

Reloads for insn # 111
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 208 [0xd0])) [0 minor+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 208 [0xd0])) [0 minor+0 S4 A32])

Reloads for insn # 126
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 348 [0x15c])) [0 rdev+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 348 [0x15c])) [0 rdev+0 S4 A32])

Reloads for insn # 147
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 90
Reload 0: reload_out (HI) = (mem/c/i:HI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 216 [0xd8])) [0 mode+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:HI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 216 [0xd8])) [0 mode+0 S2 A16])

Reloads for insn # 105
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 92 [0x5c])) [0 body_len+0 S4 A32])

Reloads for insn # 129
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 96 [0x60])) [0 name_len+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 96 [0x60])) [0 name_len+0 S4 A32])

Reloads for insn # 168
Reload 0: reload_in (SI) = (reg:SI 150 [ D.25875 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:SI 150 [ D.25875 ])
	reload_reg_rtx: (reg:SI 11 fp)

Reloads for insn # 169
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 40 [0x28])) [0 remains+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 40 [0x28])) [0 remains+0 S4 A32])

Reloads for insn # 172
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])

Reloads for insn # 165
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 36 [0x24])) [0 collect+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 36 [0x24])) [0 collect+0 S4 A32])

Reloads for insn # 175
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 163
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])

Reloads for insn # 203
Reload 0: reload_out (DI) = (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 24 [0x18])) [0 this_header+0 S8 A64])
Reload 1: reload_in (DI) = (reg:DI 148 [ D.25878 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:DI 148 [ D.25878 ])
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 209
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 206
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 8 [0x8])) [0 count+0 S4 A32])

Reloads for insn # 201
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 12 [0xc])) [0 victim+0 S4 A32])

Reloads for insn # 198
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])

Reloads for insn # 218
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 36 [0x24])) [0 collect+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 36 [0x24])) [0 collect+0 S4 A32])

Reloads for insn # 220
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 40 [0x28])) [0 remains+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 40 [0x28])) [0 remains+0 S4 A32])

Reloads for insn # 226
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 32 [0x20])) [0 state+0 S4 A32])

Reloads for insn # 223
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 44 [0x2c])) [0 next_state+0 S4 A32])

Reloads for insn # 216
Reload 0: reload_out (SI) = (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                                                        (const_int 16 [0x10])) [0 collected+0 S4 A32])
deleting insn with uid = 292.
deleting insn with uid = 293.
deleting insn with uid = 244.
+++Overall after reload 95750


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 74.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 32 count 40 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 32 count 42 (  1.9)


do_header

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={20d,18u} r1={15d,16u} r2={15d,15u} r3={11d,37u,8d} r4={14d,19u,3d} r5={7d,9u,1d} r6={6d,9u} r7={6d,7u} r8={4d,6u} r9={3d,3u} r10={2d,2u} r11={3d,3u} r12={10d,5u} r13={1d,45u,12d} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={18d,11u} r25={2d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 812{580d,206u,26e} in 148{144 regular + 4 call} insns.
(note 3 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 3 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 14 2 NOTE_INSN_FUNCTION_BEG)

(note 14 4 7 2 NOTE_INSN_DELETED)

(insn 7 14 12 2 init/initramfs.c:220 (set (reg/f:SI 4 r4 [156])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 12 7 11 2 init/initramfs.c:220 (set (reg:SI 2 r2)
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (nil))

(insn 11 12 8 2 init/initramfs.c:220 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11536380>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11536380>)
        (nil)))

(insn 8 11 10 2 init/initramfs.c:220 (set (reg/f:SI 5 r5 [orig:154 collected.344 ] [154])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(insn 10 8 13 2 init/initramfs.c:220 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:154 collected.344 ] [154])) 167 {*arm_movsi_insn} (nil))

(call_insn/i 13 10 16 2 init/initramfs.c:220 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcmp") [flags 0x41] <function_decl 0x51154b80 memcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 16 13 17 2 init/initramfs.c:220 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 2 init/initramfs.c:220 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [0.0%]  (fallthru)
(note 18 17 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 20 18 21 3 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:160 message ] [160])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 21 20 22 3 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:160 message ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 22 21 23 3 init/initramfs.c:15 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 230)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 3 -> ( 4 19)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  4 [15.0%]  (fallthru)
;; Succ edge  19 [85.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  3 [15.0%]  (fallthru)
(note 23 22 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 27 23 291 4 init/initramfs.c:222 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 291 27 26 4 init/initramfs.c:16 (set (reg/f:SI 3 r3 [162])
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11527b90>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11527b90>)
        (nil)))

(insn 26 291 261 4 init/initramfs.c:16 (set (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])
        (reg/f:SI 3 r3 [162])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11527b90>)
        (nil)))

(jump_insn 261 26 262 4 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 21)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 262 261 30)

;; Start of basic block ( 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%] 
(code_label 30 262 31 5 133 "" [1 uses])

(note 31 30 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 37 31 33 5 NOTE_INSN_DELETED)

(insn 33 37 34 5 init/initramfs.c:224 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:154 collected.344 ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 34 33 35 5 init/initramfs.c:224 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x1153c020>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x1153c020>)
        (nil)))

(insn 35 34 36 5 init/initramfs.c:224 (set (reg:SI 2 r2)
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (nil))

(call_insn/i 36 35 39 5 init/initramfs.c:224 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcmp") [flags 0x41] <function_decl 0x51154b80 memcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 39 36 40 5 init/initramfs.c:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 0 r0 [164])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 40 39 41 5 init/initramfs.c:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 41 40 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 43 41 44 6 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:166 message ] [166])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 44 43 45 6 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:166 message ] [166])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 45 44 46 6 init/initramfs.c:15 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 230)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 6 -> ( 7 19)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  7 [15.0%]  (fallthru)
;; Succ edge  19 [85.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  6 [15.0%]  (fallthru)
(note 46 45 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 50 46 290 7 init/initramfs.c:226 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 290 50 49 7 init/initramfs.c:16 (set (reg/f:SI 3 r3 [168])
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x114f9ed0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x114f9ed0>)
        (nil)))

(insn 49 290 263 7 init/initramfs.c:16 (set (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])
        (reg/f:SI 3 r3 [168])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x114f9ed0>)
        (nil)))

(jump_insn 263 49 264 7 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 21)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 264 263 53)

;; Start of basic block ( 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 5 [r5] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  5 [50.0%] 
(code_label 53 264 54 8 136 "" [1 uses])

(note 54 53 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 58 54 59 8 init/initramfs.c:136 (set (reg/v/f:SI 5 r5 [orig:144 s ] [144])
        (plus:SI (reg/f:SI 5 r5 [orig:154 collected.344 ] [154])
            (const_int 6 [0x6]))) 4 {*arm_addsi3} (nil))

(insn 59 58 61 8 init/initramfs.c:136 (set (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])
        (reg:SI 0 r0 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 61 59 76 8 init/initramfs.c:137 (set (reg/f:SI 6 r6 [252])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 76 [0x4c]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 76 [0x4c]))
        (nil)))

(insn 76 61 57 8 init/initramfs.c:138 (set (reg/f:SI 7 r7 [256])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 28 [0x1c]))
        (nil)))

(insn 57 76 80 8 init/initramfs.c:135 (set (mem/s/j:QI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 buf+8 S1 A32])
        (reg:QI 0 r0 [164])) 178 {*arm_movqi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 9 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  9 [91.7%]  (dfs_back)
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 80 57 60 9 137 "" [1 uses])

(note 60 80 75 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 75 60 66 9 NOTE_INSN_DELETED)

(insn 66 75 257 9 init/initramfs.c:137 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:144 s ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 257 66 65 9 init/initramfs.c:137 (set (reg:SI 2 r2)
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(insn 65 257 78 9 init/initramfs.c:137 (set (reg:SI 0 r0)
        (reg/f:SI 6 r6 [252])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 78 65 68 9 init/initramfs.c:136 discrim 2 (set (reg/v/f:SI 5 r5 [orig:144 s ] [144])
        (plus:SI (reg/v/f:SI 5 r5 [orig:144 s ] [144])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(call_insn 68 78 71 9 init/initramfs.c:137 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x1150cc00 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 71 68 258 9 init/initramfs.c:138 (set (reg:SI 0 r0)
        (reg/f:SI 6 r6 [252])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 258 71 259 9 init/initramfs.c:138 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 259 258 74 9 init/initramfs.c:138 (set (reg:SI 2 r2)
        (const_int 16 [0x10])) 167 {*arm_movsi_insn} (nil))

(call_insn 74 259 77 9 init/initramfs.c:138 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("simple_strtoul") [flags 0x41] <function_decl 0x10aa5680 simple_strtoul>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 77 74 79 9 init/initramfs.c:138 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [256])
                (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])) [0 parsed S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 79 77 81 9 init/initramfs.c:136 discrim 2 (set (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])
        (plus:SI (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 81 79 82 9 init/initramfs.c:136 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 82 81 83 9 init/initramfs.c:136 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9167 [0x23cf])
        (nil)))
;; End of basic block 9 -> ( 9 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [91.7%]  (dfs_back)
;; Succ edge  10 [8.3%]  (fallthru,loop_exit)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  9 [8.3%]  (fallthru,loop_exit)
(note 83 82 87 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 87 83 113 10 NOTE_INSN_DELETED)

(note 113 87 116 10 NOTE_INSN_DELETED)

(note 116 113 117 10 NOTE_INSN_DELETED)

(note 117 116 120 10 NOTE_INSN_DELETED)

(note 120 117 124 10 NOTE_INSN_DELETED)

(note 124 120 133 10 NOTE_INSN_DELETED)

(note 133 124 138 10 NOTE_INSN_DELETED)

(note 138 133 149 10 NOTE_INSN_DELETED)

(note 149 138 84 10 NOTE_INSN_DELETED)

(insn 84 149 127 10 init/initramfs.c:140 (set (reg/f:SI 3 r3 [178])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 127 84 130 10 init/initramfs.c:150 (set (reg:SI 0 r0 [orig:142 name_len.324 ] [142])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 parsed+44 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 parsed+44 S4 A32])
        (nil)))

(insn 130 127 131 10 init/initramfs.c:229 (set (reg:SI 7 r7 [208])
        (plus:SI (reg:SI 0 r0 [orig:142 name_len.324 ] [142])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 131 130 295 10 init/initramfs.c:229 (set (reg:SI 7 r7)
        (and:SI (reg:SI 7 r7 [208])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 295 131 103 10 init/initramfs.c:229 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-84 S4 A32])
        (reg:SI 7 r7)) 167 {*arm_movsi_insn} (nil))

(insn 103 295 288 10 init/initramfs.c:146 (set (reg:SI 1 r1 [orig:140 body_len.320 ] [140])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 52 [0x34])) [0 parsed+24 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 288 103 289 10 init/initramfs.c:149 (set (reg:SI 2 r2 [orig:197 parsed+40 ] [197])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 parsed+40 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 parsed+40 S4 A32])
        (nil)))

(insn 289 288 115 10 init/initramfs.c:149 (set (reg:SI 6 r6 [orig:196 parsed+36 ] [196])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 parsed+36 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 parsed+36 S4 A32])
        (nil)))

(insn 115 289 135 10 init/initramfs.c:149 (set (reg:SI 6 r6 [orig:141 D.26529 ] [141])
        (ior:SI (ashift:SI (reg:SI 6 r6 [orig:196 parsed+36 ] [196])
                (const_int 20 [0x14]))
            (reg:SI 2 r2 [orig:197 parsed+40 ] [197]))) 270 {*arith_shiftsi} (nil))

(insn 135 115 273 10 init/initramfs.c:229 (set (reg:DI 4 r4 [orig:211 this_header ] [211])
        (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
            (nil))))

(insn 273 135 132 10 init/initramfs.c:149 (set (reg:SI 12 ip [204])
        (const_int 1048320 [0xfff00])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1048320 [0xfff00])
        (nil)))

(insn 132 273 136 10 init/initramfs.c:229 (set (reg:SI 2 r2 [orig:149 D.25876 ] [149])
        (plus:SI (reg:SI 7 r7)
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn 136 132 296 10 init/initramfs.c:229 (parallel [
            (set (reg:DI 8 r8)
                (plus:DI (zero_extend:DI (reg:SI 2 r2 [orig:149 D.25876 ] [149]))
                    (reg:DI 4 r4 [orig:211 this_header ] [211])))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (nil))

(insn 296 136 287 10 init/initramfs.c:229 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-72 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 287 296 140 10 init/initramfs.c:230 (set (reg:DI 8 r8 [215])
        (const_int 3 [0x3])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 140 287 148 10 init/initramfs.c:230 (parallel [
            (set (reg:DI 4 r4 [216])
                (plus:DI (zero_extend:DI (reg:SI 1 r1 [orig:140 body_len.320 ] [140]))
                    (reg:DI 8 r8 [215])))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (nil))

(insn 148 140 88 10 init/initramfs.c:232 (set (reg:SI 9 r9 [221])
        (plus:SI (reg:SI 0 r0 [orig:142 name_len.324 ] [142])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 88 148 119 10 init/initramfs.c:141 (set (reg:SI 8 r8 [orig:139 mode.315 ] [139])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 32 [0x20])) [0 parsed+4 S2 A32]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 119 88 297 10 init/initramfs.c:149 (set (reg:SI 7 r7 [200])
        (lshiftrt:SI (reg:SI 6 r6 [orig:141 D.26529 ] [141])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 297 119 141 10 init/initramfs.c:230 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-72 S8 A64])) 163 {*arm_movdi} (nil))

(insn 141 297 274 10 init/initramfs.c:230 (parallel [
            (set (reg:DI 4 r4 [216])
                (plus:DI (reg:DI 4 r4 [216])
                    (reg:DI 10 sl)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 274 141 150 10 init/initramfs.c:149 (set (reg:SI 12 ip [204])
        (and:SI (reg:SI 6 r6 [orig:141 D.26529 ] [141])
            (reg:SI 12 ip [204]))) 67 {*arm_andsi3_insn} (nil))

(insn 150 274 121 10 init/initramfs.c:232 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [221])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 121 150 122 10 init/initramfs.c:149 (set (reg:SI 6 r6 [202])
        (and:SI (reg:SI 6 r6 [orig:141 D.26529 ] [141])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn 122 121 125 10 init/initramfs.c:149 (set (reg:SI 6 r6 [203])
        (ior:SI (ashift:SI (reg:SI 7 r7 [200])
                (const_int 8 [0x8]))
            (reg:SI 6 r6 [202]))) 270 {*arith_shiftsi} (nil))

(insn 125 122 286 10 init/initramfs.c:149 (set (reg:SI 12 ip [206])
        (ior:SI (ashift:SI (reg:SI 12 ip [204])
                (const_int 12 [0xc]))
            (reg:SI 6 r6 [203]))) 270 {*arith_shiftsi} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 348 [0x15c])) [0 rdev+0 S4 A32])
        (nil)))

(note 286 125 299 10 NOTE_INSN_DELETED)

(insn 299 286 143 10 init/initramfs.c:230 (set (reg:DI 10 sl)
        (const_int -4 [0xfffffffffffffffc])) 163 {*arm_movdi} (nil))

(insn 143 299 298 10 init/initramfs.c:230 (set (reg:DI 6 r6)
        (and:DI (reg:DI 4 r4 [216])
            (reg:DI 10 sl))) 64 {anddi3} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 48 [0x30])) [0 next_header+0 S8 A64])
        (expr_list:REG_EQUAL (and:DI (reg:DI 4 r4 [216])
                (const_int -4 [0xfffffffffffffffc]))
            (nil))))

(insn 298 143 285 10 init/initramfs.c:230 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 48 [0x30])) [0 next_header+0 S8 A64])
        (reg:DI 6 r6)) 163 {*arm_movdi} (nil))

(insn 285 298 86 10 init/initramfs.c:140 (set (reg:SI 4 r4 [orig:179 parsed ] [179])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 parsed+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 parsed+0 S4 A32])
        (nil)))

(insn 86 285 284 10 init/initramfs.c:140 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 212 [0xd4])) [0 ino+0 S4 A32])
        (reg:SI 4 r4 [orig:179 parsed ] [179])) 167 {*arm_movsi_insn} (nil))

(insn 284 86 93 10 init/initramfs.c:142 (set (reg:SI 4 r4 [orig:183 parsed+8 ] [183])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 parsed+8 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 parsed+8 S4 A32])
        (nil)))

(insn 93 284 283 10 init/initramfs.c:142 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])
        (reg:SI 4 r4 [orig:183 parsed+8 ] [183])) 167 {*arm_movsi_insn} (nil))

(insn 283 93 96 10 init/initramfs.c:143 (set (reg:SI 4 r4 [orig:185 parsed+12 ] [185])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 parsed+12 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 parsed+12 S4 A32])
        (nil)))

(insn 96 283 282 10 init/initramfs.c:143 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])
        (reg:SI 4 r4 [orig:185 parsed+12 ] [185])) 167 {*arm_movsi_insn} (nil))

(insn 282 96 99 10 init/initramfs.c:144 (set (reg:SI 4 r4 [orig:187 parsed+16 ] [187])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 parsed+16 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 parsed+16 S4 A32])
        (nil)))

(insn 99 282 281 10 init/initramfs.c:144 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 200 [0xc8])) [0 nlink+0 S4 A32])
        (reg:SI 4 r4 [orig:187 parsed+16 ] [187])) 167 {*arm_movsi_insn} (nil))

(insn 281 99 102 10 init/initramfs.c:145 (set (reg:SI 4 r4 [orig:189 parsed+20 ] [189])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 parsed+20 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 parsed+20 S4 A32])
        (nil)))

(insn 102 281 280 10 init/initramfs.c:145 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])
        (reg:SI 4 r4 [orig:189 parsed+20 ] [189])) 167 {*arm_movsi_insn} (nil))

(insn 280 102 108 10 init/initramfs.c:147 (set (reg:SI 4 r4 [orig:192 parsed+28 ] [192])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 parsed+28 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 parsed+28 S4 A32])
        (nil)))

(insn 108 280 279 10 init/initramfs.c:147 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 204 [0xcc])) [0 major+0 S4 A32])
        (reg:SI 4 r4 [orig:192 parsed+28 ] [192])) 167 {*arm_movsi_insn} (nil))

(insn 279 108 111 10 init/initramfs.c:148 (set (reg:SI 4 r4 [orig:194 parsed+32 ] [194])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 parsed+32 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 parsed+32 S4 A32])
        (nil)))

(insn 111 279 126 10 init/initramfs.c:148 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 208 [0xd0])) [0 minor+0 S4 A32])
        (reg:SI 4 r4 [orig:194 parsed+32 ] [194])) 167 {*arm_movsi_insn} (nil))

(insn 126 111 144 10 init/initramfs.c:149 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 348 [0x15c])) [0 rdev+0 S4 A32])
        (reg:SI 12 ip [206])) 167 {*arm_movsi_insn} (nil))

(note 144 126 278 10 NOTE_INSN_DELETED)

(insn 278 144 147 10 init/initramfs.c:231 (set (reg:SI 12 ip [220])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 147 278 90 10 init/initramfs.c:231 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 12 ip [220])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(insn 90 147 105 10 init/initramfs.c:141 (set (mem/c/i:HI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 216 [0xd8])) [0 mode+0 S2 A16])
        (reg:HI 8 r8 [orig:139 mode.315 ] [139])) 176 {*movhi_insn_arch4} (nil))

(insn 105 90 129 10 init/initramfs.c:146 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (reg:SI 1 r1 [orig:140 body_len.320 ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 129 105 151 10 init/initramfs.c:150 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])
        (reg:SI 0 r0 [orig:142 name_len.324 ] [142])) 167 {*arm_movsi_insn} (nil))

(jump_insn 151 129 152 10 init/initramfs.c:232 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 235)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 10 -> ( 20 11)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 13 [sp]


;; Succ edge  20 [39.0%] 
;; Succ edge  11 [61.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 13 [sp]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  10 [61.0%]  (fallthru)
(note 152 151 153 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 153 152 154 11 init/initramfs.c:234 (set (reg:SI 8 r8 [orig:147 D.25890 ] [147])
        (and:SI (reg:SI 8 r8 [orig:139 mode.315 ] [139])
            (const_int 61440 [0xf000]))) 67 {*arm_andsi3_insn} (nil))

(insn 154 153 155 11 init/initramfs.c:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:147 D.25890 ] [147])
            (const_int 40960 [0xa000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 155 154 156 11 init/initramfs.c:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 11 -> ( 12 14)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 13 [sp]


;; Succ edge  12 [28.0%]  (fallthru)
;; Succ edge  14 [72.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [28.0%]  (fallthru)
(note 156 155 157 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 157 156 158 12 init/initramfs.c:235 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:140 body_len.320 ] [140])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 158 157 159 12 init/initramfs.c:235 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 235)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 20 13)
;; lr  out 	 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 13 [sp]


;; Succ edge  20 [50.0%] 
;; Succ edge  13 [50.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 7 [r7] 11 [fp]
;; live  in  	 1 [r1] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 7 [r7] 11 [fp]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 159 158 161 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 161 159 167 13 init/initramfs.c:237 (set (reg/f:SI 2 r2 [orig:146 symlink_buf.352 ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 112 [0x70]))) [0 symlink_buf+0 S4 A32])
            (nil))))

(insn 167 161 300 13 init/initramfs.c:238 (set (reg:SI 1 r1 [227])
        (plus:SI (reg:SI 1 r1 [orig:140 body_len.320 ] [140])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn 300 167 168 13 init/initramfs.c:238 (set (reg:SI 11 fp)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-84 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 168 300 169 13 init/initramfs.c:238 (set (reg:SI 7 r7 [228])
        (plus:SI (reg:SI 1 r1 [227])
            (reg:SI 11 fp))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (nil)))

(insn 169 168 171 13 init/initramfs.c:238 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (reg:SI 7 r7 [228])) 167 {*arm_movsi_insn} (nil))

(insn 171 169 172 13 init/initramfs.c:239 (set (reg:SI 1 r1 [230])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn 172 171 165 13 init/initramfs.c:239 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 1 r1 [230])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 6 [0x6])
        (nil)))

(insn 165 172 174 13 init/initramfs.c:237 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (reg/f:SI 2 r2 [orig:146 symlink_buf.352 ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 174 165 175 13 init/initramfs.c:240 (set (reg:SI 1 r1 [232])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 175 174 176 13 init/initramfs.c:240 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 1 r1 [232])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 176 175 163 13 init/initramfs.c:241 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 163 176 265 13 init/initramfs.c:237 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (reg/f:SI 2 r2 [orig:146 symlink_buf.352 ] [146])) 167 {*arm_movsi_insn} (nil))

(jump_insn 265 163 266 13 init/initramfs.c:241 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 21)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 266 265 179)

;; Start of basic block ( 11) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [72.0%] 
(code_label 179 266 180 14 139 "" [1 uses])

(note 180 179 181 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 181 180 182 14 init/initramfs.c:243 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:147 D.25890 ] [147])
            (const_int 32768 [0x8000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 182 181 183 14 init/initramfs.c:243 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 186)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 14 -> ( 16 15)
;; lr  out 	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 13 [sp]


;; Succ edge  16 [0.0%] 
;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru)
(note 183 182 184 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 184 183 185 15 init/initramfs.c:243 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:140 body_len.320 ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 185 184 186 15 init/initramfs.c:243 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 235)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 15 -> ( 16 20)
;; lr  out 	 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 13 [sp]


;; Succ edge  16 [0.0%]  (fallthru)
;; Succ edge  20 [100.0%] 

;; Start of basic block ( 14 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [0.0%] 
;; Pred edge  15 [0.0%]  (fallthru)
(code_label 186 185 187 16 140 "" [1 uses])

(note 187 186 188 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 188 187 191 16 init/initramfs.c:244 (set (reg/f:SI 3 r3 [233])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 191 188 189 16 init/initramfs.c:184 (set (reg:SI 0 r0 [orig:136 count.331 ] [136])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn 189 191 192 16 init/initramfs.c:244 (set (reg/f:SI 1 r1 [orig:145 name_buf.354 ] [145])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 116 [0x74])) [0 name_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 116 [0x74]))) [0 name_buf+0 S4 A32])
        (nil)))

(insn 192 189 193 16 init/initramfs.c:184 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:136 count.331 ] [136])
            (reg:SI 2 r2 [orig:149 D.25876 ] [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 193 192 194 16 init/initramfs.c:184 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 213)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  17 [0.0%]  (fallthru)
;; Succ edge  18 [100.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip]
;; live  kill	

;; Pred edge  16 [0.0%]  (fallthru)
(note 194 193 196 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 196 194 205 17 init/initramfs.c:185 (set (reg/f:SI 1 r1 [orig:137 victim.332 ] [137])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 205 196 301 17 init/initramfs.c:174 (set (reg:SI 0 r0 [241])
        (minus:SI (reg:SI 0 r0 [orig:136 count.331 ] [136])
            (reg:SI 2 r2 [orig:149 D.25876 ] [149]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn 301 205 203 17 init/initramfs.c:173 (set (reg:DI 4 r4)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-72 S8 A64])) 163 {*arm_movdi} (nil))

(insn 203 301 208 17 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 4 r4)) 163 {*arm_movdi} (nil))

(insn 208 203 209 17 init/initramfs.c:187 (set (reg:SI 12 ip [243])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 4 [0x4])
        (nil)))

(insn 209 208 200 17 init/initramfs.c:187 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 12 ip [243])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(insn 200 209 206 17 init/initramfs.c:172 (set (reg:SI 2 r2 [238])
        (plus:SI (reg/f:SI 1 r1 [orig:137 victim.332 ] [137])
            (reg:SI 2 r2 [orig:149 D.25876 ] [149]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 206 200 210 17 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 0 r0 [241])) 167 {*arm_movsi_insn} (nil))

(insn 210 206 201 17 init/initramfs.c:245 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 201 210 198 17 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 2 r2 [238])) 167 {*arm_movsi_insn} (nil))

(insn 198 201 267 17 init/initramfs.c:185 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (reg/f:SI 1 r1 [orig:137 victim.332 ] [137])) 167 {*arm_movsi_insn} (nil))

(jump_insn 267 198 268 17 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 21)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 268 267 213)

;; Start of basic block ( 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	

;; Pred edge  16 [100.0%] 
(code_label 213 268 214 18 141 "" [1 uses])

(note 214 213 218 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 218 214 220 18 init/initramfs.c:189 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (reg/f:SI 1 r1 [orig:145 name_buf.354 ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 220 218 225 18 init/initramfs.c:190 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (reg:SI 2 r2 [orig:149 D.25876 ] [149])) 167 {*arm_movsi_insn} (nil))

(insn 225 220 226 18 init/initramfs.c:192 (set (reg:SI 2 r2 [250])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 226 225 227 18 init/initramfs.c:192 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 2 r2 [250])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 227 226 277 18 init/initramfs.c:245 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 277 227 223 18 init/initramfs.c:191 (set (reg:SI 2 r2 [248])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 4 [0x4])
        (nil)))

(insn 223 277 216 18 init/initramfs.c:191 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 2 r2 [248])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 4 [0x4])
        (nil)))

(insn 216 223 269 18 init/initramfs.c:189 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (reg/f:SI 1 r1 [orig:145 name_buf.354 ] [145])) 167 {*arm_movsi_insn} (nil))

(jump_insn 269 216 270 18 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 21)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 270 269 230)

;; Start of basic block ( 3 6) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [85.0%] 
;; Pred edge  6 [85.0%] 
(code_label 230 270 231 19 134 "" [2 uses])

(note 231 230 232 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 232 231 271 19 init/initramfs.c:222 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(jump_insn 271 232 272 19 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 21)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 272 271 235)

;; Start of basic block ( 12 10 15) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  12 [50.0%] 
;; Pred edge  10 [39.0%] 
;; Pred edge  15 [100.0%] 
(code_label 235 272 236 20 138 "" [3 uses])

(note 236 235 237 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 237 236 238 20 init/initramfs.c:233 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 20 -> ( 21)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 20 18 17 7 13 4 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  19 [100.0%] 
(code_label 238 237 239 21 135 "" [6 uses])

(note 239 238 250 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 250 239 276 21 init/initramfs.c:246 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 21 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 276 250 294 NOTE_INSN_DELETED)

(note 294 276 0 NOTE_INSN_DELETED)


;; Function populate_rootfs (populate_rootfs)[0:1338] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 80.
verify found no changes in insn with uid = 80.
deleting insn with uid = 60.
scanning new insn with uid = 81.
verify found no changes in insn with uid = 81.
deleting insn with uid = 57.
scanning new insn with uid = 82.
verify found no changes in insn with uid = 82.
deleting insn with uid = 51.
scanning new insn with uid = 83.
verify found no changes in insn with uid = 83.
deleting insn with uid = 29.
scanning new insn with uid = 84.
verify found no changes in insn with uid = 84.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 18 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 20 (  1.8)

Pass 0 for finding allocno costs

    a0 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 75(l0): point = 0
   Insn 69(l0): point = 2
   Insn 62(l0): point = 5
   Insn 80(l0): point = 7
   Insn 59(l0): point = 9
   Insn 81(l0): point = 11
   Insn 58(l0): point = 13
   Insn 54(l0): point = 16
   Insn 53(l0): point = 18
   Insn 82(l0): point = 20
   Insn 52(l0): point = 22
   Insn 50(l0): point = 24
   Insn 48(l0): point = 27
   Insn 47(l0): point = 29
   Insn 46(l0): point = 31
   Insn 45(l0): point = 33
   Insn 42(l0): point = 36
   Insn 40(l0): point = 38
   Insn 41(l0): point = 40
   Insn 37(l0): point = 43
   Insn 36(l0): point = 45
   Insn 34(l0): point = 47
   Insn 33(l0): point = 49
   Insn 32(l0): point = 51
   Insn 30(l0): point = 53
   Insn 83(l0): point = 55
   Insn 28(l0): point = 57
   Insn 26(l0): point = 59
   Insn 25(l0): point = 61
   Insn 22(l0): point = 64
   Insn 21(l0): point = 66
   Insn 20(l0): point = 68
   Insn 19(l0): point = 70
   Insn 15(l0): point = 73
   Insn 12(l0): point = 76
   Insn 11(l0): point = 78
   Insn 9(l0): point = 80
   Insn 8(l0): point = 82
   Insn 84(l0): point = 84
   Insn 7(l0): point = 86
 a0(r153): [6..7]
 a1(r152): [6..13]
 a2(r151): [10..11]
 a3(r150): [19..20]
 a4(r149): [23..24]
 a5(r148): [30..31]
 a6(r147): [32..33]
 a7(r133): [41..45]
 a8(r145): [50..53]
 a9(r134): [52..57]
 a10(r143): [54..55]
 a11(r139): [58..70]
 a12(r140): [67..68]
 a13(r138): [83..84]
Compressing live ranges: from 89 to 27 - 30%
Ranges after the compression:
 a0(r153): [0..1]
 a1(r152): [0..4]
 a2(r151): [2..3]
 a3(r150): [5..6]
 a4(r149): [7..8]
 a5(r148): [9..10]
 a6(r147): [11..12]
 a7(r133): [13..14]
 a8(r145): [15..17]
 a9(r134): [16..20]
 a10(r143): [18..19]
 a11(r139): [21..24]
 a12(r140): [22..23]
 a13(r138): [25..26]
+++Allocating 64 bytes for conflict table (uncompressed size 112)
;; a0(r153,l0) conflicts: a1(r152,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r152,l0) conflicts: a0(r153,l0) a2(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r151,l0) conflicts: a1(r152,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r150,l0) conflicts:
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a4(r149,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r148,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r147,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r145,l0) conflicts: a9(r134,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a9(r134,l0) conflicts: a8(r145,l0) a10(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r143,l0) conflicts: a9(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r139,l0) conflicts: a12(r140,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a12(r140,l0) conflicts: a11(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r138,l0) conflicts:
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  regions=1, blocks=11, points=27
    allocnos=14, copies=0, conflicts=6, ranges=14

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 10 9 8 7 6 5 4 3 2
    all: 0r153 1r152 2r151 3r150 4r149 5r148 6r147 7r133 8r145 9r134 10r143 11r139 12r140 13r138
    modified regnos: 133 134 138 139 140 143 145 147 148 149 150 151 152 153
    border:
    Pressure: GENERAL_REGS=3
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
      Pushing a10(r143,l0)
      Pushing a9(r134,l0)
      Pushing a4(r149,l0)
      Pushing a13(r138,l0)
      Pushing a12(r140,l0)
      Pushing a8(r145,l0)
      Pushing a7(r133,l0)
      Pushing a6(r147,l0)
      Pushing a5(r148,l0)
      Pushing a3(r150,l0)
      Pushing a2(r151,l0)
      Pushing a0(r153,l0)
      Pushing a1(r152,l0)
      Pushing a11(r139,l0)
      Popping a11(r139,l0)  -- assign reg 4
      Popping a1(r152,l0)  -- assign reg 3
      Popping a0(r153,l0)  -- assign reg 2
      Popping a2(r151,l0)  -- assign reg 2
      Popping a3(r150,l0)  -- assign reg 3
      Popping a5(r148,l0)  -- assign reg 3
      Popping a6(r147,l0)  -- assign reg 3
      Popping a7(r133,l0)  -- assign reg 1
      Popping a8(r145,l0)  -- assign reg 1
      Popping a12(r140,l0)  -- assign reg 3
      Popping a13(r138,l0)  -- assign reg 3
      Popping a4(r149,l0)  -- assign reg 3
      Popping a9(r134,l0)  -- assign reg 0
      Popping a10(r143,l0)  -- assign reg 3
Disposition:
    7:r133 l0     1    9:r134 l0     0   13:r138 l0     3   11:r139 l0     4
   12:r140 l0     3   10:r143 l0     3    8:r145 l0     1    6:r147 l0     3
    5:r148 l0     3    4:r149 l0     3    3:r150 l0     3    2:r151 l0     2
    1:r152 l0     3    0:r153 l0     2
New iteration of spill/restore move
+++Costs: overall -8250, reg -8250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 13, dead_or_set: 0
insn=84, live_throughout: 0, 13, dead_or_set: 138
insn=8, live_throughout: 0, 13, dead_or_set: 1, 138
insn=9, live_throughout: 13, dead_or_set: 0, 1, 14
insn=11, live_throughout: 0, 13, 14, dead_or_set: 
insn=12, live_throughout: 0, 13, 14, dead_or_set: 
insn=15, live_throughout: 13, dead_or_set: 0, 14
insn=17, live_throughout: 13, 14, dead_or_set: 
insn=19, live_throughout: 13, 14, dead_or_set: 139
insn=20, live_throughout: 13, 14, 139, dead_or_set: 140
insn=21, live_throughout: 13, 14, 139, dead_or_set: 140
insn=22, live_throughout: 13, 14, 139, dead_or_set: 
insn=25, live_throughout: 13, 139, dead_or_set: 0
insn=26, live_throughout: 13, 139, dead_or_set: 0, 14
insn=28, live_throughout: 13, dead_or_set: 134, 139
insn=83, live_throughout: 13, 134, dead_or_set: 143
insn=30, live_throughout: 13, 134, dead_or_set: 143, 145
insn=32, live_throughout: 13, 145, dead_or_set: 0, 134
insn=33, live_throughout: 0, 13, dead_or_set: 1, 145
insn=34, live_throughout: 13, dead_or_set: 0, 1, 14
insn=36, live_throughout: 13, 14, dead_or_set: 0, 133
insn=37, live_throughout: 13, 14, 133, dead_or_set: 
insn=41, live_throughout: 13, dead_or_set: 1, 133
insn=40, live_throughout: 1, 13, dead_or_set: 0
insn=42, live_throughout: 13, dead_or_set: 0, 1, 14
insn=43, live_throughout: 13, 14, dead_or_set: 
insn=45, live_throughout: 13, 14, dead_or_set: 147
insn=46, live_throughout: 13, 14, dead_or_set: 147, 148
insn=47, live_throughout: 13, 14, dead_or_set: 148
insn=48, live_throughout: 13, 14, dead_or_set: 
insn=50, live_throughout: 13, dead_or_set: 149
insn=52, live_throughout: 13, dead_or_set: 0, 149
insn=82, live_throughout: 0, 13, dead_or_set: 150
insn=53, live_throughout: 0, 13, dead_or_set: 1, 150
insn=54, live_throughout: 13, dead_or_set: 0, 1, 14
insn=55, live_throughout: 13, 14, dead_or_set: 
insn=58, live_throughout: 13, 14, dead_or_set: 152
insn=81, live_throughout: 13, 14, 152, dead_or_set: 151
insn=59, live_throughout: 13, 14, 152, dead_or_set: 151
insn=80, live_throughout: 13, 14, 152, dead_or_set: 153
insn=62, live_throughout: 13, 14, dead_or_set: 152, 153
insn=63, live_throughout: 13, 14, dead_or_set: 
insn=69, live_throughout: 13, 14, dead_or_set: 0
insn=75, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 138: (insn_list:REG_DEP_TRUE 84 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 19 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 20 (nil))
init_insns for 143: (insn_list:REG_DEP_TRUE 83 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 50 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 82 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 81 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 58 (nil))
init_insns for 153: (insn_list:REG_DEP_TRUE 80 (nil))
changing reg in insn 36
changing reg in insn 41
changing reg in insn 28
changing reg in insn 32
changing reg in insn 84
changing reg in insn 8
changing reg in insn 19
changing reg in insn 28
changing reg in insn 20
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 83
changing reg in insn 30
changing reg in insn 30
changing reg in insn 33
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 52
changing reg in insn 82
changing reg in insn 53
changing reg in insn 81
changing reg in insn 59
changing reg in insn 58
changing reg in insn 62
changing reg in insn 59
changing reg in insn 80
changing reg in insn 62
Spilling for insn 59.
Spilling for insn 62.

Reloads for insn # 59
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 2 r2 [151]) [0 initrd_start+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 2 r2 [151]) [0 initrd_start+0 S4 A32])

Reloads for insn # 62
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 2 r2 [153]) [0 initrd_end+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 2 r2 [153]) [0 initrd_end+0 S4 A32])
deleting insn with uid = 32.
deleting insn with uid = 41.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 54.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 18 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 20 (  1.8)


populate_rootfs

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={12d,5u} r2={9d,2u} r3={15d,9u} r4={1d,2u,1d} r12={7d} r13={1d,16u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={10d,4u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 787{735d,51u,1e} in 38{32 regular + 6 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 2 7 2 NOTE_INSN_DELETED)

(insn 7 10 84 2 init/initramfs.c:574 (set (reg:SI 0 r0)
        (symbol_ref:SI ("__initramfs_start") [flags 0xc0] <var_decl 0x114d2120 __initramfs_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__initramfs_start") [flags 0xc0] <var_decl 0x114d2120 __initramfs_start>)
        (nil)))

(insn 84 7 8 2 init/initramfs.c:574 (set (reg/f:SI 3 r3 [138])
        (symbol_ref:SI ("__initramfs_size") [flags 0xc0] <var_decl 0x114d2180 __initramfs_size>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__initramfs_size") [flags 0xc0] <var_decl 0x114d2180 __initramfs_size>)
        (nil)))

(insn 8 84 9 2 init/initramfs.c:574 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 3 r3 [138]) [0 __initramfs_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("__initramfs_size") [flags 0xc0] <var_decl 0x114d2180 __initramfs_size>) [0 __initramfs_size+0 S4 A32])
        (nil)))

(call_insn 9 8 11 2 init/initramfs.c:574 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unpack_to_rootfs") [flags 0x3] <function_decl 0x114ad980 unpack_to_rootfs>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 11 9 12 2 init/initramfs.c:575 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 12 11 13 2 init/initramfs.c:575 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 13 12 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn 15 13 16 3 init/initramfs.c:576 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a86f00 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 16 15 17)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 17 16 18 4 149 "" [1 uses])

(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 19 18 20 4 init/initramfs.c:577 (set (reg/f:SI 4 r4 [139])
        (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)
        (nil)))

(insn 20 19 21 4 init/initramfs.c:577 (set (reg:SI 3 r3 [orig:140 initrd_start ] [140])
        (mem/c/i:SI (reg/f:SI 4 r4 [139]) [0 initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 4 r4 [139]) [0 initrd_start+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>) [0 initrd_start+0 S4 A32])
            (nil))))

(insn 21 20 22 4 init/initramfs.c:577 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 initrd_start ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 22 21 23 4 init/initramfs.c:577 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  10 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.0%]  (fallthru)
(note 23 22 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 31 23 35 5 NOTE_INSN_DELETED)

(note 35 31 25 5 NOTE_INSN_DELETED)

(insn 25 35 26 5 init/initramfs.c:601 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x1153ef80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x1153ef80>)
        (nil)))

(call_insn 26 25 28 5 init/initramfs.c:601 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a86380 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 28 26 83 5 init/initramfs.c:602 (set (reg:SI 0 r0 [orig:134 initrd_start.956 ] [134])
        (mem/c/i:SI (reg/f:SI 4 r4 [139]) [0 initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>) [0 initrd_start+0 S4 A32])
        (nil)))

(insn 83 28 30 5 init/initramfs.c:602 (set (reg/f:SI 3 r3 [143])
        (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)
        (nil)))

(insn 30 83 33 5 init/initramfs.c:602 (set (reg:SI 1 r1 [orig:145 initrd_end ] [145])
        (mem/c/i:SI (reg/f:SI 3 r3 [143]) [0 initrd_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>) [0 initrd_end+0 S4 A32])
        (nil)))

(insn 33 30 34 5 init/initramfs.c:602 (set (reg:SI 1 r1)
        (minus:SI (reg:SI 1 r1 [orig:145 initrd_end ] [145])
            (reg:SI 0 r0))) 28 {*arm_subsi3_insn} (nil))

(call_insn 34 33 36 5 init/initramfs.c:602 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unpack_to_rootfs") [flags 0x3] <function_decl 0x114ad980 unpack_to_rootfs>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 36 34 37 5 init/initramfs.c:604 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 1 r1 [orig:133 err.957 ] [133])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 37 36 38 5 init/initramfs.c:604 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 38 37 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 40 38 42 6 init/initramfs.c:605 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x1163ce00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x1163ce00>)
        (nil)))

(call_insn 42 40 43 6 init/initramfs.c:605 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a86380 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 43 42 44 7 151 "" [1 uses])

(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 7 init/initramfs.c:497 (set (reg/f:SI 3 r3 [147])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 46 45 47 7 init/initramfs.c:497 (set (reg:SI 3 r3 [orig:148 do_retain_initrd ] [148])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 88 [0x58])) [0 do_retain_initrd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 88 [0x58]))) [0 do_retain_initrd+0 S4 A32])
        (nil)))

(insn 47 46 48 7 init/initramfs.c:497 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:148 do_retain_initrd ] [148])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 48 47 49 7 init/initramfs.c:497 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  9 [71.0%] 
;; Succ edge  8 [29.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  7 [29.0%]  (fallthru)
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 52 8 init/initramfs.c:517 (set (reg/f:SI 3 r3 [149])
        (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)
        (nil)))

(insn 52 50 82 8 init/initramfs.c:517 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 3 r3 [149]) [0 initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>) [0 initrd_start+0 S4 A32])
        (nil)))

(insn 82 52 53 8 init/initramfs.c:517 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)
        (nil)))

(insn 53 82 54 8 init/initramfs.c:517 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 3 r3 [150]) [0 initrd_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>) [0 initrd_end+0 S4 A32])
        (nil)))

(call_insn 54 53 55 8 init/initramfs.c:517 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_initrd_mem") [flags 0x41] <function_decl 0x114adb80 free_initrd_mem>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  7 [71.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 55 54 56 9 152 ("skip") [1 uses])

(note 56 55 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 58 56 81 9 init/initramfs.c:519 (set (reg:SI 3 r3 [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 81 58 59 9 init/initramfs.c:519 (set (reg/f:SI 2 r2 [151])
        (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)
        (nil)))

(insn 59 81 80 9 init/initramfs.c:519 (set (mem/c/i:SI (reg/f:SI 2 r2 [151]) [0 initrd_start+0 S4 A32])
        (reg:SI 3 r3 [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 80 59 62 9 init/initramfs.c:520 (set (reg/f:SI 2 r2 [153])
        (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)
        (nil)))

(insn 62 80 63 9 init/initramfs.c:520 (set (mem/c/i:SI (reg/f:SI 2 r2 [153]) [0 initrd_end+0 S4 A32])
        (reg:SI 3 r3 [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 4 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 63 62 64 10 150 "" [1 uses])

(note 64 63 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 69 64 75 10 init/initramfs.c:610 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 75 69 79 10 init/initramfs.c:610 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 79 75 85 NOTE_INSN_DELETED)

(note 85 79 0 NOTE_INSN_DELETED)

