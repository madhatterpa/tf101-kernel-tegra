
;; Function error (error)[0:1311] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 44 -- after reload
;;   ======================================================

;;	  0-->     6 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->     7 r2=[r3]                           :cortex_a8_load_store_1
;;	  5-->     8 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  5-->    12 (!cc) [r3]=r0                     :cortex_a8_load_store_1
;;	  6-->    44 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 6
;;   new head = 6
;;   new tail = 44





error

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={1d,1u} r1={1d} r2={2d,1u} r3={2d,2u,1d} r13={1d,2u} r14={1d,1u} r24={1d,1u} 
;;    total ref usage 18{9d,8u,1e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 42 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 42 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 42 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 7 2 init/initramfs.c:15 (set (reg/f:SI 3 r3 [134])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 7 6 8 2 init/initramfs.c:15 (set (reg/f:SI 2 r2 [orig:135 message ] [135])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [134]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [134]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn:TI 8 7 12 2 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:135 message ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:135 message ] [135])
        (nil)))

(insn 12 8 44 2 init/initramfs.c:16 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/f/c/i:SI (reg/f:SI 3 r3 [134]) [0 message+0 S4 A32])
            (reg/v/f:SI 0 r0 [orig:133 x ] [133]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [134])
            (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:133 x ] [133])
                (nil)))))

(jump_insn:TI 44 12 43 2 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 43 44 40)

(note 40 43 41 NOTE_INSN_DELETED)

(note 41 40 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_start (do_start)[0:1321] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 9 (  1.5)


do_start

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,6u} r1={7d,5u} r2={3d,3u} r3={2d,12u,3d} r4={2d,4u} r5={2d,3u} r12={3d,4u} r13={2d,6u} r14={1d,2u} r24={2d,2u} 
;;    total ref usage 78{28d,47u,3e} in 30{30 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]

( 2 )->[3]->( 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]

( 2 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]

( 4 3 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]

( 5 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 10 to worklist
  Adding insn 74 to worklist
  Adding insn 84 to worklist
  Adding insn 24 to worklist
  Adding insn 18 to worklist
  Adding insn 27 to worklist
  Adding insn 44 to worklist
  Adding insn 41 to worklist
  Adding insn 38 to worklist
  Adding insn 77 to worklist
  Adding insn 60 to worklist
  Adding insn 36 to worklist
  Adding insn 47 to worklist
Finished finding needed instructions:
processing block 5 lr out =  0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
  Adding insn 54 to worklist
processing block 3 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
  Adding insn 29 to worklist
  Adding insn 73 to worklist
  Adding insn 72 to worklist
  Adding insn 71 to worklist
  Adding insn 70 to worklist
  Adding insn 17 to worklist
  Adding insn 26 to worklist
  Adding insn 21 to worklist
  Adding insn 13 to worklist
processing block 4 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
  Adding insn 46 to worklist
  Adding insn 43 to worklist
  Adding insn 40 to worklist
processing block 2 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 9 to worklist
  Adding insn 6 to worklist
  Adding insn 8 to worklist
  Adding insn 5 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
;;   ======================================================
;;   -- basic block 2 from 74 to 10 -- after reload
;;   ======================================================

;;	  0-->     5 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    74 {[--sp]=unspec[r4] 2;use r5;use lr:cortex_a8_load_store_2
;;	  3-->     8 ip=[r3+0x8]                       :cortex_a8_load_store_1
;;	  4-->     6 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	  5-->     9 cc=cmp(ip,0x6d)                   :cortex_a8_default
;;	  7-->    10 pc={(leu(cc,0x0))?L33:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 74
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 13 to 84 -- after reload
;;   ======================================================

;;	  0-->    21 r0=[r3+0x18]                      :cortex_a8_load_store_1
;;	  0-->    70 r4=0x6e                           :cortex_a8_default
;;	  1-->    13 r2=[r3+0xc]                       :cortex_a8_load_store_1
;;	  1-->    71 r5=0x0                            :cortex_a8_default
;;	  2-->    72 {cc=cmp(r0+r4,r0);r0=r0+r4;}      :cortex_a8_default
;;	  2-->    26 ip=ip-0x6e                        :cortex_a8_default
;;	  3-->    73 r1=ltu(cc,0x0)+r1+r5              :cortex_a8_default
;;	  3-->    27 [r3+0x8]=ip                       :cortex_a8_load_store_1
;;	  4-->    24 [r3+0x18]=r0                      :cortex_a8_load_store_1
;;	  4-->    17 ip=r2+0x6e                        :cortex_a8_default
;;	  5-->    29 r1=0x2                            :cortex_a8_default
;;	  5-->    18 [r3+0xc]=ip                       :cortex_a8_load_store_1
;;	  6-->    84 pc=L81                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 6
;;   new head = 13
;;   new tail = 84

;;   ======================================================
;;   -- basic block 4 from 38 to 46 -- after reload
;;   ======================================================

;;	  0-->    40 r1=0x6e                           :cortex_a8_default
;;	  0-->    41 [r3+0x28]=r1                      :cortex_a8_load_store_1
;;	  1-->    43 r1=0x2                            :cortex_a8_default
;;	  1-->    44 [r3+0x2c]=r1                      :cortex_a8_load_store_1
;;	  2-->    46 r1=0x1                            :cortex_a8_default
;;	  2-->    38 [r3+0x24]=r2                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 38
;;   new tail = 46

;;   ======================================================
;;   -- basic block 5 from 47 to 77 -- after reload
;;   ======================================================

;;	  0-->    47 [r3+0x20]=r1                      :cortex_a8_load_store_1
;;	  0-->    54 r0=0x0                            :cortex_a8_default
;;	  1-->    36 [r3+0x10]=r2                      :cortex_a8_load_store_1
;;	  1-->    60 use r0                            :nothing
;;	  2-->    77 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 47
;;   new tail = 77





do_start

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,6u} r1={7d,5u} r2={3d,3u} r3={2d,12u,3d} r4={2d,4u} r5={2d,3u} r12={3d,4u} r13={2d,6u} r14={1d,2u} r24={2d,2u} 
;;    total ref usage 78{28d,47u,3e} in 30{30 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 74 2 init/initramfs.c:200 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 74 5 75 2 init/initramfs.c:199 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -12 [0xfffffffffffffff4])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 5 r5))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 8 [0x8])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 75 74 8 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 8 75 6 2 init/initramfs.c:184 (set (reg:SI 12 ip [orig:133 count.331 ] [133])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn:TI 6 8 9 2 init/initramfs.c:200 (set (reg/f:SI 2 r2 [orig:135 header_buf.335 ] [135])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 header_buf+0 S4 A32])
        (nil)))

(insn:TI 9 6 10 2 init/initramfs.c:184 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:133 count.331 ] [133])
            (const_int 109 [0x6d]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 10 9 11 2 init/initramfs.c:184 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  2 [0.0%]  (fallthru)
(note 11 10 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 11 70 3 init/initramfs.c:173 (set (reg:DI 0 r0 [147])
        (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
        (nil)))

(insn 70 21 13 3 init/initramfs.c:173 (set (reg:SI 4 r4 [146])
        (const_int 110 [0x6e])) 167 {*arm_movsi_insn} (nil))

(insn:TI 13 70 71 3 init/initramfs.c:185 (set (reg/f:SI 2 r2 [orig:134 victim.332 ] [134])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 71 13 72 3 init/initramfs.c:173 (set (reg:SI 5 r5 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 72 71 26 3 init/initramfs.c:173 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 0 r0 [147])
                        (reg:SI 4 r4 [146]))
                    (reg:SI 0 r0 [147])))
            (set (reg:SI 0 r0 [147])
                (plus:SI (reg:SI 0 r0 [147])
                    (reg:SI 4 r4 [146])))
        ]) 10 {*addsi3_compare_op1} (nil))

(insn 26 72 73 3 init/initramfs.c:174 (set (reg:SI 12 ip [149])
        (plus:SI (reg:SI 12 ip [orig:133 count.331 ] [133])
            (const_int -110 [0xffffffffffffff92]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn:TI 73 26 27 3 init/initramfs.c:173 (set (reg:SI 1 r1 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 1 r1 [+4 ])
                (reg:SI 5 r5 [+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn 27 73 24 3 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [149])
        (nil)))

(insn:TI 24 27 17 3 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 0 r0 [147])) 163 {*arm_movdi} (nil))

(insn 17 24 29 3 init/initramfs.c:172 (set (reg/f:SI 12 ip [142])
        (plus:SI (reg/f:SI 2 r2 [orig:134 victim.332 ] [134])
            (const_int 110 [0x6e]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn:TI 29 17 18 3 init/initramfs.c:187 (set (reg:SI 1 r1 [151])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 18 29 84 3 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg/f:SI 12 ip [142])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [142])
        (nil)))

(jump_insn:TI 84 18 85 3 (set (pc)
        (label_ref 81)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 85 84 33)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 33 85 34 4 7 "" [1 uses])

(note 34 33 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 40 34 41 4 init/initramfs.c:190 (set (reg:SI 1 r1 [155])
        (const_int 110 [0x6e])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 110 [0x6e])
        (nil)))

(insn 41 40 43 4 init/initramfs.c:190 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (reg:SI 1 r1 [155])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [155])
        (expr_list:REG_EQUAL (const_int 110 [0x6e])
            (nil))))

(insn:TI 43 41 44 4 init/initramfs.c:191 (set (reg:SI 1 r1 [157])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 44 43 46 4 init/initramfs.c:191 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 1 r1 [157])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [157])
        (expr_list:REG_EQUAL (const_int 2 [0x2])
            (nil))))

(insn:TI 46 44 38 4 init/initramfs.c:192 (set (reg:SI 1 r1 [159])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 38 46 81 4 init/initramfs.c:189 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (reg/f:SI 2 r2 [orig:135 header_buf.335 ] [135])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 81 38 79 5 10 "" [1 uses])

(note 79 81 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 47 79 54 5 init/initramfs.c:192 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 1 r1 [159])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [159])
        (nil)))

(insn 54 47 36 5 init/initramfs.c:202 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 36 54 60 5 init/initramfs.c:189 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (reg/f:SI 2 r2 [orig:135 header_buf.335 ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [137])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:135 header_buf.335 ] [135])
            (nil))))

(insn 60 36 76 5 init/initramfs.c:202 (use (reg/i:SI 0 r0)) -1 (nil))

(note 76 60 77 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 77 76 78 5 init/initramfs.c:202 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 78 77 67)

(note 67 78 69 NOTE_INSN_DELETED)

(note 69 67 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_skip (do_skip)[0:1324] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 91 to 14 -- after reload
;;   ======================================================

;;	  0-->     5 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    91 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  3-->     6 r4=[r3+0x18]                      :cortex_a8_load_store_1
;;	  4-->     8 r1=[r3+0x8]                       :cortex_a8_load_store_1
;;	  5-->    81 r0=[r3+0x34]                      :cortex_a8_load_store_1
;;	  6-->    89 {cc=cmp(r4+r1,r4);r6=r4+r1;}      :cortex_a8_default
;;	  6-->    80 r2=[r3+0x30]                      :cortex_a8_load_store_1
;;	  7-->    90 r7=ltu(cc,0x0)+r5+0x0             :cortex_a8_default
;;	  8-->    13 cc=cmp(r0,r7)                     :cortex_a8_default
;;	 10-->    14 pc={(cc>0x0)?L79:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 10
;;   new head = 91
;;   new tail = 14

;;   ======================================================
;;   -- basic block 3 from 16 to 16 -- after reload
;;   ======================================================

;;	  0-->    16 pc={(cc!=0x0)?L38:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 16
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 17 to 18 -- after reload
;;   ======================================================

;;	  0-->    17 cc=cmp(r2,r6)                     :cortex_a8_default
;;	  2-->    18 pc={(leu(cc,0x0))?L38:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 17
;;   new tail = 18

;;   ======================================================
;;   -- basic block 5 from 25 to 93 -- after reload
;;   ======================================================

;;	  0-->    25 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->    85 ip=0x0                            :cortex_a8_default
;;	  1-->    35 r0=0x1                            :cortex_a8_default
;;	  3-->    27 r2=[r3+0xc]                       :cortex_a8_load_store_1
;;	  4-->    34 [r3+0x8]=ip                       :cortex_a8_load_store_1
;;	  5-->    28 r1=r2+r1                          :cortex_a8_default
;;	  5-->    31 [r3+0x18]=r6                      :cortex_a8_load_store_1
;;	  6-->    29 [r3+0xc]=r1                       :cortex_a8_load_store_1
;;	  7-->    93 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 25
;;   new tail = 93

;;   ======================================================
;;   -- basic block 6 from 41 to 95 -- after reload
;;   ======================================================

;;	  0-->    41 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->    40 r2=r2-r4                          :cortex_a8_default
;;	  1-->    87 {cc=cmp(r4+r2,r4);r6=r4+r2;}      :cortex_a8_default
;;	  1-->    51 r1=r1-r2                          :cortex_a8_default
;;	  2-->    88 r7=ltu(cc,0x0)+r5+0x0             :cortex_a8_default
;;	  2-->    57 r0=0x0                            :cortex_a8_default
;;	  3-->    55 r4=[r3+0x2c]                      :cortex_a8_load_store_1
;;	  4-->    43 ip=[r3+0xc]                       :cortex_a8_load_store_1
;;	  5-->    49 [r3+0x18]=r6                      :cortex_a8_load_store_1
;;	  6-->    44 r2=ip+r2                          :cortex_a8_default
;;	  6-->    56 [r3+0x20]=r4                      :cortex_a8_load_store_1
;;	  7-->    52 [r3+0x8]=r1                       :cortex_a8_load_store_1
;;	  8-->    45 [r3+0xc]=r2                       :cortex_a8_load_store_1
;;	  8-->    70 use r0                            :nothing
;;	  9-->    95 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 9
;;   new head = 41
;;   new tail = 95





do_skip

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,3u} r1={4d,6u} r2={5d,8u} r3={4d,14u,6d} r4={3d,10u} r5={2d,4u} r6={3d,5u} r7={3d,5u} r12={2d,2u} r13={2d,7u} r14={1d,2u} r24={4d,5u} 
;;    total ref usage 114{37d,71u,6e} in 37{37 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 2 5 2 NOTE_INSN_DELETED)

(insn:TI 5 9 91 2 init/initramfs.c:250 (set (reg/f:SI 3 r3 [140])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 91 5 92 2 init/initramfs.c:249 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 7 r7)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -20 [0xffffffffffffffec])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 7 r7))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 16 [0x10])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 92 91 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 92 8 2 init/initramfs.c:250 (set (reg:DI 4 r4 [orig:138 this_header.355 ] [138])
        (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [140])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
        (nil)))

(insn:TI 8 6 81 2 init/initramfs.c:250 (set (reg:SI 1 r1 [orig:137 count.356 ] [137])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [140])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn:TI 81 8 89 2 init/initramfs.c:250 (set (reg:SI 0 r0 [orig:165 next_header.357+4 ] [165])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [140])
                (const_int 52 [0x34])) [0 next_header+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 52 [0x34]))) [0 next_header+4 S4 A32])
        (nil)))

(insn:TI 89 81 80 2 init/initramfs.c:250 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 4 r4 [orig:138 this_header.355 ] [138])
                        (reg:SI 1 r1 [orig:137 count.356 ] [137]))
                    (reg:SI 4 r4 [orig:138 this_header.355 ] [138])))
            (set (reg:SI 6 r6 [orig:136 D.25909 ] [136])
                (plus:SI (reg:SI 4 r4 [orig:138 this_header.355 ] [138])
                    (reg:SI 1 r1 [orig:137 count.356 ] [137])))
        ]) 10 {*addsi3_compare_op1} (nil))

(insn 80 89 90 2 init/initramfs.c:250 (set (reg:SI 2 r2 [orig:164 next_header.357 ] [164])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [140])
                (const_int 48 [0x30])) [0 next_header+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [140])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 48 [0x30]))) [0 next_header+0 S4 A64])
            (nil))))

(insn:TI 90 80 13 2 init/initramfs.c:250 (set (reg:SI 7 r7 [ D.25909+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 5 r5 [ this_header.355+4 ])
                (const_int 0 [0x0])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn:TI 13 90 14 2 init/initramfs.c:250 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:165 next_header.357+4 ] [165])
            (reg:SI 7 r7 [ D.25909+4 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:165 next_header.357+4 ] [165])
        (nil)))

(jump_insn:TI 14 13 72 2 init/initramfs.c:250 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 72 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 16 72 73 3 init/initramfs.c:250 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  6 [71.0%] 
;; Succ edge  4 [29.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [29.0%]  (fallthru)
(note 73 16 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 73 18 4 init/initramfs.c:250 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:164 next_header.357 ] [164])
            (reg:SI 6 r6 [orig:136 D.25909 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 18 17 79 4 init/initramfs.c:250 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
(code_label 79 18 24 5 19 "" [1 uses])

(note 24 79 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 25 24 85 5 init/initramfs.c:172 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 85 25 35 5 init/initramfs.c:174 (set (reg:SI 12 ip [150])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 35 85 27 5 init/initramfs.c:252 (set (reg:SI 0 r0 [orig:134 D.25913 ] [134])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 27 35 34 5 init/initramfs.c:172 (set (reg/f:SI 2 r2 [orig:146 victim ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn:TI 34 27 28 5 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 12 ip [150])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [150])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn:TI 28 34 31 5 init/initramfs.c:172 (set (reg:SI 1 r1 [147])
        (plus:SI (reg/f:SI 2 r2 [orig:146 victim ] [146])
            (reg:SI 1 r1 [orig:137 count.356 ] [137]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:146 victim ] [146])
        (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                    (const_int 12 [0xc])) [0 victim+0 S4 A32])
            (nil))))

(insn 31 28 29 5 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [orig:136 D.25909 ] [136])) 163 {*arm_movdi} (nil))

(insn:TI 29 31 93 5 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [144])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 1 r1 [147])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [144])
        (expr_list:REG_DEAD (reg:SI 1 r1 [147])
            (nil))))

(jump_insn:TI 93 29 83 5 init/initramfs.c:252 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 83 93 38)

;; Start of basic block ( 3 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  3 [71.0%] 
;; Pred edge  4 [50.0%] 
(code_label 38 83 39 6 15 "" [2 uses])

(note 39 38 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 47 39 41 6 NOTE_INSN_DELETED)

(insn:TI 41 47 40 6 init/initramfs.c:172 (set (reg/f:SI 3 r3 [151])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 40 41 87 6 init/initramfs.c:254 (set (reg:SI 2 r2 [orig:133 D.25916 ] [133])
        (minus:SI (reg:SI 2 r2 [orig:164 next_header.357 ] [164])
            (reg:SI 4 r4 [orig:138 this_header.355 ] [138]))) 28 {*arm_subsi3_insn} (nil))

(insn:TI 87 40 51 6 init/initramfs.c:173 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 4 r4 [orig:138 this_header.355 ] [138])
                        (reg:SI 2 r2 [orig:133 D.25916 ] [133]))
                    (reg:SI 4 r4 [orig:138 this_header.355 ] [138])))
            (set (reg:SI 6 r6 [157])
                (plus:SI (reg:SI 4 r4 [orig:138 this_header.355 ] [138])
                    (reg:SI 2 r2 [orig:133 D.25916 ] [133])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 4 r4 [orig:138 this_header.355 ] [138])
        (nil)))

(insn 51 87 88 6 init/initramfs.c:174 (set (reg:SI 1 r1 [159])
        (minus:SI (reg:SI 1 r1 [orig:137 count.356 ] [137])
            (reg:SI 2 r2 [orig:133 D.25916 ] [133]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn:TI 88 51 57 6 init/initramfs.c:173 (set (reg:SI 7 r7 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 5 r5 [ this_header.355+4 ])
                (const_int 0 [0x0])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn 57 88 55 6 init/initramfs.c:256 (set (reg:SI 0 r0 [orig:134 D.25913 ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 55 57 43 6 init/initramfs.c:255 (set (reg:SI 4 r4 [orig:162 next_state ] [162])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 44 [0x2c]))) [0 next_state+0 S4 A32])
            (nil))))

(insn:TI 43 55 49 6 init/initramfs.c:172 (set (reg/f:SI 12 ip [orig:153 victim ] [153])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn:TI 49 43 44 6 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [157])) 163 {*arm_movdi} (nil))

(insn:TI 44 49 56 6 init/initramfs.c:172 (set (reg:SI 2 r2 [154])
        (plus:SI (reg/f:SI 12 ip [orig:153 victim ] [153])
            (reg:SI 2 r2 [orig:133 D.25916 ] [133]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 12 ip [orig:153 victim ] [153])
        (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                    (const_int 12 [0xc])) [0 victim+0 S4 A32])
            (nil))))

(insn 56 44 52 6 init/initramfs.c:255 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 4 r4 [orig:162 next_state ] [162])) 167 {*arm_movsi_insn} (nil))

(insn:TI 52 56 45 6 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 1 r1 [159])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [159])
        (nil)))

(insn:TI 45 52 70 6 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [151])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 2 r2 [154])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [151])
        (expr_list:REG_DEAD (reg:SI 2 r2 [154])
            (nil))))

(insn 70 45 95 6 init/initramfs.c:258 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 95 70 94 6 init/initramfs.c:258 (return) 260 {return} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 94 95 84)

(note 84 94 86 NOTE_INSN_DELETED)

(note 86 84 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_reset (do_reset)[0:1325] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 15 count 24 (    2)


do_reset

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,7u} r1={5d,10u} r2={6d,11u,1d} r3={4d,9u,4d} r4={4d,7u} r5={2d,4u} r6={6d,10u} r7={6d,7u} r8={4d,8u} r9={3d,4u} r12={3d,4u} r13={2d,12u} r14={1d,2u} r24={9d,9u} 
;;    total ref usage 168{59d,104u,5e} in 56{56 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]

( 2 7 )->[3]->( 6 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]

( 3 )->[4]->( 6 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]

( 4 )->[5]->( 9 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]

( 4 3 )->[6]->( 7 10 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]

( 6 )->[7]->( 3 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]

( 11 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]

( 10 8 5 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]

( 6 )->[10]->( 11 9 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  kill	 2 [r2] 24 [cc]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]

( 10 )->[11]->( 8 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]

( 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 233 to worklist
  Adding insn 109 to worklist
  Adding insn 111 to worklist
  Adding insn 238 to worklist
  Adding insn 117 to worklist
  Adding insn 115 to worklist
  Adding insn 120 to worklist
  Adding insn 131 to worklist
  Adding insn 241 to worklist
  Adding insn 143 to worklist
  Adding insn 236 to worklist
  Adding insn 180 to worklist
  Adding insn 169 to worklist
  Adding insn 159 to worklist
  Adding insn 162 to worklist
  Adding insn 157 to worklist
  Adding insn 245 to worklist
Finished finding needed instructions:
processing block 7 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
processing block 9 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
  Adding insn 174 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
  Adding insn 142 to worklist
  Adding insn 138 to worklist
  Adding insn 137 to worklist
processing block 11 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
processing block 10 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
  Adding insn 168 to worklist
  Adding insn 156 to worklist
  Adding insn 224 to worklist
  Adding insn 223 to worklist
  Adding insn 222 to worklist
  Adding insn 221 to worklist
  Adding insn 161 to worklist
  Adding insn 220 to worklist
  Adding insn 219 to worklist
  Adding insn 155 to worklist
  Adding insn 152 to worklist
  Adding insn 218 to worklist
  Adding insn 217 to worklist
  Adding insn 216 to worklist
  Adding insn 215 to worklist
  Adding insn 208 to worklist
processing block 6 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 130 to worklist
  Adding insn 226 to worklist
  Adding insn 225 to worklist
  Adding insn 125 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
  Adding insn 228 to worklist
  Adding insn 227 to worklist
  Adding insn 119 to worklist
  Adding insn 114 to worklist
processing block 4 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 110 to worklist
processing block 3 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 108 to worklist
processing block 2 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 102 to worklist
  Adding insn 202 to worklist
  Adding insn 201 to worklist
  Adding insn 104 to worklist
  Adding insn 232 to worklist
  Adding insn 231 to worklist
  Adding insn 230 to worklist
  Adding insn 229 to worklist
  Adding insn 99 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 15 count 23 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 233 to 102 -- after reload
;;   ======================================================

;;	  0-->    99 r1=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->   229 r2=0x0                            :cortex_a8_default
;;	  1-->   233 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  2-->   230 r3=0x0                            :cortex_a8_default
;;	  3-->   104 ip=[r1+0xc]                       :cortex_a8_load_store_1
;;	  3-->   231 r6=0x1                            :cortex_a8_default
;;	  4-->   201 r8=[r1+0x18]                      :cortex_a8_load_store_1
;;	  4-->   232 r7=0x0                            :cortex_a8_default
;;	  5-->   202 r5=[r1+0x1c]                      :cortex_a8_load_store_1
;;	  6-->   102 r4=[r1+0x8]                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 6
;;   new head = 233
;;   new tail = 102

;;   ======================================================
;;   -- basic block 3 from 108 to 109 -- after reload
;;   ======================================================

;;	  0-->   108 cc=cmp(r2,r4)                     :cortex_a8_default
;;	  2-->   109 pc={(cc!=0x0)?L123:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 108
;;   new tail = 109

;;   ======================================================
;;   -- basic block 4 from 110 to 111 -- after reload
;;   ======================================================

;;	  0-->   110 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  2-->   111 pc={(cc!=0x0)?L123:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 110
;;   new tail = 111

;;   ======================================================
;;   -- basic block 5 from 114 to 238 -- after reload
;;   ======================================================

;;	  0-->   114 r1=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->   227 {cc=cmp(r8+r2,r8);r6=r8+r2;}      :cortex_a8_default
;;	  1-->   119 r4=r4-r2                          :cortex_a8_default
;;	  1-->   228 r7=ltu(cc,0x0)+r5+r3              :cortex_a8_default
;;	  3-->   120 [r1+0x8]=r4                       :cortex_a8_load_store_1
;;	  4-->   115 [r1+0xc]=ip                       :cortex_a8_load_store_1
;;	  5-->   117 [r1+0x18]=r6                      :cortex_a8_load_store_1
;;	  5-->   238 pc=L144                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 114
;;   new tail = 238

;;   ======================================================
;;   -- basic block 6 from 125 to 131 -- after reload
;;   ======================================================

;;	  0-->   125 r1=zxn([ip++])                    :cortex_a8_load_store_1
;;	  0-->   225 {cc=cmp(r2+r6,r2);r2=r2+r6;}      :cortex_a8_default
;;	  1-->   226 r3=ltu(cc,0x0)+r3+r7              :cortex_a8_default
;;	  2-->   130 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  4-->   131 pc={(cc!=0x0)?L192:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 125
;;   new tail = 131

;;   ======================================================
;;   -- basic block 7 from 241 to 241 -- after reload
;;   ======================================================

;;	  0-->   241 pc=L129                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 241
;;   new tail = 241

;;   ======================================================
;;   -- basic block 8 from 137 to 143 -- after reload
;;   ======================================================

;;	  0-->   137 r2=[r3]                           :cortex_a8_load_store_1
;;	  2-->   138 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  4-->   142 (!cc) r2=`*.LC0'                  :cortex_a8_load_store_1
;;	  7-->   143 (!cc) [r3]=r2                     :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 137
;;   new tail = 143

;;   ======================================================
;;   -- basic block 9 from 174 to 236 -- after reload
;;   ======================================================

;;	  0-->   174 r0=0x1                            :cortex_a8_default
;;	  0-->   180 use r0                            :nothing
;;	  0-->   236 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 174
;;   new tail = 236

;;   ======================================================
;;   -- basic block 10 from 208 to 169 -- after reload
;;   ======================================================

;;	  0-->   208 r0=r8                             :cortex_a8_default
;;	  0-->   216 r9=0x0                            :cortex_a8_default
;;	  1-->   215 r8=0x1                            :cortex_a8_default
;;	  1-->   217 r6=r2                             :cortex_a8_default
;;	  2-->   218 r7=r3                             :cortex_a8_default
;;	  2-->   155 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->   152 {r6=r6-r8;clobber cc;}            :cortex_a8_default
;;	  3-->   221 r8=0x3                            :cortex_a8_default
;;	  4-->   219 {cc=cmp(r0+r6,r0);r0=r0+r6;}      :cortex_a8_default
;;	  4-->   222 r9=0x0                            :cortex_a8_default
;;	  5-->   220 r1=ltu(cc,0x0)+r5+r7              :cortex_a8_default
;;	  5-->   161 r4=r4-r6                          :cortex_a8_default
;;	  6-->   224 r7=r1&r9                          :cortex_a8_default
;;	  6-->   223 r6=r0&r8                          :cortex_a8_default
;;	  7-->   168 {cc=cmp(r6|r7,0x0);clobber r2;}   :cortex_a8_default
;;	  7-->   156 ip=ip-0x1                         :cortex_a8_default
;;	  8-->   162 [r3+0x8]=r4                       :cortex_a8_load_store_1
;;	  9-->   157 [r3+0xc]=ip                       :cortex_a8_load_store_1
;;	 10-->   159 [r3+0x18]=r0                      :cortex_a8_load_store_1
;;	 10-->   169 pc={(cc==0x0)?L144:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 10
;;   new head = 208
;;   new tail = 169

;;   ======================================================
;;   -- basic block 11 from 245 to 245 -- after reload
;;   ======================================================

;;	  0-->   245 pc=L244                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 245
;;   new tail = 245





do_reset

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,7u} r1={5d,10u} r2={6d,11u,1d} r3={4d,9u,4d} r4={4d,7u} r5={2d,4u} r6={6d,10u} r7={6d,7u} r8={4d,8u} r9={3d,4u} r12={3d,4u} r13={2d,12u} r14={1d,2u} r24={9d,9u} 
;;    total ref usage 168{59d,104u,5e} in 56{56 regular + 0 call} insns.
(note 95 0 97 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 97 95 96 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 96 97 99 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 99 96 229 2 init/initramfs.c:261 (set (reg/f:SI 1 r1 [238])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 229 99 233 2 init/initramfs.c:260 (set (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn/f:TI 233 229 234 2 init/initramfs.c:261 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 8 r8)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -28 [0xffffffffffffffe4])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 8 r8))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 9 r9))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 24 [0x18])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 234 233 230 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 230 234 104 2 init/initramfs.c:260 (set (reg:SI 3 r3 [ ivtmp.533+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 104 230 231 2 init/initramfs.c:261 (set (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 1 r1 [238])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 victim+0 S4 A32])
        (nil)))

(insn 231 104 201 2 init/initramfs.c:262 discrim 2 (set (reg:SI 6 r6 [262])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 201 231 232 2 init/initramfs.c:261 (set (reg:SI 8 r8 [orig:263 this_header_lsm.527 ] [263])
        (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [238])
                (const_int 24 [0x18])) [0 this_header+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 232 201 202 2 init/initramfs.c:262 discrim 2 (set (reg:SI 7 r7 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 202 232 102 2 init/initramfs.c:261 (set (reg:SI 5 r5 [orig:264 this_header_lsm.527+4 ] [264])
        (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [238])
                (const_int 28 [0x1c])) [0 this_header+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 102 202 129 2 init/initramfs.c:261 (set (reg:SI 4 r4 [orig:234 count_lsm.528 ] [234])
        (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [238])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [238])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))
;; End of basic block 2 -> ( 3)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 7) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 129 102 107 3 25 "" [1 uses])

(note 107 129 108 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 108 107 109 3 init/initramfs.c:262 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])
            (reg:SI 4 r4 [orig:234 count_lsm.528 ] [234]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 109 108 182 3 init/initramfs.c:262 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  6 [71.0%] 
;; Succ edge  4 [29.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [29.0%]  (fallthru)
(note 182 109 110 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 110 182 111 4 init/initramfs.c:262 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ ivtmp.533+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 111 110 112 4 init/initramfs.c:262 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  6 [71.0%] 
;; Succ edge  5 [29.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  4 [29.0%]  (fallthru,loop_exit)
(note 112 111 114 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 114 112 227 5 init/initramfs.c:260 (set (reg/f:SI 1 r1 [241])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 227 114 119 5 init/initramfs.c:260 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 8 r8 [orig:230 D.26681 ] [230])
                        (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233]))
                    (reg:SI 8 r8 [orig:230 D.26681 ] [230])))
            (set (reg:SI 6 r6 [orig:230 D.26681 ] [230])
                (plus:SI (reg:SI 8 r8 [orig:230 D.26681 ] [230])
                    (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])
        (nil)))

(insn:TI 119 227 228 5 init/initramfs.c:260 (set (reg:SI 4 r4 [244])
        (minus:SI (reg:SI 4 r4 [orig:234 count_lsm.528 ] [234])
            (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233]))) 28 {*arm_subsi3_insn} (nil))

(insn 228 119 120 5 init/initramfs.c:260 (set (reg:SI 7 r7 [ D.26681+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 5 r5 [orig:7 D.26681+4 ] [7])
                (reg:SI 3 r3 [ ivtmp.533+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [ ivtmp.533+4 ])
            (nil))))

(insn:TI 120 228 115 5 init/initramfs.c:260 (set (mem/c/i:SI (plus:SI (reg/f:SI 1 r1 [241])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 4 r4 [244])) 167 {*arm_movsi_insn} (nil))

(insn:TI 115 120 117 5 init/initramfs.c:260 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 1 r1 [241])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])
        (nil)))

(insn:TI 117 115 238 5 init/initramfs.c:260 (set (mem/c/i:DI (plus:SI (reg/f:SI 1 r1 [241])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [orig:230 D.26681 ] [230])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/f:SI 1 r1 [241])
        (nil)))

(jump_insn 238 117 239 5 (set (pc)
        (label_ref 144)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 

(barrier 239 238 123)

;; Start of basic block ( 4 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  4 [71.0%] 
;; Pred edge  3 [71.0%] 
(code_label 123 239 124 6 23 "" [2 uses])

(note 124 123 125 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 125 124 225 6 init/initramfs.c:262 discrim 2 (set (reg:SI 1 r1 [orig:236 D.25927 ] [236])
        (zero_extend:SI (mem:QI (post_inc:SI (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_INC (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])
        (nil)))

(insn 225 125 226 6 init/initramfs.c:262 discrim 2 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])
                        (reg:SI 6 r6 [262]))
                    (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])))
            (set (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])
                (plus:SI (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])
                    (reg:SI 6 r6 [262])))
        ]) 10 {*addsi3_compare_op1} (nil))

(insn:TI 226 225 130 6 init/initramfs.c:262 discrim 2 (set (reg:SI 3 r3 [ ivtmp.533+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 3 r3 [ ivtmp.533+4 ])
                (reg:SI 7 r7 [+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn:TI 130 226 131 6 init/initramfs.c:262 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:236 D.25927 ] [236])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:236 D.25927 ] [236])
        (nil)))

(jump_insn:TI 131 130 240 6 init/initramfs.c:262 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 192)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 6 -> ( 7 10)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [0.0%]  (fallthru)
;; Succ edge  10 [100.0%]  (loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [0.0%]  (fallthru)
(note 240 131 241 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 241 240 242 7 (set (pc)
        (label_ref 129)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 3)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%] 

(barrier 242 241 244)

;; Start of basic block ( 11) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  11 [100.0%] 
(code_label 244 242 135 8 31 "" [1 uses])

(note 135 244 137 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 137 135 138 8 init/initramfs.c:15 (set (reg/f:SI 2 r2 [orig:247 message ] [247])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn:TI 138 137 142 8 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:247 message ] [247])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 142 138 143 8 init/initramfs.c:16 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 2 r2 [249])
            (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11561d50>))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11561d50>)
        (nil)))

(insn:TI 143 142 144 8 init/initramfs.c:16 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/f/c/i:SI (reg/f:SI 3 r3 [252]) [0 message+0 S4 A32])
            (reg/f:SI 2 r2 [249]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [252])
            (expr_list:REG_DEAD (reg/f:SI 2 r2 [249])
                (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11561d50>)
                    (nil))))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 10 8 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  10 [100.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 144 143 145 9 24 "" [2 uses])

(note 145 144 174 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 174 145 180 9 init/initramfs.c:267 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 180 174 235 9 init/initramfs.c:267 (use (reg/i:SI 0 r0)) -1 (nil))

(note 235 180 236 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 236 235 237 9 init/initramfs.c:267 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 237 236 192)

;; Start of basic block ( 6) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  kill	 2 [r2] 24 [cc]

;; Pred edge  6 [100.0%]  (loop_exit)
(code_label 192 237 150 10 30 "" [1 uses])

(note 150 192 166 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 166 150 167 10 NOTE_INSN_DELETED)

(note 167 166 208 10 NOTE_INSN_DELETED)

(insn:TI 208 167 216 10 init/initramfs.c:260 (set (reg:SI 0 r0 [orig:266 D.26679 ] [266])
        (reg:SI 8 r8 [orig:263 this_header_lsm.527 ] [263])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 8 r8 [orig:263 this_header_lsm.527 ] [263])
        (nil)))

(insn 216 208 215 10 init/initramfs.c:267 (set (reg:SI 9 r9 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 215 216 217 10 init/initramfs.c:267 (set (reg:SI 8 r8 [245])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 217 215 218 10 init/initramfs.c:267 (set (reg:SI 6 r6 [orig:227 ivtmp.554 ] [227])
        (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:233 ivtmp.533 ] [233])
        (nil)))

(insn:TI 218 217 155 10 init/initramfs.c:267 (set (reg:SI 7 r7 [ ivtmp.554+4 ])
        (reg:SI 3 r3 [ ivtmp.533+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ ivtmp.533+4 ])
        (nil)))

(insn 155 218 152 10 init/initramfs.c:260 (set (reg/f:SI 3 r3 [252])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 152 155 221 10 init/initramfs.c:267 (parallel [
            (set (reg:DI 6 r6 [orig:227 ivtmp.554 ] [227])
                (minus:DI (reg:DI 6 r6 [orig:227 ivtmp.554 ] [227])
                    (reg:DI 8 r8 [245])))
            (clobber (reg:CC 24 cc))
        ]) 20 {*arm_subdi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (expr_list:REG_EQUAL (plus:DI (reg:DI 2 r2 [orig:233 ivtmp.533 ] [233])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))

(insn 221 152 219 10 init/initramfs.c:264 discrim 1 (set (reg:SI 8 r8 [258])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (nil))

(insn:TI 219 221 222 10 init/initramfs.c:260 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 0 r0 [orig:231 D.26679 ] [231])
                        (reg:SI 6 r6 [orig:227 ivtmp.554 ] [227]))
                    (reg:SI 0 r0 [orig:231 D.26679 ] [231])))
            (set (reg:SI 0 r0 [orig:231 D.26679 ] [231])
                (plus:SI (reg:SI 0 r0 [orig:231 D.26679 ] [231])
                    (reg:SI 6 r6 [orig:227 ivtmp.554 ] [227])))
        ]) 10 {*addsi3_compare_op1} (nil))

(insn 222 219 220 10 init/initramfs.c:264 discrim 1 (set (reg:SI 9 r9 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 220 222 161 10 init/initramfs.c:260 (set (reg:SI 1 r1 [ D.26679+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 5 r5 [orig:1 D.26679+4 ] [1])
                (reg:SI 7 r7 [ ivtmp.554+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 7 r7 [ ivtmp.554+4 ])
            (nil))))

(insn 161 220 224 10 init/initramfs.c:260 (set (reg:SI 4 r4 [256])
        (minus:SI (reg:SI 4 r4 [orig:234 count_lsm.528 ] [234])
            (reg:SI 6 r6 [orig:227 ivtmp.554 ] [227]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 6 r6 [orig:227 ivtmp.554 ] [227])
        (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                    (const_int 8 [0x8])) [0 count+0 S4 A32])
            (nil))))

(insn:TI 224 161 223 10 init/initramfs.c:264 discrim 1 (set (reg:SI 7 r7 [+4 ])
        (and:SI (reg:SI 1 r1 [ D.26679+4 ])
            (reg:SI 9 r9 [+4 ]))) 67 {*arm_andsi3_insn} (nil))

(insn 223 224 168 10 init/initramfs.c:264 discrim 1 (set (reg:SI 6 r6 [257])
        (and:SI (reg:SI 0 r0 [orig:231 D.26679 ] [231])
            (reg:SI 8 r8 [258]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 168 223 156 10 init/initramfs.c:264 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 6 r6 [257])
                        (reg:SI 7 r7 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 2 r2))
        ]) 92 {*iorsi3_compare0_scratch} (expr_list:REG_UNUSED (reg:SI 2 r2)
        (nil)))

(insn 156 168 162 10 init/initramfs.c:260 (set (reg:SI 12 ip [253])
        (plus:SI (reg:SI 12 ip [orig:232 ivtmp.535 ] [232])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn:TI 162 156 157 10 init/initramfs.c:260 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 4 r4 [256])) 167 {*arm_movsi_insn} (nil))

(insn:TI 157 162 159 10 init/initramfs.c:260 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [252])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 12 ip [253])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [253])
        (nil)))

(insn:TI 159 157 169 10 init/initramfs.c:260 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [252])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 0 r0 [orig:231 D.26679 ] [231])) 163 {*arm_movdi} (nil))

(jump_insn 169 159 243 10 init/initramfs.c:264 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 144)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 10 -> ( 11 9)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  10 [0.0%]  (fallthru)
(note 243 169 245 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 245 243 246 11 (set (pc)
        (label_ref 244)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%] 

(barrier 246 245 213)

(note 213 246 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function flush_buffer (flush_buffer)[0:1332] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 28 (  2.2)


flush_buffer

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,6u} r1={3d,3u} r2={4d,3u} r3={7d,11u,1d} r4={4d,8u} r5={2d,7u,1d} r6={2d,6u,1d} r7={3d,5u} r8={3d,4u} r9={2d,3u} r10={2d,3u} r12={1d} r13={2d,14u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={7d,10u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 246{158d,85u,3e} in 43{42 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 12 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 8 [r8] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 2 )->[3]->( 8 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 11 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 4 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 6 4 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 5 7 3 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 8 9 )->[9]->( 9 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 10 )->[11]->( 4 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 10 11 2 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 12 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 11 to worklist
  Adding insn 121 to worklist
  Adding insn 131 to worklist
  Adding insn 25 to worklist
  Adding insn 30 to worklist
  Adding insn 37 to worklist
  Adding insn 50 to worklist
  Adding insn 42 to worklist
  Adding insn 56 to worklist
  Adding insn 54 to worklist
  Adding insn 70 to worklist
  Adding insn 66 to worklist
  Adding insn 76 to worklist
  Adding insn 82 to worklist
  Adding insn 124 to worklist
  Adding insn 95 to worklist
Finished finding needed instructions:
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 43 to worklist
processing block 6 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 39 to worklist
processing block 5 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 36 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 27 to worklist
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 23 to worklist
processing block 12 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 89 to worklist
processing block 11 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 81 to worklist
  Adding insn 80 to worklist
processing block 10 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 75 to worklist
  Adding insn 74 to worklist
  Adding insn 73 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 69 to worklist
  Adding insn 63 to worklist
  Adding insn 60 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 41 to worklist
  Adding insn 49 to worklist
  Adding insn 103 to worklist
  Adding insn 18 to worklist
  Adding insn 53 to worklist
processing block 2 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 13 to worklist
  Adding insn 10 to worklist
  Adding insn 9 to worklist
  Adding insn 7 to worklist
  Adding insn 3 to worklist
  Adding insn 8 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 30 (  2.3)
;;   ======================================================
;;   -- basic block 2 from 121 to 11 -- after reload
;;   ======================================================

;;	  0-->     8 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->   121 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  2-->     3 r8=r1                             :cortex_a8_default
;;	  3-->     9 r2=[r3]                           :cortex_a8_load_store_1
;;	  3-->     7 r4=r1                             :cortex_a8_default
;;	  5-->    10 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  6-->    13 (cc) r8=0xffffffffffffffff        :cortex_a8_default
;;	  7-->    11 pc={(cc!=0x0)?L83:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 121
;;   new tail = 11

;;   ======================================================
;;   -- basic block 3 from 53 to 131 -- after reload
;;   ======================================================

;;	  0-->    53 r6=r3                             :cortex_a8_default
;;	  0-->    18 r7=r0                             :cortex_a8_default
;;	  1-->   103 r5=r3                             :cortex_a8_default
;;	  1-->    49 r9=`*.LC1'                        :cortex_a8_load_store_1
;;	  2-->    41 sl=0x7                            :cortex_a8_default
;;	  2-->   131 pc=L112                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 53
;;   new tail = 131

;;   ======================================================
;;   -- basic block 4 from 23 to 25 -- after reload
;;   ======================================================

;;	  0-->    23 r0=zxn([r7+r3])                   :cortex_a8_load_store_1
;;	  0-->    22 r1=r7+r3                          :cortex_a8_default
;;	  2-->    24 cc=cmp(r0,0x30)                   :cortex_a8_default
;;	  2-->    30 (!cc) [r5+0x20]=r2                :cortex_a8_load_store_1
;;	  3-->    27 (!cc) r4=r4-r3                    :cortex_a8_default
;;	  4-->    25 pc={(cc==0x0)?L128:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 23
;;   new tail = 25

;;   ======================================================
;;   -- basic block 5 from 36 to 37 -- after reload
;;   ======================================================

;;	  0-->    36 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  0-->    50 (cc) [r5]=r9                      :cortex_a8_load_store_1
;;	  2-->    37 pc={(cc!=0x0)?L112:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 36
;;   new tail = 37

;;   ======================================================
;;   -- basic block 6 from 39 to 42 -- after reload
;;   ======================================================

;;	  0-->    39 r4=r4-r3                          :cortex_a8_default
;;	  0-->    42 [r5+0x20]=sl                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 39
;;   new tail = 42

;;   ======================================================
;;   -- basic block 7 from 43 to 43 -- after reload
;;   ======================================================

;;	  0-->    43 r7=r1                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 43
;;   new tail = 43

;;   ======================================================
;;   -- basic block 8 from 54 to 56 -- after reload
;;   ======================================================

;;	  0-->    54 [r6+0x8]=r4                       :cortex_a8_load_store_1
;;	  1-->    56 [r6+0xc]=r7                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 1
;;   new head = 54
;;   new tail = 56

;;   ======================================================
;;   -- basic block 9 from 60 to 70 -- after reload
;;   ======================================================

;;	  0-->    60 r3=[r6+0x20]                      :cortex_a8_load_store_1
;;	  3-->    63 r3=r3*0x4+r6                      :cortex_a8_default
;;	  4-->    66 r0=call [[r3+0x38]]               :cortex_a8_issue_branch
;;	 36-->    69 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 38-->    70 pc={(cc==0x0)?L68:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 38
;;   new head = 60
;;   new tail = 70

;;   ======================================================
;;   -- basic block 10 from 73 to 76 -- after reload
;;   ======================================================

;;	  0-->    73 r3=[r5+0x8]                       :cortex_a8_load_store_1
;;	  2-->    74 r3=r4-r3                          :cortex_a8_default
;;	  3-->    75 cc=cmp(r3,r4)                     :cortex_a8_default
;;	  5-->    76 pc={(geu(cc,0x0))?L83:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 73
;;   new tail = 76

;;   ======================================================
;;   -- basic block 11 from 80 to 82 -- after reload
;;   ======================================================

;;	  0-->    80 r2=[r5]                           :cortex_a8_load_store_1
;;	  2-->    81 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  4-->    82 pc={(cc==0x0)?L78:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 80
;;   new tail = 82

;;   ======================================================
;;   -- basic block 12 from 89 to 124 -- after reload
;;   ======================================================

;;	  0-->    89 r0=r8                             :cortex_a8_default
;;	  0-->    95 use r0                            :nothing
;;	  0-->   124 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 89
;;   new tail = 124





flush_buffer

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,6u} r1={3d,3u} r2={4d,3u} r3={7d,11u,1d} r4={4d,8u} r5={2d,7u,1d} r6={2d,6u,1d} r7={3d,5u} r8={3d,4u} r9={2d,3u} r10={2d,3u} r12={1d} r13={2d,14u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={7d,10u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 246{158d,85u,3e} in 43{42 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 8 [r8] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 8 [r8] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 8 4 121 2 init/initramfs.c:392 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 121 8 122 2 init/initramfs.c:388 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 8 r8)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -32 [0xffffffffffffffe0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 7 r7))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 16 [0x10])) [0 S4 A32])
                            (reg:SI 8 r8))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 20 [0x14])) [0 S4 A32])
                            (reg:SI 9 r9))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 24 [0x18])) [0 S4 A32])
                            (reg:SI 10 sl))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 28 [0x1c])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 122 121 3 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 3 122 9 2 init/initramfs.c:388 (set (reg/v:SI 8 r8 [orig:137 origLen ] [137])
        (reg:SI 1 r1 [ len ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 9 3 7 2 init/initramfs.c:392 (set (reg/f:SI 2 r2 [orig:143 message ] [143])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [142]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [142]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 7 9 10 2 init/initramfs.c:391 (set (reg/v:SI 4 r4 [orig:141 len ] [141])
        (reg:SI 1 r1 [orig:137 origLen ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:137 origLen ] [137])
        (nil)))

(insn:TI 10 7 13 2 init/initramfs.c:392 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:143 message ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:143 message ] [143])
        (nil)))

(insn:TI 13 10 11 2 init/initramfs.c:393 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 8 r8 [orig:137 origLen ] [137])
            (const_int -1 [0xffffffffffffffff]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 11 13 17 2 init/initramfs.c:392 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 83)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 12)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl]
;; live  kill	

;; Pred edge  2 [0.0%]  (fallthru)
(note 17 11 53 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 53 17 18 3 init/initramfs.c:379 (set (reg/f:SI 6 r6 [166])
        (reg/f:SI 3 r3 [142])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 18 53 103 3 init/initramfs.c:389 (set (reg/v/f:SI 7 r7 [orig:138 buf ] [138])
        (reg/v/f:SI 0 r0 [orig:140 bufv ] [140])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:140 bufv ] [140])
        (nil)))

(insn:TI 103 18 49 3 init/initramfs.c:382 discrim 1 (set (reg/f:SI 5 r5 [167])
        (reg/f:SI 3 r3 [166])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [166])
        (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
            (nil))))

(insn 49 103 41 3 init/initramfs.c:16 (set (reg/f:SI 9 r9 [168])
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)
        (nil)))

(insn:TI 41 49 131 3 init/initramfs.c:403 (set (reg:SI 10 sl [169])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(jump_insn 131 41 132 3 (set (pc)
        (label_ref 112)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 132 131 78)

;; Start of basic block ( 11) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  11 [0.0%] 
(code_label 78 132 21 4 42 "" [1 uses])

(note 21 78 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 21 22 4 init/initramfs.c:395 (set (reg/v:SI 0 r0 [orig:136 c ] [136])
        (zero_extend:SI (mem:QI (plus:SI (reg/v/f:SI 7 r7 [orig:138 buf ] [138])
                    (reg:SI 3 r3 [orig:135 D.26319 ] [135])) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 22 23 24 4 init/initramfs.c:395 (set (reg/v/f:SI 1 r1 [orig:133 buf.581 ] [133])
        (plus:SI (reg/v/f:SI 7 r7 [orig:138 buf ] [138])
            (reg:SI 3 r3 [orig:135 D.26319 ] [135]))) 4 {*arm_addsi3} (nil))

(insn:TI 24 22 30 4 init/initramfs.c:396 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:136 c ] [136])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (nil))

(insn 30 24 27 4 init/initramfs.c:399 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                    (const_int 32 [0x20])) [0 state+0 S4 A32])
            (reg/f:SI 2 r2 [orig:163 message ] [163]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:163 message ] [163])
        (nil)))

(insn:TI 27 30 25 4 init/initramfs.c:398 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:141 len ] [141])
            (minus:SI (reg/v:SI 4 r4 [orig:141 len ] [141])
                (reg:SI 3 r3 [orig:135 D.26319 ] [135])))) 2270 {neon_vornv2di+3} (nil))

(jump_insn:TI 25 27 35 4 init/initramfs.c:396 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  5 [72.0%]  (fallthru)
;; Succ edge  7 [28.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [72.0%]  (fallthru)
(note 35 25 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 36 35 50 5 init/initramfs.c:400 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:136 c ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 0 r0 [orig:136 c ] [136])
        (nil)))

(insn 50 36 37 5 init/initramfs.c:16 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/f/c/i:SI (reg/f:SI 5 r5 [167]) [0 message+0 S4 A32])
            (reg/f:SI 9 r9 [168]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 37 50 38 5 init/initramfs.c:400 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 112)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)
;; Succ edge  8 [0.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 39 38 42 6 init/initramfs.c:402 (set (reg/v:SI 4 r4 [orig:141 len ] [141])
        (minus:SI (reg/v:SI 4 r4 [orig:141 len ] [141])
            (reg:SI 3 r3 [orig:135 D.26319 ] [135]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:135 D.26319 ] [135])
        (nil)))

(insn 42 39 128 6 init/initramfs.c:403 (set (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 10 sl [169])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 7 [0x7])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  4 [28.0%] 
(code_label 128 42 126 7 46 "" [1 uses])

(note 126 128 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 43 126 112 7 init/initramfs.c:401 (set (reg/v/f:SI 7 r7 [orig:138 buf ] [138])
        (reg/v/f:SI 1 r1 [orig:133 buf.581 ] [133])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 1 r1 [orig:133 buf.581 ] [133])
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 5 7 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [0.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 112 43 109 8 45 "" [2 uses])

(note 109 112 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 54 109 56 8 init/initramfs.c:379 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg/v:SI 4 r4 [orig:141 len ] [141])) 167 {*arm_movsi_insn} (nil))

(insn:TI 56 54 68 8 init/initramfs.c:380 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg/v/f:SI 7 r7 [orig:138 buf ] [138])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  9 [86.0%]  (dfs_back)
(code_label 68 56 57 9 41 "" [1 uses])

(note 57 68 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 62 57 65 9 NOTE_INSN_DELETED)

(note 65 62 67 9 NOTE_INSN_DELETED)

(note 67 65 60 9 NOTE_INSN_DELETED)

(insn:TI 60 67 63 9 init/initramfs.c:382 discrim 1 (set (reg:SI 3 r3 [orig:154 state ] [154])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                (const_int 32 [0x20])) [0 state+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [166])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 32 [0x20]))) [0 state+0 S4 A32])
            (nil))))

(insn:TI 63 60 66 9 init/initramfs.c:382 discrim 1 (set (reg:SI 3 r3 [157])
        (plus:SI (mult:SI (reg:SI 3 r3 [orig:154 state ] [154])
                (const_int 4 [0x4]))
            (reg/f:SI 6 r6 [166]))) 270 {*arith_shiftsi} (nil))

(call_insn:TI 66 63 69 9 init/initramfs.c:382 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [157])
                                (const_int 56 [0x38])) [0 actions S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg:SI 3 r3 [157])
        (nil))
    (nil))

(insn:TI 69 66 70 9 init/initramfs.c:382 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 70 69 71 9 init/initramfs.c:382 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 9 -> ( 9 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  9 [86.0%]  (dfs_back)
;; Succ edge  10 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [14.0%]  (fallthru,loop_exit)
(note 71 70 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 73 71 74 10 init/initramfs.c:384 (set (reg:SI 3 r3 [orig:161 count ] [161])
        (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 5 r5 [167])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn:TI 74 73 75 10 init/initramfs.c:384 (set (reg:SI 3 r3 [orig:135 D.26319 ] [135])
        (minus:SI (reg/v:SI 4 r4 [orig:141 len ] [141])
            (reg:SI 3 r3 [orig:161 count ] [161]))) 28 {*arm_subsi3_insn} (nil))

(insn:TI 75 74 76 10 init/initramfs.c:394 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:135 D.26319 ] [135])
            (reg/v:SI 4 r4 [orig:141 len ] [141]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 76 75 77 10 init/initramfs.c:394 discrim 1 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 83)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [95.5%]  (fallthru)
;; Succ edge  12 [4.5%]  (loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  10 [95.5%]  (fallthru)
(note 77 76 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 80 77 81 11 init/initramfs.c:394 discrim 2 (set (reg/f:SI 2 r2 [orig:163 message ] [163])
        (mem/f/c/i:SI (reg/f:SI 5 r5 [167]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
        (nil)))

(insn:TI 81 80 82 11 init/initramfs.c:394 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:163 message ] [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 82 81 83 11 init/initramfs.c:394 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 11 -> ( 4 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  4 [0.0%] 
;; Succ edge  12 [100.0%]  (fallthru,loop_exit)

;; Start of basic block ( 10 11 2) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  10 [4.5%]  (loop_exit)
;; Pred edge  11 [100.0%]  (fallthru,loop_exit)
;; Pred edge  2 [100.0%] 
(code_label 83 82 84 12 37 "" [2 uses])

(note 84 83 89 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 89 84 95 12 init/initramfs.c:408 (set (reg/i:SI 0 r0)
        (reg/v:SI 8 r8 [orig:137 origLen ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 95 89 123 12 init/initramfs.c:408 (use (reg/i:SI 0 r0)) -1 (nil))

(note 123 95 124 12 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 124 123 125 12 init/initramfs.c:408 (return) 260 {return} (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 125 124 119)

(note 119 125 120 NOTE_INSN_DELETED)

(note 120 119 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function retain_initrd_param (retain_initrd_param)[0:1334] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 43 -- after reload
;;   ======================================================

;;	  0-->     6 r3=zxn([r0])                      :cortex_a8_load_store_1
;;	  2-->     7 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  3-->    16 (!cc) r3=0x1                      :cortex_a8_default
;;	  3-->    10 (cc) r0=0x0                       :cortex_a8_default
;;	  4-->    38 (!cc) r2=`*.LANCHOR0'             :cortex_a8_load_store_1
;;	  4-->    18 (!cc) r0=r3                       :cortex_a8_default
;;	  7-->    17 (!cc) [r2+0x58]=r3                :cortex_a8_load_store_1
;;	  7-->    31 use r0                            :nothing
;;	  8-->    43 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 8
;;   new head = 6
;;   new tail = 43





retain_initrd_param

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,5u} r1={1d} r2={2d,2u} r3={3d,4u} r13={1d,2u} r14={1d,1u} r24={1d,5u} 
;;    total ref usage 31{12d,19u,0e} in 9{9 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 40 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 40 4 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 40 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 6 3 7 2 init/initramfs.c:479 (set (reg:SI 3 r3 [136])
        (zero_extend:SI (mem:QI (reg:SI 0 r0 [ str ]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 7 6 16 2 init/initramfs.c:479 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 16 7 10 2 init/initramfs.c:481 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [138])
            (const_int 1 [0x1]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 10 16 38 2 init/initramfs.c:480 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:133 D.26190 ] [133])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 38 10 18 2 init/initramfs.c:481 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 2 r2 [137])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 18 38 17 2 init/initramfs.c:482 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:133 D.26190 ] [133])
            (reg:SI 3 r3 [138]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 17 18 31 2 init/initramfs.c:481 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (plus:SI (reg/f:SI 2 r2 [137])
                    (const_int 88 [0x58])) [0 do_retain_initrd+0 S4 A32])
            (reg:SI 3 r3 [138]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [138])
            (expr_list:REG_DEAD (reg/f:SI 2 r2 [137])
                (expr_list:REG_EQUAL (const_int 1 [0x1])
                    (nil))))))

(insn 31 17 43 2 init/initramfs.c:483 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 43 31 42 2 init/initramfs.c:483 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 42 43 37)

(note 37 42 39 NOTE_INSN_DELETED)

(note 39 37 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function clean_path (clean_path)[0:1327] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 13 (  1.6)


clean_path

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,5u} r1={5d,2u} r2={4d} r3={6d,3u} r4={2d,4u} r5={3d,4u} r12={3d} r13={3d,15u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 410{372d,38u,0e} in 21{18 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 7 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 2 )->[3]->( 4 7 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 4 )->[5]->( 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 4 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 6 2 3 5 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 10 to worklist
  Adding insn 47 to worklist
  Adding insn 20 to worklist
  Adding insn 24 to worklist
  Adding insn 53 to worklist
  Adding insn 27 to worklist
  Adding insn 33 to worklist
  Adding insn 51 to worklist
Finished finding needed instructions:
processing block 7 lr out =  4 [r4] 5 [r5] 13 [sp] 14 [lr]
processing block 5 lr out =  4 [r4] 5 [r5] 13 [sp] 14 [lr]
  Adding insn 26 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 13 [sp] 14 [lr]
  Adding insn 32 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 13 [sp]
  Adding insn 23 to worklist
  Adding insn 22 to worklist
processing block 3 lr out =  3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
  Adding insn 19 to worklist
  Adding insn 17 to worklist
  Adding insn 15 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 13 [sp] 14 [lr]
  Adding insn 12 to worklist
  Adding insn 2 to worklist
  Adding insn 9 to worklist
  Adding insn 3 to worklist
  Adding insn 48 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 47 to 13 -- after reload
;;   ======================================================

;;	  0-->    47 {[--sp]=unspec[r4] 2;use r5;use lr:cortex_a8_load_store_2
;;	  1-->    48 sp=sp-0x44                        :cortex_a8_default
;;	  2-->     3 r5=r1                             :cortex_a8_default
;;	  2-->     9 r1=sp                             :cortex_a8_default
;;	  3-->     2 r4=r0                             :cortex_a8_default
;;	  3-->    10 r0=call [`sys_newlstat']          :cortex_a8_issue_branch
;;	 35-->    12 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 37-->    13 pc={(cc!=0x0)?L39:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 37
;;   new head = 47
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 15 to 20 -- after reload
;;   ======================================================

;;	  0-->    15 r3=zxn([sp+0x8])                  :cortex_a8_load_store_1
;;	  2-->    17 r5=r5^r3                          :cortex_a8_default
;;	  3-->    19 {cc=cmp(r5&0xf000,0x0);clobber scr:cortex_a8_default
;;	  5-->    20 pc={(cc==0x0)?L39:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 15
;;   new tail = 20

;;   ======================================================
;;   -- basic block 4 from 22 to 24 -- after reload
;;   ======================================================

;;	  0-->    22 r3=r3&0xf000                      :cortex_a8_default
;;	  1-->    23 cc=cmp(r3,0x4000)                 :cortex_a8_default
;;	  3-->    24 pc={(cc!=0x0)?L30:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 22
;;   new tail = 24

;;   ======================================================
;;   -- basic block 5 from 26 to 53 -- after reload
;;   ======================================================

;;	  0-->    26 r0=r4                             :cortex_a8_default
;;	  1-->    27 r0=call [`sys_rmdir']             :cortex_a8_issue_branch
;;	  1-->    53 pc=L39                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 26
;;   new tail = 53

;;   ======================================================
;;   -- basic block 6 from 32 to 33 -- after reload
;;   ======================================================

;;	  0-->    32 r0=r4                             :cortex_a8_default
;;	  1-->    33 r0=call [`sys_unlink']            :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 32
;;   new tail = 33

;;   ======================================================
;;   -- basic block 7 from 51 to 51 -- after reload
;;   ======================================================

;;	  0-->    51 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 51
;;   new tail = 51





clean_path

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 5[r5] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,5u} r1={5d,2u} r2={4d} r3={6d,3u} r4={2d,4u} r5={3d,4u} r12={3d} r13={3d,15u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 410{372d,38u,0e} in 21{18 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 4 11 2 NOTE_INSN_DELETED)

(note 11 7 47 2 NOTE_INSN_DELETED)

(insn/f:TI 47 11 48 2 init/initramfs.c:280 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -12 [0xfffffffffffffff4])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(insn/f:TI 48 47 49 2 init/initramfs.c:280 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -68 [0xffffffffffffffbc]))) 4 {*arm_addsi3} (nil))

(note 49 48 3 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 3 49 9 2 init/initramfs.c:280 (set (reg/v:SI 5 r5 [orig:136 mode ] [136])
        (reg:SI 1 r1 [ mode ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ mode ])
        (nil)))

(insn 9 3 2 2 init/initramfs.c:283 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 2 9 10 2 init/initramfs.c:280 (set (reg/v/f:SI 4 r4 [orig:135 path ] [135])
        (reg:SI 0 r0 [ path ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 2 12 2 init/initramfs.c:283 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_newlstat") [flags 0x41] <function_decl 0x11452980 sys_newlstat>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 12 10 13 2 init/initramfs.c:283 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 13 12 14 2 init/initramfs.c:283 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 3 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 14 13 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 16 14 18 3 NOTE_INSN_DELETED)

(note 18 16 15 3 NOTE_INSN_DELETED)

(insn:TI 15 18 17 3 init/initramfs.c:283 discrim 1 (set (reg:SI 3 r3 [orig:133 D.25967 ] [133])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 8 [0x8])) [0 st.st_mode+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn:TI 17 15 19 3 init/initramfs.c:283 discrim 1 (set (reg:SI 5 r5 [139])
        (xor:SI (reg/v:SI 5 r5 [orig:136 mode ] [136])
            (reg:SI 3 r3 [orig:133 D.25967 ] [133]))) 96 {*arm_xorsi3} (nil))

(insn:TI 19 17 20 3 init/initramfs.c:283 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 5 r5 [139])
                        (const_int 61440 [0xf000]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn:TI 20 19 21 3 init/initramfs.c:283 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [61.0%]  (fallthru)
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 22 21 23 4 init/initramfs.c:284 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 3 r3 [orig:133 D.25967 ] [133])
            (const_int 61440 [0xf000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 23 22 24 4 init/initramfs.c:284 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [141])
            (const_int 16384 [0x4000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (nil)))

(jump_insn:TI 24 23 25 4 init/initramfs.c:284 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  5 [19.9%]  (fallthru)
;; Succ edge  6 [80.1%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [19.9%]  (fallthru)
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 25 27 5 init/initramfs.c:285 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 path ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 27 26 53 5 init/initramfs.c:285 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_rmdir") [flags 0x41] <function_decl 0x11464e00 sys_rmdir>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 53 27 54 5 (set (pc)
        (label_ref 39)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 54 53 30)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [80.1%] 
(code_label 30 54 31 6 57 "" [1 uses])

(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 31 33 6 init/initramfs.c:287 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 path ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 33 32 39 6 init/initramfs.c:287 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_unlink") [flags 0x41] <function_decl 0x11458d00 sys_unlink>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 2 3 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
;; Pred edge  3 [39.0%] 
;; Pred edge  5 [100.0%] 
(code_label 39 33 42 7 58 "" [3 uses])

(note 42 39 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 50 42 51 7 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 51 50 52 7 init/initramfs.c:289 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 7 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 52 51 45)

(note 45 52 46 NOTE_INSN_DELETED)

(note 46 45 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_utime (do_utime)[0:1315] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 36 to 39 -- after reload
;;   ======================================================

;;	  0-->    36 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  1-->     3 lr=r1                             :cortex_a8_default
;;	  2-->    16 r2=sp                             :cortex_a8_default
;;	  2-->    15 r1=r0                             :cortex_a8_default
;;	  3-->    17 r3=0x100                          :cortex_a8_default
;;	  3-->    14 r0=0xffffffffffffff9c             :cortex_a8_default
;;	  4-->     8 ip=0x0                            :cortex_a8_default
;;	  4-->    10 [sp+0x8]=lr                       :cortex_a8_load_store_1
;;	  5-->    12 [sp+0xc]=ip                       :cortex_a8_load_store_1
;;	  6-->     7 [sp]=lr                           :cortex_a8_load_store_1
;;	  7-->     9 [sp+0x4]=ip                       :cortex_a8_load_store_1
;;	  7-->    18 r0=call [`do_utimes']             :cortex_a8_issue_branch
;;	  8-->    30 use r0                            :nothing
;;	  8-->    39 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 8
;;   new head = 36
;;   new tail = 39





do_utime

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={3d,5u} r1={3d,3u} r2={3d,2u} r3={3d,2u} r4={1d,2u} r12={2d,2u} r13={2d,9u} r14={3d,4u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 161{131d,29u,1e} in 14{13 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 4 36 2 NOTE_INSN_DELETED)

(insn/f:TI 36 13 37 2 init/initramfs.c:78 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 3 r3))
            (use (reg:SI 4 r4))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 3 r3)
            (expr_list:REG_DEAD (reg:SI 2 r2)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -24 [0xffffffffffffffe8])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 0 r0))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 1 r1))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 2 r2))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 3 r3))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 16 [0x10])) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 20 [0x14])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 37 36 3 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 3 37 16 2 init/initramfs.c:78 (set (reg/v:SI 14 lr [orig:136 mtime ] [136])
        (reg:SI 1 r1 [ mtime ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ mtime ])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -16 [0xfffffffffffffff0])) [0 <variable>.tv_sec+0 S4 A64])
            (nil))))

(insn:TI 16 3 15 2 init/initramfs.c:86 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 15 16 17 2 init/initramfs.c:86 (set (reg:SI 1 r1)
        (reg/v/f:SI 0 r0 [orig:135 filename ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:135 filename ] [135])
        (nil)))

(insn:TI 17 15 14 2 init/initramfs.c:86 (set (reg:SI 3 r3)
        (const_int 256 [0x100])) 167 {*arm_movsi_insn} (nil))

(insn 14 17 8 2 init/initramfs.c:86 (set (reg:SI 0 r0)
        (const_int -100 [0xffffffffffffff9c])) 167 {*arm_movsi_insn} (nil))

(insn:TI 8 14 10 2 init/initramfs.c:82 (set (reg:SI 12 ip [137])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 10 8 12 2 init/initramfs.c:83 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 <variable>.tv_sec+0 S4 A64])
        (reg/v:SI 14 lr [orig:136 mtime ] [136])) 167 {*arm_movsi_insn} (nil))

(insn:TI 12 10 7 2 init/initramfs.c:84 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 <variable>.tv_nsec+0 S4 A32])
        (reg:SI 12 ip [137])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 7 12 9 2 init/initramfs.c:81 (set (mem/s/j:SI (reg/f:SI 13 sp) [0 <variable>.tv_sec+0 S4 A64])
        (reg/v:SI 14 lr [orig:136 mtime ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 14 lr [orig:136 mtime ] [136])
        (nil)))

(insn:TI 9 7 18 2 init/initramfs.c:82 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 <variable>.tv_nsec+0 S4 A32])
        (reg:SI 12 ip [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [137])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn 18 9 30 2 init/initramfs.c:86 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utimes") [flags 0x41] <function_decl 0x10c9bf80 do_utimes>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 30 18 38 2 init/initramfs.c:87 (use (reg/i:SI 0 r0)) -1 (nil))

(note 38 30 39 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 39 38 40 2 init/initramfs.c:87 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 40 39 34)

(note 34 40 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_symlink (do_symlink)[0:1330] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 68 to 71 -- after reload
;;   ======================================================

;;	  0-->    68 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     5 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->    17 r5=0x0                            :cortex_a8_default
;;	  3-->    21 r1=r5                             :cortex_a8_default
;;	  4-->     9 ip=[r4+0x60]                      :cortex_a8_load_store_1
;;	  5-->     6 r3=[r4+0x10]                      :cortex_a8_load_store_1
;;	  6-->    10 ip=ip+0x1                         :cortex_a8_default
;;	  6-->    12 r2=[r4+0x5c]                      :cortex_a8_load_store_1
;;	  7-->    11 ip=ip&0xfffffffffffffffc          :cortex_a8_default
;;	  7-->    20 r0=r3                             :cortex_a8_default
;;	  8-->    14 r3=r3+ip                          :cortex_a8_default
;;	  9-->    15 r3=r3+r2                          :cortex_a8_default
;;	 11-->    19 [r3+0x2]=r5                       :cortex_a8_load_store_1
;;	 12-->    22 call [`clean_path']               :cortex_a8_issue_branch
;;	 12-->    26 r0=[r4+0x60]                      :cortex_a8_load_store_1
;;	 13-->    24 r3=[r4+0x10]                      :cortex_a8_load_store_1
;;	 14-->    27 r0=r0+0x1                         :cortex_a8_default
;;	 15-->    28 r0=r0&0xfffffffffffffffc          :cortex_a8_default
;;	 15-->    32 r1=r3                             :cortex_a8_default
;;	 16-->    29 r0=r0+0x2                         :cortex_a8_default
;;	 17-->    31 r0=r3+r0                          :cortex_a8_default
;;	 18-->    33 r0=call [`sys_symlink']           :cortex_a8_issue_branch
;;	 18-->    38 r1=[r4+0x64]                      :cortex_a8_load_store_1
;;	 19-->    39 r2=[r4+0x68]                      :cortex_a8_load_store_1
;;	 20-->    37 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	 21-->    40 r0=call [`sys_lchown']            :cortex_a8_issue_branch
;;	 21-->    43 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	 22-->    44 r1=[r4+0x6c]                      :cortex_a8_load_store_1
;;	 23-->    45 r0=call [`do_utime']              :cortex_a8_issue_branch
;;	 23-->    47 r3=0x3                            :cortex_a8_default
;;	 24-->    56 r0=r5                             :cortex_a8_default
;;	 24-->    48 [r4+0x20]=r3                      :cortex_a8_load_store_1
;;	 25-->    50 r3=r3+0x4                         :cortex_a8_default
;;	 25-->    51 [r4+0x2c]=r3                      :cortex_a8_load_store_1
;;	 26-->    62 use r0                            :nothing
;;	 26-->    71 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 26
;;   new head = 68
;;   new tail = 71





do_symlink

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={14d,10u} r1={9d,4u} r2={7d,2u} r3={11d,9u} r4={2d,14u,5d} r5={2d,5u} r6={1d,2u} r12={7d,3u} r13={2d,7u} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 567{504d,58u,5e} in 36{32 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 30 2 NOTE_INSN_FUNCTION_BEG)

(note 30 2 68 2 NOTE_INSN_DELETED)

(insn/f:TI 68 30 69 2 init/initramfs.c:355 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -16 [0xfffffffffffffff0])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 69 68 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 69 17 2 init/initramfs.c:356 (set (reg/f:SI 4 r4 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 17 5 21 2 init/initramfs.c:356 (set (reg:SI 5 r5 [147])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 21 17 9 2 init/initramfs.c:357 (set (reg:SI 1 r1)
        (reg:SI 5 r5 [147])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 9 21 6 2 init/initramfs.c:356 (set (reg:SI 12 ip [orig:140 name_len ] [140])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])
        (nil)))

(insn:TI 6 9 10 2 init/initramfs.c:356 (set (reg/f:SI 3 r3 [orig:134 collected.393 ] [134])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (nil)))

(insn:TI 10 6 12 2 init/initramfs.c:356 (set (reg:SI 12 ip [139])
        (plus:SI (reg:SI 12 ip [orig:140 name_len ] [140])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 12 10 11 2 init/initramfs.c:356 (set (reg:SI 2 r2 [orig:142 body_len ] [142])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (nil)))

(insn:TI 11 12 20 2 init/initramfs.c:356 (set (reg:SI 12 ip [141])
        (and:SI (reg:SI 12 ip [139])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 20 11 14 2 init/initramfs.c:357 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:134 collected.393 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn:TI 14 20 15 2 init/initramfs.c:356 (set (reg:SI 3 r3 [144])
        (plus:SI (reg/f:SI 3 r3 [orig:134 collected.393 ] [134])
            (reg:SI 12 ip [141]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 12 ip [141])
        (nil)))

(insn:TI 15 14 19 2 init/initramfs.c:356 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [144])
            (reg:SI 2 r2 [orig:142 body_len ] [142]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:142 body_len ] [142])
        (nil)))

(insn:TI 19 15 22 2 init/initramfs.c:356 (set (mem:QI (plus:SI (reg:SI 3 r3 [145])
                (const_int 2 [0x2])) [0 S1 A8])
        (reg:QI 5 r5 [147])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [145])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn:TI 22 19 26 2 init/initramfs.c:357 (parallel [
            (call (mem:SI (symbol_ref:SI ("clean_path") [flags 0x3] <function_decl 0x114ad300 clean_path>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 26 22 24 2 init/initramfs.c:358 (set (reg:SI 0 r0 [orig:152 name_len ] [152])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])
        (nil)))

(insn:TI 24 26 27 2 init/initramfs.c:358 (set (reg/f:SI 3 r3 [orig:133 collected.674 ] [133])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (nil)))

(insn:TI 27 24 28 2 init/initramfs.c:358 (set (reg:SI 0 r0 [151])
        (plus:SI (reg:SI 0 r0 [orig:152 name_len ] [152])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 28 27 32 2 init/initramfs.c:358 (set (reg:SI 0 r0 [153])
        (and:SI (reg:SI 0 r0 [151])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 32 28 29 2 init/initramfs.c:358 (set (reg:SI 1 r1)
        (reg/f:SI 3 r3 [orig:133 collected.674 ] [133])) 167 {*arm_movsi_insn} (nil))

(insn:TI 29 32 31 2 init/initramfs.c:358 (set (reg:SI 0 r0 [154])
        (plus:SI (reg:SI 0 r0 [153])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn:TI 31 29 33 2 init/initramfs.c:358 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 3 r3 [orig:133 collected.674 ] [133])
            (reg:SI 0 r0 [154]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:133 collected.674 ] [133])
        (nil)))

(call_insn:TI 33 31 38 2 init/initramfs.c:358 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_symlink") [flags 0x41] <function_decl 0x11458c80 sys_symlink>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 38 33 39 2 init/initramfs.c:359 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 39 38 37 2 init/initramfs.c:359 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 37 39 40 2 init/initramfs.c:359 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 40 37 43 2 init/initramfs.c:359 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_lchown") [flags 0x41] <function_decl 0x1145eb00 sys_lchown>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 43 40 44 2 init/initramfs.c:360 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 44 43 45 2 init/initramfs.c:360 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 45 44 47 2 init/initramfs.c:360 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utime") [flags 0x3] <function_decl 0x11487700 do_utime>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 47 45 56 2 init/initramfs.c:361 (set (reg:SI 3 r3 [162])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn:TI 56 47 48 2 init/initramfs.c:364 (set (reg/i:SI 0 r0)
        (reg:SI 5 r5 [147])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 48 56 50 2 init/initramfs.c:361 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 3 r3 [162])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(insn:TI 50 48 51 2 init/initramfs.c:362 (set (reg:SI 3 r3 [164])
        (plus:SI (reg:SI 3 r3 [164])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(insn 51 50 62 2 init/initramfs.c:362 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [136])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 3 r3 [164])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [164])
        (expr_list:REG_EQUAL (const_int 7 [0x7])
            (nil))))

(insn 62 51 70 2 init/initramfs.c:364 (use (reg/i:SI 0 r0)) -1 (nil))

(note 70 62 71 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 71 70 72 2 init/initramfs.c:364 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 72 71 66)

(note 66 72 67 NOTE_INSN_DELETED)

(note 67 66 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function unpack_to_rootfs (unpack_to_rootfs)[0:1333] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 41 count 69 (  2.4)


unpack_to_rootfs

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={33d,29u} r1={27d,13u} r2={29d,23u} r3={39d,31u} r4={5d,36u,8d} r5={7d,12u} r6={7d,12u} r7={4d,14u,3d} r8={3d,5u} r9={2d,3u} r10={3d,7u,1d} r11={2d,3u} r12={16d,5u} r13={3d,54u,1d} r14={15d,2u} r15={14d} r16={14d} r17={14d} r18={14d} r19={14d} r20={14d} r21={14d} r22={14d} r23={14d} r24={35d,21u} r27={14d} r28={14d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={14d} r38={14d} r39={14d} r40={14d} r41={14d} r42={14d} r43={14d} r44={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} r77={14d} r78={14d} r79={14d} r80={14d} r81={14d} r82={14d} r83={14d} r84={14d} r85={14d} r86={14d} r87={14d} r88={14d} r89={14d} r90={14d} r91={14d} r92={14d} r93={14d} r94={14d} r95={14d} r96={14d} r97={14d} r98={14d} r99={14d} r100={14d} r101={14d} r102={14d} r103={14d} r104={14d} r105={14d} r106={14d} r107={14d} r108={14d} r109={14d} r110={14d} r111={14d} r112={14d} r113={14d} r114={14d} r115={14d} r116={14d} r117={14d} r118={14d} r119={14d} r120={14d} r121={14d} r122={14d} r123={14d} r124={14d} r125={14d} r126={14d} r127={14d} 
;;    total ref usage 2053{1770d,270u,13e} in 169{155 regular + 14 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 5 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 2 3 4 )->[5]->( )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 4 )->[6]->( 24 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 24 )->[7]->( 8 12 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 7 )->[8]->( 9 14 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 9 10 )->[10]->( 10 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 10 )->[11]->( 24 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 6 [r6]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 7 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 12 )->[13]->( 24 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 12 8 )->[14]->( 15 17 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 14 )->[15]->( 16 21 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 15 )->[16]->( 21 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 14 )->[17]->( 18 20 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 17 )->[18]->( 19 21 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 18 )->[19]->( 21 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 17 )->[20]->( 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 16 18 20 15 19 )->[21]->( 22 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 21 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 21 22 )->[23]->( 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 23 6 11 13 )->[24]->( 7 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 24 )->[25]->( 27 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  in  	 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]

( 27 )->[26]->( 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]

( 26 25 )->[27]->( 26 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 10 [sl] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 27 )->[28]->( 1 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 28 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 38 to worklist
  Adding insn 34 to worklist
  Adding insn 30 to worklist
  Adding insn 24 to worklist
  Adding insn 21 to worklist
  Adding insn 15 to worklist
  Adding insn 12 to worklist
  Adding insn 389 to worklist
  Adding insn 43 to worklist
  Adding insn 46 to worklist
  Adding insn 51 to worklist
  Adding insn 397 to worklist
  Adding insn 57 to worklist
  Adding insn 63 to worklist
  Adding insn 60 to worklist
  Adding insn 71 to worklist
  Adding insn 362 to worklist
  Adding insn 78 to worklist
  Adding insn 86 to worklist
  Adding insn 84 to worklist
  Adding insn 82 to worklist
  Adding insn 100 to worklist
  Adding insn 96 to worklist
  Adding insn 399 to worklist
  Adding insn 112 to worklist
  Adding insn 401 to worklist
  Adding insn 119 to worklist
  Adding insn 135 to worklist
  Adding insn 132 to worklist
  Adding insn 344 to worklist
  Adding insn 343 to worklist
  Adding insn 151 to worklist
  Adding insn 148 to worklist
  Adding insn 143 to worklist
  Adding insn 139 to worklist
  Adding insn 141 to worklist
  Adding insn 403 to worklist
  Adding insn 160 to worklist
  Adding insn 167 to worklist
  Adding insn 172 to worklist
  Adding insn 405 to worklist
  Adding insn 185 to worklist
  Adding insn 181 to worklist
  Adding insn 197 to worklist
  Adding insn 203 to worklist
  Adding insn 212 to worklist
  Adding insn 368 to worklist
  Adding insn 238 to worklist
  Adding insn 407 to worklist
  Adding insn 261 to worklist
  Adding insn 259 to worklist
  Adding insn 257 to worklist
  Adding insn 254 to worklist
  Adding insn 252 to worklist
  Adding insn 250 to worklist
  Adding insn 249 to worklist
  Adding insn 272 to worklist
  Adding insn 393 to worklist
  Adding insn 295 to worklist
  Adding insn 282 to worklist
  Adding insn 279 to worklist
  Adding insn 276 to worklist
Finished finding needed instructions:
processing block 5 lr out =  13 [sp]
  Adding insn 50 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 105 to worklist
  Adding insn 106 to worklist
  Adding insn 104 to worklist
  Adding insn 103 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 99 to worklist
  Adding insn 93 to worklist
  Adding insn 90 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
processing block 23 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 376 to worklist
  Adding insn 375 to worklist
  Adding insn 369 to worklist
  Adding insn 221 to worklist
  Adding insn 222 to worklist
  Adding insn 216 to worklist
processing block 22 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 207 to worklist
  Adding insn 206 to worklist
processing block 21 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 202 to worklist
  Adding insn 201 to worklist
processing block 16 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 366 to worklist
  Adding insn 155 to worklist
  Adding insn 154 to worklist
processing block 15 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 150 to worklist
  Adding insn 147 to worklist
  Adding insn 145 to worklist
  Adding insn 144 to worklist
  Adding insn 365 to worklist
  Adding insn 138 to worklist
processing block 19 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 367 to worklist
  Adding insn 179 to worklist
  Adding insn 178 to worklist
  Adding insn 177 to worklist
processing block 18 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 171 to worklist
  Adding insn 170 to worklist
processing block 20 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 192 to worklist
  Adding insn 191 to worklist
processing block 17 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 166 to worklist
  Adding insn 165 to worklist
processing block 14 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
  Adding insn 134 to worklist
  Adding insn 131 to worklist
  Adding insn 130 to worklist
  Adding insn 129 to worklist
processing block 8 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 77 to worklist
  Adding insn 384 to worklist
  Adding insn 383 to worklist
  Adding insn 363 to worklist
  Adding insn 382 to worklist
  Adding insn 381 to worklist
processing block 13 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 115 to worklist
  Adding insn 380 to worklist
  Adding insn 379 to worklist
  Adding insn 364 to worklist
  Adding insn 114 to worklist
  Adding insn 378 to worklist
  Adding insn 377 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 111 to worklist
processing block 7 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 70 to worklist
  Adding insn 68 to worklist
  Adding insn 69 to worklist
processing block 26 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
  Adding insn 265 to worklist
  Adding insn 264 to worklist
  Adding insn 260 to worklist
  Adding insn 258 to worklist
  Adding insn 255 to worklist
  Adding insn 256 to worklist
  Adding insn 248 to worklist
  Adding insn 247 to worklist
processing block 28 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 289 to worklist
  Adding insn 281 to worklist
  Adding insn 278 to worklist
  Adding insn 275 to worklist
processing block 27 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 303 to worklist
  Adding insn 271 to worklist
processing block 25 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
  Adding insn 242 to worklist
  Adding insn 241 to worklist
  Adding insn 253 to worklist
  Adding insn 251 to worklist
  Adding insn 324 to worklist
processing block 24 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 237 to worklist
  Adding insn 374 to worklist
  Adding insn 373 to worklist
  Adding insn 372 to worklist
  Adding insn 230 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 307 to worklist
  Adding insn 211 to worklist
  Adding insn 215 to worklist
  Adding insn 341 to worklist
  Adding insn 56 to worklist
  Adding insn 342 to worklist
  Adding insn 229 to worklist
  Adding insn 386 to worklist
  Adding insn 385 to worklist
processing block 4 lr out =  5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 45 to worklist
processing block 3 lr out =  0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 42 to worklist
  Adding insn 41 to worklist
processing block 2 lr out =  0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 28 to worklist
  Adding insn 29 to worklist
  Adding insn 19 to worklist
  Adding insn 20 to worklist
  Adding insn 10 to worklist
  Adding insn 14 to worklist
  Adding insn 11 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 9 to worklist
  Adding insn 390 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 41 count 70 (  2.4)
;;   ======================================================
;;   -- basic block 2 from 389 to 38 -- after reload
;;   ======================================================

;;	  0-->   389 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     9 r4=`malloc_sizes'                 :cortex_a8_load_store_1
;;	  2-->   390 sp=sp-0x24                        :cortex_a8_default
;;	  2-->     2 r6=r0                             :cortex_a8_default
;;	  3-->     3 r5=r1                             :cortex_a8_default
;;	  3-->    11 r1=0xd0                           :cortex_a8_default
;;	  4-->    10 r0=[r4+0x1c]                      :cortex_a8_load_store_1
;;	  5-->    12 r0=call [`kmem_cache_alloc']      :cortex_a8_issue_branch
;;	  5-->    14 r7=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  6-->    20 r1=0xd0                           :cortex_a8_default
;;	 37-->    15 [r7+0x4]=r0                       :cortex_a8_load_store_1
;;	 38-->    19 r0=[r4+0x5c]                      :cortex_a8_load_store_1
;;	 39-->    21 r0=call [`kmem_cache_alloc']      :cortex_a8_issue_branch
;;	 39-->    29 r1=0xd0                           :cortex_a8_default
;;	 71-->    24 [r7+0x70]=r0                      :cortex_a8_load_store_1
;;	 72-->    28 r0=[r4+0x54]                      :cortex_a8_load_store_1
;;	 73-->    30 r0=call [`kmem_cache_alloc']      :cortex_a8_issue_branch
;;	 73-->    36 r3=[r7+0x4]                       :cortex_a8_load_store_1
;;	 75-->    37 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	105-->    34 [r7+0x74]=r0                      :cortex_a8_load_store_1
;;	105-->    38 pc={(cc==0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 105
;;   new head = 389
;;   new tail = 38

;;   ======================================================
;;   -- basic block 3 from 41 to 43 -- after reload
;;   ======================================================

;;	  0-->    41 r3=[r7+0x70]                      :cortex_a8_load_store_1
;;	  2-->    42 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->    43 pc={(cc==0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 41
;;   new tail = 43

;;   ======================================================
;;   -- basic block 4 from 45 to 46 -- after reload
;;   ======================================================

;;	  0-->    45 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  2-->    46 pc={(cc!=0x0)?L53:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 45
;;   new tail = 46

;;   ======================================================
;;   -- basic block 5 from 50 to 51 -- after reload
;;   ======================================================

;;	  0-->    50 r0=`*.LC2'                        :cortex_a8_load_store_1
;;	  1-->    51 call [`panic']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 50
;;   new tail = 51

;;   ======================================================
;;   -- basic block 6 from 385 to 397 -- after reload
;;   ======================================================

;;	  0-->   386 r3=0x0                            :cortex_a8_default
;;	  0-->   385 r2=0x0                            :cortex_a8_default
;;	  1-->   229 r4=r7                             :cortex_a8_default
;;	  1-->    60 [r7+0x18]=r2                      :cortex_a8_load_store_1
;;	  2-->   342 r9=r3                             :cortex_a8_default
;;	  2-->   341 fp=r2                             :cortex_a8_default
;;	  3-->    56 r3=0x0                            :cortex_a8_default
;;	  3-->   211 r8=`*.LC1'                        :cortex_a8_load_store_1
;;	  4-->    63 [r7]=r3                           :cortex_a8_load_store_1
;;	  4-->   307 sl=r4                             :cortex_a8_default
;;	  5-->    57 [r7+0x20]=r3                      :cortex_a8_load_store_1
;;	  6-->   215 r7=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  6-->   397 pc=L325                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 6
;;   new head = 385
;;   new tail = 397

;;   ======================================================
;;   -- basic block 7 from 69 to 71 -- after reload
;;   ======================================================

;;	  0-->    69 r3=zxn([r6])                      :cortex_a8_load_store_1
;;	  1-->    68 r0=[r4+0x18]                      :cortex_a8_load_store_1
;;	  2-->    70 cc=cmp(r3,0x30)                   :cortex_a8_default
;;	  4-->   362 [sp+0x10]=r0                      :cortex_a8_load_store_1
;;	  4-->    71 pc={(cc!=0x0)?L109:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 69
;;   new tail = 71

;;   ======================================================
;;   -- basic block 8 from 381 to 78 -- after reload
;;   ======================================================

;;	  0-->   363 r2=[sp+0x10]                      :cortex_a8_load_store_1
;;	  0-->   381 r0=0x3                            :cortex_a8_default
;;	  1-->   382 r1=0x0                            :cortex_a8_default
;;	  2-->   383 r2=r2&r0                          :cortex_a8_default
;;	  2-->   384 r3=r3&r1                          :cortex_a8_default
;;	  3-->    77 {cc=cmp(r2|r3,0x0);r2=r2|r3;}     :cortex_a8_default
;;	  5-->    78 pc={(cc!=0x0)?L122:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 381
;;   new tail = 78

;;   ======================================================
;;   -- basic block 9 from 82 to 86 -- after reload
;;   ======================================================

;;	  0-->    82 [r4+0x20]=r2                      :cortex_a8_load_store_1
;;	  1-->    84 [r4+0x8]=r5                       :cortex_a8_load_store_1
;;	  2-->    86 [r4+0xc]=r6                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 82
;;   new tail = 86

;;   ======================================================
;;   -- basic block 10 from 90 to 100 -- after reload
;;   ======================================================

;;	  0-->    90 r3=[r4+0x20]                      :cortex_a8_load_store_1
;;	  3-->    93 r3=r3*0x4+r4                      :cortex_a8_default
;;	  4-->    96 r0=call [[r3+0x38]]               :cortex_a8_issue_branch
;;	 36-->    99 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 38-->   100 pc={(cc==0x0)?L98:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 38
;;   new head = 90
;;   new tail = 100

;;   ======================================================
;;   -- basic block 11 from 103 to 399 -- after reload
;;   ======================================================

;;	  0-->   103 r3=[sl+0x8]                       :cortex_a8_load_store_1
;;	  2-->   104 r3=r5-r3                          :cortex_a8_default
;;	  3-->   106 r5=r5-r3                          :cortex_a8_default
;;	  3-->   105 r6=r6+r3                          :cortex_a8_default
;;	  4-->   399 pc=L325                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 103
;;   new tail = 399

;;   ======================================================
;;   -- basic block 12 from 111 to 112 -- after reload
;;   ======================================================

;;	  0-->   111 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  2-->   112 pc={(cc!=0x0)?L122:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 111
;;   new tail = 112

;;   ======================================================
;;   -- basic block 13 from 377 to 401 -- after reload
;;   ======================================================

;;	  0-->   364 r0=[sp+0x10]                      :cortex_a8_load_store_1
;;	  0-->   377 r2=0x1                            :cortex_a8_default
;;	  1-->   378 r3=0x0                            :cortex_a8_default
;;	  1-->   114 r6=r6+0x1                         :cortex_a8_default
;;	  2-->   379 {cc=cmp(r2+r0,r2);r2=r2+r0;}      :cortex_a8_default
;;	  2-->   115 r5=r5-0x1                         :cortex_a8_default
;;	  3-->   380 r3=ltu(cc,0x0)+r3+r1              :cortex_a8_default
;;	  3-->   119 [r4+0x18]=r2                      :cortex_a8_load_store_1
;;	  4-->   401 pc=L325                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 377
;;   new tail = 401

;;   ======================================================
;;   -- basic block 14 from 129 to 135 -- after reload
;;   ======================================================

;;	  0-->   129 r0=r6                             :cortex_a8_default
;;	  0-->   130 r1=r5                             :cortex_a8_default
;;	  1-->   131 r2=sp+0x1c                        :cortex_a8_default
;;	  1-->   343 [r4+0x18]=fp                      :cortex_a8_load_store_1
;;	  2-->   344 [r4+0x1c]=r9                      :cortex_a8_load_store_1
;;	  3-->   132 r0=call [`decompress_method']     :cortex_a8_issue_branch
;;	 35-->   134 {cc=cmp(r0,0x0);ip=r0;}           :cortex_a8_default
;;	 37-->   135 pc={(cc==0x0)?L163:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 37
;;   new head = 129
;;   new tail = 135

;;   ======================================================
;;   -- basic block 15 from 138 to 151 -- after reload
;;   ======================================================

;;	  0-->   365 r1=`error'                        :cortex_a8_load_store_1
;;	  0-->   138 r2=0x0                            :cortex_a8_default
;;	  1-->   141 [sp+0x4]=r7                       :cortex_a8_load_store_1
;;	  1-->   144 r0=r6                             :cortex_a8_default
;;	  2-->   139 [sp]=r2                           :cortex_a8_load_store_1
;;	  3-->   143 [sp+0x8]=r1                       :cortex_a8_load_store_1
;;	  3-->   145 r1=r5                             :cortex_a8_default
;;	  4-->   147 r3=`flush_buffer'                 :cortex_a8_load_store_1
;;	  5-->   148 r0=call [ip]                      :cortex_a8_issue_branch
;;	 37-->   150 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 39-->   151 pc={(cc==0x0)?L198:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 39
;;   new head = 138
;;   new tail = 151

;;   ======================================================
;;   -- basic block 16 from 154 to 403 -- after reload
;;   ======================================================

;;	  0-->   154 r3=[r4]                           :cortex_a8_load_store_1
;;	  2-->   155 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   366 (!cc) r2=`*.LC3'                  :cortex_a8_load_store_1
;;	  7-->   160 (!cc) [r4]=r2                     :cortex_a8_load_store_1
;;	  7-->   403 pc=L198                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 154
;;   new tail = 403

;;   ======================================================
;;   -- basic block 17 from 165 to 167 -- after reload
;;   ======================================================

;;	  0-->   165 r3=[sp+0x1c]                      :cortex_a8_load_store_1
;;	  2-->   166 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   167 pc={(cc==0x0)?L188:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 165
;;   new tail = 167

;;   ======================================================
;;   -- basic block 18 from 170 to 172 -- after reload
;;   ======================================================

;;	  0-->   170 r2=[r4]                           :cortex_a8_load_store_1
;;	  2-->   171 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  4-->   172 pc={(cc!=0x0)?L198:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 170
;;   new tail = 172

;;   ======================================================
;;   -- basic block 19 from 177 to 405 -- after reload
;;   ======================================================

;;	  0-->   177 r0=const(`*.LANCHOR0'+0x78)       :cortex_a8_load_store_1
;;	  0-->   178 r1=0x40                           :cortex_a8_default
;;	  1-->   179 r2=`*.LC4'                        :cortex_a8_load_store_1
;;	  2-->   181 r0=call [`snprintf']              :cortex_a8_issue_branch
;;	  2-->   367 r3=const(`*.LANCHOR0'+0x78)       :cortex_a8_load_store_1
;;	  5-->   185 [r4]=r3                           :cortex_a8_load_store_1
;;	  5-->   405 pc=L198                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 177
;;   new tail = 405

;;   ======================================================
;;   -- basic block 20 from 191 to 197 -- after reload
;;   ======================================================

;;	  0-->   191 r3=[r4]                           :cortex_a8_load_store_1
;;	  2-->   192 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  2-->   197 (!cc) [r4]=r8                     :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 191
;;   new tail = 197

;;   ======================================================
;;   -- basic block 21 from 201 to 203 -- after reload
;;   ======================================================

;;	  0-->   201 r3=[r4+0x20]                      :cortex_a8_load_store_1
;;	  2-->   202 cc=cmp(r3,0x7)                    :cortex_a8_default
;;	  4-->   203 pc={(cc==0x0)?L213:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 201
;;   new tail = 203

;;   ======================================================
;;   -- basic block 22 from 206 to 212 -- after reload
;;   ======================================================

;;	  0-->   206 r3=[r4]                           :cortex_a8_load_store_1
;;	  2-->   207 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  2-->   212 (!cc) [r4]=r8                     :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 206
;;   new tail = 212

;;   ======================================================
;;   -- basic block 23 from 216 to 368 -- after reload
;;   ======================================================

;;	  0-->   216 ip=[r7]                           :cortex_a8_load_store_1
;;	  1-->   369 r2=[sp+0x10]                      :cortex_a8_load_store_1
;;	  2-->   222 r5=r5-ip                          :cortex_a8_default
;;	  2-->   221 r6=r6+ip                          :cortex_a8_default
;;	  3-->   375 {cc=cmp(r2+ip,r2);r0=r2+ip;}      :cortex_a8_default
;;	  4-->   376 r1=ltu(cc,0x0)+r3+0x0             :cortex_a8_default
;;	  4-->   368 [r4+0x18]=r0                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 216
;;   new tail = 368

;;   ======================================================
;;   -- basic block 24 from 230 to 238 -- after reload
;;   ======================================================

;;	  0-->   230 r2=[r4]                           :cortex_a8_load_store_1
;;	  0-->   372 {r3=r5!=0x0;clobber cc;}          :cortex_a8_default
;;	  2-->   373 cc=cmp(r2,0x0)                    :cortex_a8_default
;;	  3-->   374 r3={(cc==0x0)?r3:0x0}             :cortex_a8_default
;;	  4-->   237 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  6-->   238 pc={(cc!=0x0)?L225:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 230
;;   new tail = 238

;;   ======================================================
;;   -- basic block 25 from 324 to 407 -- after reload
;;   ======================================================

;;	  0-->   324 r6=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->   251 r8=0x100100                       :cortex_a8_load_store_1
;;	  2-->   253 r7=0x200200                       :cortex_a8_load_store_1
;;	  3-->   241 r4=[pre r6+=0xb8]                 :cortex_a8_load_store_1
;;	  6-->   242 r5=[r4]                           :cortex_a8_load_store_1
;;	  6-->   407 pc=L266                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 6
;;   new head = 324
;;   new tail = 407

;;   ======================================================
;;   -- basic block 26 from 247 to 265 -- after reload
;;   ======================================================

;;	  0-->   247 r3=[r4+0x4]                       :cortex_a8_load_store_1
;;	  1-->   248 r2=[r4]                           :cortex_a8_load_store_1
;;	  4-->   249 [r2+0x4]=r3                       :cortex_a8_load_store_1
;;	  5-->   250 [r3]=r2                           :cortex_a8_load_store_1
;;	  6-->   252 [r4]=r8                           :cortex_a8_load_store_1
;;	  7-->   256 r1=[r4+0xc]                       :cortex_a8_load_store_1
;;	  8-->   254 [r4+0x4]=r7                       :cortex_a8_load_store_1
;;	  9-->   255 r0=[r4+0x8]                       :cortex_a8_load_store_1
;;	 10-->   257 r0=call [`do_utime']              :cortex_a8_issue_branch
;;	 10-->   258 r0=[r4+0x8]                       :cortex_a8_load_store_1
;;	 11-->   259 call [`kfree']                    :cortex_a8_issue_branch
;;	 11-->   260 r0=r4                             :cortex_a8_default
;;	 12-->   261 call [`kfree']                    :cortex_a8_issue_branch
;;	 12-->   264 r4=r5                             :cortex_a8_default
;;	 13-->   265 r5=[r5]                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 13
;;   new head = 247
;;   new tail = 265

;;   ======================================================
;;   -- basic block 27 from 271 to 272 -- after reload
;;   ======================================================

;;	  0-->   271 cc=cmp(r4,r6)                     :cortex_a8_default
;;	  0-->   303 sl=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->   272 pc={(cc!=0x0)?L268:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 271
;;   new tail = 272

;;   ======================================================
;;   -- basic block 28 from 275 to 393 -- after reload
;;   ======================================================

;;	  0-->   275 r0=[sl+0x74]                      :cortex_a8_load_store_1
;;	  1-->   276 call [`kfree']                    :cortex_a8_issue_branch
;;	  1-->   278 r0=[sl+0x70]                      :cortex_a8_load_store_1
;;	  2-->   279 call [`kfree']                    :cortex_a8_issue_branch
;;	  2-->   281 r0=[sl+0x4]                       :cortex_a8_load_store_1
;;	  3-->   282 call [`kfree']                    :cortex_a8_issue_branch
;;	  3-->   289 r0=[sl]                           :cortex_a8_load_store_1
;;	  4-->   295 use r0                            :nothing
;;	  4-->   393 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 4
;;   new head = 275
;;   new tail = 393





unpack_to_rootfs

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={33d,29u} r1={27d,13u} r2={29d,23u} r3={39d,31u} r4={5d,36u,8d} r5={7d,12u} r6={7d,12u} r7={4d,14u,3d} r8={3d,5u} r9={2d,3u} r10={3d,7u,1d} r11={2d,3u} r12={16d,5u} r13={3d,54u,1d} r14={15d,2u} r15={14d} r16={14d} r17={14d} r18={14d} r19={14d} r20={14d} r21={14d} r22={14d} r23={14d} r24={35d,21u} r27={14d} r28={14d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={14d} r38={14d} r39={14d} r40={14d} r41={14d} r42={14d} r43={14d} r44={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} r77={14d} r78={14d} r79={14d} r80={14d} r81={14d} r82={14d} r83={14d} r84={14d} r85={14d} r86={14d} r87={14d} r88={14d} r89={14d} r90={14d} r91={14d} r92={14d} r93={14d} r94={14d} r95={14d} r96={14d} r97={14d} r98={14d} r99={14d} r100={14d} r101={14d} r102={14d} r103={14d} r104={14d} r105={14d} r106={14d} r107={14d} r108={14d} r109={14d} r110={14d} r111={14d} r112={14d} r113={14d} r114={14d} r115={14d} r116={14d} r117={14d} r118={14d} r119={14d} r120={14d} r121={14d} r122={14d} r123={14d} r124={14d} r125={14d} r126={14d} r127={14d} 
;;    total ref usage 2053{1770d,270u,13e} in 169{155 regular + 14 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 4 13 2 ("found") NOTE_INSN_DELETED_LABEL 66)

(note 13 7 16 2 NOTE_INSN_DELETED)

(note 16 13 22 2 ("found") NOTE_INSN_DELETED_LABEL 67)

(note 22 16 25 2 NOTE_INSN_DELETED)

(note 25 22 389 2 ("found") NOTE_INSN_DELETED_LABEL 68)

(insn/f:TI 389 25 9 2 init/initramfs.c:415 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 11 fp)
            (expr_list:REG_DEAD (reg:SI 10 sl)
                (expr_list:REG_DEAD (reg:SI 9 r9)
                    (expr_list:REG_DEAD (reg:SI 8 r8)
                        (expr_list:REG_DEAD (reg:SI 7 r7)
                            (expr_list:REG_DEAD (reg:SI 6 r6)
                                (expr_list:REG_DEAD (reg:SI 5 r5)
                                    (expr_list:REG_DEAD (reg:SI 4 r4)
                                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                                    (set/f (reg/f:SI 13 sp)
                                                        (plus:SI (reg/f:SI 13 sp)
                                                            (const_int -36 [0xffffffffffffffdc])))
                                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                        (reg:SI 4 r4))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 4 [0x4])) [0 S4 A32])
                                                        (reg:SI 5 r5))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 8 [0x8])) [0 S4 A32])
                                                        (reg:SI 6 r6))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 12 [0xc])) [0 S4 A32])
                                                        (reg:SI 7 r7))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 16 [0x10])) [0 S4 A32])
                                                        (reg:SI 8 r8))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 20 [0x14])) [0 S4 A32])
                                                        (reg:SI 9 r9))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 24 [0x18])) [0 S4 A32])
                                                        (reg:SI 10 sl))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 28 [0x1c])) [0 S4 A32])
                                                        (reg:SI 11 fp))
                                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                (const_int 32 [0x20])) [0 S4 A32])
                                                        (reg:SI 14 lr))
                                                ])
                                            (nil))))))))))))

(insn:TI 9 389 390 2 include/linux/slab_def.h:122 (set (reg/f:SI 4 r4 [156])
        (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
        (nil)))

(insn/f:TI 390 9 391 2 init/initramfs.c:415 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -36 [0xffffffffffffffdc]))) 4 {*arm_addsi3} (nil))

(note 391 390 2 2 NOTE_INSN_PROLOGUE_END)

(insn 2 391 3 2 init/initramfs.c:415 (set (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
        (reg:SI 0 r0 [ buf ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ buf ])
        (nil)))

(insn:TI 3 2 11 2 init/initramfs.c:415 (set (reg/v:SI 5 r5 [orig:155 len ] [155])
        (reg:SI 1 r1 [ len ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ len ])
        (nil)))

(insn 11 3 10 2 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 10 11 12 2 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 28 [0x1c])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                    (const_int 28 [0x1c]))) [0 <variable>.cs_cachep+0 S4 A32])
        (nil)))

(call_insn:TI 12 10 14 2 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 14 12 20 2 init/initramfs.c:421 (set (reg/f:SI 7 r7 [157])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 20 14 15 2 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 15 20 19 2 init/initramfs.c:421 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 19 15 21 2 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 92 [0x5c])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                    (const_int 92 [0x5c]))) [0 <variable>.cs_cachep+0 S4 A32])
        (nil)))

(call_insn:TI 21 19 29 2 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 29 21 24 2 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 24 29 28 2 init/initramfs.c:422 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 28 24 30 2 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 84 [0x54])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [156])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                        (const_int 84 [0x54]))) [0 <variable>.cs_cachep+0 S4 A32])
            (nil))))

(call_insn:TI 30 28 36 2 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 36 30 37 2 init/initramfs.c:425 (set (reg/f:SI 3 r3 [orig:163 header_buf ] [163])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 4 [0x4]))) [0 header_buf+0 S4 A32])
            (nil))))

(insn:TI 37 36 34 2 init/initramfs.c:425 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:163 header_buf ] [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:163 header_buf ] [163])
        (nil)))

(insn:TI 34 37 38 2 init/initramfs.c:423 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 116 [0x74])) [0 name_buf+0 S4 A32])
        (reg/v/f:SI 0 r0 [orig:142 ret ] [142])) 167 {*arm_movsi_insn} (nil))

(jump_insn 38 34 39 2 init/initramfs.c:425 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 39 38 41 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 41 39 42 3 init/initramfs.c:425 discrim 1 (set (reg/f:SI 3 r3 [orig:165 symlink_buf ] [165])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 112 [0x70]))) [0 symlink_buf+0 S4 A32])
            (nil))))

(insn:TI 42 41 43 3 init/initramfs.c:425 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:165 symlink_buf ] [165])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:165 symlink_buf ] [165])
        (nil)))

(jump_insn:TI 43 42 44 3 init/initramfs.c:425 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [0.0%] 
;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
(note 44 43 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 45 44 46 4 init/initramfs.c:425 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:142 ret ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:142 ret ] [142])
        (nil)))

(jump_insn:TI 46 45 47 4 init/initramfs.c:425 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 2 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
;; Pred edge  3 [0.0%] 
;; Pred edge  4 [0.0%]  (fallthru)
(code_label 47 46 48 5 69 "" [2 uses])

(note 48 47 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 50 48 51 5 init/initramfs.c:426 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1151e780>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1151e780>)
        (nil)))

(call_insn:TI 51 50 52 5 init/initramfs.c:426 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a86f00 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_NORETURN (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 5 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 52 51 53)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 53 52 54 6 70 "" [1 uses])

(note 54 53 128 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 128 54 175 6 NOTE_INSN_DELETED)

(note 175 128 142 6 NOTE_INSN_DELETED)

(note 142 175 159 6 NOTE_INSN_DELETED)

(note 159 142 386 6 NOTE_INSN_DELETED)

(insn:TI 386 159 385 6 init/initramfs.c:429 (set (reg:SI 3 r3 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 385 386 229 6 init/initramfs.c:429 (set (reg:SI 2 r2 [170])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 229 385 60 6 init/initramfs.c:431 discrim 1 (set (reg/f:SI 4 r4 [252])
        (reg/f:SI 7 r7 [157])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 60 229 342 6 init/initramfs.c:429 (set (mem/c/i:DI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 2 r2 [170])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 342 60 341 6 init/initramfs.c:446 (set (reg:SI 9 r9 [orig:265+4 ] [265])
        (reg:SI 3 r3 [orig:1+4 ] [1])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:1+4 ] [1])
        (nil)))

(insn 341 342 56 6 init/initramfs.c:446 (set (reg:SI 11 fp [264])
        (reg:SI 2 r2 [266])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [266])
        (nil)))

(insn:TI 56 341 211 6 init/initramfs.c:428 (set (reg:SI 3 r3 [168])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 211 56 63 6 init/initramfs.c:16 (set (reg/f:SI 8 r8 [256])
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)
        (nil)))

(insn:TI 63 211 307 6 init/initramfs.c:430 (set (mem/f/c/i:SI (reg/f:SI 7 r7 [157]) [0 message+0 S4 A32])
        (reg:SI 3 r3 [168])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 307 63 57 6 init/initramfs.c:382 discrim 1 (set (reg/f:SI 10 sl [260])
        (reg/f:SI 4 r4 [252])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 57 307 215 6 init/initramfs.c:428 (set (mem/c/i:SI (plus:SI (reg/f:SI 7 r7 [157])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 3 r3 [168])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 7 r7 [157])
        (expr_list:REG_DEAD (reg:SI 3 r3 [168])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(insn:TI 215 57 397 6 init/initramfs.c:464 (set (reg/f:SI 7 r7 [255])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(jump_insn 397 215 398 6 init/initramfs.c:431 (set (pc)
        (label_ref 325)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 398 397 225)

;; Start of basic block ( 24) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  24 [91.0%] 
(code_label 225 398 66 7 79 "" [1 uses])

(note 66 225 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 69 66 68 7 init/initramfs.c:433 (set (reg:SI 3 r3 [orig:151 D.26144 ] [151])
        (zero_extend:SI (mem:QI (reg/v/f:SI 6 r6 [orig:154 buf ] [154]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 68 69 70 7 init/initramfs.c:432 (set (reg:DI 0 r0)
        (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
        (nil)))

(insn:TI 70 68 362 7 init/initramfs.c:433 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:151 D.26144 ] [151])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 362 70 71 7 init/initramfs.c:432 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(jump_insn 71 362 72 7 init/initramfs.c:433 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 7 -> ( 8 12)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [28.0%]  (fallthru)
;; Succ edge  12 [72.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  7 [28.0%]  (fallthru)
(note 72 71 75 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 75 72 76 8 NOTE_INSN_DELETED)

(note 76 75 363 8 NOTE_INSN_DELETED)

(insn:TI 363 76 381 8 init/initramfs.c:433 discrim 1 (set (reg:DI 2 r2 [174])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) 163 {*arm_movdi} (nil))

(insn 381 363 382 8 init/initramfs.c:433 discrim 1 (set (reg:SI 0 r0 [175])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (nil))

(insn:TI 382 381 383 8 init/initramfs.c:433 discrim 1 (set (reg:SI 1 r1 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 383 382 384 8 init/initramfs.c:433 discrim 1 (set (reg:SI 2 r2 [174])
        (and:SI (reg:SI 2 r2 [174])
            (reg:SI 0 r0 [175]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [175])
        (nil)))

(insn 384 383 77 8 init/initramfs.c:433 discrim 1 (set (reg:SI 3 r3 [+4 ])
        (and:SI (reg:SI 3 r3 [+4 ])
            (reg:SI 1 r1 [+4 ]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn:TI 77 384 78 8 init/initramfs.c:433 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [174])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [176])
                (ior:SI (reg:SI 2 r2 [174])
                    (reg:SI 3 r3 [+4 ])))
        ]) 91 {*iorsi3_compare0} (expr_list:REG_DEAD (reg:SI 3 r3 [+4 ])
        (nil)))

(jump_insn:TI 78 77 79 8 init/initramfs.c:433 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 122)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 8 -> ( 9 14)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [0.0%]  (fallthru)
;; Succ edge  14 [100.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [0.0%]  (fallthru)
(note 79 78 82 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 82 79 84 9 init/initramfs.c:434 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 2 r2 [176])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [176])
        (nil)))

(insn:TI 84 82 86 9 init/initramfs.c:379 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg/v:SI 5 r5 [orig:155 len ] [155])) 167 {*arm_movsi_insn} (nil))

(insn:TI 86 84 98 9 init/initramfs.c:380 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg/v/f:SI 6 r6 [orig:154 buf ] [154])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 10) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  10 [86.0%]  (dfs_back)
(code_label 98 86 87 10 74 "" [1 uses])

(note 87 98 92 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 92 87 95 10 NOTE_INSN_DELETED)

(note 95 92 97 10 NOTE_INSN_DELETED)

(note 97 95 90 10 NOTE_INSN_DELETED)

(insn:TI 90 97 93 10 init/initramfs.c:382 discrim 1 (set (reg:SI 3 r3 [orig:183 state ] [183])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 32 [0x20]))) [0 state+0 S4 A32])
            (nil))))

(insn:TI 93 90 96 10 init/initramfs.c:382 discrim 1 (set (reg:SI 3 r3 [186])
        (plus:SI (mult:SI (reg:SI 3 r3 [orig:183 state ] [183])
                (const_int 4 [0x4]))
            (reg/f:SI 4 r4 [252]))) 270 {*arith_shiftsi} (nil))

(call_insn:TI 96 93 99 10 init/initramfs.c:382 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [186])
                                (const_int 56 [0x38])) [0 actions S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (expr_list:REG_DEAD (reg:SI 3 r3 [186])
        (nil))
    (nil))

(insn:TI 99 96 100 10 init/initramfs.c:382 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 100 99 101 10 init/initramfs.c:382 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 98)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 10 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [86.0%]  (dfs_back)
;; Succ edge  11 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5] 6 [r6]
;; live  kill	

;; Pred edge  10 [14.0%]  (fallthru,loop_exit)
(note 101 100 103 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 103 101 104 11 init/initramfs.c:384 (set (reg:SI 3 r3 [orig:190 count ] [190])
        (mem/c/i:SI (plus:SI (reg/f:SI 10 sl [260])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 10 sl [260])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn:TI 104 103 106 11 init/initramfs.c:384 (set (reg:SI 3 r3 [orig:141 D.26367 ] [141])
        (minus:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
            (reg:SI 3 r3 [orig:190 count ] [190]))) 28 {*arm_subsi3_insn} (nil))

(insn:TI 106 104 105 11 init/initramfs.c:437 (set (reg/v:SI 5 r5 [orig:155 len ] [155])
        (minus:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
            (reg:SI 3 r3 [orig:141 D.26367 ] [141]))) 28 {*arm_subsi3_insn} (nil))

(insn 105 106 399 11 init/initramfs.c:436 (set (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
        (plus:SI (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
            (reg:SI 3 r3 [orig:141 D.26367 ] [141]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:141 D.26367 ] [141])
        (nil)))

(jump_insn:TI 399 105 400 11 init/initramfs.c:438 (set (pc)
        (label_ref 325)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 400 399 109)

;; Start of basic block ( 7) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [72.0%] 
(code_label 109 400 110 12 72 "" [1 uses])

(note 110 109 111 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 111 110 112 12 init/initramfs.c:440 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:151 D.26144 ] [151])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:151 D.26144 ] [151])
        (nil)))

(jump_insn:TI 112 111 113 12 init/initramfs.c:440 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 122)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 140 [0x8c])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [98.6%]  (fallthru)
;; Succ edge  14 [1.4%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  12 [98.6%]  (fallthru)
(note 113 112 364 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 364 113 377 13 init/initramfs.c:443 (set (reg:DI 0 r0)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) 163 {*arm_movdi} (nil))

(insn 377 364 378 13 init/initramfs.c:443 (set (reg:SI 2 r2 [193])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 378 377 114 13 init/initramfs.c:443 (set (reg:SI 3 r3 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 114 378 379 13 init/initramfs.c:441 (set (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
        (plus:SI (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 379 114 115 13 init/initramfs.c:443 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2 [193])
                        (reg:SI 0 r0))
                    (reg:SI 2 r2 [193])))
            (set (reg:SI 2 r2 [193])
                (plus:SI (reg:SI 2 r2 [193])
                    (reg:SI 0 r0)))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 115 379 380 13 init/initramfs.c:442 (set (reg/v:SI 5 r5 [orig:155 len ] [155])
        (plus:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn:TI 380 115 119 13 init/initramfs.c:443 (set (reg:SI 3 r3 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 3 r3 [+4 ])
                (reg:SI 1 r1 [+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
            (nil))))

(insn 119 380 401 13 init/initramfs.c:443 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 2 r2 [193])) 163 {*arm_movdi} (nil))

(jump_insn:TI 401 119 402 13 init/initramfs.c:444 (set (pc)
        (label_ref 325)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 402 401 122)

;; Start of basic block ( 12 8) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [1.4%] 
;; Pred edge  8 [100.0%] 
(code_label 122 402 123 14 73 "" [2 uses])

(note 123 122 133 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 133 123 129 14 NOTE_INSN_DELETED)

(insn:TI 129 133 130 14 init/initramfs.c:447 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:154 buf ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 130 129 131 14 init/initramfs.c:447 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:155 len ] [155])) 167 {*arm_movsi_insn} (nil))

(insn:TI 131 130 343 14 init/initramfs.c:447 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 28 [0x1c]))
        (nil)))

(insn 343 131 344 14 init/initramfs.c:446 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 24 [0x18])) [0 this_header+0 S4 A64])
        (reg:SI 11 fp [264])) 167 {*arm_movsi_insn} (nil))

(insn:TI 344 343 132 14 init/initramfs.c:446 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 28 [0x1c])) [0 this_header+4 S4 A32])
        (reg:SI 9 r9 [orig:265+4 ] [265])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 132 344 134 14 init/initramfs.c:447 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("decompress_method") [flags 0x41] <function_decl 0x114ad900 decompress_method>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 134 132 135 14 init/initramfs.c:448 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 12 ip [orig:146 decompress ] [146])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 135 134 136 14 init/initramfs.c:448 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 163)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 14 -> ( 15 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  15 [69.8%]  (fallthru)
;; Succ edge  17 [30.2%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  14 [69.8%]  (fallthru)
(note 136 135 149 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 149 136 365 15 NOTE_INSN_DELETED)

(insn:TI 365 149 138 15 init/initramfs.c:449 (set (reg:SI 1 r1)
        (symbol_ref:SI ("error") [flags 0x3] <function_decl 0x11487300 error>)) 167 {*arm_movsi_insn} (nil))

(insn 138 365 141 15 init/initramfs.c:449 (set (reg:SI 2 r2 [198])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 141 138 144 15 init/initramfs.c:449 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 7 r7 [255])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 144 141 139 15 init/initramfs.c:449 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:154 buf ] [154])) 167 {*arm_movsi_insn} (nil))

(insn:TI 139 144 143 15 init/initramfs.c:449 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 2 r2 [198])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 143 139 145 15 init/initramfs.c:449 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EQUAL (symbol_ref:SI ("error") [flags 0x3] <function_decl 0x11487300 error>)
            (nil))))

(insn 145 143 147 15 init/initramfs.c:449 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:155 len ] [155])) 167 {*arm_movsi_insn} (nil))

(insn:TI 147 145 148 15 init/initramfs.c:449 (set (reg:SI 3 r3)
        (symbol_ref:SI ("flush_buffer") [flags 0x3] <function_decl 0x114ad800 flush_buffer>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("flush_buffer") [flags 0x3] <function_decl 0x114ad800 flush_buffer>)
        (nil)))

(call_insn:TI 148 147 150 15 init/initramfs.c:449 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/v/f:SI 12 ip [orig:146 decompress ] [146]) [0 S4 A32])
                    (const_int 16 [0x10])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 249 {*call_value_reg_armv5} (expr_list:REG_DEAD (reg/v/f:SI 12 ip [orig:146 decompress ] [146])
        (expr_list:REG_DEAD (reg:SI 3 r3)
            (expr_list:REG_DEAD (reg:SI 2 r2)
                (expr_list:REG_DEAD (reg:SI 1 r1)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 150 148 151 15 init/initramfs.c:451 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 151 150 152 15 init/initramfs.c:451 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 15 -> ( 16 21)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  16 [0.0%]  (fallthru)
;; Succ edge  21 [100.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  15 [0.0%]  (fallthru)
(note 152 151 154 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 154 152 155 16 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:202 message ] [202])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn:TI 155 154 366 16 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:202 message ] [202])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:202 message ] [202])
        (nil)))

(insn:TI 366 155 160 16 init/initramfs.c:16 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2)
            (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x115a92d0>))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 160 366 403 16 init/initramfs.c:16 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
            (reg:SI 2 r2))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (nil))))

(jump_insn 403 160 404 16 (set (pc)
        (label_ref 198)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 404 403 163)

;; Start of basic block ( 14) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [30.2%] 
(code_label 163 404 164 17 75 "" [1 uses])

(note 164 163 165 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 165 164 166 17 init/initramfs.c:453 (set (reg/f:SI 3 r3 [orig:149 compress_name.420 ] [149])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 compress_name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 166 165 167 17 init/initramfs.c:453 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:149 compress_name.420 ] [149])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 167 166 168 17 init/initramfs.c:453 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 188)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 17 -> ( 18 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)
;; Succ edge  20 [0.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  17 [100.0%]  (fallthru)
(note 168 167 170 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 170 168 171 18 init/initramfs.c:454 (set (reg/f:SI 2 r2 [orig:206 message ] [206])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn:TI 171 170 172 18 init/initramfs.c:454 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:206 message ] [206])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:206 message ] [206])
        (nil)))

(jump_insn:TI 172 171 173 18 init/initramfs.c:454 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
            (nil))))
;; End of basic block 18 -> ( 19 21)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  19 [6.7%]  (fallthru)
;; Succ edge  21 [93.3%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  18 [6.7%]  (fallthru)
(note 173 172 177 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 177 173 178 19 init/initramfs.c:455 (set (reg:SI 0 r0)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 120 [0x78])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 120 [0x78])))
        (nil)))

(insn 178 177 179 19 init/initramfs.c:455 (set (reg:SI 1 r1)
        (const_int 64 [0x40])) 167 {*arm_movsi_insn} (nil))

(insn:TI 179 178 181 19 init/initramfs.c:455 (set (reg:SI 2 r2)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114fc3c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114fc3c0>)
        (nil)))

(call_insn:TI 181 179 367 19 init/initramfs.c:455 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("snprintf") [flags 0x41] <function_decl 0x5115e680 snprintf>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 367 181 185 19 init/initramfs.c:458 (set (reg:SI 3 r3)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 120 [0x78])))) 167 {*arm_movsi_insn} (nil))

(insn:TI 185 367 405 19 init/initramfs.c:458 (set (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 120 [0x78])))
            (nil))))

(jump_insn 405 185 406 19 (set (pc)
        (label_ref 198)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 406 405 188)

;; Start of basic block ( 17) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  17 [0.0%] 
(code_label 188 406 189 20 77 "" [1 uses])

(note 189 188 191 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 191 189 192 20 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:214 message ] [214])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn:TI 192 191 197 20 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:214 message ] [214])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:214 message ] [214])
        (nil)))

(insn 197 192 198 20 init/initramfs.c:16 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
            (reg/f:SI 8 r8 [256]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)
            (nil))))
;; End of basic block 20 -> ( 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 16 18 20 15 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  16 [100.0%] 
;; Pred edge  18 [93.3%] 
;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  15 [100.0%] 
;; Pred edge  19 [100.0%] 
(code_label 198 197 199 21 76 "" [4 uses])

(note 199 198 201 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 201 199 202 21 init/initramfs.c:462 (set (reg:SI 3 r3 [orig:218 state ] [218])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 32 [0x20]))) [0 state+0 S4 A32])
            (nil))))

(insn:TI 202 201 203 21 init/initramfs.c:462 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:218 state ] [218])
            (const_int 7 [0x7]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:218 state ] [218])
        (nil)))

(jump_insn:TI 203 202 204 21 init/initramfs.c:462 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 213)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  22 [0.0%]  (fallthru)
;; Succ edge  23 [100.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  21 [0.0%]  (fallthru)
(note 204 203 206 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 206 204 207 22 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:220 message ] [220])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn:TI 207 206 212 22 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:220 message ] [220])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:220 message ] [220])
        (nil)))

(insn 212 207 213 22 init/initramfs.c:16 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
            (reg/f:SI 8 r8 [256]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11505e40>)
            (nil))))
;; End of basic block 22 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 21 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  21 [100.0%] 
;; Pred edge  22 [100.0%]  (fallthru)
(code_label 213 212 214 23 78 "" [1 uses])

(note 214 213 218 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 218 214 216 23 NOTE_INSN_DELETED)

(insn:TI 216 218 369 23 init/initramfs.c:464 (set (reg:SI 12 ip [orig:148 my_inptr.423 ] [148])
        (mem/c/i:SI (reg/f:SI 7 r7 [255]) [0 my_inptr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 7 r7 [255]) [0 my_inptr+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 my_inptr+0 S4 A32])
            (nil))))

(insn:TI 369 216 222 23 init/initramfs.c:464 (set (reg:DI 2 r2)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-16 S8 A64])) 163 {*arm_movdi} (nil))

(insn:TI 222 369 221 23 init/initramfs.c:466 (set (reg/v:SI 5 r5 [orig:155 len ] [155])
        (minus:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
            (reg:SI 12 ip [orig:148 my_inptr.423 ] [148]))) 28 {*arm_subsi3_insn} (nil))

(insn 221 222 375 23 init/initramfs.c:465 (set (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
        (plus:SI (reg/v/f:SI 6 r6 [orig:154 buf ] [154])
            (reg:SI 12 ip [orig:148 my_inptr.423 ] [148]))) 4 {*arm_addsi3} (nil))

(insn:TI 375 221 376 23 init/initramfs.c:464 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2)
                        (reg:SI 12 ip [orig:148 my_inptr.423 ] [148]))
                    (reg:SI 2 r2)))
            (set (reg:SI 0 r0)
                (plus:SI (reg:SI 2 r2)
                    (reg:SI 12 ip [orig:148 my_inptr.423 ] [148])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 12 ip [orig:148 my_inptr.423 ] [148])
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (nil))))

(insn:TI 376 375 368 23 init/initramfs.c:464 (set (reg:SI 1 r1 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 3 r3 [+4 ])
                (const_int 0 [0x0])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [+4 ])
            (nil))))

(insn 368 376 220 23 init/initramfs.c:464 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [252])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(note 220 368 325 23 NOTE_INSN_DELETED)
;; End of basic block 23 -> ( 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 23 6 11 13) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
;; Pred edge  11 [100.0%] 
;; Pred edge  13 [100.0%] 
(code_label 325 220 323 24 84 "" [3 uses])

(note 323 325 226 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 226 323 227 24 NOTE_INSN_DELETED)

(note 227 226 231 24 NOTE_INSN_DELETED)

(note 231 227 232 24 NOTE_INSN_DELETED)

(note 232 231 234 24 NOTE_INSN_DELETED)

(note 234 232 235 24 NOTE_INSN_DELETED)

(note 235 234 230 24 NOTE_INSN_DELETED)

(insn:TI 230 235 372 24 init/initramfs.c:431 discrim 1 (set (reg/f:SI 2 r2 [orig:231 message ] [231])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [252]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn 372 230 373 24 init/initramfs.c:431 discrim 1 (parallel [
            (set (reg:SI 3 r3 [235])
                (ne:SI (reg/v:SI 5 r5 [orig:155 len ] [155])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 373 372 374 24 init/initramfs.c:431 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 2 r2 [orig:231 message ] [231])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:231 message ] [231])
        (nil)))

(insn:TI 374 373 237 24 init/initramfs.c:431 discrim 1 (set (reg:SI 3 r3 [235])
        (if_then_else:SI (eq:SI (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 3 r3 [235])
            (const_int 0 [0x0]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn:TI 237 374 238 24 init/initramfs.c:431 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [235])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [235])
        (nil)))

(jump_insn:TI 238 237 239 24 init/initramfs.c:431 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 225)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 24 -> ( 7 25)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [91.0%] 
;; Succ edge  25 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  in  	 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  24 [9.0%]  (fallthru,loop_exit)
(note 239 238 324 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 324 239 251 25 init/initramfs.c:110 (set (reg/f:SI 6 r6 [248])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn:TI 251 324 253 25 include/linux/list.h:107 (set (reg:SI 8 r8 [249])
        (const_int 1048832 [0x100100])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1048832 [0x100100])
        (nil)))

(insn:TI 253 251 241 25 include/linux/list.h:108 (set (reg:SI 7 r7 [250])
        (const_int 2097664 [0x200200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2097664 [0x200200])
        (nil)))

(insn:TI 241 253 242 25 init/initramfs.c:110 (set (reg/v/f:SI 4 r4 [orig:135 de ] [135])
        (mem/s/f/j/c:SI (pre_modify:SI (reg/f:SI 6 r6 [248])
                (plus:SI (reg/f:SI 6 r6 [248])
                    (const_int 184 [0xb8]))) [0 dir_list.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 6 r6 [248])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 184 [0xb8]))) [0 dir_list.next+0 S4 A32])
            (nil))))

(insn:TI 242 241 407 25 init/initramfs.c:110 (set (reg/v/f:SI 5 r5 [orig:134 de.751 ] [134])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 407 242 408 25 (set (pc)
        (label_ref 266)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  27 [100.0%] 

(barrier 408 407 268)

;; Start of basic block ( 27) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  27 [0.0%] 
(code_label 268 408 246 26 81 "" [1 uses])

(note 246 268 262 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 262 246 247 26 NOTE_INSN_DELETED)

(insn:TI 247 262 248 26 include/linux/list.h:106 (set (reg/f:SI 3 r3 [orig:139 D.26385 ] [139])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 248 247 249 26 include/linux/list.h:106 (set (reg/f:SI 2 r2 [orig:138 D.26386 ] [138])
        (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 249 248 250 26 include/linux/list.h:88 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:138 D.26386 ] [138])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/f:SI 3 r3 [orig:139 D.26385 ] [139])) 167 {*arm_movsi_insn} (nil))

(insn:TI 250 249 252 26 include/linux/list.h:89 (set (mem/s/f/j:SI (reg/f:SI 3 r3 [orig:139 D.26385 ] [139]) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:138 D.26386 ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:139 D.26385 ] [139])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:138 D.26386 ] [138])
            (nil))))

(insn:TI 252 250 256 26 include/linux/list.h:107 (set (mem/s/f/j:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135]) [0 <variable>.list.next+0 S4 A32])
        (reg:SI 8 r8 [249])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1048832 [0x100100])
        (nil)))

(insn:TI 256 252 254 26 init/initramfs.c:112 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 12 [0xc])) [0 <variable>.mtime+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 254 256 255 26 include/linux/list.h:108 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg:SI 7 r7 [250])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2097664 [0x200200])
        (nil)))

(insn:TI 255 254 257 26 init/initramfs.c:112 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 8 [0x8])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 257 255 258 26 init/initramfs.c:112 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utime") [flags 0x3] <function_decl 0x11487700 do_utime>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 258 257 259 26 init/initramfs.c:113 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 de ] [135])
                (const_int 8 [0x8])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 259 258 260 26 init/initramfs.c:113 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 260 259 261 26 init/initramfs.c:114 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 de ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:135 de ] [135])
        (nil)))

(call_insn:TI 261 260 264 26 init/initramfs.c:114 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 264 261 265 26 init/initramfs.c:110 discrim 2 (set (reg/v/f:SI 4 r4 [orig:135 de ] [135])
        (reg/v/f:SI 5 r5 [orig:134 de.751 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn:TI 265 264 266 26 init/initramfs.c:110 discrim 2 (set (reg/v/f:SI 5 r5 [orig:134 de.751 ] [134])
        (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:134 de.751 ] [134]) [0 <variable>.list.next+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 26 -> ( 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  27 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 26 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  26 [100.0%]  (fallthru,dfs_back)
;; Pred edge  25 [100.0%] 
(code_label 266 265 267 27 80 "" [1 uses])

(note 267 266 271 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 271 267 303 27 init/initramfs.c:110 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:135 de ] [135])
            (reg/f:SI 6 r6 [248]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v/f:SI 4 r4 [orig:135 de ] [135])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 184 [0xb8]))))
        (nil)))

(insn 303 271 272 27 init/initramfs.c:110 (set (reg/f:SI 10 sl [239])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn:TI 272 303 273 27 init/initramfs.c:110 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 268)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 27 -> ( 26 28)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  26 [0.0%] 
;; Succ edge  28 [100.0%]  (fallthru,loop_exit)

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  27 [100.0%]  (fallthru,loop_exit)
(note 273 272 284 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 284 273 275 28 NOTE_INSN_DELETED)

(insn:TI 275 284 276 28 init/initramfs.c:469 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 10 sl [239])
                (const_int 116 [0x74])) [0 name_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 116 [0x74]))) [0 name_buf+0 S4 A32])
        (nil)))

(call_insn:TI 276 275 278 28 init/initramfs.c:469 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 278 276 279 28 init/initramfs.c:470 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 10 sl [239])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 112 [0x70]))) [0 symlink_buf+0 S4 A32])
        (nil)))

(call_insn:TI 279 278 281 28 init/initramfs.c:470 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 281 279 282 28 init/initramfs.c:471 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 10 sl [239])
                (const_int 4 [0x4])) [0 header_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 header_buf+0 S4 A32])
        (nil)))

(call_insn:TI 282 281 289 28 init/initramfs.c:471 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 289 282 295 28 init/initramfs.c:473 (set (reg/i:SI 0 r0)
        (mem/f/c/i:SI (reg/f:SI 10 sl [239]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 295 289 392 28 init/initramfs.c:473 (use (reg/i:SI 0 r0)) -1 (nil))

(note 392 295 393 28 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 393 392 394 28 init/initramfs.c:473 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 28 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 394 393 345)

(note 345 394 361 NOTE_INSN_DELETED)

(note 361 345 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_copy (do_copy)[0:1329] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 109 to 10 -- after reload
;;   ======================================================

;;	  0-->   109 {[--sp]=unspec[r4] 2;use r6;use r7:cortex_a8_load_store_2
;;	  1-->     5 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  4-->     6 r3=[r4+0x8]                       :cortex_a8_load_store_1
;;	  5-->     8 r2=[r4+0x5c]                      :cortex_a8_load_store_1
;;	  7-->     9 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  9-->    10 pc={(ltu(cc,0x0))?L53:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 109
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 15 to 111 -- after reload
;;   ======================================================

;;	  0-->    15 r1=[r4+0xc]                       :cortex_a8_load_store_1
;;	  1-->    14 r0=[r4+0xc0]                      :cortex_a8_load_store_1
;;	  2-->    17 r0=call [`sys_write']             :cortex_a8_issue_branch
;;	  2-->    19 r0=[r4+0xc0]                      :cortex_a8_load_store_1
;;	  3-->    20 r0=call [`sys_close']             :cortex_a8_issue_branch
;;	  3-->    24 r1=[r4+0x6c]                      :cortex_a8_load_store_1
;;	  4-->    23 r0=[r4+0xc4]                      :cortex_a8_load_store_1
;;	  5-->    25 r0=call [`do_utime']              :cortex_a8_issue_branch
;;	  5-->    27 r0=[r4+0xc4]                      :cortex_a8_load_store_1
;;	  6-->    28 call [`kfree']                    :cortex_a8_issue_branch
;;	  6-->    30 r3=[r4+0x5c]                      :cortex_a8_load_store_1
;;	  7-->    39 r8=[r4+0x18]                      :cortex_a8_load_store_1
;;	  7-->   103 ip=0x3                            :cortex_a8_default
;;	  8-->    33 r2=[r4+0xc]                       :cortex_a8_load_store_1
;;	  8-->    50 r0=0x0                            :cortex_a8_default
;;	  9-->    44 r1=[r4+0x8]                       :cortex_a8_load_store_1
;;	  9-->   107 {cc=cmp(r8+r3,r8);r6=r8+r3;}      :cortex_a8_default
;;	 10-->    34 r2=r2+r3                          :cortex_a8_default
;;	 10-->   108 r7=ltu(cc,0x0)+r9+0x0             :cortex_a8_default
;;	 11-->    45 r3=r1-r3                          :cortex_a8_default
;;	 11-->    49 [r4+0x20]=ip                      :cortex_a8_load_store_1
;;	 12-->    35 [r4+0xc]=r2                       :cortex_a8_load_store_1
;;	 13-->    41 [r4+0x18]=r6                      :cortex_a8_load_store_1
;;	 14-->    46 [r4+0x8]=r3                       :cortex_a8_load_store_1
;;	 15-->   111 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 15
;;   new head = 15
;;   new tail = 111

;;   ======================================================
;;   -- basic block 4 from 59 to 113 -- after reload
;;   ======================================================

;;	  0-->    59 r2=r3                             :cortex_a8_default
;;	  0-->    58 r1=[r4+0xc]                       :cortex_a8_load_store_1
;;	  1-->    57 r0=[r4+0xc0]                      :cortex_a8_load_store_1
;;	  2-->    60 r0=call [`sys_write']             :cortex_a8_issue_branch
;;	  2-->    62 r3=[r4+0x8]                       :cortex_a8_load_store_1
;;	  3-->    76 r8=[r4+0x18]                      :cortex_a8_load_store_1
;;	  3-->   102 ip=0x0                            :cortex_a8_default
;;	  4-->    65 r1=[r4+0x5c]                      :cortex_a8_load_store_1
;;	  4-->    82 r0=0x1                            :cortex_a8_default
;;	  5-->    70 r2=[r4+0xc]                       :cortex_a8_load_store_1
;;	  5-->   105 {cc=cmp(r8+r3,r8);r6=r8+r3;}      :cortex_a8_default
;;	  6-->    66 r1=r1-r3                          :cortex_a8_default
;;	  6-->   106 r7=ltu(cc,0x0)+r9+0x0             :cortex_a8_default
;;	  7-->    71 r2=r2+r3                          :cortex_a8_default
;;	  7-->    81 [r4+0x8]=ip                       :cortex_a8_load_store_1
;;	  8-->    67 [r4+0x5c]=r1                      :cortex_a8_load_store_1
;;	  9-->    72 [r4+0xc]=r2                       :cortex_a8_load_store_1
;;	 10-->    78 [r4+0x18]=r6                      :cortex_a8_load_store_1
;;	 10-->    95 use r0                            :nothing
;;	 11-->   113 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 11
;;   new head = 59
;;   new tail = 113





do_copy

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 6[r6] 7[r7] 8[r8] 9[r9] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,7u} r1={12d,6u} r2={12d,7u} r3={10d,11u} r4={2d,28u,11d} r6={3d,4u} r7={3d,4u} r8={3d,8u} r9={3d,4u} r12={7d,2u} r13={2d,10u} r14={6d,2u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={8d,3u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 741{634d,96u,11e} in 51{46 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 109 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 109 2 110 2 init/initramfs.c:337 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 9 r9)
            (expr_list:REG_DEAD (reg:SI 8 r8)
                (expr_list:REG_DEAD (reg:SI 7 r7)
                    (expr_list:REG_DEAD (reg:SI 6 r6)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -24 [0xffffffffffffffe8])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 8 r8))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 9 r9))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 110 109 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 110 6 2 init/initramfs.c:338 (set (reg/f:SI 4 r4 [139])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 8 2 init/initramfs.c:338 (set (reg:SI 3 r3 [orig:137 count.385 ] [137])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn:TI 8 6 9 2 init/initramfs.c:338 (set (reg:SI 2 r2 [orig:136 body_len.386 ] [136])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 92 [0x5c]))) [0 body_len+0 S4 A32])
        (nil)))

(insn:TI 9 8 10 2 init/initramfs.c:338 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:137 count.385 ] [137])
            (reg:SI 2 r2 [orig:136 body_len.386 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 10 9 11 2 init/initramfs.c:338 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9997 [0x270d])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 11 10 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 37 11 15 3 NOTE_INSN_DELETED)

(insn:TI 15 37 14 3 init/initramfs.c:339 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 victim+0 S4 A32])
        (nil)))

(insn:TI 14 15 17 3 init/initramfs.c:339 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
        (nil)))

(call_insn:TI 17 14 19 3 init/initramfs.c:339 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_write") [flags 0x41] <function_decl 0x11464900 sys_write>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 19 17 20 3 init/initramfs.c:340 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
        (nil)))

(call_insn:TI 20 19 24 3 init/initramfs.c:340 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_close") [flags 0x41] <function_decl 0x1145e900 sys_close>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 24 20 23 3 init/initramfs.c:341 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 108 [0x6c]))) [0 mtime+0 S4 A32])
        (nil)))

(insn:TI 23 24 25 3 init/initramfs.c:341 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 196 [0xc4])) [0 vcollected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 196 [0xc4]))) [0 vcollected+0 S4 A32])
        (nil)))

(call_insn:TI 25 23 27 3 init/initramfs.c:341 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utime") [flags 0x3] <function_decl 0x11487700 do_utime>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 27 25 28 3 init/initramfs.c:342 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 196 [0xc4])) [0 vcollected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 196 [0xc4]))) [0 vcollected+0 S4 A32])
        (nil)))

(call_insn:TI 28 27 30 3 init/initramfs.c:342 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 30 28 39 3 init/initramfs.c:343 (set (reg:SI 3 r3 [orig:134 body_len.779 ] [134])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 92 [0x5c]))) [0 body_len+0 S4 A32])
            (nil))))

(insn:TI 39 30 103 3 init/initramfs.c:173 (set (reg:DI 8 r8 [orig:155 this_header ] [155])
        (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
            (nil))))

(insn 103 39 33 3 init/initramfs.c:344 (set (reg:SI 12 ip [162])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn:TI 33 103 50 3 init/initramfs.c:172 (set (reg/f:SI 2 r2 [orig:150 victim ] [150])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 50 33 44 3 init/initramfs.c:345 (set (reg:SI 0 r0 [orig:135 D.26039 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 44 50 107 3 init/initramfs.c:174 (set (reg:SI 1 r1 [orig:159 count ] [159])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn 107 44 34 3 init/initramfs.c:173 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 8 r8 [orig:155 this_header ] [155])
                        (reg:SI 3 r3 [orig:134 body_len.779 ] [134]))
                    (reg:SI 8 r8 [orig:155 this_header ] [155])))
            (set (reg:SI 6 r6 [156])
                (plus:SI (reg:SI 8 r8 [orig:155 this_header ] [155])
                    (reg:SI 3 r3 [orig:134 body_len.779 ] [134])))
        ]) 10 {*addsi3_compare_op1} (nil))

(insn:TI 34 107 108 3 init/initramfs.c:172 (set (reg:SI 2 r2 [151])
        (plus:SI (reg/f:SI 2 r2 [orig:150 victim ] [150])
            (reg:SI 3 r3 [orig:134 body_len.779 ] [134]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 108 34 45 3 init/initramfs.c:173 (set (reg:SI 7 r7 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 9 r9 [ this_header+4 ])
                (const_int 0 [0x0])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn:TI 45 108 49 3 init/initramfs.c:174 (set (reg:SI 3 r3 [160])
        (minus:SI (reg:SI 1 r1 [orig:159 count ] [159])
            (reg:SI 3 r3 [orig:134 body_len.779 ] [134]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:159 count ] [159])
        (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                    (const_int 8 [0x8])) [0 count+0 S4 A32])
            (nil))))

(insn 49 45 35 3 init/initramfs.c:344 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 12 ip [162])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [162])
        (expr_list:REG_EQUAL (const_int 3 [0x3])
            (nil))))

(insn:TI 35 49 41 3 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 2 r2 [151])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [151])
        (nil)))

(insn:TI 41 35 46 3 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [156])) 163 {*arm_movdi} (nil))

(insn:TI 46 41 111 3 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 3 r3 [160])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [160])
        (nil)))

(jump_insn:TI 111 46 100 3 init/initramfs.c:345 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 100 111 53)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%] 
(code_label 53 100 54 4 88 "" [1 uses])

(note 54 53 74 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 74 54 59 4 NOTE_INSN_DELETED)

(insn:TI 59 74 58 4 init/initramfs.c:347 (set (reg:SI 2 r2)
        (reg:SI 3 r3 [orig:137 count.385 ] [137])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:137 count.385 ] [137])
        (nil)))

(insn 58 59 57 4 init/initramfs.c:347 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 victim+0 S4 A32])
        (nil)))

(insn:TI 57 58 60 4 init/initramfs.c:347 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
        (nil)))

(call_insn:TI 60 57 62 4 init/initramfs.c:347 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_write") [flags 0x41] <function_decl 0x11464900 sys_write>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 62 60 76 4 init/initramfs.c:348 (set (reg:SI 3 r3 [orig:133 count.784 ] [133])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn:TI 76 62 102 4 init/initramfs.c:173 (set (reg:DI 8 r8 [orig:177 this_header ] [177])
        (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
            (nil))))

(insn 102 76 65 4 init/initramfs.c:174 (set (reg:SI 12 ip [180])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 65 102 82 4 init/initramfs.c:348 (set (reg:SI 1 r1 [orig:168 body_len ] [168])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 92 [0x5c]))) [0 body_len+0 S4 A32])
            (nil))))

(insn 82 65 70 4 init/initramfs.c:350 (set (reg:SI 0 r0 [orig:135 D.26039 ] [135])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 70 82 105 4 init/initramfs.c:172 (set (reg/f:SI 2 r2 [orig:172 victim ] [172])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 105 70 66 4 init/initramfs.c:173 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 8 r8 [orig:177 this_header ] [177])
                        (reg:SI 3 r3 [orig:133 count.784 ] [133]))
                    (reg:SI 8 r8 [orig:177 this_header ] [177])))
            (set (reg:SI 6 r6 [178])
                (plus:SI (reg:SI 8 r8 [orig:177 this_header ] [177])
                    (reg:SI 3 r3 [orig:133 count.784 ] [133])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:133 count.784 ] [133])
        (nil)))

(insn:TI 66 105 106 4 init/initramfs.c:348 (set (reg:SI 1 r1 [169])
        (minus:SI (reg:SI 1 r1 [orig:168 body_len ] [168])
            (reg:SI 3 r3 [orig:133 count.784 ] [133]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (nil)))

(insn 106 66 71 4 init/initramfs.c:173 (set (reg:SI 7 r7 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 9 r9 [ this_header+4 ])
                (const_int 0 [0x0])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (nil)))

(insn:TI 71 106 81 4 init/initramfs.c:172 (set (reg:SI 2 r2 [173])
        (plus:SI (reg/f:SI 2 r2 [orig:172 victim ] [172])
            (reg:SI 3 r3 [orig:133 count.784 ] [133]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 81 71 67 4 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 12 ip [180])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [180])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn:TI 67 81 72 4 init/initramfs.c:348 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (reg:SI 1 r1 [169])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [169])
        (nil)))

(insn:TI 72 67 78 4 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 2 r2 [173])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [173])
        (nil)))

(insn:TI 78 72 95 4 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [139])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [178])) 163 {*arm_movdi} (nil))

(insn 95 78 113 4 init/initramfs.c:352 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 113 95 112 4 init/initramfs.c:352 (return) 260 {return} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 112 113 101)

(note 101 112 104 NOTE_INSN_DELETED)

(note 104 101 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function maybe_link (maybe_link)[0:1326] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 26 (  1.9)


maybe_link

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,10u} r1={8d,3u} r2={7d,2u} r3={14d,17u,1d} r4={2d,11u,3d} r5={2d,9u} r6={5d,6u} r7={2d,5u} r8={2d,5u} r9={2d,4u} r10={2d,5u} r11={2d,4u} r12={4d} r13={2d,18u} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={12d,9u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 637{523d,110u,4e} in 61{57 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 1 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 2 )->[3]->( 10 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 10 )->[4]->( 9 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 4 )->[5]->( 9 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 5 )->[6]->( 9 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 6 )->[7]->( 9 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 7 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 4 5 6 7 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 9 3 )->[10]->( 4 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 10 )->[11]->( 12 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 11 )->[12]->( )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 11 )->[13]->( 1 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 13 2 8 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 8 to worklist
  Adding insn 139 to worklist
  Adding insn 145 to worklist
  Adding insn 40 to worklist
  Adding insn 44 to worklist
  Adding insn 48 to worklist
  Adding insn 56 to worklist
  Adding insn 142 to worklist
  Adding insn 61 to worklist
  Adding insn 77 to worklist
  Adding insn 87 to worklist
  Adding insn 83 to worklist
  Adding insn 91 to worklist
  Adding insn 144 to worklist
  Adding insn 124 to worklist
  Adding insn 105 to worklist
  Adding insn 104 to worklist
  Adding insn 102 to worklist
  Adding insn 98 to worklist
  Adding insn 97 to worklist
  Adding insn 96 to worklist
  Adding insn 95 to worklist
Finished finding needed instructions:
processing block 9 lr out =  5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 71 to worklist
processing block 8 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 129 to worklist
  Adding insn 128 to worklist
  Adding insn 60 to worklist
  Adding insn 59 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 55 to worklist
  Adding insn 53 to worklist
  Adding insn 50 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 47 to worklist
  Adding insn 46 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 43 to worklist
  Adding insn 42 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 39 to worklist
  Adding insn 38 to worklist
processing block 12 lr out =  13 [sp]
  Adding insn 90 to worklist
processing block 13 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 106 to worklist
  Adding insn 100 to worklist
  Adding insn 101 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 86 to worklist
  Adding insn 81 to worklist
  Adding insn 137 to worklist
  Adding insn 82 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 76 to worklist
  Adding insn 74 to worklist
processing block 3 lr out =  5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 34 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
  Adding insn 27 to worklist
  Adding insn 24 to worklist
  Adding insn 25 to worklist
  Adding insn 22 to worklist
  Adding insn 20 to worklist
  Adding insn 18 to worklist
  Adding insn 30 to worklist
  Adding insn 16 to worklist
processing block 2 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 10 to worklist
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 5 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 33 (  2.4)
;;   ======================================================
;;   -- basic block 2 from 139 to 8 -- after reload
;;   ======================================================

;;	  0-->   139 {[--sp]=unspec[r3] 2;use r4;use r5:cortex_a8_load_store_2
;;	  1-->     5 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  4-->     6 r2=[r3+0xc8]                      :cortex_a8_load_store_1
;;	  6-->     7 cc=cmp(r2,0x1)                    :cortex_a8_default
;;	  7-->    10 (leu(cc,0x0)) r0=0x0              :cortex_a8_default
;;	  8-->     8 pc={(leu(cc,0x0))?return:pc}      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 8
;;   new head = 139
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 16 to 145 -- after reload
;;   ======================================================

;;	  0-->    18 r8=[r3+0xd0]                      :cortex_a8_load_store_1
;;	  0-->    30 r2=r3+0xdc                        :cortex_a8_default
;;	  1-->    20 r7=[r3+0xd4]                      :cortex_a8_load_store_1
;;	  2-->    16 sl=[r3+0xcc]                      :cortex_a8_load_store_1
;;	  3-->    25 r6=r7+r8                          :cortex_a8_default
;;	  3-->    22 r9=zxn([r3+0xd8])                 :cortex_a8_load_store_1
;;	  4-->    24 fp=[r3+0x10]                      :cortex_a8_load_store_1
;;	  5-->    27 r3=sl*0x8+r6                      :cortex_a8_default
;;	  7-->    31 r3=r3 0>>0x5+r3                   :cortex_a8_default
;;	  8-->    32 r6=r3&0x1f                        :cortex_a8_default
;;	 10-->    34 r6=r6*0x4+r2                      :cortex_a8_default
;;	 10-->   145 pc=L72                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 10
;;   new head = 16
;;   new tail = 145

;;   ======================================================
;;   -- basic block 4 from 38 to 40 -- after reload
;;   ======================================================

;;	  0-->    38 r3=[r4]                           :cortex_a8_load_store_1
;;	  2-->    39 cc=cmp(r3,r7)                     :cortex_a8_default
;;	  4-->    40 pc={(cc!=0x0)?L69:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 38
;;   new tail = 40

;;   ======================================================
;;   -- basic block 5 from 42 to 44 -- after reload
;;   ======================================================

;;	  0-->    42 r3=[r4+0x4]                       :cortex_a8_load_store_1
;;	  2-->    43 cc=cmp(r3,r8)                     :cortex_a8_default
;;	  4-->    44 pc={(cc!=0x0)?L69:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 42
;;   new tail = 44

;;   ======================================================
;;   -- basic block 6 from 46 to 48 -- after reload
;;   ======================================================

;;	  0-->    46 r3=[r4+0x8]                       :cortex_a8_load_store_1
;;	  2-->    47 cc=cmp(r3,sl)                     :cortex_a8_default
;;	  4-->    48 pc={(cc!=0x0)?L69:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 46
;;   new tail = 48

;;   ======================================================
;;   -- basic block 7 from 50 to 56 -- after reload
;;   ======================================================

;;	  0-->    50 r3=zxn([r4+0xc])                  :cortex_a8_load_store_1
;;	  2-->    53 r3=r9^r3                          :cortex_a8_default
;;	  3-->    55 {cc=cmp(r3&0xf000,0x0);clobber scr:cortex_a8_default
;;	  5-->    56 pc={(cc!=0x0)?L69:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 50
;;   new tail = 56

;;   ======================================================
;;   -- basic block 8 from 59 to 142 -- after reload
;;   ======================================================

;;	  0-->    59 r0=r4+0x14                        :cortex_a8_default
;;	  0-->    60 r1=fp                             :cortex_a8_default
;;	  1-->    61 r0=call [`sys_link']              :cortex_a8_issue_branch
;;	 33-->   128 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->   129 r0={(cc<0x0)?0xffffffffffffffff:0x:cortex_a8_default
;;	 34-->   142 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 34
;;   new head = 59
;;   new tail = 142

;;   ======================================================
;;   -- basic block 9 from 71 to 71 -- after reload
;;   ======================================================

;;	  0-->    71 r6=r4+0x10                        :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 71
;;   new tail = 71

;;   ======================================================
;;   -- basic block 10 from 74 to 77 -- after reload
;;   ======================================================

;;	  0-->    74 r4=[r6]                           :cortex_a8_load_store_1
;;	  2-->    76 cc=cmp(r4,0x0)                    :cortex_a8_default
;;	  4-->    77 pc={(cc!=0x0)?L75:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 74
;;   new tail = 77

;;   ======================================================
;;   -- basic block 11 from 82 to 87 -- after reload
;;   ======================================================

;;	  0-->   137 r3=`malloc_sizes'                 :cortex_a8_load_store_1
;;	  0-->    82 r1=0xd0                           :cortex_a8_default
;;	  3-->    81 r0=[r3+0x54]                      :cortex_a8_load_store_1
;;	  4-->    83 r0=call [`kmem_cache_alloc']      :cortex_a8_issue_branch
;;	 36-->    86 {cc=cmp(r0,0x0);r5=r0;}           :cortex_a8_default
;;	 38-->    87 pc={(cc!=0x0)?L93:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 38
;;   new head = 82
;;   new tail = 87

;;   ======================================================
;;   -- basic block 12 from 90 to 91 -- after reload
;;   ======================================================

;;	  0-->    90 r0=`*.LC5'                        :cortex_a8_load_store_1
;;	  1-->    91 call [`panic']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 90
;;   new tail = 91

;;   ======================================================
;;   -- basic block 13 from 95 to 144 -- after reload
;;   ======================================================

;;	  0-->    95 [r5+0x8]=sl                       :cortex_a8_load_store_1
;;	  0-->   101 r1=fp                             :cortex_a8_default
;;	  1-->    96 [r5+0x4]=r8                       :cortex_a8_load_store_1
;;	  1-->   100 r0=r5+0x14                        :cortex_a8_default
;;	  2-->    97 [r5]=r7                           :cortex_a8_load_store_1
;;	  3-->    98 [r5+0xc]=r9                       :cortex_a8_load_store_1
;;	  4-->   102 r0=call [`strcpy']                :cortex_a8_issue_branch
;;	  4-->   104 [r5+0x10]=r4                      :cortex_a8_load_store_1
;;	  5-->   106 r0=r4                             :cortex_a8_default
;;	  5-->   105 [r6]=r5                           :cortex_a8_load_store_1
;;	  6-->   124 use r0                            :nothing
;;	  6-->   144 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 6
;;   new head = 95
;;   new tail = 144





maybe_link

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,10u} r1={8d,3u} r2={7d,2u} r3={14d,17u,1d} r4={2d,11u,3d} r5={2d,9u} r6={5d,6u} r7={2d,5u} r8={2d,5u} r9={2d,4u} r10={2d,5u} r11={2d,4u} r12={4d} r13={2d,18u} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={12d,9u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 637{523d,110u,4e} in 61{57 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 139 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 139 2 140 2 init/initramfs.c:270 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 3 r3)
                    ] 2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -40 [0xffffffffffffffd8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 3 r3))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 16 [0x10])) [0 S4 A32])
                        (reg:SI 7 r7))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 20 [0x14])) [0 S4 A32])
                        (reg:SI 8 r8))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 24 [0x18])) [0 S4 A32])
                        (reg:SI 9 r9))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 28 [0x1c])) [0 S4 A32])
                        (reg:SI 10 sl))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 32 [0x20])) [0 S4 A32])
                        (reg:SI 11 fp))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 36 [0x24])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 140 139 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 140 6 2 init/initramfs.c:271 (set (reg/f:SI 3 r3 [147])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 6 5 7 2 init/initramfs.c:271 (set (reg:SI 2 r2 [orig:148 nlink ] [148])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 200 [0xc8])) [0 nlink+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 200 [0xc8])) [0 nlink+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 200 [0xc8]))) [0 nlink+0 S4 A32])
            (nil))))

(insn:TI 7 6 10 2 init/initramfs.c:271 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:148 nlink ] [148])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:148 nlink ] [148])
        (nil)))

(insn:TI 10 7 8 2 init/initramfs.c:276 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:140 D.25953 ] [140])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 8 10 14 2 init/initramfs.c:271 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 
;; Succ edge  3 [0.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	

;; Pred edge  2 [0.0%]  (fallthru)
(note 14 8 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 26 14 28 3 NOTE_INSN_DELETED)

(note 28 26 33 3 NOTE_INSN_DELETED)

(note 33 28 18 3 NOTE_INSN_DELETED)

(insn:TI 18 33 30 3 init/initramfs.c:272 (set (reg:SI 8 r8 [orig:144 minor.366 ] [144])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 208 [0xd0])) [0 minor+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 208 [0xd0]))) [0 minor+0 S4 A32])
        (nil)))

(insn 30 18 20 3 init/initramfs.c:41 (set (reg/f:SI 2 r2 [157])
        (plus:SI (reg/f:SI 3 r3 [147])
            (const_int 220 [0xdc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 220 [0xdc])))
        (nil)))

(insn:TI 20 30 16 3 init/initramfs.c:272 (set (reg:SI 7 r7 [orig:143 ino.368 ] [143])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 212 [0xd4])) [0 ino+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 212 [0xd4]))) [0 ino+0 S4 A32])
        (nil)))

(insn:TI 16 20 25 3 init/initramfs.c:272 (set (reg:SI 10 sl [orig:145 major.364 ] [145])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 204 [0xcc])) [0 major+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 204 [0xcc]))) [0 major+0 S4 A32])
        (nil)))

(insn:TI 25 16 22 3 init/initramfs.c:32 (set (reg:SI 6 r6 [154])
        (plus:SI (reg:SI 7 r7 [orig:143 ino.368 ] [143])
            (reg:SI 8 r8 [orig:144 minor.366 ] [144]))) 4 {*arm_addsi3} (nil))

(insn 22 25 24 3 init/initramfs.c:272 (set (reg:SI 9 r9 [orig:142 mode.369 ] [142])
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 3 r3 [147])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/c/i:HI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 216 [0xd8]))) [0 mode+0 S2 A16]))
        (nil)))

(insn:TI 24 22 27 3 init/initramfs.c:272 (set (reg/f:SI 11 fp [orig:141 collected.370 ] [141])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [147])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 16 [0x10]))) [0 collected+0 S4 A32])
            (nil))))

(insn:TI 27 24 31 3 init/initramfs.c:32 (set (reg/v:SI 3 r3 [orig:136 tmp ] [136])
        (plus:SI (mult:SI (reg:SI 10 sl [orig:145 major.364 ] [145])
                (const_int 8 [0x8]))
            (reg:SI 6 r6 [154]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 6 r6 [154])
        (nil)))

(insn:TI 31 27 32 3 init/initramfs.c:41 (set (reg:SI 3 r3 [158])
        (plus:SI (lshiftrt:SI (reg/v:SI 3 r3 [orig:136 tmp ] [136])
                (const_int 5 [0x5]))
            (reg/v:SI 3 r3 [orig:136 tmp ] [136]))) 270 {*arith_shiftsi} (nil))

(insn:TI 32 31 34 3 init/initramfs.c:41 (set (reg:SI 6 r6 [159])
        (and:SI (reg:SI 3 r3 [158])
            (const_int 31 [0x1f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [158])
        (nil)))

(insn:TI 34 32 145 3 init/initramfs.c:41 (set (reg/v/f:SI 6 r6 [orig:134 p ] [134])
        (plus:SI (mult:SI (reg:SI 6 r6 [159])
                (const_int 4 [0x4]))
            (reg/f:SI 2 r2 [157]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/f:SI 2 r2 [157])
        (nil)))

(jump_insn 145 34 146 3 (set (pc)
        (label_ref 72)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 10)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 146 145 75)

;; Start of basic block ( 10) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [95.5%] 
(code_label 75 146 37 4 99 "" [1 uses])

(note 37 75 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 38 37 39 4 init/initramfs.c:42 (set (reg:SI 3 r3 [orig:161 <variable>.ino ] [161])
        (mem/s/j:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133]) [0 <variable>.ino+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133]) [0 <variable>.ino+0 S4 A32])
        (nil)))

(insn:TI 39 38 40 4 init/initramfs.c:42 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:161 <variable>.ino ] [161])
            (reg:SI 7 r7 [orig:143 ino.368 ] [143]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:161 <variable>.ino ] [161])
        (nil)))

(jump_insn:TI 40 39 41 4 init/initramfs.c:42 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 4 -> ( 9 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [72.0%] 
;; Succ edge  5 [28.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [28.0%]  (fallthru)
(note 41 40 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 42 41 43 5 init/initramfs.c:44 (set (reg:SI 3 r3 [orig:162 <variable>.minor ] [162])
        (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                (const_int 4 [0x4])) [0 <variable>.minor+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                (const_int 4 [0x4])) [0 <variable>.minor+0 S4 A32])
        (nil)))

(insn:TI 43 42 44 5 init/initramfs.c:44 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:162 <variable>.minor ] [162])
            (reg:SI 8 r8 [orig:144 minor.366 ] [144]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:162 <variable>.minor ] [162])
        (nil)))

(jump_insn:TI 44 43 45 5 init/initramfs.c:44 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 5 -> ( 9 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [72.0%] 
;; Succ edge  6 [28.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [28.0%]  (fallthru)
(note 45 44 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 46 45 47 6 init/initramfs.c:46 (set (reg:SI 3 r3 [orig:163 <variable>.major ] [163])
        (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                (const_int 8 [0x8])) [0 <variable>.major+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                (const_int 8 [0x8])) [0 <variable>.major+0 S4 A32])
        (nil)))

(insn:TI 47 46 48 6 init/initramfs.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:163 <variable>.major ] [163])
            (reg:SI 10 sl [orig:145 major.364 ] [145]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:163 <variable>.major ] [163])
        (nil)))

(jump_insn:TI 48 47 49 6 init/initramfs.c:46 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 6 -> ( 9 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [72.0%] 
;; Succ edge  7 [28.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [28.0%]  (fallthru)
(note 49 48 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 52 49 54 7 NOTE_INSN_DELETED)

(note 54 52 50 7 NOTE_INSN_DELETED)

(insn:TI 50 54 53 7 init/initramfs.c:48 (set (reg:SI 3 r3 [orig:165 <variable>.mode ] [165])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
                    (const_int 12 [0xc])) [0 <variable>.mode+0 S2 A32]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn:TI 53 50 55 7 init/initramfs.c:48 (set (reg:SI 3 r3 [167])
        (xor:SI (reg:SI 9 r9 [orig:142 mode.369 ] [142])
            (reg:SI 3 r3 [orig:165 <variable>.mode ] [165]))) 96 {*arm_xorsi3} (nil))

(insn:TI 55 53 56 7 init/initramfs.c:48 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [167])
                        (const_int 61440 [0xf000]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [167])
        (nil)))

(jump_insn:TI 56 55 57 7 init/initramfs.c:48 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  8 [50.0%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [50.0%]  (fallthru,loop_exit)
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 58 57 62 8 NOTE_INSN_DELETED)

(note 62 58 59 8 NOTE_INSN_DELETED)

(insn:TI 59 62 60 8 init/initramfs.c:274 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
            (const_int 20 [0x14]))) 4 {*arm_addsi3} (nil))

(insn 60 59 61 8 init/initramfs.c:274 (set (reg:SI 1 r1)
        (reg/f:SI 11 fp [orig:141 collected.370 ] [141])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 61 60 128 8 init/initramfs.c:274 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_link") [flags 0x41] <function_decl 0x11458c00 sys_link>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 128 61 129 8 init/initramfs.c:274 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 129 128 142 8 init/initramfs.c:274 discrim 2 (set (reg:SI 0 r0 [orig:140 D.25953 ] [140])
        (if_then_else:SI (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int -1 [0xffffffffffffffff])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 142 129 135 8 (return) 260 {return} (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 135 142 69)

;; Start of basic block ( 4 5 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  4 [72.0%] 
;; Pred edge  5 [72.0%] 
;; Pred edge  6 [72.0%] 
;; Pred edge  7 [50.0%] 
(code_label 69 135 70 9 97 "" [4 uses])

(note 70 69 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 71 70 72 9 init/initramfs.c:41 (set (reg/v/f:SI 6 r6 [orig:134 p ] [134])
        (plus:SI (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 9 3) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 72 71 73 10 96 "" [1 uses])

(note 73 72 74 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 74 73 76 10 init/initramfs.c:41 discrim 1 (set (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
        (mem/f:SI (reg/v/f:SI 6 r6 [orig:134 p ] [134]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 76 74 77 10 init/initramfs.c:41 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 77 76 79 10 init/initramfs.c:41 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 10 -> ( 4 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [95.5%] 
;; Succ edge  11 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [4.5%]  (fallthru,loop_exit)
(note 79 77 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 78 79 84 11 ("found") NOTE_INSN_DELETED_LABEL 100)

(note 84 78 137 11 NOTE_INSN_DELETED)

(insn:TI 137 84 82 11 include/linux/slab_def.h:122 (set (reg/f:SI 3 r3 [170])
        (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
        (nil)))

(insn 82 137 81 11 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 81 82 83 11 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [170])
                (const_int 84 [0x54])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [170])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                        (const_int 84 [0x54]))) [0 <variable>.cs_cachep+0 S4 A32])
            (nil))))

(call_insn:TI 83 81 86 11 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 86 83 87 11 init/initramfs.c:53 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 87 86 88 11 init/initramfs.c:53 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  12 [0.0%]  (fallthru)
;; Succ edge  13 [100.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  11 [0.0%]  (fallthru)
(note 88 87 90 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 90 88 91 12 init/initramfs.c:54 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x115c7780>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x115c7780>)
        (nil)))

(call_insn:TI 91 90 92 12 init/initramfs.c:54 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a86f00 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_NORETURN (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 12 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 92 91 93)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  11 [100.0%] 
(code_label 93 92 94 13 101 "" [1 uses])

(note 94 93 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 99 94 95 13 NOTE_INSN_DELETED)

(insn:TI 95 99 101 13 init/initramfs.c:55 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (const_int 8 [0x8])) [0 <variable>.major+0 S4 A32])
        (reg:SI 10 sl [orig:145 major.364 ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 101 95 96 13 init/initramfs.c:59 (set (reg:SI 1 r1)
        (reg/f:SI 11 fp [orig:141 collected.370 ] [141])) 167 {*arm_movsi_insn} (nil))

(insn:TI 96 101 100 13 init/initramfs.c:56 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (const_int 4 [0x4])) [0 <variable>.minor+0 S4 A32])
        (reg:SI 8 r8 [orig:144 minor.366 ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 100 96 97 13 init/initramfs.c:59 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
            (const_int 20 [0x14]))) 4 {*arm_addsi3} (nil))

(insn:TI 97 100 98 13 init/initramfs.c:57 (set (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138]) [0 <variable>.ino+0 S4 A32])
        (reg:SI 7 r7 [orig:143 ino.368 ] [143])) 167 {*arm_movsi_insn} (nil))

(insn:TI 98 97 102 13 init/initramfs.c:58 (set (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (const_int 12 [0xc])) [0 <variable>.mode+0 S2 A32])
        (reg:HI 9 r9 [orig:142 mode.369 ] [142])) 176 {*movhi_insn_arch4} (nil))

(call_insn:TI 102 98 104 13 init/initramfs.c:59 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcpy") [flags 0x41] <function_decl 0x51157780 strcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 104 102 106 13 init/initramfs.c:60 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:138 ret ] [138])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])
        (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 106 104 105 13 init/initramfs.c:276 (set (reg:SI 0 r0 [orig:140 D.25953 ] [140])
        (reg/f:SI 4 r4 [orig:133 D.26472 ] [133])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 105 106 124 13 init/initramfs.c:61 (set (mem/f:SI (reg/v/f:SI 6 r6 [orig:134 p ] [134]) [0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:138 ret ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 124 105 144 13 init/initramfs.c:277 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 144 124 143 13 init/initramfs.c:277 (return) 260 {return} (nil))
;; End of basic block 13 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 143 144 136)

(note 136 143 138 NOTE_INSN_DELETED)

(note 138 136 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_name (do_name)[0:1328] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 45 (  1.9)


do_name

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={40d,34u} r1={38d,19u} r2={27d,7u} r3={30d,16u} r4={5d,43u,1d} r5={5d,19u,2d} r6={2d,3u} r7={2d,3u} r8={1d,2u} r12={20d} r13={2d,44u} r14={21d,2u} r15={20d} r16={20d} r17={20d} r18={20d} r19={20d} r20={20d} r21={20d} r22={20d} r23={20d} r24={34d,16u} r27={20d} r28={20d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={20d} r38={20d} r39={20d} r40={20d} r41={20d} r42={20d} r43={20d} r44={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} r81={20d} r82={20d} r83={20d} r84={20d} r85={20d} r86={20d} r87={20d} r88={20d} r89={20d} r90={20d} r91={20d} r92={20d} r93={20d} r94={20d} r95={20d} r96={20d} r97={20d} r98={20d} r99={20d} r100={20d} r101={20d} r102={20d} r103={20d} r104={20d} r105={20d} r106={20d} r107={20d} r108={20d} r109={20d} r110={20d} r111={20d} r112={20d} r113={20d} r114={20d} r115={20d} r116={20d} r117={20d} r118={20d} r119={20d} r120={20d} r121={20d} r122={20d} r123={20d} r124={20d} r125={20d} r126={20d} r127={20d} 
;;    total ref usage 2638{2427d,208u,3e} in 125{105 regular + 20 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 5 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 )->[3]->( 8 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 5 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 6 4 2 )->[5]->( 4 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 5 )->[6]->( 5 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 6 )->[7]->( 23 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 3 )->[8]->( 9 14 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 8 )->[9]->( 10 23 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 9 )->[10]->( 11 23 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 10 )->[11]->( 12 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 11 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 11 12 )->[13]->( 23 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 8 )->[14]->( 15 18 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 14 )->[15]->( 16 17 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 15 )->[16]->( )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 15 )->[17]->( 23 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 14 )->[18]->( 21 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 18 )->[19]->( 21 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 19 )->[20]->( 21 23 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 18 19 20 )->[21]->( 22 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 21 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 20 7 10 13 9 22 21 17 )->[23]->( 1 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 23 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 50 to worklist
  Adding insn 46 to worklist
  Adding insn 40 to worklist
  Adding insn 37 to worklist
  Adding insn 315 to worklist
  Adding insn 325 to worklist
  Adding insn 61 to worklist
  Adding insn 59 to worklist
  Adding insn 69 to worklist
  Adding insn 73 to worklist
  Adding insn 328 to worklist
  Adding insn 88 to worklist
  Adding insn 83 to worklist
  Adding insn 93 to worklist
  Adding insn 90 to worklist
  Adding insn 117 to worklist
  Adding insn 115 to worklist
  Adding insn 112 to worklist
  Adding insn 134 to worklist
  Adding insn 130 to worklist
  Adding insn 124 to worklist
  Adding insn 139 to worklist
  Adding insn 330 to worklist
  Adding insn 148 to worklist
  Adding insn 151 to worklist
  Adding insn 145 to worklist
  Adding insn 157 to worklist
  Adding insn 189 to worklist
  Adding insn 185 to worklist
  Adding insn 175 to worklist
  Adding insn 169 to worklist
  Adding insn 162 to worklist
  Adding insn 193 to worklist
  Adding insn 332 to worklist
  Adding insn 214 to worklist
  Adding insn 212 to worklist
  Adding insn 209 to worklist
  Adding insn 208 to worklist
  Adding insn 204 to worklist
  Adding insn 205 to worklist
  Adding insn 202 to worklist
  Adding insn 199 to worklist
  Adding insn 198 to worklist
  Adding insn 229 to worklist
  Adding insn 232 to worklist
  Adding insn 235 to worklist
  Adding insn 241 to worklist
  Adding insn 238 to worklist
  Adding insn 268 to worklist
  Adding insn 263 to worklist
  Adding insn 257 to worklist
  Adding insn 250 to worklist
  Adding insn 318 to worklist
  Adding insn 281 to worklist
Finished finding needed instructions:
processing block 23 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 275 to worklist
processing block 13 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 150 to worklist
  Adding insn 143 to worklist
  Adding insn 144 to worklist
  Adding insn 142 to worklist
processing block 12 lr out =  5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 137 to worklist
processing block 11 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 133 to worklist
  Adding insn 132 to worklist
  Adding insn 129 to worklist
  Adding insn 128 to worklist
  Adding insn 123 to worklist
  Adding insn 122 to worklist
processing block 10 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 116 to worklist
  Adding insn 111 to worklist
  Adding insn 314 to worklist
  Adding insn 313 to worklist
  Adding insn 308 to worklist
  Adding insn 109 to worklist
processing block 9 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 92 to worklist
processing block 16 lr out =  13 [sp]
  Adding insn 192 to worklist
processing block 17 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 207 to worklist
  Adding insn 295 to worklist
  Adding insn 201 to worklist
  Adding insn 200 to worklist
processing block 15 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 188 to worklist
  Adding insn 183 to worklist
  Adding insn 307 to worklist
  Adding insn 179 to worklist
  Adding insn 177 to worklist
  Adding insn 184 to worklist
  Adding insn 173 to worklist
  Adding insn 174 to worklist
  Adding insn 166 to worklist
  Adding insn 167 to worklist
  Adding insn 168 to worklist
  Adding insn 160 to worklist
processing block 22 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 266 to worklist
  Adding insn 267 to worklist
  Adding insn 261 to worklist
  Adding insn 262 to worklist
  Adding insn 254 to worklist
  Adding insn 256 to worklist
  Adding insn 255 to worklist
  Adding insn 247 to worklist
  Adding insn 249 to worklist
  Adding insn 248 to worklist
  Adding insn 243 to worklist
processing block 21 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 240 to worklist
processing block 20 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 234 to worklist
processing block 19 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 231 to worklist
processing block 18 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 228 to worklist
processing block 14 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 156 to worklist
processing block 8 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 87 to worklist
  Adding insn 86 to worklist
  Adding insn 85 to worklist
  Adding insn 82 to worklist
  Adding insn 81 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 58 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 72 to worklist
  Adding insn 71 to worklist
processing block 5 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 68 to worklist
  Adding insn 66 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 65 to worklist
  Adding insn 52 to worklist
  Adding insn 49 to worklist
  Adding insn 309 to worklist
  Adding insn 44 to worklist
  Adding insn 310 to worklist
  Adding insn 42 to worklist
  Adding insn 45 to worklist
  Adding insn 35 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 35 count 47 (    2)
;;   ======================================================
;;   -- basic block 2 from 315 to 50 -- after reload
;;   ======================================================

;;	  0-->   315 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->    35 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->   310 r3=0x3                            :cortex_a8_default
;;	  2-->    45 r1=`*.LC6'                        :cortex_a8_load_store_1
;;	  4-->    42 r5=[r4+0x10]                      :cortex_a8_load_store_1
;;	  5-->    37 [r4+0x20]=r3                      :cortex_a8_load_store_1
;;	  5-->   309 r3=r3+0x4                         :cortex_a8_default
;;	  6-->    44 r0=r5                             :cortex_a8_default
;;	  6-->    40 [r4+0x2c]=r3                      :cortex_a8_load_store_1
;;	  7-->    46 r0=call [`strcmp']                :cortex_a8_issue_branch
;;	 39-->    49 {cc=cmp(r0,0x0);r0=r0;}           :cortex_a8_default
;;	 40-->    52 (!cc) r5=r0                       :cortex_a8_default
;;	 40-->    65 (!cc) r4=r4+0xdc                  :cortex_a8_default
;;	 41-->    50 pc={(cc==0x0)?L294:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 41
;;   new head = 315
;;   new tail = 50

;;   ======================================================
;;   -- basic block 3 from 325 to 325 -- after reload
;;   ======================================================

;;	  0-->   325 pc=L324                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 325
;;   new tail = 325

;;   ======================================================
;;   -- basic block 4 from 58 to 61 -- after reload
;;   ======================================================

;;	  0-->    58 r3=[r0+0x10]                      :cortex_a8_load_store_1
;;	  3-->    59 [r4+r5]=r3                        :cortex_a8_load_store_1
;;	  4-->    61 call [`kfree']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 58
;;   new tail = 61

;;   ======================================================
;;   -- basic block 5 from 66 to 69 -- after reload
;;   ======================================================

;;	  0-->    66 r0=[r4+r5]                        :cortex_a8_load_store_1
;;	  2-->    68 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  4-->    69 pc={(cc!=0x0)?L67:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 66
;;   new tail = 69

;;   ======================================================
;;   -- basic block 6 from 71 to 73 -- after reload
;;   ======================================================

;;	  0-->    71 r5=r5+0x4                         :cortex_a8_default
;;	  1-->    72 cc=cmp(r5,0x80)                   :cortex_a8_default
;;	  3-->    73 pc={(cc!=0x0)?L294:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 71
;;   new tail = 73

;;   ======================================================
;;   -- basic block 7 from 328 to 328 -- after reload
;;   ======================================================

;;	  0-->   328 pc=L269                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 328
;;   new tail = 328

;;   ======================================================
;;   -- basic block 8 from 81 to 88 -- after reload
;;   ======================================================

;;	  0-->    82 r1=zxn([r4+0xd8])                 :cortex_a8_load_store_1
;;	  0-->    81 r0=r5                             :cortex_a8_default
;;	  1-->    83 call [`clean_path']               :cortex_a8_issue_branch
;;	  1-->    85 r1=zxn([r4+0xd8])                 :cortex_a8_load_store_1
;;	  3-->    86 r3=r1&0xf000                      :cortex_a8_default
;;	  4-->    87 cc=cmp(r3,0x8000)                 :cortex_a8_default
;;	  6-->    88 pc={(cc!=0x0)?L154:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 81
;;   new tail = 88

;;   ======================================================
;;   -- basic block 9 from 90 to 93 -- after reload
;;   ======================================================

;;	  0-->    90 r0=call [`maybe_link']            :cortex_a8_issue_branch
;;	 32-->    92 {cc=cmp(r0,0x0);r3=r0;}           :cortex_a8_default
;;	 34-->    93 pc={(cc<0x0)?L269:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 90
;;   new tail = 93

;;   ======================================================
;;   -- basic block 10 from 109 to 117 -- after reload
;;   ======================================================

;;	  0-->   313 cc=cmp(r3,0x1)                    :cortex_a8_default
;;	  0-->   308 r1=0x241                          :cortex_a8_default
;;	  1-->   109 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	  1-->   314 (!cc) r1=0x41                     :cortex_a8_default
;;	  2-->   111 r2=zxn([r4+0xd8])                 :cortex_a8_load_store_1
;;	  3-->   112 r0=call [`sys_open']              :cortex_a8_issue_branch
;;	 35-->   116 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->   115 [r4+0xc0]=r0                      :cortex_a8_load_store_1
;;	 37-->   117 pc={(cc<0x0)?L269:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 37
;;   new head = 109
;;   new tail = 117

;;   ======================================================
;;   -- basic block 11 from 122 to 134 -- after reload
;;   ======================================================

;;	  0-->   122 r1=[r4+0x64]                      :cortex_a8_load_store_1
;;	  1-->   123 r2=[r4+0x68]                      :cortex_a8_load_store_1
;;	  2-->   124 r0=call [`sys_fchown']            :cortex_a8_issue_branch
;;	  2-->   129 r1=zxn([r4+0xd8])                 :cortex_a8_load_store_1
;;	  3-->   128 r0=[r4+0xc0]                      :cortex_a8_load_store_1
;;	  4-->   130 r0=call [`sys_fchmod']            :cortex_a8_issue_branch
;;	  4-->   132 r1=[r4+0x5c]                      :cortex_a8_load_store_1
;;	  6-->   133 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  8-->   134 pc={(cc==0x0)?L140:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 122
;;   new tail = 134

;;   ======================================================
;;   -- basic block 12 from 137 to 139 -- after reload
;;   ======================================================

;;	  0-->   137 r0=[r4+0xc0]                      :cortex_a8_load_store_1
;;	  1-->   139 r0=call [`sys_ftruncate']         :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 137
;;   new tail = 139

;;   ======================================================
;;   -- basic block 13 from 142 to 330 -- after reload
;;   ======================================================

;;	  0-->   142 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->   144 r1=0xd0                           :cortex_a8_default
;;	  3-->   143 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	  4-->   145 r0=call [`kstrdup']               :cortex_a8_issue_branch
;;	  4-->   150 r3=0x5                            :cortex_a8_default
;;	  5-->   151 [r4+0x20]=r3                      :cortex_a8_load_store_1
;;	 36-->   148 [r4+0xc4]=r0                      :cortex_a8_load_store_1
;;	 36-->   330 pc=L269                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 36
;;   new head = 142
;;   new tail = 330

;;   ======================================================
;;   -- basic block 14 from 156 to 157 -- after reload
;;   ======================================================

;;	  0-->   156 cc=cmp(r3,0x4000)                 :cortex_a8_default
;;	  2-->   157 pc={(cc!=0x0)?L217:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 156
;;   new tail = 157

;;   ======================================================
;;   -- basic block 15 from 160 to 189 -- after reload
;;   ======================================================

;;	  0-->   160 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	  1-->   162 r0=call [`sys_mkdir']             :cortex_a8_issue_branch
;;	  1-->   168 r2=[r4+0x68]                      :cortex_a8_load_store_1
;;	  2-->   167 r1=[r4+0x64]                      :cortex_a8_load_store_1
;;	  3-->   166 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	  4-->   169 r0=call [`sys_chown']             :cortex_a8_issue_branch
;;	  4-->   174 r1=zxn([r4+0xd8])                 :cortex_a8_load_store_1
;;	  5-->   173 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	  6-->   175 r0=call [`sys_chmod']             :cortex_a8_issue_branch
;;	  6-->   307 r3=`malloc_sizes'                 :cortex_a8_load_store_1
;;	  7-->   184 r1=0xd0                           :cortex_a8_default
;;	  7-->   177 r7=[r4+0x10]                      :cortex_a8_load_store_1
;;	  8-->   179 r6=[r4+0x6c]                      :cortex_a8_load_store_1
;;	  9-->   183 r0=[r3+0x4]                       :cortex_a8_load_store_1
;;	 10-->   185 r0=call [`kmem_cache_alloc']      :cortex_a8_issue_branch
;;	 42-->   188 {cc=cmp(r0,0x0);r5=r0;}           :cortex_a8_default
;;	 44-->   189 pc={(cc!=0x0)?L195:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 44
;;   new head = 160
;;   new tail = 189

;;   ======================================================
;;   -- basic block 16 from 192 to 193 -- after reload
;;   ======================================================

;;	  0-->   192 r0=`*.LC7'                        :cortex_a8_load_store_1
;;	  1-->   193 call [`panic']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 192
;;   new tail = 193

;;   ======================================================
;;   -- basic block 17 from 198 to 332 -- after reload
;;   ======================================================

;;	  0-->   198 [r5]=r5                           :cortex_a8_load_store_1
;;	  0-->   200 r0=r7                             :cortex_a8_default
;;	  1-->   199 [r5+0x4]=r5                       :cortex_a8_load_store_1
;;	  1-->   201 r1=0xd0                           :cortex_a8_default
;;	  2-->   202 r0=call [`kstrdup']               :cortex_a8_issue_branch
;;	  2-->   295 r3=r4                             :cortex_a8_default
;;	  3-->   205 [r5+0xc]=r6                       :cortex_a8_load_store_1
;;	 34-->   204 [r5+0x8]=r0                       :cortex_a8_load_store_1
;;	 35-->   207 r2=[pre r3+=0xb8]                 :cortex_a8_load_store_1
;;	 38-->   208 [r2+0x4]=r5                       :cortex_a8_load_store_1
;;	 39-->   209 [r5]=r2                           :cortex_a8_load_store_1
;;	 40-->   212 [r5+0x4]=r3                       :cortex_a8_load_store_1
;;	 41-->   214 [r4+0xb8]=r5                      :cortex_a8_load_store_1
;;	 41-->   332 pc=L269                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 41
;;   new head = 198
;;   new tail = 332

;;   ======================================================
;;   -- basic block 18 from 228 to 229 -- after reload
;;   ======================================================

;;	  0-->   228 cc=cmp(r3==0x2000|r3==0x6000,0x0) :cortex_a8_default
;;	  2-->   229 pc={(cc!=0x0)?L236:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 228
;;   new tail = 229

;;   ======================================================
;;   -- basic block 19 from 231 to 232 -- after reload
;;   ======================================================

;;	  0-->   231 cc=cmp(r3,0x1000)                 :cortex_a8_default
;;	  2-->   232 pc={(cc==0x0)?L236:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 231
;;   new tail = 232

;;   ======================================================
;;   -- basic block 20 from 234 to 235 -- after reload
;;   ======================================================

;;	  0-->   234 cc=cmp(r3,0xc000)                 :cortex_a8_default
;;	  2-->   235 pc={(cc!=0x0)?L269:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 234
;;   new tail = 235

;;   ======================================================
;;   -- basic block 21 from 238 to 241 -- after reload
;;   ======================================================

;;	  0-->   238 r0=call [`maybe_link']            :cortex_a8_issue_branch
;;	 32-->   240 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 34-->   241 pc={(cc!=0x0)?L269:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 34
;;   new head = 238
;;   new tail = 241

;;   ======================================================
;;   -- basic block 22 from 243 to 268 -- after reload
;;   ======================================================

;;	  0-->   243 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->   248 r1=zxn([r4+0xd8])                 :cortex_a8_load_store_1
;;	  4-->   249 r2=[r4+0x15c]                     :cortex_a8_load_store_1
;;	  5-->   247 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	  6-->   250 r0=call [`sys_mknod']             :cortex_a8_issue_branch
;;	  6-->   255 r1=[r4+0x64]                      :cortex_a8_load_store_1
;;	  7-->   256 r2=[r4+0x68]                      :cortex_a8_load_store_1
;;	  8-->   254 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	  9-->   257 r0=call [`sys_chown']             :cortex_a8_issue_branch
;;	  9-->   262 r1=zxn([r4+0xd8])                 :cortex_a8_load_store_1
;;	 10-->   261 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	 11-->   263 r0=call [`sys_chmod']             :cortex_a8_issue_branch
;;	 11-->   267 r1=[r4+0x6c]                      :cortex_a8_load_store_1
;;	 12-->   266 r0=[r4+0x10]                      :cortex_a8_load_store_1
;;	 13-->   268 r0=call [`do_utime']              :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 13
;;   new head = 243
;;   new tail = 268

;;   ======================================================
;;   -- basic block 23 from 275 to 318 -- after reload
;;   ======================================================

;;	  0-->   275 r0=0x0                            :cortex_a8_default
;;	  0-->   281 use r0                            :nothing
;;	  0-->   318 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 275
;;   new tail = 318





do_name

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={40d,34u} r1={38d,19u} r2={27d,7u} r3={30d,16u} r4={5d,43u,1d} r5={5d,19u,2d} r6={2d,3u} r7={2d,3u} r8={1d,2u} r12={20d} r13={2d,44u} r14={21d,2u} r15={20d} r16={20d} r17={20d} r18={20d} r19={20d} r20={20d} r21={20d} r22={20d} r23={20d} r24={34d,16u} r27={20d} r28={20d} r29={20d} r30={20d} r31={20d} r32={20d} r33={20d} r34={20d} r35={20d} r36={20d} r37={20d} r38={20d} r39={20d} r40={20d} r41={20d} r42={20d} r43={20d} r44={20d} r45={20d} r46={20d} r47={20d} r48={20d} r49={20d} r50={20d} r51={20d} r52={20d} r53={20d} r54={20d} r55={20d} r56={20d} r57={20d} r58={20d} r59={20d} r60={20d} r61={20d} r62={20d} r63={20d} r64={20d} r65={20d} r66={20d} r67={20d} r68={20d} r69={20d} r70={20d} r71={20d} r72={20d} r73={20d} r74={20d} r75={20d} r76={20d} r77={20d} r78={20d} r79={20d} r80={20d} r81={20d} r82={20d} r83={20d} r84={20d} r85={20d} r86={20d} r87={20d} r88={20d} r89={20d} r90={20d} r91={20d} r92={20d} r93={20d} r94={20d} r95={20d} r96={20d} r97={20d} r98={20d} r99={20d} r100={20d} r101={20d} r102={20d} r103={20d} r104={20d} r105={20d} r106={20d} r107={20d} r108={20d} r109={20d} r110={20d} r111={20d} r112={20d} r113={20d} r114={20d} r115={20d} r116={20d} r117={20d} r118={20d} r119={20d} r120={20d} r121={20d} r122={20d} r123={20d} r124={20d} r125={20d} r126={20d} r127={20d} 
;;    total ref usage 2638{2427d,208u,3e} in 125{105 regular + 20 call} insns.
(note 31 0 33 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 33 31 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 32 33 47 2 NOTE_INSN_FUNCTION_BEG)

(note 47 32 315 2 NOTE_INSN_DELETED)

(insn/f:TI 315 47 316 2 init/initramfs.c:294 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -24 [0xffffffffffffffe8])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 7 r7))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 16 [0x10])) [0 S4 A32])
                                (reg:SI 8 r8))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 20 [0x14])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 316 315 35 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 35 316 310 2 init/initramfs.c:295 (set (reg/f:SI 4 r4 [183])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 310 35 45 2 init/initramfs.c:295 (set (reg:SI 3 r3 [184])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 45 310 42 2 init/initramfs.c:297 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114dc5a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114dc5a0>)
        (nil)))

(insn:TI 42 45 37 2 init/initramfs.c:297 (set (reg/f:SI 5 r5 [orig:181 collected.373 ] [181])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(insn:TI 37 42 309 2 init/initramfs.c:295 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 3 r3 [184])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(insn 309 37 44 2 init/initramfs.c:296 (set (reg:SI 3 r3 [186])
        (plus:SI (reg:SI 3 r3 [186])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 7 [0x7])
        (nil)))

(insn:TI 44 309 40 2 init/initramfs.c:297 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:181 collected.373 ] [181])) 167 {*arm_movsi_insn} (nil))

(insn 40 44 46 2 init/initramfs.c:296 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 3 r3 [186])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [186])
        (expr_list:REG_EQUAL (const_int 7 [0x7])
            (nil))))

(call_insn/i:TI 46 40 49 2 init/initramfs.c:297 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41] <function_decl 0x51157680 strcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 49 46 52 2 init/initramfs.c:297 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 0 r0 [189])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(insn:TI 52 49 65 2 init/initramfs.c:297 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
            (reg:SI 0 r0 [189]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 0 r0 [189])
        (nil)))

(insn 65 52 50 2 init/initramfs.c:69 discrim 1 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 4 r4 [249])
            (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 220 [0xdc])))) 2268 {neon_vornv2di+1} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 220 [0xdc])))
        (nil)))

(jump_insn:TI 50 65 323 2 init/initramfs.c:297 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 294)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6667 [0x1a0b])
            (nil))))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  3 [33.3%]  (fallthru)
;; Succ edge  5 [66.7%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [33.3%]  (fallthru)
(note 323 50 325 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 325 323 326 3 (set (pc)
        (label_ref 324)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 326 325 67)

;; Start of basic block ( 5) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  5 [91.0%] 
(code_label 67 326 55 4 108 "" [1 uses])

(note 55 67 58 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 55 59 4 init/initramfs.c:71 (set (reg/f:SI 3 r3 [orig:192 <variable>.next ] [192])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 r0 [orig:170 D.26478 ] [170])
                (const_int 16 [0x10])) [0 <variable>.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg/f:SI 4 r4 [249])
                (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])) [0 S4 A32])
        (nil)))

(insn:TI 59 58 61 4 init/initramfs.c:71 (set (mem/f:SI (plus:SI (reg/f:SI 4 r4 [249])
                (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])) [0 S4 A32])
        (reg/f:SI 3 r3 [orig:192 <variable>.next ] [192])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:192 <variable>.next ] [192])
        (nil)))

(call_insn:TI 61 59 294 4 init/initramfs.c:72 (parallel [
            (call (mem:SI (symbol_ref:SI ("kfree") [flags 0x41] <function_decl 0x10c2b080 kfree>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 6 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  6 [96.9%]  (dfs_back)
;; Pred edge  4 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [66.7%] 
(code_label 294 61 293 5 121 "" [2 uses])

(note 293 294 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 66 293 68 5 init/initramfs.c:69 discrim 1 (set (reg/f:SI 0 r0 [orig:170 D.26478 ] [170])
        (mem/f:SI (plus:SI (reg/f:SI 4 r4 [249])
                (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f:SI (plus:SI (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
                (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 220 [0xdc])))) [0 S4 A32])
        (nil)))

(insn:TI 68 66 69 5 init/initramfs.c:69 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:170 D.26478 ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 69 68 70 5 init/initramfs.c:69 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 67)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 5 -> ( 4 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [91.0%] 
;; Succ edge  6 [9.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  5 [9.0%]  (fallthru)
(note 70 69 71 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 71 70 72 6 init/initramfs.c:69 discrim 1 (set (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
        (plus:SI (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn:TI 72 71 73 6 init/initramfs.c:68 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [orig:164 ivtmp.840 ] [164])
            (const_int 128 [0x80]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 73 72 327 6 init/initramfs.c:68 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 294)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9688 [0x25d8])
            (nil))))
;; End of basic block 6 -> ( 5 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [96.9%]  (dfs_back)
;; Succ edge  7 [3.1%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [3.1%]  (fallthru)
(note 327 73 328 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 328 327 329 7 (set (pc)
        (label_ref 269)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [100.0%]  (loop_exit)

(barrier 329 328 324)

;; Start of basic block ( 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [100.0%] 
(code_label 324 329 78 8 122 "" [1 uses])

(note 78 324 80 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 80 78 82 8 NOTE_INSN_DELETED)

(insn:TI 82 80 81 8 init/initramfs.c:301 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 81 82 83 8 init/initramfs.c:301 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:181 collected.373 ] [181])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 83 81 85 8 init/initramfs.c:301 (parallel [
            (call (mem:SI (symbol_ref:SI ("clean_path") [flags 0x3] <function_decl 0x114ad300 clean_path>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 85 83 86 8 init/initramfs.c:302 (set (reg:SI 1 r1 [orig:179 D.25990 ] [179])
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/c/i:HI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 216 [0xd8]))) [0 mode+0 S2 A16]))
        (nil)))

(insn:TI 86 85 87 8 init/initramfs.c:302 (set (reg:SI 3 r3 [orig:178 D.25991 ] [178])
        (and:SI (reg:SI 1 r1 [orig:179 D.25990 ] [179])
            (const_int 61440 [0xf000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 87 86 88 8 init/initramfs.c:302 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:178 D.25991 ] [178])
            (const_int 32768 [0x8000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 88 87 89 8 init/initramfs.c:302 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 154)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 8 -> ( 9 14)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  9 [0.0%]  (fallthru)
;; Succ edge  14 [100.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [0.0%]  (fallthru)
(note 89 88 91 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 91 89 90 9 NOTE_INSN_DELETED)

(call_insn:TI 90 91 92 9 init/initramfs.c:303 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("maybe_link") [flags 0x3] <function_decl 0x114ad200 maybe_link>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn:TI 92 90 93 9 init/initramfs.c:304 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:172 ml ] [172])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 93 92 94 9 init/initramfs.c:304 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 269)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1912 [0x778])
            (nil))))
;; End of basic block 9 -> ( 10 23)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  10 [80.9%]  (fallthru)
;; Succ edge  23 [19.1%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  9 [80.9%]  (fallthru)
(note 94 93 288 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 288 94 289 10 NOTE_INSN_DELETED)

(note 289 288 108 10 NOTE_INSN_DELETED)

(note 108 289 313 10 NOTE_INSN_DELETED)

(insn:TI 313 108 308 10 init/initramfs.c:308 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:172 ml ] [172])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:172 ml ] [172])
        (nil)))

(insn 308 313 109 10 init/initramfs.c:308 (set (reg:SI 1 r1 [248])
        (const_int 577 [0x241])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 577 [0x241])
        (nil)))

(insn:TI 109 308 314 10 init/initramfs.c:308 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(insn 314 109 111 10 init/initramfs.c:308 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1)
            (const_int 65 [0x41]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn:TI 111 314 112 10 init/initramfs.c:308 (set (reg:SI 2 r2)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(call_insn:TI 112 111 116 10 init/initramfs.c:308 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_open") [flags 0x41] <function_decl 0x1145e880 sys_open>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 116 112 115 10 init/initramfs.c:310 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:177 wfd.376 ] [177])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 115 116 117 10 init/initramfs.c:308 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])
        (reg:SI 0 r0 [orig:177 wfd.376 ] [177])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 117 115 118 10 init/initramfs.c:310 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 269)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3666 [0xe52])
            (nil))))
;; End of basic block 10 -> ( 11 23)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  11 [63.3%]  (fallthru)
;; Succ edge  23 [36.7%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [63.3%]  (fallthru)
(note 118 117 127 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 127 118 122 11 NOTE_INSN_DELETED)

(insn:TI 122 127 123 11 init/initramfs.c:311 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 100 [0x64]))) [0 uid+0 S4 A32])
        (nil)))

(insn:TI 123 122 124 11 init/initramfs.c:311 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 104 [0x68]))) [0 gid+0 S4 A32])
        (nil)))

(call_insn:TI 124 123 129 11 init/initramfs.c:311 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_fchown") [flags 0x41] <function_decl 0x1145eb80 sys_fchown>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 129 124 128 11 init/initramfs.c:312 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn:TI 128 129 130 11 init/initramfs.c:312 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
        (nil)))

(call_insn:TI 130 128 132 11 init/initramfs.c:312 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_fchmod") [flags 0x41] <function_decl 0x11458e80 sys_fchmod>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 132 130 133 11 init/initramfs.c:313 (set (reg:SI 1 r1 [orig:176 body_len.381 ] [176])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 92 [0x5c]))) [0 body_len+0 S4 A32])
        (nil)))

(insn:TI 133 132 134 11 init/initramfs.c:313 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:176 body_len.381 ] [176])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 134 133 135 11 init/initramfs.c:313 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 140)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [39.0%]  (fallthru)
;; Succ edge  13 [61.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  11 [39.0%]  (fallthru)
(note 135 134 137 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 137 135 139 12 init/initramfs.c:314 (set (reg:SI 0 r0)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 192 [0xc0])) [0 wfd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [183])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 192 [0xc0]))) [0 wfd+0 S4 A32])
            (nil))))

(call_insn:TI 139 137 140 12 init/initramfs.c:314 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_ftruncate") [flags 0x41] <function_decl 0x11452500 sys_ftruncate>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  11 [61.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
(code_label 140 139 141 13 113 "" [1 uses])

(note 141 140 146 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 146 141 142 13 NOTE_INSN_DELETED)

(insn:TI 142 146 144 13 init/initramfs.c:315 (set (reg/f:SI 4 r4 [209])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 144 142 143 13 init/initramfs.c:315 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 143 144 145 13 init/initramfs.c:315 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn:TI 145 143 150 13 init/initramfs.c:315 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kstrdup") [flags 0x41] <function_decl 0x10b92580 kstrdup>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 150 145 151 13 init/initramfs.c:316 (set (reg:SI 3 r3 [212])
        (const_int 5 [0x5])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 5 [0x5])
        (nil)))

(insn:TI 151 150 148 13 init/initramfs.c:316 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 3 r3 [212])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [212])
        (expr_list:REG_EQUAL (const_int 5 [0x5])
            (nil))))

(insn:TI 148 151 330 13 init/initramfs.c:315 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [209])
                (const_int 196 [0xc4])) [0 vcollected+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 330 148 331 13 (set (pc)
        (label_ref 269)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 331 330 154)

;; Start of basic block ( 8) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%] 
(code_label 154 331 155 14 110 "" [1 uses])

(note 155 154 156 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 156 155 157 14 init/initramfs.c:319 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:178 D.25991 ] [178])
            (const_int 16384 [0x4000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 157 156 158 14 init/initramfs.c:319 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 217)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 14 -> ( 15 18)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  15 [0.0%]  (fallthru)
;; Succ edge  18 [100.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  14 [0.0%]  (fallthru)
(note 158 157 172 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 172 158 180 15 NOTE_INSN_DELETED)

(note 180 172 186 15 ("found") NOTE_INSN_DELETED_LABEL 115)

(note 186 180 160 15 NOTE_INSN_DELETED)

(insn:TI 160 186 162 15 init/initramfs.c:320 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn:TI 162 160 168 15 init/initramfs.c:320 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_mkdir") [flags 0x41] <function_decl 0x11464c80 sys_mkdir>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 168 162 167 15 init/initramfs.c:321 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 104 [0x68]))) [0 gid+0 S4 A32])
        (nil)))

(insn:TI 167 168 166 15 init/initramfs.c:321 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 100 [0x64]))) [0 uid+0 S4 A32])
        (nil)))

(insn:TI 166 167 169 15 init/initramfs.c:321 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn:TI 169 166 174 15 init/initramfs.c:321 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chown") [flags 0x41] <function_decl 0x1145ea80 sys_chown>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 174 169 173 15 init/initramfs.c:322 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [183])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn:TI 173 174 175 15 init/initramfs.c:322 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn:TI 175 173 307 15 init/initramfs.c:322 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chmod") [flags 0x41] <function_decl 0x11458e00 sys_chmod>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 307 175 184 15 include/linux/slab_def.h:122 (set (reg/f:SI 3 r3 [222])
        (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
        (nil)))

(insn:TI 184 307 177 15 include/linux/slab_def.h:122 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(insn 177 184 179 15 init/initramfs.c:323 (set (reg/f:SI 7 r7 [orig:163 collected.860 ] [163])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(insn:TI 179 177 183 15 init/initramfs.c:323 (set (reg:SI 6 r6 [orig:174 mtime.383 ] [174])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 108 [0x6c]))) [0 mtime+0 S4 A32])
        (nil)))

(insn:TI 183 179 185 15 include/linux/slab_def.h:122 (set (reg:SI 0 r0)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [222])
                (const_int 4 [0x4])) [0 <variable>.cs_cachep+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [222])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (const:SI (plus:SI (symbol_ref:SI ("malloc_sizes") [flags 0xc0] <var_decl 0x10efe840 malloc_sizes>)
                        (const_int 4 [0x4]))) [0 <variable>.cs_cachep+0 S4 A32])
            (nil))))

(call_insn:TI 185 183 188 15 include/linux/slab_def.h:122 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmem_cache_alloc") [flags 0x41] <function_decl 0x10efa480 kmem_cache_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 188 185 189 15 init/initramfs.c:99 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 189 188 190 15 init/initramfs.c:99 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 195)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  16 [0.0%]  (fallthru)
;; Succ edge  17 [100.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  15 [0.0%]  (fallthru)
(note 190 189 192 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 192 190 193 16 init/initramfs.c:100 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11532800>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11532800>)
        (nil)))

(call_insn:TI 193 192 194 16 init/initramfs.c:100 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a86f00 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_NORETURN (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 16 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 194 193 195)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  15 [100.0%] 
(code_label 195 194 196 17 116 "" [1 uses])

(note 196 195 203 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 203 196 198 17 NOTE_INSN_DELETED)

(insn:TI 198 203 200 17 include/linux/list.h:26 (set (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168]) [0 <variable>.list.next+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:168 ret ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 200 198 199 17 init/initramfs.c:102 (set (reg:SI 0 r0)
        (reg/f:SI 7 r7 [orig:163 collected.860 ] [163])) 167 {*arm_movsi_insn} (nil))

(insn:TI 199 200 201 17 include/linux/list.h:27 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:168 ret ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 201 199 202 17 init/initramfs.c:102 (set (reg:SI 1 r1)
        (const_int 208 [0xd0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 202 201 295 17 init/initramfs.c:102 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kstrdup") [flags 0x41] <function_decl 0x10b92580 kstrdup>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 295 202 205 17 include/linux/list.h:62 (set (reg/f:SI 3 r3 [226])
        (reg/f:SI 4 r4 [183])) 167 {*arm_movsi_insn} (nil))

(insn:TI 205 295 204 17 init/initramfs.c:103 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (const_int 12 [0xc])) [0 <variable>.mtime+0 S4 A32])
        (reg:SI 6 r6 [orig:174 mtime.383 ] [174])) 167 {*arm_movsi_insn} (nil))

(insn:TI 204 205 207 17 init/initramfs.c:102 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (const_int 8 [0x8])) [0 <variable>.name+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 207 204 208 17 include/linux/list.h:62 (set (reg/f:SI 2 r2 [orig:169 D.26490 ] [169])
        (mem/s/f/j/c:SI (pre_modify:SI (reg/f:SI 3 r3 [226])
                (plus:SI (reg/f:SI 3 r3 [226])
                    (const_int 184 [0xb8]))) [0 dir_list.next+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 3 r3 [226])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 184 [0xb8]))) [0 dir_list.next+0 S4 A32])
            (nil))))

(insn:TI 208 207 209 17 include/linux/list.h:41 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 2 r2 [orig:169 D.26490 ] [169])
                (const_int 4 [0x4])) [0 <variable>.prev+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:168 ret ] [168])) 167 {*arm_movsi_insn} (nil))

(insn:TI 209 208 212 17 include/linux/list.h:42 (set (mem/s/f/j:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168]) [0 <variable>.list.next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:169 D.26490 ] [169])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:169 D.26490 ] [169])
        (nil)))

(insn:TI 212 209 214 17 include/linux/list.h:43 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:168 ret ] [168])
                (const_int 4 [0x4])) [0 <variable>.list.prev+0 S4 A32])
        (reg/f:SI 3 r3 [226])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [226])
        (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 184 [0xb8])))
            (nil))))

(insn:TI 214 212 332 17 include/linux/list.h:44 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 4 r4 [183])
                (const_int 184 [0xb8])) [0 dir_list.next+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:168 ret ] [168])) 167 {*arm_movsi_insn} (nil))

(jump_insn 332 214 333 17 (set (pc)
        (label_ref 269)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 333 332 217)

;; Start of basic block ( 14) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%] 
(code_label 217 333 218 18 114 "" [1 uses])

(note 218 217 219 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 219 218 220 18 NOTE_INSN_DELETED)

(note 220 219 222 18 NOTE_INSN_DELETED)

(note 222 220 223 18 NOTE_INSN_DELETED)

(note 223 222 225 18 NOTE_INSN_DELETED)

(note 225 223 226 18 NOTE_INSN_DELETED)

(note 226 225 227 18 NOTE_INSN_DELETED)

(note 227 226 228 18 NOTE_INSN_DELETED)

(insn:TI 228 227 229 18 init/initramfs.c:324 (set (reg:CC_DEQ 24 cc)
        (compare:CC_DEQ (ior:SI (eq:SI (reg:SI 3 r3 [orig:178 D.25991 ] [178])
                    (const_int 8192 [0x2000]))
                (eq:SI (reg:SI 3 r3 [orig:178 D.25991 ] [178])
                    (const_int 24576 [0x6000])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (nil))

(jump_insn:TI 229 228 230 18 init/initramfs.c:324 (set (pc)
        (if_then_else (ne (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (label_ref 236)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_DEQ 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 18 -> ( 21 19)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  21 [0.0%] 
;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
(note 230 229 231 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 231 230 232 19 init/initramfs.c:324 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:178 D.25991 ] [178])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 232 231 233 19 init/initramfs.c:324 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 236)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 19 -> ( 21 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  21 [0.0%] 
;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
(note 233 232 234 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 234 233 235 20 init/initramfs.c:324 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:178 D.25991 ] [178])
            (const_int 49152 [0xc000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:178 D.25991 ] [178])
        (nil)))

(jump_insn:TI 235 234 236 20 init/initramfs.c:324 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 269)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 20 -> ( 21 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  21 [0.0%]  (fallthru)
;; Succ edge  23 [100.0%] 

;; Start of basic block ( 18 19 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  18 [0.0%] 
;; Pred edge  19 [0.0%] 
;; Pred edge  20 [0.0%]  (fallthru)
(code_label 236 235 237 21 117 "" [2 uses])

(note 237 236 239 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 239 237 238 21 NOTE_INSN_DELETED)

(call_insn:TI 238 239 240 21 init/initramfs.c:326 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("maybe_link") [flags 0x3] <function_decl 0x114ad200 maybe_link>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn:TI 240 238 241 21 init/initramfs.c:326 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 241 240 242 21 init/initramfs.c:326 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 269)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  22 [0.0%]  (fallthru)
;; Succ edge  23 [100.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  21 [0.0%]  (fallthru)
(note 242 241 245 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 245 242 260 22 NOTE_INSN_DELETED)

(note 260 245 243 22 NOTE_INSN_DELETED)

(insn:TI 243 260 248 22 init/initramfs.c:327 (set (reg/f:SI 4 r4 [235])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 248 243 249 22 init/initramfs.c:327 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [235])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn:TI 249 248 247 22 init/initramfs.c:327 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 348 [0x15c])) [0 rdev+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 348 [0x15c]))) [0 rdev+0 S4 A32])
        (nil)))

(insn:TI 247 249 250 22 init/initramfs.c:327 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn:TI 250 247 255 22 init/initramfs.c:327 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_mknod") [flags 0x41] <function_decl 0x11458b80 sys_mknod>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 255 250 256 22 init/initramfs.c:328 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 100 [0x64]))) [0 uid+0 S4 A32])
        (nil)))

(insn:TI 256 255 254 22 init/initramfs.c:328 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 104 [0x68]))) [0 gid+0 S4 A32])
        (nil)))

(insn:TI 254 256 257 22 init/initramfs.c:328 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn:TI 257 254 262 22 init/initramfs.c:328 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chown") [flags 0x41] <function_decl 0x1145ea80 sys_chown>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 262 257 261 22 init/initramfs.c:329 (set (reg:SI 1 r1)
        (zero_extend:SI (mem/c/i:HI (plus:SI (reg/f:SI 4 r4 [235])
                    (const_int 216 [0xd8])) [0 mode+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn:TI 261 262 263 22 init/initramfs.c:329 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn:TI 263 261 267 22 init/initramfs.c:329 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sys_chmod") [flags 0x41] <function_decl 0x11458e00 sys_chmod>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 267 263 266 22 init/initramfs.c:330 (set (reg:SI 1 r1)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 108 [0x6c]))) [0 mtime+0 S4 A32])
        (nil)))

(insn:TI 266 267 268 22 init/initramfs.c:330 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [235])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(call_insn:TI 268 266 269 22 init/initramfs.c:330 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_utime") [flags 0x3] <function_decl 0x11487700 do_utime>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 22 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 20 7 10 13 9 22 21 17) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  20 [100.0%] 
;; Pred edge  7 [100.0%]  (loop_exit)
;; Pred edge  10 [36.7%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  9 [19.1%] 
;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  21 [100.0%] 
;; Pred edge  17 [100.0%] 
(code_label 269 268 270 23 109 "" [7 uses])

(note 270 269 275 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn:TI 275 270 281 23 init/initramfs.c:334 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 281 275 317 23 init/initramfs.c:334 (use (reg/i:SI 0 r0)) -1 (nil))

(note 317 281 318 23 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 318 317 319 23 init/initramfs.c:334 (return) 260 {return} (nil))
;; End of basic block 23 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 319 318 306)

(note 306 319 311 NOTE_INSN_DELETED)

(note 311 306 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_collect (do_collect)[0:1322] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 83 to 87 -- after reload
;;   ======================================================

;;	  0-->    83 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     5 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  4-->     8 r3=[r4+0x8]                       :cortex_a8_load_store_1
;;	  5-->     6 r5=[r4+0x28]                      :cortex_a8_load_store_1
;;	  6-->    18 r1=[r4+0xc]                       :cortex_a8_load_store_1
;;	  7-->     9 {r5=umin(r5,r3);clobber cc;}      :cortex_a8_default
;;	  7-->    17 r0=[r4+0x24]                      :cortex_a8_load_store_1
;;	  8-->    19 r2=r5                             :cortex_a8_default
;;	  9-->    20 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  9-->    30 r2=[r4+0x18]                      :cortex_a8_load_store_1
;;	 10-->    44 r0=[r4+0x28]                      :cortex_a8_load_store_1
;;	 11-->    81 {cc=cmp(r2+r5,r2);r6=r2+r5;}      :cortex_a8_default
;;	 11-->    24 r1=[r4+0xc]                       :cortex_a8_load_store_1
;;	 12-->    45 r0=r0-r5                          :cortex_a8_default
;;	 12-->    82 r7=ltu(cc,0x0)+r3+0x0             :cortex_a8_default
;;	 13-->    48 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 13-->    35 r3=[r4+0x8]                       :cortex_a8_load_store_1
;;	 14-->    40 r2=[r4+0x24]                      :cortex_a8_load_store_1
;;	 14-->    25 r1=r1+r5                          :cortex_a8_default
;;	 15-->    36 r3=r3-r5                          :cortex_a8_default
;;	 15-->    37 [r4+0x8]=r3                       :cortex_a8_load_store_1
;;	 16-->    58 (!cc) r3=[r4+0x2c]                :cortex_a8_load_store_1
;;	 16-->    41 r5=r2+r5                          :cortex_a8_default
;;	 17-->    47 [r4+0x28]=r0                      :cortex_a8_load_store_1
;;	 17-->    51 (cc) r0=0x1                       :cortex_a8_default
;;	 18-->    26 [r4+0xc]=r1                       :cortex_a8_load_store_1
;;	 19-->    32 [r4+0x18]=r6                      :cortex_a8_load_store_1
;;	 20-->    42 [r4+0x24]=r5                      :cortex_a8_load_store_1
;;	 21-->    59 (!cc) [r4+0x20]=r3                :cortex_a8_load_store_1
;;	 21-->    73 use r0                            :nothing
;;	 22-->    87 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 22
;;   new head = 83
;;   new tail = 87





do_collect

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={5d,3u} r2={5d,5u} r3={7d,6u} r4={2d,18u,11d} r5={4d,11u} r6={2d,3u} r7={2d,3u} r8={1d,2u} r12={1d} r13={2d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={4d,4u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 232{153d,68u,11e} in 31{30 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 2 13 2 NOTE_INSN_DELETED)

(note 13 11 28 2 NOTE_INSN_DELETED)

(note 28 13 83 2 NOTE_INSN_DELETED)

(insn/f:TI 83 28 84 2 init/initramfs.c:205 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -24 [0xffffffffffffffe8])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 8 r8))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 84 83 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 84 8 2 init/initramfs.c:206 (set (reg/f:SI 4 r4 [138])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 8 5 6 2 init/initramfs.c:206 (set (reg:SI 3 r3 [orig:140 count ] [140])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn:TI 6 8 18 2 init/initramfs.c:206 (set (reg/v:SI 5 r5 [orig:134 n ] [134])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 40 [0x28]))) [0 remains+0 S4 A32])
            (nil))))

(insn:TI 18 6 9 2 init/initramfs.c:209 (set (reg:SI 1 r1)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 9 18 17 2 init/initramfs.c:206 (parallel [
            (set (reg/v:SI 5 r5 [orig:133 n.896 ] [133])
                (umin:SI (reg/v:SI 5 r5 [orig:134 n ] [134])
                    (reg:SI 3 r3 [orig:140 count ] [140])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:140 count ] [140])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 17 9 19 2 init/initramfs.c:209 (set (reg:SI 0 r0)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 19 17 20 2 init/initramfs.c:209 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:133 n.896 ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 20 19 30 2 init/initramfs.c:209 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x1150cc00 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 30 20 44 2 init/initramfs.c:173 (set (reg:DI 2 r2 [orig:156 this_header ] [156])
        (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
            (nil))))

(insn:TI 44 30 81 2 init/initramfs.c:212 (set (reg:SI 0 r0 [orig:167 remains ] [167])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 40 [0x28]))) [0 remains+0 S4 A32])
            (nil))))

(insn:TI 81 44 24 2 init/initramfs.c:173 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 2 r2 [orig:156 this_header ] [156])
                        (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))
                    (reg:SI 2 r2 [orig:156 this_header ] [156])))
            (set (reg:SI 6 r6 [157])
                (plus:SI (reg:SI 2 r2 [orig:156 this_header ] [156])
                    (reg/v:SI 5 r5 [orig:133 n.896 ] [133])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:156 this_header ] [156])
        (nil)))

(insn 24 81 45 2 init/initramfs.c:172 (set (reg/f:SI 1 r1 [orig:151 victim ] [151])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn:TI 45 24 82 2 init/initramfs.c:212 (set (reg:SI 0 r0 [orig:136 remains.342 ] [136])
        (minus:SI (reg:SI 0 r0 [orig:167 remains ] [167])
            (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))) 28 {*arm_subsi3_insn} (nil))

(insn 82 45 48 2 init/initramfs.c:173 (set (reg:SI 7 r7 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 3 r3 [ this_header+4 ])
                (const_int 0 [0x0])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [ this_header+4 ])
            (nil))))

(insn:TI 48 82 35 2 init/initramfs.c:212 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:136 remains.342 ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 35 48 40 2 init/initramfs.c:174 (set (reg:SI 3 r3 [orig:160 count ] [160])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 count+0 S4 A32])
            (nil))))

(insn:TI 40 35 25 2 init/initramfs.c:211 (set (reg/f:SI 2 r2 [orig:164 collect ] [164])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 36 [0x24]))) [0 collect+0 S4 A32])
            (nil))))

(insn 25 40 36 2 init/initramfs.c:172 (set (reg:SI 1 r1 [152])
        (plus:SI (reg/f:SI 1 r1 [orig:151 victim ] [151])
            (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn:TI 36 25 37 2 init/initramfs.c:174 (set (reg:SI 3 r3 [161])
        (minus:SI (reg:SI 3 r3 [orig:160 count ] [160])
            (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn 37 36 58 2 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 3 r3 [161])) 167 {*arm_movsi_insn} (nil))

(insn:TI 58 37 41 2 init/initramfs.c:214 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [orig:171 next_state ] [171])
            (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                    (const_int 44 [0x2c])) [0 next_state+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 44 [0x2c]))) [0 next_state+0 S4 A32])
            (nil))))

(insn 41 58 47 2 init/initramfs.c:211 (set (reg:SI 5 r5 [165])
        (plus:SI (reg/f:SI 2 r2 [orig:164 collect ] [164])
            (reg/v:SI 5 r5 [orig:133 n.896 ] [133]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:164 collect ] [164])
        (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                    (const_int 36 [0x24])) [0 collect+0 S4 A32])
            (nil))))

(insn:TI 47 41 51 2 init/initramfs.c:212 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (reg:SI 0 r0 [orig:136 remains.342 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 51 47 26 2 init/initramfs.c:213 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:135 D.25859 ] [135])
            (const_int 1 [0x1]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 26 51 32 2 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 1 r1 [152])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [152])
        (nil)))

(insn:TI 32 26 42 2 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 6 r6 [157])) 163 {*arm_movdi} (nil))

(insn:TI 42 32 59 2 init/initramfs.c:211 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (reg:SI 5 r5 [165])) 167 {*arm_movsi_insn} (nil))

(insn:TI 59 42 73 2 init/initramfs.c:214 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [138])
                    (const_int 32 [0x20])) [0 state+0 S4 A32])
            (reg:SI 3 r3 [orig:171 next_state ] [171]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [orig:171 next_state ] [171])
            (nil))))

(insn 73 59 87 2 init/initramfs.c:216 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn:TI 87 73 86 2 init/initramfs.c:216 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 86 87 79)

(note 79 86 80 NOTE_INSN_DELETED)

(note 80 79 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function do_header (do_header)[0:1323] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 34 count 44 (  1.8)


do_header

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={20d,20u} r1={15d,16u} r2={15d,18u} r3={11d,36u,7d} r4={15d,24u,2d} r5={8d,11u} r6={7d,11u} r7={7d,9u} r8={5d,10u} r9={4d,5u} r10={3d,5u} r11={4d,5u} r12={9d,5u} r13={3d,50u,12d} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={18d,16u} r25={2d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 855{589d,243u,23e} in 155{151 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 5 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 2 )->[3]->( 21 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 3 )->[4]->( 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 2 )->[5]->( 6 9 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 5 )->[6]->( 7 21 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 7 4 )->[8]->( 23 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 5 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 5 [r5] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 10 9 )->[10]->( 10 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 10 )->[11]->( 22 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 11 )->[12]->( 13 15 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 12 )->[13]->( 22 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 13 )->[14]->( 23 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 7 [r7] 11 [fp]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 7 [r7] 11 [fp]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 12 )->[15]->( 17 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 15 )->[16]->( 17 22 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 15 16 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 17 )->[18]->( 20 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 17 )->[19]->( 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 19 18 )->[20]->( 23 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 6 3 )->[21]->( 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 13 11 16 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 22 14 20 8 21 )->[23]->( 1 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 23 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 17 to worklist
  Adding insn 13 to worklist
  Adding insn 315 to worklist
  Adding insn 22 to worklist
  Adding insn 335 to worklist
  Adding insn 40 to worklist
  Adding insn 36 to worklist
  Adding insn 45 to worklist
  Adding insn 337 to worklist
  Adding insn 49 to worklist
  Adding insn 57 to worklist
  Adding insn 82 to worklist
  Adding insn 77 to worklist
  Adding insn 74 to worklist
  Adding insn 68 to worklist
  Adding insn 151 to worklist
  Adding insn 129 to worklist
  Adding insn 105 to worklist
  Adding insn 90 to worklist
  Adding insn 147 to worklist
  Adding insn 126 to worklist
  Adding insn 111 to worklist
  Adding insn 108 to worklist
  Adding insn 102 to worklist
  Adding insn 99 to worklist
  Adding insn 96 to worklist
  Adding insn 93 to worklist
  Adding insn 86 to worklist
  Adding insn 298 to worklist
  Adding insn 296 to worklist
  Adding insn 295 to worklist
  Adding insn 155 to worklist
  Adding insn 158 to worklist
  Adding insn 339 to worklist
  Adding insn 163 to worklist
  Adding insn 175 to worklist
  Adding insn 165 to worklist
  Adding insn 172 to worklist
  Adding insn 169 to worklist
  Adding insn 182 to worklist
  Adding insn 185 to worklist
  Adding insn 193 to worklist
  Adding insn 341 to worklist
  Adding insn 201 to worklist
  Adding insn 206 to worklist
  Adding insn 209 to worklist
  Adding insn 203 to worklist
  Adding insn 223 to worklist
  Adding insn 226 to worklist
  Adding insn 220 to worklist
  Adding insn 218 to worklist
  Adding insn 343 to worklist
  Adding insn 216 to worklist
  Adding insn 345 to worklist
  Adding insn 319 to worklist
  Adding insn 250 to worklist
Finished finding needed instructions:
processing block 23 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
processing block 21 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 232 to worklist
processing block 8 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
processing block 4 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
processing block 3 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 291 to worklist
  Adding insn 27 to worklist
  Adding insn 21 to worklist
  Adding insn 20 to worklist
processing block 7 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 290 to worklist
  Adding insn 50 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 44 to worklist
  Adding insn 43 to worklist
processing block 22 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 237 to worklist
processing block 14 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 176 to worklist
  Adding insn 174 to worklist
  Adding insn 171 to worklist
  Adding insn 168 to worklist
  Adding insn 300 to worklist
  Adding insn 167 to worklist
  Adding insn 161 to worklist
processing block 13 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 157 to worklist
processing block 20 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
processing block 18 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 210 to worklist
  Adding insn 200 to worklist
  Adding insn 208 to worklist
  Adding insn 301 to worklist
  Adding insn 205 to worklist
  Adding insn 196 to worklist
processing block 19 lr out =  0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 277 to worklist
  Adding insn 227 to worklist
  Adding insn 225 to worklist
processing block 17 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 192 to worklist
  Adding insn 189 to worklist
  Adding insn 191 to worklist
  Adding insn 188 to worklist
processing block 16 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 184 to worklist
processing block 15 lr out =  1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 181 to worklist
processing block 12 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 154 to worklist
  Adding insn 153 to worklist
processing block 11 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 278 to worklist
  Adding insn 279 to worklist
  Adding insn 280 to worklist
  Adding insn 281 to worklist
  Adding insn 282 to worklist
  Adding insn 283 to worklist
  Adding insn 284 to worklist
  Adding insn 285 to worklist
  Adding insn 314 to worklist
  Adding insn 313 to worklist
  Adding insn 312 to worklist
  Adding insn 311 to worklist
  Adding insn 125 to worklist
  Adding insn 122 to worklist
  Adding insn 121 to worklist
  Adding insn 150 to worklist
  Adding insn 274 to worklist
  Adding insn 310 to worklist
  Adding insn 309 to worklist
  Adding insn 297 to worklist
  Adding insn 119 to worklist
  Adding insn 88 to worklist
  Adding insn 148 to worklist
  Adding insn 308 to worklist
  Adding insn 307 to worklist
  Adding insn 306 to worklist
  Adding insn 305 to worklist
  Adding insn 304 to worklist
  Adding insn 303 to worklist
  Adding insn 132 to worklist
  Adding insn 273 to worklist
  Adding insn 135 to worklist
  Adding insn 115 to worklist
  Adding insn 289 to worklist
  Adding insn 288 to worklist
  Adding insn 103 to worklist
  Adding insn 131 to worklist
  Adding insn 130 to worklist
  Adding insn 127 to worklist
  Adding insn 84 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 81 to worklist
  Adding insn 79 to worklist
  Adding insn 259 to worklist
  Adding insn 258 to worklist
  Adding insn 71 to worklist
  Adding insn 78 to worklist
  Adding insn 65 to worklist
  Adding insn 257 to worklist
  Adding insn 66 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 76 to worklist
  Adding insn 61 to worklist
  Adding insn 59 to worklist
  Adding insn 58 to worklist
processing block 5 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 39 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
  Adding insn 33 to worklist
processing block 2 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 16 to worklist
  Adding insn 10 to worklist
  Adding insn 8 to worklist
  Adding insn 11 to worklist
  Adding insn 12 to worklist
  Adding insn 7 to worklist
  Adding insn 316 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 34 count 46 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 315 to 17 -- after reload
;;   ======================================================

;;	  0-->   315 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     7 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->   316 sp=sp-0x5c                        :cortex_a8_default
;;	  2-->    12 r2=0x6                            :cortex_a8_default
;;	  3-->    11 r1=`*.LC8'                        :cortex_a8_load_store_1
;;	  4-->     8 r5=[r4+0x10]                      :cortex_a8_load_store_1
;;	  6-->    10 r0=r5                             :cortex_a8_default
;;	  7-->    13 r0=call [`memcmp']                :cortex_a8_issue_branch
;;	 39-->    16 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 41-->    17 pc={(cc!=0x0)?L30:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 41
;;   new head = 315
;;   new tail = 17

;;   ======================================================
;;   -- basic block 3 from 20 to 22 -- after reload
;;   ======================================================

;;	  0-->    20 r3=[r4]                           :cortex_a8_load_store_1
;;	  2-->    21 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  3-->    27 (!cc) r0=r0+0x1                   :cortex_a8_default
;;	  4-->   291 (!cc) r3=`*.LC9'                  :cortex_a8_load_store_1
;;	  4-->    22 pc={(cc!=0x0)?L230:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 20
;;   new tail = 22

;;   ======================================================
;;   -- basic block 4 from 335 to 335 -- after reload
;;   ======================================================

;;	  0-->   335 pc=L328                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 335
;;   new tail = 335

;;   ======================================================
;;   -- basic block 5 from 33 to 40 -- after reload
;;   ======================================================

;;	  0-->    33 r0=r5                             :cortex_a8_default
;;	  0-->    34 r1=`*.LC10'                       :cortex_a8_load_store_1
;;	  1-->    35 r2=0x6                            :cortex_a8_default
;;	  2-->    36 r0=call [`memcmp']                :cortex_a8_issue_branch
;;	 34-->    39 {cc=cmp(r0,0x0);r0=r0;}           :cortex_a8_default
;;	 36-->    40 pc={(cc==0x0)?L53:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 33
;;   new tail = 40

;;   ======================================================
;;   -- basic block 6 from 43 to 45 -- after reload
;;   ======================================================

;;	  0-->    43 r3=[r4]                           :cortex_a8_load_store_1
;;	  2-->    44 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->    45 pc={(cc!=0x0)?L230:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 43
;;   new tail = 45

;;   ======================================================
;;   -- basic block 7 from 50 to 290 -- after reload
;;   ======================================================

;;	  0-->   290 r3=`*.LC11'                       :cortex_a8_load_store_1
;;	  0-->    50 r0=0x1                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 50
;;   new tail = 290

;;   ======================================================
;;   -- basic block 8 from 49 to 337 -- after reload
;;   ======================================================

;;	  0-->    49 [r4]=r3                           :cortex_a8_load_store_1
;;	  0-->   337 pc=L238                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 49
;;   new tail = 337

;;   ======================================================
;;   -- basic block 9 from 58 to 57 -- after reload
;;   ======================================================

;;	  0-->    58 r5=r5+0x6                         :cortex_a8_default
;;	  0-->    59 r4=r0                             :cortex_a8_default
;;	  1-->    61 r6=sp+0x4c                        :cortex_a8_default
;;	  1-->    76 r7=sp+0x1c                        :cortex_a8_default
;;	  2-->    57 [sp+0x54]=r0                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 58
;;   new tail = 57

;;   ======================================================
;;   -- basic block 10 from 66 to 82 -- after reload
;;   ======================================================

;;	  0-->    66 r1=r5                             :cortex_a8_default
;;	  0-->   257 r2=0x8                            :cortex_a8_default
;;	  1-->    65 r0=r6                             :cortex_a8_default
;;	  1-->    78 r5=r5+r2                          :cortex_a8_default
;;	  2-->    68 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	  2-->    71 r0=r6                             :cortex_a8_default
;;	  3-->   258 r1=0x0                            :cortex_a8_default
;;	  3-->   259 r2=0x10                           :cortex_a8_default
;;	  4-->    74 r0=call [`simple_strtoul']        :cortex_a8_issue_branch
;;	 36-->    77 [r7+r4]=r0                        :cortex_a8_load_store_1
;;	 36-->    79 r4=r4+0x4                         :cortex_a8_default
;;	 37-->    81 cc=cmp(r4,0x30)                   :cortex_a8_default
;;	 39-->    82 pc={(cc!=0x0)?L80:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 39
;;   new head = 66
;;   new tail = 82

;;   ======================================================
;;   -- basic block 11 from 84 to 151 -- after reload
;;   ======================================================

;;	  0-->    84 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->   127 r0=[sp+0x48]                      :cortex_a8_load_store_1
;;	  2-->   289 r6=[sp+0x40]                      :cortex_a8_load_store_1
;;	  3-->   288 r2=[sp+0x44]                      :cortex_a8_load_store_1
;;	  3-->   130 r7=r0+0x1                         :cortex_a8_default
;;	  4-->   135 r4=[r3+0x18]                      :cortex_a8_load_store_1
;;	  4-->   131 r7=r7&0xfffffffffffffffc          :cortex_a8_default
;;	  5-->   115 r6=r6<<0x14|r2                    :cortex_a8_default
;;	  5-->   132 r2=r7+0x2                         :cortex_a8_default
;;	  6-->   303 {cc=cmp(r4+r2,r4);r8=r4+r2;}      :cortex_a8_default
;;	  6-->   103 r1=[sp+0x34]                      :cortex_a8_load_store_1
;;	  7-->   304 r9=ltu(cc,0x0)+r5+0x0             :cortex_a8_default
;;	  7-->   273 ip=0xfff00                        :cortex_a8_load_store_1
;;	  8-->   296 [sp+0x10]=r8                      :cortex_a8_load_store_1
;;	  8-->   305 r8=0x3                            :cortex_a8_default
;;	  9-->   297 sl=[sp+0x10]                      :cortex_a8_load_store_1
;;	  9-->   307 {cc=cmp(r8+r1,r8);r4=r8+r1;}      :cortex_a8_default
;;	 10-->   295 [sp+0x4]=r7                       :cortex_a8_load_store_1
;;	 10-->   119 r7=r6 0>>0x14                     :cortex_a8_default
;;	 11-->   306 r9=0x0                            :cortex_a8_default
;;	 11-->   274 ip=r6&ip                          :cortex_a8_default
;;	 12-->   121 r6=r6&0xff                        :cortex_a8_default
;;	 12-->   308 r5=ltu(cc,0x0)+r9+0x0             :cortex_a8_default
;;	 13-->   122 r6=r7<<0x8|r6                     :cortex_a8_default
;;	 13-->   309 {cc=cmp(r4+sl,r4);r4=r4+sl;}      :cortex_a8_default
;;	 14-->   311 sl=0xfffffffffffffffc             :cortex_a8_default
;;	 14-->   125 ip=ip<<0xc|r6                     :cortex_a8_default
;;	 15-->   313 r6=r4&sl                          :cortex_a8_default
;;	 15-->   285 r4=[sp+0x1c]                      :cortex_a8_load_store_1
;;	 16-->   148 r9=r0-0x1                         :cortex_a8_default
;;	 16-->    88 r8=zxn([sp+0x20])                 :cortex_a8_load_store_1
;;	 17-->   310 r5=ltu(cc,0x0)+r5+fp              :cortex_a8_default
;;	 17-->   150 cc=cmp(r9,0x1000)                 :cortex_a8_default
;;	 18-->    86 [r3+0xd4]=r4                      :cortex_a8_load_store_1
;;	 18-->   312 fp=0xffffffffffffffff             :cortex_a8_default
;;	 19-->   284 r4=[sp+0x24]                      :cortex_a8_load_store_1
;;	 19-->   314 r7=r5&fp                          :cortex_a8_default
;;	 20-->   126 [r3+0x15c]=ip                     :cortex_a8_load_store_1
;;	 20-->   278 ip=0x3                            :cortex_a8_default
;;	 21-->   298 [r3+0x30]=r6                      :cortex_a8_load_store_1
;;	 22-->    93 [r3+0x64]=r4                      :cortex_a8_load_store_1
;;	 23-->   283 r4=[sp+0x28]                      :cortex_a8_load_store_1
;;	 24-->   147 [r3+0x20]=ip                      :cortex_a8_load_store_1
;;	 25-->    90 [r3+0xd8]=r8                      :cortex_a8_load_store_1
;;	 26-->    96 [r3+0x68]=r4                      :cortex_a8_load_store_1
;;	 27-->   282 r4=[sp+0x2c]                      :cortex_a8_load_store_1
;;	 28-->   105 [r3+0x5c]=r1                      :cortex_a8_load_store_1
;;	 29-->   129 [r3+0x60]=r0                      :cortex_a8_load_store_1
;;	 30-->    99 [r3+0xc8]=r4                      :cortex_a8_load_store_1
;;	 31-->   281 r4=[sp+0x30]                      :cortex_a8_load_store_1
;;	 34-->   102 [r3+0x6c]=r4                      :cortex_a8_load_store_1
;;	 35-->   280 r4=[sp+0x38]                      :cortex_a8_load_store_1
;;	 38-->   108 [r3+0xcc]=r4                      :cortex_a8_load_store_1
;;	 39-->   279 r4=[sp+0x3c]                      :cortex_a8_load_store_1
;;	 42-->   111 [r3+0xd0]=r4                      :cortex_a8_load_store_1
;;	 42-->   151 pc={(geu(cc,0x0))?L235:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 42
;;   new head = 84
;;   new tail = 151

;;   ======================================================
;;   -- basic block 12 from 153 to 155 -- after reload
;;   ======================================================

;;	  0-->   153 r8=r8&0xf000                      :cortex_a8_default
;;	  1-->   154 cc=cmp(r8,0xa000)                 :cortex_a8_default
;;	  3-->   155 pc={(cc!=0x0)?L179:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 153
;;   new tail = 155

;;   ======================================================
;;   -- basic block 13 from 157 to 158 -- after reload
;;   ======================================================

;;	  0-->   157 cc=cmp(r1,0x1000)                 :cortex_a8_default
;;	  2-->   158 pc={(gtu(cc,0x0))?L235:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 157
;;   new tail = 158

;;   ======================================================
;;   -- basic block 14 from 161 to 339 -- after reload
;;   ======================================================

;;	  0-->   161 r2=[r3+0x70]                      :cortex_a8_load_store_1
;;	  0-->   167 r1=r1+0x2                         :cortex_a8_default
;;	  1-->   300 fp=[sp+0x4]                       :cortex_a8_load_store_1
;;	  1-->   176 r0=0x0                            :cortex_a8_default
;;	  3-->   168 r7=r1+fp                          :cortex_a8_default
;;	  3-->   165 [r3+0x24]=r2                      :cortex_a8_load_store_1
;;	  4-->   171 r1=0x6                            :cortex_a8_default
;;	  4-->   169 [r3+0x28]=r7                      :cortex_a8_load_store_1
;;	  5-->   172 [r3+0x2c]=r1                      :cortex_a8_load_store_1
;;	  5-->   174 r1=0x1                            :cortex_a8_default
;;	  6-->   163 [r3+0x10]=r2                      :cortex_a8_load_store_1
;;	  7-->   175 [r3+0x20]=r1                      :cortex_a8_load_store_1
;;	  7-->   339 pc=L238                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 161
;;   new tail = 339

;;   ======================================================
;;   -- basic block 15 from 181 to 182 -- after reload
;;   ======================================================

;;	  0-->   181 cc=cmp(r8,0x8000)                 :cortex_a8_default
;;	  2-->   182 pc={(cc==0x0)?L186:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 181
;;   new tail = 182

;;   ======================================================
;;   -- basic block 16 from 184 to 185 -- after reload
;;   ======================================================

;;	  0-->   184 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  2-->   185 pc={(cc!=0x0)?L235:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 184
;;   new tail = 185

;;   ======================================================
;;   -- basic block 17 from 188 to 193 -- after reload
;;   ======================================================

;;	  0-->   188 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->   191 r0=[r3+0x8]                       :cortex_a8_load_store_1
;;	  4-->   189 r1=[r3+0x74]                      :cortex_a8_load_store_1
;;	  5-->   192 cc=cmp(r0,r2)                     :cortex_a8_default
;;	  7-->   193 pc={(ltu(cc,0x0))?L213:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 188
;;   new tail = 193

;;   ======================================================
;;   -- basic block 18 from 196 to 341 -- after reload
;;   ======================================================

;;	  0-->   301 r4=[sp+0x10]                      :cortex_a8_load_store_1
;;	  0-->   205 r0=r0-r2                          :cortex_a8_default
;;	  1-->   196 r1=[r3+0xc]                       :cortex_a8_load_store_1
;;	  1-->   208 ip=0x4                            :cortex_a8_default
;;	  2-->   206 [r3+0x8]=r0                       :cortex_a8_load_store_1
;;	  2-->   210 r0=0x0                            :cortex_a8_default
;;	  3-->   200 r2=r1+r2                          :cortex_a8_default
;;	  3-->   203 [r3+0x18]=r4                      :cortex_a8_load_store_1
;;	  4-->   209 [r3+0x20]=ip                      :cortex_a8_load_store_1
;;	  5-->   201 [r3+0xc]=r2                       :cortex_a8_load_store_1
;;	  5-->   341 pc=L323                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 196
;;   new tail = 341

;;   ======================================================
;;   -- basic block 19 from 218 to 223 -- after reload
;;   ======================================================

;;	  0-->   227 r0=0x0                            :cortex_a8_default
;;	  0-->   220 [r3+0x28]=r2                      :cortex_a8_load_store_1
;;	  1-->   225 r2=0x1                            :cortex_a8_default
;;	  1-->   218 [r3+0x24]=r1                      :cortex_a8_load_store_1
;;	  2-->   226 [r3+0x20]=r2                      :cortex_a8_load_store_1
;;	  2-->   277 r2=r2+0x3                         :cortex_a8_default
;;	  3-->   223 [r3+0x2c]=r2                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 218
;;   new tail = 223

;;   ======================================================
;;   -- basic block 20 from 216 to 343 -- after reload
;;   ======================================================

;;	  0-->   216 [r3+0x10]=r1                      :cortex_a8_load_store_1
;;	  0-->   343 pc=L238                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 216
;;   new tail = 343

;;   ======================================================
;;   -- basic block 21 from 232 to 345 -- after reload
;;   ======================================================

;;	  0-->   232 r0=0x1                            :cortex_a8_default
;;	  0-->   345 pc=L238                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 232
;;   new tail = 345

;;   ======================================================
;;   -- basic block 22 from 237 to 237 -- after reload
;;   ======================================================

;;	  0-->   237 r0=0x0                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 237
;;   new tail = 237

;;   ======================================================
;;   -- basic block 23 from 250 to 319 -- after reload
;;   ======================================================

;;	  0-->   250 use r0                            :nothing
;;	  0-->   319 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 250
;;   new tail = 319





do_header

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={20d,20u} r1={15d,16u} r2={15d,18u} r3={11d,36u,7d} r4={15d,24u,2d} r5={8d,11u} r6={7d,11u} r7={7d,9u} r8={5d,10u} r9={4d,5u} r10={3d,5u} r11={4d,5u} r12={9d,5u} r13={3d,50u,12d} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={18d,16u} r25={2d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 855{589d,243u,23e} in 155{151 regular + 4 call} insns.
(note 3 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 3 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 14 2 NOTE_INSN_FUNCTION_BEG)

(note 14 4 315 2 NOTE_INSN_DELETED)

(insn/f:TI 315 14 7 2 init/initramfs.c:219 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -36 [0xffffffffffffffdc])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 7 r7))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 16 [0x10])) [0 S4 A32])
                                (reg:SI 8 r8))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 20 [0x14])) [0 S4 A32])
                                (reg:SI 9 r9))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 24 [0x18])) [0 S4 A32])
                                (reg:SI 10 sl))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 28 [0x1c])) [0 S4 A32])
                                (reg:SI 11 fp))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 32 [0x20])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(insn:TI 7 315 316 2 init/initramfs.c:220 (set (reg/f:SI 4 r4 [156])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn/f:TI 316 7 317 2 init/initramfs.c:219 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -92 [0xffffffffffffffa4]))) 4 {*arm_addsi3} (nil))

(note 317 316 12 2 NOTE_INSN_PROLOGUE_END)

(insn 12 317 11 2 init/initramfs.c:220 (set (reg:SI 2 r2)
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (nil))

(insn:TI 11 12 8 2 init/initramfs.c:220 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11536380>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11536380>)
        (nil)))

(insn:TI 8 11 10 2 init/initramfs.c:220 (set (reg/f:SI 5 r5 [orig:154 collected.344 ] [154])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 16 [0x10]))) [0 collected+0 S4 A32])
        (nil)))

(insn:TI 10 8 13 2 init/initramfs.c:220 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:154 collected.344 ] [154])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 13 10 16 2 init/initramfs.c:220 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcmp") [flags 0x41] <function_decl 0x51154b80 memcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 16 13 17 2 init/initramfs.c:220 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 17 16 18 2 init/initramfs.c:220 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [0.0%]  (fallthru)
(note 18 17 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 18 21 3 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:160 message ] [160])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn:TI 21 20 27 3 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:160 message ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 27 21 291 3 init/initramfs.c:222 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
            (plus:SI (reg:SI 0 r0 [orig:152 D.25868 ] [152])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (nil))

(insn:TI 291 27 22 3 init/initramfs.c:16 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [162])
            (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11527b90>))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11527b90>)
        (nil)))

(jump_insn 22 291 334 3 init/initramfs.c:15 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 230)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 3 -> ( 21 4)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  21 [85.0%] 
;; Succ edge  4 [15.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [15.0%]  (fallthru)
(note 334 22 335 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 335 334 336 4 (set (pc)
        (label_ref 328)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 8)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 336 335 30)

;; Start of basic block ( 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%] 
(code_label 30 336 31 5 133 "" [1 uses])

(note 31 30 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 37 31 33 5 NOTE_INSN_DELETED)

(insn:TI 33 37 34 5 init/initramfs.c:224 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:154 collected.344 ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 34 33 35 5 init/initramfs.c:224 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x1153c020>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x1153c020>)
        (nil)))

(insn:TI 35 34 36 5 init/initramfs.c:224 (set (reg:SI 2 r2)
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (nil))

(call_insn/i:TI 36 35 39 5 init/initramfs.c:224 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcmp") [flags 0x41] <function_decl 0x51154b80 memcmp>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 39 36 40 5 init/initramfs.c:224 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 0 r0 [164])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn:TI 40 39 41 5 init/initramfs.c:224 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 41 40 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 43 41 44 6 init/initramfs.c:15 (set (reg/f:SI 3 r3 [orig:166 message ] [166])
        (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 message+0 S4 A32])
            (nil))))

(insn:TI 44 43 45 6 init/initramfs.c:15 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:166 message ] [166])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:166 message ] [166])
        (nil)))

(jump_insn:TI 45 44 46 6 init/initramfs.c:15 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 230)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 6 -> ( 7 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [15.0%]  (fallthru)
;; Succ edge  21 [85.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  6 [15.0%]  (fallthru)
(note 46 45 290 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 290 46 50 7 init/initramfs.c:16 (set (reg/f:SI 3 r3 [168])
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x114f9ed0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x114f9ed0>)
        (nil)))

(insn 50 290 328 7 init/initramfs.c:226 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 328 50 326 8 145 "" [1 uses])

(note 326 328 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 49 326 337 8 init/initramfs.c:16 (set (mem/f/c/i:SI (reg/f:SI 4 r4 [156]) [0 message+0 S4 A32])
        (reg/f:SI 3 r3 [168])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [168])
        (nil)))

(jump_insn 337 49 338 8 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 23)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 338 337 53)

;; Start of basic block ( 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 5 [r5] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  5 [50.0%] 
(code_label 53 338 54 9 136 "" [1 uses])

(note 54 53 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 54 59 9 init/initramfs.c:136 (set (reg/v/f:SI 5 r5 [orig:144 s ] [144])
        (plus:SI (reg/f:SI 5 r5 [orig:154 collected.344 ] [154])
            (const_int 6 [0x6]))) 4 {*arm_addsi3} (nil))

(insn 59 58 61 9 init/initramfs.c:136 (set (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])
        (reg:SI 0 r0 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 61 59 76 9 init/initramfs.c:137 (set (reg/f:SI 6 r6 [252])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 76 [0x4c]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 76 [0x4c]))
        (nil)))

(insn 76 61 57 9 init/initramfs.c:138 (set (reg/f:SI 7 r7 [256])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 28 [0x1c]))
        (nil)))

(insn:TI 57 76 80 9 init/initramfs.c:135 (set (mem/s/j:QI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 buf+8 S1 A32])
        (reg:QI 0 r0 [164])) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:QI 0 r0 [164])
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 10 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [91.7%]  (dfs_back)
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 80 57 60 10 137 "" [1 uses])

(note 60 80 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 75 60 66 10 NOTE_INSN_DELETED)

(insn:TI 66 75 257 10 init/initramfs.c:137 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:144 s ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 257 66 65 10 init/initramfs.c:137 (set (reg:SI 2 r2)
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(insn:TI 65 257 78 10 init/initramfs.c:137 (set (reg:SI 0 r0)
        (reg/f:SI 6 r6 [252])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 78 65 68 10 init/initramfs.c:136 discrim 2 (set (reg/v/f:SI 5 r5 [orig:144 s ] [144])
        (plus:SI (reg/v/f:SI 5 r5 [orig:144 s ] [144])
            (reg:SI 2 r2))) 4 {*arm_addsi3} (nil))

(call_insn:TI 68 78 71 10 init/initramfs.c:137 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x1150cc00 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 71 68 258 10 init/initramfs.c:138 (set (reg:SI 0 r0)
        (reg/f:SI 6 r6 [252])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn:TI 258 71 259 10 init/initramfs.c:138 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 259 258 74 10 init/initramfs.c:138 (set (reg:SI 2 r2)
        (const_int 16 [0x10])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 74 259 77 10 init/initramfs.c:138 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("simple_strtoul") [flags 0x41] <function_decl 0x10aa5680 simple_strtoul>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 77 74 79 10 init/initramfs.c:138 (set (mem/s/j:SI (plus:SI (reg/f:SI 7 r7 [256])
                (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])) [0 parsed S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 79 77 81 10 init/initramfs.c:136 discrim 2 (set (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])
        (plus:SI (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn:TI 81 79 82 10 init/initramfs.c:136 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 4 r4 [orig:135 ivtmp.931 ] [135])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 82 81 83 10 init/initramfs.c:136 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9167 [0x23cf])
            (nil))))
;; End of basic block 10 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [91.7%]  (dfs_back)
;; Succ edge  11 [8.3%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  10 [8.3%]  (fallthru,loop_exit)
(note 83 82 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 87 83 113 11 NOTE_INSN_DELETED)

(note 113 87 116 11 NOTE_INSN_DELETED)

(note 116 113 117 11 NOTE_INSN_DELETED)

(note 117 116 120 11 NOTE_INSN_DELETED)

(note 120 117 124 11 NOTE_INSN_DELETED)

(note 124 120 133 11 NOTE_INSN_DELETED)

(note 133 124 138 11 NOTE_INSN_DELETED)

(note 138 133 149 11 NOTE_INSN_DELETED)

(note 149 138 286 11 NOTE_INSN_DELETED)

(note 286 149 144 11 NOTE_INSN_DELETED)

(note 144 286 84 11 NOTE_INSN_DELETED)

(insn:TI 84 144 127 11 init/initramfs.c:140 (set (reg/f:SI 3 r3 [178])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 127 84 289 11 init/initramfs.c:150 (set (reg:SI 0 r0 [orig:142 name_len.324 ] [142])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 parsed+44 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 parsed+44 S4 A32])
        (nil)))

(insn:TI 289 127 288 11 init/initramfs.c:149 (set (reg:SI 6 r6 [orig:196 parsed+36 ] [196])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 parsed+36 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 parsed+36 S4 A32])
        (nil)))

(insn:TI 288 289 130 11 init/initramfs.c:149 (set (reg:SI 2 r2 [orig:197 parsed+40 ] [197])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 parsed+40 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 parsed+40 S4 A32])
        (nil)))

(insn 130 288 135 11 init/initramfs.c:229 (set (reg:SI 7 r7 [208])
        (plus:SI (reg:SI 0 r0 [orig:142 name_len.324 ] [142])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 135 130 131 11 init/initramfs.c:229 (set (reg:DI 4 r4 [orig:211 this_header ] [211])
        (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (expr_list:REG_EQUAL (mem/c/i:DI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 24 [0x18]))) [0 this_header+0 S8 A64])
            (nil))))

(insn 131 135 115 11 init/initramfs.c:229 (set (reg:SI 7 r7)
        (and:SI (reg:SI 7 r7 [208])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 115 131 132 11 init/initramfs.c:149 (set (reg:SI 6 r6 [orig:141 D.26529 ] [141])
        (ior:SI (ashift:SI (reg:SI 6 r6 [orig:196 parsed+36 ] [196])
                (const_int 20 [0x14]))
            (reg:SI 2 r2 [orig:197 parsed+40 ] [197]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:197 parsed+40 ] [197])
        (nil)))

(insn 132 115 303 11 init/initramfs.c:229 (set (reg:SI 2 r2 [orig:149 D.25876 ] [149])
        (plus:SI (reg:SI 7 r7)
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 7 r7)
        (nil)))

(insn:TI 303 132 103 11 init/initramfs.c:229 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 4 r4 [orig:211 this_header ] [211])
                        (reg:SI 2 r2 [orig:149 D.25876 ] [149]))
                    (reg:SI 4 r4 [orig:211 this_header ] [211])))
            (set (reg:SI 8 r8)
                (plus:SI (reg:SI 4 r4 [orig:211 this_header ] [211])
                    (reg:SI 2 r2 [orig:149 D.25876 ] [149])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 4 r4 [orig:211 this_header ] [211])
        (nil)))

(insn 103 303 304 11 init/initramfs.c:146 (set (reg:SI 1 r1 [orig:140 body_len.320 ] [140])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 52 [0x34])) [0 parsed+24 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 304 103 273 11 init/initramfs.c:229 (set (reg:SI 9 r9 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 5 r5 [ this_header+4 ])
                (const_int 0 [0x0])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 5 r5 [ this_header+4 ])
            (nil))))

(insn 273 304 296 11 init/initramfs.c:149 (set (reg:SI 12 ip [204])
        (const_int 1048320 [0xfff00])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1048320 [0xfff00])
        (nil)))

(insn:TI 296 273 305 11 init/initramfs.c:229 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-72 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 305 296 297 11 init/initramfs.c:230 (set (reg:SI 8 r8 [215])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (nil))

(insn:TI 297 305 307 11 init/initramfs.c:230 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-72 S8 A64])) 163 {*arm_movdi} (nil))

(insn 307 297 295 11 init/initramfs.c:230 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 8 r8 [215])
                        (reg:SI 1 r1 [orig:140 body_len.320 ] [140]))
                    (reg:SI 8 r8 [215])))
            (set (reg:SI 4 r4 [216])
                (plus:SI (reg:SI 8 r8 [215])
                    (reg:SI 1 r1 [orig:140 body_len.320 ] [140])))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 8 r8 [215])
        (nil)))

(insn:TI 295 307 119 11 init/initramfs.c:229 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-84 S4 A32])
        (reg:SI 7 r7)) 167 {*arm_movsi_insn} (nil))

(insn 119 295 306 11 init/initramfs.c:149 (set (reg:SI 7 r7 [200])
        (lshiftrt:SI (reg:SI 6 r6 [orig:141 D.26529 ] [141])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 306 119 274 11 init/initramfs.c:230 (set (reg:SI 9 r9 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 274 306 121 11 init/initramfs.c:149 (set (reg:SI 12 ip [204])
        (and:SI (reg:SI 6 r6 [orig:141 D.26529 ] [141])
            (reg:SI 12 ip [204]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 121 274 308 11 init/initramfs.c:149 (set (reg:SI 6 r6 [202])
        (and:SI (reg:SI 6 r6 [orig:141 D.26529 ] [141])
            (const_int 255 [0xff]))) 67 {*arm_andsi3_insn} (nil))

(insn 308 121 122 11 init/initramfs.c:230 (set (reg:SI 5 r5 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 9 r9 [+4 ])
                (const_int 0 [0x0])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 9 r9 [+4 ])
            (nil))))

(insn:TI 122 308 309 11 init/initramfs.c:149 (set (reg:SI 6 r6 [203])
        (ior:SI (ashift:SI (reg:SI 7 r7 [200])
                (const_int 8 [0x8]))
            (reg:SI 6 r6 [202]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 7 r7 [200])
        (nil)))

(insn 309 122 311 11 init/initramfs.c:230 (parallel [
            (set (reg:CC_C 24 cc)
                (compare:CC_C (plus:SI (reg:SI 4 r4 [216])
                        (reg:SI 10 sl))
                    (reg:SI 4 r4 [216])))
            (set (reg:SI 4 r4 [216])
                (plus:SI (reg:SI 4 r4 [216])
                    (reg:SI 10 sl)))
        ]) 10 {*addsi3_compare_op1} (expr_list:REG_DEAD (reg:SI 10 sl)
        (nil)))

(insn:TI 311 309 125 11 init/initramfs.c:230 (set (reg:SI 10 sl)
        (const_int -4 [0xfffffffffffffffc])) 167 {*arm_movsi_insn} (nil))

(insn 125 311 313 11 init/initramfs.c:149 (set (reg:SI 12 ip [206])
        (ior:SI (ashift:SI (reg:SI 12 ip [204])
                (const_int 12 [0xc]))
            (reg:SI 6 r6 [203]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 6 r6 [203])
        (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                    (const_int 348 [0x15c])) [0 rdev+0 S4 A32])
            (nil))))

(insn:TI 313 125 285 11 init/initramfs.c:230 (set (reg:SI 6 r6)
        (and:SI (reg:SI 4 r4 [216])
            (reg:SI 10 sl))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 4 r4 [216])
        (nil)))

(insn 285 313 148 11 init/initramfs.c:140 (set (reg:SI 4 r4 [orig:179 parsed ] [179])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 parsed+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 parsed+0 S4 A32])
        (nil)))

(insn:TI 148 285 88 11 init/initramfs.c:232 (set (reg:SI 9 r9 [221])
        (plus:SI (reg:SI 0 r0 [orig:142 name_len.324 ] [142])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 88 148 310 11 init/initramfs.c:141 (set (reg:SI 8 r8 [orig:139 mode.315 ] [139])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 32 [0x20])) [0 parsed+4 S2 A32]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn:TI 310 88 150 11 init/initramfs.c:230 (set (reg:SI 5 r5 [+4 ])
        (plus:SI (ltu:SI (reg:CC_C 24 cc)
                (const_int 0 [0x0]))
            (plus:SI (reg:SI 5 r5 [+4 ])
                (reg:SI 11 fp [+4 ])))) 14 {*addsi3_carryin} (expr_list:REG_DEAD (reg:CC_C 24 cc)
        (expr_list:REG_DEAD (reg:SI 11 fp [+4 ])
            (nil))))

(insn 150 310 86 11 init/initramfs.c:232 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [221])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 86 150 312 11 init/initramfs.c:140 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 212 [0xd4])) [0 ino+0 S4 A32])
        (reg:SI 4 r4 [orig:179 parsed ] [179])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 4 r4 [orig:179 parsed ] [179])
        (nil)))

(insn 312 86 284 11 init/initramfs.c:230 (set (reg:SI 11 fp [+4 ])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn:TI 284 312 314 11 init/initramfs.c:142 (set (reg:SI 4 r4 [orig:183 parsed+8 ] [183])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 parsed+8 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 parsed+8 S4 A32])
        (nil)))

(insn 314 284 126 11 init/initramfs.c:230 (set (reg:SI 7 r7 [+4 ])
        (and:SI (reg:SI 5 r5 [+4 ])
            (reg:SI 11 fp [+4 ]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 126 314 278 11 init/initramfs.c:149 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 348 [0x15c])) [0 rdev+0 S4 A32])
        (reg:SI 12 ip [206])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [206])
        (nil)))

(insn 278 126 298 11 init/initramfs.c:231 (set (reg:SI 12 ip [220])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn:TI 298 278 93 11 init/initramfs.c:230 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 48 [0x30])) [0 next_header+0 S8 A64])
        (reg:DI 6 r6)) 163 {*arm_movdi} (nil))

(insn:TI 93 298 283 11 init/initramfs.c:142 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 100 [0x64])) [0 uid+0 S4 A32])
        (reg:SI 4 r4 [orig:183 parsed+8 ] [183])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 4 r4 [orig:183 parsed+8 ] [183])
        (nil)))

(insn:TI 283 93 147 11 init/initramfs.c:143 (set (reg:SI 4 r4 [orig:185 parsed+12 ] [185])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 parsed+12 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 parsed+12 S4 A32])
        (nil)))

(insn:TI 147 283 90 11 init/initramfs.c:231 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 12 ip [220])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [220])
        (expr_list:REG_EQUAL (const_int 3 [0x3])
            (nil))))

(insn:TI 90 147 96 11 init/initramfs.c:141 (set (mem/c/i:HI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 216 [0xd8])) [0 mode+0 S2 A16])
        (reg:HI 8 r8 [orig:139 mode.315 ] [139])) 176 {*movhi_insn_arch4} (nil))

(insn:TI 96 90 282 11 init/initramfs.c:143 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 104 [0x68])) [0 gid+0 S4 A32])
        (reg:SI 4 r4 [orig:185 parsed+12 ] [185])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 4 r4 [orig:185 parsed+12 ] [185])
        (nil)))

(insn:TI 282 96 105 11 init/initramfs.c:144 (set (reg:SI 4 r4 [orig:187 parsed+16 ] [187])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 parsed+16 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 parsed+16 S4 A32])
        (nil)))

(insn:TI 105 282 129 11 init/initramfs.c:146 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 92 [0x5c])) [0 body_len+0 S4 A32])
        (reg:SI 1 r1 [orig:140 body_len.320 ] [140])) 167 {*arm_movsi_insn} (nil))

(insn:TI 129 105 99 11 init/initramfs.c:150 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 96 [0x60])) [0 name_len+0 S4 A32])
        (reg:SI 0 r0 [orig:142 name_len.324 ] [142])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:142 name_len.324 ] [142])
        (nil)))

(insn:TI 99 129 281 11 init/initramfs.c:144 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 200 [0xc8])) [0 nlink+0 S4 A32])
        (reg:SI 4 r4 [orig:187 parsed+16 ] [187])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 4 r4 [orig:187 parsed+16 ] [187])
        (nil)))

(insn:TI 281 99 102 11 init/initramfs.c:145 (set (reg:SI 4 r4 [orig:189 parsed+20 ] [189])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 parsed+20 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 parsed+20 S4 A32])
        (nil)))

(insn:TI 102 281 280 11 init/initramfs.c:145 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 108 [0x6c])) [0 mtime+0 S4 A32])
        (reg:SI 4 r4 [orig:189 parsed+20 ] [189])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 4 r4 [orig:189 parsed+20 ] [189])
        (nil)))

(insn:TI 280 102 108 11 init/initramfs.c:147 (set (reg:SI 4 r4 [orig:192 parsed+28 ] [192])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 parsed+28 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 parsed+28 S4 A32])
        (nil)))

(insn:TI 108 280 279 11 init/initramfs.c:147 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 204 [0xcc])) [0 major+0 S4 A32])
        (reg:SI 4 r4 [orig:192 parsed+28 ] [192])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 4 r4 [orig:192 parsed+28 ] [192])
        (nil)))

(insn:TI 279 108 111 11 init/initramfs.c:148 (set (reg:SI 4 r4 [orig:194 parsed+32 ] [194])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 parsed+32 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 parsed+32 S4 A32])
        (nil)))

(insn:TI 111 279 151 11 init/initramfs.c:148 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 208 [0xd0])) [0 minor+0 S4 A32])
        (reg:SI 4 r4 [orig:194 parsed+32 ] [194])) 167 {*arm_movsi_insn} (nil))

(jump_insn 151 111 152 11 init/initramfs.c:232 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 235)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 11 -> ( 22 12)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  22 [39.0%] 
;; Succ edge  12 [61.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  11 [61.0%]  (fallthru)
(note 152 151 153 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 153 152 154 12 init/initramfs.c:234 (set (reg:SI 8 r8 [orig:147 D.25890 ] [147])
        (and:SI (reg:SI 8 r8 [orig:139 mode.315 ] [139])
            (const_int 61440 [0xf000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 154 153 155 12 init/initramfs.c:234 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:147 D.25890 ] [147])
            (const_int 40960 [0xa000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 155 154 156 12 init/initramfs.c:234 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 12 -> ( 13 15)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [28.0%]  (fallthru)
;; Succ edge  15 [72.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [28.0%]  (fallthru)
(note 156 155 157 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 157 156 158 13 init/initramfs.c:235 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:140 body_len.320 ] [140])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 158 157 159 13 init/initramfs.c:235 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 235)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 22 14)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  22 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 7 [r7] 11 [fp]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 7 [r7] 11 [fp]
;; live  kill	

;; Pred edge  13 [50.0%]  (fallthru)
(note 159 158 161 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 161 159 167 14 init/initramfs.c:237 (set (reg/f:SI 2 r2 [orig:146 symlink_buf.352 ] [146])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 112 [0x70])) [0 symlink_buf+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 112 [0x70]))) [0 symlink_buf+0 S4 A32])
            (nil))))

(insn 167 161 300 14 init/initramfs.c:238 (set (reg:SI 1 r1 [227])
        (plus:SI (reg:SI 1 r1 [orig:140 body_len.320 ] [140])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn:TI 300 167 176 14 init/initramfs.c:238 (set (reg:SI 11 fp)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-84 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 176 300 168 14 init/initramfs.c:241 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 168 176 165 14 init/initramfs.c:238 (set (reg:SI 7 r7 [228])
        (plus:SI (reg:SI 1 r1 [227])
            (reg:SI 11 fp))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 1 r1 [227])
        (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                    (const_int 40 [0x28])) [0 remains+0 S4 A32])
            (nil))))

(insn 165 168 171 14 init/initramfs.c:237 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (reg/f:SI 2 r2 [orig:146 symlink_buf.352 ] [146])) 167 {*arm_movsi_insn} (nil))

(insn:TI 171 165 169 14 init/initramfs.c:239 (set (reg:SI 1 r1 [230])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn 169 171 172 14 init/initramfs.c:238 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (reg:SI 7 r7 [228])) 167 {*arm_movsi_insn} (nil))

(insn:TI 172 169 174 14 init/initramfs.c:239 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 1 r1 [230])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [230])
        (expr_list:REG_EQUAL (const_int 6 [0x6])
            (nil))))

(insn 174 172 163 14 init/initramfs.c:240 (set (reg:SI 1 r1 [232])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn:TI 163 174 175 14 init/initramfs.c:237 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (reg/f:SI 2 r2 [orig:146 symlink_buf.352 ] [146])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [178])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:146 symlink_buf.352 ] [146])
            (nil))))

(insn:TI 175 163 339 14 init/initramfs.c:240 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 1 r1 [232])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [232])
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(jump_insn 339 175 340 14 init/initramfs.c:241 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 23)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 340 339 179)

;; Start of basic block ( 12) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [72.0%] 
(code_label 179 340 180 15 139 "" [1 uses])

(note 180 179 181 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 181 180 182 15 init/initramfs.c:243 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:147 D.25890 ] [147])
            (const_int 32768 [0x8000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 182 181 183 15 init/initramfs.c:243 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 186)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 15 -> ( 17 16)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  17 [0.0%] 
;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
(note 183 182 184 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 184 183 185 16 init/initramfs.c:243 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:140 body_len.320 ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:140 body_len.320 ] [140])
        (nil)))

(jump_insn:TI 185 184 186 16 init/initramfs.c:243 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 235)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 16 -> ( 17 22)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  17 [0.0%]  (fallthru)
;; Succ edge  22 [100.0%] 

;; Start of basic block ( 15 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  15 [0.0%] 
;; Pred edge  16 [0.0%]  (fallthru)
(code_label 186 185 187 17 140 "" [1 uses])

(note 187 186 188 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 188 187 191 17 init/initramfs.c:244 (set (reg/f:SI 3 r3 [233])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 191 188 189 17 init/initramfs.c:184 (set (reg:SI 0 r0 [orig:136 count.331 ] [136])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 8 [0x8])) [0 count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 count+0 S4 A32])
        (nil)))

(insn:TI 189 191 192 17 init/initramfs.c:244 (set (reg/f:SI 1 r1 [orig:145 name_buf.354 ] [145])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 116 [0x74])) [0 name_buf+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 116 [0x74]))) [0 name_buf+0 S4 A32])
        (nil)))

(insn:TI 192 189 193 17 init/initramfs.c:184 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:136 count.331 ] [136])
            (reg:SI 2 r2 [orig:149 D.25876 ] [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 193 192 194 17 init/initramfs.c:184 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 213)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  18 [0.0%]  (fallthru)
;; Succ edge  19 [100.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip]
;; live  kill	

;; Pred edge  17 [0.0%]  (fallthru)
(note 194 193 301 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 301 194 205 18 init/initramfs.c:173 (set (reg:DI 4 r4)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-72 S8 A64])) 163 {*arm_movdi} (nil))

(insn 205 301 196 18 init/initramfs.c:174 (set (reg:SI 0 r0 [241])
        (minus:SI (reg:SI 0 r0 [orig:136 count.331 ] [136])
            (reg:SI 2 r2 [orig:149 D.25876 ] [149]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (nil)))

(insn:TI 196 205 208 18 init/initramfs.c:185 (set (reg/f:SI 1 r1 [orig:137 victim.332 ] [137])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 12 [0xc]))) [0 victim+0 S4 A32])
            (nil))))

(insn 208 196 206 18 init/initramfs.c:187 (set (reg:SI 12 ip [243])
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 4 [0x4])
        (nil)))

(insn:TI 206 208 210 18 init/initramfs.c:174 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 8 [0x8])) [0 count+0 S4 A32])
        (reg:SI 0 r0 [241])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [241])
        (nil)))

(insn 210 206 200 18 init/initramfs.c:245 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 200 210 203 18 init/initramfs.c:172 (set (reg:SI 2 r2 [238])
        (plus:SI (reg/f:SI 1 r1 [orig:137 victim.332 ] [137])
            (reg:SI 2 r2 [orig:149 D.25876 ] [149]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (nil)))

(insn 203 200 209 18 init/initramfs.c:173 (set (mem/c/i:DI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 24 [0x18])) [0 this_header+0 S8 A64])
        (reg:DI 4 r4)) 163 {*arm_movdi} (nil))

(insn:TI 209 203 201 18 init/initramfs.c:187 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 12 ip [243])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [243])
        (expr_list:REG_EQUAL (const_int 4 [0x4])
            (nil))))

(insn:TI 201 209 341 18 init/initramfs.c:172 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 12 [0xc])) [0 victim+0 S4 A32])
        (reg:SI 2 r2 [238])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [238])
        (nil)))

(jump_insn 341 201 342 18 (set (pc)
        (label_ref 323)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 20)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  20 [100.0%] 

(barrier 342 341 213)

;; Start of basic block ( 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	

;; Pred edge  17 [100.0%] 
(code_label 213 342 214 19 141 "" [1 uses])

(note 214 213 227 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 227 214 220 19 init/initramfs.c:245 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 220 227 225 19 init/initramfs.c:190 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 40 [0x28])) [0 remains+0 S4 A32])
        (reg:SI 2 r2 [orig:149 D.25876 ] [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:149 D.25876 ] [149])
        (nil)))

(insn:TI 225 220 218 19 init/initramfs.c:192 (set (reg:SI 2 r2 [250])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 218 225 226 19 init/initramfs.c:189 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 36 [0x24])) [0 collect+0 S4 A32])
        (reg/f:SI 1 r1 [orig:145 name_buf.354 ] [145])) 167 {*arm_movsi_insn} (nil))

(insn:TI 226 218 277 19 init/initramfs.c:192 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 32 [0x20])) [0 state+0 S4 A32])
        (reg:SI 2 r2 [250])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 277 226 223 19 init/initramfs.c:191 (set (reg:SI 2 r2 [248])
        (plus:SI (reg:SI 2 r2 [248])
            (const_int 3 [0x3]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 4 [0x4])
        (nil)))

(insn:TI 223 277 323 19 init/initramfs.c:191 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 44 [0x2c])) [0 next_state+0 S4 A32])
        (reg:SI 2 r2 [248])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [248])
        (expr_list:REG_EQUAL (const_int 4 [0x4])
            (nil))))
;; End of basic block 19 -> ( 20)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 19 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 323 223 321 20 144 "" [1 uses])

(note 321 323 216 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn:TI 216 321 343 20 init/initramfs.c:189 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 16 [0x10])) [0 collected+0 S4 A32])
        (reg/f:SI 1 r1 [orig:145 name_buf.354 ] [145])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [233])
        (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:145 name_buf.354 ] [145])
            (nil))))

(jump_insn 343 216 344 20 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 23)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 344 343 230)

;; Start of basic block ( 6 3) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [85.0%] 
;; Pred edge  3 [85.0%] 
(code_label 230 344 231 21 134 "" [2 uses])

(note 231 230 232 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 232 231 345 21 init/initramfs.c:222 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(jump_insn 345 232 346 21 (set (pc)
        (label_ref 238)) 242 {*arm_jump} (nil))
;; End of basic block 21 -> ( 23)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 346 345 235)

;; Start of basic block ( 13 11 16) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  13 [50.0%] 
;; Pred edge  11 [39.0%] 
;; Pred edge  16 [100.0%] 
(code_label 235 346 236 22 138 "" [3 uses])

(note 236 235 237 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn:TI 237 236 238 22 init/initramfs.c:233 (set (reg:SI 0 r0 [orig:152 D.25868 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 22 -> ( 23)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 22 14 20 8 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
;; Pred edge  20 [100.0%] 
;; Pred edge  8 [100.0%] 
;; Pred edge  21 [100.0%] 
(code_label 238 237 239 23 135 "" [4 uses])

(note 239 238 250 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 250 239 318 23 init/initramfs.c:246 (use (reg/i:SI 0 r0)) -1 (nil))

(note 318 250 319 23 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 319 318 320 23 init/initramfs.c:246 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 23 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 320 319 276)

(note 276 320 294 NOTE_INSN_DELETED)

(note 294 276 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function populate_rootfs (populate_rootfs)[0:1338] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 86 to 12 -- after reload
;;   ======================================================

;;	  0-->    84 r3=`__initramfs_size'             :cortex_a8_load_store_1
;;	  1-->    86 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  2-->     7 r0=`__initramfs_start'            :cortex_a8_load_store_1
;;	  3-->     8 r1=[r3]                           :cortex_a8_load_store_1
;;	  4-->     9 r0=call [`unpack_to_rootfs']      :cortex_a8_issue_branch
;;	 36-->    11 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 38-->    12 pc={(cc==0x0)?L17:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 38
;;   new head = 86
;;   new tail = 12

;;   ======================================================
;;   -- basic block 3 from 15 to 15 -- after reload
;;   ======================================================

;;	  0-->    15 call [`panic']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 15
;;   new tail = 15

;;   ======================================================
;;   -- basic block 4 from 19 to 22 -- after reload
;;   ======================================================

;;	  0-->    19 r4=`initrd_start'                 :cortex_a8_load_store_1
;;	  3-->    20 r3=[r4]                           :cortex_a8_load_store_1
;;	  5-->    21 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  7-->    22 pc={(cc==0x0)?L63:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 19
;;   new tail = 22

;;   ======================================================
;;   -- basic block 5 from 25 to 37 -- after reload
;;   ======================================================

;;	  0-->    25 r0=`*.LC12'                       :cortex_a8_load_store_1
;;	  1-->    26 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->    83 r3=`initrd_end'                   :cortex_a8_load_store_1
;;	  2-->    28 r0=[r4]                           :cortex_a8_load_store_1
;;	  4-->    30 r1=[r3]                           :cortex_a8_load_store_1
;;	  6-->    33 r1=r1-r0                          :cortex_a8_default
;;	  7-->    34 r0=call [`unpack_to_rootfs']      :cortex_a8_issue_branch
;;	 39-->    36 {cc=cmp(r0,0x0);r1=r0;}           :cortex_a8_default
;;	 41-->    37 pc={(cc==0x0)?L43:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 41
;;   new head = 25
;;   new tail = 37

;;   ======================================================
;;   -- basic block 6 from 40 to 42 -- after reload
;;   ======================================================

;;	  0-->    40 r0=`*.LC13'                       :cortex_a8_load_store_1
;;	  1-->    42 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 40
;;   new tail = 42

;;   ======================================================
;;   -- basic block 7 from 45 to 48 -- after reload
;;   ======================================================

;;	  0-->    45 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    46 r3=[r3+0x58]                      :cortex_a8_load_store_1
;;	  5-->    47 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  7-->    48 pc={(cc!=0x0)?L55:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 45
;;   new tail = 48

;;   ======================================================
;;   -- basic block 8 from 50 to 54 -- after reload
;;   ======================================================

;;	  0-->    50 r3=`initrd_start'                 :cortex_a8_load_store_1
;;	  3-->    52 r0=[r3]                           :cortex_a8_load_store_1
;;	  4-->    82 r3=`initrd_end'                   :cortex_a8_load_store_1
;;	  7-->    53 r1=[r3]                           :cortex_a8_load_store_1
;;	  8-->    54 call [`free_initrd_mem']          :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 50
;;   new tail = 54

;;   ======================================================
;;   -- basic block 9 from 58 to 62 -- after reload
;;   ======================================================

;;	  0-->    81 r2=`initrd_start'                 :cortex_a8_load_store_1
;;	  0-->    58 r3=0x0                            :cortex_a8_default
;;	  3-->    59 [r2]=r3                           :cortex_a8_load_store_1
;;	  4-->    80 r2=`initrd_end'                   :cortex_a8_load_store_1
;;	  7-->    62 [r2]=r3                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 58
;;   new tail = 62

;;   ======================================================
;;   -- basic block 10 from 69 to 89 -- after reload
;;   ======================================================

;;	  0-->    69 r0=0x0                            :cortex_a8_default
;;	  0-->    75 use r0                            :nothing
;;	  0-->    89 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 69
;;   new tail = 89





populate_rootfs

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={12d,5u} r2={9d,2u} r3={15d,9u} r4={2d,4u,1d} r12={6d} r13={2d,17u} r14={7d,2u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={10d,4u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 792{736d,55u,1e} in 40{34 regular + 6 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 2 84 2 NOTE_INSN_DELETED)

(insn:TI 84 10 86 2 init/initramfs.c:574 (set (reg/f:SI 3 r3 [138])
        (symbol_ref:SI ("__initramfs_size") [flags 0xc0] <var_decl 0x114d2180 __initramfs_size>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__initramfs_size") [flags 0xc0] <var_decl 0x114d2180 __initramfs_size>)
        (nil)))

(insn/f:TI 86 84 87 2 init/initramfs.c:573 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -8 [0xfffffffffffffff8])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 87 86 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 87 8 2 init/initramfs.c:574 (set (reg:SI 0 r0)
        (symbol_ref:SI ("__initramfs_start") [flags 0xc0] <var_decl 0x114d2120 __initramfs_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__initramfs_start") [flags 0xc0] <var_decl 0x114d2120 __initramfs_start>)
        (nil)))

(insn:TI 8 7 9 2 init/initramfs.c:574 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 3 r3 [138]) [0 __initramfs_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [138])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("__initramfs_size") [flags 0xc0] <var_decl 0x114d2180 __initramfs_size>) [0 __initramfs_size+0 S4 A32])
            (nil))))

(call_insn:TI 9 8 11 2 init/initramfs.c:574 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unpack_to_rootfs") [flags 0x3] <function_decl 0x114ad980 unpack_to_rootfs>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 11 9 12 2 init/initramfs.c:575 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 12 11 13 2 init/initramfs.c:575 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 13 12 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 15 13 16 3 init/initramfs.c:576 (parallel [
            (call (mem:SI (symbol_ref:SI ("panic") [flags 0x41] <function_decl 0x10a86f00 panic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_NORETURN (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 16 15 17)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 17 16 18 4 149 "" [1 uses])

(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 19 18 20 4 init/initramfs.c:577 (set (reg/f:SI 4 r4 [139])
        (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)
        (nil)))

(insn:TI 20 19 21 4 init/initramfs.c:577 (set (reg:SI 3 r3 [orig:140 initrd_start ] [140])
        (mem/c/i:SI (reg/f:SI 4 r4 [139]) [0 initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 4 r4 [139]) [0 initrd_start+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>) [0 initrd_start+0 S4 A32])
            (nil))))

(insn:TI 21 20 22 4 init/initramfs.c:577 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 initrd_start ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:140 initrd_start ] [140])
        (nil)))

(jump_insn:TI 22 21 23 4 init/initramfs.c:577 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  10 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.0%]  (fallthru)
(note 23 22 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 31 23 35 5 NOTE_INSN_DELETED)

(note 35 31 25 5 NOTE_INSN_DELETED)

(insn:TI 25 35 26 5 init/initramfs.c:601 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x1153ef80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x1153ef80>)
        (nil)))

(call_insn:TI 26 25 83 5 init/initramfs.c:601 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a86380 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 83 26 28 5 init/initramfs.c:602 (set (reg/f:SI 3 r3 [143])
        (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)
        (nil)))

(insn:TI 28 83 30 5 init/initramfs.c:602 (set (reg:SI 0 r0 [orig:134 initrd_start.956 ] [134])
        (mem/c/i:SI (reg/f:SI 4 r4 [139]) [0 initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>) [0 initrd_start+0 S4 A32])
        (nil)))

(insn:TI 30 28 33 5 init/initramfs.c:602 (set (reg:SI 1 r1 [orig:145 initrd_end ] [145])
        (mem/c/i:SI (reg/f:SI 3 r3 [143]) [0 initrd_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [143])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>) [0 initrd_end+0 S4 A32])
            (nil))))

(insn:TI 33 30 34 5 init/initramfs.c:602 (set (reg:SI 1 r1)
        (minus:SI (reg:SI 1 r1 [orig:145 initrd_end ] [145])
            (reg:SI 0 r0))) 28 {*arm_subsi3_insn} (nil))

(call_insn:TI 34 33 36 5 init/initramfs.c:602 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unpack_to_rootfs") [flags 0x3] <function_decl 0x114ad980 unpack_to_rootfs>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 36 34 37 5 init/initramfs.c:604 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 1 r1 [orig:133 err.957 ] [133])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 37 36 38 5 init/initramfs.c:604 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 38 37 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 40 38 42 6 init/initramfs.c:605 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x1163ce00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x1163ce00>)
        (nil)))

(call_insn:TI 42 40 43 6 init/initramfs.c:605 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a86380 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 43 42 44 7 151 "" [1 uses])

(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 45 44 46 7 init/initramfs.c:497 (set (reg/f:SI 3 r3 [147])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 46 45 47 7 init/initramfs.c:497 (set (reg:SI 3 r3 [orig:148 do_retain_initrd ] [148])
        (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 88 [0x58])) [0 do_retain_initrd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 88 [0x58]))) [0 do_retain_initrd+0 S4 A32])
        (nil)))

(insn:TI 47 46 48 7 init/initramfs.c:497 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:148 do_retain_initrd ] [148])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:148 do_retain_initrd ] [148])
        (nil)))

(jump_insn:TI 48 47 49 7 init/initramfs.c:497 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  9 [71.0%] 
;; Succ edge  8 [29.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  7 [29.0%]  (fallthru)
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 50 49 52 8 init/initramfs.c:517 (set (reg/f:SI 3 r3 [149])
        (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)
        (nil)))

(insn:TI 52 50 82 8 init/initramfs.c:517 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 3 r3 [149]) [0 initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [149])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>) [0 initrd_start+0 S4 A32])
            (nil))))

(insn:TI 82 52 53 8 init/initramfs.c:517 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)
        (nil)))

(insn:TI 53 82 54 8 init/initramfs.c:517 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 3 r3 [150]) [0 initrd_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [150])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>) [0 initrd_end+0 S4 A32])
            (nil))))

(call_insn:TI 54 53 55 8 init/initramfs.c:517 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_initrd_mem") [flags 0x41] <function_decl 0x114adb80 free_initrd_mem>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  7 [71.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 55 54 56 9 152 ("skip") [1 uses])

(note 56 55 81 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 81 56 58 9 init/initramfs.c:519 (set (reg/f:SI 2 r2 [151])
        (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x114d2360 initrd_start>)
        (nil)))

(insn 58 81 59 9 init/initramfs.c:519 (set (reg:SI 3 r3 [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 59 58 80 9 init/initramfs.c:519 (set (mem/c/i:SI (reg/f:SI 2 r2 [151]) [0 initrd_start+0 S4 A32])
        (reg:SI 3 r3 [152])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [151])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn:TI 80 59 62 9 init/initramfs.c:520 (set (reg/f:SI 2 r2 [153])
        (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x114d23c0 initrd_end>)
        (nil)))

(insn:TI 62 80 63 9 init/initramfs.c:520 (set (mem/c/i:SI (reg/f:SI 2 r2 [153]) [0 initrd_end+0 S4 A32])
        (reg:SI 3 r3 [152])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [152])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [153])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 4 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 63 62 64 10 150 "" [1 uses])

(note 64 63 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 69 64 75 10 init/initramfs.c:610 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 75 69 88 10 init/initramfs.c:610 (use (reg/i:SI 0 r0)) -1 (nil))

(note 88 75 89 10 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 89 88 90 10 init/initramfs.c:610 (return) 260 {return} (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 90 89 79)

(note 79 90 85 NOTE_INSN_DELETED)

(note 85 79 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns
