
;; Function vfp_cpu_pm_notifier (vfp_cpu_pm_notifier)[0:830]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 15 (  1.7)


vfp_cpu_pm_notifier

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,4u} r1={3d,3u} r2={3d,1u} r3={5d,3u} r4={4d,8u} r5={2d,4u} r6={2d,4u,1d} r7={2d,4u} r8={1d,2u} r12={1d} r13={2d,11u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={8d,3u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 199{149d,49u,1e} in 28{27 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 0 )->[2]->( 5 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 2 )->[3]->( 8 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 3 )->[4]->( 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 2 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 5 )->[6]->( 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 4 [r4]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 4 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 3 5 7 6 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 8 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 14 to worklist
  Adding insn 93 to worklist
  Adding insn 16 to worklist
  Adding insn 100 to worklist
  Adding insn 26 to worklist
  Adding insn 102 to worklist
  Adding insn 37 to worklist
  Adding insn 35 to worklist
  Adding insn 32 to worklist
  Adding insn 29 to worklist
  Adding insn 43 to worklist
  Adding insn 96 to worklist
  Adding insn 56 to worklist
Finished finding needed instructions:
processing block 8 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 50 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 36 to worklist
  Adding insn 31 to worklist
  Adding insn 28 to worklist
processing block 5 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 25 to worklist
  Adding insn 24 to worklist
  Adding insn 23 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 42 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 15 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 12 to worklist
  Adding insn 13 to worklist
  Adding insn 89 to worklist
  Adding insn 8 to worklist
  Adding insn 88 to worklist
  Adding insn 92 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 93 to 14 -- after reload
;;   ======================================================

;;	  0-->    93 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->    92 r2=sp                             :cortex_a8_default
;;	  2-->    88 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  3-->     8 {r4=asm_operands;clobber cc;}     :nothing
;;	  4-->    89 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    13 {cc=cmp(r1,0x0);r7=r1;}           :cortex_a8_default
;;	  6-->    12 r6=[r3+0x14]                      :cortex_a8_load_store_1
;;	  6-->    14 pc={(cc==0x0)?L21:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 93
;;   new tail = 14

;;   ======================================================
;;   -- basic block 3 from 15 to 16 -- after reload
;;   ======================================================

;;	  0-->    15 cc=cmp(r7,0x2)                    :cortex_a8_default
;;	  2-->    16 pc={(gtu(cc,0x0))?L44:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 15
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 100 to 100 -- after reload
;;   ======================================================

;;	  0-->   100 pc=L99                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 100
;;   new tail = 100

;;   ======================================================
;;   -- basic block 5 from 23 to 26 -- after reload
;;   ======================================================

;;	  0-->    23 r5=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    24 r0=[r6*0x4+r5]                    :cortex_a8_load_store_1
;;	  5-->    25 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  7-->    26 pc={(cc==0x0)?L44:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 23
;;   new tail = 26

;;   ======================================================
;;   -- basic block 6 from 28 to 102 -- after reload
;;   ======================================================

;;	  0-->    28 r3=r4|0x40000000                  :cortex_a8_default
;;	  1-->    29 {asm_operands;clobber cc;}        :nothing
;;	  2-->    31 r1=r4                             :cortex_a8_default
;;	  2-->    36 r4=r4&0xffffffffbfffffff          :cortex_a8_default
;;	  3-->    32 call [`vfp_save_state']           :cortex_a8_issue_branch
;;	  3-->    35 [r6*0x4+r5]=r7                    :cortex_a8_load_store_1
;;	  4-->    37 {asm_operands;clobber cc;}        :nothing
;;	  5-->   102 pc=L44                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 28
;;   new tail = 102

;;   ======================================================
;;   -- basic block 7 from 42 to 43 -- after reload
;;   ======================================================

;;	  0-->    42 r4=r4&0xffffffffbfffffff          :cortex_a8_default
;;	  1-->    43 {asm_operands;clobber cc;}        :nothing
;;	Ready list (final):  
;;   total time = 1
;;   new head = 42
;;   new tail = 43

;;   ======================================================
;;   -- basic block 8 from 50 to 96 -- after reload
;;   ======================================================

;;	  0-->    50 r0=0x1                            :cortex_a8_default
;;	  0-->    56 use r0                            :nothing
;;	  0-->    96 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 50
;;   new tail = 96





vfp_cpu_pm_notifier

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,4u} r1={3d,3u} r2={3d,1u} r3={5d,3u} r4={4d,8u} r5={2d,4u} r6={2d,4u,1d} r7={2d,4u} r8={1d,2u} r12={1d} r13={2d,11u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={8d,3u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 199{149d,49u,1e} in 28{27 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 6 5 2 NOTE_INSN_DELETED)

(note 5 3 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 5 93 2 NOTE_INSN_DELETED)

(insn/f:TI 93 10 94 2 arch/arm/vfp/vfpmodule.c:182 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 7 r7)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -24 [0xffffffffffffffe8])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 7 r7))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 16 [0x10])) [0 S4 A32])
                                (reg:SI 8 r8))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 20 [0x14])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 94 93 92 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 92 94 88 2 arch/arm/vfp/vfpmodule.c:184 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 88 92 8 2 arch/arm/vfp/vfpmodule.c:184 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 8 88 89 2 arch/arm/vfp/vfpmodule.c:183 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 __v ] [134])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6025332))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 89 8 13 2 arch/arm/vfp/vfpmodule.c:184 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 3 r3 [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 13 89 12 2 arch/arm/vfp/vfpmodule.c:186 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 1 r1 [ cmd ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 7 r7 [orig:139 cmd ] [139])
                (reg:SI 1 r1 [ cmd ]))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 1 r1 [ cmd ])
        (nil)))

(insn:TI 12 13 14 2 arch/arm/vfp/vfpmodule.c:184 (set (reg/v:SI 6 r6 [orig:135 cpu ] [135])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [141])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [141])
        (nil)))

(jump_insn 14 12 58 2 arch/arm/vfp/vfpmodule.c:186 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 21)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 58 14 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 58 16 3 arch/arm/vfp/vfpmodule.c:186 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:139 cmd ] [139])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 16 15 98 3 arch/arm/vfp/vfpmodule.c:186 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 8 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  8 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 98 16 100 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 100 98 101 4 (set (pc)
        (label_ref 99)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%] 

(barrier 101 100 21)

;; Start of basic block ( 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
(code_label 21 101 22 5 3 "" [1 uses])

(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 22 24 5 arch/arm/vfp/vfpmodule.c:188 (set (reg/f:SI 5 r5 [143])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 24 23 25 5 arch/arm/vfp/vfpmodule.c:188 (set (reg/f:SI 0 r0 [orig:136 D.15883 ] [136])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 6 r6 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (reg/f:SI 5 r5 [143])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 6 r6 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
        (nil)))

(insn:TI 25 24 26 5 arch/arm/vfp/vfpmodule.c:188 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:136 D.15883 ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 26 25 27 5 arch/arm/vfp/vfpmodule.c:188 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  6 [69.8%]  (fallthru)
;; Succ edge  8 [30.2%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 4 [r4]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  5 [69.8%]  (fallthru)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 27 29 6 arch/arm/vfp/vfpmodule.c:189 (set (reg:SI 3 r3 [144])
        (ior:SI (reg/v:SI 4 r4 [orig:134 __v ] [134])
            (const_int 1073741824 [0x40000000]))) 89 {*arm_iorsi3} (nil))

(insn:TI 29 28 31 6 arch/arm/vfp/vfpmodule.c:189 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [144])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6026090)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [144])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn:TI 31 29 36 6 arch/arm/vfp/vfpmodule.c:190 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:134 __v ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 36 31 32 6 arch/arm/vfp/vfpmodule.c:193 (set (reg:SI 4 r4 [147])
        (and:SI (reg/v:SI 4 r4 [orig:134 __v ] [134])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(call_insn:TI 32 36 35 6 arch/arm/vfp/vfpmodule.c:190 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 35 32 37 6 arch/arm/vfp/vfpmodule.c:192 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 6 r6 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (reg/f:SI 5 r5 [143])) [0 vfp_current_hw_state S4 A32])
        (reg/v:SI 7 r7 [orig:139 cmd ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 37 35 102 6 arch/arm/vfp/vfpmodule.c:193 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 4 r4 [147])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6026602)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(jump_insn:TI 102 37 103 6 (set (pc)
        (label_ref 44)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 103 102 99)

;; Start of basic block ( 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  4 [100.0%] 
(code_label 99 103 41 7 7 "" [1 uses])

(note 41 99 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 42 41 43 7 arch/arm/vfp/vfpmodule.c:199 (set (reg:SI 4 r4 [148])
        (and:SI (reg/v:SI 4 r4 [orig:134 __v ] [134])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 43 42 44 7 arch/arm/vfp/vfpmodule.c:199 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 4 r4 [148])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6027369)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 3 5 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  5 [30.2%] 
;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 44 43 45 8 2 "" [3 uses])

(note 45 44 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 50 45 56 8 arch/arm/vfp/vfpmodule.c:203 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 56 50 95 8 arch/arm/vfp/vfpmodule.c:203 (use (reg/i:SI 0 r0)) -1 (nil))

(note 95 56 96 8 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 96 95 97 8 arch/arm/vfp/vfpmodule.c:203 (return) 260 {return} (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 97 96 90)

(note 90 97 91 NOTE_INSN_DELETED)

(note 91 90 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_pm_suspend (vfp_pm_suspend)[0:837]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 15 (  1.7)


vfp_pm_suspend

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,8u} r1={9d,4u} r2={7d,2u,1d} r3={11d,7u} r4={3d,9u} r5={2d,4u} r6={1d,2u} r12={4d} r13={2d,14u} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={13d,3u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 563{507d,55u,1e} in 38{34 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 3 2 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 4 )->[5]->( 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 4 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 7 6 5 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 8 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 14 to worklist
  Adding insn 83 to worklist
  Adding insn 22 to worklist
  Adding insn 27 to worklist
  Adding insn 88 to worklist
  Adding insn 39 to worklist
  Adding insn 36 to worklist
  Adding insn 33 to worklist
  Adding insn 45 to worklist
  Adding insn 52 to worklist
  Adding insn 51 to worklist
  Adding insn 48 to worklist
  Adding insn 86 to worklist
  Adding insn 69 to worklist
  Adding insn 58 to worklist
Finished finding needed instructions:
processing block 8 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 63 to worklist
  Adding insn 57 to worklist
  Adding insn 56 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 50 to worklist
  Adding insn 47 to worklist
processing block 6 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 44 to worklist
processing block 4 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 26 to worklist
processing block 3 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 21 to worklist
processing block 2 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 13 to worklist
  Adding insn 11 to worklist
  Adding insn 80 to worklist
  Adding insn 8 to worklist
  Adding insn 10 to worklist
  Adding insn 12 to worklist
  Adding insn 78 to worklist
  Adding insn 77 to worklist
  Adding insn 82 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 83 to 14 -- after reload
;;   ======================================================

;;	  0-->    83 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->    82 r2=sp                             :cortex_a8_default
;;	  2-->    77 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  3-->    78 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    12 r5=r3+0x1b0                       :cortex_a8_default
;;	  5-->    10 r2=[r3+0x14]                      :cortex_a8_load_store_1
;;	  6-->    80 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  7-->     8 {r4=asm_operands;clobber cc;}     :nothing
;;	  9-->    11 r0=[r2*0x4+r3]                    :cortex_a8_load_store_1
;;	 11-->    13 cc=cmp(r0,r5)                     :cortex_a8_default
;;	 13-->    14 pc={(cc==0x0)?L23:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 13
;;   new head = 83
;;   new tail = 14

;;   ======================================================
;;   -- basic block 3 from 21 to 22 -- after reload
;;   ======================================================

;;	  0-->    21 r4=r4|0x40000000                  :cortex_a8_default
;;	  1-->    22 {asm_operands;clobber cc;}        :nothing
;;	Ready list (final):  
;;   total time = 1
;;   new head = 21
;;   new tail = 22

;;   ======================================================
;;   -- basic block 4 from 26 to 27 -- after reload
;;   ======================================================

;;	  0-->    26 cc=cmp(zxt(r4,0x1,0x1e),0x0)      :cortex_a8_default
;;	  2-->    27 pc={(cc==0x0)?L42:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 26
;;   new tail = 27

;;   ======================================================
;;   -- basic block 5 from 31 to 88 -- after reload
;;   ======================================================

;;	  0-->    32 r1=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  1-->    31 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  2-->    33 r0=call [`printk']                :cortex_a8_issue_branch
;;	  2-->    34 r0=r5                             :cortex_a8_default
;;	  3-->    35 r1=r4                             :cortex_a8_default
;;	  4-->    36 call [`vfp_save_state']           :cortex_a8_issue_branch
;;	  5-->    37 {r3=asm_operands;clobber cc;}     :nothing
;;	  6-->    38 r3=r3&0xffffffffbfffffff          :cortex_a8_default
;;	  7-->    39 {asm_operands;clobber cc;}        :nothing
;;	  8-->    88 pc=L53                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 8
;;   new head = 31
;;   new tail = 88

;;   ======================================================
;;   -- basic block 6 from 44 to 45 -- after reload
;;   ======================================================

;;	  0-->    44 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  2-->    45 pc={(cc==0x0)?L53:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 44
;;   new tail = 45

;;   ======================================================
;;   -- basic block 7 from 47 to 52 -- after reload
;;   ======================================================

;;	  0-->    47 r3=r4|0x40000000                  :cortex_a8_default
;;	  1-->    48 {asm_operands;clobber cc;}        :nothing
;;	  2-->    50 r1=r4                             :cortex_a8_default
;;	  3-->    51 call [`vfp_save_state']           :cortex_a8_issue_branch
;;	  4-->    52 {asm_operands;clobber cc;}        :nothing
;;	Ready list (final):  
;;   total time = 4
;;   new head = 47
;;   new tail = 52

;;   ======================================================
;;   -- basic block 8 from 56 to 86 -- after reload
;;   ======================================================

;;	  0-->    56 r0=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->    57 r1=0x8                            :cortex_a8_default
;;	  1-->    58 call [`__memzero']                :cortex_a8_issue_branch
;;	  1-->    63 r0=0x0                            :cortex_a8_default
;;	  2-->    69 use r0                            :nothing
;;	  2-->    86 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 56
;;   new tail = 86





vfp_pm_suspend

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,8u} r1={9d,4u} r2={7d,2u,1d} r3={11d,7u} r4={3d,9u} r5={2d,4u} r6={1d,2u} r12={4d} r13={2d,14u} r14={5d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={13d,3u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 563{507d,55u,1e} in 38{34 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 2 83 2 NOTE_INSN_DELETED)

(insn/f:TI 83 6 84 2 arch/arm/vfp/vfpmodule.c:444 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 5 r5)
            (expr_list:REG_DEAD (reg:SI 4 r4)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -16 [0xfffffffffffffff0])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 5 r5))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 6 r6))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 84 83 82 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 82 84 77 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 77 82 78 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 78 77 12 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
        (and:SI (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 12 78 10 2 arch/arm/vfp/vfpmodule.c:449 (set (reg/f:SI 5 r5 [orig:138 D.16109 ] [138])
        (plus:SI (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn:TI 10 12 80 2 arch/arm/vfp/vfpmodule.c:449 (set (reg:SI 2 r2 [orig:143 <variable>.cpu ] [143])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
        (nil)))

(insn:TI 80 10 8 2 arch/arm/vfp/vfpmodule.c:449 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 8 80 11 2 arch/arm/vfp/vfpmodule.c:446 (parallel [
            (set (reg/v:SI 4 r4 [orig:135 __v ] [135])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6062588))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 11 8 13 2 arch/arm/vfp/vfpmodule.c:449 (set (reg/f:SI 0 r0 [orig:139 D.16108 ] [139])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [orig:143 <variable>.cpu ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [142])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [142])
        (expr_list:REG_DEAD (reg:SI 2 r2 [orig:143 <variable>.cpu ] [143])
            (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [orig:143 <variable>.cpu ] [143])
                            (const_int 4 [0x4]))
                        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
                (nil)))))

(insn:TI 13 11 14 2 arch/arm/vfp/vfpmodule.c:449 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:139 D.16108 ] [139])
            (reg/f:SI 5 r5 [orig:138 D.16109 ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 14 13 20 2 arch/arm/vfp/vfpmodule.c:449 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 23)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  3 [85.0%]  (fallthru)
;; Succ edge  4 [15.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  2 [85.0%]  (fallthru)
(note 20 14 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 20 22 3 arch/arm/vfp/vfpmodule.c:450 (set (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
        (ior:SI (reg/v:SI 4 r4 [orig:135 __v ] [135])
            (const_int 1073741824 [0x40000000]))) 89 {*arm_iorsi3} (nil))

(insn:TI 22 21 23 3 arch/arm/vfp/vfpmodule.c:451 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6063217)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [15.0%] 
(code_label 23 22 24 4 14 "" [1 uses])

(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 25 24 26 4 NOTE_INSN_DELETED)

(insn:TI 26 25 27 4 arch/arm/vfp/vfpmodule.c:455 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
                (const_int 1 [0x1])
                (const_int 30 [0x1e]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 27 26 28 4 arch/arm/vfp/vfpmodule.c:455 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  4 [0.0%]  (fallthru)
(note 28 27 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 28 31 5 arch/arm/vfp/vfpmodule.c:456 (set (reg:SI 1 r1)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 31 32 33 5 arch/arm/vfp/vfpmodule.c:456 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11122980>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11122980>)
        (nil)))

(call_insn:TI 33 31 34 5 arch/arm/vfp/vfpmodule.c:456 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 34 33 35 5 arch/arm/vfp/vfpmodule.c:457 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:138 D.16109 ] [138])) 167 {*arm_movsi_insn} (nil))

(insn:TI 35 34 36 5 arch/arm/vfp/vfpmodule.c:457 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:136 fpexc ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 36 35 37 5 arch/arm/vfp/vfpmodule.c:457 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 37 36 38 5 arch/arm/vfp/vfpmodule.c:460 (parallel [
            (set (reg/v:SI 3 r3 [orig:134 __v ] [134])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6064369))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 38 37 39 5 arch/arm/vfp/vfpmodule.c:460 (set (reg:SI 3 r3 [147])
        (and:SI (reg/v:SI 3 r3 [orig:134 __v ] [134])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 39 38 88 5 arch/arm/vfp/vfpmodule.c:460 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [147])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6064369)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [147])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(jump_insn:TI 88 39 89 5 (set (pc)
        (label_ref 53)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 89 88 42)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 42 89 43 6 15 "" [1 uses])

(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 44 43 45 6 arch/arm/vfp/vfpmodule.c:461 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:139 D.16108 ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 45 44 46 6 arch/arm/vfp/vfpmodule.c:461 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [78.3%]  (fallthru)
;; Succ edge  8 [21.6%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  6 [78.3%]  (fallthru)
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 47 46 48 7 arch/arm/vfp/vfpmodule.c:462 (set (reg:SI 3 r3 [148])
        (ior:SI (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
            (const_int 1073741824 [0x40000000]))) 89 {*arm_iorsi3} (nil))

(insn:TI 48 47 50 7 arch/arm/vfp/vfpmodule.c:462 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [148])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6064625)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [148])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn:TI 50 48 51 7 arch/arm/vfp/vfpmodule.c:463 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:136 fpexc ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 51 50 52 7 arch/arm/vfp/vfpmodule.c:463 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 52 51 53 7 arch/arm/vfp/vfpmodule.c:464 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6064881)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 6 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  6 [21.6%] 
;; Pred edge  5 [100.0%] 
(code_label 53 52 54 8 16 "" [2 uses])

(note 54 53 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 56 54 57 8 arch/arm/vfp/vfpmodule.c:468 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 57 56 58 8 arch/arm/vfp/vfpmodule.c:468 discrim 1 (set (reg:SI 1 r1)
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 58 57 63 8 arch/arm/vfp/vfpmodule.c:468 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 63 58 69 8 arch/arm/vfp/vfpmodule.c:471 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 69 63 85 8 arch/arm/vfp/vfpmodule.c:471 (use (reg/i:SI 0 r0)) -1 (nil))

(note 85 69 86 8 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 86 85 87 8 arch/arm/vfp/vfpmodule.c:471 (return) 260 {return} (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 87 86 79)

(note 79 87 81 NOTE_INSN_DELETED)

(note 81 79 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_flush_hwstate (vfp_flush_hwstate)[0:841]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 66 to 21 -- after reload
;;   ======================================================

;;	  0-->    66 r2=sp                             :cortex_a8_default
;;	  1-->    62 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->    63 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->     9 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	  6-->    10 r2=r2+0x1                         :cortex_a8_default
;;	  6-->    11 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	  7-->    12 {asm_operands;clobber [scratch];} :nothing
;;	  8-->    16 r2=[r3+0x14]                      :cortex_a8_load_store_1
;;	  8-->    18 r1=r0+0x1b0                       :cortex_a8_default
;;	  9-->    17 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	 12-->    19 ip=[r2*0x4+r3]                    :cortex_a8_load_store_1
;;	 14-->    20 cc=cmp(ip,r1)                     :cortex_a8_default
;;	 16-->    21 pc={(cc!=0x0)?L29:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 16
;;   new head = 66
;;   new tail = 21

;;   ======================================================
;;   -- basic block 3 from 23 to 28 -- after reload
;;   ======================================================

;;	  0-->    23 {r1=asm_operands;clobber cc;}     :nothing
;;	  1-->    24 r1=r1&0xffffffffbfffffff          :cortex_a8_default
;;	  2-->    25 {asm_operands;clobber cc;}        :nothing
;;	  3-->    27 r1=0x0                            :cortex_a8_default
;;	  3-->    28 [r2*0x4+r3]=r1                    :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 23
;;   new tail = 28

;;   ======================================================
;;   -- basic block 4 from 31 to 47 -- after reload
;;   ======================================================

;;	  0-->    31 r3=0x2                            :cortex_a8_default
;;	  0-->    32 [r0+0x2c0]=r3                     :cortex_a8_load_store_1
;;	  1-->    33 {asm_operands;clobber [scratch];} :nothing
;;	  2-->    67 r2=sp                             :cortex_a8_default
;;	  3-->    60 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  4-->    61 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  6-->    37 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	  8-->    38 r2=r2-0x1                         :cortex_a8_default
;;	  8-->    39 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	  9-->    40 {asm_operands;clobber [scratch];} :nothing
;;	 10-->    44 r3=[r3]                           :cortex_a8_load_store_1
;;	 12-->    46 cc=cmp(zxt(r3,0x1,0x1),0x0)       :cortex_a8_default
;;	 14-->    47 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 14
;;   new head = 31
;;   new tail = 47

;;   ======================================================
;;   -- basic block 5 from 72 to 49 -- after reload
;;   ======================================================

;;	  0-->    72 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  1-->    49 call [`preempt_schedule']         :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 72
;;   new tail = 49





vfp_flush_hwstate

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={2d,2u} r1={6d,4u} r2={9d,8u,2d} r3={9d,12u,5d} r12={2d,1u} r13={1d,8u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 191{145d,39u,7e} in 33{32 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 68 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 68 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 68 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 3 66 2 NOTE_INSN_DELETED)

(insn:TI 66 7 62 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 62 66 63 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 63 62 9 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
        (and:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 9 63 10 2 arch/arm/vfp/vfpmodule.c:520 (set (reg:SI 2 r2 [orig:145 <variable>.preempt_count ] [145])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn:TI 10 9 11 2 arch/arm/vfp/vfpmodule.c:520 (set (reg:SI 2 r2 [146])
        (plus:SI (reg:SI 2 r2 [orig:145 <variable>.preempt_count ] [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpmodule.c:520 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [146])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [146])
        (nil)))

(insn:TI 12 11 16 2 arch/arm/vfp/vfpmodule.c:520 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6072067)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 16 12 18 2 arch/arm/vfp/vfpmodule.c:520 (set (reg/v:SI 2 r2 [orig:142 cpu ] [142])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
        (nil)))

(insn 18 16 17 2 arch/arm/vfp/vfpmodule.c:526 (set (reg/f:SI 1 r1 [150])
        (plus:SI (reg/v/f:SI 0 r0 [orig:143 thread ] [143])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn:TI 17 18 19 2 arch/arm/vfp/vfpmodule.c:526 (set (reg/f:SI 3 r3 [149])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 19 17 20 2 arch/arm/vfp/vfpmodule.c:526 (set (reg/f:SI 12 ip [151])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [149])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [149])) [0 vfp_current_hw_state S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
            (nil))))

(insn:TI 20 19 21 2 arch/arm/vfp/vfpmodule.c:526 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 12 ip [151])
            (reg/f:SI 1 r1 [150]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [151])
        (expr_list:REG_DEAD (reg/f:SI 1 r1 [150])
            (nil))))

(jump_insn:TI 21 20 22 2 arch/arm/vfp/vfpmodule.c:526 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [15.0%]  (fallthru)
;; Succ edge  4 [85.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	 24 [cc]

;; Pred edge  2 [15.0%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 22 24 3 arch/arm/vfp/vfpmodule.c:527 (parallel [
            (set (reg/v:SI 1 r1 [orig:141 __v ] [141])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6072957))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 24 23 25 3 arch/arm/vfp/vfpmodule.c:529 (set (reg:SI 1 r1 [152])
        (and:SI (reg/v:SI 1 r1 [orig:141 __v ] [141])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 25 24 27 3 arch/arm/vfp/vfpmodule.c:529 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 1 r1 [152])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6073201)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:SI 1 r1 [152])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn:TI 27 25 28 3 arch/arm/vfp/vfpmodule.c:535 (set (reg:SI 1 r1 [154])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 28 27 29 3 arch/arm/vfp/vfpmodule.c:535 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [149])) [0 vfp_current_hw_state S4 A32])
        (reg:SI 1 r1 [154])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [149])
        (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:142 cpu ] [142])
            (expr_list:REG_DEAD (reg:SI 1 r1 [154])
                (expr_list:REG_EQUAL (const_int 0 [0x0])
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [85.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 29 28 30 4 21 "" [1 uses])

(note 30 29 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 35 30 45 4 NOTE_INSN_DELETED)

(note 45 35 31 4 NOTE_INSN_DELETED)

(insn:TI 31 45 32 4 arch/arm/vfp/vfpmodule.c:546 (set (reg:SI 3 r3 [155])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 32 31 33 4 arch/arm/vfp/vfpmodule.c:546 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:143 thread ] [143])
                (const_int 704 [0x2c0])) [0 <variable>.vfpstate.hard.cpu+0 S4 A64])
        (reg:SI 3 r3 [155])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [155])
        (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:143 thread ] [143])
            (expr_list:REG_EQUAL (const_int 2 [0x2])
                (nil)))))

(insn:TI 33 32 67 4 arch/arm/vfp/vfpmodule.c:548 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6075632)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 67 33 60 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 60 67 61 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 61 60 37 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
        (and:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 37 61 38 4 arch/arm/vfp/vfpmodule.c:548 (set (reg:SI 2 r2 [orig:157 <variable>.preempt_count ] [157])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn:TI 38 37 39 4 arch/arm/vfp/vfpmodule.c:548 (set (reg:SI 2 r2 [158])
        (plus:SI (reg:SI 2 r2 [orig:157 <variable>.preempt_count ] [157])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 39 38 40 4 arch/arm/vfp/vfpmodule.c:548 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [158])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [158])
        (nil)))

(insn:TI 40 39 44 4 arch/arm/vfp/vfpmodule.c:548 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6075632)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 44 40 46 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:134 D.16427 ] [134])
        (mem/v:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 46 44 47 4 arch/arm/vfp/vfpmodule.c:548 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:134 D.16427 ] [134])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:134 D.16427 ] [134])
        (nil)))

(jump_insn:TI 47 46 48 4 arch/arm/vfp/vfpmodule.c:548 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  EXIT [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [0.0%]  (fallthru)
(note 48 47 71 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 71 48 72 5 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 72 71 49 5 arch/arm/vfp/vfpmodule.c:549 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 49 72 50 5 arch/arm/vfp/vfpmodule.c:548 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("preempt_schedule") [flags 0x41] <function_decl 0x10aa7a00 preempt_schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 50 49 64)

(note 64 50 65 NOTE_INSN_DELETED)

(note 65 64 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_sync_hwstate (vfp_sync_hwstate)[0:840]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 67 to 21 -- after reload
;;   ======================================================

;;	  0-->    67 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->    65 r2=sp                             :cortex_a8_default
;;	  2-->    61 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  3-->    62 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  5-->     9 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	  7-->    10 r2=r2+0x1                         :cortex_a8_default
;;	  7-->    11 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	  8-->    12 {asm_operands;clobber [scratch];} :nothing
;;	  9-->    14 r2=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	 10-->    17 r1=[r3+0x14]                      :cortex_a8_load_store_1
;;	 10-->    19 r3=r0+0x1b0                       :cortex_a8_default
;;	 13-->    18 r0=[r1*0x4+r2]                    :cortex_a8_load_store_1
;;	 15-->    20 cc=cmp(r0,r3)                     :cortex_a8_default
;;	 17-->    21 pc={(cc!=0x0)?L30:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 17
;;   new head = 67
;;   new tail = 21

;;   ======================================================
;;   -- basic block 3 from 23 to 29 -- after reload
;;   ======================================================

;;	  0-->    23 {r4=asm_operands;clobber cc;}     :nothing
;;	  1-->    24 r1=r4|0x40000000                  :cortex_a8_default
;;	  2-->    25 {asm_operands;clobber cc;}        :nothing
;;	  3-->    28 call [`vfp_save_state']           :cortex_a8_issue_branch
;;	  4-->    29 {asm_operands;clobber cc;}        :nothing
;;	Ready list (final):  
;;   total time = 4
;;   new head = 23
;;   new tail = 29

;;   ======================================================
;;   -- basic block 4 from 32 to 46 -- after reload
;;   ======================================================

;;	  0-->    32 {asm_operands;clobber [scratch];} :nothing
;;	  1-->    66 r2=sp                             :cortex_a8_default
;;	  2-->    59 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  3-->    60 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  5-->    36 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	  7-->    37 r2=r2-0x1                         :cortex_a8_default
;;	  7-->    38 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	  8-->    39 {asm_operands;clobber [scratch];} :nothing
;;	  9-->    43 r3=[r3]                           :cortex_a8_load_store_1
;;	 11-->    45 cc=cmp(zxt(r3,0x1,0x1),0x0)       :cortex_a8_default
;;	 13-->    46 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 13
;;   new head = 32
;;   new tail = 46

;;   ======================================================
;;   -- basic block 5 from 72 to 48 -- after reload
;;   ======================================================

;;	  0-->    72 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  1-->    48 call [`preempt_schedule']         :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 72
;;   new tail = 48





vfp_sync_hwstate

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,3u} r1={5d,3u,1d} r2={10d,7u} r3={9d,10u,4d} r4={2d,4u} r12={2d} r13={2d,10u} r14={2d,3u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 310{263d,42u,5e} in 32{30 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 3 67 2 NOTE_INSN_DELETED)

(insn/f:TI 67 7 68 2 arch/arm/vfp/vfpmodule.c:497 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 68 67 65 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 65 68 61 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 61 65 62 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 62 61 9 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
        (and:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 9 62 10 2 arch/arm/vfp/vfpmodule.c:498 (set (reg:SI 2 r2 [orig:146 <variable>.preempt_count ] [146])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn:TI 10 9 11 2 arch/arm/vfp/vfpmodule.c:498 (set (reg:SI 2 r2 [147])
        (plus:SI (reg:SI 2 r2 [orig:146 <variable>.preempt_count ] [146])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpmodule.c:498 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [147])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [147])
        (nil)))

(insn:TI 12 11 14 2 arch/arm/vfp/vfpmodule.c:498 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6069251)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 14 12 17 2 arch/arm/vfp/vfpmodule.c:504 (set (reg/f:SI 2 r2 [148])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 17 14 19 2 arch/arm/vfp/vfpmodule.c:504 (set (reg:SI 1 r1 [orig:151 <variable>.cpu ] [151])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
        (nil)))

(insn 19 17 18 2 arch/arm/vfp/vfpmodule.c:504 (set (reg/f:SI 3 r3 [152])
        (plus:SI (reg/v/f:SI 0 r0 [orig:144 thread ] [144])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v/f:SI 0 r0 [orig:144 thread ] [144])
        (nil)))

(insn:TI 18 19 20 2 arch/arm/vfp/vfpmodule.c:504 (set (reg/f:SI 0 r0 [orig:143 D.16148 ] [143])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:151 <variable>.cpu ] [151])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [148])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [148])
        (expr_list:REG_DEAD (reg:SI 1 r1 [orig:151 <variable>.cpu ] [151])
            (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:151 <variable>.cpu ] [151])
                            (const_int 4 [0x4]))
                        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
                (nil)))))

(insn:TI 20 18 21 2 arch/arm/vfp/vfpmodule.c:504 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:143 D.16148 ] [143])
            (reg/f:SI 3 r3 [152]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [152])
        (nil)))

(jump_insn:TI 21 20 22 2 arch/arm/vfp/vfpmodule.c:504 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [6.7%]  (fallthru)
;; Succ edge  4 [93.3%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [6.7%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 22 24 3 arch/arm/vfp/vfpmodule.c:505 (parallel [
            (set (reg/v:SI 4 r4 [orig:141 __v ] [141])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6070141))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 24 23 25 3 arch/arm/vfp/vfpmodule.c:510 (set (reg:SI 1 r1 [orig:142 D.16152 ] [142])
        (ior:SI (reg/v:SI 4 r4 [orig:141 __v ] [141])
            (const_int 1073741824 [0x40000000]))) 89 {*arm_iorsi3} (nil))

(insn:TI 25 24 28 3 arch/arm/vfp/vfpmodule.c:510 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 1 r1 [orig:142 D.16152 ] [142])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6070769)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(call_insn:TI 28 25 29 3 arch/arm/vfp/vfpmodule.c:511 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 29 28 30 3 arch/arm/vfp/vfpmodule.c:512 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg/v:SI 4 r4 [orig:141 __v ] [141])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6071025)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [93.3%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 30 29 31 4 27 "" [1 uses])

(note 31 30 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 34 31 44 4 NOTE_INSN_DELETED)

(note 44 34 32 4 NOTE_INSN_DELETED)

(insn:TI 32 44 66 4 arch/arm/vfp/vfpmodule.c:515 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6071408)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 66 32 59 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 59 66 60 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 60 59 36 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
        (and:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 36 60 37 4 arch/arm/vfp/vfpmodule.c:515 (set (reg:SI 2 r2 [orig:154 <variable>.preempt_count ] [154])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn:TI 37 36 38 4 arch/arm/vfp/vfpmodule.c:515 (set (reg:SI 2 r2 [155])
        (plus:SI (reg:SI 2 r2 [orig:154 <variable>.preempt_count ] [154])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 38 37 39 4 arch/arm/vfp/vfpmodule.c:515 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [155])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [155])
        (nil)))

(insn:TI 39 38 43 4 arch/arm/vfp/vfpmodule.c:515 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6071408)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 43 39 45 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:134 D.16473 ] [134])
        (mem/v:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 45 43 46 4 arch/arm/vfp/vfpmodule.c:515 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:134 D.16473 ] [134])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:134 D.16473 ] [134])
        (nil)))

(jump_insn:TI 46 45 47 4 arch/arm/vfp/vfpmodule.c:515 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  EXIT [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [0.0%]  (fallthru)
(note 47 46 71 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 71 47 72 5 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 72 71 48 5 arch/arm/vfp/vfpmodule.c:516 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 48 72 49 5 arch/arm/vfp/vfpmodule.c:515 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("preempt_schedule") [flags 0x41] <function_decl 0x10aa7a00 preempt_schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 49 48 63)

(note 63 49 64 NOTE_INSN_DELETED)

(note 64 63 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_notifier (vfp_notifier)[0:829]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 19 count 23 (  1.8)


vfp_notifier

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,8u} r1={12d,10u} r2={23d,23u,4d} r3={23d,27u,9d} r4={3d,8u} r5={5d,12u,2d} r6={3d,6u} r7={2d,4u} r8={1d,2u} r12={5d} r13={2d,23u} r14={6d,2u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={16d,9u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 812{663d,134u,15e} in 94{89 regular + 5 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 0 )->[2]->( 12 7 8 3 11 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 13 [sp]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 2 )->[3]->( 4 6 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 7 [r7] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 3 4 5 )->[6]->( 12 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 2 )->[7]->( 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 8 7 )->[9]->( 10 12 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 9 )->[10]->( 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 6 11 9 10 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 12 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 9 to worklist
  Adding insn 198 to worklist
  Adding insn 19 to worklist
  Adding insn 24 to worklist
  Adding insn 31 to worklist
  Adding insn 28 to worklist
  Adding insn 213 to worklist
  Adding insn 44 to worklist
  Adding insn 40 to worklist
  Adding insn 215 to worklist
  Adding insn 88 to worklist
  Adding insn 87 to worklist
  Adding insn 81 to worklist
  Adding insn 80 to worklist
  Adding insn 75 to worklist
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 56 to worklist
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 131 to worklist
  Adding insn 130 to worklist
  Adding insn 124 to worklist
  Adding insn 121 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 138 to worklist
  Adding insn 135 to worklist
  Adding insn 217 to worklist
  Adding insn 140 to worklist
  Adding insn 156 to worklist
  Adding insn 149 to worklist
  Adding insn 201 to worklist
  Adding insn 170 to worklist
Finished finding needed instructions:
processing block 12 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 164 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 137 to worklist
processing block 7 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 86 to worklist
  Adding insn 85 to worklist
  Adding insn 187 to worklist
  Adding insn 186 to worklist
  Adding insn 194 to worklist
  Adding insn 79 to worklist
  Adding insn 78 to worklist
  Adding insn 70 to worklist
  Adding insn 69 to worklist
  Adding insn 68 to worklist
  Adding insn 67 to worklist
  Adding insn 61 to worklist
  Adding insn 60 to worklist
  Adding insn 55 to worklist
  Adding insn 53 to worklist
  Adding insn 189 to worklist
  Adding insn 188 to worklist
  Adding insn 193 to worklist
  Adding insn 50 to worklist
  Adding insn 51 to worklist
  Adding insn 49 to worklist
processing block 8 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 129 to worklist
  Adding insn 128 to worklist
  Adding insn 183 to worklist
  Adding insn 182 to worklist
  Adding insn 196 to worklist
  Adding insn 120 to worklist
  Adding insn 116 to worklist
  Adding insn 115 to worklist
  Adding insn 113 to worklist
  Adding insn 114 to worklist
  Adding insn 112 to worklist
  Adding insn 106 to worklist
  Adding insn 105 to worklist
  Adding insn 185 to worklist
  Adding insn 184 to worklist
  Adding insn 195 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 43 to worklist
  Adding insn 191 to worklist
  Adding insn 39 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
processing block 5 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 30 to worklist
  Adding insn 27 to worklist
processing block 4 lr out =  0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 23 to worklist
  Adding insn 22 to worklist
  Adding insn 21 to worklist
processing block 3 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 16 to worklist
  Adding insn 18 to worklist
  Adding insn 15 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 155 to worklist
  Adding insn 154 to worklist
  Adding insn 153 to worklist
  Adding insn 148 to worklist
  Adding insn 181 to worklist
  Adding insn 180 to worklist
  Adding insn 197 to worklist
processing block 2 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 4 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 19 count 24 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 198 to 9 -- after reload
;;   ======================================================

;;	  0-->   198 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     4 r4=r2                             :cortex_a8_default
;;	  2-->     9 {pc={(leu(r1,0x3))?[r1*0x4+L10]:L1:cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 198
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 15 to 19 -- after reload
;;   ======================================================

;;	  0-->    15 {r6=asm_operands;clobber cc;}     :nothing
;;	  1-->    18 cc=cmp(zxt(r6,0x1,0x1e),0x0)      :cortex_a8_default
;;	  1-->    16 r5=[r2+0x14]                      :cortex_a8_load_store_1
;;	  3-->    19 pc={(cc==0x0)?L32:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 15
;;   new tail = 19

;;   ======================================================
;;   -- basic block 4 from 21 to 24 -- after reload
;;   ======================================================

;;	  0-->    21 r7=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    22 r0=[r5*0x4+r7]                    :cortex_a8_load_store_1
;;	  5-->    23 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	  7-->    24 pc={(cc==0x0)?L32:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 21
;;   new tail = 24

;;   ======================================================
;;   -- basic block 5 from 27 to 31 -- after reload
;;   ======================================================

;;	  0-->    27 r1=r6                             :cortex_a8_default
;;	  1-->    28 call [`vfp_save_state']           :cortex_a8_issue_branch
;;	  1-->    30 r3=[r5*0x4+r7]                    :cortex_a8_load_store_1
;;	  4-->    31 [r3+0x110]=r5                     :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 27
;;   new tail = 31

;;   ======================================================
;;   -- basic block 6 from 34 to 213 -- after reload
;;   ======================================================

;;	  0-->    34 r3=[r4+0x2c0]                     :cortex_a8_load_store_1
;;	  0-->    43 r6=r6&0xffffffffbfffffff          :cortex_a8_default
;;	  2-->    35 cc=cmp(r3,r5)                     :cortex_a8_default
;;	  3-->    39 (cc) r2=0x0                       :cortex_a8_default
;;	  4-->   191 (cc) r3=`*.LANCHOR0'              :cortex_a8_load_store_1
;;	  7-->    40 (cc) [r5*0x4+r3]=r2               :cortex_a8_load_store_1
;;	  8-->    44 {asm_operands;clobber cc;}        :nothing
;;	  9-->   213 pc=L158                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 9
;;   new head = 34
;;   new tail = 213

;;   ======================================================
;;   -- basic block 7 from 49 to 215 -- after reload
;;   ======================================================

;;	  0-->    49 r5=r2+0x1b0                       :cortex_a8_default
;;	  0-->    51 r1=0x118                          :cortex_a8_default
;;	  1-->    50 r0=r5                             :cortex_a8_default
;;	  2-->    52 call [`__memzero']                :cortex_a8_issue_branch
;;	  2-->   193 r2=sp                             :cortex_a8_default
;;	  3-->   188 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  3-->    53 r2=0x40000000                     :cortex_a8_default
;;	  4-->   189 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->    54 [r4+0x2b0]=r2                     :cortex_a8_load_store_1
;;	  5-->    55 r1=0x0                            :cortex_a8_default
;;	  6-->    60 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	  7-->    56 [r4+0x2b4]=r1                     :cortex_a8_load_store_1
;;	  8-->    61 r2=r2+0x1                         :cortex_a8_default
;;	  8-->    62 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	  9-->    63 {asm_operands;clobber [scratch];} :nothing
;;	 10-->    67 r2=[r3+0x14]                      :cortex_a8_load_store_1
;;	 11-->    68 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	 14-->    69 r0=[r2*0x4+r3]                    :cortex_a8_load_store_1
;;	 16-->    70 cc=cmp(r0,r5)                     :cortex_a8_default
;;	 16-->    75 (!cc) [r2*0x4+r3]=r1              :cortex_a8_load_store_1
;;	 17-->    78 {r3=asm_operands;clobber cc;}     :nothing
;;	 18-->    79 r3=r3&0xffffffffbfffffff          :cortex_a8_default
;;	 19-->    80 {asm_operands;clobber cc;}        :nothing
;;	 20-->    81 {asm_operands;clobber [scratch];} :nothing
;;	 21-->   194 r2=sp                             :cortex_a8_default
;;	 22-->   186 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	 23-->   187 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	 25-->    85 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	 27-->    86 r2=r2-0x1                         :cortex_a8_default
;;	 27-->    87 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	 28-->    88 {asm_operands;clobber [scratch];} :nothing
;;	 29-->   215 pc=L210                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 29
;;   new head = 49
;;   new tail = 215

;;   ======================================================
;;   -- basic block 8 from 195 to 131 -- after reload
;;   ======================================================

;;	  0-->   195 r2=sp                             :cortex_a8_default
;;	  1-->   184 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   185 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  4-->   105 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	  6-->   106 r2=r2+0x1                         :cortex_a8_default
;;	  6-->   107 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	  7-->   108 {asm_operands;clobber [scratch];} :nothing
;;	  8-->   112 r2=[r3+0x14]                      :cortex_a8_load_store_1
;;	  8-->   114 r4=r4+0x1b0                       :cortex_a8_default
;;	  9-->   113 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	 12-->   115 r1=[r2*0x4+r3]                    :cortex_a8_load_store_1
;;	 14-->   116 cc=cmp(r1,r4)                     :cortex_a8_default
;;	 15-->   120 (!cc) r1=0x0                      :cortex_a8_default
;;	 15-->   121 (!cc) [r2*0x4+r3]=r1              :cortex_a8_load_store_1
;;	 16-->   124 {asm_operands;clobber [scratch];} :nothing
;;	 17-->   196 r2=sp                             :cortex_a8_default
;;	 18-->   182 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	 19-->   183 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	 21-->   128 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	 23-->   129 r2=r2-0x1                         :cortex_a8_default
;;	 23-->   130 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	 24-->   131 {asm_operands;clobber [scratch];} :nothing
;;	Ready list (final):  
;;   total time = 24
;;   new head = 195
;;   new tail = 131

;;   ======================================================
;;   -- basic block 9 from 135 to 138 -- after reload
;;   ======================================================

;;	  0-->   135 r3=[r3]                           :cortex_a8_load_store_1
;;	  2-->   137 cc=cmp(zxt(r3,0x1,0x1),0x0)       :cortex_a8_default
;;	  4-->   138 pc={(cc==0x0)?L158:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 135
;;   new tail = 138

;;   ======================================================
;;   -- basic block 10 from 140 to 217 -- after reload
;;   ======================================================

;;	  0-->   140 call [`preempt_schedule']         :cortex_a8_issue_branch
;;	  0-->   217 pc=L158                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 140
;;   new tail = 217

;;   ======================================================
;;   -- basic block 11 from 197 to 156 -- after reload
;;   ======================================================

;;	  0-->   197 r3=sp                             :cortex_a8_default
;;	  1-->   180 r5=r3&0xffffffffffffe03f          :cortex_a8_default
;;	  2-->   181 r5=r5&0xffffffffffffffc0          :cortex_a8_default
;;	  3-->   148 r0=r5                             :cortex_a8_default
;;	  4-->   149 call [`vfp_sync_hwstate']         :cortex_a8_issue_branch
;;	  4-->   153 r0=r4+0x1b0                       :cortex_a8_default
;;	  5-->   154 r1=r5+0x1b0                       :cortex_a8_default
;;	  5-->   155 r2=0x118                          :cortex_a8_default
;;	  6-->   156 r0=call [`memcpy']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 197
;;   new tail = 156

;;   ======================================================
;;   -- basic block 12 from 164 to 201 -- after reload
;;   ======================================================

;;	  0-->   164 r0=0x0                            :cortex_a8_default
;;	  0-->   170 use r0                            :nothing
;;	  0-->   201 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 164
;;   new tail = 201





vfp_notifier

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,8u} r1={12d,10u} r2={23d,23u,4d} r3={23d,27u,9d} r4={3d,8u} r5={5d,12u,2d} r6={3d,6u} r7={2d,4u} r8={1d,2u} r12={5d} r13={2d,23u} r14={6d,2u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={16d,9u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 812{663d,134u,15e} in 94{89 regular + 5 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 13 [sp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 13 [sp]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 6 5 2 NOTE_INSN_DELETED)

(note 5 3 198 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 198 5 199 2 arch/arm/vfp/vfpmodule.c:121 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 4 r4)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -24 [0xffffffffffffffe8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 7 r7))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 16 [0x10])) [0 S4 A32])
                        (reg:SI 8 r8))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 20 [0x14])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 199 198 4 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 4 199 9 2 arch/arm/vfp/vfpmodule.c:121 (set (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
        (reg:SI 2 r2 [ v ])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 9 4 10 2 arch/arm/vfp/vfpmodule.c:128 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 1 r1 [ cmd ])
                        (const_int 3 [0x3]))
                    (mem:SI (plus:SI (mult:SI (reg:SI 1 r1 [ cmd ])
                                (const_int 4 [0x4]))
                            (label_ref 10)) [0 S4 A32])
                    (label_ref 158)))
            (clobber (reg:CC 24 cc))
            (use (label_ref 10))
        ]) 265 {arm_casesi_internal} (expr_list:REG_DEAD (reg:SI 1 r1 [ cmd ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (insn_list:REG_LABEL_TARGET 158 (nil)))))
;; End of basic block 2 -> ( 12 7 8 3 11)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  12 [20.0%] 
;; Succ edge  7 [20.0%] 
;; Succ edge  8 [20.0%] 
;; Succ edge  3 [20.0%] 
;; Succ edge  11 [20.0%] 

;; Insn is not within a basic block
(code_label 10 9 11 38 "" [2 uses])

;; Insn is not within a basic block
(jump_insn 11 10 12 arch/arm/vfp/vfpmodule.c:128 (addr_vec:SI [
            (label_ref:SI 47)
            (label_ref:SI 100)
            (label_ref:SI 13)
            (label_ref:SI 143)
        ]) -1 (nil))

(barrier 12 11 13)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [20.0%] 
(code_label 13 12 14 3 36 "" [1 uses])

(note 14 13 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 14 15 3 NOTE_INSN_DELETED)

(insn:TI 15 17 18 3 arch/arm/vfp/vfpmodule.c:130 (parallel [
            (set (reg/v:SI 6 r6 [orig:155 __v ] [155])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6018545))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 18 15 16 3 arch/arm/vfp/vfpmodule.c:140 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:155 __v ] [155])
                (const_int 1 [0x1])
                (const_int 30 [0x1e]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 16 18 19 3 arch/arm/vfp/vfpmodule.c:133 (set (reg/v:SI 5 r5 [orig:156 cpu ] [156])
        (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:157 thread ] [157])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 19 16 20 3 arch/arm/vfp/vfpmodule.c:140 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 32)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 6)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 20 22 4 arch/arm/vfp/vfpmodule.c:140 discrim 1 (set (reg/f:SI 7 r7 [164])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 22 21 23 4 arch/arm/vfp/vfpmodule.c:140 discrim 1 (set (reg/f:SI 0 r0 [orig:158 D.15858 ] [158])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                    (const_int 4 [0x4]))
                (reg/f:SI 7 r7 [164])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
        (nil)))

(insn:TI 23 22 24 4 arch/arm/vfp/vfpmodule.c:140 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:158 D.15858 ] [158])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 24 23 25 4 arch/arm/vfp/vfpmodule.c:140 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 32)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  5 [69.8%]  (fallthru)
;; Succ edge  6 [30.2%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  4 [69.8%]  (fallthru)
(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 25 28 5 arch/arm/vfp/vfpmodule.c:141 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:155 __v ] [155])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 28 27 30 5 arch/arm/vfp/vfpmodule.c:141 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 30 28 31 5 arch/arm/vfp/vfpmodule.c:142 (set (reg/f:SI 3 r3 [166])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                    (const_int 4 [0x4]))
                (reg/f:SI 7 r7 [164])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
        (nil)))

(insn:TI 31 30 32 5 arch/arm/vfp/vfpmodule.c:142 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [166])
                (const_int 272 [0x110])) [0 <variable>.hard.cpu+0 S4 A64])
        (reg/v:SI 5 r5 [orig:156 cpu ] [156])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [166])
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 3 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [30.2%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 32 31 33 6 39 "" [2 uses])

(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 34 33 43 6 arch/arm/vfp/vfpmodule.c:149 (set (reg:SI 3 r3 [orig:167 <variable>.vfpstate.hard.cpu ] [167])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                (const_int 704 [0x2c0])) [0 <variable>.vfpstate.hard.cpu+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 43 34 35 6 arch/arm/vfp/vfpmodule.c:157 (set (reg:SI 6 r6 [170])
        (and:SI (reg/v:SI 6 r6 [orig:155 __v ] [155])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 35 43 39 6 arch/arm/vfp/vfpmodule.c:149 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:167 <variable>.vfpstate.hard.cpu ] [167])
            (reg/v:SI 5 r5 [orig:156 cpu ] [156]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 39 35 191 6 arch/arm/vfp/vfpmodule.c:150 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [169])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 191 39 40 6 arch/arm/vfp/vfpmodule.c:150 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [168])
            (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 40 191 44 6 arch/arm/vfp/vfpmodule.c:150 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                        (const_int 4 [0x4]))
                    (reg/f:SI 3 r3 [168])) [0 vfp_current_hw_state S4 A32])
            (reg:SI 2 r2 [169]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [168])
            (expr_list:REG_DEAD (reg:SI 2 r2 [169])
                (expr_list:REG_EQUAL (const_int 0 [0x0])
                    (nil))))))

(insn:TI 44 40 213 6 arch/arm/vfp/vfpmodule.c:157 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 6 r6 [170])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6021993)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(jump_insn:TI 213 44 214 6 arch/arm/vfp/vfpmodule.c:158 (set (pc)
        (label_ref 158)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%] 

(barrier 214 213 47)

;; Start of basic block ( 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [20.0%] 
(code_label 47 214 48 7 34 "" [1 uses])

(note 48 47 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 58 48 83 7 NOTE_INSN_DELETED)

(note 83 58 93 7 NOTE_INSN_DELETED)

(note 93 83 49 7 NOTE_INSN_DELETED)

(insn:TI 49 93 51 7 arch/arm/vfp/vfpmodule.c:58 (set (reg/v/f:SI 5 r5 [orig:144 vfp ] [144])
        (plus:SI (reg/f:SI 2 r2 [orig:157 thread ] [157])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:157 thread ] [157])
        (nil)))

(insn 51 49 50 7 arch/arm/vfp/vfpmodule.c:61 discrim 1 (set (reg:SI 1 r1)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (nil))

(insn:TI 50 51 52 7 arch/arm/vfp/vfpmodule.c:61 discrim 1 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:144 vfp ] [144])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 52 50 193 7 arch/arm/vfp/vfpmodule.c:61 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 193 52 188 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 188 193 53 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 53 188 189 7 arch/arm/vfp/vfpmodule.c:63 (set (reg:SI 2 r2 [171])
        (const_int 1073741824 [0x40000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1073741824 [0x40000000])
        (nil)))

(insn:TI 189 53 54 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
        (and:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 54 189 55 7 arch/arm/vfp/vfpmodule.c:63 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])
        (reg:SI 2 r2 [171])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [171])
        (expr_list:REG_EQUAL (const_int 1073741824 [0x40000000])
            (nil))))

(insn:TI 55 54 60 7 arch/arm/vfp/vfpmodule.c:64 (set (reg:SI 1 r1 [172])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 60 55 56 7 arch/arm/vfp/vfpmodule.c:71 (set (reg:SI 2 r2 [orig:174 <variable>.preempt_count ] [174])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 56 60 61 7 arch/arm/vfp/vfpmodule.c:64 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                (const_int 692 [0x2b4])) [0 <variable>.vfpstate.hard.fpscr+0 S4 A32])
        (reg:SI 1 r1 [172])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 61 56 62 7 arch/arm/vfp/vfpmodule.c:71 (set (reg:SI 2 r2 [175])
        (plus:SI (reg:SI 2 r2 [orig:174 <variable>.preempt_count ] [174])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 62 61 63 7 arch/arm/vfp/vfpmodule.c:71 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [175])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [175])
        (nil)))

(insn:TI 63 62 67 7 arch/arm/vfp/vfpmodule.c:71 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6010990)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 67 63 68 7 arch/arm/vfp/vfpmodule.c:71 (set (reg/v:SI 2 r2 [orig:145 cpu ] [145])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
        (nil)))

(insn:TI 68 67 69 7 arch/arm/vfp/vfpmodule.c:72 (set (reg/f:SI 3 r3 [178])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 69 68 70 7 arch/arm/vfp/vfpmodule.c:72 (set (reg/f:SI 0 r0 [179])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [178])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [178])) [0 vfp_current_hw_state S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
            (nil))))

(insn:TI 70 69 75 7 arch/arm/vfp/vfpmodule.c:72 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [179])
            (reg/v/f:SI 5 r5 [orig:144 vfp ] [144]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 0 r0 [179])
        (nil)))

(insn 75 70 78 7 arch/arm/vfp/vfpmodule.c:73 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                        (const_int 4 [0x4]))
                    (reg/f:SI 3 r3 [178])) [0 vfp_current_hw_state S4 A32])
            (reg:SI 1 r1 [172]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [178])
            (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                (expr_list:REG_DEAD (reg:SI 1 r1 [172])
                    (expr_list:REG_EQUAL (const_int 0 [0x0])
                        (nil)))))))

(insn:TI 78 75 79 7 arch/arm/vfp/vfpmodule.c:74 (parallel [
            (set (reg/v:SI 3 r3 [orig:146 __v ] [146])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6011368))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 79 78 80 7 arch/arm/vfp/vfpmodule.c:74 (set (reg:SI 3 r3 [182])
        (and:SI (reg/v:SI 3 r3 [orig:146 __v ] [146])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 80 79 81 7 arch/arm/vfp/vfpmodule.c:74 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [182])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6011368)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [182])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn:TI 81 80 194 7 arch/arm/vfp/vfpmodule.c:75 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6011496)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 194 81 186 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 186 194 187 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 187 186 85 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
        (and:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 85 187 86 7 arch/arm/vfp/vfpmodule.c:75 (set (reg:SI 2 r2 [orig:184 <variable>.preempt_count ] [184])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn:TI 86 85 87 7 arch/arm/vfp/vfpmodule.c:75 (set (reg:SI 2 r2 [185])
        (plus:SI (reg:SI 2 r2 [orig:184 <variable>.preempt_count ] [184])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 87 86 88 7 arch/arm/vfp/vfpmodule.c:75 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [185])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [185])
        (nil)))

(insn:TI 88 87 215 7 arch/arm/vfp/vfpmodule.c:75 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6011496)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(jump_insn:TI 215 88 216 7 (set (pc)
        (label_ref 210)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 216 215 100)

;; Start of basic block ( 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  2 [20.0%] 
(code_label 100 216 101 8 35 "" [1 uses])

(note 101 100 103 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 103 101 126 8 NOTE_INSN_DELETED)

(note 126 103 136 8 NOTE_INSN_DELETED)

(note 136 126 195 8 NOTE_INSN_DELETED)

(insn:TI 195 136 184 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 184 195 185 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 185 184 105 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
        (and:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 105 185 106 8 arch/arm/vfp/vfpmodule.c:82 (set (reg:SI 2 r2 [orig:189 <variable>.preempt_count ] [189])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn:TI 106 105 107 8 arch/arm/vfp/vfpmodule.c:82 (set (reg:SI 2 r2 [190])
        (plus:SI (reg:SI 2 r2 [orig:189 <variable>.preempt_count ] [189])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 107 106 108 8 arch/arm/vfp/vfpmodule.c:82 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [190])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [190])
        (nil)))

(insn:TI 108 107 112 8 arch/arm/vfp/vfpmodule.c:82 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6012411)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 112 108 114 8 arch/arm/vfp/vfpmodule.c:82 (set (reg/v:SI 2 r2 [orig:135 cpu ] [135])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
        (nil)))

(insn 114 112 113 8 arch/arm/vfp/vfpmodule.c:81 (set (reg/f:SI 4 r4 [194])
        (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn:TI 113 114 115 8 arch/arm/vfp/vfpmodule.c:84 (set (reg/f:SI 3 r3 [193])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 115 113 116 8 arch/arm/vfp/vfpmodule.c:81 (set (reg/f:SI 1 r1 [195])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [193])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [193])) [0 vfp_current_hw_state S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
            (nil))))

(insn:TI 116 115 120 8 arch/arm/vfp/vfpmodule.c:81 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 1 r1 [195])
            (reg/f:SI 4 r4 [194]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 120 116 121 8 arch/arm/vfp/vfpmodule.c:85 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [197])
            (const_int 0 [0x0]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 121 120 124 8 arch/arm/vfp/vfpmodule.c:85 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                        (const_int 4 [0x4]))
                    (reg/f:SI 3 r3 [193])) [0 vfp_current_hw_state S4 A32])
            (reg:SI 1 r1 [197]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [193])
            (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                (expr_list:REG_DEAD (reg:SI 1 r1 [197])
                    (expr_list:REG_EQUAL (const_int 0 [0x0])
                        (nil)))))))

(insn:TI 124 121 196 8 arch/arm/vfp/vfpmodule.c:86 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6012904)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 196 124 182 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 182 196 183 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 183 182 128 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
        (and:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 128 183 129 8 arch/arm/vfp/vfpmodule.c:86 (set (reg:SI 2 r2 [orig:199 <variable>.preempt_count ] [199])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn:TI 129 128 130 8 arch/arm/vfp/vfpmodule.c:86 (set (reg:SI 2 r2 [200])
        (plus:SI (reg:SI 2 r2 [orig:199 <variable>.preempt_count ] [199])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 130 129 131 8 arch/arm/vfp/vfpmodule.c:86 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [200])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [200])
        (nil)))

(insn:TI 131 130 210 8 arch/arm/vfp/vfpmodule.c:86 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6012904)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 210 131 208 9 46 "" [1 uses])

(note 208 210 135 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 135 208 137 9 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:142 D.16537 ] [142])
        (mem/v:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 137 135 138 9 arch/arm/vfp/vfpmodule.c:86 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:142 D.16537 ] [142])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:142 D.16537 ] [142])
        (nil)))

(jump_insn:TI 138 137 139 9 arch/arm/vfp/vfpmodule.c:86 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  10 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%]  (fallthru)
(note 139 138 140 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 140 139 217 10 arch/arm/vfp/vfpmodule.c:86 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("preempt_schedule") [flags 0x41] <function_decl 0x10aa7a00 preempt_schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 217 140 218 10 (set (pc)
        (label_ref 158)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 218 217 143)

;; Start of basic block ( 2) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  2 [20.0%] 
(code_label 143 218 144 11 37 "" [1 uses])

(note 144 143 146 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 146 144 150 11 NOTE_INSN_DELETED)

(note 150 146 151 11 NOTE_INSN_DELETED)

(note 151 150 197 11 NOTE_INSN_DELETED)

(insn:TI 197 151 180 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 180 197 181 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 5 r5 [orig:133 parent ] [133])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn:TI 181 180 148 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 5 r5 [orig:133 parent ] [133])
        (and:SI (reg/v/f:SI 5 r5 [orig:133 parent ] [133])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 148 181 149 11 arch/arm/vfp/vfpmodule.c:93 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:133 parent ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 149 148 153 11 arch/arm/vfp/vfpmodule.c:93 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x3] <function_decl 0x10aa7080 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 153 149 154 11 arch/arm/vfp/vfpmodule.c:94 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn:TI 154 153 155 11 arch/arm/vfp/vfpmodule.c:94 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 5 r5 [orig:133 parent ] [133])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 155 154 156 11 arch/arm/vfp/vfpmodule.c:94 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(call_insn:TI 156 155 158 11 arch/arm/vfp/vfpmodule.c:94 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x110ee180 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 2 6 11 9 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [20.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
;; Pred edge  10 [100.0%] 
(code_label 158 156 159 12 33 "" [4 uses])

(note 159 158 164 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 164 159 170 12 arch/arm/vfp/vfpmodule.c:174 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 170 164 200 12 arch/arm/vfp/vfpmodule.c:174 (use (reg/i:SI 0 r0)) -1 (nil))

(note 200 170 201 12 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 201 200 202 12 arch/arm/vfp/vfpmodule.c:174 (return) 260 {return} (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 202 201 190)

(note 190 202 192 NOTE_INSN_DELETED)

(note 192 190 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_init (vfp_init)[0:843] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 17 count 21 (  1.6)


vfp_init

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={20d,13u} r1={17d,8u} r2={18d,13u} r3={21d,16u,4d} r4={3d,9u} r5={2d,7u} r6={2d,5u,2d} r12={11d,3u} r13={2d,24u,2d} r14={10d,2u} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={20d,12u} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} 
;;    total ref usage 1236{1116d,112u,8e} in 78{69 regular + 9 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]

( 2 3 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 4 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 6 4 )->[7]->( 12 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 5 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 9 8 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 11 10 7 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 12 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 8 to worklist
  Adding insn 5 to worklist
  Adding insn 153 to worklist
  Adding insn 14 to worklist
  Adding insn 32 to worklist
  Adding insn 28 to worklist
  Adding insn 25 to worklist
  Adding insn 22 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 43 to worklist
  Adding insn 163 to worklist
  Adding insn 47 to worklist
  Adding insn 98 to worklist
  Adding insn 94 to worklist
  Adding insn 89 to worklist
  Adding insn 85 to worklist
  Adding insn 81 to worklist
  Adding insn 75 to worklist
  Adding insn 72 to worklist
  Adding insn 67 to worklist
  Adding insn 65 to worklist
  Adding insn 58 to worklist
  Adding insn 54 to worklist
  Adding insn 110 to worklist
  Adding insn 102 to worklist
  Adding insn 116 to worklist
  Adding insn 127 to worklist
  Adding insn 156 to worklist
  Adding insn 140 to worklist
Finished finding needed instructions:
processing block 12 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 134 to worklist
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
processing block 6 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 46 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 126 to worklist
  Adding insn 125 to worklist
  Adding insn 123 to worklist
  Adding insn 120 to worklist
  Adding insn 119 to worklist
  Adding insn 118 to worklist
processing block 10 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 113 to worklist
processing block 9 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 109 to worklist
  Adding insn 105 to worklist
  Adding insn 100 to worklist
  Adding insn 104 to worklist
  Adding insn 103 to worklist
processing block 8 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
  Adding insn 92 to worklist
  Adding insn 91 to worklist
  Adding insn 97 to worklist
  Adding insn 96 to worklist
  Adding insn 90 to worklist
  Adding insn 88 to worklist
  Adding insn 84 to worklist
  Adding insn 150 to worklist
  Adding insn 79 to worklist
  Adding insn 144 to worklist
  Adding insn 66 to worklist
  Adding insn 64 to worklist
  Adding insn 68 to worklist
  Adding insn 69 to worklist
  Adding insn 71 to worklist
  Adding insn 70 to worklist
  Adding insn 56 to worklist
  Adding insn 53 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 42 to worklist
processing block 4 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 35 to worklist
  Adding insn 31 to worklist
  Adding insn 30 to worklist
  Adding insn 151 to worklist
  Adding insn 27 to worklist
  Adding insn 29 to worklist
  Adding insn 21 to worklist
  Adding insn 18 to worklist
  Adding insn 17 to worklist
processing block 3 lr out =  13 [sp]
  Adding insn 13 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
processing block 2 lr out =  13 [sp]
  Adding insn 7 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 17 count 24 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 153 to 8 -- after reload
;;   ======================================================

;;	  0-->   153 {[--sp]=unspec[r0] 2;use r1;use r4:cortex_a8_load_store_2
;;	  1-->     5 r0=call [`cpu_architecture']      :cortex_a8_issue_branch
;;	 33-->     7 cc=cmp(r0,0x7)                    :cortex_a8_default
;;	 35-->     8 pc={(leu(cc,0x0))?L15:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 153
;;   new tail = 8

;;   ======================================================
;;   -- basic block 3 from 11 to 14 -- after reload
;;   ======================================================

;;	  0-->    11 r0=`vfp_enable'                   :cortex_a8_load_store_1
;;	  0-->    12 r1=0x0                            :cortex_a8_default
;;	  1-->    13 r2=0x1                            :cortex_a8_default
;;	  2-->    14 r0=call [`on_each_cpu']           :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 11
;;   new tail = 14

;;   ======================================================
;;   -- basic block 4 from 17 to 32 -- after reload
;;   ======================================================

;;	  0-->    17 r5=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  1-->    18 r3=`vfp_testing_entry'            :cortex_a8_load_store_1
;;	  4-->    19 [r5]=r3                           :cortex_a8_load_store_1
;;	  5-->    20 {asm_operands;clobber [scratch];} :nothing
;;	  6-->    21 {r4=asm_operands;clobber cc;}     :nothing
;;	  7-->    22 {asm_operands;clobber [scratch];} :nothing
;;	  8-->   151 r3=`vfp_null_entry'               :cortex_a8_load_store_1
;;	  9-->    29 r6=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	 10-->    27 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	 11-->    25 [r5]=r3                           :cortex_a8_load_store_1
;;	 11-->    28 r0=call [`printk']                :cortex_a8_issue_branch
;;	 12-->    30 r3=[r6+0x8]                       :cortex_a8_load_store_1
;;	 14-->    31 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	 16-->    35 (cc) r0=`*.LC2'                   :cortex_a8_load_store_1
;;	 16-->    32 pc={(cc!=0x0)?L160:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 16
;;   new head = 17
;;   new tail = 32

;;   ======================================================
;;   -- basic block 5 from 42 to 43 -- after reload
;;   ======================================================

;;	  0-->    42 cc=cmp(zxt(r4,0x1,0x14),0x0)      :cortex_a8_default
;;	  2-->    43 pc={(cc==0x0)?L50:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 42
;;   new tail = 43

;;   ======================================================
;;   -- basic block 6 from 46 to 46 -- after reload
;;   ======================================================

;;	  0-->    46 r0=`*.LC3'                        :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 46
;;   new tail = 46

;;   ======================================================
;;   -- basic block 7 from 47 to 163 -- after reload
;;   ======================================================

;;	  0-->    47 r0=call [`printk']                :cortex_a8_issue_branch
;;	  0-->   163 pc=L128                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 47
;;   new tail = 163

;;   ======================================================
;;   -- basic block 8 from 53 to 98 -- after reload
;;   ======================================================

;;	  0-->    53 r0=`*.LANCHOR3'                   :cortex_a8_load_store_1
;;	  1-->    54 r0=call [`register_cpu_notifier'] :cortex_a8_issue_branch
;;	  1-->    56 ip=zxt(r4,0x4,0x10)               :cortex_a8_default
;;	  2-->    70 r2=ip                             :cortex_a8_default
;;	  2-->    71 r3=zxt(r4,0x8,0x8)                :cortex_a8_default
;;	  3-->    69 r1=r4 0>>0x18                     :cortex_a8_default
;;	  3-->    68 r0=`*.LC4'                        :cortex_a8_load_store_1
;;	  4-->    58 [r6+0x8]=ip                       :cortex_a8_load_store_1
;;	  4-->    64 ip=zxt(r4,0x4,0x4)                :cortex_a8_default
;;	  5-->    66 r4=r4&0xf                         :cortex_a8_default
;;	  5-->    65 [sp]=ip                           :cortex_a8_load_store_1
;;	  6-->    67 [sp+0x4]=r4                       :cortex_a8_load_store_1
;;	  6-->    72 r0=call [`printk']                :cortex_a8_issue_branch
;;	  7-->   150 r3=`vfp_support_entry'            :cortex_a8_load_store_1
;;	  7-->   144 r1=r5                             :cortex_a8_default
;;	  8-->    79 r0=`thread_notify_head'           :cortex_a8_load_store_1
;;	 10-->    75 [r1++]=r3                         :cortex_a8_load_store_1
;;	 11-->    81 r0=call [`atomic_notifier_chain_re:cortex_a8_issue_branch
;;	 11-->    84 r0=r5+0x10                        :cortex_a8_default
;;	 12-->    85 r0=call [`cpu_pm_register_notifier:cortex_a8_issue_branch
;;	 12-->    88 r0=r5+0x1c                        :cortex_a8_default
;;	 13-->    89 call [`register_syscore_ops']     :cortex_a8_issue_branch
;;	 13-->    90 r3=`elf_hwcap'                    :cortex_a8_load_store_1
;;	 14-->    96 r2=[r6+0x8]                       :cortex_a8_load_store_1
;;	 16-->    97 cc=cmp(r2,0x1)                    :cortex_a8_default
;;	 16-->    91 r2=[r3]                           :cortex_a8_load_store_1
;;	 18-->    92 r1=r2|0x40                        :cortex_a8_default
;;	 18-->    94 [r3]=r1                           :cortex_a8_load_store_1
;;	 19-->    98 pc={(leu(cc,0x0))?L111:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 19
;;   new head = 53
;;   new tail = 98

;;   ======================================================
;;   -- basic block 9 from 103 to 110 -- after reload
;;   ======================================================

;;	  0-->   103 {r1=asm_operands;clobber cc;}     :nothing
;;	  1-->   104 r1=r1&0xf                         :cortex_a8_default
;;	  1-->   100 r2=r2|0x2040                      :cortex_a8_default
;;	  2-->   105 cc=cmp(r1,0x1)                    :cortex_a8_default
;;	  2-->   102 [r3]=r2                           :cortex_a8_load_store_1
;;	  3-->   109 (!cc) r2=r2|0x4000                :cortex_a8_default
;;	  3-->   110 (!cc) [r3]=r2                     :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 103
;;   new tail = 110

;;   ======================================================
;;   -- basic block 10 from 113 to 116 -- after reload
;;   ======================================================

;;	  0-->   113 {r3=asm_operands;clobber cc;}     :nothing
;;	  1-->   114 r3=r3&0xf0000                     :cortex_a8_default
;;	  2-->   115 cc=cmp(r3,0xf0000)                :cortex_a8_default
;;	  4-->   116 pc={(cc!=0x0)?L128:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 113
;;   new tail = 116

;;   ======================================================
;;   -- basic block 11 from 118 to 127 -- after reload
;;   ======================================================

;;	  0-->   118 {r3=asm_operands;clobber cc;}     :nothing
;;	  1-->   119 r3=r3&0xfffffffff0000000          :cortex_a8_default
;;	  2-->   120 cc=cmp(r3,0x10000000)             :cortex_a8_default
;;	  4-->   123 (!cc) r3=`elf_hwcap'              :cortex_a8_load_store_1
;;	  7-->   125 (!cc) r2=[r3]                     :cortex_a8_load_store_1
;;	  9-->   126 (!cc) r2=r2|0x10000               :cortex_a8_default
;;	 10-->   127 (!cc) [r3]=r2                     :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 10
;;   new head = 118
;;   new tail = 127

;;   ======================================================
;;   -- basic block 12 from 134 to 156 -- after reload
;;   ======================================================

;;	  0-->   134 r0=0x0                            :cortex_a8_default
;;	  0-->   140 use r0                            :nothing
;;	  0-->   156 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 134
;;   new tail = 156





vfp_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={20d,13u} r1={17d,8u} r2={18d,13u} r3={21d,16u,4d} r4={3d,9u} r5={2d,7u} r6={2d,5u,2d} r12={11d,3u} r13={2d,24u,2d} r14={10d,2u} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={20d,12u} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} 
;;    total ref usage 1236{1116d,112u,8e} in 78{69 regular + 9 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 2 153 2 NOTE_INSN_DELETED)

(insn/f:TI 153 6 154 2 arch/arm/vfp/vfpmodule.c:577 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_DEAD (reg:SI 1 r1)
                        (expr_list:REG_DEAD (reg:SI 0 r0)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -24 [0xffffffffffffffe8])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 0 r0))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 1 r1))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 154 153 5 2 NOTE_INSN_PROLOGUE_END)

(call_insn:TI 5 154 7 2 arch/arm/vfp/vfpmodule.c:579 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_architecture") [flags 0x41] <function_decl 0x512d9700 cpu_architecture>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn:TI 7 5 8 2 arch/arm/vfp/vfpmodule.c:579 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 7 [0x7]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 8 7 9 2 arch/arm/vfp/vfpmodule.c:579 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 15)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  3 [29.0%]  (fallthru)
;; Succ edge  4 [71.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  2 [29.0%]  (fallthru)
(note 9 8 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 11 9 12 3 arch/arm/vfp/vfpmodule.c:582 (set (reg:SI 0 r0)
        (symbol_ref:SI ("vfp_enable") [flags 0x3] <function_decl 0x110b2180 vfp_enable>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("vfp_enable") [flags 0x3] <function_decl 0x110b2180 vfp_enable>)
        (nil)))

(insn 12 11 13 3 arch/arm/vfp/vfpmodule.c:582 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 13 12 14 3 arch/arm/vfp/vfpmodule.c:582 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 14 13 15 3 arch/arm/vfp/vfpmodule.c:582 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("on_each_cpu") [flags 0x41] <function_decl 0x10ca2000 on_each_cpu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [71.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 15 14 16 4 50 "" [1 uses])

(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 16 18 4 arch/arm/vfp/vfpmodule.c:589 (set (reg/f:SI 5 r5 [143])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 18 17 19 4 arch/arm/vfp/vfpmodule.c:589 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("vfp_testing_entry") [flags 0x41] <function_decl 0x1108c600 vfp_testing_entry>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("vfp_testing_entry") [flags 0x41] <function_decl 0x1108c600 vfp_testing_entry>)
        (nil)))

(insn:TI 19 18 20 4 arch/arm/vfp/vfpmodule.c:589 (set (mem/f/c/i:SI (reg/f:SI 5 r5 [143]) [0 vfp_vector+0 S4 A32])
        (reg/f:SI 3 r3 [144])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [144])
        (expr_list:REG_EQUAL (symbol_ref:SI ("vfp_testing_entry") [flags 0x41] <function_decl 0x1108c600 vfp_testing_entry>)
            (nil))))

(insn:TI 20 19 21 4 arch/arm/vfp/vfpmodule.c:590 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6081008)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 21 20 22 4 arch/arm/vfp/vfpmodule.c:591 (parallel [
            (set (reg/v:SI 4 r4 [orig:136 __v ] [136])
                (asm_operands:SI ("mrc p10, 7, %0, cr0, cr0, 0 @ fmrx	%0, FPSID") ("=r") 0 []
                     [] 6081145))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 22 21 151 4 arch/arm/vfp/vfpmodule.c:592 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6081264)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 151 22 29 4 arch/arm/vfp/vfpmodule.c:593 (set (reg/f:SI 3 r3 [146])
        (symbol_ref:SI ("vfp_null_entry") [flags 0x41] <function_decl 0x1108c700 vfp_null_entry>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("vfp_null_entry") [flags 0x41] <function_decl 0x1108c700 vfp_null_entry>)
        (nil)))

(insn:TI 29 151 27 4 arch/arm/vfp/vfpmodule.c:596 (set (reg/f:SI 6 r6 [148])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 27 29 25 4 arch/arm/vfp/vfpmodule.c:595 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11159ea0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11159ea0>)
        (nil)))

(insn:TI 25 27 28 4 arch/arm/vfp/vfpmodule.c:593 (set (mem/f/c/i:SI (reg/f:SI 5 r5 [143]) [0 vfp_vector+0 S4 A32])
        (reg/f:SI 3 r3 [146])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [146])
        (expr_list:REG_EQUAL (symbol_ref:SI ("vfp_null_entry") [flags 0x41] <function_decl 0x1108c700 vfp_null_entry>)
            (nil))))

(call_insn 28 25 30 4 arch/arm/vfp/vfpmodule.c:595 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 30 28 31 4 arch/arm/vfp/vfpmodule.c:596 (set (reg:SI 3 r3 [orig:149 VFP_arch ] [149])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 VFP_arch+0 S4 A32])
            (nil))))

(insn:TI 31 30 35 4 arch/arm/vfp/vfpmodule.c:596 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:149 VFP_arch ] [149])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:149 VFP_arch ] [149])
        (nil)))

(insn:TI 35 31 32 4 arch/arm/vfp/vfpmodule.c:597 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0)
            (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11159480>))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 32 35 40 4 arch/arm/vfp/vfpmodule.c:596 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 160)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)
;; Succ edge  7 [0.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
(note 40 32 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 41 40 42 5 NOTE_INSN_DELETED)

(insn:TI 42 41 43 5 arch/arm/vfp/vfpmodule.c:598 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
                (const_int 1 [0x1])
                (const_int 20 [0x14]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 43 42 44 5 arch/arm/vfp/vfpmodule.c:598 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 6000 [0x1770])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [40.0%]  (fallthru)
;; Succ edge  8 [60.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [40.0%]  (fallthru)
(note 44 43 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 46 44 160 6 arch/arm/vfp/vfpmodule.c:599 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x11145740>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x11145740>)
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  4 [0.0%] 
(code_label 160 46 158 7 56 "" [1 uses])

(note 158 160 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 47 158 163 7 arch/arm/vfp/vfpmodule.c:599 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 163 47 164 7 (set (pc)
        (label_ref 128)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 164 163 50)

;; Start of basic block ( 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [60.0%] 
(code_label 50 164 51 8 53 "" [1 uses])

(note 51 50 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 55 51 60 8 NOTE_INSN_DELETED)

(note 60 55 61 8 NOTE_INSN_DELETED)

(note 61 60 62 8 NOTE_INSN_DELETED)

(note 62 61 63 8 NOTE_INSN_DELETED)

(note 63 62 53 8 NOTE_INSN_DELETED)

(insn:TI 53 63 54 8 arch/arm/vfp/vfpmodule.c:601 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
        (nil)))

(call_insn:TI 54 53 56 8 arch/arm/vfp/vfpmodule.c:601 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("register_cpu_notifier") [flags 0x41] <function_decl 0x10e62a80 register_cpu_notifier>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 56 54 70 8 arch/arm/vfp/vfpmodule.c:603 (set (reg:SI 12 ip [orig:139 VFP_arch.262 ] [139])
        (zero_extract:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 4 [0x4])
            (const_int 16 [0x10]))) 124 {extzv_t2} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])
        (nil)))

(insn:TI 70 56 71 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 2 r2)
        (reg:SI 12 ip [orig:139 VFP_arch.262 ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 71 70 69 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 3 r3)
        (zero_extract:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 8 [0x8])
            (const_int 8 [0x8]))) 124 {extzv_t2} (nil))

(insn:TI 69 71 68 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 24 [0x18]))) 117 {*arm_shiftsi3} (nil))

(insn 68 69 58 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10df2000>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10df2000>)
        (nil)))

(insn:TI 58 68 64 8 arch/arm/vfp/vfpmodule.c:603 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])
        (reg:SI 12 ip [orig:139 VFP_arch.262 ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:139 VFP_arch.262 ] [139])
        (nil)))

(insn 64 58 66 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 12 ip [161])
        (zero_extract:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 4 [0x4])
            (const_int 4 [0x4]))) 124 {extzv_t2} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (nil)))

(insn:TI 66 64 65 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 4 r4 [162])
        (and:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (nil)))

(insn 65 66 67 8 arch/arm/vfp/vfpmodule.c:604 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [161])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [161])
        (nil)))

(insn:TI 67 65 72 8 arch/arm/vfp/vfpmodule.c:604 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 4 r4 [162])) 167 {*arm_movsi_insn} (nil))

(call_insn 72 67 150 8 arch/arm/vfp/vfpmodule.c:604 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 150 72 144 8 arch/arm/vfp/vfpmodule.c:611 (set (reg/f:SI 3 r3 [164])
        (symbol_ref:SI ("vfp_support_entry") [flags 0x41] <function_decl 0x1108c680 vfp_support_entry>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("vfp_support_entry") [flags 0x41] <function_decl 0x1108c680 vfp_support_entry>)
        (nil)))

(insn 144 150 79 8 arch/arm/vfp/vfpmodule.c:611 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [143])) 167 {*arm_movsi_insn} (nil))

(insn:TI 79 144 75 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_notify.h:23 (set (reg:SI 0 r0)
        (symbol_ref:SI ("thread_notify_head") [flags 0xc0] <var_decl 0x11045060 thread_notify_head>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("thread_notify_head") [flags 0xc0] <var_decl 0x11045060 thread_notify_head>)
        (nil)))

(insn:TI 75 79 81 8 arch/arm/vfp/vfpmodule.c:611 (set (mem/f/c/i:SI (post_inc:SI (reg:SI 1 r1)) [0 vfp_vector+0 S4 A32])
        (reg/f:SI 3 r3 [164])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [164])
        (expr_list:REG_INC (reg:SI 1 r1)
            (expr_list:REG_EQUAL (symbol_ref:SI ("vfp_support_entry") [flags 0x41] <function_decl 0x1108c680 vfp_support_entry>)
                (nil)))))

(call_insn:TI 81 75 84 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_notify.h:23 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("atomic_notifier_chain_register") [flags 0x41] <function_decl 0x10c43800 atomic_notifier_chain_register>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 84 81 85 8 arch/arm/vfp/vfpmodule.c:614 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 5 r5 [143])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn:TI 85 84 88 8 arch/arm/vfp/vfpmodule.c:614 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_pm_register_notifier") [flags 0x41] <function_decl 0x1103cc00 cpu_pm_register_notifier>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 88 85 89 8 arch/arm/vfp/vfpmodule.c:489 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 5 r5 [143])
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 28 [0x1c])))
        (nil)))

(call_insn:TI 89 88 90 8 arch/arm/vfp/vfpmodule.c:489 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_syscore_ops") [flags 0x41] <function_decl 0x110b2280 register_syscore_ops>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 90 89 96 8 arch/arm/vfp/vfpmodule.c:621 (set (reg/f:SI 3 r3 [172])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>)
        (nil)))

(insn:TI 96 90 97 8 arch/arm/vfp/vfpmodule.c:623 (set (reg:SI 2 r2 [orig:176 VFP_arch ] [176])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 VFP_arch+0 S4 A32])
        (nil)))

(insn:TI 97 96 91 8 arch/arm/vfp/vfpmodule.c:623 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:176 VFP_arch ] [176])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:176 VFP_arch ] [176])
        (nil)))

(insn 91 97 92 8 arch/arm/vfp/vfpmodule.c:621 (set (reg:SI 2 r2 [orig:173 elf_hwcap ] [173])
        (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn:TI 92 91 94 8 arch/arm/vfp/vfpmodule.c:621 (set (reg:SI 1 r1 [orig:138 elf_hwcap.264 ] [138])
        (ior:SI (reg:SI 2 r2 [orig:173 elf_hwcap ] [173])
            (const_int 64 [0x40]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 94 92 98 8 arch/arm/vfp/vfpmodule.c:621 (set (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
        (reg:SI 1 r1 [orig:138 elf_hwcap.264 ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:138 elf_hwcap.264 ] [138])
        (nil)))

(jump_insn:TI 98 94 99 8 arch/arm/vfp/vfpmodule.c:623 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 111)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [73.0%]  (fallthru)
;; Succ edge  10 [27.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  8 [73.0%]  (fallthru)
(note 99 98 103 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 103 99 104 9 arch/arm/vfp/vfpmodule.c:630 (parallel [
            (set (reg/v:SI 1 r1 [orig:135 __v ] [135])
                (asm_operands:SI ("mrc p10, 7, %0, cr7, cr0, 0 @ fmrx	%0, MVFR0") ("=r") 0 []
                     [] 6086136))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 104 103 100 9 arch/arm/vfp/vfpmodule.c:630 (set (reg:SI 1 r1 [178])
        (and:SI (reg/v:SI 1 r1 [orig:135 __v ] [135])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (nil))

(insn 100 104 105 9 arch/arm/vfp/vfpmodule.c:624 (set (reg:SI 2 r2 [orig:137 elf_hwcap.265 ] [137])
        (ior:SI (reg:SI 2 r2 [orig:173 elf_hwcap ] [173])
            (const_int 8256 [0x2040]))) 89 {*arm_iorsi3} (nil))

(insn:TI 105 100 102 9 arch/arm/vfp/vfpmodule.c:630 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [178])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [178])
        (nil)))

(insn 102 105 109 9 arch/arm/vfp/vfpmodule.c:624 (set (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
        (reg:SI 2 r2 [orig:137 elf_hwcap.265 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 109 102 110 9 arch/arm/vfp/vfpmodule.c:631 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [180])
            (ior:SI (reg:SI 2 r2 [orig:137 elf_hwcap.265 ] [137])
                (const_int 16384 [0x4000])))) 2310 {neon_vornv2di+43} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 110 109 111 9 arch/arm/vfp/vfpmodule.c:631 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
            (reg:SI 2 r2 [180]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [172])
            (nil))))
;; End of basic block 9 -> ( 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  8 [27.0%] 
(code_label 111 110 112 10 54 "" [1 uses])

(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 113 112 114 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cputype.h:60 (parallel [
            (set (reg/v:SI 3 r3 [orig:133 __val ] [133])
                (asm_operands:SI ("mrc	p15, 0, %0, c0, c0, 0") ("=r") 0 []
                     [] 5907618))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 114 113 115 10 arch/arm/vfp/vfpmodule.c:640 (set (reg:SI 3 r3 [181])
        (and:SI (reg/v:SI 3 r3 [orig:133 __val ] [133])
            (const_int 983040 [0xf0000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 115 114 116 10 arch/arm/vfp/vfpmodule.c:640 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [181])
            (const_int 983040 [0xf0000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [181])
        (nil)))

(jump_insn:TI 116 115 117 10 arch/arm/vfp/vfpmodule.c:640 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6218 [0x184a])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  11 [37.8%]  (fallthru)
;; Succ edge  12 [62.2%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  10 [37.8%]  (fallthru)
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 118 117 119 11 arch/arm/vfp/vfpmodule.c:645 (parallel [
            (set (reg/v:SI 3 r3 [orig:134 __v ] [134])
                (asm_operands:SI ("mrc p10, 7, %0, cr6, cr0, 0 @ fmrx	%0, MVFR1") ("=r") 0 []
                     [] 6088055))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 119 118 120 11 arch/arm/vfp/vfpmodule.c:645 (set (reg:SI 3 r3 [182])
        (and:SI (reg/v:SI 3 r3 [orig:134 __v ] [134])
            (const_int -268435456 [0xfffffffff0000000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 120 119 123 11 arch/arm/vfp/vfpmodule.c:645 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [182])
            (const_int 268435456 [0x10000000]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 123 120 125 11 arch/arm/vfp/vfpmodule.c:646 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [183])
            (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>)
        (nil)))

(insn:TI 125 123 126 11 arch/arm/vfp/vfpmodule.c:646 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [orig:185 elf_hwcap ] [185])
            (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
            (nil))))

(insn:TI 126 125 127 11 arch/arm/vfp/vfpmodule.c:646 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 2 r2 [186])
            (ior:SI (reg:SI 2 r2 [orig:185 elf_hwcap ] [185])
                (const_int 65536 [0x10000])))) 2310 {neon_vornv2di+43} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn:TI 127 126 128 11 arch/arm/vfp/vfpmodule.c:646 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32])
            (reg:SI 2 r2 [186]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [183])
            (expr_list:REG_DEAD (reg:SI 2 r2 [186])
                (nil)))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 10 7) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  10 [62.2%] 
;; Pred edge  7 [100.0%] 
(code_label 128 127 129 12 52 "" [2 uses])

(note 129 128 134 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 134 129 140 12 arch/arm/vfp/vfpmodule.c:650 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 140 134 155 12 arch/arm/vfp/vfpmodule.c:650 (use (reg/i:SI 0 r0)) -1 (nil))

(note 155 140 156 12 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 156 155 157 12 arch/arm/vfp/vfpmodule.c:650 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 157 156 149)

(note 149 157 152 NOTE_INSN_DELETED)

(note 152 149 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_enable (vfp_enable)[0:836]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 44 to 11 -- after reload
;;   ======================================================

;;	  0-->    44 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->    42 r2=sp                             :cortex_a8_default
;;	  2-->    38 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  3-->    39 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  5-->     9 r3=[r3+0x4]                       :cortex_a8_load_store_1
;;	  7-->    10 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  9-->    11 pc={(cc!=0x0)?L24:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 44
;;   new tail = 11

;;   ======================================================
;;   -- basic block 3 from 13 to 16 -- after reload
;;   ======================================================

;;	  0-->    13 {r3=asm_operands;clobber cc;clobbe:nothing
;;	  1-->    15 cc=cmp(zxt(r3,0x1,0x7),0x0)       :cortex_a8_default
;;	  3-->    16 pc={(cc!=0x0)?L24:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 13
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 20 to 22 -- after reload
;;   ======================================================

;;	  0-->    20 r0=`*.LC5'                        :cortex_a8_load_store_1
;;	  0-->    21 r1=0x1af                          :cortex_a8_default
;;	  1-->    22 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 20
;;   new tail = 22

;;   ======================================================
;;   -- basic block 5 from 26 to 47 -- after reload
;;   ======================================================

;;	  0-->    26 {r3=asm_operands;clobber cc;}     :nothing
;;	  1-->    27 r3=r3|0xf00000                    :cortex_a8_default
;;	  2-->    28 {asm_operands;clobber cc;}        :nothing
;;	  3-->    29 {asm_operands;clobber [scratch];} :nothing
;;	  4-->    47 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 26
;;   new tail = 47





vfp_enable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={3d,1u} r3={8d,6u} r4={1d,2u} r12={1d} r13={2d,8u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={6d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 162{139d,23u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 3 44 2 NOTE_INSN_DELETED)

(insn/f:TI 44 7 45 2 arch/arm/vfp/vfpmodule.c:428 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 45 44 42 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 42 45 38 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 38 42 39 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 39 38 9 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 3 r3 [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 9 39 10 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:139 <variable>.preempt_count ] [139])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 10 9 11 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:139 <variable>.preempt_count ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:139 <variable>.preempt_count ] [139])
        (nil)))

(jump_insn:TI 11 10 12 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [0.0%]  (fallthru)
(note 12 11 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 14 12 13 3 NOTE_INSN_DELETED)

(insn:TI 13 14 15 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:131 (parallel [
            (set (reg/v:SI 3 r3 [orig:134 _flags ] [134])
                (asm_operands/v:SI ("	mrs	%0, cpsr	@ local_save_flags") ("=r") 0 []
                     [] 1117950))
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 15 13 16 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:134 _flags ] [134])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:134 _flags ] [134])
        (nil)))

(jump_insn:TI 16 15 17 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru)
(note 17 16 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 17 21 4 arch/arm/vfp/vfpmodule.c:431 discrim 2 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11160c80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11160c80>)
        (nil)))

(insn 21 20 22 4 arch/arm/vfp/vfpmodule.c:431 discrim 2 (set (reg:SI 1 r1)
        (const_int 431 [0x1af])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 431 [0x1af])
        (nil)))

(call_insn:TI 22 21 23 4 arch/arm/vfp/vfpmodule.c:431 discrim 2 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 23 22 24)

;; Start of basic block ( 3 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  3 [100.0%] 
;; Pred edge  2 [100.0%] 
(code_label 24 23 25 5 60 "" [2 uses])

(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 25 27 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/system.h:215 (parallel [
            (set (reg/v:SI 3 r3 [orig:135 access ] [135])
                (asm_operands:SI ("mrc p15, 0, %0, c1, c0, 2 @ get copro access") ("=r") 0 []
                     [] 1170735))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 27 26 28 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/system.h:222 (set (reg:SI 3 r3 [143])
        (ior:SI (reg/v:SI 3 r3 [orig:135 access ] [135])
            (const_int 15728640 [0xf00000]))) 89 {*arm_iorsi3} (nil))

(insn:TI 28 27 29 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/system.h:222 (parallel [
            (asm_operands/v ("mcr p15, 0, %0, c1, c0, 2 @ set copro access") ("") 0 [
                    (reg:SI 3 r3 [143])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 1171631)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [143])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn:TI 29 28 46 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/system.h:224 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 1171887)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(note 46 29 47 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 47 46 48 5 arch/arm/vfp/vfpmodule.c:438 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 48 47 40)

(note 40 48 41 NOTE_INSN_DELETED)

(note 41 40 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_hotplug (vfp_hotplug)[0:842]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


vfp_hotplug

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,3u} r1={3d,5u} r2={2d,1u} r3={3d,1u} r4={1d,2u} r12={1d} r13={2d,8u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,3u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 156{131d,25u,0e} in 14{13 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 13 [sp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]

( 2 )->[3]->( 6 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]

( 2 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]

( 5 4 3 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]

( 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 18 to worklist
  Adding insn 64 to worklist
  Adding insn 69 to worklist
  Adding insn 22 to worklist
  Adding insn 37 to worklist
  Adding insn 40 to worklist
  Adding insn 67 to worklist
  Adding insn 53 to worklist
Finished finding needed instructions:
processing block 6 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 47 to worklist
processing block 3 lr out =  4 [r4] 13 [sp] 14 [lr]
  Adding insn 60 to worklist
  Adding insn 21 to worklist
processing block 5 lr out =  4 [r4] 13 [sp] 14 [lr]
processing block 4 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 36 to worklist
processing block 2 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 63 to worklist
  Adding insn 62 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)
;;   ======================================================
;;   -- basic block 2 from 64 to 18 -- after reload
;;   ======================================================

;;	  0-->    62 cc=cmp(r1==0x18|r1==0x8,0x0)      :cortex_a8_default
;;	  1-->    64 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  2-->    63 r0=cc!=0x0                        :cortex_a8_default
;;	  3-->    18 pc={(cc==0x0)?L25:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 64
;;   new tail = 18

;;   ======================================================
;;   -- basic block 3 from 21 to 69 -- after reload
;;   ======================================================

;;	  0-->    60 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  0-->    21 r1=0x0                            :cortex_a8_default
;;	  3-->    22 [r2*0x4+r3]=r1                    :cortex_a8_load_store_1
;;	  3-->    69 pc=L41                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 21
;;   new tail = 69

;;   ======================================================
;;   -- basic block 4 from 36 to 37 -- after reload
;;   ======================================================

;;	  0-->    36 cc=cmp(r1==0x1a|r1==0xa,0x0)      :cortex_a8_default
;;	  2-->    37 pc={(cc==0x0)?L41:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 36
;;   new tail = 37

;;   ======================================================
;;   -- basic block 5 from 40 to 40 -- after reload
;;   ======================================================

;;	  0-->    40 call [`vfp_enable']               :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 40
;;   new tail = 40

;;   ======================================================
;;   -- basic block 6 from 47 to 67 -- after reload
;;   ======================================================

;;	  0-->    47 r0=0x1                            :cortex_a8_default
;;	  0-->    53 use r0                            :nothing
;;	  0-->    67 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 47
;;   new tail = 67





vfp_hotplug

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,3u} r1={3d,5u} r2={2d,1u} r3={3d,1u} r4={1d,2u} r12={1d} r13={2d,8u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,3u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 156{131d,25u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 13 [sp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 9 2 NOTE_INSN_DELETED)

(note 9 8 11 2 NOTE_INSN_DELETED)

(note 11 9 12 2 NOTE_INSN_DELETED)

(note 12 11 14 2 NOTE_INSN_DELETED)

(note 14 12 15 2 NOTE_INSN_DELETED)

(note 15 14 16 2 NOTE_INSN_DELETED)

(note 16 15 62 2 NOTE_INSN_DELETED)

(insn:TI 62 16 64 2 arch/arm/vfp/vfpmodule.c:565 (set (reg:CC_DEQ 24 cc)
        (compare (ior:SI (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                    (const_int 24 [0x18]))
                (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                    (const_int 8 [0x8])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (nil))

(insn/f:TI 64 62 65 2 arch/arm/vfp/vfpmodule.c:564 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 65 64 63 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 63 65 18 2 arch/arm/vfp/vfpmodule.c:565 (set (reg:SI 0 r0 [143])
        (ne:SI (reg:CC_DEQ 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (nil))

(jump_insn:TI 18 63 19 2 arch/arm/vfp/vfpmodule.c:565 (set (pc)
        (if_then_else (eq (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (label_ref 25)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_DEQ 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 19 18 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 60 19 21 3 arch/arm/vfp/vfpmodule.c:567 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 21 60 22 3 arch/arm/vfp/vfpmodule.c:567 (set (reg:SI 1 r1 [145])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 22 21 69 3 arch/arm/vfp/vfpmodule.c:567 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v/f:SI 2 r2 [orig:136 hcpu ] [136])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [144])) [0 vfp_current_hw_state S4 A32])
        (reg:SI 1 r1 [145])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [144])
        (expr_list:REG_DEAD (reg/v/f:SI 2 r2 [orig:136 hcpu ] [136])
            (expr_list:REG_DEAD (reg:SI 1 r1 [145])
                (expr_list:REG_EQUAL (const_int 0 [0x0])
                    (nil))))))

(jump_insn 69 22 70 3 (set (pc)
        (label_ref 41)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 6)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%] 

(barrier 70 69 25)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 25 70 26 4 65 "" [1 uses])

(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 27 26 28 4 NOTE_INSN_DELETED)

(note 28 27 30 4 NOTE_INSN_DELETED)

(note 30 28 31 4 NOTE_INSN_DELETED)

(note 31 30 33 4 NOTE_INSN_DELETED)

(note 33 31 34 4 NOTE_INSN_DELETED)

(note 34 33 35 4 NOTE_INSN_DELETED)

(note 35 34 36 4 NOTE_INSN_DELETED)

(insn:TI 36 35 37 4 arch/arm/vfp/vfpmodule.c:568 (set (reg:CC_DEQ 24 cc)
        (compare:CC_DEQ (ior:SI (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                    (const_int 26 [0x1a]))
                (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                    (const_int 10 [0xa])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:135 action ] [135])
        (nil)))

(jump_insn:TI 37 36 38 4 arch/arm/vfp/vfpmodule.c:568 (set (pc)
        (if_then_else (eq (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_DEQ 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  6 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  4 [39.0%]  (fallthru)
(note 38 37 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 40 38 41 5 arch/arm/vfp/vfpmodule.c:569 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_enable") [flags 0x3] <function_decl 0x110b2180 vfp_enable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 4 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [61.0%] 
;; Pred edge  3 [100.0%] 
(code_label 41 40 42 6 66 "" [2 uses])

(note 42 41 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 47 42 53 6 arch/arm/vfp/vfpmodule.c:571 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 53 47 66 6 arch/arm/vfp/vfpmodule.c:571 (use (reg/i:SI 0 r0)) -1 (nil))

(note 66 53 67 6 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 67 66 68 6 arch/arm/vfp/vfpmodule.c:571 (return) 260 {return} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 68 67 59)

(note 59 68 61 NOTE_INSN_DELETED)

(note 61 59 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_pm_resume (vfp_pm_resume)[0:838]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 19 to 22 -- after reload
;;   ======================================================

;;	  0-->    19 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->     5 r0=0x0                            :cortex_a8_default
;;	  2-->     6 call [`vfp_enable']               :cortex_a8_issue_branch
;;	  3-->     7 {r3=asm_operands;clobber cc;}     :nothing
;;	  4-->     8 r3=r3&0xffffffffbfffffff          :cortex_a8_default
;;	  5-->     9 {asm_operands;clobber cc;}        :nothing
;;	  6-->    22 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 6
;;   new head = 19
;;   new tail = 22





vfp_pm_resume

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r3={4d,2u} r4={1d,2u} r12={1d} r13={2d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{130d,11u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 13 [sp]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 19 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 19 2 20 2 arch/arm/vfp/vfpmodule.c:474 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -8 [0xfffffffffffffff8])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 20 19 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 20 6 2 arch/arm/vfp/vfpmodule.c:476 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 6 5 7 2 arch/arm/vfp/vfpmodule.c:476 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_enable") [flags 0x3] <function_decl 0x110b2180 vfp_enable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 7 6 8 2 arch/arm/vfp/vfpmodule.c:479 (parallel [
            (set (reg/v:SI 3 r3 [orig:133 __v ] [133])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6066800))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 8 7 9 2 arch/arm/vfp/vfpmodule.c:479 (set (reg:SI 3 r3 [134])
        (and:SI (reg/v:SI 3 r3 [orig:133 __v ] [133])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 9 8 21 2 arch/arm/vfp/vfpmodule.c:479 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [134])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6066800)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [134])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(note 21 9 22 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 22 21 23 2 arch/arm/vfp/vfpmodule.c:480 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 23 22 17)

(note 17 23 18 NOTE_INSN_DELETED)

(note 18 17 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_emulate_instruction (vfp_emulate_instruction)[0:834]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)


vfp_emulate_instruction

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,8u} r1={3d,2u} r2={4d,1u} r3={4d,1u} r4={1d,2u} r12={2d} r13={2d,11u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 279{249d,30u,0e} in 17{15 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 7 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]

( 2 )->[3]->( 4 7 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]

( 4 )->[5]->( 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]

( 4 )->[6]->( 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]

( 2 3 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]

( 7 5 6 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]

( 8 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 10 to worklist
  Adding insn 60 to worklist
  Adding insn 14 to worklist
  Adding insn 18 to worklist
  Adding insn 65 to worklist
  Adding insn 22 to worklist
  Adding insn 67 to worklist
  Adding insn 30 to worklist
  Adding insn 63 to worklist
  Adding insn 50 to worklist
Finished finding needed instructions:
processing block 8 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 44 to worklist
processing block 5 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
processing block 6 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
processing block 4 lr out =  0 [r0] 1 [r1] 4 [r4] 13 [sp]
  Adding insn 17 to worklist
  Adding insn 16 to worklist
processing block 7 lr out =  0 [r0] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 36 to worklist
processing block 3 lr out =  0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 13 to worklist
processing block 2 lr out =  0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
  Adding insn 9 to worklist
  Adding insn 8 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 60 to 10 -- after reload
;;   ======================================================

;;	  0-->     8 r2=r0&0xf000000                   :cortex_a8_default
;;	  1-->     9 cc=cmp(r2,0xe000000)              :cortex_a8_default
;;	  2-->    60 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  3-->    10 pc={(cc!=0x0)?L34:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 60
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 13 to 14 -- after reload
;;   ======================================================

;;	  0-->    13 cc=cmp(zxt(r0,0x1,0x4),0x0)       :cortex_a8_default
;;	  2-->    14 pc={(cc!=0x0)?L34:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 13
;;   new tail = 14

;;   ======================================================
;;   -- basic block 4 from 16 to 18 -- after reload
;;   ======================================================

;;	  0-->    16 r3=r0&0xf00                       :cortex_a8_default
;;	  1-->    17 cc=cmp(r3,0xa00)                  :cortex_a8_default
;;	  3-->    18 pc={(cc!=0x0)?L26:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 16
;;   new tail = 18

;;   ======================================================
;;   -- basic block 5 from 22 to 65 -- after reload
;;   ======================================================

;;	  0-->    22 r0=call [`vfp_single_cpdo']       :cortex_a8_issue_branch
;;	  0-->    65 pc=L37                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 22
;;   new tail = 65

;;   ======================================================
;;   -- basic block 6 from 30 to 67 -- after reload
;;   ======================================================

;;	  0-->    30 r0=call [`vfp_double_cpdo']       :cortex_a8_issue_branch
;;	  0-->    67 pc=L37                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 30
;;   new tail = 67

;;   ======================================================
;;   -- basic block 7 from 36 to 36 -- after reload
;;   ======================================================

;;	  0-->    36 r0=0xfffffffffffffeff             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 36
;;   new tail = 36

;;   ======================================================
;;   -- basic block 8 from 44 to 63 -- after reload
;;   ======================================================

;;	  0-->    44 r0=r0&0xfffffffffffffeff          :cortex_a8_default
;;	  0-->    50 use r0                            :nothing
;;	  0-->    63 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 44
;;   new tail = 63





vfp_emulate_instruction

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,8u} r1={3d,2u} r2={4d,1u} r3={4d,1u} r4={1d,2u} r12={2d} r13={2d,11u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 279{249d,30u,0e} in 17{15 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 2 [r2] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 8 5 9 2 arch/arm/vfp/vfpmodule.c:298 (set (reg:SI 2 r2 [138])
        (and:SI (reg:SI 0 r0 [orig:135 inst ] [135])
            (const_int 251658240 [0xf000000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 9 8 60 2 arch/arm/vfp/vfpmodule.c:298 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [138])
            (const_int 234881024 [0xe000000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [138])
        (nil)))

(insn/f:TI 60 9 61 2 arch/arm/vfp/vfpmodule.c:293 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                (set/f (reg/f:SI 13 sp)
                    (plus:SI (reg/f:SI 13 sp)
                        (const_int -8 [0xfffffffffffffff8])))
                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                    (reg:SI 4 r4))
                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                            (const_int 4 [0x4])) [0 S4 A32])
                    (reg:SI 14 lr))
            ])
        (nil)))

(note 61 60 10 2 NOTE_INSN_PROLOGUE_END)

(jump_insn:TI 10 61 11 2 arch/arm/vfp/vfpmodule.c:298 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6218 [0x184a])
            (nil))))
;; End of basic block 2 -> ( 3 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [37.8%]  (fallthru)
;; Succ edge  7 [62.2%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [37.8%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 12 11 13 3 NOTE_INSN_DELETED)

(insn:TI 13 12 14 3 arch/arm/vfp/vfpmodule.c:299 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 0 r0 [orig:135 inst ] [135])
                (const_int 1 [0x1])
                (const_int 4 [0x4]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 14 13 15 3 arch/arm/vfp/vfpmodule.c:299 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [61.0%]  (fallthru)
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 16 15 17 4 arch/arm/vfp/vfpmodule.c:303 (set (reg:SI 3 r3 [140])
        (and:SI (reg:SI 0 r0 [orig:135 inst ] [135])
            (const_int 3840 [0xf00]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 17 16 18 4 arch/arm/vfp/vfpmodule.c:303 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [140])
            (const_int 2560 [0xa00]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [140])
        (nil)))

(jump_insn:TI 18 17 19 4 arch/arm/vfp/vfpmodule.c:303 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]


;; Succ edge  5 [19.9%]  (fallthru)
;; Succ edge  6 [80.1%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [19.9%]  (fallthru)
(note 19 18 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 22 19 65 5 arch/arm/vfp/vfpmodule.c:304 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_single_cpdo") [flags 0x41] <function_decl 0x1103cf00 vfp_single_cpdo>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 65 22 66 5 (set (pc)
        (label_ref 37)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 66 65 26)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [80.1%] 
(code_label 26 66 27 6 74 "" [1 uses])

(note 27 26 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 30 27 67 6 arch/arm/vfp/vfpmodule.c:306 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_cpdo") [flags 0x41] <function_decl 0x11050000 vfp_double_cpdo>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 67 30 68 6 (set (pc)
        (label_ref 37)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 68 67 34)

;; Start of basic block ( 2 3) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [62.2%] 
;; Pred edge  3 [39.0%] 
(code_label 34 68 35 7 73 "" [2 uses])

(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 36 35 37 7 arch/arm/vfp/vfpmodule.c:294 (set (reg/v:SI 0 r0 [orig:133 exceptions ] [133])
        (const_int -257 [0xfffffffffffffeff])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  6 [100.0%] 
(code_label 37 36 38 8 75 "" [2 uses])

(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 39 38 44 8 NOTE_INSN_DELETED)

(insn:TI 44 39 50 8 arch/arm/vfp/vfpmodule.c:323 (set (reg/i:SI 0 r0)
        (and:SI (reg/v:SI 0 r0 [orig:133 exceptions ] [133])
            (const_int -257 [0xfffffffffffffeff]))) 67 {*arm_andsi3_insn} (nil))

(insn 50 44 62 8 arch/arm/vfp/vfpmodule.c:323 (use (reg/i:SI 0 r0)) -1 (nil))

(note 62 50 63 8 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 63 62 64 8 arch/arm/vfp/vfpmodule.c:323 (return) 260 {return} (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 64 63 58)

(note 58 64 59 NOTE_INSN_DELETED)

(note 59 58 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_raise_sigfpe (vfp_raise_sigfpe)[0:831]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 50 to 54 -- after reload
;;   ======================================================

;;	  0-->    50 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->    51 sp=sp-0x80                        :cortex_a8_default
;;	  2-->     2 r5=r0                             :cortex_a8_default
;;	  2-->     3 r6=r1                             :cortex_a8_default
;;	  3-->     8 r0=sp                             :cortex_a8_default
;;	  3-->     9 r1=0x80                           :cortex_a8_default
;;	  4-->    10 call [`__memzero']                :cortex_a8_issue_branch
;;	  4-->    49 r2=sp                             :cortex_a8_default
;;	  5-->    44 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  5-->    14 r1=[r6+0x3c]                      :cortex_a8_load_store_1
;;	  6-->    45 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  6-->    13 [sp+0x8]=r5                       :cortex_a8_load_store_1
;;	  7-->    15 r1=r1-0x4                         :cortex_a8_default
;;	  7-->    11 r0=0x8                            :cortex_a8_default
;;	  8-->    20 r2=[r3+0xc]                       :cortex_a8_load_store_1
;;	  8-->    27 ip=0x6                            :cortex_a8_default
;;	  9-->    16 [sp+0xc]=r1                       :cortex_a8_load_store_1
;;	  9-->    47 r1=0x0                            :cortex_a8_default
;;	 10-->    12 [sp]=r0                           :cortex_a8_load_store_1
;;	 10-->     7 r4=sp                             :cortex_a8_default
;;	 11-->    22 [r2+0x318]=r1                     :cortex_a8_load_store_1
;;	 11-->    34 r1=sp                             :cortex_a8_default
;;	 12-->    26 r2=[r3+0xc]                       :cortex_a8_load_store_1
;;	 15-->    28 [r2+0x314]=ip                     :cortex_a8_load_store_1
;;	 16-->    35 r2=[r3+0xc]                       :cortex_a8_load_store_1
;;	 17-->    36 r0=call [`send_sig_info']         :cortex_a8_issue_branch
;;	 17-->    54 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 17
;;   new head = 50
;;   new tail = 54





vfp_raise_sigfpe

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={5d,4u} r1={8d,6u} r2={7d,4u} r3={5d,4u,2d} r4={2d,2u} r5={2d,3u} r6={2d,3u} r12={3d,1u} r13={3d,14u,3d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 311{262d,43u,6e} in 27{25 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 4 50 2 NOTE_INSN_DELETED)

(insn/f:TI 50 18 51 2 arch/arm/vfp/vfpmodule.c:214 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(insn/f:TI 51 50 52 2 arch/arm/vfp/vfpmodule.c:214 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -128 [0xffffffffffffff80]))) 4 {*arm_addsi3} (nil))

(note 52 51 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 52 3 2 arch/arm/vfp/vfpmodule.c:214 (set (reg/v:SI 5 r5 [orig:136 sicode ] [136])
        (reg:SI 0 r0 [ sicode ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ sicode ])
        (nil)))

(insn 3 2 8 2 arch/arm/vfp/vfpmodule.c:214 (set (reg/v/f:SI 6 r6 [orig:137 regs ] [137])
        (reg:SI 1 r1 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ regs ])
        (nil)))

(insn:TI 8 3 9 2 arch/arm/vfp/vfpmodule.c:217 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 9 8 10 2 arch/arm/vfp/vfpmodule.c:217 discrim 1 (set (reg:SI 1 r1)
        (const_int 128 [0x80])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 10 9 49 2 arch/arm/vfp/vfpmodule.c:217 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 49 10 44 2 arch/arm/vfp/vfpmodule.c:227 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 44 49 14 2 arch/arm/vfp/vfpmodule.c:227 (set (reg:SI 3 r3 [142])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn 14 44 45 2 arch/arm/vfp/vfpmodule.c:221 (set (reg:SI 1 r1 [orig:140 <variable>.uregs+60 ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:137 regs ] [137])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 45 14 13 2 arch/arm/vfp/vfpmodule.c:227 (set (reg:SI 3 r3 [142])
        (and:SI (reg:SI 3 r3 [142])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 13 45 15 2 arch/arm/vfp/vfpmodule.c:220 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
        (reg/v:SI 5 r5 [orig:136 sicode ] [136])) 167 {*arm_movsi_insn} (nil))

(insn:TI 15 13 11 2 arch/arm/vfp/vfpmodule.c:221 (set (reg:SI 1 r1 [141])
        (plus:SI (reg:SI 1 r1 [orig:140 <variable>.uregs+60 ] [140])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (nil)))

(insn 11 15 20 2 arch/arm/vfp/vfpmodule.c:219 (set (reg:SI 0 r0 [139])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 8 [0x8])
        (nil)))

(insn:TI 20 11 27 2 arch/arm/vfp/vfpmodule.c:227 (set (reg/f:SI 2 r2 [orig:144 <variable>.task ] [144])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 27 20 16 2 arch/arm/vfp/vfpmodule.c:228 (set (reg:SI 12 ip [149])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn:TI 16 27 47 2 arch/arm/vfp/vfpmodule.c:221 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 1 r1 [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [141])
        (nil)))

(insn 47 16 12 2 arch/arm/vfp/vfpmodule.c:227 (set (reg:SI 1 r1 [145])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 12 47 7 2 arch/arm/vfp/vfpmodule.c:219 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
        (reg:SI 0 r0 [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(insn 7 12 22 2 arch/arm/vfp/vfpmodule.c:217 discrim 1 (set (reg/f:SI 4 r4 [138])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 22 7 34 2 arch/arm/vfp/vfpmodule.c:227 (set (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:144 <variable>.task ] [144])
                (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])
        (reg:SI 1 r1 [145])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:144 <variable>.task ] [144])
        (expr_list:REG_DEAD (reg:SI 1 r1 [145])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(insn 34 22 26 2 arch/arm/vfp/vfpmodule.c:230 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 26 34 28 2 arch/arm/vfp/vfpmodule.c:228 (set (reg/f:SI 2 r2 [orig:148 <variable>.task ] [148])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn:TI 28 26 35 2 arch/arm/vfp/vfpmodule.c:228 (set (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:148 <variable>.task ] [148])
                (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [149])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:148 <variable>.task ] [148])
            (expr_list:REG_EQUAL (const_int 6 [0x6])
                (nil)))))

(insn:TI 35 28 36 2 arch/arm/vfp/vfpmodule.c:230 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [142])
        (nil)))

(call_insn:TI 36 35 53 2 arch/arm/vfp/vfpmodule.c:230 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("send_sig_info") [flags 0x41] <function_decl 0x1100d280 send_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 53 36 54 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 54 53 55 2 arch/arm/vfp/vfpmodule.c:231 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 55 54 46)

(note 46 55 48 NOTE_INSN_DELETED)

(note 48 46 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_raise_exceptions (vfp_raise_exceptions)[0:833]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 30 count 38 (  1.8)


vfp_raise_exceptions

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={14d,17u,1d} r1={15d,9u} r2={11d,12u} r3={15d,10u} r4={3d,6u} r5={3d,5u} r6={2d,4u} r7={3d,4u} r12={7d,1u} r13={2d,28u} r14={6d,3u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={23d,16u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 880{764d,115u,1e} in 71{65 regular + 6 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 6 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]

( 4 3 )->[4]->( 4 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 4 )->[5]->( 19 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 2 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 6 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 8 7 )->[9]->( 10 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 9 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 9 10 )->[11]->( 12 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 11 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 11 12 )->[13]->( 14 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 13 )->[14]->( 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 13 14 )->[15]->( 16 17 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 15 )->[16]->( 17 18 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 15 16 )->[17]->( 18 20 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 17 16 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 18 5 )->[19]->( 1 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 17 )->[20]->( 1 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 19 20 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 177 to worklist
  Adding insn 29 to worklist
  Adding insn 21 to worklist
  Adding insn 50 to worklist
  Adding insn 45 to worklist
  Adding insn 40 to worklist
  Adding insn 37 to worklist
  Adding insn 34 to worklist
  Adding insn 191 to worklist
  Adding insn 69 to worklist
  Adding insn 66 to worklist
  Adding insn 73 to worklist
  Adding insn 85 to worklist
  Adding insn 96 to worklist
  Adding insn 107 to worklist
  Adding insn 118 to worklist
  Adding insn 122 to worklist
  Adding insn 130 to worklist
  Adding insn 135 to worklist
  Adding insn 183 to worklist
  Adding insn 180 to worklist
Finished finding needed instructions:
processing block 19 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
processing block 5 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 52 to worklist
  Adding insn 53 to worklist
processing block 4 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 49 to worklist
  Adding insn 157 to worklist
  Adding insn 47 to worklist
  Adding insn 44 to worklist
  Adding insn 46 to worklist
  Adding insn 42 to worklist
  Adding insn 43 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 33 to worklist
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 13 [sp]
  Adding insn 25 to worklist
  Adding insn 23 to worklist
  Adding insn 22 to worklist
  Adding insn 28 to worklist
  Adding insn 31 to worklist
  Adding insn 19 to worklist
  Adding insn 30 to worklist
  Adding insn 20 to worklist
processing block 18 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 134 to worklist
  Adding insn 133 to worklist
processing block 20 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
processing block 17 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 129 to worklist
processing block 16 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 124 to worklist
  Adding insn 121 to worklist
processing block 15 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 117 to worklist
processing block 14 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 154 to worklist
  Adding insn 168 to worklist
  Adding insn 153 to worklist
processing block 13 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 106 to worklist
processing block 12 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 151 to worklist
  Adding insn 169 to worklist
  Adding insn 150 to worklist
processing block 11 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 95 to worklist
processing block 10 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 148 to worklist
  Adding insn 170 to worklist
  Adding insn 147 to worklist
processing block 9 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 84 to worklist
processing block 8 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 80 to worklist
processing block 7 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 75 to worklist
  Adding insn 72 to worklist
processing block 6 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 68 to worklist
  Adding insn 65 to worklist
  Adding insn 62 to worklist
  Adding insn 59 to worklist
processing block 2 lr out =  0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
  Adding insn 9 to worklist
  Adding insn 7 to worklist
  Adding insn 14 to worklist
  Adding insn 13 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 30 count 40 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 177 to 15 -- after reload
;;   ======================================================

;;	  0-->    13 ip=0xfffffffffffffeff             :cortex_a8_default
;;	  1-->    14 cc=cmp(r0,ip)                     :cortex_a8_default
;;	  2-->   177 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  3-->     7 r7=r1                             :cortex_a8_default
;;	  4-->     9 r6=r3                             :cortex_a8_default
;;	  4-->    15 pc={(cc!=0x0)?L56:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 177
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 20 to 29 -- after reload
;;   ======================================================

;;	  0-->    20 r1=`*.LC7'                        :cortex_a8_load_store_1
;;	  0-->    30 r5=0x1                            :cortex_a8_default
;;	  1-->    19 r0=`*.LC6'                        :cortex_a8_load_store_1
;;	  1-->    31 r4=0x0                            :cortex_a8_default
;;	  2-->    21 r0=call [`printk']                :cortex_a8_issue_branch
;;	  2-->    28 r3=r7                             :cortex_a8_default
;;	  3-->    22 {r1=asm_operands;clobber cc;}     :nothing
;;	  4-->    23 {r2=asm_operands;clobber cc;}     :nothing
;;	  5-->    25 r0=`*.LC8'                        :cortex_a8_load_store_1
;;	  6-->    29 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 20
;;   new tail = 29

;;   ======================================================
;;   -- basic block 4 from 33 to 50 -- after reload
;;   ======================================================

;;	  0-->    33 r0=r4                             :cortex_a8_default
;;	  1-->    34 r0=call [`vfp_get_float']         :cortex_a8_issue_branch
;;	 33-->    35 r7=r0                             :cortex_a8_default
;;	 33-->    36 r0=r5                             :cortex_a8_default
;;	 34-->    37 r0=call [`vfp_get_float']         :cortex_a8_issue_branch
;;	 34-->    42 r1=r4                             :cortex_a8_default
;;	 35-->    44 r3=r5                             :cortex_a8_default
;;	 35-->    43 r2=r7                             :cortex_a8_default
;;	 36-->    46 r4=r4+0x2                         :cortex_a8_default
;;	 36-->    47 r5=r5+0x2                         :cortex_a8_default
;;	 66-->    40 [sp]=r0                           :cortex_a8_load_store_1
;;	 67-->   157 r0=`*.LC9'                        :cortex_a8_load_store_1
;;	 68-->    45 r0=call [`printk']                :cortex_a8_issue_branch
;;	 68-->    49 cc=cmp(r4,0x20)                   :cortex_a8_default
;;	 70-->    50 pc={(cc!=0x0)?L48:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 70
;;   new head = 33
;;   new tail = 50

;;   ======================================================
;;   -- basic block 5 from 53 to 191 -- after reload
;;   ======================================================

;;	  0-->    53 r1=r6                             :cortex_a8_default
;;	  0-->    52 r0=0x0                            :cortex_a8_default
;;	  1-->   191 pc=L188                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 53
;;   new tail = 191

;;   ======================================================
;;   -- basic block 6 from 59 to 69 -- after reload
;;   ======================================================

;;	  0-->    59 {cc=cmp(r0&0xfffffffff0000000,0x0):cortex_a8_default
;;	  1-->    62 (cc) r2=r2&0xfffffff              :cortex_a8_default
;;	  2-->    65 r2=r2|r0                          :cortex_a8_default
;;	  3-->    66 {asm_operands;clobber cc;}        :nothing
;;	  4-->    68 cc=cmp(zxt(r0,0x1,0x1),0x0)       :cortex_a8_default
;;	  6-->    69 pc={(cc==0x0)?L78:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 59
;;   new tail = 69

;;   ======================================================
;;   -- basic block 7 from 72 to 73 -- after reload
;;   ======================================================

;;	  0-->    72 cc=cmp(zxt(r2,0x1,0x9),0x0)       :cortex_a8_default
;;	  2-->    75 (cc) r3=0x30003                   :cortex_a8_load_store_1
;;	  2-->    73 pc={(cc!=0x0)?L81:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 72
;;   new tail = 73

;;   ======================================================
;;   -- basic block 8 from 80 to 80 -- after reload
;;   ======================================================

;;	  0-->    80 r3=0x0                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 80
;;   new tail = 80

;;   ======================================================
;;   -- basic block 9 from 84 to 85 -- after reload
;;   ======================================================

;;	  0-->    84 cc=cmp(zxt(r0,0x1,0x4),0x0)       :cortex_a8_default
;;	  2-->    85 pc={(cc==0x0)?L92:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 84
;;   new tail = 85

;;   ======================================================
;;   -- basic block 10 from 147 to 148 -- after reload
;;   ======================================================

;;	  0-->   170 r1=0x30006                        :cortex_a8_load_store_1
;;	  0-->   147 cc=cmp(zxt(r2,0x1,0xc),0x0)       :cortex_a8_default
;;	  2-->   148 r3={(cc==0x0)?r3:r1}              :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 147
;;   new tail = 148

;;   ======================================================
;;   -- basic block 11 from 95 to 96 -- after reload
;;   ======================================================

;;	  0-->    95 cc=cmp(zxt(r0,0x1,0x3),0x0)       :cortex_a8_default
;;	  2-->    96 pc={(cc==0x0)?L103:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 95
;;   new tail = 96

;;   ======================================================
;;   -- basic block 12 from 150 to 151 -- after reload
;;   ======================================================

;;	  0-->   169 r1=0x30005                        :cortex_a8_load_store_1
;;	  0-->   150 cc=cmp(zxt(r2,0x1,0xb),0x0)       :cortex_a8_default
;;	  2-->   151 r3={(cc==0x0)?r3:r1}              :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 150
;;   new tail = 151

;;   ======================================================
;;   -- basic block 13 from 106 to 107 -- after reload
;;   ======================================================

;;	  0-->   106 cc=cmp(zxt(r0,0x1,0x2),0x0)       :cortex_a8_default
;;	  2-->   107 pc={(cc==0x0)?L114:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 106
;;   new tail = 107

;;   ======================================================
;;   -- basic block 14 from 153 to 154 -- after reload
;;   ======================================================

;;	  0-->   168 r1=0x30004                        :cortex_a8_load_store_1
;;	  0-->   153 cc=cmp(zxt(r2,0x1,0xa),0x0)       :cortex_a8_default
;;	  2-->   154 r3={(cc==0x0)?r3:r1}              :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 153
;;   new tail = 154

;;   ======================================================
;;   -- basic block 15 from 117 to 118 -- after reload
;;   ======================================================

;;	  0-->   117 cc=cmp(zxt(r0,0x1,0x0),0x0)       :cortex_a8_default
;;	  2-->   118 pc={(cc==0x0)?L127:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 117
;;   new tail = 118

;;   ======================================================
;;   -- basic block 16 from 121 to 122 -- after reload
;;   ======================================================

;;	  0-->   121 cc=cmp(zxt(r2,0x1,0x8),0x0)       :cortex_a8_default
;;	  2-->   124 (cc) r3=0x30007                   :cortex_a8_load_store_1
;;	  2-->   122 pc={(cc!=0x0)?L131:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 121
;;   new tail = 122

;;   ======================================================
;;   -- basic block 17 from 129 to 130 -- after reload
;;   ======================================================

;;	  0-->   129 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  2-->   130 pc={(cc==0x0)?L142:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 129
;;   new tail = 130

;;   ======================================================
;;   -- basic block 18 from 133 to 134 -- after reload
;;   ======================================================

;;	  0-->   133 r0=r3                             :cortex_a8_default
;;	  0-->   134 r1=r6                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 133
;;   new tail = 134

;;   ======================================================
;;   -- basic block 19 from 183 to 135 -- after reload
;;   ======================================================

;;	  0-->   183 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  1-->   135 call [`vfp_raise_sigfpe']         :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 183
;;   new tail = 135

;;   ======================================================
;;   -- basic block 20 from 180 to 180 -- after reload
;;   ======================================================

;;	  0-->   180 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 180
;;   new tail = 180





vfp_raise_exceptions

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={14d,17u,1d} r1={15d,9u} r2={11d,12u} r3={15d,10u} r4={3d,6u} r5={3d,5u} r6={2d,4u} r7={3d,4u} r12={7d,1u} r13={2d,28u} r14={6d,3u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={23d,16u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 880{764d,115u,1e} in 71{65 regular + 6 call} insns.
(note 5 0 11 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 11 5 10 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 10 11 13 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 13 10 14 2 arch/arm/vfp/vfpmodule.c:254 (set (reg:SI 12 ip [149])
        (const_int -257 [0xfffffffffffffeff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -257 [0xfffffffffffffeff])
        (nil)))

(insn:TI 14 13 177 2 arch/arm/vfp/vfpmodule.c:254 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
            (reg:SI 12 ip [149]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [149])
        (expr_list:REG_EQUAL (compare:CC (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int -257 [0xfffffffffffffeff]))
            (nil))))

(insn/f:TI 177 14 178 2 arch/arm/vfp/vfpmodule.c:249 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 7 r7)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -32 [0xffffffffffffffe0])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 0 r0))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 1 r1))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 2 r2))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 12 [0xc])) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 16 [0x10])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 20 [0x14])) [0 S4 A32])
                            (reg:SI 6 r6))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 24 [0x18])) [0 S4 A32])
                            (reg:SI 7 r7))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 28 [0x1c])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 178 177 7 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 7 178 9 2 arch/arm/vfp/vfpmodule.c:249 (set (reg/v:SI 7 r7 [orig:146 inst ] [146])
        (reg:SI 1 r1 [ inst ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ inst ])
        (nil)))

(insn:TI 9 7 15 2 arch/arm/vfp/vfpmodule.c:249 (set (reg/v/f:SI 6 r6 [orig:148 regs ] [148])
        (reg:SI 3 r3 [ regs ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 15 9 16 2 arch/arm/vfp/vfpmodule.c:254 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 56)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [0.0%]  (fallthru)
(note 16 15 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 16 30 3 arch/arm/vfp/vfpmodule.c:237 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11116ed0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11116ed0>)
        (nil)))

(insn 30 20 19 3 arch/arm/vfp/vfpmodule.c:238 (set (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 19 30 31 3 arch/arm/vfp/vfpmodule.c:237 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x11116210>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x11116210>)
        (nil)))

(insn 31 19 21 3 arch/arm/vfp/vfpmodule.c:240 (set (reg/v:SI 4 r4 [orig:141 i ] [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn:TI 21 31 28 3 arch/arm/vfp/vfpmodule.c:237 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 28 21 22 3 arch/arm/vfp/vfpmodule.c:238 (set (reg:SI 3 r3)
        (reg/v:SI 7 r7 [orig:146 inst ] [146])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 7 r7 [orig:146 inst ] [146])
        (nil)))

(insn:TI 22 28 23 3 arch/arm/vfp/vfpmodule.c:239 (parallel [
            (set (reg/v:SI 1 r1 [orig:142 __v ] [142])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6032489))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 23 22 25 3 arch/arm/vfp/vfpmodule.c:239 (parallel [
            (set (reg/v:SI 2 r2 [orig:143 __v ] [143])
                (asm_operands:SI ("mrc p10, 7, %0, cr1, cr0, 0 @ fmrx	%0, FPSCR") ("=r") 0 []
                     [] 6032502))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 25 23 29 3 arch/arm/vfp/vfpmodule.c:238 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11110fa0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11110fa0>)
        (nil)))

(call_insn:TI 29 25 48 3 arch/arm/vfp/vfpmodule.c:238 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [93.8%]  (dfs_back)
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 48 29 32 4 81 "" [1 uses])

(note 32 48 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 38 32 33 4 NOTE_INSN_DELETED)

(insn:TI 33 38 34 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:141 i ] [141])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 34 33 35 4 arch/arm/vfp/vfpmodule.c:241 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_float") [flags 0x41] <function_decl 0x11050b80 vfp_get_float>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 35 34 36 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 7 r7 [orig:139 D.16614 ] [139])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 36 35 37 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 0 r0)
        (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 37 36 42 4 arch/arm/vfp/vfpmodule.c:241 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_float") [flags 0x41] <function_decl 0x11050b80 vfp_get_float>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 42 37 44 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:141 i ] [141])) 167 {*arm_movsi_insn} (nil))

(insn:TI 44 42 43 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 3 r3)
        (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 43 44 46 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 2 r2)
        (reg:SI 7 r7 [orig:139 D.16614 ] [139])) 167 {*arm_movsi_insn} (nil))

(insn:TI 46 43 47 4 arch/arm/vfp/vfpmodule.c:240 discrim 2 (set (reg/v:SI 4 r4 [orig:141 i ] [141])
        (plus:SI (reg/v:SI 4 r4 [orig:141 i ] [141])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn 47 46 40 4 arch/arm/vfp/vfpmodule.c:240 discrim 2 (set (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])
        (plus:SI (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn:TI 40 47 157 4 arch/arm/vfp/vfpmodule.c:241 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn:TI 157 40 45 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11118c80>)) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 45 157 49 4 arch/arm/vfp/vfpmodule.c:241 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 49 45 50 4 arch/arm/vfp/vfpmodule.c:240 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:141 i ] [141])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 50 49 51 4 arch/arm/vfp/vfpmodule.c:240 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9375 [0x249f])
            (nil))))
;; End of basic block 4 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [93.8%]  (dfs_back)
;; Succ edge  5 [6.2%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  4 [6.2%]  (fallthru,loop_exit)
(note 51 50 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 53 51 52 5 arch/arm/vfp/vfpmodule.c:256 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 52 53 191 5 arch/arm/vfp/vfpmodule.c:256 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 191 52 192 5 (set (pc)
        (label_ref 188)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 19)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  19 [100.0%] 

(barrier 192 191 56)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [100.0%] 
(code_label 56 192 57 6 80 "" [1 uses])

(note 57 56 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 58 57 67 6 NOTE_INSN_DELETED)

(note 67 58 59 6 NOTE_INSN_DELETED)

(insn:TI 59 67 62 6 arch/arm/vfp/vfpmodule.c:265 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                        (const_int -268435456 [0xfffffffff0000000]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(insn:TI 62 59 65 6 arch/arm/vfp/vfpmodule.c:266 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 2 r2 [orig:147 fpscr ] [147])
            (and:SI (reg/v:SI 2 r2 [orig:147 fpscr ] [147])
                (const_int 268435455 [0xfffffff])))) 2295 {neon_vornv2di+28} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn:TI 65 62 66 6 arch/arm/vfp/vfpmodule.c:268 (set (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
        (ior:SI (reg/v:SI 2 r2 [orig:147 fpscr ] [147])
            (reg/v:SI 0 r0 [orig:145 exceptions ] [145]))) 89 {*arm_iorsi3} (nil))

(insn:TI 66 65 68 6 arch/arm/vfp/vfpmodule.c:270 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr1, cr0, 0 @ fmxr	FPSCR, %0") ("") 0 [
                    (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6036456)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 68 66 69 6 arch/arm/vfp/vfpmodule.c:279 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 69 68 70 6 arch/arm/vfp/vfpmodule.c:279 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 70 69 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 71 70 72 7 NOTE_INSN_DELETED)

(insn:TI 72 71 75 7 arch/arm/vfp/vfpmodule.c:279 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 9 [0x9]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 75 72 73 7 arch/arm/vfp/vfpmodule.c:279 discrim 2 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (const_int 196611 [0x30003]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 73 75 78 7 arch/arm/vfp/vfpmodule.c:279 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [50.0%]  (fallthru)
(code_label 78 73 79 8 83 "" [1 uses])

(note 79 78 80 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 80 79 81 8 arch/arm/vfp/vfpmodule.c:250 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  7 [50.0%] 
(code_label 81 80 82 9 84 "" [1 uses])

(note 82 81 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 83 82 84 9 NOTE_INSN_DELETED)

(insn:TI 84 83 85 9 arch/arm/vfp/vfpmodule.c:280 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 4 [0x4]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 85 84 86 9 arch/arm/vfp/vfpmodule.c:280 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [50.0%]  (fallthru)
(note 86 85 87 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 87 86 170 10 NOTE_INSN_DELETED)

(insn:TI 170 87 147 10 arch/arm/vfp/vfpmodule.c:280 discrim 2 (set (reg:SI 1 r1 [165])
        (const_int 196614 [0x30006])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196614 [0x30006])
        (nil)))

(insn 147 170 148 10 arch/arm/vfp/vfpmodule.c:280 discrim 2 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 12 [0xc]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 148 147 92 10 arch/arm/vfp/vfpmodule.c:280 discrim 2 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (reg:SI 1 r1 [165]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_DEAD (reg:SI 1 r1 [165])
            (nil))))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  9 [50.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
(code_label 92 148 93 11 85 "" [1 uses])

(note 93 92 94 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 94 93 95 11 NOTE_INSN_DELETED)

(insn:TI 95 94 96 11 arch/arm/vfp/vfpmodule.c:281 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 3 [0x3]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 96 95 97 11 arch/arm/vfp/vfpmodule.c:281 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  12 [50.0%]  (fallthru)
;; Succ edge  13 [50.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  11 [50.0%]  (fallthru)
(note 97 96 98 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 98 97 169 12 NOTE_INSN_DELETED)

(insn:TI 169 98 150 12 arch/arm/vfp/vfpmodule.c:281 discrim 2 (set (reg:SI 1 r1 [166])
        (const_int 196613 [0x30005])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196613 [0x30005])
        (nil)))

(insn 150 169 151 12 arch/arm/vfp/vfpmodule.c:281 discrim 2 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 11 [0xb]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 151 150 103 12 arch/arm/vfp/vfpmodule.c:281 discrim 2 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (reg:SI 1 r1 [166]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_DEAD (reg:SI 1 r1 [166])
            (nil))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [50.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
(code_label 103 151 104 13 86 "" [1 uses])

(note 104 103 105 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 105 104 106 13 NOTE_INSN_DELETED)

(insn:TI 106 105 107 13 arch/arm/vfp/vfpmodule.c:282 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 107 106 108 13 arch/arm/vfp/vfpmodule.c:282 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  13 [50.0%]  (fallthru)
(note 108 107 109 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 109 108 168 14 NOTE_INSN_DELETED)

(insn:TI 168 109 153 14 arch/arm/vfp/vfpmodule.c:282 discrim 2 (set (reg:SI 1 r1 [167])
        (const_int 196612 [0x30004])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196612 [0x30004])
        (nil)))

(insn 153 168 154 14 arch/arm/vfp/vfpmodule.c:282 discrim 2 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 10 [0xa]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 154 153 114 14 arch/arm/vfp/vfpmodule.c:282 discrim 2 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (reg:SI 1 r1 [167]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_DEAD (reg:SI 1 r1 [167])
            (nil))))
;; End of basic block 14 -> ( 15)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  13 [50.0%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 114 154 115 15 87 "" [1 uses])

(note 115 114 116 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 116 115 117 15 NOTE_INSN_DELETED)

(insn:TI 117 116 118 15 arch/arm/vfp/vfpmodule.c:283 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
        (nil)))

(jump_insn:TI 118 117 119 15 arch/arm/vfp/vfpmodule.c:283 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  16 [50.0%]  (fallthru)
;; Succ edge  17 [50.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  15 [50.0%]  (fallthru)
(note 119 118 120 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 120 119 121 16 NOTE_INSN_DELETED)

(insn:TI 121 120 124 16 arch/arm/vfp/vfpmodule.c:283 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 8 [0x8]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
        (nil)))

(insn:TI 124 121 122 16 arch/arm/vfp/vfpmodule.c:283 discrim 2 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (const_int 196615 [0x30007]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 122 124 127 16 arch/arm/vfp/vfpmodule.c:283 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 131)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  18 [50.0%] 

;; Start of basic block ( 15 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [50.0%] 
;; Pred edge  16 [50.0%]  (fallthru)
(code_label 127 122 128 17 88 "" [1 uses])

(note 128 127 129 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 129 128 130 17 arch/arm/vfp/vfpmodule.c:285 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 130 129 131 17 arch/arm/vfp/vfpmodule.c:285 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 142)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8136 [0x1fc8])
            (nil))))
;; End of basic block 17 -> ( 18 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  18 [18.6%]  (fallthru)
;; Succ edge  20 [81.4%] 

;; Start of basic block ( 17 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  17 [18.6%]  (fallthru)
;; Pred edge  16 [50.0%] 
(code_label 131 130 132 18 89 "" [1 uses])

(note 132 131 133 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 133 132 134 18 arch/arm/vfp/vfpmodule.c:286 (set (reg:SI 0 r0)
        (reg/v:SI 3 r3 [orig:144 si_code ] [144])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (nil)))

(insn 134 133 188 18 arch/arm/vfp/vfpmodule.c:286 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 18 -> ( 19)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18 5) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 188 134 186 19 93 "" [1 uses])

(note 186 188 182 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 182 186 183 19 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 183 182 135 19 arch/arm/vfp/vfpmodule.c:287 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 135 183 136 19 arch/arm/vfp/vfpmodule.c:286 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_raise_sigfpe") [flags 0x3] <function_decl 0x1108cc80 vfp_raise_sigfpe>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 19 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 136 135 142)

;; Start of basic block ( 17) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  17 [81.4%] 
(code_label 142 136 145 20 91 "" [1 uses])

(note 145 142 179 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 179 145 180 20 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 180 179 181 20 arch/arm/vfp/vfpmodule.c:287 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 20 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 181 180 167)

(note 167 181 171 NOTE_INSN_DELETED)

(note 171 167 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function VFP_bounce (VFP_bounce)[0:835]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 24 count 31 (  1.8)


VFP_bounce

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,7u} r1={14d,12u} r2={14d,8u} r3={19d,15u,2d} r4={2d,9u,2d} r5={2d,9u} r6={2d,7u,1d} r7={4d,7u} r8={1d,2u} r12={5d} r13={2d,23u} r14={5d,3u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={19d,13u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 768{648d,115u,5e} in 70{65 regular + 5 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 )->[3]->( 12 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 2 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 4 )->[5]->( 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 7 [r7]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 4 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 6 )->[7]->( 14 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 6 5 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 8 9 )->[10]->( 15 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	 24 [cc]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 3 11 )->[12]->( 13 15 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 13 7 )->[14]->( 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 14 10 12 )->[15]->( 16 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 15 )->[16]->( 1 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 16 15 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 10 to worklist
  Adding insn 139 to worklist
  Adding insn 19 to worklist
  Adding insn 23 to worklist
  Adding insn 150 to worklist
  Adding insn 28 to worklist
  Adding insn 36 to worklist
  Adding insn 152 to worklist
  Adding insn 69 to worklist
  Adding insn 66 to worklist
  Adding insn 75 to worklist
  Adding insn 79 to worklist
  Adding insn 81 to worklist
  Adding insn 92 to worklist
  Adding insn 89 to worklist
  Adding insn 98 to worklist
  Adding insn 115 to worklist
  Adding insn 112 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 101 to worklist
  Adding insn 117 to worklist
  Adding insn 144 to worklist
Finished finding needed instructions:
processing block 16 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 15 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 114 to worklist
  Adding insn 106 to worklist
  Adding insn 105 to worklist
  Adding insn 135 to worklist
  Adding insn 134 to worklist
  Adding insn 138 to worklist
processing block 14 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
processing block 13 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 97 to worklist
  Adding insn 96 to worklist
  Adding insn 95 to worklist
processing block 12 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 91 to worklist
  Adding insn 88 to worklist
  Adding insn 87 to worklist
  Adding insn 86 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 83 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 78 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 74 to worklist
  Adding insn 73 to worklist
  Adding insn 72 to worklist
processing block 8 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
  Adding insn 68 to worklist
  Adding insn 65 to worklist
  Adding insn 63 to worklist
  Adding insn 60 to worklist
  Adding insn 58 to worklist
  Adding insn 56 to worklist
  Adding insn 57 to worklist
  Adding insn 51 to worklist
  Adding insn 48 to worklist
processing block 5 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 27 to worklist
  Adding insn 25 to worklist
  Adding insn 26 to worklist
processing block 7 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 38 to worklist
  Adding insn 41 to worklist
  Adding insn 40 to worklist
  Adding insn 39 to worklist
processing block 6 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 35 to worklist
processing block 4 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 22 to worklist
processing block 3 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 18 to worklist
processing block 2 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 14 to worklist
  Adding insn 12 to worklist
  Adding insn 13 to worklist
  Adding insn 11 to worklist
  Adding insn 9 to worklist
  Adding insn 4 to worklist
  Adding insn 8 to worklist
  Adding insn 2 to worklist
  Adding insn 3 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 24 count 32 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 139 to 15 -- after reload
;;   ======================================================

;;	  0-->     8 r3=r1&0x47ffffff                  :cortex_a8_default
;;	  1-->   139 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  2-->     9 r3=r3&0xffffffffffffff60          :cortex_a8_default
;;	  3-->     3 r6=r1                             :cortex_a8_default
;;	  3-->     2 r7=r0                             :cortex_a8_default
;;	  4-->     4 r4=r2                             :cortex_a8_default
;;	  5-->    10 {asm_operands;clobber cc;}        :nothing
;;	  6-->    11 {r3=asm_operands;clobber cc;}     :nothing
;;	  7-->    13 r3=r3&0xf0000                     :cortex_a8_default
;;	  8-->    12 {r5=asm_operands;clobber cc;}     :nothing
;;	  9-->    14 cc=cmp(r3,0x10000)                :cortex_a8_default
;;	 11-->    15 pc={(cc!=0x0)?L20:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 139
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 18 to 19 -- after reload
;;   ======================================================

;;	  0-->    18 cc=cmp(zxt(r5,0x1,0xc),0x0)       :cortex_a8_default
;;	  2-->    19 pc={(cc!=0x0)?L84:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 18
;;   new tail = 19

;;   ======================================================
;;   -- basic block 4 from 22 to 23 -- after reload
;;   ======================================================

;;	  0-->    22 cc=cmp(r6,0x0)                    :cortex_a8_default
;;	  2-->    23 pc={(cc>=0x0)?L32:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 22
;;   new tail = 23

;;   ======================================================
;;   -- basic block 5 from 26 to 150 -- after reload
;;   ======================================================

;;	  0-->    26 r3=[r4+0x3c]                      :cortex_a8_load_store_1
;;	  1-->    25 {r7=asm_operands;clobber cc;}     :nothing
;;	  2-->    27 r3=r3-0x4                         :cortex_a8_default
;;	  2-->    28 [r4+0x3c]=r3                      :cortex_a8_load_store_1
;;	  3-->   150 pc=L45                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 26
;;   new tail = 150

;;   ======================================================
;;   -- basic block 6 from 35 to 36 -- after reload
;;   ======================================================

;;	  0-->    35 cc=cmp(zxt(r6,0x1,0x1d),0x0)      :cortex_a8_default
;;	  2-->    36 pc={(cc!=0x0)?L45:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 35
;;   new tail = 36

;;   ======================================================
;;   -- basic block 7 from 39 to 152 -- after reload
;;   ======================================================

;;	  0-->    39 r1=r7                             :cortex_a8_default
;;	  0-->    40 r2=r5                             :cortex_a8_default
;;	  1-->    41 r3=r4                             :cortex_a8_default
;;	  1-->    38 r0=0xfffffffffffffeff             :cortex_a8_default
;;	  2-->   152 pc=L147                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 39
;;   new tail = 152

;;   ======================================================
;;   -- basic block 8 from 48 to 69 -- after reload
;;   ======================================================

;;	  0-->    48 {cc=cmp(r6&0xffffffff88000000,0x0):cortex_a8_default
;;	  0-->    63 r0=r7                             :cortex_a8_default
;;	  1-->    57 (cc) r1=r6+0x100                  :cortex_a8_default
;;	  1-->    56 (cc) r3=r5&0xfffffffffff8ffff     :cortex_a8_default
;;	  2-->    58 (cc) r1=r1&0x700                  :cortex_a8_default
;;	  2-->    51 (!cc) r1=r5                       :cortex_a8_default
;;	  3-->    65 r2=r4                             :cortex_a8_default
;;	  4-->    60 (cc) r1=r1<<0x8|r3                :cortex_a8_default
;;	  5-->    66 r0=call [`vfp_emulate_instruction':cortex_a8_issue_branch
;;	 37-->    68 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 39-->    69 pc={(cc==0x0)?L76:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 39
;;   new head = 48
;;   new tail = 69

;;   ======================================================
;;   -- basic block 9 from 72 to 75 -- after reload
;;   ======================================================

;;	  0-->    72 r1=r7                             :cortex_a8_default
;;	  0-->    73 r2=r5                             :cortex_a8_default
;;	  1-->    74 r3=r4                             :cortex_a8_default
;;	  2-->    75 call [`vfp_raise_exceptions']     :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 72
;;   new tail = 75

;;   ======================================================
;;   -- basic block 10 from 78 to 79 -- after reload
;;   ======================================================

;;	  0-->    78 cc=cmp(r6,0xffffffff90000000)     :cortex_a8_default
;;	  2-->    79 pc={(cc!=0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 78
;;   new tail = 79

;;   ======================================================
;;   -- basic block 11 from 81 to 83 -- after reload
;;   ======================================================

;;	  0-->    81 {asm_operands;clobber [scratch];} :nothing
;;	  1-->    83 {r7=asm_operands;clobber cc;}     :nothing
;;	Ready list (final):  
;;   total time = 1
;;   new head = 81
;;   new tail = 83

;;   ======================================================
;;   -- basic block 12 from 86 to 92 -- after reload
;;   ======================================================

;;	  0-->    86 r0=r7                             :cortex_a8_default
;;	  0-->    87 r1=r5                             :cortex_a8_default
;;	  1-->    88 r2=r4                             :cortex_a8_default
;;	  2-->    89 r0=call [`vfp_emulate_instruction':cortex_a8_issue_branch
;;	 34-->    91 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    92 pc={(cc==0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 86
;;   new tail = 92

;;   ======================================================
;;   -- basic block 13 from 95 to 97 -- after reload
;;   ======================================================

;;	  0-->    95 r1=r7                             :cortex_a8_default
;;	  0-->    96 r2=r5                             :cortex_a8_default
;;	  1-->    97 r3=r4                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 95
;;   new tail = 97

;;   ======================================================
;;   -- basic block 14 from 98 to 98 -- after reload
;;   ======================================================

;;	  0-->    98 call [`vfp_raise_exceptions']     :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 98
;;   new tail = 98

;;   ======================================================
;;   -- basic block 15 from 101 to 115 -- after reload
;;   ======================================================

;;	  0-->   101 {asm_operands;clobber [scratch];} :nothing
;;	  1-->   138 r2=sp                             :cortex_a8_default
;;	  2-->   134 r3=r2&0xffffffffffffe03f          :cortex_a8_default
;;	  3-->   135 r3=r3&0xffffffffffffffc0          :cortex_a8_default
;;	  5-->   105 r2=[r3+0x4]                       :cortex_a8_load_store_1
;;	  7-->   106 r2=r2-0x1                         :cortex_a8_default
;;	  7-->   107 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	  8-->   108 {asm_operands;clobber [scratch];} :nothing
;;	  9-->   112 r3=[r3]                           :cortex_a8_load_store_1
;;	 11-->   114 cc=cmp(zxt(r3,0x1,0x1),0x0)       :cortex_a8_default
;;	 13-->   115 pc={(cc==0x0)?return:pc}          :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 13
;;   new head = 101
;;   new tail = 115

;;   ======================================================
;;   -- basic block 16 from 144 to 117 -- after reload
;;   ======================================================

;;	  0-->   144 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  1-->   117 call [`preempt_schedule']         :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 144
;;   new tail = 117





VFP_bounce

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,7u} r1={14d,12u} r2={14d,8u} r3={19d,15u,2d} r4={2d,9u,2d} r5={2d,9u} r6={2d,7u,1d} r7={4d,7u} r8={1d,2u} r12={5d} r13={2d,23u} r14={5d,3u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={19d,13u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 768{648d,115u,5e} in 70{65 regular + 5 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 8 5 139 2 arch/arm/vfp/vfpmodule.c:347 (set (reg:SI 3 r3 [150])
        (and:SI (reg:SI 1 r1 [orig:147 fpexc ] [147])
            (const_int 1207959551 [0x47ffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn/f:TI 139 8 140 2 arch/arm/vfp/vfpmodule.c:329 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -24 [0xffffffffffffffe8])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 8 r8))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 140 139 9 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 9 140 3 2 arch/arm/vfp/vfpmodule.c:347 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 3 r3 [150])
            (const_int -160 [0xffffffffffffff60]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
            (const_int 1207959392 [0x47ffff60]))
        (nil)))

(insn:TI 3 9 2 2 arch/arm/vfp/vfpmodule.c:329 (set (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
        (reg:SI 1 r1 [ fpexc ])) 167 {*arm_movsi_insn} (nil))

(insn 2 3 4 2 arch/arm/vfp/vfpmodule.c:329 (set (reg/v:SI 7 r7 [orig:146 trigger ] [146])
        (reg:SI 0 r0 [ trigger ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ trigger ])
        (nil)))

(insn:TI 4 2 10 2 arch/arm/vfp/vfpmodule.c:329 (set (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
        (reg:SI 2 r2 [ regs ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ regs ])
        (nil)))

(insn:TI 10 4 11 2 arch/arm/vfp/vfpmodule.c:347 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [149])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6046312)
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:SI 3 r3 [149])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn:TI 11 10 13 2 arch/arm/vfp/vfpmodule.c:349 (parallel [
            (set (reg/v:SI 3 r3 [orig:143 __v ] [143])
                (asm_operands:SI ("mrc p10, 7, %0, cr0, cr0, 0 @ fmrx	%0, FPSID") ("=r") 0 []
                     [] 6046576))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 13 11 12 2 arch/arm/vfp/vfpmodule.c:355 (set (reg:SI 3 r3 [151])
        (and:SI (reg/v:SI 3 r3 [orig:143 __v ] [143])
            (const_int 983040 [0xf0000]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 12 13 14 2 arch/arm/vfp/vfpmodule.c:350 (parallel [
            (set (reg/v:SI 5 r5 [orig:142 __v ] [142])
                (asm_operands:SI ("mrc p10, 7, %0, cr1, cr0, 0 @ fmrx	%0, FPSCR") ("=r") 0 []
                     [] 6046717))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 14 12 15 2 arch/arm/vfp/vfpmodule.c:355 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [151])
            (const_int 65536 [0x10000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 15 14 16 2 arch/arm/vfp/vfpmodule.c:355 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  4 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 16 18 3 NOTE_INSN_DELETED)

(insn:TI 18 17 19 3 arch/arm/vfp/vfpmodule.c:356 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 5 r5 [orig:142 __v ] [142])
                (const_int 1 [0x1])
                (const_int 12 [0xc]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 19 18 20 3 arch/arm/vfp/vfpmodule.c:356 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 12 4)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
;; Pred edge  3 [50.0%]  (fallthru)
(code_label 20 19 21 4 97 "" [1 uses])

(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 22 21 23 4 arch/arm/vfp/vfpmodule.c:363 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 23 22 24 4 arch/arm/vfp/vfpmodule.c:363 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 32)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7300 [0x1c84])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [27.0%]  (fallthru)
;; Succ edge  6 [73.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  4 [27.0%]  (fallthru)
(note 24 23 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 24 25 5 arch/arm/vfp/vfpmodule.c:370 (set (reg:SI 3 r3 [orig:153 <variable>.uregs+60 ] [153])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn:TI 25 26 27 5 arch/arm/vfp/vfpmodule.c:369 (parallel [
            (set (reg/v:SI 7 r7 [orig:141 __v ] [141])
                (asm_operands:SI ("mrc p10, 7, %0, cr9, cr0, 0 @ fmrx	%0, FPINST") ("=r") 0 []
                     [] 6049139))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn:TI 27 25 28 5 arch/arm/vfp/vfpmodule.c:370 (set (reg:SI 3 r3 [154])
        (plus:SI (reg:SI 3 r3 [orig:153 <variable>.uregs+60 ] [153])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn 28 27 150 5 arch/arm/vfp/vfpmodule.c:370 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (reg:SI 3 r3 [154])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 150 28 151 5 (set (pc)
        (label_ref 45)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 151 150 32)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [73.0%] 
(code_label 32 151 33 6 99 "" [1 uses])

(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 34 33 35 6 NOTE_INSN_DELETED)

(insn:TI 35 34 36 6 arch/arm/vfp/vfpmodule.c:372 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
                (const_int 1 [0x1])
                (const_int 29 [0x1d]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 36 35 37 6 arch/arm/vfp/vfpmodule.c:372 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  7 [29.0%]  (fallthru)
;; Succ edge  8 [71.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  6 [29.0%]  (fallthru)
(note 37 36 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 39 37 40 7 arch/arm/vfp/vfpmodule.c:378 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 40 39 41 7 arch/arm/vfp/vfpmodule.c:378 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:142 __v ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 41 40 38 7 arch/arm/vfp/vfpmodule.c:378 (set (reg:SI 3 r3)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 38 41 152 7 arch/arm/vfp/vfpmodule.c:378 (set (reg:SI 0 r0)
        (const_int -257 [0xfffffffffffffeff])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 152 38 153 7 (set (pc)
        (label_ref 147)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 14)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 153 152 45)

;; Start of basic block ( 6 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [71.0%] 
;; Pred edge  5 [100.0%] 
(code_label 45 153 46 8 100 "" [2 uses])

(note 46 45 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 47 46 59 8 NOTE_INSN_DELETED)

(note 59 47 67 8 NOTE_INSN_DELETED)

(note 67 59 48 8 NOTE_INSN_DELETED)

(insn:TI 48 67 63 8 arch/arm/vfp/vfpmodule.c:387 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
                        (const_int -2013265920 [0xffffffff88000000]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(insn 63 48 57 8 arch/arm/vfp/vfpmodule.c:401 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn:TI 57 63 56 8 arch/arm/vfp/vfpmodule.c:393 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [157])
            (plus:SI (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
                (const_int 256 [0x100])))) 2268 {neon_vornv2di+1} (nil))

(insn 56 57 58 8 arch/arm/vfp/vfpmodule.c:392 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 3 r3 [orig:134 fpscr.584 ] [134])
            (and:SI (reg/v:SI 5 r5 [orig:142 __v ] [142])
                (const_int -458753 [0xfffffffffff8ffff])))) 2295 {neon_vornv2di+28} (nil))

(insn:TI 58 56 51 8 arch/arm/vfp/vfpmodule.c:393 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 1 r1 [158])
            (and:SI (reg:SI 1 r1 [157])
                (const_int 1792 [0x700])))) 2295 {neon_vornv2di+28} (nil))

(insn 51 58 65 8 arch/arm/vfp/vfpmodule.c:350 (cond_exec (eq (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 1 r1 [orig:145 fpscr ] [145])
            (reg/v:SI 5 r5 [orig:142 __v ] [142]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 65 51 60 8 arch/arm/vfp/vfpmodule.c:401 (set (reg:SI 2 r2)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(insn:TI 60 65 66 8 arch/arm/vfp/vfpmodule.c:393 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 1 r1 [orig:145 fpscr ] [145])
            (ior:SI (ashift:SI (reg:SI 1 r1 [158])
                    (const_int 8 [0x8]))
                (reg/v:SI 3 r3 [orig:134 fpscr.584 ] [134])))) 2368 {neon_vornv2di+101} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:134 fpscr.584 ] [134])
            (nil))))

(call_insn:TI 66 60 68 8 arch/arm/vfp/vfpmodule.c:401 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_emulate_instruction") [flags 0x3] <function_decl 0x1108cf80 vfp_emulate_instruction>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 68 66 69 8 arch/arm/vfp/vfpmodule.c:402 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 69 68 70 8 arch/arm/vfp/vfpmodule.c:402 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  9 [29.0%]  (fallthru)
;; Succ edge  10 [71.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  8 [29.0%]  (fallthru)
(note 70 69 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 72 70 73 9 arch/arm/vfp/vfpmodule.c:403 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 73 72 74 9 arch/arm/vfp/vfpmodule.c:403 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:142 __v ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 74 73 75 9 arch/arm/vfp/vfpmodule.c:403 (set (reg:SI 3 r3)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 75 74 76 9 arch/arm/vfp/vfpmodule.c:403 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_raise_exceptions") [flags 0x3] <function_decl 0x1108ce80 vfp_raise_exceptions>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [71.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 76 75 77 10 104 "" [1 uses])

(note 77 76 78 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 78 77 79 10 arch/arm/vfp/vfpmodule.c:409 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
            (const_int -1879048192 [0xffffffff90000000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 79 78 80 10 arch/arm/vfp/vfpmodule.c:409 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 10 -> ( 15 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  15 [72.0%] 
;; Succ edge  11 [28.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  10 [28.0%]  (fallthru)
(note 80 79 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 82 80 81 11 NOTE_INSN_DELETED)

(insn:TI 81 82 83 11 arch/arm/vfp/vfpmodule.c:416 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6055144)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 83 81 84 11 arch/arm/vfp/vfpmodule.c:417 (parallel [
            (set (reg/v:SI 7 r7 [orig:146 trigger ] [146])
                (asm_operands:SI ("mrc p10, 7, %0, cr10, cr0, 0 @ fmrx	%0, FPINST2") ("=r") 0 []
                     [] 6055282))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 3 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 84 83 85 12 98 ("emulate") [1 uses])

(note 85 84 90 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 90 85 86 12 NOTE_INSN_DELETED)

(insn:TI 86 90 87 12 arch/arm/vfp/vfpmodule.c:420 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 87 86 88 12 arch/arm/vfp/vfpmodule.c:420 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:142 __v ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 88 87 89 12 arch/arm/vfp/vfpmodule.c:420 (set (reg:SI 2 r2)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 89 88 91 12 arch/arm/vfp/vfpmodule.c:420 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_emulate_instruction") [flags 0x3] <function_decl 0x1108cf80 vfp_emulate_instruction>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 91 89 92 12 arch/arm/vfp/vfpmodule.c:421 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 92 91 93 12 arch/arm/vfp/vfpmodule.c:421 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 13 15)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  13 [29.0%]  (fallthru)
;; Succ edge  15 [71.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  12 [29.0%]  (fallthru)
(note 93 92 95 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 95 93 96 13 arch/arm/vfp/vfpmodule.c:422 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 96 95 97 13 arch/arm/vfp/vfpmodule.c:422 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:142 __v ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 97 96 147 13 arch/arm/vfp/vfpmodule.c:422 (set (reg:SI 3 r3)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 7) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 147 97 145 14 107 "" [1 uses])

(note 145 147 98 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 98 145 99 14 arch/arm/vfp/vfpmodule.c:422 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_raise_exceptions") [flags 0x3] <function_decl 0x1108ce80 vfp_raise_exceptions>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 14 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 14 10 12) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru)
;; Pred edge  10 [72.0%] 
;; Pred edge  12 [71.0%] 
(code_label 99 98 100 15 101 ("exit") [2 uses])

(note 100 99 103 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 103 100 113 15 NOTE_INSN_DELETED)

(note 113 103 101 15 NOTE_INSN_DELETED)

(insn:TI 101 113 138 15 arch/arm/vfp/vfpmodule.c:424 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6056168)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 138 101 134 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn:TI 134 138 135 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 135 134 105 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
        (and:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 105 135 106 15 arch/arm/vfp/vfpmodule.c:424 (set (reg:SI 2 r2 [orig:161 <variable>.preempt_count ] [161])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn:TI 106 105 107 15 arch/arm/vfp/vfpmodule.c:424 (set (reg:SI 2 r2 [162])
        (plus:SI (reg:SI 2 r2 [orig:161 <variable>.preempt_count ] [161])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 107 106 108 15 arch/arm/vfp/vfpmodule.c:424 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [162])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [162])
        (nil)))

(insn:TI 108 107 112 15 arch/arm/vfp/vfpmodule.c:424 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6056168)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 112 108 114 15 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:136 D.16642 ] [136])
        (mem/v:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 114 112 115 15 arch/arm/vfp/vfpmodule.c:424 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:136 D.16642 ] [136])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:136 D.16642 ] [136])
        (nil)))

(jump_insn:TI 115 114 116 15 arch/arm/vfp/vfpmodule.c:424 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 15 -> ( 16 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  16 [0.0%]  (fallthru)
;; Succ edge  EXIT [100.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  15 [0.0%]  (fallthru)
(note 116 115 143 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 143 116 144 16 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 144 143 117 16 arch/arm/vfp/vfpmodule.c:425 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 117 144 118 16 arch/arm/vfp/vfpmodule.c:424 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("preempt_schedule") [flags 0x41] <function_decl 0x10aa7a00 preempt_schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (nil))
;; End of basic block 16 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 118 117 136)

(note 136 118 137 NOTE_INSN_DELETED)

(note 137 136 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns
