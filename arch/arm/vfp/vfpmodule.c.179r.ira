
;; Function vfp_cpu_pm_notifier (vfp_cpu_pm_notifier)[0:830]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000


Pass 1 for finding allocno costs

    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r141,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000

   Insn 56(l0): point = 0
   Insn 50(l0): point = 2
   Insn 43(l0): point = 5
   Insn 42(l0): point = 7
   Insn 86(l0): point = 10
   Insn 37(l0): point = 12
   Insn 36(l0): point = 14
   Insn 35(l0): point = 16
   Insn 32(l0): point = 18
   Insn 31(l0): point = 20
   Insn 30(l0): point = 22
   Insn 29(l0): point = 24
   Insn 28(l0): point = 26
   Insn 26(l0): point = 29
   Insn 25(l0): point = 31
   Insn 24(l0): point = 33
   Insn 23(l0): point = 35
   Insn 84(l0): point = 38
   Insn 16(l0): point = 41
   Insn 15(l0): point = 43
   Insn 14(l0): point = 46
   Insn 12(l0): point = 48
   Insn 13(l0): point = 50
   Insn 89(l0): point = 52
   Insn 8(l0): point = 54
   Insn 88(l0): point = 56
 a0(r148): [6..7]
 a1(r134): [15..54] [8..9]
 a2(r147): [13..14]
 a3(r143): [17..35]
 a4(r135): [46..48] [17..37]
 a5(r139): [44..50] [17..37]
 a6(r136): [23..33]
 a7(r144): [25..26]
 a8(r141): [49..56]
Compressing live ranges: from 59 to 21 - 35%
Ranges after the compression:
 a0(r148): [0..1]
 a1(r134): [6..19] [2..3]
 a2(r147): [4..5]
 a3(r143): [7..12]
 a4(r135): [15..16] [7..13]
 a5(r139): [14..18] [7..13]
 a6(r136): [8..11]
 a7(r144): [9..10]
 a8(r141): [17..20]
+++Allocating 64 bytes for conflict table (uncompressed size 72)
;; a0(r148,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r134,l0) conflicts: a3(r143,l0) a4(r135,l0) a5(r139,l0) a6(r136,l0) a7(r144,l0) a8(r141,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r147,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r143,l0) conflicts: a1(r134,l0) a4(r135,l0) a5(r139,l0) a6(r136,l0) a7(r144,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r135,l0) conflicts: a1(r134,l0) a3(r143,l0) a5(r139,l0) a6(r136,l0) a7(r144,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r139,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r135,l0) a6(r136,l0) a7(r144,l0) a8(r141,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a6(r136,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r135,l0) a5(r139,l0) a7(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r144,l0) conflicts: a1(r134,l0) a3(r143,l0) a4(r135,l0) a5(r139,l0) a6(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r141,l0) conflicts: a1(r134,l0) a5(r139,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14

  cp0:a0(r148)<->a1(r134)@125:shuffle
  cp1:a1(r134)<->a2(r147)@125:shuffle
  regions=1, blocks=9, points=21
    allocnos=9, copies=2, conflicts=0, ranges=12

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 8 7 6 5 4 3 2
    all: 0r148 1r134 2r147 3r143 4r135 5r139 6r136 7r144 8r141
    modified regnos: 134 135 136 139 141 143 144 147 148
    border:
    Pressure: GENERAL_REGS=7
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
      Pushing a7(r144,l0)
      Pushing a2(r147,l0)
      Pushing a0(r148,l0)
      Pushing a6(r136,l0)
      Pushing a8(r141,l0)
      Pushing a5(r139,l0)
      Pushing a4(r135,l0)
      Pushing a3(r143,l0)
      Pushing a1(r134,l0)
      Popping a1(r134,l0)  -- assign reg 4
      Popping a3(r143,l0)  -- assign reg 5
      Popping a4(r135,l0)  -- assign reg 6
      Popping a5(r139,l0)  -- assign reg 7
      Popping a8(r141,l0)  -- assign reg 3
      Popping a6(r136,l0)  -- assign reg 0
      Popping a0(r148,l0)  -- assign reg 4
      Popping a2(r147,l0)  -- assign reg 4
      Popping a7(r144,l0)  -- assign reg 3
Disposition:
    1:r134 l0     4    4:r135 l0     6    6:r136 l0     0    5:r139 l0     7
    8:r141 l0     3    3:r143 l0     5    7:r144 l0     3    2:r147 l0     4
    0:r148 l0     4
New iteration of spill/restore move
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=88, live_throughout: 1, 13, 14, dead_or_set: 141
insn=8, live_throughout: 1, 13, 14, 141, dead_or_set: 134
insn=89, live_throughout: 1, 13, 14, 134, dead_or_set: 141
insn=13, live_throughout: 13, 14, 134, 141, dead_or_set: 1, 139
insn=12, live_throughout: 13, 14, 24, 134, 139, dead_or_set: 135, 141
insn=14, live_throughout: 13, 14, 134, 135, 139, dead_or_set: 
insn=15, live_throughout: 13, 14, 134, dead_or_set: 139
insn=16, live_throughout: 13, 14, 134, dead_or_set: 
insn=84, live_throughout: 13, 14, 134, dead_or_set: 
insn=21, live_throughout: 13, 14, 134, 135, 139, dead_or_set: 
insn=23, live_throughout: 13, 14, 134, 135, 139, dead_or_set: 143
insn=24, live_throughout: 13, 14, 134, 135, 139, 143, dead_or_set: 136
insn=25, live_throughout: 13, 14, 134, 135, 136, 139, 143, dead_or_set: 
insn=26, live_throughout: 13, 14, 134, 135, 136, 139, 143, dead_or_set: 
insn=28, live_throughout: 13, 134, 135, 136, 139, 143, dead_or_set: 144
insn=29, live_throughout: 13, 134, 135, 136, 139, 143, dead_or_set: 144
insn=30, live_throughout: 13, 134, 135, 139, 143, dead_or_set: 0, 136
insn=31, live_throughout: 0, 13, 134, 135, 139, 143, dead_or_set: 1
insn=32, live_throughout: 13, 134, 135, 139, 143, dead_or_set: 0, 1, 14
insn=35, live_throughout: 13, 14, 134, dead_or_set: 135, 139, 143
insn=36, live_throughout: 13, 14, dead_or_set: 134, 147
insn=37, live_throughout: 13, 14, dead_or_set: 147
insn=86, live_throughout: 13, 14, dead_or_set: 
insn=83, live_throughout: 13, 14, 134, dead_or_set: 
insn=42, live_throughout: 13, 14, dead_or_set: 134, 148
insn=43, live_throughout: 13, 14, dead_or_set: 148
insn=44, live_throughout: 13, 14, dead_or_set: 
insn=50, live_throughout: 13, 14, dead_or_set: 0
insn=56, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 23 (nil))
changing reg in insn 8
changing reg in insn 42
changing reg in insn 36
changing reg in insn 31
changing reg in insn 28
changing reg in insn 12
changing reg in insn 35
changing reg in insn 24
changing reg in insn 24
changing reg in insn 24
changing reg in insn 30
changing reg in insn 25
changing reg in insn 13
changing reg in insn 35
changing reg in insn 15
changing reg in insn 89
changing reg in insn 88
changing reg in insn 89
changing reg in insn 12
changing reg in insn 23
changing reg in insn 35
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
changing reg in insn 36
changing reg in insn 37
changing reg in insn 42
changing reg in insn 43
Spilling for insn 88.
Using reg 2 for reload 0
Spilling for insn 35.
Spilling for insn 88.
Using reg 2 for reload 0
Spilling for insn 35.

Reloads for insn # 88
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 35
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 6 r6 [orig:135 cpu ] [135])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 5 r5 [143])) [0 vfp_current_hw_state S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 6 r6 [orig:135 cpu ] [135])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 5 r5 [143])) [0 vfp_current_hw_state S4 A32])
deleting insn with uid = 30.


try_optimize_cfg iteration 1

Forwarding edge 3->4 to 7 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 32.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)


vfp_cpu_pm_notifier

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,4u} r1={3d,3u} r2={3d,1u} r3={5d,3u} r4={3d,6u} r5={1d,2u} r6={1d,2u,1d} r7={1d,2u} r12={2d} r13={1d,10u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={8d,3u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 182{144d,37u,1e} in 26{25 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 6 5 2 NOTE_INSN_DELETED)

(note 5 3 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 5 92 2 NOTE_INSN_DELETED)

(insn 92 10 88 2 arch/arm/vfp/vfpmodule.c:184 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 88 92 8 2 arch/arm/vfp/vfpmodule.c:184 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 8 88 89 2 arch/arm/vfp/vfpmodule.c:183 (parallel [
            (set (reg/v:SI 4 r4 [orig:134 __v ] [134])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6025332))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 89 8 13 2 arch/arm/vfp/vfpmodule.c:184 (set (reg:SI 3 r3 [141])
        (and:SI (reg:SI 3 r3 [141])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 13 89 12 2 arch/arm/vfp/vfpmodule.c:186 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 1 r1 [ cmd ])
                    (const_int 0 [0x0])))
            (set (reg/v:SI 7 r7 [orig:139 cmd ] [139])
                (reg:SI 1 r1 [ cmd ]))
        ]) 174 {*movsi_compare0} (nil))

(insn 12 13 14 2 arch/arm/vfp/vfpmodule.c:184 (set (reg/v:SI 6 r6 [orig:135 cpu ] [135])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [141])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 14 12 58 2 arch/arm/vfp/vfpmodule.c:186 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 21)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 58 14 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 58 16 3 arch/arm/vfp/vfpmodule.c:186 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:139 cmd ] [139])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 82 3 arch/arm/vfp/vfpmodule.c:186 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 8 4)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  8 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 82 16 84 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 84 82 85 4 (set (pc)
        (label_ref 83)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%] 

(barrier 85 84 21)

;; Start of basic block ( 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
(code_label 21 85 22 5 3 "" [1 uses])

(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 5 arch/arm/vfp/vfpmodule.c:188 (set (reg/f:SI 5 r5 [143])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 24 23 25 5 arch/arm/vfp/vfpmodule.c:188 (set (reg/f:SI 0 r0 [orig:136 D.15883 ] [136])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 6 r6 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (reg/f:SI 5 r5 [143])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 6 r6 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
        (nil)))

(insn 25 24 26 5 arch/arm/vfp/vfpmodule.c:188 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:136 D.15883 ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 26 25 27 5 arch/arm/vfp/vfpmodule.c:188 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  6 [69.8%]  (fallthru)
;; Succ edge  8 [30.2%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 4 [r4]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  5 [69.8%]  (fallthru)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 6 arch/arm/vfp/vfpmodule.c:189 (set (reg:SI 3 r3 [144])
        (ior:SI (reg/v:SI 4 r4 [orig:134 __v ] [134])
            (const_int 1073741824 [0x40000000]))) 89 {*arm_iorsi3} (nil))

(insn 29 28 31 6 arch/arm/vfp/vfpmodule.c:189 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [144])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6026090)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 31 29 32 6 arch/arm/vfp/vfpmodule.c:190 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:134 __v ] [134])) 167 {*arm_movsi_insn} (nil))

(call_insn 32 31 35 6 arch/arm/vfp/vfpmodule.c:190 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 35 32 36 6 arch/arm/vfp/vfpmodule.c:192 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 6 r6 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (reg/f:SI 5 r5 [143])) [0 vfp_current_hw_state S4 A32])
        (reg/v:SI 7 r7 [orig:139 cmd ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 36 35 37 6 arch/arm/vfp/vfpmodule.c:193 (set (reg:SI 4 r4 [147])
        (and:SI (reg/v:SI 4 r4 [orig:134 __v ] [134])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 37 36 86 6 arch/arm/vfp/vfpmodule.c:193 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 4 r4 [147])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6026602)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(jump_insn 86 37 87 6 (set (pc)
        (label_ref 44)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 87 86 83)

;; Start of basic block ( 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  4 [100.0%] 
(code_label 83 87 41 7 6 "" [1 uses])

(note 41 83 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 7 arch/arm/vfp/vfpmodule.c:199 (set (reg:SI 4 r4 [148])
        (and:SI (reg/v:SI 4 r4 [orig:134 __v ] [134])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 43 42 44 7 arch/arm/vfp/vfpmodule.c:199 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 4 r4 [148])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6027369)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 3 5 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  5 [30.2%] 
;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 44 43 45 8 2 "" [3 uses])

(note 45 44 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 50 45 56 8 arch/arm/vfp/vfpmodule.c:203 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 56 50 90 8 arch/arm/vfp/vfpmodule.c:203 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 90 56 91 NOTE_INSN_DELETED)

(note 91 90 0 NOTE_INSN_DELETED)


;; Function vfp_pm_suspend (vfp_pm_suspend)[0:837]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 80.
verify found no changes in insn with uid = 80.
deleting insn with uid = 9.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 14 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 18 (  1.8)

Pass 0 for finding allocno costs

    a2 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000


Pass 1 for finding allocno costs

    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000

   Insn 69(l0): point = 0
   Insn 63(l0): point = 2
   Insn 58(l0): point = 4
   Insn 57(l0): point = 6
   Insn 56(l0): point = 8
   Insn 52(l0): point = 11
   Insn 51(l0): point = 13
   Insn 50(l0): point = 15
   Insn 49(l0): point = 17
   Insn 48(l0): point = 19
   Insn 47(l0): point = 21
   Insn 45(l0): point = 24
   Insn 44(l0): point = 26
   Insn 75(l0): point = 29
   Insn 39(l0): point = 31
   Insn 38(l0): point = 33
   Insn 37(l0): point = 35
   Insn 36(l0): point = 37
   Insn 35(l0): point = 39
   Insn 34(l0): point = 41
   Insn 33(l0): point = 43
   Insn 32(l0): point = 45
   Insn 31(l0): point = 47
   Insn 27(l0): point = 50
   Insn 26(l0): point = 52
   Insn 22(l0): point = 55
   Insn 21(l0): point = 57
   Insn 73(l0): point = 60
   Insn 16(l0): point = 62
   Insn 14(l0): point = 65
   Insn 13(l0): point = 67
   Insn 11(l0): point = 69
   Insn 80(l0): point = 71
   Insn 8(l0): point = 73
   Insn 10(l0): point = 75
   Insn 12(l0): point = 77
   Insn 78(l0): point = 79
   Insn 77(l0): point = 81
 a0(r136): [60..62] [40..57] [12..28]
 a1(r139): [50..69] [18..28]
 a2(r148): [20..21]
 a3(r147): [32..33]
 a4(r134): [34..35]
 a5(r138): [42..77]
 a6(r135): [63..73] [58..59]
 a7(r142): [70..71]
 a8(r143): [70..75]
 a9(r137): [76..81]
Compressing live ranges: from 84 to 26 - 30%
Ranges after the compression:
 a0(r136): [15..16] [9..12] [0..4]
 a1(r139): [11..18] [1..4]
 a2(r148): [2..3]
 a3(r147): [5..6]
 a4(r134): [7..8]
 a5(r138): [10..24]
 a6(r135): [17..21] [13..14]
 a7(r142): [19..20]
 a8(r143): [19..22]
 a9(r137): [23..25]
+++Allocating 80 bytes for conflict table (uncompressed size 80)
;; a0(r136,l0) conflicts: a1(r139,l0) a2(r148,l0) a5(r138,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r139,l0) conflicts: a0(r136,l0) a2(r148,l0) a5(r138,l0) a6(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a2(r148,l0) conflicts: a0(r136,l0) a1(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r147,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a4(r134,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r138,l0) conflicts: a0(r136,l0) a1(r139,l0) a6(r135,l0) a7(r142,l0) a8(r143,l0) a9(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a6(r135,l0) conflicts: a1(r139,l0) a5(r138,l0) a7(r142,l0) a8(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r142,l0) conflicts: a5(r138,l0) a6(r135,l0) a8(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r143,l0) conflicts: a5(r138,l0) a6(r135,l0) a7(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r137,l0) conflicts: a5(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a3(r147)<->a4(r134)@125:shuffle
  cp1:a0(r136)<->a6(r135)@125:shuffle
  cp2:a0(r136)<->a6(r135)@1000:move
  regions=1, blocks=10, points=26
    allocnos=10, copies=3, conflicts=1, ranges=14

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 9 8 7 6 5 4 3 2
    all: 0r136 1r139 2r148 3r147 4r134 5r138 6r135 7r142 8r143 9r137
    modified regnos: 134 135 136 137 138 139 142 143 147 148
    border:
    Pressure: GENERAL_REGS=5
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
      Pushing a8(r143,l0)
      Pushing a7(r142,l0)
      Pushing a4(r134,l0)
      Pushing a3(r147,l0)
      Pushing a2(r148,l0)
      Pushing a6(r135,l0)
      Pushing a1(r139,l0)
      Pushing a9(r137,l0)
      Pushing a5(r138,l0)
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 4
      Popping a5(r138,l0)  -- assign reg 5
      Popping a9(r137,l0)  -- assign reg 3
      Popping a1(r139,l0)  -- assign reg 0
      Popping a6(r135,l0)  -- assign reg 4
      Popping a2(r148,l0)  -- assign reg 3
      Popping a3(r147,l0)  -- assign reg 3
      Popping a4(r134,l0)  -- assign reg 3
      Popping a7(r142,l0)  -- assign reg 3
      Popping a8(r143,l0)  -- assign reg 2
Disposition:
    4:r134 l0     3    6:r135 l0     4    0:r136 l0     4    9:r137 l0     3
    5:r138 l0     5    1:r139 l0     0    7:r142 l0     3    8:r143 l0     2
    3:r147 l0     3    2:r148 l0     3
New iteration of spill/restore move
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=77, live_throughout: 13, dead_or_set: 137
insn=78, live_throughout: 13, dead_or_set: 137
insn=12, live_throughout: 13, 137, dead_or_set: 138
insn=10, live_throughout: 13, 138, dead_or_set: 137, 143
insn=8, live_throughout: 13, 138, 143, dead_or_set: 135
insn=80, live_throughout: 13, 135, 138, 143, dead_or_set: 142
insn=11, live_throughout: 13, 135, 138, dead_or_set: 139, 142, 143
insn=13, live_throughout: 13, 135, 138, 139, dead_or_set: 
insn=14, live_throughout: 13, 135, 138, 139, dead_or_set: 
insn=16, live_throughout: 13, 138, 139, dead_or_set: 135, 136
insn=73, live_throughout: 13, 136, 138, 139, dead_or_set: 
insn=19, live_throughout: 13, 135, 138, 139, dead_or_set: 
insn=21, live_throughout: 13, 138, 139, dead_or_set: 135, 136
insn=22, live_throughout: 13, 136, 138, 139, dead_or_set: 
insn=23, live_throughout: 13, 136, 138, 139, dead_or_set: 
insn=26, live_throughout: 13, 136, 138, 139, dead_or_set: 
insn=27, live_throughout: 13, 136, 138, 139, dead_or_set: 
insn=31, live_throughout: 13, 136, 138, dead_or_set: 0
insn=32, live_throughout: 0, 13, 136, 138, dead_or_set: 1
insn=33, live_throughout: 13, 136, 138, dead_or_set: 0, 1, 14
insn=34, live_throughout: 13, 136, dead_or_set: 0, 138
insn=35, live_throughout: 0, 13, dead_or_set: 1, 136
insn=36, live_throughout: 13, dead_or_set: 0, 1, 14
insn=37, live_throughout: 13, dead_or_set: 134
insn=38, live_throughout: 13, dead_or_set: 134, 147
insn=39, live_throughout: 13, dead_or_set: 147
insn=75, live_throughout: 13, dead_or_set: 
insn=42, live_throughout: 13, 136, 139, dead_or_set: 
insn=44, live_throughout: 13, 136, 139, dead_or_set: 
insn=45, live_throughout: 13, 136, 139, dead_or_set: 
insn=47, live_throughout: 13, 136, 139, dead_or_set: 148
insn=48, live_throughout: 13, 136, 139, dead_or_set: 148
insn=49, live_throughout: 13, 136, dead_or_set: 0, 139
insn=50, live_throughout: 0, 13, 136, dead_or_set: 1
insn=51, live_throughout: 13, 136, dead_or_set: 0, 1, 14
insn=52, live_throughout: 13, dead_or_set: 136
insn=53, live_throughout: 13, dead_or_set: 
insn=56, live_throughout: 13, dead_or_set: 0
insn=57, live_throughout: 0, 13, dead_or_set: 1
insn=58, live_throughout: 13, dead_or_set: 0, 1, 14
insn=63, live_throughout: 13, 14, dead_or_set: 0
insn=69, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 142: (insn_list:REG_DEP_TRUE 80 (nil))
changing reg in insn 37
changing reg in insn 38
changing reg in insn 8
changing reg in insn 21
changing reg in insn 16
changing reg in insn 21
changing reg in insn 16
changing reg in insn 26
changing reg in insn 52
changing reg in insn 50
changing reg in insn 47
changing reg in insn 35
changing reg in insn 22
changing reg in insn 78
changing reg in insn 77
changing reg in insn 78
changing reg in insn 12
changing reg in insn 10
changing reg in insn 12
changing reg in insn 34
changing reg in insn 13
changing reg in insn 11
changing reg in insn 49
changing reg in insn 44
changing reg in insn 13
changing reg in insn 80
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 38
changing reg in insn 39
changing reg in insn 47
changing reg in insn 48
Spilling for insn 77.
Using reg 2 for reload 0

Reloads for insn # 77
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)
deleting insn with uid = 16.
deleting insn with uid = 49.


try_optimize_cfg iteration 1

Simplifying condjump 14 around jump 73
deleting insn with uid = 15.
deleting insn with uid = 73.
deleting insn with uid = 74.
deleting block 3
deleting insn with uid = 19.
Deleted label in block 4.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 58.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 12 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)


vfp_pm_suspend

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,8u} r1={9d,4u} r2={7d,2u,1d} r3={11d,7u} r4={2d,7u} r5={1d,2u} r12={5d} r13={1d,13u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={13d,3u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 552{504d,47u,1e} in 36{32 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 2 82 2 NOTE_INSN_DELETED)

(insn 82 6 77 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 77 82 78 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 78 77 12 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
        (and:SI (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 12 78 10 2 arch/arm/vfp/vfpmodule.c:449 (set (reg/f:SI 5 r5 [orig:138 D.16109 ] [138])
        (plus:SI (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 10 12 8 2 arch/arm/vfp/vfpmodule.c:449 (set (reg:SI 2 r2 [orig:143 <variable>.cpu ] [143])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:137 ti ] [137])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 8 10 80 2 arch/arm/vfp/vfpmodule.c:446 (parallel [
            (set (reg/v:SI 4 r4 [orig:135 __v ] [135])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6062588))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 80 8 11 2 arch/arm/vfp/vfpmodule.c:449 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 11 80 13 2 arch/arm/vfp/vfpmodule.c:449 (set (reg/f:SI 0 r0 [orig:139 D.16108 ] [139])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [orig:143 <variable>.cpu ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [142])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 2 r2 [orig:143 <variable>.cpu ] [143])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
        (nil)))

(insn 13 11 14 2 arch/arm/vfp/vfpmodule.c:449 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:139 D.16108 ] [139])
            (reg/f:SI 5 r5 [orig:138 D.16109 ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 14 13 20 2 arch/arm/vfp/vfpmodule.c:449 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 23)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 2 -> ( 4 5)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  4 [85.0%]  (fallthru)
;; Succ edge  5 [15.0%] 

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  2 [85.0%]  (fallthru)
(note 20 14 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 4 arch/arm/vfp/vfpmodule.c:450 (set (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
        (ior:SI (reg/v:SI 4 r4 [orig:135 __v ] [135])
            (const_int 1073741824 [0x40000000]))) 89 {*arm_iorsi3} (nil))

(insn 22 21 23 4 arch/arm/vfp/vfpmodule.c:451 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6063217)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  2 [15.0%] 
(code_label 23 22 24 5 14 "" [1 uses])

(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 25 24 26 5 NOTE_INSN_DELETED)

(insn 26 25 27 5 arch/arm/vfp/vfpmodule.c:455 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
                (const_int 1 [0x1])
                (const_int 30 [0x1e]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 27 26 28 5 arch/arm/vfp/vfpmodule.c:455 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  5 [0.0%]  (fallthru)
(note 28 27 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 31 28 32 6 arch/arm/vfp/vfpmodule.c:456 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11122980>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x11122980>)
        (nil)))

(insn 32 31 33 6 arch/arm/vfp/vfpmodule.c:456 (set (reg:SI 1 r1)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn 33 32 34 6 arch/arm/vfp/vfpmodule.c:456 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 34 33 35 6 arch/arm/vfp/vfpmodule.c:457 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [orig:138 D.16109 ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 35 34 36 6 arch/arm/vfp/vfpmodule.c:457 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:136 fpexc ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn 36 35 37 6 arch/arm/vfp/vfpmodule.c:457 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 37 36 38 6 arch/arm/vfp/vfpmodule.c:460 (parallel [
            (set (reg/v:SI 3 r3 [orig:134 __v ] [134])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6064369))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 38 37 39 6 arch/arm/vfp/vfpmodule.c:460 (set (reg:SI 3 r3 [147])
        (and:SI (reg/v:SI 3 r3 [orig:134 __v ] [134])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 39 38 75 6 arch/arm/vfp/vfpmodule.c:460 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [147])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6064369)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(jump_insn 75 39 76 6 (set (pc)
        (label_ref 53)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 9)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 76 75 42)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
(code_label 42 76 43 7 15 "" [1 uses])

(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 45 7 arch/arm/vfp/vfpmodule.c:461 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:139 D.16108 ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 45 44 46 7 arch/arm/vfp/vfpmodule.c:461 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2165 [0x875])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  8 [78.3%]  (fallthru)
;; Succ edge  9 [21.6%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  7 [78.3%]  (fallthru)
(note 46 45 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 47 46 48 8 arch/arm/vfp/vfpmodule.c:462 (set (reg:SI 3 r3 [148])
        (ior:SI (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
            (const_int 1073741824 [0x40000000]))) 89 {*arm_iorsi3} (nil))

(insn 48 47 50 8 arch/arm/vfp/vfpmodule.c:462 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [148])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6064625)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 50 48 51 8 arch/arm/vfp/vfpmodule.c:463 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:136 fpexc ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn 51 50 52 8 arch/arm/vfp/vfpmodule.c:463 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 52 51 53 8 arch/arm/vfp/vfpmodule.c:464 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg/v:SI 4 r4 [orig:136 fpexc ] [136])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6064881)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 7 6) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  7 [21.6%] 
;; Pred edge  6 [100.0%] 
(code_label 53 52 54 9 16 "" [2 uses])

(note 54 53 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 56 54 57 9 arch/arm/vfp/vfpmodule.c:468 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 57 56 58 9 arch/arm/vfp/vfpmodule.c:468 discrim 1 (set (reg:SI 1 r1)
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(call_insn 58 57 63 9 arch/arm/vfp/vfpmodule.c:468 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 63 58 69 9 arch/arm/vfp/vfpmodule.c:471 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 69 63 79 9 arch/arm/vfp/vfpmodule.c:471 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 79 69 81 NOTE_INSN_DELETED)

(note 81 79 0 NOTE_INSN_DELETED)


;; Function vfp_flush_hwstate (vfp_flush_hwstate)[0:841]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a2(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r140,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a14(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a2(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r140,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a14(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 49(l0): point = 1
   Insn 47(l0): point = 4
   Insn 46(l0): point = 6
   Insn 44(l0): point = 8
   Insn 40(l0): point = 10
   Insn 39(l0): point = 12
   Insn 38(l0): point = 14
   Insn 37(l0): point = 16
   Insn 61(l0): point = 18
   Insn 60(l0): point = 20
   Insn 33(l0): point = 22
   Insn 32(l0): point = 24
   Insn 31(l0): point = 26
   Insn 28(l0): point = 29
   Insn 27(l0): point = 31
   Insn 25(l0): point = 33
   Insn 24(l0): point = 35
   Insn 23(l0): point = 37
   Insn 21(l0): point = 40
   Insn 20(l0): point = 42
   Insn 19(l0): point = 44
   Insn 17(l0): point = 46
   Insn 18(l0): point = 48
   Insn 16(l0): point = 50
   Insn 12(l0): point = 52
   Insn 11(l0): point = 54
   Insn 10(l0): point = 56
   Insn 9(l0): point = 58
   Insn 63(l0): point = 60
   Insn 2(l0): point = 62
   Insn 62(l0): point = 64
 a0(r134): [7..8]
 a1(r137): [9..20]
 a2(r158): [13..14]
 a3(r157): [15..16]
 a4(r143): [25..62]
 a5(r155): [25..26]
 a6(r149): [30..46]
 a7(r142): [30..50]
 a8(r154): [30..31]
 a9(r152): [34..35]
 a10(r141): [36..37]
 a11(r150): [43..48]
 a12(r151): [43..44]
 a13(r140): [51..64]
 a14(r146): [55..56]
 a15(r145): [57..58]
Compressing live ranges: from 67 to 28 - 41%
Ranges after the compression:
 a0(r134): [0..1]
 a1(r137): [2..7]
 a2(r158): [3..4]
 a3(r157): [5..6]
 a4(r143): [8..26]
 a5(r155): [8..9]
 a6(r149): [10..18]
 a7(r142): [10..20]
 a8(r154): [10..11]
 a9(r152): [12..13]
 a10(r141): [14..15]
 a11(r150): [16..19]
 a12(r151): [16..17]
 a13(r140): [21..27]
 a14(r146): [22..23]
 a15(r145): [24..25]
+++Allocating 120 bytes for conflict table (uncompressed size 128)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r137,l0) conflicts: a2(r158,l0) a3(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r158,l0) conflicts: a1(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r157,l0) conflicts: a1(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r143,l0) conflicts: a5(r155,l0) a8(r154,l0) a6(r149,l0) a7(r142,l0) a9(r152,l0) a10(r141,l0) a12(r151,l0) a11(r150,l0) a13(r140,l0) a14(r146,l0) a15(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r155,l0) conflicts: a4(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r149,l0) conflicts: a4(r143,l0) a8(r154,l0) a7(r142,l0) a9(r152,l0) a10(r141,l0) a12(r151,l0) a11(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r142,l0) conflicts: a4(r143,l0) a8(r154,l0) a6(r149,l0) a9(r152,l0) a10(r141,l0) a12(r151,l0) a11(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r154,l0) conflicts: a4(r143,l0) a6(r149,l0) a7(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r152,l0) conflicts: a4(r143,l0) a6(r149,l0) a7(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r141,l0) conflicts: a4(r143,l0) a6(r149,l0) a7(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r150,l0) conflicts: a4(r143,l0) a6(r149,l0) a7(r142,l0) a12(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r151,l0) conflicts: a4(r143,l0) a6(r149,l0) a7(r142,l0) a11(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r140,l0) conflicts: a4(r143,l0) a14(r146,l0) a15(r145,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a14(r146,l0) conflicts: a4(r143,l0) a13(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r145,l0) conflicts: a4(r143,l0) a13(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a2(r158)<->a3(r157)@125:shuffle
  cp1:a9(r152)<->a10(r141)@125:shuffle
  cp2:a14(r146)<->a15(r145)@125:shuffle
  regions=1, blocks=7, points=28
    allocnos=16, copies=3, conflicts=3, ranges=16

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r134 1r137 2r158 3r157 4r143 5r155 6r149 7r142 8r154 9r152 10r141 11r150 12r151 13r140 14r146 15r145
    modified regnos: 134 137 140 141 142 143 145 146 149 150 151 152 154 155 157 158
    border:
    Pressure: GENERAL_REGS=6
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
      Pushing a15(r145,l0)
      Pushing a14(r146,l0)
      Pushing a12(r151,l0)
      Pushing a11(r150,l0)
      Pushing a10(r141,l0)
      Pushing a9(r152,l0)
      Pushing a8(r154,l0)
      Pushing a5(r155,l0)
      Pushing a3(r157,l0)
      Pushing a2(r158,l0)
      Pushing a0(r134,l0)
      Pushing a7(r142,l0)
      Pushing a6(r149,l0)
      Pushing a4(r143,l0)
      Pushing a1(r137,l0)
      Pushing a13(r140,l0)
      Popping a13(r140,l0)  -- assign reg 3
      Popping a1(r137,l0)  -- assign reg 3
      Popping a4(r143,l0)  -- assign reg 0
      Popping a6(r149,l0)  -- assign reg 3
      Popping a7(r142,l0)  -- assign reg 2
      Popping a0(r134,l0)  -- assign reg 3
      Popping a2(r158,l0)  -- assign reg 2
      Popping a3(r157,l0)  -- assign reg 2
      Popping a5(r155,l0)  -- assign reg 3
      Popping a8(r154,l0)  -- assign reg 1
      Popping a9(r152,l0)  -- assign reg 1
      Popping a10(r141,l0)  -- assign reg 1
      Popping a11(r150,l0)  -- assign reg 1
      Popping a12(r151,l0)  -- assign reg 12
      Popping a14(r146,l0)  -- assign reg 2
      Popping a15(r145,l0)  -- assign reg 2
Disposition:
    0:r134 l0     3    1:r137 l0     3   13:r140 l0     3   10:r141 l0     1
    7:r142 l0     2    4:r143 l0     0   15:r145 l0     2   14:r146 l0     2
    6:r149 l0     3   11:r150 l0     1   12:r151 l0    12    9:r152 l0     1
    8:r154 l0     1    5:r155 l0     3    3:r157 l0     2    2:r158 l0     2
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=62, live_throughout: 0, 13, 14, dead_or_set: 140
insn=2, live_throughout: 13, 14, 140, dead_or_set: 0, 143
insn=63, live_throughout: 13, 14, 143, dead_or_set: 140
insn=9, live_throughout: 13, 14, 140, 143, dead_or_set: 145
insn=10, live_throughout: 13, 14, 140, 143, dead_or_set: 145, 146
insn=11, live_throughout: 13, 14, 140, 143, dead_or_set: 146
insn=12, live_throughout: 13, 14, 140, 143, dead_or_set: 
insn=16, live_throughout: 13, 14, 143, dead_or_set: 140, 142
insn=18, live_throughout: 13, 14, 142, 143, dead_or_set: 150
insn=17, live_throughout: 13, 14, 142, 143, 150, dead_or_set: 149
insn=19, live_throughout: 13, 14, 142, 143, 149, 150, dead_or_set: 151
insn=20, live_throughout: 13, 14, 142, 143, 149, dead_or_set: 150, 151
insn=21, live_throughout: 13, 14, 142, 143, 149, dead_or_set: 
insn=23, live_throughout: 13, 14, 142, 143, 149, dead_or_set: 141
insn=24, live_throughout: 13, 14, 142, 143, 149, dead_or_set: 141, 152
insn=25, live_throughout: 13, 14, 142, 143, 149, dead_or_set: 152
insn=27, live_throughout: 13, 14, 142, 143, 149, dead_or_set: 154
insn=28, live_throughout: 13, 14, 143, dead_or_set: 142, 149, 154
insn=29, live_throughout: 13, 14, 143, dead_or_set: 
insn=31, live_throughout: 13, 14, 143, dead_or_set: 155
insn=32, live_throughout: 13, 14, dead_or_set: 143, 155
insn=33, live_throughout: 13, 14, dead_or_set: 
insn=60, live_throughout: 13, 14, dead_or_set: 137
insn=61, live_throughout: 13, 14, dead_or_set: 137
insn=37, live_throughout: 13, 14, 137, dead_or_set: 157
insn=38, live_throughout: 13, 14, 137, dead_or_set: 157, 158
insn=39, live_throughout: 13, 14, 137, dead_or_set: 158
insn=40, live_throughout: 13, 14, 137, dead_or_set: 
insn=44, live_throughout: 13, 14, dead_or_set: 134, 137
insn=46, live_throughout: 13, 14, dead_or_set: 134
insn=47, live_throughout: 13, 14, dead_or_set: 
insn=49, live_throughout: 13, 14, dead_or_set: 
insn=56, live_throughout: 13, 14, dead_or_set: 
init_insns for 145: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 17 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 19 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 27 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 31 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 37 (nil))
init_insns for 158: (insn_list:REG_DEP_TRUE 39 (nil))
changing reg in insn 44
changing reg in insn 46
changing reg in insn 61
changing reg in insn 60
changing reg in insn 61
changing reg in insn 44
changing reg in insn 39
changing reg in insn 37
changing reg in insn 38
changing reg in insn 37
changing reg in insn 63
changing reg in insn 62
changing reg in insn 63
changing reg in insn 16
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
changing reg in insn 9
changing reg in insn 23
changing reg in insn 24
changing reg in insn 16
changing reg in insn 28
changing reg in insn 19
changing reg in insn 19
changing reg in insn 19
changing reg in insn 2
changing reg in insn 32
changing reg in insn 18
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 28
changing reg in insn 19
changing reg in insn 19
changing reg in insn 18
changing reg in insn 20
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
Spilling for insn 62.
Using reg 2 for reload 0
Spilling for insn 11.
Spilling for insn 28.
Spilling for insn 32.
Spilling for insn 60.
Using reg 2 for reload 0
Spilling for insn 39.

Reloads for insn # 62
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 11
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])

Reloads for insn # 28
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [149])) [0 vfp_current_hw_state S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [149])) [0 vfp_current_hw_state S4 A32])

Reloads for insn # 32
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:143 thread ] [143])
                                                        (const_int 704 [0x2c0])) [0 <variable>.vfpstate.hard.cpu+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:143 thread ] [143])
                                                        (const_int 704 [0x2c0])) [0 <variable>.vfpstate.hard.cpu+0 S4 A64])

Reloads for insn # 60
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 39
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 49.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 11 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


vfp_flush_hwstate

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 24[cc]
;;  ref usage 	r0={2d,2u} r1={6d,4u} r2={9d,8u,2d} r3={9d,12u,5d} r12={3d,1u} r13={1d,9u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={5d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 192{146d,39u,7e} in 32{31 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 3 66 2 NOTE_INSN_DELETED)

(insn 66 7 62 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 62 66 63 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 63 62 9 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
        (and:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 9 63 10 2 arch/arm/vfp/vfpmodule.c:520 (set (reg:SI 2 r2 [orig:145 <variable>.preempt_count ] [145])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 10 9 11 2 arch/arm/vfp/vfpmodule.c:520 (set (reg:SI 2 r2 [146])
        (plus:SI (reg:SI 2 r2 [orig:145 <variable>.preempt_count ] [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpmodule.c:520 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [146])) 167 {*arm_movsi_insn} (nil))

(insn 12 11 16 2 arch/arm/vfp/vfpmodule.c:520 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6072067)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 16 12 18 2 arch/arm/vfp/vfpmodule.c:520 (set (reg/v:SI 2 r2 [orig:142 cpu ] [142])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16394 ] [140])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 18 16 17 2 arch/arm/vfp/vfpmodule.c:526 (set (reg/f:SI 1 r1 [150])
        (plus:SI (reg/v/f:SI 0 r0 [orig:143 thread ] [143])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 17 18 19 2 arch/arm/vfp/vfpmodule.c:526 (set (reg/f:SI 3 r3 [149])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 19 17 20 2 arch/arm/vfp/vfpmodule.c:526 (set (reg/f:SI 12 ip [151])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [149])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [149])) [0 vfp_current_hw_state S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
            (nil))))

(insn 20 19 21 2 arch/arm/vfp/vfpmodule.c:526 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 12 ip [151])
            (reg/f:SI 1 r1 [150]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 2 arch/arm/vfp/vfpmodule.c:526 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [15.0%]  (fallthru)
;; Succ edge  4 [85.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	 24 [cc]

;; Pred edge  2 [15.0%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 3 arch/arm/vfp/vfpmodule.c:527 (parallel [
            (set (reg/v:SI 1 r1 [orig:141 __v ] [141])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6072957))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 24 23 25 3 arch/arm/vfp/vfpmodule.c:529 (set (reg:SI 1 r1 [152])
        (and:SI (reg/v:SI 1 r1 [orig:141 __v ] [141])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 25 24 27 3 arch/arm/vfp/vfpmodule.c:529 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 1 r1 [152])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6073201)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 27 25 28 3 arch/arm/vfp/vfpmodule.c:535 (set (reg:SI 1 r1 [154])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 28 27 29 3 arch/arm/vfp/vfpmodule.c:535 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:142 cpu ] [142])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [149])) [0 vfp_current_hw_state S4 A32])
        (reg:SI 1 r1 [154])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [85.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 29 28 30 4 21 "" [1 uses])

(note 30 29 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 35 30 45 4 NOTE_INSN_DELETED)

(note 45 35 31 4 NOTE_INSN_DELETED)

(insn 31 45 32 4 arch/arm/vfp/vfpmodule.c:546 (set (reg:SI 3 r3 [155])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 32 31 33 4 arch/arm/vfp/vfpmodule.c:546 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:143 thread ] [143])
                (const_int 704 [0x2c0])) [0 <variable>.vfpstate.hard.cpu+0 S4 A64])
        (reg:SI 3 r3 [155])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(insn 33 32 67 4 arch/arm/vfp/vfpmodule.c:548 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6075632)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 67 33 60 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 60 67 61 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 61 60 37 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
        (and:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 37 61 38 4 arch/arm/vfp/vfpmodule.c:548 (set (reg:SI 2 r2 [orig:157 <variable>.preempt_count ] [157])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 38 37 39 4 arch/arm/vfp/vfpmodule.c:548 (set (reg:SI 2 r2 [158])
        (plus:SI (reg:SI 2 r2 [orig:157 <variable>.preempt_count ] [157])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 39 38 40 4 arch/arm/vfp/vfpmodule.c:548 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [158])) 167 {*arm_movsi_insn} (nil))

(insn 40 39 44 4 arch/arm/vfp/vfpmodule.c:548 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6075632)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 44 40 46 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:134 D.16427 ] [134])
        (mem/v:SI (reg/f:SI 3 r3 [orig:137 D.16409 ] [137]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 46 44 47 4 arch/arm/vfp/vfpmodule.c:548 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:134 D.16427 ] [134])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 47 46 48 4 arch/arm/vfp/vfpmodule.c:548 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 56)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [0.0%]  (fallthru)
(note 48 47 49 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn/j 49 48 50 5 arch/arm/vfp/vfpmodule.c:548 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("preempt_schedule") [flags 0x41] <function_decl 0x10aa7a00 preempt_schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 50 49 56)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 56 50 59 6 23 "" [1 uses])

(note 59 56 64 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 64 59 65 NOTE_INSN_DELETED)

(note 65 64 0 NOTE_INSN_DELETED)


;; Function vfp_sync_hwstate (vfp_sync_hwstate)[0:840]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a2(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r140,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a12(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a2(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r140,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a12(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 48(l0): point = 1
   Insn 46(l0): point = 4
   Insn 45(l0): point = 6
   Insn 43(l0): point = 8
   Insn 39(l0): point = 10
   Insn 38(l0): point = 12
   Insn 37(l0): point = 14
   Insn 36(l0): point = 16
   Insn 60(l0): point = 18
   Insn 59(l0): point = 20
   Insn 32(l0): point = 22
   Insn 29(l0): point = 25
   Insn 28(l0): point = 27
   Insn 27(l0): point = 29
   Insn 26(l0): point = 31
   Insn 25(l0): point = 33
   Insn 24(l0): point = 35
   Insn 23(l0): point = 37
   Insn 21(l0): point = 40
   Insn 20(l0): point = 42
   Insn 18(l0): point = 44
   Insn 14(l0): point = 46
   Insn 19(l0): point = 48
   Insn 17(l0): point = 50
   Insn 12(l0): point = 52
   Insn 11(l0): point = 54
   Insn 10(l0): point = 56
   Insn 9(l0): point = 58
   Insn 62(l0): point = 60
   Insn 2(l0): point = 62
   Insn 61(l0): point = 64
 a0(r134): [7..8]
 a1(r137): [9..20]
 a2(r155): [13..14]
 a3(r154): [15..16]
 a4(r141): [26..37]
 a5(r142): [30..35]
 a6(r143): [32..44]
 a7(r152): [43..48]
 a8(r148): [45..46]
 a9(r151): [45..50]
 a10(r144): [49..62]
 a11(r140): [51..64]
 a12(r147): [55..56]
 a13(r146): [57..58]
Compressing live ranges: from 67 to 27 - 40%
Ranges after the compression:
 a0(r134): [0..1]
 a1(r137): [2..7]
 a2(r155): [3..4]
 a3(r154): [5..6]
 a4(r141): [8..12]
 a5(r142): [9..11]
 a6(r143): [10..14]
 a7(r152): [13..17]
 a8(r148): [15..16]
 a9(r151): [15..19]
 a10(r144): [18..25]
 a11(r140): [20..26]
 a12(r147): [21..22]
 a13(r146): [23..24]
+++Allocating 104 bytes for conflict table (uncompressed size 112)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r137,l0) conflicts: a2(r155,l0) a3(r154,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r155,l0) conflicts: a1(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r154,l0) conflicts: a1(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r141,l0) conflicts: a5(r142,l0) a6(r143,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r142,l0) conflicts: a4(r141,l0) a6(r143,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a6(r143,l0) conflicts: a4(r141,l0) a5(r142,l0) a7(r152,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r152,l0) conflicts: a6(r143,l0) a8(r148,l0) a9(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r148,l0) conflicts: a7(r152,l0) a9(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r151,l0) conflicts: a7(r152,l0) a8(r148,l0) a10(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r144,l0) conflicts: a9(r151,l0) a11(r140,l0) a12(r147,l0) a13(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r140,l0) conflicts: a10(r144,l0) a12(r147,l0) a13(r146,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a12(r147,l0) conflicts: a10(r144,l0) a11(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r146,l0) conflicts: a10(r144,l0) a11(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a2(r155)<->a3(r154)@125:shuffle
  cp1:a12(r147)<->a13(r146)@125:shuffle
  cp2:a7(r152)<->a10(r144)@125:shuffle
  regions=1, blocks=7, points=27
    allocnos=14, copies=3, conflicts=2, ranges=14

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r134 1r137 2r155 3r154 4r141 5r142 6r143 7r152 8r148 9r151 10r144 11r140 12r147 13r146
    modified regnos: 134 137 140 141 142 143 144 146 147 148 151 152 154 155
    border:
    Pressure: GENERAL_REGS=4
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
      Pushing a13(r146,l0)
      Pushing a12(r147,l0)
      Pushing a10(r144,l0)
      Pushing a9(r151,l0)
      Pushing a8(r148,l0)
      Pushing a7(r152,l0)
      Pushing a3(r154,l0)
      Pushing a2(r155,l0)
      Pushing a0(r134,l0)
      Pushing a6(r143,l0)
      Pushing a5(r142,l0)
      Pushing a1(r137,l0)
      Pushing a11(r140,l0)
      Pushing a4(r141,l0)
      Popping a4(r141,l0)  -- assign reg 4
      Popping a11(r140,l0)  -- assign reg 3
      Popping a1(r137,l0)  -- assign reg 3
      Popping a5(r142,l0)  -- assign reg 1
      Popping a6(r143,l0)  -- assign reg 0
      Popping a0(r134,l0)  -- assign reg 3
      Popping a2(r155,l0)  -- assign reg 2
      Popping a3(r154,l0)  -- assign reg 2
      Popping a7(r152,l0)  -- assign reg 3
      Popping a8(r148,l0)  -- assign reg 2
      Popping a9(r151,l0)  -- assign reg 1
      Popping a10(r144,l0)  -- assign reg 0
      Popping a12(r147,l0)  -- assign reg 2
      Popping a13(r146,l0)  -- assign reg 2
Disposition:
    0:r134 l0     3    1:r137 l0     3   11:r140 l0     3    4:r141 l0     4
    5:r142 l0     1    6:r143 l0     0   10:r144 l0     0   13:r146 l0     2
   12:r147 l0     2    8:r148 l0     2    9:r151 l0     1    7:r152 l0     3
    3:r154 l0     2    2:r155 l0     2
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=61, live_throughout: 0, 13, 14, dead_or_set: 140
insn=2, live_throughout: 13, 14, 140, dead_or_set: 0, 144
insn=62, live_throughout: 13, 14, 144, dead_or_set: 140
insn=9, live_throughout: 13, 14, 140, 144, dead_or_set: 146
insn=10, live_throughout: 13, 14, 140, 144, dead_or_set: 146, 147
insn=11, live_throughout: 13, 14, 140, 144, dead_or_set: 147
insn=12, live_throughout: 13, 14, 140, 144, dead_or_set: 
insn=17, live_throughout: 13, 14, 144, dead_or_set: 140, 151
insn=19, live_throughout: 13, 14, 151, dead_or_set: 144, 152
insn=14, live_throughout: 13, 14, 151, 152, dead_or_set: 148
insn=18, live_throughout: 13, 14, 152, dead_or_set: 143, 148, 151
insn=20, live_throughout: 13, 14, 143, dead_or_set: 152
insn=21, live_throughout: 13, 14, 143, dead_or_set: 
insn=23, live_throughout: 13, 143, dead_or_set: 141
insn=24, live_throughout: 13, 141, 143, dead_or_set: 142
insn=25, live_throughout: 13, 141, 142, 143, dead_or_set: 
insn=26, live_throughout: 13, 141, 142, dead_or_set: 0, 143
insn=27, live_throughout: 0, 13, 141, dead_or_set: 1, 142
insn=28, live_throughout: 13, 141, dead_or_set: 0, 1, 14
insn=29, live_throughout: 13, 14, dead_or_set: 141
insn=30, live_throughout: 13, 14, dead_or_set: 
insn=32, live_throughout: 13, 14, dead_or_set: 
insn=59, live_throughout: 13, 14, dead_or_set: 137
insn=60, live_throughout: 13, 14, dead_or_set: 137
insn=36, live_throughout: 13, 14, 137, dead_or_set: 154
insn=37, live_throughout: 13, 14, 137, dead_or_set: 154, 155
insn=38, live_throughout: 13, 14, 137, dead_or_set: 155
insn=39, live_throughout: 13, 14, 137, dead_or_set: 
insn=43, live_throughout: 13, 14, dead_or_set: 134, 137
insn=45, live_throughout: 13, 14, dead_or_set: 134
insn=46, live_throughout: 13, 14, dead_or_set: 
insn=48, live_throughout: 13, 14, dead_or_set: 
insn=55, live_throughout: 13, 14, dead_or_set: 
init_insns for 146: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 14 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 36 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 38 (nil))
changing reg in insn 43
changing reg in insn 45
changing reg in insn 60
changing reg in insn 59
changing reg in insn 60
changing reg in insn 43
changing reg in insn 38
changing reg in insn 36
changing reg in insn 37
changing reg in insn 36
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 17
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
changing reg in insn 9
changing reg in insn 23
changing reg in insn 29
changing reg in insn 24
changing reg in insn 24
changing reg in insn 27
changing reg in insn 25
changing reg in insn 18
changing reg in insn 26
changing reg in insn 20
changing reg in insn 2
changing reg in insn 19
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
Spilling for insn 61.
Using reg 2 for reload 0
Spilling for insn 11.
Spilling for insn 59.
Using reg 2 for reload 0
Spilling for insn 38.

Reloads for insn # 61
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 11
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])

Reloads for insn # 59
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 38
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
deleting insn with uid = 2.
deleting insn with uid = 26.
deleting insn with uid = 27.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 48.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 11 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


vfp_sync_hwstate

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,3u} r1={5d,3u,1d} r2={10d,7u} r3={9d,10u,4d} r4={1d,2u} r12={3d} r13={1d,10u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 305{262d,38u,5e} in 30{28 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 3 65 2 NOTE_INSN_DELETED)

(insn 65 7 61 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 61 65 62 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 62 61 9 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
        (and:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 9 62 10 2 arch/arm/vfp/vfpmodule.c:498 (set (reg:SI 2 r2 [orig:146 <variable>.preempt_count ] [146])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 10 9 11 2 arch/arm/vfp/vfpmodule.c:498 (set (reg:SI 2 r2 [147])
        (plus:SI (reg:SI 2 r2 [orig:146 <variable>.preempt_count ] [146])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpmodule.c:498 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [147])) 167 {*arm_movsi_insn} (nil))

(insn 12 11 17 2 arch/arm/vfp/vfpmodule.c:498 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6069251)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 17 12 19 2 arch/arm/vfp/vfpmodule.c:504 (set (reg:SI 1 r1 [orig:151 <variable>.cpu ] [151])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:140 D.16440 ] [140])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 19 17 14 2 arch/arm/vfp/vfpmodule.c:504 (set (reg/f:SI 3 r3 [152])
        (plus:SI (reg/v/f:SI 0 r0 [orig:144 thread ] [144])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 14 19 18 2 arch/arm/vfp/vfpmodule.c:504 (set (reg/f:SI 2 r2 [148])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 18 14 20 2 arch/arm/vfp/vfpmodule.c:504 (set (reg/f:SI 0 r0 [orig:143 D.16148 ] [143])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:151 <variable>.cpu ] [151])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [148])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [orig:151 <variable>.cpu ] [151])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
        (nil)))

(insn 20 18 21 2 arch/arm/vfp/vfpmodule.c:504 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:143 D.16148 ] [143])
            (reg/f:SI 3 r3 [152]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 2 arch/arm/vfp/vfpmodule.c:504 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9328 [0x2470])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  3 [6.7%]  (fallthru)
;; Succ edge  4 [93.3%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [6.7%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 3 arch/arm/vfp/vfpmodule.c:505 (parallel [
            (set (reg/v:SI 4 r4 [orig:141 __v ] [141])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6070141))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 24 23 25 3 arch/arm/vfp/vfpmodule.c:510 (set (reg:SI 1 r1 [orig:142 D.16152 ] [142])
        (ior:SI (reg/v:SI 4 r4 [orig:141 __v ] [141])
            (const_int 1073741824 [0x40000000]))) 89 {*arm_iorsi3} (nil))

(insn 25 24 28 3 arch/arm/vfp/vfpmodule.c:510 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 1 r1 [orig:142 D.16152 ] [142])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6070769)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(call_insn 28 25 29 3 arch/arm/vfp/vfpmodule.c:511 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 29 28 30 3 arch/arm/vfp/vfpmodule.c:512 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg/v:SI 4 r4 [orig:141 __v ] [141])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6071025)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [93.3%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 30 29 31 4 27 "" [1 uses])

(note 31 30 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 34 31 44 4 NOTE_INSN_DELETED)

(note 44 34 32 4 NOTE_INSN_DELETED)

(insn 32 44 66 4 arch/arm/vfp/vfpmodule.c:515 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6071408)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 66 32 59 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 59 66 60 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 60 59 36 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
        (and:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 36 60 37 4 arch/arm/vfp/vfpmodule.c:515 (set (reg:SI 2 r2 [orig:154 <variable>.preempt_count ] [154])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 37 36 38 4 arch/arm/vfp/vfpmodule.c:515 (set (reg:SI 2 r2 [155])
        (plus:SI (reg:SI 2 r2 [orig:154 <variable>.preempt_count ] [154])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 38 37 39 4 arch/arm/vfp/vfpmodule.c:515 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [155])) 167 {*arm_movsi_insn} (nil))

(insn 39 38 43 4 arch/arm/vfp/vfpmodule.c:515 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6071408)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 43 39 45 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:134 D.16473 ] [134])
        (mem/v:SI (reg/f:SI 3 r3 [orig:137 D.16455 ] [137]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 45 43 46 4 arch/arm/vfp/vfpmodule.c:515 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:134 D.16473 ] [134])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 46 45 47 4 arch/arm/vfp/vfpmodule.c:515 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [0.0%]  (fallthru)
(note 47 46 48 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn/j 48 47 49 5 arch/arm/vfp/vfpmodule.c:515 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("preempt_schedule") [flags 0x41] <function_decl 0x10aa7a00 preempt_schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 49 48 55)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 55 49 58 6 29 "" [1 uses])

(note 58 55 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 63 58 64 NOTE_INSN_DELETED)

(note 64 63 0 NOTE_INSN_DELETED)


;; Function vfp_notifier (vfp_notifier)[0:829]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 191.
verify found no changes in insn with uid = 191.
deleting insn with uid = 38.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 29 count 36 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 29 count 36 (  1.9)

Pass 0 for finding allocno costs

    a4 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a1(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a4(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a12(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r150,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a16(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a22(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a24(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r147,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a26(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a31(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a33(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r200: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a1(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a4(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a7(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a12(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r150,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a16(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a22(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a24(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r147,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a26(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a31(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a33(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 170(l0): point = 0
   Insn 164(l0): point = 2
   Insn 156(l0): point = 5
   Insn 155(l0): point = 7
   Insn 154(l0): point = 9
   Insn 153(l0): point = 11
   Insn 149(l0): point = 13
   Insn 148(l0): point = 15
   Insn 181(l0): point = 17
   Insn 180(l0): point = 19
   Insn 178(l0): point = 22
   Insn 140(l0): point = 24
   Insn 138(l0): point = 27
   Insn 137(l0): point = 29
   Insn 135(l0): point = 31
   Insn 131(l0): point = 33
   Insn 130(l0): point = 35
   Insn 129(l0): point = 37
   Insn 128(l0): point = 39
   Insn 183(l0): point = 41
   Insn 182(l0): point = 43
   Insn 124(l0): point = 45
   Insn 121(l0): point = 48
   Insn 120(l0): point = 50
   Insn 117(l0): point = 53
   Insn 116(l0): point = 55
   Insn 115(l0): point = 57
   Insn 113(l0): point = 59
   Insn 114(l0): point = 61
   Insn 112(l0): point = 63
   Insn 108(l0): point = 65
   Insn 107(l0): point = 67
   Insn 106(l0): point = 69
   Insn 105(l0): point = 71
   Insn 185(l0): point = 73
   Insn 184(l0): point = 75
   Insn 176(l0): point = 78
   Insn 97(l0): point = 80
   Insn 95(l0): point = 83
   Insn 94(l0): point = 85
   Insn 92(l0): point = 87
   Insn 88(l0): point = 89
   Insn 87(l0): point = 91
   Insn 86(l0): point = 93
   Insn 85(l0): point = 95
   Insn 187(l0): point = 97
   Insn 186(l0): point = 99
   Insn 81(l0): point = 101
   Insn 80(l0): point = 103
   Insn 79(l0): point = 105
   Insn 78(l0): point = 107
   Insn 75(l0): point = 110
   Insn 71(l0): point = 113
   Insn 70(l0): point = 115
   Insn 69(l0): point = 117
   Insn 68(l0): point = 119
   Insn 67(l0): point = 121
   Insn 63(l0): point = 123
   Insn 62(l0): point = 125
   Insn 61(l0): point = 127
   Insn 56(l0): point = 129
   Insn 60(l0): point = 131
   Insn 55(l0): point = 133
   Insn 54(l0): point = 135
   Insn 53(l0): point = 137
   Insn 189(l0): point = 139
   Insn 188(l0): point = 141
   Insn 52(l0): point = 143
   Insn 50(l0): point = 145
   Insn 51(l0): point = 147
   Insn 49(l0): point = 149
   Insn 174(l0): point = 152
   Insn 44(l0): point = 154
   Insn 43(l0): point = 156
   Insn 40(l0): point = 159
   Insn 191(l0): point = 161
   Insn 39(l0): point = 163
   Insn 36(l0): point = 166
   Insn 35(l0): point = 168
   Insn 34(l0): point = 170
   Insn 31(l0): point = 173
   Insn 30(l0): point = 175
   Insn 28(l0): point = 177
   Insn 27(l0): point = 179
   Insn 26(l0): point = 181
   Insn 24(l0): point = 184
   Insn 23(l0): point = 186
   Insn 22(l0): point = 188
   Insn 21(l0): point = 190
   Insn 19(l0): point = 193
   Insn 16(l0): point = 195
   Insn 18(l0): point = 197
   Insn 15(l0): point = 199
   Insn 9(l0): point = 202
   Insn 4(l0): point = 204
 a0(r133): [10..19]
 a1(r157): [171..204] [130..151] [62..77] [12..21]
 a2(r142): [30..31]
 a3(r139): [32..43]
 a4(r200): [36..37]
 a5(r199): [38..39]
 a6(r193): [49..59]
 a7(r135): [49..63]
 a8(r197): [49..50]
 a9(r194): [56..61]
 a10(r195): [56..57]
 a11(r136): [64..75]
 a12(r190): [68..69]
 a13(r189): [70..71]
 a14(r153): [86..87]
 a15(r150): [88..99]
 a16(r185): [92..93]
 a17(r184): [94..95]
 a18(r182): [104..105]
 a19(r146): [106..107]
 a20(r178): [111..119]
 a21(r145): [111..121]
 a22(r172): [111..133]
 a23(r144): [116..149]
 a24(r179): [116..117]
 a25(r147): [122..141]
 a26(r175): [126..127]
 a27(r174): [128..131]
 a28(r171): [136..137]
 a29(r170): [155..156]
 a30(r155): [157..199]
 a31(r168): [160..161]
 a32(r156): [160..195]
 a33(r169): [160..163]
 a34(r167): [169..170]
 a35(r166): [174..175]
 a36(r164): [176..190]
 a37(r158): [182..188]
Compressing live ranges: from 207 to 74 - 35%
Ranges after the compression:
 a0(r133): [0..2]
 a1(r157): [64..73] [48..55] [18..26] [1..3]
 a2(r142): [4..5]
 a3(r139): [6..11]
 a4(r200): [7..8]
 a5(r199): [9..10]
 a6(r193): [12..16]
 a7(r135): [12..19]
 a8(r197): [12..13]
 a9(r194): [14..17]
 a10(r195): [14..15]
 a11(r136): [20..25]
 a12(r190): [21..22]
 a13(r189): [23..24]
 a14(r153): [27..28]
 a15(r150): [29..34]
 a16(r185): [30..31]
 a17(r184): [32..33]
 a18(r182): [35..36]
 a19(r146): [37..38]
 a20(r178): [39..42]
 a21(r145): [39..43]
 a22(r172): [39..50]
 a23(r144): [40..54]
 a24(r179): [40..41]
 a25(r147): [44..53]
 a26(r175): [45..46]
 a27(r174): [47..49]
 a28(r171): [51..52]
 a29(r170): [56..57]
 a30(r155): [58..72]
 a31(r168): [59..60]
 a32(r156): [59..71]
 a33(r169): [59..61]
 a34(r167): [62..63]
 a35(r166): [65..66]
 a36(r164): [67..70]
 a37(r158): [68..69]
+++Allocating 304 bytes for conflict table (uncompressed size 304)
;; a0(r133,l0) conflicts: a1(r157,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r157,l0) conflicts: a0(r133,l0) a7(r135,l0) a11(r136,l0) a12(r190,l0) a13(r189,l0) a22(r172,l0) a23(r144,l0) a25(r147,l0) a27(r174,l0) a28(r171,l0) a30(r155,l0) a32(r156,l0) a35(r166,l0) a36(r164,l0) a37(r158,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r142,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r139,l0) conflicts: a4(r200,l0) a5(r199,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r200,l0) conflicts: a3(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r199,l0) conflicts: a3(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r193,l0) conflicts: a8(r197,l0) a7(r135,l0) a10(r195,l0) a9(r194,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r135,l0) conflicts: a1(r157,l0) a8(r197,l0) a6(r193,l0) a10(r195,l0) a9(r194,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r197,l0) conflicts: a6(r193,l0) a7(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r194,l0) conflicts: a6(r193,l0) a7(r135,l0) a10(r195,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r195,l0) conflicts: a6(r193,l0) a7(r135,l0) a9(r194,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r136,l0) conflicts: a1(r157,l0) a12(r190,l0) a13(r189,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r190,l0) conflicts: a1(r157,l0) a11(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r189,l0) conflicts: a1(r157,l0) a11(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r153,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r150,l0) conflicts: a16(r185,l0) a17(r184,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r185,l0) conflicts: a15(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r184,l0) conflicts: a15(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r182,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r146,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r178,l0) conflicts: a21(r145,l0) a22(r172,l0) a24(r179,l0) a23(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r145,l0) conflicts: a20(r178,l0) a22(r172,l0) a24(r179,l0) a23(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r172,l0) conflicts: a1(r157,l0) a20(r178,l0) a21(r145,l0) a24(r179,l0) a23(r144,l0) a25(r147,l0) a26(r175,l0) a27(r174,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r144,l0) conflicts: a1(r157,l0) a20(r178,l0) a21(r145,l0) a22(r172,l0) a24(r179,l0) a25(r147,l0) a26(r175,l0) a27(r174,l0) a28(r171,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a24(r179,l0) conflicts: a20(r178,l0) a21(r145,l0) a22(r172,l0) a23(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r147,l0) conflicts: a1(r157,l0) a22(r172,l0) a23(r144,l0) a26(r175,l0) a27(r174,l0) a28(r171,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r175,l0) conflicts: a22(r172,l0) a23(r144,l0) a25(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r174,l0) conflicts: a1(r157,l0) a22(r172,l0) a23(r144,l0) a25(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r171,l0) conflicts: a1(r157,l0) a23(r144,l0) a25(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r170,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r155,l0) conflicts: a1(r157,l0) a31(r168,l0) a33(r169,l0) a32(r156,l0) a34(r167,l0) a35(r166,l0) a36(r164,l0) a37(r158,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a31(r168,l0) conflicts: a30(r155,l0) a33(r169,l0) a32(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r156,l0) conflicts: a1(r157,l0) a30(r155,l0) a31(r168,l0) a33(r169,l0) a34(r167,l0) a35(r166,l0) a36(r164,l0) a37(r158,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a33(r169,l0) conflicts: a30(r155,l0) a31(r168,l0) a32(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r167,l0) conflicts: a30(r155,l0) a32(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a35(r166,l0) conflicts: a1(r157,l0) a30(r155,l0) a32(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a36(r164,l0) conflicts: a1(r157,l0) a30(r155,l0) a32(r156,l0) a37(r158,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a37(r158,l0) conflicts: a1(r157,l0) a30(r155,l0) a32(r156,l0) a36(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a4(r200)<->a5(r199)@125:shuffle
  cp1:a12(r190)<->a13(r189)@125:shuffle
  cp2:a1(r157)<->a9(r194)@125:shuffle
  cp3:a18(r182)<->a19(r146)@125:shuffle
  cp4:a16(r185)<->a17(r184)@125:shuffle
  cp5:a26(r175)<->a27(r174)@125:shuffle
  cp6:a29(r170)<->a30(r155)@125:shuffle
  regions=1, blocks=19, points=74
    allocnos=38, copies=7, conflicts=5, ranges=41

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r133 1r157 2r142 3r139 4r200 5r199 6r193 7r135 8r197 9r194 10r195 11r136 12r190 13r189 14r153 15r150 16r185 17r184 18r182 19r146 20r178 21r145 22r172 23r144 24r179 25r147 26r175 27r174 28r171 29r170 30r155 31r168 32r156 33r169 34r167 35r166 36r164 37r158
    modified regnos: 133 135 136 139 142 144 145 146 147 150 153 155 156 157 158 164 166 167 168 169 170 171 172 174 175 178 179 182 184 185 189 190 193 194 195 197 199 200
    border:
    Pressure: GENERAL_REGS=7
    Reg 133 of GENERAL_REGS has 2 regs less
    Reg 157 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 200 of GENERAL_REGS has 1 regs less
    Reg 199 of GENERAL_REGS has 1 regs less
    Reg 193 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 197 of GENERAL_REGS has 1 regs less
    Reg 194 of GENERAL_REGS has 1 regs less
    Reg 195 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 190 of GENERAL_REGS has 1 regs less
    Reg 189 of GENERAL_REGS has 1 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 185 of GENERAL_REGS has 1 regs less
    Reg 184 of GENERAL_REGS has 1 regs less
    Reg 182 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 172 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 179 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 175 of GENERAL_REGS has 1 regs less
    Reg 174 of GENERAL_REGS has 1 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 3 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 3 regs less
    Reg 169 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 3 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
      Pushing a35(r166,l0)
      Pushing a34(r167,l0)
      Pushing a33(r169,l0)
      Pushing a31(r168,l0)
      Pushing a29(r170,l0)
      Pushing a28(r171,l0)
      Pushing a27(r174,l0)
      Pushing a26(r175,l0)
      Pushing a24(r179,l0)
      Pushing a19(r146,l0)
      Pushing a18(r182,l0)
      Pushing a17(r184,l0)
      Pushing a16(r185,l0)
      Pushing a14(r153,l0)
      Pushing a13(r189,l0)
      Pushing a12(r190,l0)
      Pushing a10(r195,l0)
      Pushing a9(r194,l0)
      Pushing a8(r197,l0)
      Pushing a5(r199,l0)
      Pushing a4(r200,l0)
      Pushing a2(r142,l0)
      Pushing a37(r158,l0)
      Pushing a22(r172,l0)
      Pushing a21(r145,l0)
      Pushing a20(r178,l0)
      Pushing a7(r135,l0)
      Pushing a6(r193,l0)
      Pushing a25(r147,l0)
      Pushing a15(r150,l0)
      Pushing a11(r136,l0)
      Pushing a3(r139,l0)
      Pushing a0(r133,l0)
      Pushing a36(r164,l0)
      Pushing a23(r144,l0)
      Pushing a30(r155,l0)
      Pushing a32(r156,l0)
      Pushing a1(r157,l0)
      Popping a1(r157,l0)  -- assign reg 4
      Popping a32(r156,l0)  -- assign reg 5
      Popping a30(r155,l0)  -- assign reg 6
      Popping a23(r144,l0)  -- assign reg 5
      Popping a36(r164,l0)  -- assign reg 7
      Popping a0(r133,l0)  -- assign reg 5
      Popping a3(r139,l0)  -- assign reg 3
      Popping a11(r136,l0)  -- assign reg 3
      Popping a15(r150,l0)  -- assign reg 3
      Popping a25(r147,l0)  -- assign reg 3
      Popping a6(r193,l0)  -- assign reg 3
      Popping a7(r135,l0)  -- assign reg 2
      Popping a20(r178,l0)  -- assign reg 3
      Popping a21(r145,l0)  -- assign reg 2
      Popping a22(r172,l0)  -- assign reg 1
      Popping a37(r158,l0)  -- assign reg 0
      Popping a2(r142,l0)  -- assign reg 3
      Popping a4(r200,l0)  -- assign reg 2
      Popping a5(r199,l0)  -- assign reg 2
      Popping a8(r197,l0)  -- assign reg 1
      Popping a9(r194,l0)  -- assign reg 4
      Popping a10(r195,l0)  -- assign reg 1
      Popping a12(r190,l0)  -- assign reg 2
      Popping a13(r189,l0)  -- assign reg 2
      Popping a14(r153,l0)  -- assign reg 3
      Popping a16(r185,l0)  -- assign reg 2
      Popping a17(r184,l0)  -- assign reg 2
      Popping a18(r182,l0)  -- assign reg 3
      Popping a19(r146,l0)  -- assign reg 3
      Popping a24(r179,l0)  -- assign reg 0
      Popping a26(r175,l0)  -- assign reg 2
      Popping a27(r174,l0)  -- assign reg 2
      Popping a28(r171,l0)  -- assign reg 2
      Popping a29(r170,l0)  -- assign reg 6
      Popping a31(r168,l0)  -- assign reg 3
      Popping a33(r169,l0)  -- assign reg 2
      Popping a34(r167,l0)  -- assign reg 3
      Popping a35(r166,l0)  -- assign reg 3
Disposition:
    0:r133 l0     5    7:r135 l0     2   11:r136 l0     3    3:r139 l0     3
    2:r142 l0     3   23:r144 l0     5   21:r145 l0     2   19:r146 l0     3
   25:r147 l0     3   15:r150 l0     3   14:r153 l0     3   30:r155 l0     6
   32:r156 l0     5    1:r157 l0     4   37:r158 l0     0   36:r164 l0     7
   35:r166 l0     3   34:r167 l0     3   31:r168 l0     3   33:r169 l0     2
   29:r170 l0     6   28:r171 l0     2   22:r172 l0     1   27:r174 l0     2
   26:r175 l0     2   20:r178 l0     3   24:r179 l0     0   18:r182 l0     3
   17:r184 l0     2   16:r185 l0     2   13:r189 l0     2   12:r190 l0     2
    6:r193 l0     3    9:r194 l0     4   10:r195 l0     1    8:r197 l0     1
    5:r199 l0     2    4:r200 l0     2
New iteration of spill/restore move
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=4, live_throughout: 1, 13, 14, dead_or_set: 2, 157
insn=9, live_throughout: 13, 14, 157, dead_or_set: 1
insn=10, live_throughout: 13, 14, 157, dead_or_set: 
insn=11, live_throughout: 13, 14, 157, dead_or_set: 
insn=13, live_throughout: 13, 14, 157, dead_or_set: 
insn=15, live_throughout: 13, 14, 157, dead_or_set: 155
insn=18, live_throughout: 13, 14, 155, 157, dead_or_set: 
insn=16, live_throughout: 13, 14, 24, 155, 157, dead_or_set: 156
insn=19, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 
insn=21, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 164
insn=22, live_throughout: 13, 14, 155, 156, 157, 164, dead_or_set: 158
insn=23, live_throughout: 13, 14, 155, 156, 157, 158, 164, dead_or_set: 
insn=24, live_throughout: 13, 14, 155, 156, 157, 158, 164, dead_or_set: 
insn=26, live_throughout: 13, 155, 156, 157, 164, dead_or_set: 0, 158
insn=27, live_throughout: 0, 13, 155, 156, 157, 164, dead_or_set: 1
insn=28, live_throughout: 13, 155, 156, 157, 164, dead_or_set: 0, 1, 14
insn=30, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 164, 166
insn=31, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 166
insn=32, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 
insn=34, live_throughout: 13, 14, 155, 156, dead_or_set: 157, 167
insn=35, live_throughout: 13, 14, 155, 156, dead_or_set: 167
insn=36, live_throughout: 13, 14, 155, 156, dead_or_set: 
insn=39, live_throughout: 13, 14, 155, 156, dead_or_set: 169
insn=191, live_throughout: 13, 14, 155, 156, 169, dead_or_set: 168
insn=40, live_throughout: 13, 14, 155, dead_or_set: 156, 168, 169
insn=41, live_throughout: 13, 14, 155, dead_or_set: 
insn=43, live_throughout: 13, 14, dead_or_set: 155, 170
insn=44, live_throughout: 13, 14, dead_or_set: 170
insn=174, live_throughout: 13, 14, dead_or_set: 
insn=47, live_throughout: 13, 157, dead_or_set: 
insn=49, live_throughout: 13, 157, dead_or_set: 144
insn=51, live_throughout: 13, 144, 157, dead_or_set: 1
insn=50, live_throughout: 1, 13, 144, 157, dead_or_set: 0
insn=52, live_throughout: 13, 144, 157, dead_or_set: 0, 1, 14
insn=188, live_throughout: 13, 14, 144, 157, dead_or_set: 147
insn=189, live_throughout: 13, 14, 144, 157, dead_or_set: 147
insn=53, live_throughout: 13, 14, 144, 147, 157, dead_or_set: 171
insn=54, live_throughout: 13, 14, 144, 147, 157, dead_or_set: 171
insn=55, live_throughout: 13, 14, 144, 147, 157, dead_or_set: 172
insn=60, live_throughout: 13, 14, 144, 147, 157, 172, dead_or_set: 174
insn=56, live_throughout: 13, 14, 144, 147, 172, 174, dead_or_set: 157
insn=61, live_throughout: 13, 14, 144, 147, 172, dead_or_set: 174, 175
insn=62, live_throughout: 13, 14, 144, 147, 172, dead_or_set: 175
insn=63, live_throughout: 13, 14, 144, 147, 172, dead_or_set: 
insn=67, live_throughout: 13, 14, 144, 172, dead_or_set: 145, 147
insn=68, live_throughout: 13, 14, 144, 145, 172, dead_or_set: 178
insn=69, live_throughout: 13, 14, 144, 145, 172, 178, dead_or_set: 179
insn=70, live_throughout: 13, 14, 145, 172, 178, dead_or_set: 144, 179
insn=71, live_throughout: 13, 14, 145, 172, 178, dead_or_set: 
insn=75, live_throughout: 13, 14, dead_or_set: 145, 172, 178
insn=76, live_throughout: 13, 14, dead_or_set: 
insn=78, live_throughout: 13, 14, dead_or_set: 146
insn=79, live_throughout: 13, 14, dead_or_set: 146, 182
insn=80, live_throughout: 13, 14, dead_or_set: 182
insn=81, live_throughout: 13, 14, dead_or_set: 
insn=186, live_throughout: 13, 14, dead_or_set: 150
insn=187, live_throughout: 13, 14, dead_or_set: 150
insn=85, live_throughout: 13, 14, 150, dead_or_set: 184
insn=86, live_throughout: 13, 14, 150, dead_or_set: 184, 185
insn=87, live_throughout: 13, 14, 150, dead_or_set: 185
insn=88, live_throughout: 13, 14, 150, dead_or_set: 
insn=92, live_throughout: 13, 14, dead_or_set: 150, 153
insn=94, live_throughout: 13, 14, dead_or_set: 153
insn=95, live_throughout: 13, 14, dead_or_set: 
insn=97, live_throughout: 13, dead_or_set: 14
insn=176, live_throughout: 13, 14, dead_or_set: 
insn=100, live_throughout: 13, 14, 157, dead_or_set: 
insn=184, live_throughout: 13, 14, 157, dead_or_set: 136
insn=185, live_throughout: 13, 14, 157, dead_or_set: 136
insn=105, live_throughout: 13, 14, 136, 157, dead_or_set: 189
insn=106, live_throughout: 13, 14, 136, 157, dead_or_set: 189, 190
insn=107, live_throughout: 13, 14, 136, 157, dead_or_set: 190
insn=108, live_throughout: 13, 14, 136, 157, dead_or_set: 
insn=112, live_throughout: 13, 14, 157, dead_or_set: 135, 136
insn=114, live_throughout: 13, 14, 135, dead_or_set: 157, 194
insn=113, live_throughout: 13, 14, 135, 194, dead_or_set: 193
insn=115, live_throughout: 13, 14, 135, 193, 194, dead_or_set: 195
insn=116, live_throughout: 13, 14, 135, 193, dead_or_set: 194, 195
insn=117, live_throughout: 13, 14, 135, 193, dead_or_set: 
insn=120, live_throughout: 13, 14, 135, 193, dead_or_set: 197
insn=121, live_throughout: 13, 14, dead_or_set: 135, 193, 197
insn=122, live_throughout: 13, 14, dead_or_set: 
insn=124, live_throughout: 13, 14, dead_or_set: 
insn=182, live_throughout: 13, 14, dead_or_set: 139
insn=183, live_throughout: 13, 14, dead_or_set: 139
insn=128, live_throughout: 13, 14, 139, dead_or_set: 199
insn=129, live_throughout: 13, 14, 139, dead_or_set: 199, 200
insn=130, live_throughout: 13, 14, 139, dead_or_set: 200
insn=131, live_throughout: 13, 14, 139, dead_or_set: 
insn=135, live_throughout: 13, 14, dead_or_set: 139, 142
insn=137, live_throughout: 13, 14, dead_or_set: 142
insn=138, live_throughout: 13, 14, dead_or_set: 
insn=140, live_throughout: 13, dead_or_set: 14
insn=178, live_throughout: 13, 14, dead_or_set: 
insn=143, live_throughout: 13, 157, dead_or_set: 
insn=180, live_throughout: 13, 157, dead_or_set: 133
insn=181, live_throughout: 13, 157, dead_or_set: 133
insn=148, live_throughout: 13, 133, 157, dead_or_set: 0
insn=149, live_throughout: 13, 133, 157, dead_or_set: 0, 14
insn=153, live_throughout: 13, 133, dead_or_set: 0, 157
insn=154, live_throughout: 0, 13, dead_or_set: 1, 133
insn=155, live_throughout: 0, 1, 13, dead_or_set: 2
insn=156, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=158, live_throughout: 13, 14, dead_or_set: 
insn=164, live_throughout: 13, 14, dead_or_set: 0
insn=170, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 164: (insn_list:REG_DEP_TRUE 21 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 191 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 39 (nil))
init_insns for 171: (insn_list:REG_DEP_TRUE 53 (nil))
init_insns for 172: (insn_list:REG_DEP_TRUE 55 (nil))
init_insns for 175: (insn_list:REG_DEP_TRUE 62 (nil))
init_insns for 178: (insn_list:REG_DEP_TRUE 68 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 69 (nil))
init_insns for 184: (insn_list:REG_DEP_TRUE 85 (nil))
init_insns for 185: (insn_list:REG_DEP_TRUE 87 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 105 (nil))
init_insns for 190: (insn_list:REG_DEP_TRUE 107 (nil))
init_insns for 193: (insn_list:REG_DEP_TRUE 113 (nil))
init_insns for 195: (insn_list:REG_DEP_TRUE 115 (nil))
init_insns for 197: (insn_list:REG_DEP_TRUE 120 (nil))
init_insns for 199: (insn_list:REG_DEP_TRUE 128 (nil))
init_insns for 200: (insn_list:REG_DEP_TRUE 130 (nil))
changing reg in insn 181
changing reg in insn 180
changing reg in insn 181
changing reg in insn 154
changing reg in insn 148
changing reg in insn 112
changing reg in insn 121
changing reg in insn 115
changing reg in insn 115
changing reg in insn 115
changing reg in insn 185
changing reg in insn 184
changing reg in insn 185
changing reg in insn 112
changing reg in insn 107
changing reg in insn 105
changing reg in insn 106
changing reg in insn 105
changing reg in insn 183
changing reg in insn 182
changing reg in insn 183
changing reg in insn 135
changing reg in insn 130
changing reg in insn 128
changing reg in insn 129
changing reg in insn 128
changing reg in insn 135
changing reg in insn 137
changing reg in insn 49
changing reg in insn 70
changing reg in insn 50
changing reg in insn 67
changing reg in insn 75
changing reg in insn 69
changing reg in insn 69
changing reg in insn 69
changing reg in insn 78
changing reg in insn 79
changing reg in insn 189
changing reg in insn 188
changing reg in insn 189
changing reg in insn 67
changing reg in insn 62
changing reg in insn 60
changing reg in insn 61
changing reg in insn 187
changing reg in insn 186
changing reg in insn 187
changing reg in insn 92
changing reg in insn 87
changing reg in insn 85
changing reg in insn 86
changing reg in insn 85
changing reg in insn 92
changing reg in insn 94
changing reg in insn 15
changing reg in insn 18
changing reg in insn 43
changing reg in insn 27
changing reg in insn 16
changing reg in insn 30
changing reg in insn 40
changing reg in insn 35
changing reg in insn 31
changing reg in insn 22
changing reg in insn 30
changing reg in insn 22
changing reg in insn 4
changing reg in insn 153
changing reg in insn 114
changing reg in insn 56
changing reg in insn 54
changing reg in insn 49
changing reg in insn 34
changing reg in insn 16
changing reg in insn 22
changing reg in insn 26
changing reg in insn 23
changing reg in insn 21
changing reg in insn 30
changing reg in insn 22
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 191
changing reg in insn 40
changing reg in insn 39
changing reg in insn 40
changing reg in insn 43
changing reg in insn 44
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 75
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 68
changing reg in insn 75
changing reg in insn 69
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 79
changing reg in insn 80
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 113
changing reg in insn 121
changing reg in insn 115
changing reg in insn 115
changing reg in insn 114
changing reg in insn 116
changing reg in insn 115
changing reg in insn 116
changing reg in insn 120
changing reg in insn 121
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
Spilling for insn 31.
Spilling for insn 40.
Spilling for insn 188.
Using reg 2 for reload 0
Spilling for insn 54.
Spilling for insn 56.
Spilling for insn 62.
Spilling for insn 75.
Spilling for insn 186.
Using reg 2 for reload 0
Spilling for insn 87.
Spilling for insn 184.
Using reg 2 for reload 0
Spilling for insn 107.
Spilling for insn 121.
Spilling for insn 182.
Using reg 2 for reload 0
Spilling for insn 130.
Spilling for insn 180.
Using reg 3 for reload 0

Reloads for insn # 31
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [166])
                                                        (const_int 272 [0x110])) [0 <variable>.hard.cpu+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [166])
                                                        (const_int 272 [0x110])) [0 <variable>.hard.cpu+0 S4 A64])

Reloads for insn # 40
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [168])) [0 vfp_current_hw_state S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [168])) [0 vfp_current_hw_state S4 A32])

Reloads for insn # 188
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 54
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                                                        (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                                                        (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])

Reloads for insn # 56
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                                                        (const_int 692 [0x2b4])) [0 <variable>.vfpstate.hard.fpscr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                                                        (const_int 692 [0x2b4])) [0 <variable>.vfpstate.hard.fpscr+0 S4 A32])

Reloads for insn # 62
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])

Reloads for insn # 75
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [178])) [0 vfp_current_hw_state S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [178])) [0 vfp_current_hw_state S4 A32])

Reloads for insn # 186
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 87
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])

Reloads for insn # 184
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 107
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])

Reloads for insn # 121
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [193])) [0 vfp_current_hw_state S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [193])) [0 vfp_current_hw_state S4 A32])

Reloads for insn # 182
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 130
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])

Reloads for insn # 180
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 3 r3)
deleting insn with uid = 26.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 156.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 29 count 36 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 29 count 36 (  1.9)


vfp_notifier

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,8u} r1={13d,9u} r2={24d,20u,4d} r3={25d,28u,9d} r4={2d,8u} r5={4d,10u,2d} r6={2d,4u} r7={1d,2u} r12={7d} r13={1d,29u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={18d,7u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 918{777d,126u,15e} in 99{93 regular + 6 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 6 5 2 NOTE_INSN_DELETED)

(note 5 3 4 2 NOTE_INSN_FUNCTION_BEG)

(insn 4 5 9 2 arch/arm/vfp/vfpmodule.c:121 (set (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
        (reg:SI 2 r2 [ v ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 9 4 10 2 arch/arm/vfp/vfpmodule.c:128 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 1 r1 [ cmd ])
                        (const_int 3 [0x3]))
                    (mem:SI (plus:SI (mult:SI (reg:SI 1 r1 [ cmd ])
                                (const_int 4 [0x4]))
                            (label_ref 10)) [0 S4 A32])
                    (label_ref 158)))
            (clobber (reg:CC 24 cc))
            (use (label_ref 10))
        ]) 265 {arm_casesi_internal} (insn_list:REG_LABEL_TARGET 158 (nil)))
;; End of basic block 2 -> ( 18 9 13 3 17)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  18 [20.0%] 
;; Succ edge  9 [20.0%] 
;; Succ edge  13 [20.0%] 
;; Succ edge  3 [20.0%] 
;; Succ edge  17 [20.0%] 

;; Insn is not within a basic block
(code_label 10 9 11 38 "" [2 uses])

;; Insn is not within a basic block
(jump_insn 11 10 12 arch/arm/vfp/vfpmodule.c:128 (addr_vec:SI [
            (label_ref:SI 47)
            (label_ref:SI 100)
            (label_ref:SI 13)
            (label_ref:SI 143)
        ]) -1 (nil))

(barrier 12 11 13)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [20.0%] 
(code_label 13 12 14 3 36 "" [1 uses])

(note 14 13 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 14 15 3 NOTE_INSN_DELETED)

(insn 15 17 18 3 arch/arm/vfp/vfpmodule.c:130 (parallel [
            (set (reg/v:SI 6 r6 [orig:155 __v ] [155])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6018545))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 18 15 16 3 arch/arm/vfp/vfpmodule.c:140 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:155 __v ] [155])
                (const_int 1 [0x1])
                (const_int 30 [0x1e]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 16 18 19 3 arch/arm/vfp/vfpmodule.c:133 (set (reg/v:SI 5 r5 [orig:156 cpu ] [156])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 19 16 20 3 arch/arm/vfp/vfpmodule.c:140 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 32)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 4 arch/arm/vfp/vfpmodule.c:140 discrim 1 (set (reg/f:SI 7 r7 [164])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 22 21 23 4 arch/arm/vfp/vfpmodule.c:140 discrim 1 (set (reg/f:SI 0 r0 [orig:158 D.15858 ] [158])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                    (const_int 4 [0x4]))
                (reg/f:SI 7 r7 [164])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
        (nil)))

(insn 23 22 24 4 arch/arm/vfp/vfpmodule.c:140 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:158 D.15858 ] [158])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 25 4 arch/arm/vfp/vfpmodule.c:140 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 32)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  5 [69.8%]  (fallthru)
;; Succ edge  6 [30.2%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  4 [69.8%]  (fallthru)
(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 25 28 5 arch/arm/vfp/vfpmodule.c:141 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:155 __v ] [155])) 167 {*arm_movsi_insn} (nil))

(call_insn 28 27 30 5 arch/arm/vfp/vfpmodule.c:141 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_save_state") [flags 0x41] <function_decl 0x1108c580 vfp_save_state>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 30 28 31 5 arch/arm/vfp/vfpmodule.c:142 (set (reg/f:SI 3 r3 [166])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                    (const_int 4 [0x4]))
                (reg/f:SI 7 r7 [164])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
        (nil)))

(insn 31 30 32 5 arch/arm/vfp/vfpmodule.c:142 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [166])
                (const_int 272 [0x110])) [0 <variable>.hard.cpu+0 S4 A64])
        (reg/v:SI 5 r5 [orig:156 cpu ] [156])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 3 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [30.2%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 32 31 33 6 39 "" [2 uses])

(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 34 33 35 6 arch/arm/vfp/vfpmodule.c:149 (set (reg:SI 3 r3 [orig:167 <variable>.vfpstate.hard.cpu ] [167])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                (const_int 704 [0x2c0])) [0 <variable>.vfpstate.hard.cpu+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 35 34 36 6 arch/arm/vfp/vfpmodule.c:149 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:167 <variable>.vfpstate.hard.cpu ] [167])
            (reg/v:SI 5 r5 [orig:156 cpu ] [156]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 36 35 37 6 arch/arm/vfp/vfpmodule.c:149 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1991 [0x7c7])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [80.1%]  (fallthru)
;; Succ edge  8 [19.9%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  6 [80.1%]  (fallthru)
(note 37 36 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 39 37 191 7 arch/arm/vfp/vfpmodule.c:150 (set (reg:SI 2 r2 [169])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 191 39 40 7 arch/arm/vfp/vfpmodule.c:150 (set (reg/f:SI 3 r3 [168])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 40 191 41 7 arch/arm/vfp/vfpmodule.c:150 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 5 r5 [orig:156 cpu ] [156])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [168])) [0 vfp_current_hw_state S4 A32])
        (reg:SI 2 r2 [169])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6]
;; live  kill	 24 [cc]

;; Pred edge  6 [19.9%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 41 40 42 8 40 "" [1 uses])

(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 8 arch/arm/vfp/vfpmodule.c:157 (set (reg:SI 6 r6 [170])
        (and:SI (reg/v:SI 6 r6 [orig:155 __v ] [155])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 44 43 174 8 arch/arm/vfp/vfpmodule.c:157 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 6 r6 [170])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6021993)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(jump_insn 174 44 175 8 arch/arm/vfp/vfpmodule.c:158 (set (pc)
        (label_ref 158)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 18)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 175 174 47)

;; Start of basic block ( 2) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [20.0%] 
(code_label 47 175 48 9 34 "" [1 uses])

(note 48 47 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 58 48 49 9 NOTE_INSN_DELETED)

(insn 49 58 51 9 arch/arm/vfp/vfpmodule.c:58 (set (reg/v/f:SI 5 r5 [orig:144 vfp ] [144])
        (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 51 49 50 9 arch/arm/vfp/vfpmodule.c:61 discrim 1 (set (reg:SI 1 r1)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (nil))

(insn 50 51 52 9 arch/arm/vfp/vfpmodule.c:61 discrim 1 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:144 vfp ] [144])) 167 {*arm_movsi_insn} (nil))

(call_insn 52 50 193 9 arch/arm/vfp/vfpmodule.c:61 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 193 52 188 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 188 193 189 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 189 188 53 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
        (and:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 53 189 54 9 arch/arm/vfp/vfpmodule.c:63 (set (reg:SI 2 r2 [171])
        (const_int 1073741824 [0x40000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1073741824 [0x40000000])
        (nil)))

(insn 54 53 55 9 arch/arm/vfp/vfpmodule.c:63 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                (const_int 688 [0x2b0])) [0 <variable>.vfpstate.hard.fpexc+0 S4 A64])
        (reg:SI 2 r2 [171])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1073741824 [0x40000000])
        (nil)))

(insn 55 54 60 9 arch/arm/vfp/vfpmodule.c:64 (set (reg:SI 1 r1 [172])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 60 55 56 9 arch/arm/vfp/vfpmodule.c:71 (set (reg:SI 2 r2 [orig:174 <variable>.preempt_count ] [174])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 56 60 61 9 arch/arm/vfp/vfpmodule.c:64 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
                (const_int 692 [0x2b4])) [0 <variable>.vfpstate.hard.fpscr+0 S4 A32])
        (reg:SI 1 r1 [172])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 61 56 62 9 arch/arm/vfp/vfpmodule.c:71 (set (reg:SI 2 r2 [175])
        (plus:SI (reg:SI 2 r2 [orig:174 <variable>.preempt_count ] [174])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 62 61 63 9 arch/arm/vfp/vfpmodule.c:71 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [175])) 167 {*arm_movsi_insn} (nil))

(insn 63 62 67 9 arch/arm/vfp/vfpmodule.c:71 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6010990)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 67 63 68 9 arch/arm/vfp/vfpmodule.c:71 (set (reg/v:SI 2 r2 [orig:145 cpu ] [145])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:147 D.16515 ] [147])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 68 67 69 9 arch/arm/vfp/vfpmodule.c:72 (set (reg/f:SI 3 r3 [178])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 69 68 70 9 arch/arm/vfp/vfpmodule.c:72 (set (reg/f:SI 0 r0 [179])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [178])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [178])) [0 vfp_current_hw_state S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
            (nil))))

(insn 70 69 71 9 arch/arm/vfp/vfpmodule.c:72 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [179])
            (reg/v/f:SI 5 r5 [orig:144 vfp ] [144]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 71 70 72 9 arch/arm/vfp/vfpmodule.c:72 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  10 [15.0%]  (fallthru)
;; Succ edge  11 [85.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [15.0%]  (fallthru)
(note 72 71 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 75 72 76 10 arch/arm/vfp/vfpmodule.c:73 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:145 cpu ] [145])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [178])) [0 vfp_current_hw_state S4 A32])
        (reg:SI 1 r1 [172])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  9 [85.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
(code_label 76 75 77 11 41 "" [1 uses])

(note 77 76 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 83 77 93 11 NOTE_INSN_DELETED)

(note 93 83 78 11 NOTE_INSN_DELETED)

(insn 78 93 79 11 arch/arm/vfp/vfpmodule.c:74 (parallel [
            (set (reg/v:SI 3 r3 [orig:146 __v ] [146])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6011368))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 79 78 80 11 arch/arm/vfp/vfpmodule.c:74 (set (reg:SI 3 r3 [182])
        (and:SI (reg/v:SI 3 r3 [orig:146 __v ] [146])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 80 79 81 11 arch/arm/vfp/vfpmodule.c:74 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [182])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6011368)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 81 80 194 11 arch/arm/vfp/vfpmodule.c:75 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6011496)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 194 81 186 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 186 194 187 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 187 186 85 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
        (and:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 85 187 86 11 arch/arm/vfp/vfpmodule.c:75 (set (reg:SI 2 r2 [orig:184 <variable>.preempt_count ] [184])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 86 85 87 11 arch/arm/vfp/vfpmodule.c:75 (set (reg:SI 2 r2 [185])
        (plus:SI (reg:SI 2 r2 [orig:184 <variable>.preempt_count ] [184])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 87 86 88 11 arch/arm/vfp/vfpmodule.c:75 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [185])) 167 {*arm_movsi_insn} (nil))

(insn 88 87 92 11 arch/arm/vfp/vfpmodule.c:75 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6011496)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 92 88 94 11 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:153 D.16502 ] [153])
        (mem/v:SI (reg/f:SI 3 r3 [orig:150 D.16509 ] [150]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 94 92 95 11 arch/arm/vfp/vfpmodule.c:75 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:153 D.16502 ] [153])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 95 94 96 11 arch/arm/vfp/vfpmodule.c:75 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 11 -> ( 12 18)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  12 [0.0%]  (fallthru)
;; Succ edge  18 [100.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  11 [0.0%]  (fallthru)
(note 96 95 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(call_insn 97 96 176 12 arch/arm/vfp/vfpmodule.c:75 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("preempt_schedule") [flags 0x41] <function_decl 0x10aa7a00 preempt_schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 176 97 177 12 (set (pc)
        (label_ref 158)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 18)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  18 [100.0%] 

(barrier 177 176 100)

;; Start of basic block ( 2) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  2 [20.0%] 
(code_label 100 177 101 13 35 "" [1 uses])

(note 101 100 103 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 103 101 195 13 NOTE_INSN_DELETED)

(insn 195 103 184 13 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 184 195 185 13 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 185 184 105 13 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
        (and:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 105 185 106 13 arch/arm/vfp/vfpmodule.c:82 (set (reg:SI 2 r2 [orig:189 <variable>.preempt_count ] [189])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 106 105 107 13 arch/arm/vfp/vfpmodule.c:82 (set (reg:SI 2 r2 [190])
        (plus:SI (reg:SI 2 r2 [orig:189 <variable>.preempt_count ] [189])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 107 106 108 13 arch/arm/vfp/vfpmodule.c:82 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [190])) 167 {*arm_movsi_insn} (nil))

(insn 108 107 112 13 arch/arm/vfp/vfpmodule.c:82 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6012411)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 112 108 114 13 arch/arm/vfp/vfpmodule.c:82 (set (reg/v:SI 2 r2 [orig:135 cpu ] [135])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:136 D.16550 ] [136])
                (const_int 20 [0x14])) [0 <variable>.cpu+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 114 112 113 13 arch/arm/vfp/vfpmodule.c:81 (set (reg/f:SI 4 r4 [194])
        (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 113 114 115 13 arch/arm/vfp/vfpmodule.c:84 (set (reg/f:SI 3 r3 [193])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 115 113 116 13 arch/arm/vfp/vfpmodule.c:81 (set (reg/f:SI 1 r1 [195])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [193])) [0 vfp_current_hw_state S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [193])) [0 vfp_current_hw_state S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) [0 vfp_current_hw_state S4 A32])
            (nil))))

(insn 116 115 117 13 arch/arm/vfp/vfpmodule.c:81 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 1 r1 [195])
            (reg/f:SI 4 r4 [194]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 117 116 118 13 arch/arm/vfp/vfpmodule.c:81 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 122)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  14 [15.0%]  (fallthru)
;; Succ edge  15 [85.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  13 [15.0%]  (fallthru)
(note 118 117 120 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 120 118 121 14 arch/arm/vfp/vfpmodule.c:85 (set (reg:SI 1 r1 [197])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 121 120 122 14 arch/arm/vfp/vfpmodule.c:85 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 2 r2 [orig:135 cpu ] [135])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [193])) [0 vfp_current_hw_state S4 A32])
        (reg:SI 1 r1 [197])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 14 -> ( 15)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  13 [85.0%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 122 121 123 15 42 "" [1 uses])

(note 123 122 126 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 126 123 136 15 NOTE_INSN_DELETED)

(note 136 126 124 15 NOTE_INSN_DELETED)

(insn 124 136 196 15 arch/arm/vfp/vfpmodule.c:86 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6012904)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 196 124 182 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 182 196 183 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 183 182 128 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
        (and:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 128 183 129 15 arch/arm/vfp/vfpmodule.c:86 (set (reg:SI 2 r2 [orig:199 <variable>.preempt_count ] [199])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 129 128 130 15 arch/arm/vfp/vfpmodule.c:86 (set (reg:SI 2 r2 [200])
        (plus:SI (reg:SI 2 r2 [orig:199 <variable>.preempt_count ] [199])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 130 129 131 15 arch/arm/vfp/vfpmodule.c:86 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [200])) 167 {*arm_movsi_insn} (nil))

(insn 131 130 135 15 arch/arm/vfp/vfpmodule.c:86 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6012904)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 135 131 137 15 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:142 D.16537 ] [142])
        (mem/v:SI (reg/f:SI 3 r3 [orig:139 D.16544 ] [139]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 137 135 138 15 arch/arm/vfp/vfpmodule.c:86 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:142 D.16537 ] [142])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 138 137 139 15 arch/arm/vfp/vfpmodule.c:86 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 15 -> ( 16 18)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  16 [0.0%]  (fallthru)
;; Succ edge  18 [100.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  15 [0.0%]  (fallthru)
(note 139 138 140 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(call_insn 140 139 178 16 arch/arm/vfp/vfpmodule.c:86 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("preempt_schedule") [flags 0x41] <function_decl 0x10aa7a00 preempt_schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 178 140 179 16 (set (pc)
        (label_ref 158)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  18 [100.0%] 

(barrier 179 178 143)

;; Start of basic block ( 2) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  2 [20.0%] 
(code_label 143 179 144 17 37 "" [1 uses])

(note 144 143 146 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 146 144 150 17 NOTE_INSN_DELETED)

(note 150 146 151 17 NOTE_INSN_DELETED)

(note 151 150 197 17 NOTE_INSN_DELETED)

(insn 197 151 180 17 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 180 197 181 17 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 5 r5 [orig:133 parent ] [133])
        (and:SI (reg:SI 3 r3)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 181 180 148 17 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/v/f:SI 5 r5 [orig:133 parent ] [133])
        (and:SI (reg/v/f:SI 5 r5 [orig:133 parent ] [133])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 148 181 149 17 arch/arm/vfp/vfpmodule.c:93 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:133 parent ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn 149 148 153 17 arch/arm/vfp/vfpmodule.c:93 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_sync_hwstate") [flags 0x3] <function_decl 0x10aa7080 vfp_sync_hwstate>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 153 149 154 17 arch/arm/vfp/vfpmodule.c:94 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 4 r4 [orig:157 thread ] [157])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 154 153 155 17 arch/arm/vfp/vfpmodule.c:94 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 5 r5 [orig:133 parent ] [133])
            (const_int 432 [0x1b0]))) 4 {*arm_addsi3} (nil))

(insn 155 154 156 17 arch/arm/vfp/vfpmodule.c:94 (set (reg:SI 2 r2)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 280 [0x118])
        (nil)))

(call_insn 156 155 158 17 arch/arm/vfp/vfpmodule.c:94 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memcpy") [flags 0x41] <function_decl 0x110ee180 memcpy>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 17 -> ( 18)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 2 12 11 15 17 8 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [20.0%] 
;; Pred edge  12 [100.0%] 
;; Pred edge  11 [100.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
;; Pred edge  16 [100.0%] 
(code_label 158 156 159 18 33 "" [6 uses])

(note 159 158 164 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 164 159 170 18 arch/arm/vfp/vfpmodule.c:174 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 170 164 190 18 arch/arm/vfp/vfpmodule.c:174 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 18 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 190 170 192 NOTE_INSN_DELETED)

(note 192 190 0 NOTE_INSN_DELETED)


;; Function vfp_init (vfp_init)[0:843] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 150.
verify found no changes in insn with uid = 150.
deleting insn with uid = 74.
scanning new insn with uid = 151.
verify found no changes in insn with uid = 151.
deleting insn with uid = 24.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 21 count 24 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 21 count 28 (  1.9)

Pass 0 for finding allocno costs

    a1 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a16(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a17(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a20(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r186: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a16(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a17(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a20(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 140(l0): point = 0
   Insn 134(l0): point = 2
   Insn 127(l0): point = 5
   Insn 126(l0): point = 7
   Insn 125(l0): point = 9
   Insn 123(l0): point = 11
   Insn 121(l0): point = 14
   Insn 120(l0): point = 16
   Insn 119(l0): point = 18
   Insn 118(l0): point = 20
   Insn 116(l0): point = 23
   Insn 115(l0): point = 25
   Insn 114(l0): point = 27
   Insn 113(l0): point = 29
   Insn 110(l0): point = 32
   Insn 109(l0): point = 34
   Insn 106(l0): point = 37
   Insn 102(l0): point = 39
   Insn 105(l0): point = 41
   Insn 100(l0): point = 43
   Insn 104(l0): point = 45
   Insn 103(l0): point = 47
   Insn 98(l0): point = 50
   Insn 94(l0): point = 52
   Insn 92(l0): point = 54
   Insn 91(l0): point = 56
   Insn 97(l0): point = 58
   Insn 96(l0): point = 60
   Insn 90(l0): point = 62
   Insn 89(l0): point = 64
   Insn 88(l0): point = 66
   Insn 85(l0): point = 68
   Insn 84(l0): point = 70
   Insn 81(l0): point = 72
   Insn 75(l0): point = 74
   Insn 150(l0): point = 76
   Insn 79(l0): point = 78
   Insn 144(l0): point = 80
   Insn 72(l0): point = 82
   Insn 67(l0): point = 84
   Insn 66(l0): point = 86
   Insn 65(l0): point = 88
   Insn 64(l0): point = 90
   Insn 58(l0): point = 92
   Insn 68(l0): point = 94
   Insn 69(l0): point = 96
   Insn 71(l0): point = 98
   Insn 70(l0): point = 100
   Insn 56(l0): point = 102
   Insn 54(l0): point = 104
   Insn 53(l0): point = 106
   Insn 147(l0): point = 109
   Insn 47(l0): point = 111
   Insn 46(l0): point = 113
   Insn 43(l0): point = 116
   Insn 42(l0): point = 118
   Insn 145(l0): point = 121
   Insn 36(l0): point = 123
   Insn 35(l0): point = 125
   Insn 32(l0): point = 128
   Insn 31(l0): point = 130
   Insn 30(l0): point = 132
   Insn 28(l0): point = 134
   Insn 25(l0): point = 136
   Insn 151(l0): point = 138
   Insn 27(l0): point = 140
   Insn 29(l0): point = 142
   Insn 22(l0): point = 144
   Insn 21(l0): point = 146
   Insn 20(l0): point = 148
   Insn 19(l0): point = 150
   Insn 18(l0): point = 152
   Insn 17(l0): point = 154
   Insn 14(l0): point = 157
   Insn 13(l0): point = 159
   Insn 12(l0): point = 161
   Insn 11(l0): point = 163
   Insn 8(l0): point = 166
   Insn 7(l0): point = 168
   Insn 5(l0): point = 170
 a0(r183): [6..11]
 a1(r186): [6..7]
 a2(r185): [8..9]
 a3(r182): [17..18]
 a4(r134): [19..20]
 a5(r181): [26..27]
 a6(r133): [28..29]
 a7(r172): [33..62]
 a8(r180): [33..34]
 a9(r137): [35..43]
 a10(r178): [42..45]
 a11(r173): [44..56]
 a12(r135): [46..47]
 a13(r138): [53..54]
 a14(r176): [59..60]
 a15(r148): [128..142] [116..120] [61..108]
 a16(r143): [128..154] [116..120] [67..108]
 a17(r164): [75..76]
 a18(r162): [85..86]
 a19(r136): [128..146] [116..120] [87..108]
 a20(r161): [89..90]
 a21(r139): [93..102]
 a22(r149): [131..132]
 a23(r146): [137..138]
 a24(r144): [151..152]
Compressing live ranges: from 173 to 52 - 30%
Ranges after the compression:
 a0(r183): [0..4]
 a1(r186): [0..1]
 a2(r185): [2..3]
 a3(r182): [5..6]
 a4(r134): [7..8]
 a5(r181): [9..10]
 a6(r133): [11..12]
 a7(r172): [13..28]
 a8(r180): [13..14]
 a9(r137): [15..17]
 a10(r178): [16..19]
 a11(r173): [18..24]
 a12(r135): [20..21]
 a13(r138): [22..23]
 a14(r176): [25..26]
 a15(r148): [42..47] [40..41] [27..39]
 a16(r143): [42..51] [40..41] [29..39]
 a17(r164): [30..31]
 a18(r162): [32..33]
 a19(r136): [42..48] [40..41] [34..39]
 a20(r161): [35..36]
 a21(r139): [37..38]
 a22(r149): [43..44]
 a23(r146): [45..46]
 a24(r144): [49..50]
+++Allocating 168 bytes for conflict table (uncompressed size 200)
;; a0(r183,l0) conflicts: a1(r186,l0) a2(r185,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r186,l0) conflicts: a0(r183,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r185,l0) conflicts: a0(r183,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r182,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r181,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r172,l0) conflicts: a8(r180,l0) a9(r137,l0) a10(r178,l0) a11(r173,l0) a12(r135,l0) a13(r138,l0) a14(r176,l0) a15(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r180,l0) conflicts: a7(r172,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r137,l0) conflicts: a7(r172,l0) a10(r178,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r178,l0) conflicts: a7(r172,l0) a9(r137,l0) a11(r173,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r173,l0) conflicts: a7(r172,l0) a10(r178,l0) a12(r135,l0) a13(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r135,l0) conflicts: a7(r172,l0) a11(r173,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r138,l0) conflicts: a7(r172,l0) a11(r173,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r176,l0) conflicts: a7(r172,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r148,l0) conflicts: a7(r172,l0) a16(r143,l0) a17(r164,l0) a18(r162,l0) a19(r136,l0) a20(r161,l0) a21(r139,l0) a22(r149,l0) a23(r146,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a16(r143,l0) conflicts: a15(r148,l0) a17(r164,l0) a18(r162,l0) a19(r136,l0) a20(r161,l0) a21(r139,l0) a22(r149,l0) a23(r146,l0) a24(r144,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a17(r164,l0) conflicts: a15(r148,l0) a16(r143,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a18(r162,l0) conflicts: a15(r148,l0) a16(r143,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a19(r136,l0) conflicts: a15(r148,l0) a16(r143,l0) a20(r161,l0) a21(r139,l0) a22(r149,l0) a23(r146,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a20(r161,l0) conflicts: a15(r148,l0) a16(r143,l0) a19(r136,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a21(r139,l0) conflicts: a15(r148,l0) a16(r143,l0) a19(r136,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a22(r149,l0) conflicts: a15(r148,l0) a16(r143,l0) a19(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r146,l0) conflicts: a15(r148,l0) a16(r143,l0) a19(r136,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a24(r144,l0) conflicts: a16(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a1(r186)<->a2(r185)@125:shuffle
  cp1:a3(r182)<->a4(r134)@125:shuffle
  cp2:a5(r181)<->a6(r133)@125:shuffle
  cp3:a8(r180)<->a9(r137)@125:shuffle
  cp4:a10(r178)<->a12(r135)@125:shuffle
  cp5:a9(r137)<->a11(r173)@125:shuffle
  cp6:a18(r162)<->a19(r136)@125:shuffle
  regions=1, blocks=15, points=52
    allocnos=25, copies=7, conflicts=5, ranges=31

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r183 1r186 2r185 3r182 4r134 5r181 6r133 7r172 8r180 9r137 10r178 11r173 12r135 13r138 14r176 15r148 16r143 17r164 18r162 19r136 20r161 21r139 22r149 23r146 24r144
    modified regnos: 133 134 135 136 137 138 139 143 144 146 148 149 161 162 164 172 173 176 178 180 181 182 183 185 186
    border:
    Pressure: GENERAL_REGS=8
    Reg 183 of GENERAL_REGS has 1 regs less
    Reg 186 of GENERAL_REGS has 1 regs less
    Reg 185 of GENERAL_REGS has 1 regs less
    Reg 182 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 181 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 172 of GENERAL_REGS has 1 regs less
    Reg 180 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 173 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 5 regs less
    Reg 143 of GENERAL_REGS has 5 regs less
    Reg 164 of GENERAL_REGS has 2 regs less
    Reg 162 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 161 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
      Pushing a24(r144,l0)
      Pushing a22(r149,l0)
      Pushing a23(r146,l0)
      Pushing a14(r176,l0)
      Pushing a13(r138,l0)
      Pushing a12(r135,l0)
      Pushing a10(r178,l0)
      Pushing a8(r180,l0)
      Pushing a6(r133,l0)
      Pushing a5(r181,l0)
      Pushing a4(r134,l0)
      Pushing a3(r182,l0)
      Pushing a2(r185,l0)
      Pushing a1(r186,l0)
      Pushing a11(r173,l0)
      Pushing a9(r137,l0)
      Pushing a0(r183,l0)
      Pushing a7(r172,l0)
      Pushing a17(r164,l0)
      Pushing a20(r161,l0)
      Pushing a18(r162,l0)
      Pushing a21(r139,l0)
      Pushing a15(r148,l0)
      Pushing a16(r143,l0)
      Pushing a19(r136,l0)
      Popping a19(r136,l0)  -- assign reg 4
      Popping a16(r143,l0)  -- assign reg 5
      Popping a15(r148,l0)  -- assign reg 6
      Popping a21(r139,l0)  -- assign reg 12
      Popping a18(r162,l0)  -- assign reg 4
      Popping a20(r161,l0)  -- assign reg 12
      Popping a17(r164,l0)  -- assign reg 3
      Popping a7(r172,l0)  -- assign reg 3
      Popping a0(r183,l0)  -- assign reg 3
      Popping a9(r137,l0)  -- assign reg 2
      Popping a11(r173,l0)  -- assign reg 2
      Popping a1(r186,l0)  -- assign reg 2
      Popping a2(r185,l0)  -- assign reg 2
      Popping a3(r182,l0)  -- assign reg 3
      Popping a4(r134,l0)  -- assign reg 3
      Popping a5(r181,l0)  -- assign reg 3
      Popping a6(r133,l0)  -- assign reg 3
      Popping a8(r180,l0)  -- assign reg 2
      Popping a10(r178,l0)  -- assign reg 1
      Popping a12(r135,l0)  -- assign reg 1
      Popping a13(r138,l0)  -- assign reg 1
      Popping a14(r176,l0)  -- assign reg 2
      Popping a23(r146,l0)  -- assign reg 3
      Popping a22(r149,l0)  -- assign reg 3
      Popping a24(r144,l0)  -- assign reg 3
Disposition:
    6:r133 l0     3    4:r134 l0     3   12:r135 l0     1   19:r136 l0     4
    9:r137 l0     2   13:r138 l0     1   21:r139 l0    12   16:r143 l0     5
   24:r144 l0     3   23:r146 l0     3   15:r148 l0     6   22:r149 l0     3
   20:r161 l0    12   18:r162 l0     4   17:r164 l0     3    7:r172 l0     3
   11:r173 l0     2   14:r176 l0     2   10:r178 l0     1    8:r180 l0     2
    5:r181 l0     3    3:r182 l0     3    0:r183 l0     3    2:r185 l0     2
    1:r186 l0     2
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 0, 14
insn=7, live_throughout: 13, dead_or_set: 0
insn=8, live_throughout: 13, dead_or_set: 
insn=11, live_throughout: 13, dead_or_set: 0
insn=12, live_throughout: 0, 13, dead_or_set: 1
insn=13, live_throughout: 0, 1, 13, dead_or_set: 2
insn=14, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=15, live_throughout: 13, dead_or_set: 
insn=17, live_throughout: 13, dead_or_set: 143
insn=18, live_throughout: 13, 143, dead_or_set: 144
insn=19, live_throughout: 13, 143, dead_or_set: 144
insn=20, live_throughout: 13, 143, dead_or_set: 
insn=21, live_throughout: 13, 143, dead_or_set: 136
insn=22, live_throughout: 13, 136, 143, dead_or_set: 
insn=29, live_throughout: 13, 136, 143, dead_or_set: 148
insn=27, live_throughout: 13, 136, 143, 148, dead_or_set: 0
insn=151, live_throughout: 0, 13, 136, 143, 148, dead_or_set: 146
insn=25, live_throughout: 0, 13, 136, 143, 148, dead_or_set: 146
insn=28, live_throughout: 13, 136, 143, 148, dead_or_set: 0, 14
insn=30, live_throughout: 13, 136, 143, 148, dead_or_set: 149
insn=31, live_throughout: 13, 136, 143, 148, dead_or_set: 149
insn=32, live_throughout: 13, 136, 143, 148, dead_or_set: 
insn=35, live_throughout: 13, dead_or_set: 0
insn=36, live_throughout: 13, dead_or_set: 0, 14
insn=145, live_throughout: 13, 14, dead_or_set: 
insn=39, live_throughout: 13, 136, 143, 148, dead_or_set: 
insn=42, live_throughout: 13, 136, 143, 148, dead_or_set: 
insn=43, live_throughout: 13, 136, 143, 148, dead_or_set: 
insn=46, live_throughout: 13, dead_or_set: 0
insn=47, live_throughout: 13, dead_or_set: 0, 14
insn=147, live_throughout: 13, 14, dead_or_set: 
insn=50, live_throughout: 13, 136, 143, 148, dead_or_set: 
insn=53, live_throughout: 13, 136, 143, 148, dead_or_set: 0
insn=54, live_throughout: 13, 136, 143, 148, dead_or_set: 0, 14
insn=56, live_throughout: 13, 136, 143, 148, dead_or_set: 139
insn=70, live_throughout: 13, 136, 139, 143, 148, dead_or_set: 2
insn=71, live_throughout: 2, 13, 136, 139, 143, 148, dead_or_set: 3
insn=69, live_throughout: 2, 3, 13, 136, 139, 143, 148, dead_or_set: 1
insn=68, live_throughout: 1, 2, 3, 13, 136, 139, 143, 148, dead_or_set: 0
insn=58, live_throughout: 0, 1, 2, 3, 13, 136, 143, 148, dead_or_set: 139
insn=64, live_throughout: 0, 1, 2, 3, 13, 136, 143, 148, dead_or_set: 161
insn=65, live_throughout: 0, 1, 2, 3, 13, 136, 143, 148, dead_or_set: 161
insn=66, live_throughout: 0, 1, 2, 3, 13, 143, 148, dead_or_set: 136, 162
insn=67, live_throughout: 0, 1, 2, 3, 13, 143, 148, dead_or_set: 162
insn=72, live_throughout: 13, 143, 148, dead_or_set: 0, 1, 2, 3, 14
insn=144, live_throughout: 13, 143, 148, dead_or_set: 1
insn=79, live_throughout: 1, 13, 143, 148, dead_or_set: 0
insn=150, live_throughout: 0, 1, 13, 143, 148, dead_or_set: 164
insn=75, live_throughout: 0, 13, 143, 148, dead_or_set: 1, 164
insn=81, live_throughout: 13, 143, 148, dead_or_set: 0, 1, 14
insn=84, live_throughout: 13, 143, 148, dead_or_set: 0
insn=85, live_throughout: 13, 143, 148, dead_or_set: 0, 14
insn=88, live_throughout: 13, 148, dead_or_set: 0, 143
insn=89, live_throughout: 13, 148, dead_or_set: 0, 14
insn=90, live_throughout: 13, 14, 148, dead_or_set: 172
insn=96, live_throughout: 13, 14, 172, dead_or_set: 148, 176
insn=97, live_throughout: 13, 14, 172, dead_or_set: 176
insn=91, live_throughout: 13, 14, 24, 172, dead_or_set: 173
insn=92, live_throughout: 13, 14, 24, 172, 173, dead_or_set: 138
insn=94, live_throughout: 13, 14, 24, 172, 173, dead_or_set: 138
insn=98, live_throughout: 13, 14, 172, 173, dead_or_set: 
insn=103, live_throughout: 13, 14, 172, 173, dead_or_set: 135
insn=104, live_throughout: 13, 14, 172, 173, dead_or_set: 135, 178
insn=100, live_throughout: 13, 14, 172, 178, dead_or_set: 137, 173
insn=105, live_throughout: 13, 14, 137, 172, dead_or_set: 178
insn=102, live_throughout: 13, 14, 24, 137, 172, dead_or_set: 
insn=106, live_throughout: 13, 14, 137, 172, dead_or_set: 
insn=109, live_throughout: 13, 14, 172, dead_or_set: 137, 180
insn=110, live_throughout: 13, 14, dead_or_set: 172, 180
insn=111, live_throughout: 13, 14, dead_or_set: 
insn=113, live_throughout: 13, 14, dead_or_set: 133
insn=114, live_throughout: 13, 14, dead_or_set: 133, 181
insn=115, live_throughout: 13, 14, dead_or_set: 181
insn=116, live_throughout: 13, 14, dead_or_set: 
insn=118, live_throughout: 13, 14, dead_or_set: 134
insn=119, live_throughout: 13, 14, dead_or_set: 134, 182
insn=120, live_throughout: 13, 14, dead_or_set: 182
insn=121, live_throughout: 13, 14, dead_or_set: 
insn=123, live_throughout: 13, 14, dead_or_set: 183
insn=125, live_throughout: 13, 14, 183, dead_or_set: 185
insn=126, live_throughout: 13, 14, 183, dead_or_set: 185, 186
insn=127, live_throughout: 13, 14, dead_or_set: 183, 186
insn=128, live_throughout: 13, 14, dead_or_set: 
insn=134, live_throughout: 13, 14, dead_or_set: 0
insn=140, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 138: (insn_list:REG_DEP_TRUE 94 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 58 (nil))
init_insns for 143: (insn_list:REG_DEP_TRUE 17 (nil))
init_insns for 144: (insn_list:REG_DEP_TRUE 18 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 151 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 29 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 30 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 65 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 67 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 150 (nil))
init_insns for 172: (insn_list:REG_DEP_TRUE 90 (nil))
init_insns for 180: (insn_list:REG_DEP_TRUE 110 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 123 (nil))
init_insns for 185: (insn_list:REG_DEP_TRUE 125 (nil))
init_insns for 186: (insn_list:REG_DEP_TRUE 127 (nil))
changing reg in insn 113
changing reg in insn 114
changing reg in insn 118
changing reg in insn 119
changing reg in insn 103
changing reg in insn 104
changing reg in insn 21
changing reg in insn 71
changing reg in insn 69
changing reg in insn 64
changing reg in insn 56
changing reg in insn 42
changing reg in insn 66
changing reg in insn 100
changing reg in insn 102
changing reg in insn 109
changing reg in insn 92
changing reg in insn 94
changing reg in insn 56
changing reg in insn 58
changing reg in insn 70
changing reg in insn 17
changing reg in insn 144
changing reg in insn 88
changing reg in insn 84
changing reg in insn 25
changing reg in insn 19
changing reg in insn 18
changing reg in insn 19
changing reg in insn 151
changing reg in insn 25
changing reg in insn 29
changing reg in insn 96
changing reg in insn 58
changing reg in insn 30
changing reg in insn 56
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 150
changing reg in insn 75
changing reg in insn 90
changing reg in insn 110
changing reg in insn 102
changing reg in insn 94
changing reg in insn 91
changing reg in insn 109
changing reg in insn 92
changing reg in insn 91
changing reg in insn 100
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 104
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 114
changing reg in insn 115
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 125
changing reg in insn 127
changing reg in insn 126
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
Spilling for insn 19.
Spilling for insn 25.
Spilling for insn 58.
Spilling for insn 65.
Spilling for insn 67.
Spilling for insn 75.
Spilling for insn 94.
Spilling for insn 102.
Spilling for insn 110.
Spilling for insn 127.

Reloads for insn # 19
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 5 r5 [143]) [0 vfp_vector+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 5 r5 [143]) [0 vfp_vector+0 S4 A32])

Reloads for insn # 25
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 5 r5 [143]) [0 vfp_vector+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 5 r5 [143]) [0 vfp_vector+0 S4 A32])

Reloads for insn # 58
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                                                        (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                                                        (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])

Reloads for insn # 65
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 67
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 75
Reload 0: reload_out (SI) = (mem/f/c/i:SI (post_inc:SI (reg:SI 1 r1)) [0 vfp_vector+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (post_inc:SI (reg:SI 1 r1)) [0 vfp_vector+0 S4 A32])

Reloads for insn # 94
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])

Reloads for insn # 102
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])

Reloads for insn # 110
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])

Reloads for insn # 127
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 5.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 89.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 21 count 24 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 21 count 28 (  1.9)


vfp_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={21d,12u} r1={18d,7u} r2={19d,10u} r3={22d,15u,4d} r4={2d,7u} r5={1d,5u} r6={1d,3u,2d} r12={13d,3u} r13={1d,26u,2d} r14={11d,1u} r15={10d} r16={10d} r17={10d} r18={10d} r19={10d} r20={10d} r21={10d} r22={10d} r23={10d} r24={21d,7u} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} r81={10d} r82={10d} r83={10d} r84={10d} r85={10d} r86={10d} r87={10d} r88={10d} r89={10d} r90={10d} r91={10d} r92={10d} r93={10d} r94={10d} r95={10d} r96={10d} r97={10d} r98={10d} r99={10d} r100={10d} r101={10d} r102={10d} r103={10d} r104={10d} r105={10d} r106={10d} r107={10d} r108={10d} r109={10d} r110={10d} r111={10d} r112={10d} r113={10d} r114={10d} r115={10d} r116={10d} r117={10d} r118={10d} r119={10d} r120={10d} r121={10d} r122={10d} r123={10d} r124={10d} r125={10d} r126={10d} r127={10d} 
;;    total ref usage 1334{1230d,96u,8e} in 80{70 regular + 10 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 2 5 2 NOTE_INSN_DELETED)

(call_insn 5 6 7 2 arch/arm/vfp/vfpmodule.c:579 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_architecture") [flags 0x41] <function_decl 0x512d9700 cpu_architecture>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 7 5 8 2 arch/arm/vfp/vfpmodule.c:579 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 7 [0x7]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 arch/arm/vfp/vfpmodule.c:579 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 15)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  3 [29.0%]  (fallthru)
;; Succ edge  4 [71.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  2 [29.0%]  (fallthru)
(note 9 8 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 9 12 3 arch/arm/vfp/vfpmodule.c:582 (set (reg:SI 0 r0)
        (symbol_ref:SI ("vfp_enable") [flags 0x3] <function_decl 0x110b2180 vfp_enable>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("vfp_enable") [flags 0x3] <function_decl 0x110b2180 vfp_enable>)
        (nil)))

(insn 12 11 13 3 arch/arm/vfp/vfpmodule.c:582 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 13 12 14 3 arch/arm/vfp/vfpmodule.c:582 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 14 13 15 3 arch/arm/vfp/vfpmodule.c:582 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("on_each_cpu") [flags 0x41] <function_decl 0x10ca2000 on_each_cpu>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [71.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 15 14 16 4 50 "" [1 uses])

(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 4 arch/arm/vfp/vfpmodule.c:589 (set (reg/f:SI 5 r5 [143])
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 18 17 19 4 arch/arm/vfp/vfpmodule.c:589 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("vfp_testing_entry") [flags 0x41] <function_decl 0x1108c600 vfp_testing_entry>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("vfp_testing_entry") [flags 0x41] <function_decl 0x1108c600 vfp_testing_entry>)
        (nil)))

(insn 19 18 20 4 arch/arm/vfp/vfpmodule.c:589 (set (mem/f/c/i:SI (reg/f:SI 5 r5 [143]) [0 vfp_vector+0 S4 A32])
        (reg/f:SI 3 r3 [144])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("vfp_testing_entry") [flags 0x41] <function_decl 0x1108c600 vfp_testing_entry>)
        (nil)))

(insn 20 19 21 4 arch/arm/vfp/vfpmodule.c:590 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6081008)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 21 20 22 4 arch/arm/vfp/vfpmodule.c:591 (parallel [
            (set (reg/v:SI 4 r4 [orig:136 __v ] [136])
                (asm_operands:SI ("mrc p10, 7, %0, cr0, cr0, 0 @ fmrx	%0, FPSID") ("=r") 0 []
                     [] 6081145))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 22 21 29 4 arch/arm/vfp/vfpmodule.c:592 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6081264)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 29 22 27 4 arch/arm/vfp/vfpmodule.c:596 (set (reg/f:SI 6 r6 [148])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 27 29 151 4 arch/arm/vfp/vfpmodule.c:595 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11159ea0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x11159ea0>)
        (nil)))

(insn 151 27 25 4 arch/arm/vfp/vfpmodule.c:593 (set (reg/f:SI 3 r3 [146])
        (symbol_ref:SI ("vfp_null_entry") [flags 0x41] <function_decl 0x1108c700 vfp_null_entry>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("vfp_null_entry") [flags 0x41] <function_decl 0x1108c700 vfp_null_entry>)
        (nil)))

(insn 25 151 28 4 arch/arm/vfp/vfpmodule.c:593 (set (mem/f/c/i:SI (reg/f:SI 5 r5 [143]) [0 vfp_vector+0 S4 A32])
        (reg/f:SI 3 r3 [146])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("vfp_null_entry") [flags 0x41] <function_decl 0x1108c700 vfp_null_entry>)
        (nil)))

(call_insn 28 25 30 4 arch/arm/vfp/vfpmodule.c:595 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 30 28 31 4 arch/arm/vfp/vfpmodule.c:596 (set (reg:SI 3 r3 [orig:149 VFP_arch ] [149])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 VFP_arch+0 S4 A32])
            (nil))))

(insn 31 30 32 4 arch/arm/vfp/vfpmodule.c:596 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:149 VFP_arch ] [149])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 32 31 33 4 arch/arm/vfp/vfpmodule.c:596 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.0%]  (fallthru)
(note 33 32 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 35 33 36 5 arch/arm/vfp/vfpmodule.c:597 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11159480>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11159480>)
        (nil)))

(call_insn 36 35 145 5 arch/arm/vfp/vfpmodule.c:597 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 145 36 146 5 (set (pc)
        (label_ref 128)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 14)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 146 145 39)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%] 
(code_label 39 146 40 6 51 "" [1 uses])

(note 40 39 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 41 40 42 6 NOTE_INSN_DELETED)

(insn 42 41 43 6 arch/arm/vfp/vfpmodule.c:598 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
                (const_int 1 [0x1])
                (const_int 20 [0x14]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 43 42 44 6 arch/arm/vfp/vfpmodule.c:598 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6000 [0x1770])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [40.0%]  (fallthru)
;; Succ edge  8 [60.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  6 [40.0%]  (fallthru)
(note 44 43 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 44 47 7 arch/arm/vfp/vfpmodule.c:599 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x11145740>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x11145740>)
        (nil)))

(call_insn 47 46 147 7 arch/arm/vfp/vfpmodule.c:599 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 147 47 148 7 (set (pc)
        (label_ref 128)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 14)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 148 147 50)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [60.0%] 
(code_label 50 148 51 8 53 "" [1 uses])

(note 51 50 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 55 51 60 8 NOTE_INSN_DELETED)

(note 60 55 61 8 NOTE_INSN_DELETED)

(note 61 60 62 8 NOTE_INSN_DELETED)

(note 62 61 63 8 NOTE_INSN_DELETED)

(note 63 62 53 8 NOTE_INSN_DELETED)

(insn 53 63 54 8 arch/arm/vfp/vfpmodule.c:601 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR3") [flags 0x182])
        (nil)))

(call_insn 54 53 56 8 arch/arm/vfp/vfpmodule.c:601 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("register_cpu_notifier") [flags 0x41] <function_decl 0x10e62a80 register_cpu_notifier>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 56 54 70 8 arch/arm/vfp/vfpmodule.c:603 (set (reg:SI 12 ip [orig:139 VFP_arch.262 ] [139])
        (zero_extract:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 4 [0x4])
            (const_int 16 [0x10]))) 124 {extzv_t2} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])
        (nil)))

(insn 70 56 71 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 2 r2)
        (reg:SI 12 ip [orig:139 VFP_arch.262 ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 71 70 69 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 3 r3)
        (zero_extract:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 8 [0x8])
            (const_int 8 [0x8]))) 124 {extzv_t2} (nil))

(insn 69 71 68 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 24 [0x18]))) 117 {*arm_shiftsi3} (nil))

(insn 68 69 58 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10df2000>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10df2000>)
        (nil)))

(insn 58 68 64 8 arch/arm/vfp/vfpmodule.c:603 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])
        (reg:SI 12 ip [orig:139 VFP_arch.262 ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 64 58 65 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 12 ip [161])
        (zero_extract:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 4 [0x4])
            (const_int 4 [0x4]))) 124 {extzv_t2} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (nil)))

(insn 65 64 66 8 arch/arm/vfp/vfpmodule.c:604 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [161])) 167 {*arm_movsi_insn} (nil))

(insn 66 65 67 8 arch/arm/vfp/vfpmodule.c:604 (set (reg:SI 4 r4 [162])
        (and:SI (reg/v:SI 4 r4 [orig:136 __v ] [136])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (nil)))

(insn 67 66 72 8 arch/arm/vfp/vfpmodule.c:604 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 4 r4 [162])) 167 {*arm_movsi_insn} (nil))

(call_insn 72 67 144 8 arch/arm/vfp/vfpmodule.c:604 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 144 72 79 8 arch/arm/vfp/vfpmodule.c:611 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [143])) 167 {*arm_movsi_insn} (nil))

(insn 79 144 150 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_notify.h:23 (set (reg:SI 0 r0)
        (symbol_ref:SI ("thread_notify_head") [flags 0xc0] <var_decl 0x11045060 thread_notify_head>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("thread_notify_head") [flags 0xc0] <var_decl 0x11045060 thread_notify_head>)
        (nil)))

(insn 150 79 75 8 arch/arm/vfp/vfpmodule.c:611 (set (reg/f:SI 3 r3 [164])
        (symbol_ref:SI ("vfp_support_entry") [flags 0x41] <function_decl 0x1108c680 vfp_support_entry>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("vfp_support_entry") [flags 0x41] <function_decl 0x1108c680 vfp_support_entry>)
        (nil)))

(insn 75 150 81 8 arch/arm/vfp/vfpmodule.c:611 (set (mem/f/c/i:SI (post_inc:SI (reg:SI 1 r1)) [0 vfp_vector+0 S4 A32])
        (reg/f:SI 3 r3 [164])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg:SI 1 r1)
        (expr_list:REG_EQUAL (symbol_ref:SI ("vfp_support_entry") [flags 0x41] <function_decl 0x1108c680 vfp_support_entry>)
            (nil))))

(call_insn 81 75 84 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_notify.h:23 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("atomic_notifier_chain_register") [flags 0x41] <function_decl 0x10c43800 atomic_notifier_chain_register>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 84 81 85 8 arch/arm/vfp/vfpmodule.c:614 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 5 r5 [143])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(call_insn 85 84 88 8 arch/arm/vfp/vfpmodule.c:614 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_pm_register_notifier") [flags 0x41] <function_decl 0x1103cc00 cpu_pm_register_notifier>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 88 85 89 8 arch/arm/vfp/vfpmodule.c:489 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 5 r5 [143])
            (const_int 28 [0x1c]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
                (const_int 28 [0x1c])))
        (nil)))

(call_insn 89 88 90 8 arch/arm/vfp/vfpmodule.c:489 (parallel [
            (call (mem:SI (symbol_ref:SI ("register_syscore_ops") [flags 0x41] <function_decl 0x110b2280 register_syscore_ops>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 90 89 96 8 arch/arm/vfp/vfpmodule.c:621 (set (reg/f:SI 3 r3 [172])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>)
        (nil)))

(insn 96 90 97 8 arch/arm/vfp/vfpmodule.c:623 (set (reg:SI 2 r2 [orig:176 VFP_arch ] [176])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 r6 [148])
                (const_int 8 [0x8])) [0 VFP_arch+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 VFP_arch+0 S4 A32])
        (nil)))

(insn 97 96 91 8 arch/arm/vfp/vfpmodule.c:623 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:176 VFP_arch ] [176])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn 91 97 92 8 arch/arm/vfp/vfpmodule.c:621 (set (reg:SI 2 r2 [orig:173 elf_hwcap ] [173])
        (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 92 91 94 8 arch/arm/vfp/vfpmodule.c:621 (set (reg:SI 1 r1 [orig:138 elf_hwcap.264 ] [138])
        (ior:SI (reg:SI 2 r2 [orig:173 elf_hwcap ] [173])
            (const_int 64 [0x40]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 94 92 98 8 arch/arm/vfp/vfpmodule.c:621 (set (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
        (reg:SI 1 r1 [orig:138 elf_hwcap.264 ] [138])) 167 {*arm_movsi_insn} (nil))

(jump_insn 98 94 99 8 arch/arm/vfp/vfpmodule.c:623 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 111)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2700 [0xa8c])
        (nil)))
;; End of basic block 8 -> ( 9 11)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  9 [73.0%]  (fallthru)
;; Succ edge  11 [27.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  8 [73.0%]  (fallthru)
(note 99 98 103 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 103 99 104 9 arch/arm/vfp/vfpmodule.c:630 (parallel [
            (set (reg/v:SI 1 r1 [orig:135 __v ] [135])
                (asm_operands:SI ("mrc p10, 7, %0, cr7, cr0, 0 @ fmrx	%0, MVFR0") ("=r") 0 []
                     [] 6086136))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 104 103 100 9 arch/arm/vfp/vfpmodule.c:630 (set (reg:SI 1 r1 [178])
        (and:SI (reg/v:SI 1 r1 [orig:135 __v ] [135])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (nil))

(insn 100 104 105 9 arch/arm/vfp/vfpmodule.c:624 (set (reg:SI 2 r2 [orig:137 elf_hwcap.265 ] [137])
        (ior:SI (reg:SI 2 r2 [orig:173 elf_hwcap ] [173])
            (const_int 8256 [0x2040]))) 89 {*arm_iorsi3} (nil))

(insn 105 100 102 9 arch/arm/vfp/vfpmodule.c:630 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [178])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn 102 105 106 9 arch/arm/vfp/vfpmodule.c:624 (set (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
        (reg:SI 2 r2 [orig:137 elf_hwcap.265 ] [137])) 167 {*arm_movsi_insn} (nil))

(jump_insn 106 102 107 9 arch/arm/vfp/vfpmodule.c:630 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 111)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  10 [28.0%]  (fallthru)
;; Succ edge  11 [72.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  9 [28.0%]  (fallthru)
(note 107 106 109 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 109 107 110 10 arch/arm/vfp/vfpmodule.c:631 (set (reg:SI 2 r2 [180])
        (ior:SI (reg:SI 2 r2 [orig:137 elf_hwcap.265 ] [137])
            (const_int 16384 [0x4000]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 110 109 111 10 arch/arm/vfp/vfpmodule.c:631 (set (mem/c/i:SI (reg/f:SI 3 r3 [172]) [0 elf_hwcap+0 S4 A32])
        (reg:SI 2 r2 [180])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 9 8 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  9 [72.0%] 
;; Pred edge  8 [27.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
(code_label 111 110 112 11 54 "" [2 uses])

(note 112 111 113 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 113 112 114 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cputype.h:60 (parallel [
            (set (reg/v:SI 3 r3 [orig:133 __val ] [133])
                (asm_operands:SI ("mrc	p15, 0, %0, c0, c0, 0") ("=r") 0 []
                     [] 5907618))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 114 113 115 11 arch/arm/vfp/vfpmodule.c:640 (set (reg:SI 3 r3 [181])
        (and:SI (reg/v:SI 3 r3 [orig:133 __val ] [133])
            (const_int 983040 [0xf0000]))) 67 {*arm_andsi3_insn} (nil))

(insn 115 114 116 11 arch/arm/vfp/vfpmodule.c:640 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [181])
            (const_int 983040 [0xf0000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 116 115 117 11 arch/arm/vfp/vfpmodule.c:640 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6218 [0x184a])
        (nil)))
;; End of basic block 11 -> ( 12 14)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  12 [37.8%]  (fallthru)
;; Succ edge  14 [62.2%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  11 [37.8%]  (fallthru)
(note 117 116 118 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 12 arch/arm/vfp/vfpmodule.c:645 (parallel [
            (set (reg/v:SI 3 r3 [orig:134 __v ] [134])
                (asm_operands:SI ("mrc p10, 7, %0, cr6, cr0, 0 @ fmrx	%0, MVFR1") ("=r") 0 []
                     [] 6088055))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 119 118 120 12 arch/arm/vfp/vfpmodule.c:645 (set (reg:SI 3 r3 [182])
        (and:SI (reg/v:SI 3 r3 [orig:134 __v ] [134])
            (const_int -268435456 [0xfffffffff0000000]))) 67 {*arm_andsi3_insn} (nil))

(insn 120 119 121 12 arch/arm/vfp/vfpmodule.c:645 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [182])
            (const_int 268435456 [0x10000000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 121 120 122 12 arch/arm/vfp/vfpmodule.c:645 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6218 [0x184a])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  13 [37.8%]  (fallthru)
;; Succ edge  14 [62.2%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  12 [37.8%]  (fallthru)
(note 122 121 123 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 123 122 125 13 arch/arm/vfp/vfpmodule.c:646 (set (reg/f:SI 3 r3 [183])
        (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>)
        (nil)))

(insn 125 123 126 13 arch/arm/vfp/vfpmodule.c:646 (set (reg:SI 2 r2 [orig:185 elf_hwcap ] [185])
        (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("elf_hwcap") [flags 0xc0] <var_decl 0x512ba240 elf_hwcap>) [0 elf_hwcap+0 S4 A32])
            (nil))))

(insn 126 125 127 13 arch/arm/vfp/vfpmodule.c:646 (set (reg:SI 2 r2 [186])
        (ior:SI (reg:SI 2 r2 [orig:185 elf_hwcap ] [185])
            (const_int 65536 [0x10000]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32])
        (nil)))

(insn 127 126 128 13 arch/arm/vfp/vfpmodule.c:646 (set (mem/c/i:SI (reg/f:SI 3 r3 [183]) [0 elf_hwcap+0 S4 A32])
        (reg:SI 2 r2 [186])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 5 11 12 7) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  11 [62.2%] 
;; Pred edge  12 [62.2%] 
;; Pred edge  7 [100.0%] 
(code_label 128 127 129 14 52 "" [4 uses])

(note 129 128 134 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 134 129 140 14 arch/arm/vfp/vfpmodule.c:650 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 140 134 149 14 arch/arm/vfp/vfpmodule.c:650 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 14 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 149 140 152 NOTE_INSN_DELETED)

(note 152 149 0 NOTE_INSN_DELETED)


;; Function vfp_enable (vfp_enable)[0:836]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000


Pass 1 for finding allocno costs

    r143: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000

   Insn 29(l0): point = 0
   Insn 28(l0): point = 2
   Insn 27(l0): point = 4
   Insn 26(l0): point = 6
   Insn 22(l0): point = 9
   Insn 21(l0): point = 11
   Insn 20(l0): point = 13
   Insn 16(l0): point = 16
   Insn 15(l0): point = 18
   Insn 13(l0): point = 20
   Insn 11(l0): point = 23
   Insn 10(l0): point = 25
   Insn 9(l0): point = 27
   Insn 39(l0): point = 29
   Insn 38(l0): point = 31
 a0(r143): [3..4]
 a1(r135): [5..6]
 a2(r134): [19..20]
 a3(r139): [26..27]
 a4(r137): [28..31]
Compressing live ranges: from 34 to 10 - 29%
Ranges after the compression:
 a0(r143): [0..1]
 a1(r135): [2..3]
 a2(r134): [4..5]
 a3(r139): [6..7]
 a4(r137): [8..9]
+++Allocating 0 bytes for conflict table (uncompressed size 40)
;; a0(r143,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r135,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r139,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r137,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a0(r143)<->a1(r135)@125:shuffle
  regions=1, blocks=6, points=10
    allocnos=5, copies=1, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r143 1r135 2r134 3r139 4r137
    modified regnos: 134 135 137 139 143
    border:
    Pressure: GENERAL_REGS=3
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
      Pushing a3(r139,l0)
      Pushing a2(r134,l0)
      Pushing a1(r135,l0)
      Pushing a0(r143,l0)
      Pushing a4(r137,l0)
      Popping a4(r137,l0)  -- assign reg 3
      Popping a0(r143,l0)  -- assign reg 3
      Popping a1(r135,l0)  -- assign reg 3
      Popping a2(r134,l0)  -- assign reg 3
      Popping a3(r139,l0)  -- assign reg 3
Disposition:
    2:r134 l0     3    1:r135 l0     3    4:r137 l0     3    3:r139 l0     3
    0:r143 l0     3
New iteration of spill/restore move
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=38, live_throughout: 13, 14, dead_or_set: 137
insn=39, live_throughout: 13, 14, dead_or_set: 137
insn=9, live_throughout: 13, 14, dead_or_set: 137, 139
insn=10, live_throughout: 13, 14, dead_or_set: 139
insn=11, live_throughout: 13, 14, dead_or_set: 
insn=13, live_throughout: 13, 14, dead_or_set: 134
insn=15, live_throughout: 13, 14, dead_or_set: 134
insn=16, live_throughout: 13, 14, dead_or_set: 
insn=20, live_throughout: 13, dead_or_set: 0
insn=21, live_throughout: 0, 13, dead_or_set: 1
insn=22, live_throughout: 13, dead_or_set: 0, 1, 14
insn=24, live_throughout: 13, 14, dead_or_set: 
insn=26, live_throughout: 13, 14, dead_or_set: 135
insn=27, live_throughout: 13, 14, dead_or_set: 135, 143
insn=28, live_throughout: 13, 14, dead_or_set: 143
insn=29, live_throughout: 13, 14, dead_or_set: 
changing reg in insn 13
changing reg in insn 15
changing reg in insn 26
changing reg in insn 27
changing reg in insn 39
changing reg in insn 38
changing reg in insn 39
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 27
changing reg in insn 28
Spilling for insn 38.
Using reg 2 for reload 0
Spilling for insn 38.
Using reg 2 for reload 0

Reloads for insn # 38
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 9 (  1.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


vfp_enable

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,1u} r1={3d,1u} r2={3d,1u} r3={8d,6u} r12={2d} r13={1d,7u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={6d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 157{138d,19u,0e} in 16{15 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 3 42 2 NOTE_INSN_DELETED)

(insn 42 7 38 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 38 42 39 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 39 38 9 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [137])
        (and:SI (reg:SI 3 r3 [137])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 9 39 10 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:139 <variable>.preempt_count ] [139])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [137])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:139 <variable>.preempt_count ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 11 10 12 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  2 [0.0%]  (fallthru)
(note 12 11 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 14 12 13 3 NOTE_INSN_DELETED)

(insn 13 14 15 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:131 (parallel [
            (set (reg/v:SI 3 r3 [orig:134 _flags ] [134])
                (asm_operands/v:SI ("	mrs	%0, cpsr	@ local_save_flags") ("=r") 0 []
                     [] 1117950))
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 15 13 16 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:134 _flags ] [134])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 16 15 17 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru)
(note 17 16 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 17 21 4 arch/arm/vfp/vfpmodule.c:431 discrim 2 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11160c80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x11160c80>)
        (nil)))

(insn 21 20 22 4 arch/arm/vfp/vfpmodule.c:431 discrim 2 (set (reg:SI 1 r1)
        (const_int 431 [0x1af])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 431 [0x1af])
        (nil)))

(call_insn 22 21 23 4 arch/arm/vfp/vfpmodule.c:431 discrim 2 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 23 22 24)

;; Start of basic block ( 3 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  3 [100.0%] 
;; Pred edge  2 [100.0%] 
(code_label 24 23 25 5 60 "" [2 uses])

(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/system.h:215 (parallel [
            (set (reg/v:SI 3 r3 [orig:135 access ] [135])
                (asm_operands:SI ("mrc p15, 0, %0, c1, c0, 2 @ get copro access") ("=r") 0 []
                     [] 1170735))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 27 26 28 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/system.h:222 (set (reg:SI 3 r3 [143])
        (ior:SI (reg/v:SI 3 r3 [orig:135 access ] [135])
            (const_int 15728640 [0xf00000]))) 89 {*arm_iorsi3} (nil))

(insn 28 27 29 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/system.h:222 (parallel [
            (asm_operands/v ("mcr p15, 0, %0, c1, c0, 2 @ set copro access") ("") 0 [
                    (reg:SI 3 r3 [143])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 1171631)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 29 28 40 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/system.h:224 (parallel [
            (asm_operands/v ("isb") ("") 0 []
                 [] 1171887)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 40 29 41 NOTE_INSN_DELETED)

(note 41 40 0 NOTE_INSN_DELETED)


;; Function vfp_hotplug (vfp_hotplug)[0:842]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 60.
verify found no changes in insn with uid = 60.
deleting insn with uid = 20.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)

Pass 0 for finding allocno costs

    a4 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 53(l0): point = 0
   Insn 47(l0): point = 2
   Insn 40(l0): point = 5
   Insn 39(l0): point = 7
   Insn 37(l0): point = 10
   Insn 36(l0): point = 12
   Insn 57(l0): point = 15
   Insn 22(l0): point = 17
   Insn 60(l0): point = 19
   Insn 21(l0): point = 21
   Insn 18(l0): point = 24
   Insn 17(l0): point = 26
   Insn 4(l0): point = 28
   Insn 3(l0): point = 30
 a0(r143): [24..26] [8..14]
 a1(r135): [24..30] [13..14]
 a2(r144): [18..19]
 a3(r136): [18..28]
 a4(r145): [18..21]
Compressing live ranges: from 33 to 10 - 30%
Ranges after the compression:
 a0(r143): [6..7] [0..2]
 a1(r135): [6..9] [1..2]
 a2(r144): [3..4]
 a3(r136): [3..8]
 a4(r145): [3..5]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r143,l0) conflicts: a1(r135,l0) a3(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r135,l0) conflicts: a0(r143,l0) a3(r136,l0)
;;     total conflict hard regs: 2 14
;;     conflict hard regs: 2 14
;; a2(r144,l0) conflicts: a4(r145,l0) a3(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r136,l0) conflicts: a0(r143,l0) a1(r135,l0) a2(r144,l0) a4(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r145,l0) conflicts: a2(r144,l0) a3(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=7, points=10
    allocnos=5, copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r143 1r135 2r144 3r136 4r145
    modified regnos: 135 136 143 144 145
    border:
    Pressure: GENERAL_REGS=4
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
      Pushing a4(r145,l0)
      Pushing a3(r136,l0)
      Pushing a2(r144,l0)
      Pushing a0(r143,l0)
      Pushing a1(r135,l0)
      Popping a1(r135,l0)  -- assign reg 1
      Popping a0(r143,l0)  -- assign reg 0
      Popping a2(r144,l0)  -- assign reg 3
      Popping a3(r136,l0)  -- assign reg 2
      Popping a4(r145,l0)  -- assign reg 1
Disposition:
    1:r135 l0     1    3:r136 l0     2    0:r143 l0     0    2:r144 l0     3
    4:r145 l0     1
New iteration of spill/restore move
+++Costs: overall -12000, reg -12000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 2, 13, 14, dead_or_set: 1, 135
insn=4, live_throughout: 13, 14, 135, dead_or_set: 2, 136
insn=17, live_throughout: 13, 14, 135, 136, dead_or_set: 143
insn=18, live_throughout: 13, 14, 135, 136, 143, dead_or_set: 
insn=21, live_throughout: 13, 14, 136, dead_or_set: 145
insn=60, live_throughout: 13, 14, 136, 145, dead_or_set: 144
insn=22, live_throughout: 13, 14, dead_or_set: 136, 144, 145
insn=57, live_throughout: 13, 14, dead_or_set: 
insn=25, live_throughout: 13, 14, 135, 143, dead_or_set: 
insn=36, live_throughout: 13, 14, 143, dead_or_set: 135
insn=37, live_throughout: 13, 14, 143, dead_or_set: 
insn=39, live_throughout: 13, dead_or_set: 0, 143
insn=40, live_throughout: 13, dead_or_set: 0, 14
insn=41, live_throughout: 13, 14, dead_or_set: 
insn=47, live_throughout: 13, 14, dead_or_set: 0
insn=53, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 144: (insn_list:REG_DEP_TRUE 60 (nil))
init_insns for 145: (insn_list:REG_DEP_TRUE 21 (nil))
changing reg in insn 3
changing reg in insn 36
changing reg in insn 36
changing reg in insn 17
changing reg in insn 17
changing reg in insn 17
changing reg in insn 17
changing reg in insn 4
changing reg in insn 22
changing reg in insn 17
changing reg in insn 39
changing reg in insn 60
changing reg in insn 22
changing reg in insn 21
changing reg in insn 22
Spilling for insn 22.

Reloads for insn # 22
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (mult:SI (reg/v/f:SI 2 r2 [orig:136 hcpu ] [136])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [144])) [0 vfp_current_hw_state S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (mult:SI (reg/v/f:SI 2 r2 [orig:136 hcpu ] [136])
                                                            (const_int 4 [0x4]))
                                                        (reg/f:SI 3 r3 [144])) [0 vfp_current_hw_state S4 A32])
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 39.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 40.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


vfp_hotplug

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,3u} r1={3d,7u} r2={2d,1u} r3={3d,1u} r12={2d} r13={1d,7u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 152{130d,22u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 9 2 NOTE_INSN_DELETED)

(note 9 8 11 2 NOTE_INSN_DELETED)

(note 11 9 12 2 NOTE_INSN_DELETED)

(note 12 11 14 2 NOTE_INSN_DELETED)

(note 14 12 15 2 NOTE_INSN_DELETED)

(note 15 14 16 2 NOTE_INSN_DELETED)

(note 16 15 17 2 NOTE_INSN_DELETED)

(insn 17 16 18 2 arch/arm/vfp/vfpmodule.c:565 (parallel [
            (set (reg:CC_DEQ 24 cc)
                (compare:CC_DEQ (ior:SI (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                            (const_int 24 [0x18]))
                        (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                            (const_int 8 [0x8])))
                    (const_int 0 [0x0])))
            (set (reg:SI 0 r0 [143])
                (ior:SI (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                        (const_int 24 [0x18]))
                    (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                        (const_int 8 [0x8]))))
        ]) 287 {*ior_scc_scc_cmp} (nil))

(jump_insn 18 17 19 2 arch/arm/vfp/vfpmodule.c:565 (set (pc)
        (if_then_else (eq (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (label_ref 25)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 19 18 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 21 19 60 3 arch/arm/vfp/vfpmodule.c:567 (set (reg:SI 1 r1 [145])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 60 21 22 3 arch/arm/vfp/vfpmodule.c:567 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 22 60 57 3 arch/arm/vfp/vfpmodule.c:567 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v/f:SI 2 r2 [orig:136 hcpu ] [136])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [144])) [0 vfp_current_hw_state S4 A32])
        (reg:SI 1 r1 [145])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 57 22 58 3 (set (pc)
        (label_ref 41)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%] 

(barrier 58 57 25)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 25 58 26 4 65 "" [1 uses])

(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 27 26 28 4 NOTE_INSN_DELETED)

(note 28 27 30 4 NOTE_INSN_DELETED)

(note 30 28 31 4 NOTE_INSN_DELETED)

(note 31 30 33 4 NOTE_INSN_DELETED)

(note 33 31 34 4 NOTE_INSN_DELETED)

(note 34 33 35 4 NOTE_INSN_DELETED)

(note 35 34 36 4 NOTE_INSN_DELETED)

(insn 36 35 37 4 arch/arm/vfp/vfpmodule.c:568 (set (reg:CC_DEQ 24 cc)
        (compare:CC_DEQ (ior:SI (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                    (const_int 26 [0x1a]))
                (eq:SI (reg/v:SI 1 r1 [orig:135 action ] [135])
                    (const_int 10 [0xa])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (nil))

(jump_insn 37 36 38 4 arch/arm/vfp/vfpmodule.c:568 (set (pc)
        (if_then_else (eq (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  6 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  4 [39.0%]  (fallthru)
(note 38 37 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 40 38 41 5 arch/arm/vfp/vfpmodule.c:569 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_enable") [flags 0x3] <function_decl 0x110b2180 vfp_enable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 4 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [61.0%] 
;; Pred edge  3 [100.0%] 
(code_label 41 40 42 6 66 "" [2 uses])

(note 42 41 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 47 42 53 6 arch/arm/vfp/vfpmodule.c:571 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 53 47 59 6 arch/arm/vfp/vfpmodule.c:571 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 59 53 61 NOTE_INSN_DELETED)

(note 61 59 0 NOTE_INSN_DELETED)


;; Function vfp_pm_resume (vfp_pm_resume)[0:838]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 9(l0): point = 0
   Insn 8(l0): point = 2
   Insn 7(l0): point = 4
   Insn 6(l0): point = 6
   Insn 5(l0): point = 8
 a0(r134): [1..2]
 a1(r133): [3..4]
Compressing live ranges: from 11 to 4 - 36%
Ranges after the compression:
 a0(r134): [0..1]
 a1(r133): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a0(r134)<->a1(r133)@125:shuffle
  regions=1, blocks=3, points=4
    allocnos=2, copies=1, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r134 1r133
    modified regnos: 133 134
    border:
    Pressure: GENERAL_REGS=2
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
      Pushing a1(r133,l0)
      Pushing a0(r134,l0)
      Popping a0(r134,l0)  -- assign reg 3
      Popping a1(r133,l0)  -- assign reg 3
Disposition:
    1:r133 l0     3    0:r134 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 0
insn=6, live_throughout: 13, dead_or_set: 0, 14
insn=7, live_throughout: 13, 14, dead_or_set: 133
insn=8, live_throughout: 13, 14, dead_or_set: 133, 134
insn=9, live_throughout: 13, 14, dead_or_set: 134
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_pm_resume

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r3={4d,2u} r12={2d} r13={1d,3u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 136{129d,7u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 arch/arm/vfp/vfpmodule.c:476 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 6 5 7 2 arch/arm/vfp/vfpmodule.c:476 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_enable") [flags 0x3] <function_decl 0x110b2180 vfp_enable>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 7 6 8 2 arch/arm/vfp/vfpmodule.c:479 (parallel [
            (set (reg/v:SI 3 r3 [orig:133 __v ] [133])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6066800))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 8 7 9 2 arch/arm/vfp/vfpmodule.c:479 (set (reg:SI 3 r3 [134])
        (and:SI (reg/v:SI 3 r3 [orig:133 __v ] [133])
            (const_int -1073741825 [0xffffffffbfffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 9 8 17 2 arch/arm/vfp/vfpmodule.c:479 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [134])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6066800)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 17 9 18 NOTE_INSN_DELETED)

(note 18 17 0 NOTE_INSN_DELETED)


;; Function vfp_emulate_instruction (vfp_emulate_instruction)[0:834]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 50(l0): point = 0
   Insn 44(l0): point = 2
   Insn 36(l0): point = 5
   Insn 56(l0): point = 8
   Insn 31(l0): point = 10
   Insn 30(l0): point = 12
   Insn 54(l0): point = 15
   Insn 23(l0): point = 17
   Insn 22(l0): point = 19
   Insn 18(l0): point = 22
   Insn 17(l0): point = 24
   Insn 16(l0): point = 26
   Insn 14(l0): point = 29
   Insn 13(l0): point = 31
   Insn 10(l0): point = 34
   Insn 9(l0): point = 36
   Insn 8(l0): point = 38
   Insn 2(l0): point = 40
 a0(r133): [15..17] [8..10] [3..5]
 a1(r140): [25..26]
 a2(r135): [27..40]
 a3(r138): [37..38]
Compressing live ranges: from 43 to 12 - 27%
Ranges after the compression:
 a0(r133): [4..5] [2..3] [0..1]
 a1(r140): [6..7]
 a2(r135): [8..11]
 a3(r138): [9..10]
+++Allocating 16 bytes for conflict table (uncompressed size 32)
;; a0(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r140,l0) conflicts:
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a2(r135,l0) conflicts: a3(r138,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r138,l0) conflicts: a2(r135,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  cp0:a1(r140)<->a2(r135)@125:shuffle
  regions=1, blocks=9, points=12
    allocnos=4, copies=1, conflicts=2, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 8 7 6 5 4 3 2
    all: 0r133 1r140 2r135 3r138
    modified regnos: 133 135 138 140
    border:
    Pressure: GENERAL_REGS=5
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
      Pushing a0(r133,l0)
      Pushing a1(r140,l0)
      Pushing a3(r138,l0)
      Pushing a2(r135,l0)
      Popping a2(r135,l0)  -- assign reg 3
      Popping a3(r138,l0)  -- assign reg 2
      Popping a1(r140,l0)  -- assign reg 3
      Popping a0(r133,l0)  -- assign reg 0
Disposition:
    0:r133 l0     0    2:r135 l0     3    3:r138 l0     2    1:r140 l0     3
New iteration of spill/restore move
+++Costs: overall -8250, reg -8250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 0, 1, 13, 14, dead_or_set: 135
insn=8, live_throughout: 0, 1, 13, 14, 135, dead_or_set: 138
insn=9, live_throughout: 0, 1, 13, 14, 135, dead_or_set: 138
insn=10, live_throughout: 0, 1, 13, 14, 135, dead_or_set: 
insn=13, live_throughout: 0, 1, 13, 14, 135, dead_or_set: 
insn=14, live_throughout: 0, 1, 13, 14, 135, dead_or_set: 
insn=16, live_throughout: 0, 1, 13, dead_or_set: 135, 140
insn=17, live_throughout: 0, 1, 13, dead_or_set: 140
insn=18, live_throughout: 0, 1, 13, dead_or_set: 
insn=22, live_throughout: 13, dead_or_set: 0, 1, 14
insn=23, live_throughout: 13, 14, dead_or_set: 0, 133
insn=54, live_throughout: 13, 14, 133, dead_or_set: 
insn=26, live_throughout: 0, 1, 13, dead_or_set: 
insn=30, live_throughout: 13, dead_or_set: 0, 1, 14
insn=31, live_throughout: 13, 14, dead_or_set: 0, 133
insn=56, live_throughout: 13, 14, 133, dead_or_set: 
insn=34, live_throughout: 13, 14, dead_or_set: 
insn=36, live_throughout: 13, 14, dead_or_set: 133
insn=37, live_throughout: 13, 14, 133, dead_or_set: 
insn=44, live_throughout: 13, 14, dead_or_set: 0, 133
insn=50, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 36
changing reg in insn 31
changing reg in insn 23
changing reg in insn 44
changing reg in insn 2
changing reg in insn 13
changing reg in insn 16
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 16
changing reg in insn 17
deleting insn with uid = 23.
deleting insn with uid = 31.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 30.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 15 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)


vfp_emulate_instruction

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,6u} r1={3d,2u} r2={4d,1u} r3={5d,4u} r12={3d} r13={1d,10u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 276{249d,27u,0e} in 16{14 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 5 8 2 arch/arm/vfp/vfpmodule.c:293 (set (reg/v:SI 3 r3 [orig:135 inst ] [135])
        (reg:SI 0 r0 [ inst ])) 167 {*arm_movsi_insn} (nil))

(insn 8 2 9 2 arch/arm/vfp/vfpmodule.c:298 (set (reg:SI 2 r2 [138])
        (and:SI (reg/v:SI 3 r3 [orig:135 inst ] [135])
            (const_int 251658240 [0xf000000]))) 67 {*arm_andsi3_insn} (nil))

(insn 9 8 10 2 arch/arm/vfp/vfpmodule.c:298 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [138])
            (const_int 234881024 [0xe000000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 10 9 11 2 arch/arm/vfp/vfpmodule.c:298 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6218 [0x184a])
        (nil)))
;; End of basic block 2 -> ( 3 7)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [37.8%]  (fallthru)
;; Succ edge  7 [62.2%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [37.8%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 12 11 13 3 NOTE_INSN_DELETED)

(insn 13 12 14 3 arch/arm/vfp/vfpmodule.c:299 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:135 inst ] [135])
                (const_int 1 [0x1])
                (const_int 4 [0x4]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 14 13 15 3 arch/arm/vfp/vfpmodule.c:299 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  4 [61.0%]  (fallthru)
;; Succ edge  7 [39.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [61.0%]  (fallthru)
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 16 15 17 4 arch/arm/vfp/vfpmodule.c:303 (set (reg:SI 3 r3 [140])
        (and:SI (reg/v:SI 3 r3 [orig:135 inst ] [135])
            (const_int 3840 [0xf00]))) 67 {*arm_andsi3_insn} (nil))

(insn 17 16 18 4 arch/arm/vfp/vfpmodule.c:303 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [140])
            (const_int 2560 [0xa00]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 18 17 19 4 arch/arm/vfp/vfpmodule.c:303 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


;; Succ edge  5 [19.9%]  (fallthru)
;; Succ edge  6 [80.1%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [19.9%]  (fallthru)
(note 19 18 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 22 19 54 5 arch/arm/vfp/vfpmodule.c:304 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_single_cpdo") [flags 0x41] <function_decl 0x1103cf00 vfp_single_cpdo>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 54 22 55 5 (set (pc)
        (label_ref 37)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 55 54 26)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  4 [80.1%] 
(code_label 26 55 27 6 74 "" [1 uses])

(note 27 26 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(call_insn 30 27 56 6 arch/arm/vfp/vfpmodule.c:306 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_cpdo") [flags 0x41] <function_decl 0x11050000 vfp_double_cpdo>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 56 30 57 6 (set (pc)
        (label_ref 37)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 57 56 34)

;; Start of basic block ( 2 3) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [62.2%] 
;; Pred edge  3 [39.0%] 
(code_label 34 57 35 7 73 "" [2 uses])

(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 36 35 37 7 arch/arm/vfp/vfpmodule.c:294 (set (reg/v:SI 0 r0 [orig:133 exceptions ] [133])
        (const_int -257 [0xfffffffffffffeff])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 5 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  6 [100.0%] 
(code_label 37 36 38 8 75 "" [2 uses])

(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 39 38 44 8 NOTE_INSN_DELETED)

(insn 44 39 50 8 arch/arm/vfp/vfpmodule.c:323 (set (reg/i:SI 0 r0)
        (and:SI (reg/v:SI 0 r0 [orig:133 exceptions ] [133])
            (const_int -257 [0xfffffffffffffeff]))) 67 {*arm_andsi3_insn} (nil))

(insn 50 44 58 8 arch/arm/vfp/vfpmodule.c:323 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 58 50 59 NOTE_INSN_DELETED)

(note 59 58 0 NOTE_INSN_DELETED)


;; Function vfp_raise_sigfpe (vfp_raise_sigfpe)[0:831]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 47.
verify found no changes in insn with uid = 47.
deleting insn with uid = 21.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a2 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:82000
  a1(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:82000
  a1(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 36(l0): point = 0
   Insn 35(l0): point = 2
   Insn 28(l0): point = 4
   Insn 27(l0): point = 6
   Insn 26(l0): point = 8
   Insn 34(l0): point = 10
   Insn 22(l0): point = 12
   Insn 47(l0): point = 14
   Insn 33(l0): point = 16
   Insn 12(l0): point = 18
   Insn 16(l0): point = 20
   Insn 15(l0): point = 22
   Insn 20(l0): point = 24
   Insn 11(l0): point = 26
   Insn 13(l0): point = 28
   Insn 14(l0): point = 30
   Insn 45(l0): point = 32
   Insn 44(l0): point = 34
   Insn 10(l0): point = 36
   Insn 9(l0): point = 38
   Insn 8(l0): point = 40
   Insn 3(l0): point = 42
   Insn 2(l0): point = 44
   Insn 7(l0): point = 46
 a0(r142): [3..34]
 a1(r148): [5..8]
 a2(r149): [5..6]
 a3(r138): [11..46]
 a4(r144): [13..24]
 a5(r145): [13..14]
 a6(r139): [17..26]
 a7(r141): [21..22]
 a8(r140): [23..30]
 a9(r136): [29..44]
 a10(r137): [31..42]
Compressing live ranges: from 49 to 20 - 40%
Ranges after the compression:
 a0(r142): [0..16]
 a1(r148): [1..3]
 a2(r149): [1..2]
 a3(r138): [4..19]
 a4(r144): [5..11]
 a5(r145): [5..6]
 a6(r139): [7..12]
 a7(r141): [8..9]
 a8(r140): [10..14]
 a9(r136): [13..18]
 a10(r137): [15..17]
+++Allocating 88 bytes for conflict table (uncompressed size 88)
;; a0(r142,l0) conflicts: a2(r149,l0) a1(r148,l0) a3(r138,l0) a5(r145,l0) a4(r144,l0) a6(r139,l0) a7(r141,l0) a8(r140,l0) a9(r136,l0) a10(r137,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a1(r148,l0) conflicts: a0(r142,l0) a2(r149,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a2(r149,l0) conflicts: a0(r142,l0) a1(r148,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a3(r138,l0) conflicts: a0(r142,l0) a5(r145,l0) a4(r144,l0) a6(r139,l0) a7(r141,l0) a8(r140,l0) a9(r136,l0) a10(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r144,l0) conflicts: a0(r142,l0) a3(r138,l0) a5(r145,l0) a6(r139,l0) a7(r141,l0) a8(r140,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a5(r145,l0) conflicts: a0(r142,l0) a3(r138,l0) a4(r144,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a6(r139,l0) conflicts: a0(r142,l0) a3(r138,l0) a4(r144,l0) a7(r141,l0) a8(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r141,l0) conflicts: a0(r142,l0) a3(r138,l0) a4(r144,l0) a6(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r140,l0) conflicts: a0(r142,l0) a3(r138,l0) a4(r144,l0) a6(r139,l0) a9(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r136,l0) conflicts: a0(r142,l0) a3(r138,l0) a8(r140,l0) a10(r137,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a10(r137,l0) conflicts: a0(r142,l0) a3(r138,l0) a9(r136,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  cp0:a7(r141)<->a8(r140)@125:shuffle
  regions=1, blocks=3, points=20
    allocnos=11, copies=1, conflicts=0, ranges=11

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r142 1r148 2r149 3r138 4r144 5r145 6r139 7r141 8r140 9r136 10r137
    modified regnos: 136 137 138 139 140 141 142 144 145 148 149
    border:
    Pressure: GENERAL_REGS=6
    Reg 142 of GENERAL_REGS has 2 regs less
    Reg 148 of GENERAL_REGS has 2 regs less
    Reg 149 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
      Pushing a8(r140,l0)
      Pushing a7(r141,l0)
      Pushing a6(r139,l0)
      Pushing a5(r145,l0)
      Pushing a4(r144,l0)
      Pushing a2(r149,l0)
      Pushing a1(r148,l0)
      Pushing a0(r142,l0)
      Pushing a10(r137,l0)
      Pushing a9(r136,l0)
      Pushing a3(r138,l0)
      Popping a3(r138,l0)  -- assign reg 4
      Popping a9(r136,l0)  -- assign reg 5
      Popping a10(r137,l0)  -- assign reg 6
      Popping a0(r142,l0)  -- assign reg 3
      Popping a1(r148,l0)  -- assign reg 2
      Popping a2(r149,l0)  -- assign reg 12
      Popping a4(r144,l0)  -- assign reg 2
      Popping a5(r145,l0)  -- assign reg 1
      Popping a6(r139,l0)  -- assign reg 0
      Popping a7(r141,l0)  -- assign reg 1
      Popping a8(r140,l0)  -- assign reg 1
Disposition:
    9:r136 l0     5   10:r137 l0     6    3:r138 l0     4    6:r139 l0     0
    8:r140 l0     1    7:r141 l0     1    0:r142 l0     3    4:r144 l0     2
    5:r145 l0     1    1:r148 l0     2    2:r149 l0    12
New iteration of spill/restore move
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 1, 13, dead_or_set: 138
insn=2, live_throughout: 1, 13, 138, dead_or_set: 0, 136
insn=3, live_throughout: 13, 136, 138, dead_or_set: 1, 137
insn=8, live_throughout: 13, 136, 137, 138, dead_or_set: 0
insn=9, live_throughout: 0, 13, 136, 137, 138, dead_or_set: 1
insn=10, live_throughout: 13, 136, 137, 138, dead_or_set: 0, 1, 14
insn=44, live_throughout: 13, 136, 137, 138, dead_or_set: 142
insn=45, live_throughout: 13, 136, 137, 138, dead_or_set: 142
insn=14, live_throughout: 13, 136, 138, 142, dead_or_set: 137, 140
insn=13, live_throughout: 13, 138, 140, 142, dead_or_set: 136
insn=11, live_throughout: 13, 138, 140, 142, dead_or_set: 139
insn=20, live_throughout: 13, 138, 139, 140, 142, dead_or_set: 144
insn=15, live_throughout: 13, 138, 139, 142, 144, dead_or_set: 140, 141
insn=16, live_throughout: 13, 138, 139, 142, 144, dead_or_set: 141
insn=12, live_throughout: 13, 138, 139, 142, 144, dead_or_set: 
insn=33, live_throughout: 13, 138, 142, 144, dead_or_set: 0, 139
insn=47, live_throughout: 0, 13, 138, 142, 144, dead_or_set: 145
insn=22, live_throughout: 0, 13, 138, 142, dead_or_set: 144, 145
insn=34, live_throughout: 0, 13, 142, dead_or_set: 1, 138
insn=26, live_throughout: 0, 1, 13, 142, dead_or_set: 148
insn=27, live_throughout: 0, 1, 13, 142, 148, dead_or_set: 149
insn=28, live_throughout: 0, 1, 13, 142, dead_or_set: 148, 149
insn=35, live_throughout: 0, 1, 13, dead_or_set: 2, 142
insn=36, live_throughout: 13, dead_or_set: 0, 1, 2, 14
init_insns for 138: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 141: (insn_list:REG_DEP_TRUE 16 (nil))
init_insns for 144: (insn_list:REG_DEP_TRUE 20 (nil))
init_insns for 145: (insn_list:REG_DEP_TRUE 47 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 26 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 27 (nil))
changing reg in insn 2
changing reg in insn 13
changing reg in insn 3
changing reg in insn 14
changing reg in insn 7
changing reg in insn 34
changing reg in insn 8
changing reg in insn 11
changing reg in insn 33
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 45
changing reg in insn 44
changing reg in insn 45
changing reg in insn 35
changing reg in insn 26
changing reg in insn 20
changing reg in insn 26
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 47
changing reg in insn 22
changing reg in insn 26
changing reg in insn 28
changing reg in insn 27
changing reg in insn 28
Spilling for insn 44.
Using reg 2 for reload 0
Spilling for insn 13.
Spilling for insn 16.
Spilling for insn 12.
Spilling for insn 22.
Spilling for insn 28.

Reloads for insn # 44
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 13
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])

Reloads for insn # 16
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])

Reloads for insn # 22
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:144 <variable>.task ] [144])
                                                        (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:144 <variable>.task ] [144])
                                                        (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])

Reloads for insn # 28
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:148 <variable>.task ] [148])
                                                        (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:148 <variable>.task ] [148])
                                                        (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])
deleting insn with uid = 33.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_raise_sigfpe

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={5d,4u} r1={8d,6u} r2={7d,4u} r3={5d,4u,2d} r4={1d} r5={1d,1u} r6={1d,1u} r12={4d,1u} r13={1d,11u,3d} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 297{258d,33u,6e} in 24{22 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 4 7 2 NOTE_INSN_DELETED)

(insn 7 18 2 2 arch/arm/vfp/vfpmodule.c:217 discrim 1 (set (reg/f:SI 4 r4 [138])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 2 7 3 2 arch/arm/vfp/vfpmodule.c:214 (set (reg/v:SI 5 r5 [orig:136 sicode ] [136])
        (reg:SI 0 r0 [ sicode ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 8 2 arch/arm/vfp/vfpmodule.c:214 (set (reg/v/f:SI 6 r6 [orig:137 regs ] [137])
        (reg:SI 1 r1 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 8 3 9 2 arch/arm/vfp/vfpmodule.c:217 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 9 8 10 2 arch/arm/vfp/vfpmodule.c:217 discrim 1 (set (reg:SI 1 r1)
        (const_int 128 [0x80])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 9 49 2 arch/arm/vfp/vfpmodule.c:217 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 49 10 44 2 arch/arm/vfp/vfpmodule.c:227 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 44 49 45 2 arch/arm/vfp/vfpmodule.c:227 (set (reg:SI 3 r3 [142])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 45 44 14 2 arch/arm/vfp/vfpmodule.c:227 (set (reg:SI 3 r3 [142])
        (and:SI (reg:SI 3 r3 [142])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 14 45 13 2 arch/arm/vfp/vfpmodule.c:221 (set (reg:SI 1 r1 [orig:140 <variable>.uregs+60 ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:137 regs ] [137])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 14 11 2 arch/arm/vfp/vfpmodule.c:220 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_code+0 S4 A64])
        (reg/v:SI 5 r5 [orig:136 sicode ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 11 13 20 2 arch/arm/vfp/vfpmodule.c:219 (set (reg:SI 0 r0 [139])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 8 [0x8])
        (nil)))

(insn 20 11 15 2 arch/arm/vfp/vfpmodule.c:227 (set (reg/f:SI 2 r2 [orig:144 <variable>.task ] [144])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 15 20 16 2 arch/arm/vfp/vfpmodule.c:221 (set (reg:SI 1 r1 [141])
        (plus:SI (reg:SI 1 r1 [orig:140 <variable>.uregs+60 ] [140])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (nil)))

(insn 16 15 12 2 arch/arm/vfp/vfpmodule.c:221 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg:SI 1 r1 [141])) 167 {*arm_movsi_insn} (nil))

(insn 12 16 47 2 arch/arm/vfp/vfpmodule.c:219 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 info.si_signo+0 S4 A64])
        (reg:SI 0 r0 [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(insn 47 12 22 2 arch/arm/vfp/vfpmodule.c:227 (set (reg:SI 1 r1 [145])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 22 47 34 2 arch/arm/vfp/vfpmodule.c:227 (set (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:144 <variable>.task ] [144])
                (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])
        (reg:SI 1 r1 [145])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 34 22 26 2 arch/arm/vfp/vfpmodule.c:230 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 26 34 27 2 arch/arm/vfp/vfpmodule.c:228 (set (reg/f:SI 2 r2 [orig:148 <variable>.task ] [148])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])
        (nil)))

(insn 27 26 28 2 arch/arm/vfp/vfpmodule.c:228 (set (reg:SI 12 ip [149])
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 6 [0x6])
        (nil)))

(insn 28 27 35 2 arch/arm/vfp/vfpmodule.c:228 (set (mem/s/j:SI (plus:SI (reg/f:SI 2 r2 [orig:148 <variable>.task ] [148])
                (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 6 [0x6])
        (nil)))

(insn 35 28 36 2 arch/arm/vfp/vfpmodule.c:230 (set (reg:SI 2 r2)
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [142])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 36 35 46 2 arch/arm/vfp/vfpmodule.c:230 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("send_sig_info") [flags 0x41] <function_decl 0x1100d280 send_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 46 36 48 NOTE_INSN_DELETED)

(note 48 46 0 NOTE_INSN_DELETED)


;; Function vfp_raise_exceptions (vfp_raise_exceptions)[0:833]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 168.
verify found no changes in insn with uid = 168.
deleting insn with uid = 152.
scanning new insn with uid = 169.
verify found no changes in insn with uid = 169.
deleting insn with uid = 149.
scanning new insn with uid = 170.
verify found no changes in insn with uid = 170.
deleting insn with uid = 146.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 34 count 44 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 34 count 46 (  1.9)

Pass 0 for finding allocno costs

    a4 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r148,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a3(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a4(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a15(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a16(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a17(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS

  a0(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a3(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a4(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a15(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a16(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a17(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 135(l0): point = 1
   Insn 134(l0): point = 3
   Insn 133(l0): point = 5
   Insn 130(l0): point = 8
   Insn 129(l0): point = 10
   Insn 160(l0): point = 13
   Insn 124(l0): point = 15
   Insn 122(l0): point = 18
   Insn 121(l0): point = 20
   Insn 118(l0): point = 23
   Insn 117(l0): point = 25
   Insn 154(l0): point = 28
   Insn 168(l0): point = 30
   Insn 153(l0): point = 32
   Insn 107(l0): point = 35
   Insn 106(l0): point = 37
   Insn 151(l0): point = 40
   Insn 169(l0): point = 42
   Insn 150(l0): point = 44
   Insn 96(l0): point = 47
   Insn 95(l0): point = 49
   Insn 148(l0): point = 52
   Insn 170(l0): point = 54
   Insn 147(l0): point = 56
   Insn 85(l0): point = 59
   Insn 84(l0): point = 61
   Insn 80(l0): point = 64
   Insn 158(l0): point = 67
   Insn 75(l0): point = 69
   Insn 73(l0): point = 72
   Insn 72(l0): point = 74
   Insn 69(l0): point = 77
   Insn 68(l0): point = 79
   Insn 66(l0): point = 81
   Insn 65(l0): point = 83
   Insn 62(l0): point = 86
   Insn 60(l0): point = 89
   Insn 59(l0): point = 91
   Insn 54(l0): point = 94
   Insn 52(l0): point = 96
   Insn 53(l0): point = 98
   Insn 29(l0): point = 101
   Insn 25(l0): point = 103
   Insn 27(l0): point = 105
   Insn 26(l0): point = 107
   Insn 23(l0): point = 109
   Insn 22(l0): point = 111
   Insn 28(l0): point = 113
   Insn 21(l0): point = 115
   Insn 31(l0): point = 117
   Insn 19(l0): point = 119
   Insn 30(l0): point = 121
   Insn 20(l0): point = 123
   Insn 15(l0): point = 126
   Insn 9(l0): point = 128
   Insn 8(l0): point = 130
   Insn 7(l0): point = 132
   Insn 14(l0): point = 134
   Insn 13(l0): point = 136
   Insn 6(l0): point = 138
   Insn 50(l1): point = 141
   Insn 49(l1): point = 143
   Insn 45(l1): point = 145
   Insn 157(l1): point = 147
   Insn 40(l1): point = 149
   Insn 47(l1): point = 151
   Insn 44(l1): point = 153
   Insn 46(l1): point = 155
   Insn 42(l1): point = 157
   Insn 43(l1): point = 159
   Insn 37(l1): point = 161
   Insn 36(l1): point = 163
   Insn 35(l1): point = 165
   Insn 34(l1): point = 167
   Insn 33(l1): point = 169
 a0(r148): [99..128] [4..93]
 a1(r144): [67..69] [18..64] [6..15]
 a2(r137): [21..83]
 a3(r145): [126..138] [26..93]
 a4(r167): [29..30]
 a5(r166): [41..42]
 a6(r165): [53..54]
 a7(r147): [126..130] [84..93]
 a8(r143): [106..109]
 a9(r142): [108..111]
 a10(r146): [114..132]
 a11(r141): [101..117]
 a12(r138): [101..121]
 a13(r149): [135..136]
 a14(r138): [141..171]
 a15(r141): [141..171]
 a16(r148): [141..171]
 a17(r139): [160..165]
 Rebuilding regno allocno list for 139
Compressing live ranges: from 172 to 38 - 22%
Ranges after the compression:
 a0(r148): [34..37] [18..28] [0..17]
 a1(r144): [13..14] [3..12] [1..2]
 a2(r137): [4..15]
 a3(r145): [27..33] [5..17]
 a4(r167): [6..7]
 a5(r166): [8..9]
 a6(r165): [10..11]
 a7(r147): [27..29] [16..17]
 a8(r143): [20..22]
 a9(r142): [21..23]
 a10(r146): [24..30]
 a11(r141): [34..37] [19..25]
 a12(r138): [34..37] [19..26]
 a13(r149): [31..32]
 a17(r139): [35..36]
+++Allocating 120 bytes for conflict table (uncompressed size 144)
;; a0(r148,l0) conflicts: a1(r144,l0) a2(r137,l0) a3(r145,l0) a4(r167,l0) a5(r166,l0) a6(r165,l0) a7(r147,l0) a11(r141,l0) a12(r138,l0) a8(r143,l0) a9(r142,l0) a10(r146,l0) a17(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r144,l0) conflicts: a0(r148,l0) a2(r137,l0) a3(r145,l0) a4(r167,l0) a5(r166,l0) a6(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r137,l0) conflicts: a0(r148,l0) a1(r144,l0) a3(r145,l0) a4(r167,l0) a5(r166,l0) a6(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r145,l0) conflicts: a0(r148,l0) a1(r144,l0) a2(r137,l0) a4(r167,l0) a5(r166,l0) a6(r165,l0) a7(r147,l0) a10(r146,l0) a13(r149,l0)
;;     total conflict hard regs: 1-3 14
;;     conflict hard regs: 1-3 14
;; a4(r167,l0) conflicts: a0(r148,l0) a1(r144,l0) a2(r137,l0) a3(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r166,l0) conflicts: a0(r148,l0) a1(r144,l0) a2(r137,l0) a3(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r165,l0) conflicts: a0(r148,l0) a1(r144,l0) a2(r137,l0) a3(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r147,l0) conflicts: a0(r148,l0) a3(r145,l0) a10(r146,l0)
;;     total conflict hard regs: 3 14
;;     conflict hard regs: 3 14
;; a8(r143,l0) conflicts: a0(r148,l0) a11(r141,l0) a12(r138,l0) a9(r142,l0)
;;     total conflict hard regs: 1 3
;;     conflict hard regs: 1 3
;; a9(r142,l0) conflicts: a0(r148,l0) a11(r141,l0) a12(r138,l0) a8(r143,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a10(r146,l0) conflicts: a0(r148,l0) a3(r145,l0) a7(r147,l0) a11(r141,l0) a12(r138,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a11(r141,l0) conflicts: a0(r148,l0) a12(r138,l0) a8(r143,l0) a9(r142,l0) a10(r146,l0) a17(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a12(r138,l0) conflicts: a0(r148,l0) a11(r141,l0) a8(r143,l0) a9(r142,l0) a10(r146,l0) a17(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a13(r149,l0) conflicts: a3(r145,l0)
;;     total conflict hard regs: 1-3 14
;;     conflict hard regs: 1-3 14
;; a17(r139,l0) conflicts: a0(r148,l0) a11(r141,l0) a12(r138,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  cp0:a2(r137)<->a7(r147)@125:shuffle
  regions=2, blocks=24, points=38
    allocnos=18, copies=1, conflicts=1, ranges=23

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r148 1r144 2r137 3r145 4r167 5r166 6r165 7r147 8r143 9r142 10r146 11r141 12r138 13r149 17r139
    modified regnos: 137 138 139 141 142 143 144 145 146 147 148 149 165 166 167
    border:
    Pressure: GENERAL_REGS=8
    Reg 148 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 4 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 2 regs less
    Reg 143 of GENERAL_REGS has 2 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 149 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 2 regs less
      Pushing a9(r142,l0)
      Pushing a6(r165,l0)
      Pushing a5(r166,l0)
      Pushing a4(r167,l0)
      Pushing a2(r137,l0)
      Pushing a1(r144,l0)
      Pushing a17(r139,l0)
      Pushing a8(r143,l0)
      Pushing a7(r147,l0)
      Pushing a13(r149,l0)
      Pushing a3(r145,l0)
      Pushing a10(r146,l0)
      Pushing a0(r148,l0)
      Pushing a12(r138,l0)
      Pushing a11(r141,l0)
      Popping a11(r141,l0)  -- assign reg 4
      Popping a12(r138,l0)  -- assign reg 5
      Popping a0(r148,l0)  -- assign reg 6
      Popping a10(r146,l0)  -- assign reg 7
      Popping a3(r145,l0)  -- assign reg 0
      Popping a13(r149,l0)  -- assign reg 12
      Popping a7(r147,l0)  -- assign reg 2
      Popping a8(r143,l0)  -- assign reg 2
      Popping a17(r139,l0)  -- assign reg 7
      Popping a1(r144,l0)  -- assign reg 3
      Popping a2(r137,l0)  -- assign reg 2
      Popping a4(r167,l0)  -- assign reg 1
      Popping a5(r166,l0)  -- assign reg 1
      Popping a6(r165,l0)  -- assign reg 1
      Popping a9(r142,l0)  -- assign reg 1
Disposition:
    2:r137 l0     2   12:r138 l0     5   17:r139 l0     7   11:r141 l0     4
    9:r142 l0     1    8:r143 l0     2    1:r144 l0     3    3:r145 l0     0
   10:r146 l0     7    7:r147 l0     2    0:r148 l0     6   13:r149 l0    12
    6:r165 l0     1    5:r166 l0     1    4:r167 l0     1
New iteration of spill/restore move
+++Costs: overall -16000, reg -16000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 1, 2, 3, 13, 14, dead_or_set: 0, 145
insn=13, live_throughout: 1, 2, 3, 13, 14, 145, dead_or_set: 149
insn=14, live_throughout: 1, 2, 3, 13, 14, 145, dead_or_set: 149
insn=7, live_throughout: 2, 3, 13, 14, 24, 145, dead_or_set: 1, 146
insn=8, live_throughout: 3, 13, 14, 24, 145, 146, dead_or_set: 2, 147
insn=9, live_throughout: 13, 14, 24, 145, 146, 147, dead_or_set: 3, 148
insn=15, live_throughout: 13, 14, 145, 146, 147, 148, dead_or_set: 
insn=20, live_throughout: 13, 146, 148, dead_or_set: 1
insn=30, live_throughout: 1, 13, 146, 148, dead_or_set: 138
insn=19, live_throughout: 1, 13, 138, 146, 148, dead_or_set: 0
insn=31, live_throughout: 0, 1, 13, 138, 146, 148, dead_or_set: 141
insn=21, live_throughout: 13, 138, 141, 146, 148, dead_or_set: 0, 1, 14
insn=28, live_throughout: 13, 138, 141, 148, dead_or_set: 3, 146
insn=22, live_throughout: 3, 13, 138, 141, 148, dead_or_set: 142
insn=23, live_throughout: 3, 13, 138, 141, 142, 148, dead_or_set: 143
insn=26, live_throughout: 3, 13, 138, 141, 143, 148, dead_or_set: 1, 142
insn=27, live_throughout: 1, 3, 13, 138, 141, 148, dead_or_set: 2, 143
insn=25, live_throughout: 1, 2, 3, 13, 138, 141, 148, dead_or_set: 0
insn=29, live_throughout: 13, 138, 141, 148, dead_or_set: 0, 1, 2, 3, 14
insn=48, live_throughout: 13, 138, 141, 148, dead_or_set: 
insn=33, live_throughout: 13, 138, 141, 148, dead_or_set: 0
insn=34, live_throughout: 13, 138, 141, 148, dead_or_set: 0, 14
insn=35, live_throughout: 13, 138, 141, 148, dead_or_set: 0, 139
insn=36, live_throughout: 13, 138, 139, 141, 148, dead_or_set: 0
insn=37, live_throughout: 13, 138, 139, 141, 148, dead_or_set: 0, 14
insn=43, live_throughout: 0, 13, 138, 141, 148, dead_or_set: 2, 139
insn=42, live_throughout: 0, 2, 13, 138, 141, 148, dead_or_set: 1
insn=46, live_throughout: 0, 1, 2, 13, 138, 148, dead_or_set: 141
insn=44, live_throughout: 0, 1, 2, 13, 138, 141, 148, dead_or_set: 3
insn=47, live_throughout: 0, 1, 2, 3, 13, 141, 148, dead_or_set: 138
insn=40, live_throughout: 1, 2, 3, 13, 138, 141, 148, dead_or_set: 0
insn=157, live_throughout: 1, 2, 3, 13, 138, 141, 148, dead_or_set: 0
insn=45, live_throughout: 13, 138, 141, 148, dead_or_set: 0, 1, 2, 3, 14
insn=49, live_throughout: 13, 14, 138, 141, 148, dead_or_set: 
insn=50, live_throughout: 13, 14, 138, 141, 148, dead_or_set: 
insn=53, live_throughout: 13, 14, dead_or_set: 1, 148
insn=52, live_throughout: 1, 13, 14, dead_or_set: 0
insn=54, live_throughout: 13, 14, dead_or_set: 0, 1
insn=56, live_throughout: 13, 14, 145, 147, 148, dead_or_set: 
insn=59, live_throughout: 13, 14, 145, 147, 148, dead_or_set: 
insn=60, live_throughout: 13, 14, 145, 147, 148, dead_or_set: 
insn=62, live_throughout: 13, 14, 145, 148, dead_or_set: 147
insn=63, live_throughout: 13, 14, 145, 147, 148, dead_or_set: 
insn=65, live_throughout: 13, 14, 145, 148, dead_or_set: 137, 147
insn=66, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 
insn=68, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 
insn=69, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 
insn=72, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 
insn=73, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 
insn=75, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 144
insn=158, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=78, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 
insn=80, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 144
insn=81, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=84, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=85, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=147, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=170, live_throughout: 13, 14, 24, 137, 144, 145, 148, dead_or_set: 165
insn=148, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 144, 165
insn=92, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=95, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=96, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=150, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=169, live_throughout: 13, 14, 24, 137, 144, 145, 148, dead_or_set: 166
insn=151, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 144, 166
insn=103, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=106, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=107, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=153, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=168, live_throughout: 13, 14, 24, 137, 144, 145, 148, dead_or_set: 167
insn=154, live_throughout: 13, 14, 137, 145, 148, dead_or_set: 144, 167
insn=114, live_throughout: 13, 14, 137, 144, 145, 148, dead_or_set: 
insn=117, live_throughout: 13, 14, 137, 144, 148, dead_or_set: 145
insn=118, live_throughout: 13, 14, 137, 144, 148, dead_or_set: 
insn=121, live_throughout: 13, 14, 144, 148, dead_or_set: 137
insn=122, live_throughout: 13, 14, 144, 148, dead_or_set: 
insn=124, live_throughout: 13, 14, 148, dead_or_set: 144
insn=160, live_throughout: 13, 14, 144, 148, dead_or_set: 
insn=127, live_throughout: 13, 14, 144, 148, dead_or_set: 
insn=129, live_throughout: 13, 14, 144, 148, dead_or_set: 
insn=130, live_throughout: 13, 14, 144, 148, dead_or_set: 
insn=131, live_throughout: 13, 14, 144, 148, dead_or_set: 
insn=133, live_throughout: 13, 14, 148, dead_or_set: 0, 144
insn=134, live_throughout: 0, 13, 14, dead_or_set: 1, 148
insn=135, live_throughout: 13, 14, dead_or_set: 0, 1
insn=142, live_throughout: 13, 14, dead_or_set: 
init_insns for 149: (insn_list:REG_DEP_TRUE 13 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 170 (nil))
init_insns for 166: (insn_list:REG_DEP_TRUE 169 (nil))
init_insns for 167: (insn_list:REG_DEP_TRUE 168 (nil))
changing reg in insn 65
changing reg in insn 153
changing reg in insn 150
changing reg in insn 147
changing reg in insn 121
changing reg in insn 72
changing reg in insn 66
changing reg in insn 47
changing reg in insn 30
changing reg in insn 47
changing reg in insn 44
changing reg in insn 36
changing reg in insn 35
changing reg in insn 43
changing reg in insn 46
changing reg in insn 31
changing reg in insn 49
changing reg in insn 46
changing reg in insn 42
changing reg in insn 33
changing reg in insn 22
changing reg in insn 26
changing reg in insn 23
changing reg in insn 27
changing reg in insn 154
changing reg in insn 151
changing reg in insn 148
changing reg in insn 124
changing reg in insn 80
changing reg in insn 75
changing reg in insn 154
changing reg in insn 151
changing reg in insn 148
changing reg in insn 133
changing reg in insn 129
changing reg in insn 6
changing reg in insn 117
changing reg in insn 106
changing reg in insn 95
changing reg in insn 84
changing reg in insn 68
changing reg in insn 59
changing reg in insn 65
changing reg in insn 14
changing reg in insn 14
changing reg in insn 7
changing reg in insn 28
changing reg in insn 62
changing reg in insn 8
changing reg in insn 65
changing reg in insn 62
changing reg in insn 9
changing reg in insn 134
changing reg in insn 53
changing reg in insn 13
changing reg in insn 14
changing reg in insn 170
changing reg in insn 148
changing reg in insn 169
changing reg in insn 151
changing reg in insn 168
changing reg in insn 154
Spilling for insn 40.

Reloads for insn # 40
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
deleting insn with uid = 6.
deleting insn with uid = 8.
deleting insn with uid = 26.
deleting insn with uid = 27.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 135.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 34 count 44 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 34 count 46 (  1.9)


vfp_raise_exceptions

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,17u,1d} r1={16d,9u} r2={12d,10u} r3={16d,8u} r4={2d,4u} r5={2d,3u} r6={1d,2u} r7={2d,2u} r12={9d,1u} r13={1d,31u} r14={6d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={24d,14u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 979{876d,102u,1e} in 71{64 regular + 7 call} insns.
(note 5 0 11 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 11 5 10 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 10 11 13 2 NOTE_INSN_FUNCTION_BEG)

(insn 13 10 14 2 arch/arm/vfp/vfpmodule.c:254 (set (reg:SI 12 ip [149])
        (const_int -257 [0xfffffffffffffeff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -257 [0xfffffffffffffeff])
        (nil)))

(insn 14 13 7 2 arch/arm/vfp/vfpmodule.c:254 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
            (reg:SI 12 ip [149]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
            (const_int -257 [0xfffffffffffffeff]))
        (nil)))

(insn 7 14 9 2 arch/arm/vfp/vfpmodule.c:249 (set (reg/v:SI 7 r7 [orig:146 inst ] [146])
        (reg:SI 1 r1 [ inst ])) 167 {*arm_movsi_insn} (nil))

(insn 9 7 15 2 arch/arm/vfp/vfpmodule.c:249 (set (reg/v/f:SI 6 r6 [orig:148 regs ] [148])
        (reg:SI 3 r3 [ regs ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 15 9 16 2 arch/arm/vfp/vfpmodule.c:254 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 56)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [0.0%]  (fallthru)
(note 16 15 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 20 16 30 3 arch/arm/vfp/vfpmodule.c:237 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11116ed0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x11116ed0>)
        (nil)))

(insn 30 20 19 3 arch/arm/vfp/vfpmodule.c:238 (set (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 19 30 31 3 arch/arm/vfp/vfpmodule.c:237 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x11116210>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x11116210>)
        (nil)))

(insn 31 19 21 3 arch/arm/vfp/vfpmodule.c:240 (set (reg/v:SI 4 r4 [orig:141 i ] [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 21 31 28 3 arch/arm/vfp/vfpmodule.c:237 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 28 21 22 3 arch/arm/vfp/vfpmodule.c:238 (set (reg:SI 3 r3)
        (reg/v:SI 7 r7 [orig:146 inst ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 22 28 23 3 arch/arm/vfp/vfpmodule.c:239 (parallel [
            (set (reg/v:SI 1 r1 [orig:142 __v ] [142])
                (asm_operands:SI ("mrc p10, 7, %0, cr8, cr0, 0 @ fmrx	%0, FPEXC") ("=r") 0 []
                     [] 6032489))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 23 22 25 3 arch/arm/vfp/vfpmodule.c:239 (parallel [
            (set (reg/v:SI 2 r2 [orig:143 __v ] [143])
                (asm_operands:SI ("mrc p10, 7, %0, cr1, cr0, 0 @ fmrx	%0, FPSCR") ("=r") 0 []
                     [] 6032502))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 25 23 29 3 arch/arm/vfp/vfpmodule.c:238 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11110fa0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x11110fa0>)
        (nil)))

(call_insn 29 25 48 3 arch/arm/vfp/vfpmodule.c:238 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [93.8%]  (dfs_back)
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 48 29 32 4 81 "" [1 uses])

(note 32 48 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 38 32 33 4 NOTE_INSN_DELETED)

(insn 33 38 34 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:141 i ] [141])) 167 {*arm_movsi_insn} (nil))

(call_insn 34 33 35 4 arch/arm/vfp/vfpmodule.c:241 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_float") [flags 0x41] <function_decl 0x11050b80 vfp_get_float>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 35 34 36 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 7 r7 [orig:139 D.16614 ] [139])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 36 35 37 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 0 r0)
        (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn 37 36 43 4 arch/arm/vfp/vfpmodule.c:241 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_float") [flags 0x41] <function_decl 0x11050b80 vfp_get_float>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 43 37 42 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 2 r2)
        (reg:SI 7 r7 [orig:139 D.16614 ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 42 43 46 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:141 i ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 46 42 44 4 arch/arm/vfp/vfpmodule.c:240 discrim 2 (set (reg/v:SI 4 r4 [orig:141 i ] [141])
        (plus:SI (reg/v:SI 4 r4 [orig:141 i ] [141])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn 44 46 47 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 3 r3)
        (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 47 44 40 4 arch/arm/vfp/vfpmodule.c:240 discrim 2 (set (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])
        (plus:SI (reg:SI 5 r5 [orig:138 ivtmp.558 ] [138])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (nil))

(insn 40 47 157 4 arch/arm/vfp/vfpmodule.c:241 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 157 40 45 4 arch/arm/vfp/vfpmodule.c:241 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11118c80>)) 167 {*arm_movsi_insn} (nil))

(call_insn 45 157 49 4 arch/arm/vfp/vfpmodule.c:241 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 49 45 50 4 arch/arm/vfp/vfpmodule.c:240 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:141 i ] [141])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 50 49 51 4 arch/arm/vfp/vfpmodule.c:240 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9375 [0x249f])
        (nil)))
;; End of basic block 4 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [93.8%]  (dfs_back)
;; Succ edge  5 [6.2%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  4 [6.2%]  (fallthru,loop_exit)
(note 51 50 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 53 51 52 5 arch/arm/vfp/vfpmodule.c:256 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 52 53 54 5 arch/arm/vfp/vfpmodule.c:256 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 54 52 55 5 arch/arm/vfp/vfpmodule.c:256 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_raise_sigfpe") [flags 0x3] <function_decl 0x1108cc80 vfp_raise_sigfpe>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 55 54 56)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 56 55 57 6 80 "" [1 uses])

(note 57 56 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 58 57 59 6 NOTE_INSN_DELETED)

(insn 59 58 60 6 arch/arm/vfp/vfpmodule.c:265 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                        (const_int -268435456 [0xfffffffff0000000]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 60 59 61 6 arch/arm/vfp/vfpmodule.c:265 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 61 60 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 62 61 63 7 arch/arm/vfp/vfpmodule.c:266 (set (reg/v:SI 2 r2 [orig:147 fpscr ] [147])
        (and:SI (reg/v:SI 2 r2 [orig:147 fpscr ] [147])
            (const_int 268435455 [0xfffffff]))) 67 {*arm_andsi3_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 63 62 64 8 82 "" [1 uses])

(note 64 63 67 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 67 64 65 8 NOTE_INSN_DELETED)

(insn 65 67 66 8 arch/arm/vfp/vfpmodule.c:268 (set (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
        (ior:SI (reg/v:SI 2 r2 [orig:147 fpscr ] [147])
            (reg/v:SI 0 r0 [orig:145 exceptions ] [145]))) 89 {*arm_iorsi3} (nil))

(insn 66 65 68 8 arch/arm/vfp/vfpmodule.c:270 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr1, cr0, 0 @ fmxr	FPSCR, %0") ("") 0 [
                    (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6036456)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 68 66 69 8 arch/arm/vfp/vfpmodule.c:279 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 69 68 70 8 arch/arm/vfp/vfpmodule.c:279 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 9 11)
;; lr  out 	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 70 69 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 71 70 72 9 NOTE_INSN_DELETED)

(insn 72 71 73 9 arch/arm/vfp/vfpmodule.c:279 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 9 [0x9]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 73 72 74 9 arch/arm/vfp/vfpmodule.c:279 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  9 [50.0%]  (fallthru)
(note 74 73 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 75 74 158 10 arch/arm/vfp/vfpmodule.c:279 discrim 2 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (const_int 196611 [0x30003])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 196611 [0x30003])
        (nil)))

(jump_insn 158 75 159 10 (set (pc)
        (label_ref 81)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 12)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%] 

(barrier 159 158 78)

;; Start of basic block ( 8 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 2 [r2] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  8 [50.0%] 
;; Pred edge  9 [50.0%] 
(code_label 78 159 79 11 83 "" [2 uses])

(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 80 79 81 11 arch/arm/vfp/vfpmodule.c:250 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 81 80 82 12 84 "" [1 uses])

(note 82 81 83 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 83 82 84 12 NOTE_INSN_DELETED)

(insn 84 83 85 12 arch/arm/vfp/vfpmodule.c:280 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 4 [0x4]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 85 84 86 12 arch/arm/vfp/vfpmodule.c:280 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  13 [50.0%]  (fallthru)
;; Succ edge  14 [50.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 86 85 87 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 87 86 147 13 NOTE_INSN_DELETED)

(insn 147 87 170 13 arch/arm/vfp/vfpmodule.c:280 discrim 2 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 12 [0xc]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 170 147 148 13 arch/arm/vfp/vfpmodule.c:280 discrim 2 (set (reg:SI 1 r1 [165])
        (const_int 196614 [0x30006])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196614 [0x30006])
        (nil)))

(insn 148 170 92 13 arch/arm/vfp/vfpmodule.c:280 discrim 2 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (reg:SI 1 r1 [165]))) 240 {*movsicc_insn} (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 12 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [50.0%] 
;; Pred edge  13 [100.0%]  (fallthru)
(code_label 92 148 93 14 85 "" [1 uses])

(note 93 92 94 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 94 93 95 14 NOTE_INSN_DELETED)

(insn 95 94 96 14 arch/arm/vfp/vfpmodule.c:281 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 3 [0x3]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 96 95 97 14 arch/arm/vfp/vfpmodule.c:281 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [50.0%]  (fallthru)
(note 97 96 98 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 98 97 150 15 NOTE_INSN_DELETED)

(insn 150 98 169 15 arch/arm/vfp/vfpmodule.c:281 discrim 2 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 11 [0xb]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 169 150 151 15 arch/arm/vfp/vfpmodule.c:281 discrim 2 (set (reg:SI 1 r1 [166])
        (const_int 196613 [0x30005])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196613 [0x30005])
        (nil)))

(insn 151 169 103 15 arch/arm/vfp/vfpmodule.c:281 discrim 2 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (reg:SI 1 r1 [166]))) 240 {*movsicc_insn} (nil))
;; End of basic block 15 -> ( 16)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 14 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [50.0%] 
;; Pred edge  15 [100.0%]  (fallthru)
(code_label 103 151 104 16 86 "" [1 uses])

(note 104 103 105 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 105 104 106 16 NOTE_INSN_DELETED)

(insn 106 105 107 16 arch/arm/vfp/vfpmodule.c:282 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 107 106 108 16 arch/arm/vfp/vfpmodule.c:282 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  18 [50.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  16 [50.0%]  (fallthru)
(note 108 107 109 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 109 108 153 17 NOTE_INSN_DELETED)

(insn 153 109 168 17 arch/arm/vfp/vfpmodule.c:282 discrim 2 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 10 [0xa]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 168 153 154 17 arch/arm/vfp/vfpmodule.c:282 discrim 2 (set (reg:SI 1 r1 [167])
        (const_int 196612 [0x30004])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196612 [0x30004])
        (nil)))

(insn 154 168 114 17 arch/arm/vfp/vfpmodule.c:282 discrim 2 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (reg:SI 1 r1 [167]))) 240 {*movsicc_insn} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  16 [50.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
(code_label 114 154 115 18 87 "" [1 uses])

(note 115 114 116 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 116 115 117 18 NOTE_INSN_DELETED)

(insn 117 116 118 18 arch/arm/vfp/vfpmodule.c:283 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 0 r0 [orig:145 exceptions ] [145])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 118 117 119 18 arch/arm/vfp/vfpmodule.c:283 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18 -> ( 19 21)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [50.0%]  (fallthru)
(note 119 118 120 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 120 119 121 19 NOTE_INSN_DELETED)

(insn 121 120 122 19 arch/arm/vfp/vfpmodule.c:283 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 2 r2 [orig:137 fpscr.560 ] [137])
                (const_int 1 [0x1])
                (const_int 8 [0x8]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 122 121 123 19 arch/arm/vfp/vfpmodule.c:283 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 19 -> ( 20 21)
;; lr  out 	 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  20 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  19 [50.0%]  (fallthru)
(note 123 122 124 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 124 123 160 20 arch/arm/vfp/vfpmodule.c:283 discrim 2 (set (reg/v:SI 3 r3 [orig:144 si_code ] [144])
        (const_int 196615 [0x30007])) 167 {*arm_movsi_insn} (nil))

(jump_insn 160 124 161 20 (set (pc)
        (label_ref 131)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 22)
;; lr  out 	 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  22 [100.0%] 

(barrier 161 160 127)

;; Start of basic block ( 18 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [50.0%] 
;; Pred edge  19 [50.0%] 
(code_label 127 161 128 21 88 "" [2 uses])

(note 128 127 129 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 129 128 130 21 arch/arm/vfp/vfpmodule.c:285 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:144 si_code ] [144])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 130 129 131 21 arch/arm/vfp/vfpmodule.c:285 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 142)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8136 [0x1fc8])
        (nil)))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  22 [18.6%]  (fallthru)
;; Succ edge  23 [81.4%] 

;; Start of basic block ( 21 20) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  21 [18.6%]  (fallthru)
;; Pred edge  20 [100.0%] 
(code_label 131 130 132 22 89 "" [1 uses])

(note 132 131 133 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 133 132 134 22 arch/arm/vfp/vfpmodule.c:286 (set (reg:SI 0 r0)
        (reg/v:SI 3 r3 [orig:144 si_code ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 134 133 135 22 arch/arm/vfp/vfpmodule.c:286 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 135 134 136 22 arch/arm/vfp/vfpmodule.c:286 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_raise_sigfpe") [flags 0x3] <function_decl 0x1108cc80 vfp_raise_sigfpe>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 22 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 136 135 142)

;; Start of basic block ( 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  21 [81.4%] 
(code_label 142 136 145 23 91 "" [1 uses])

(note 145 142 167 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 23 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 167 145 171 NOTE_INSN_DELETED)

(note 171 167 0 NOTE_INSN_DELETED)


;; Function VFP_bounce (VFP_bounce)[0:835]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a2(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a6(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a8(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a2(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a5(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a6(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a7(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a8(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 117(l0): point = 1
   Insn 115(l0): point = 4
   Insn 114(l0): point = 6
   Insn 112(l0): point = 8
   Insn 108(l0): point = 10
   Insn 107(l0): point = 12
   Insn 106(l0): point = 14
   Insn 105(l0): point = 16
   Insn 135(l0): point = 18
   Insn 134(l0): point = 20
   Insn 101(l0): point = 22
   Insn 98(l0): point = 25
   Insn 97(l0): point = 27
   Insn 96(l0): point = 29
   Insn 95(l0): point = 31
   Insn 92(l0): point = 34
   Insn 91(l0): point = 36
   Insn 89(l0): point = 38
   Insn 88(l0): point = 40
   Insn 87(l0): point = 42
   Insn 86(l0): point = 44
   Insn 83(l0): point = 47
   Insn 81(l0): point = 49
   Insn 79(l0): point = 52
   Insn 78(l0): point = 54
   Insn 75(l0): point = 57
   Insn 74(l0): point = 59
   Insn 73(l0): point = 61
   Insn 72(l0): point = 63
   Insn 69(l0): point = 66
   Insn 68(l0): point = 68
   Insn 66(l0): point = 70
   Insn 65(l0): point = 72
   Insn 63(l0): point = 74
   Insn 64(l0): point = 76
   Insn 60(l0): point = 79
   Insn 58(l0): point = 81
   Insn 56(l0): point = 83
   Insn 57(l0): point = 85
   Insn 132(l0): point = 88
   Insn 51(l0): point = 90
   Insn 49(l0): point = 93
   Insn 48(l0): point = 95
   Insn 130(l0): point = 98
   Insn 42(l0): point = 100
   Insn 38(l0): point = 102
   Insn 41(l0): point = 104
   Insn 40(l0): point = 106
   Insn 39(l0): point = 108
   Insn 36(l0): point = 111
   Insn 35(l0): point = 113
   Insn 128(l0): point = 116
   Insn 29(l0): point = 118
   Insn 28(l0): point = 120
   Insn 27(l0): point = 122
   Insn 25(l0): point = 124
   Insn 26(l0): point = 126
   Insn 23(l0): point = 129
   Insn 22(l0): point = 131
   Insn 19(l0): point = 134
   Insn 18(l0): point = 136
   Insn 15(l0): point = 139
   Insn 14(l0): point = 141
   Insn 12(l0): point = 143
   Insn 13(l0): point = 145
   Insn 11(l0): point = 147
   Insn 10(l0): point = 149
   Insn 9(l0): point = 151
   Insn 4(l0): point = 153
   Insn 8(l0): point = 155
   Insn 2(l0): point = 157
   Insn 3(l0): point = 159
 a0(r136): [7..8]
 a1(r139): [9..20]
 a2(r162): [13..14]
 a3(r161): [15..16]
 a4(r148): [105..153] [28..97]
 a5(r142): [107..143] [30..97]
 a6(r146): [129..157] [109..118] [64..97] [32..47]
 a7(r147): [111..159] [55..97]
 a8(r145): [88..90] [77..79]
 a9(r134): [80..83]
 a10(r158): [80..81]
 a11(r157): [82..85]
 a12(r141): [119..124]
 a13(r154): [121..122]
 a14(r153): [123..126]
 a15(r151): [142..145]
 a16(r143): [146..147]
 a17(r149): [150..151]
 a18(r150): [152..155]
Compressing live ranges: from 162 to 48 - 29%
Ranges after the compression:
 a0(r136): [0..1]
 a1(r139): [2..7]
 a2(r162): [3..4]
 a3(r161): [5..6]
 a4(r148): [24..44] [8..23]
 a5(r142): [25..37] [9..23]
 a6(r146): [35..46] [26..28] [13..23] [10..11]
 a7(r147): [27..47] [12..23]
 a8(r145): [21..22] [14..15]
 a9(r134): [16..19]
 a10(r158): [16..17]
 a11(r157): [18..20]
 a12(r141): [29..33]
 a13(r154): [30..31]
 a14(r153): [32..34]
 a15(r151): [36..38]
 a16(r143): [39..40]
 a17(r149): [41..42]
 a18(r150): [43..45]
+++Allocating 144 bytes for conflict table (uncompressed size 152)
;; a0(r136,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r139,l0) conflicts: a2(r162,l0) a3(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r162,l0) conflicts: a1(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r161,l0) conflicts: a1(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r148,l0) conflicts: a5(r142,l0) a6(r146,l0) a7(r147,l0) a8(r145,l0) a10(r158,l0) a9(r134,l0) a11(r157,l0) a12(r141,l0) a13(r154,l0) a14(r153,l0) a15(r151,l0) a16(r143,l0) a17(r149,l0) a18(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r142,l0) conflicts: a4(r148,l0) a6(r146,l0) a7(r147,l0) a8(r145,l0) a10(r158,l0) a9(r134,l0) a11(r157,l0) a12(r141,l0) a13(r154,l0) a14(r153,l0) a15(r151,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r146,l0) conflicts: a4(r148,l0) a5(r142,l0) a7(r147,l0) a8(r145,l0) a10(r158,l0) a9(r134,l0) a11(r157,l0) a15(r151,l0) a16(r143,l0) a17(r149,l0) a18(r150,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a7(r147,l0) conflicts: a4(r148,l0) a5(r142,l0) a6(r146,l0) a8(r145,l0) a10(r158,l0) a9(r134,l0) a11(r157,l0) a12(r141,l0) a13(r154,l0) a14(r153,l0) a15(r151,l0) a16(r143,l0) a17(r149,l0) a18(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r145,l0) conflicts: a4(r148,l0) a5(r142,l0) a6(r146,l0) a7(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r134,l0) conflicts: a4(r148,l0) a5(r142,l0) a6(r146,l0) a7(r147,l0) a10(r158,l0) a11(r157,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r158,l0) conflicts: a4(r148,l0) a5(r142,l0) a6(r146,l0) a7(r147,l0) a9(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r157,l0) conflicts: a4(r148,l0) a5(r142,l0) a6(r146,l0) a7(r147,l0) a9(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r141,l0) conflicts: a4(r148,l0) a5(r142,l0) a7(r147,l0) a13(r154,l0) a14(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r154,l0) conflicts: a4(r148,l0) a5(r142,l0) a7(r147,l0) a12(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r153,l0) conflicts: a4(r148,l0) a5(r142,l0) a7(r147,l0) a12(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r151,l0) conflicts: a4(r148,l0) a5(r142,l0) a6(r146,l0) a7(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r143,l0) conflicts: a4(r148,l0) a6(r146,l0) a7(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r149,l0) conflicts: a4(r148,l0) a6(r146,l0) a7(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r150,l0) conflicts: a4(r148,l0) a6(r146,l0) a7(r147,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2

  cp0:a2(r162)<->a3(r161)@125:shuffle
  cp1:a10(r158)<->a11(r157)@125:shuffle
  cp2:a8(r145)<->a9(r134)@125:shuffle
  cp3:a8(r145)<->a10(r158)@125:shuffle
  cp4:a13(r154)<->a14(r153)@125:shuffle
  cp5:a6(r146)<->a12(r141)@1000:move
  cp6:a17(r149)<->a18(r150)@125:shuffle
  cp7:a15(r151)<->a16(r143)@125:shuffle
  regions=1, blocks=20, points=48
    allocnos=19, copies=8, conflicts=2, ranges=26

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r136 1r139 2r162 3r161 4r148 5r142 6r146 7r147 8r145 9r134 10r158 11r157 12r141 13r154 14r153 15r151 16r143 17r149 18r150
    modified regnos: 134 136 139 141 142 143 145 146 147 148 149 150 151 153 154 157 158 161 162
    border:
    Pressure: GENERAL_REGS=8
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 147 of GENERAL_REGS has 5 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
      Pushing a17(r149,l0)
      Pushing a16(r143,l0)
      Pushing a15(r151,l0)
      Pushing a14(r153,l0)
      Pushing a13(r154,l0)
      Pushing a12(r141,l0)
      Pushing a11(r157,l0)
      Pushing a10(r158,l0)
      Pushing a9(r134,l0)
      Pushing a8(r145,l0)
      Pushing a18(r150,l0)
      Pushing a3(r161,l0)
      Pushing a2(r162,l0)
      Pushing a0(r136,l0)
      Pushing a1(r139,l0)
      Pushing a6(r146,l0)
      Pushing a7(r147,l0)
      Pushing a5(r142,l0)
      Pushing a4(r148,l0)
      Popping a4(r148,l0)  -- assign reg 4
      Popping a5(r142,l0)  -- assign reg 5
      Popping a7(r147,l0)  -- assign reg 6
      Popping a6(r146,l0)  -- assign reg 7
      Popping a1(r139,l0)  -- assign reg 3
      Popping a0(r136,l0)  -- assign reg 3
      Popping a2(r162,l0)  -- assign reg 2
      Popping a3(r161,l0)  -- assign reg 2
      Popping a18(r150,l0)  -- assign reg 3
      Popping a8(r145,l0)  -- assign reg 1
      Popping a9(r134,l0)  -- assign reg 3
      Popping a10(r158,l0)  -- assign reg 1
      Popping a11(r157,l0)  -- assign reg 1
      Popping a12(r141,l0)  -- assign reg 7
      Popping a13(r154,l0)  -- assign reg 3
      Popping a14(r153,l0)  -- assign reg 3
      Popping a15(r151,l0)  -- assign reg 3
      Popping a16(r143,l0)  -- assign reg 3
      Popping a17(r149,l0)  -- assign reg 3
Disposition:
    9:r134 l0     3    0:r136 l0     3    1:r139 l0     3   12:r141 l0     7
    5:r142 l0     5   16:r143 l0     3    8:r145 l0     1    6:r146 l0     7
    7:r147 l0     6    4:r148 l0     4   17:r149 l0     3   18:r150 l0     3
   15:r151 l0     3   14:r153 l0     3   13:r154 l0     3   11:r157 l0     1
   10:r158 l0     1    3:r161 l0     2    2:r162 l0     2
New iteration of spill/restore move
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 13, dead_or_set: 1, 147
insn=2, live_throughout: 2, 13, 147, dead_or_set: 0, 146
insn=8, live_throughout: 2, 13, 146, 147, dead_or_set: 150
insn=4, live_throughout: 13, 146, 147, 150, dead_or_set: 2, 148
insn=9, live_throughout: 13, 146, 147, 148, dead_or_set: 149, 150
insn=10, live_throughout: 13, 146, 147, 148, dead_or_set: 149
insn=11, live_throughout: 13, 146, 147, 148, dead_or_set: 143
insn=13, live_throughout: 13, 146, 147, 148, dead_or_set: 143, 151
insn=12, live_throughout: 13, 146, 147, 148, 151, dead_or_set: 142
insn=14, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 151
insn=15, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=18, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=19, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=20, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=22, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=23, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=26, live_throughout: 13, 142, 147, 148, dead_or_set: 153
insn=25, live_throughout: 13, 142, 147, 148, 153, dead_or_set: 141
insn=27, live_throughout: 13, 141, 142, 147, 148, dead_or_set: 153, 154
insn=28, live_throughout: 13, 141, 142, 147, 148, dead_or_set: 154
insn=29, live_throughout: 13, 142, 147, 148, dead_or_set: 141, 146
insn=128, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=32, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=35, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=36, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=39, live_throughout: 13, 142, 148, dead_or_set: 1, 146
insn=40, live_throughout: 1, 13, 148, dead_or_set: 2, 142
insn=41, live_throughout: 1, 2, 13, dead_or_set: 3, 148
insn=38, live_throughout: 1, 2, 3, 13, dead_or_set: 0
insn=42, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=130, live_throughout: 13, 14, dead_or_set: 
insn=45, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=48, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=49, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=51, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 145
insn=132, live_throughout: 13, 142, 145, 146, 147, 148, dead_or_set: 
insn=54, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 
insn=57, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 157
insn=56, live_throughout: 13, 142, 146, 147, 148, 157, dead_or_set: 134
insn=58, live_throughout: 13, 134, 142, 146, 147, 148, dead_or_set: 157, 158
insn=60, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 134, 145, 158
insn=61, live_throughout: 13, 142, 145, 146, 147, 148, dead_or_set: 
insn=64, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 1, 145
insn=63, live_throughout: 1, 13, 142, 146, 147, 148, dead_or_set: 0
insn=65, live_throughout: 0, 1, 13, 142, 146, 147, 148, dead_or_set: 2
insn=66, live_throughout: 13, 142, 146, 147, 148, dead_or_set: 0, 1, 2, 14
insn=68, live_throughout: 0, 13, 14, 142, 146, 147, 148, dead_or_set: 
insn=69, live_throughout: 0, 13, 14, 142, 146, 147, 148, dead_or_set: 
insn=72, live_throughout: 0, 13, 142, 147, 148, dead_or_set: 1, 146
insn=73, live_throughout: 0, 1, 13, 142, 147, 148, dead_or_set: 2
insn=74, live_throughout: 0, 1, 2, 13, 142, 147, 148, dead_or_set: 3
insn=75, live_throughout: 13, 142, 147, 148, dead_or_set: 0, 1, 2, 3, 14
insn=76, live_throughout: 13, 14, 142, 147, 148, dead_or_set: 
insn=78, live_throughout: 13, 14, 142, 148, dead_or_set: 147
insn=79, live_throughout: 13, 14, 142, 148, dead_or_set: 
insn=81, live_throughout: 13, 142, 148, dead_or_set: 
insn=83, live_throughout: 13, 142, 148, dead_or_set: 146
insn=84, live_throughout: 13, 142, 146, 148, dead_or_set: 
insn=86, live_throughout: 13, 142, 146, 148, dead_or_set: 0
insn=87, live_throughout: 0, 13, 142, 146, 148, dead_or_set: 1
insn=88, live_throughout: 0, 1, 13, 142, 146, 148, dead_or_set: 2
insn=89, live_throughout: 13, 142, 146, 148, dead_or_set: 0, 1, 2, 14
insn=91, live_throughout: 0, 13, 14, 142, 146, 148, dead_or_set: 
insn=92, live_throughout: 0, 13, 14, 142, 146, 148, dead_or_set: 
insn=95, live_throughout: 0, 13, 142, 148, dead_or_set: 1, 146
insn=96, live_throughout: 0, 1, 13, 148, dead_or_set: 2, 142
insn=97, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 148
insn=98, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=99, live_throughout: 13, 14, dead_or_set: 
insn=101, live_throughout: 13, 14, dead_or_set: 
insn=134, live_throughout: 13, 14, dead_or_set: 139
insn=135, live_throughout: 13, 14, dead_or_set: 139
insn=105, live_throughout: 13, 14, 139, dead_or_set: 161
insn=106, live_throughout: 13, 14, 139, dead_or_set: 161, 162
insn=107, live_throughout: 13, 14, 139, dead_or_set: 162
insn=108, live_throughout: 13, 14, 139, dead_or_set: 
insn=112, live_throughout: 13, 14, dead_or_set: 136, 139
insn=114, live_throughout: 13, 14, dead_or_set: 136
insn=115, live_throughout: 13, 14, dead_or_set: 
insn=117, live_throughout: 13, 14, dead_or_set: 
insn=124, live_throughout: 13, 14, dead_or_set: 
init_insns for 153: (insn_list:REG_DEP_TRUE 26 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 105 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 107 (nil))
changing reg in insn 56
changing reg in insn 60
changing reg in insn 112
changing reg in insn 114
changing reg in insn 135
changing reg in insn 134
changing reg in insn 135
changing reg in insn 112
changing reg in insn 107
changing reg in insn 105
changing reg in insn 106
changing reg in insn 105
changing reg in insn 25
changing reg in insn 29
changing reg in insn 12
changing reg in insn 18
changing reg in insn 96
changing reg in insn 87
changing reg in insn 73
changing reg in insn 56
changing reg in insn 51
changing reg in insn 40
changing reg in insn 11
changing reg in insn 13
changing reg in insn 60
changing reg in insn 51
changing reg in insn 64
changing reg in insn 83
changing reg in insn 29
changing reg in insn 2
changing reg in insn 95
changing reg in insn 86
changing reg in insn 72
changing reg in insn 63
changing reg in insn 39
changing reg in insn 3
changing reg in insn 48
changing reg in insn 35
changing reg in insn 78
changing reg in insn 57
changing reg in insn 22
changing reg in insn 8
changing reg in insn 9
changing reg in insn 4
changing reg in insn 97
changing reg in insn 88
changing reg in insn 74
changing reg in insn 65
changing reg in insn 41
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 26
changing reg in insn 9
changing reg in insn 10
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 60
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
Spilling for insn 28.
Spilling for insn 134.
Using reg 2 for reload 0
Spilling for insn 107.

Reloads for insn # 28
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                                                        (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])

Reloads for insn # 134
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 107
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                                                        (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
deleting insn with uid = 29.
deleting insn with uid = 64.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 98.
verify found no changes in insn with uid = 117.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 28 count 35 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 20 n_edges 28 count 38 (  1.9)


VFP_bounce

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,8u} r1={15d,8u} r2={15d,9u} r3={20d,15u,2d} r4={1d,7u,2d} r5={1d,7u} r6={1d,6u,1d} r7={3d,5u} r12={7d} r13={1d,26u} r14={6d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={20d,9u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 866{760d,101u,5e} in 71{65 regular + 6 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 3 2 NOTE_INSN_FUNCTION_BEG)

(insn 3 5 2 2 arch/arm/vfp/vfpmodule.c:329 (set (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
        (reg:SI 1 r1 [ fpexc ])) 167 {*arm_movsi_insn} (nil))

(insn 2 3 8 2 arch/arm/vfp/vfpmodule.c:329 (set (reg/v:SI 7 r7 [orig:146 trigger ] [146])
        (reg:SI 0 r0 [ trigger ])) 167 {*arm_movsi_insn} (nil))

(insn 8 2 4 2 arch/arm/vfp/vfpmodule.c:347 (set (reg:SI 3 r3 [150])
        (and:SI (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
            (const_int 1207959551 [0x47ffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 4 8 9 2 arch/arm/vfp/vfpmodule.c:329 (set (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
        (reg:SI 2 r2 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 9 4 10 2 arch/arm/vfp/vfpmodule.c:347 (set (reg:SI 3 r3 [149])
        (and:SI (reg:SI 3 r3 [150])
            (const_int -160 [0xffffffffffffff60]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
            (const_int 1207959392 [0x47ffff60]))
        (nil)))

(insn 10 9 11 2 arch/arm/vfp/vfpmodule.c:347 (parallel [
            (asm_operands/v ("mcr p10, 7, %0, cr8, cr0, 0 @ fmxr	FPEXC, %0") ("") 0 [
                    (reg:SI 3 r3 [149])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 6046312)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 11 10 13 2 arch/arm/vfp/vfpmodule.c:349 (parallel [
            (set (reg/v:SI 3 r3 [orig:143 __v ] [143])
                (asm_operands:SI ("mrc p10, 7, %0, cr0, cr0, 0 @ fmrx	%0, FPSID") ("=r") 0 []
                     [] 6046576))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 13 11 12 2 arch/arm/vfp/vfpmodule.c:355 (set (reg:SI 3 r3 [151])
        (and:SI (reg/v:SI 3 r3 [orig:143 __v ] [143])
            (const_int 983040 [0xf0000]))) 67 {*arm_andsi3_insn} (nil))

(insn 12 13 14 2 arch/arm/vfp/vfpmodule.c:350 (parallel [
            (set (reg/v:SI 5 r5 [orig:142 __v ] [142])
                (asm_operands:SI ("mrc p10, 7, %0, cr1, cr0, 0 @ fmrx	%0, FPSCR") ("=r") 0 []
                     [] 6046717))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 14 12 15 2 arch/arm/vfp/vfpmodule.c:355 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [151])
            (const_int 65536 [0x10000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 16 2 arch/arm/vfp/vfpmodule.c:355 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  4 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 16 18 3 NOTE_INSN_DELETED)

(insn 18 17 19 3 arch/arm/vfp/vfpmodule.c:356 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 5 r5 [orig:142 __v ] [142])
                (const_int 1 [0x1])
                (const_int 12 [0xc]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 19 18 20 3 arch/arm/vfp/vfpmodule.c:356 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 15 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
;; Pred edge  3 [50.0%]  (fallthru)
(code_label 20 19 21 4 97 "" [1 uses])

(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 4 arch/arm/vfp/vfpmodule.c:363 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 24 4 arch/arm/vfp/vfpmodule.c:363 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 32)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7300 [0x1c84])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [27.0%]  (fallthru)
;; Succ edge  6 [73.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  4 [27.0%]  (fallthru)
(note 24 23 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 26 24 25 5 arch/arm/vfp/vfpmodule.c:370 (set (reg:SI 3 r3 [orig:153 <variable>.uregs+60 ] [153])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn 25 26 27 5 arch/arm/vfp/vfpmodule.c:369 (parallel [
            (set (reg/v:SI 7 r7 [orig:141 __v ] [141])
                (asm_operands:SI ("mrc p10, 7, %0, cr9, cr0, 0 @ fmrx	%0, FPINST") ("=r") 0 []
                     [] 6049139))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 27 25 28 5 arch/arm/vfp/vfpmodule.c:370 (set (reg:SI 3 r3 [154])
        (plus:SI (reg:SI 3 r3 [orig:153 <variable>.uregs+60 ] [153])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (nil)))

(insn 28 27 128 5 arch/arm/vfp/vfpmodule.c:370 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:148 regs ] [148])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])
        (reg:SI 3 r3 [154])) 167 {*arm_movsi_insn} (nil))

(jump_insn 128 28 129 5 (set (pc)
        (label_ref 45)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 129 128 32)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [73.0%] 
(code_label 32 129 33 6 99 "" [1 uses])

(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 34 33 35 6 NOTE_INSN_DELETED)

(insn 35 34 36 6 arch/arm/vfp/vfpmodule.c:372 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
                (const_int 1 [0x1])
                (const_int 29 [0x1d]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 36 35 37 6 arch/arm/vfp/vfpmodule.c:372 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  7 [29.0%]  (fallthru)
;; Succ edge  8 [71.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  6 [29.0%]  (fallthru)
(note 37 36 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 39 37 40 7 arch/arm/vfp/vfpmodule.c:378 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 40 39 41 7 arch/arm/vfp/vfpmodule.c:378 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:142 __v ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 41 40 38 7 arch/arm/vfp/vfpmodule.c:378 (set (reg:SI 3 r3)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 38 41 42 7 arch/arm/vfp/vfpmodule.c:378 (set (reg:SI 0 r0)
        (const_int -257 [0xfffffffffffffeff])) 167 {*arm_movsi_insn} (nil))

(call_insn 42 38 130 7 arch/arm/vfp/vfpmodule.c:378 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_raise_exceptions") [flags 0x3] <function_decl 0x1108ce80 vfp_raise_exceptions>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn 130 42 131 7 arch/arm/vfp/vfpmodule.c:379 (set (pc)
        (label_ref 99)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 17)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 131 130 45)

;; Start of basic block ( 6 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [71.0%] 
;; Pred edge  5 [100.0%] 
(code_label 45 131 46 8 100 "" [2 uses])

(note 46 45 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 47 46 48 8 NOTE_INSN_DELETED)

(insn 48 47 49 8 arch/arm/vfp/vfpmodule.c:387 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
                        (const_int -2013265920 [0xffffffff88000000]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 49 48 50 8 arch/arm/vfp/vfpmodule.c:387 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 54)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 50 49 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 132 9 arch/arm/vfp/vfpmodule.c:350 (set (reg/v:SI 1 r1 [orig:145 fpscr ] [145])
        (reg/v:SI 5 r5 [orig:142 __v ] [142])) 167 {*arm_movsi_insn} (nil))

(jump_insn 132 51 133 9 (set (pc)
        (label_ref 61)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 133 132 54)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  8 [50.0%] 
(code_label 54 133 55 10 102 "" [1 uses])

(note 55 54 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 59 55 57 10 NOTE_INSN_DELETED)

(insn 57 59 56 10 arch/arm/vfp/vfpmodule.c:393 (set (reg:SI 1 r1 [157])
        (plus:SI (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
            (const_int 256 [0x100]))) 4 {*arm_addsi3} (nil))

(insn 56 57 58 10 arch/arm/vfp/vfpmodule.c:392 (set (reg/v:SI 3 r3 [orig:134 fpscr.584 ] [134])
        (and:SI (reg/v:SI 5 r5 [orig:142 __v ] [142])
            (const_int -458753 [0xfffffffffff8ffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 58 56 60 10 arch/arm/vfp/vfpmodule.c:393 (set (reg:SI 1 r1 [158])
        (and:SI (reg:SI 1 r1 [157])
            (const_int 1792 [0x700]))) 67 {*arm_andsi3_insn} (nil))

(insn 60 58 61 10 arch/arm/vfp/vfpmodule.c:393 (set (reg/v:SI 1 r1 [orig:145 fpscr ] [145])
        (ior:SI (ashift:SI (reg:SI 1 r1 [158])
                (const_int 8 [0x8]))
            (reg/v:SI 3 r3 [orig:134 fpscr.584 ] [134]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 61 60 62 11 103 "" [1 uses])

(note 62 61 67 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 67 62 63 11 NOTE_INSN_DELETED)

(insn 63 67 65 11 arch/arm/vfp/vfpmodule.c:401 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 65 63 66 11 arch/arm/vfp/vfpmodule.c:401 (set (reg:SI 2 r2)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn 66 65 68 11 arch/arm/vfp/vfpmodule.c:401 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_emulate_instruction") [flags 0x3] <function_decl 0x1108cf80 vfp_emulate_instruction>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 68 66 69 11 arch/arm/vfp/vfpmodule.c:402 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 69 68 70 11 arch/arm/vfp/vfpmodule.c:402 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  12 [29.0%]  (fallthru)
;; Succ edge  13 [71.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  11 [29.0%]  (fallthru)
(note 70 69 72 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 72 70 73 12 arch/arm/vfp/vfpmodule.c:403 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 73 72 74 12 arch/arm/vfp/vfpmodule.c:403 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:142 __v ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 74 73 75 12 arch/arm/vfp/vfpmodule.c:403 (set (reg:SI 3 r3)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn 75 74 76 12 arch/arm/vfp/vfpmodule.c:403 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_raise_exceptions") [flags 0x3] <function_decl 0x1108ce80 vfp_raise_exceptions>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [71.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
(code_label 76 75 77 13 104 "" [1 uses])

(note 77 76 78 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 78 77 79 13 arch/arm/vfp/vfpmodule.c:409 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:147 fpexc ] [147])
            (const_int -1879048192 [0xffffffff90000000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 79 78 80 13 arch/arm/vfp/vfpmodule.c:409 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 13 -> ( 17 14)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  17 [72.0%] 
;; Succ edge  14 [28.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  13 [28.0%]  (fallthru)
(note 80 79 82 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 82 80 81 14 NOTE_INSN_DELETED)

(insn 81 82 83 14 arch/arm/vfp/vfpmodule.c:416 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6055144)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 83 81 84 14 arch/arm/vfp/vfpmodule.c:417 (parallel [
            (set (reg/v:SI 7 r7 [orig:146 trigger ] [146])
                (asm_operands:SI ("mrc p10, 7, %0, cr10, cr0, 0 @ fmrx	%0, FPINST2") ("=r") 0 []
                     [] 6055282))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 3 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  3 [50.0%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 84 83 85 15 98 ("emulate") [1 uses])

(note 85 84 90 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 90 85 86 15 NOTE_INSN_DELETED)

(insn 86 90 87 15 arch/arm/vfp/vfpmodule.c:420 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 87 86 88 15 arch/arm/vfp/vfpmodule.c:420 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:142 __v ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 88 87 89 15 arch/arm/vfp/vfpmodule.c:420 (set (reg:SI 2 r2)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn 89 88 91 15 arch/arm/vfp/vfpmodule.c:420 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_emulate_instruction") [flags 0x3] <function_decl 0x1108cf80 vfp_emulate_instruction>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 91 89 92 15 arch/arm/vfp/vfpmodule.c:421 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 92 91 93 15 arch/arm/vfp/vfpmodule.c:421 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 13 [sp]


;; Succ edge  16 [29.0%]  (fallthru)
;; Succ edge  17 [71.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  15 [29.0%]  (fallthru)
(note 93 92 95 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 95 93 96 16 arch/arm/vfp/vfpmodule.c:422 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:146 trigger ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 96 95 97 16 arch/arm/vfp/vfpmodule.c:422 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:142 __v ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 97 96 98 16 arch/arm/vfp/vfpmodule.c:422 (set (reg:SI 3 r3)
        (reg/v/f:SI 4 r4 [orig:148 regs ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn 98 97 99 16 arch/arm/vfp/vfpmodule.c:422 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_raise_exceptions") [flags 0x3] <function_decl 0x1108ce80 vfp_raise_exceptions>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 16 -> ( 17)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 13 15 7) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  13 [72.0%] 
;; Pred edge  15 [71.0%] 
;; Pred edge  7 [100.0%] 
(code_label 99 98 100 17 101 ("exit") [3 uses])

(note 100 99 103 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 103 100 113 17 NOTE_INSN_DELETED)

(note 113 103 101 17 NOTE_INSN_DELETED)

(insn 101 113 138 17 arch/arm/vfp/vfpmodule.c:424 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6056168)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 138 101 134 17 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 134 138 135 17 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 135 134 105 17 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
        (and:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 105 135 106 17 arch/arm/vfp/vfpmodule.c:424 (set (reg:SI 2 r2 [orig:161 <variable>.preempt_count ] [161])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 106 105 107 17 arch/arm/vfp/vfpmodule.c:424 (set (reg:SI 2 r2 [162])
        (plus:SI (reg:SI 2 r2 [orig:161 <variable>.preempt_count ] [161])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (nil)))

(insn 107 106 108 17 arch/arm/vfp/vfpmodule.c:424 (set (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])
        (reg:SI 2 r2 [162])) 167 {*arm_movsi_insn} (nil))

(insn 108 107 112 17 arch/arm/vfp/vfpmodule.c:424 (parallel [
            (asm_operands/v ("") ("") 0 []
                 [] 6056168)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 112 108 114 17 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 3 r3 [orig:136 D.16642 ] [136])
        (mem/v:SI (reg/f:SI 3 r3 [orig:139 D.16624 ] [139]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 114 112 115 17 arch/arm/vfp/vfpmodule.c:424 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:136 D.16642 ] [136])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 115 114 116 17 arch/arm/vfp/vfpmodule.c:424 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 124)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  18 [0.0%]  (fallthru)
;; Succ edge  19 [100.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  17 [0.0%]  (fallthru)
(note 116 115 117 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(call_insn/j 117 116 118 18 arch/arm/vfp/vfpmodule.c:424 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("preempt_schedule") [flags 0x41] <function_decl 0x10aa7a00 preempt_schedule>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (nil))
;; End of basic block 18 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 118 117 124)

;; Start of basic block ( 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  17 [100.0%] 
(code_label 124 118 127 19 106 "" [1 uses])

(note 127 124 136 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 19 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 136 127 137 NOTE_INSN_DELETED)

(note 137 136 0 NOTE_INSN_DELETED)

