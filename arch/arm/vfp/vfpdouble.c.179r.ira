
;; Function vfp_propagate_nan (vfp_propagate_nan)[0:154]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 260.
verify found no changes in insn with uid = 260.
deleting insn with uid = 13.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 26 n_edges 35 count 50 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 26 n_edges 35 count 50 (  1.9)

Pass 0 for finding allocno costs

    a4 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r138,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a2(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a4(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a8(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a9(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r161,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a15(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r151,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a22(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a24(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r138,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a2(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:72000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a4(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a8(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a9(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r161,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a15(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r151,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a22(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a24(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 206(l0): point = 0
   Insn 200(l0): point = 2
   Insn 175(l0): point = 4
   Insn 185(l0): point = 6
   Insn 174(l0): point = 8
   Insn 169(l0): point = 11
   Insn 168(l0): point = 13
   Insn 167(l0): point = 18
   Insn 166(l0): point = 20
   Insn 163(l0): point = 23
   Insn 255(l0): point = 26
   Insn 158(l0): point = 28
   Insn 156(l0): point = 31
   Insn 155(l0): point = 33
   Insn 154(l0): point = 35
   Insn 144(l0): point = 42
   Insn 143(l0): point = 44
   Insn 253(l0): point = 47
   Insn 137(l0): point = 49
   Insn 135(l0): point = 52
   Insn 134(l0): point = 54
   Insn 236(l0): point = 57
   Insn 122(l0): point = 59
   Insn 120(l0): point = 61
   Insn 119(l0): point = 63
   Insn 251(l0): point = 66
   Insn 114(l0): point = 68
   Insn 112(l0): point = 71
   Insn 111(l0): point = 73
   Insn 249(l0): point = 76
   Insn 234(l0): point = 78
   Insn 95(l0): point = 80
   Insn 94(l0): point = 85
   Insn 247(l0): point = 88
   Insn 89(l0): point = 90
   Insn 87(l0): point = 93
   Insn 86(l0): point = 95
   Insn 83(l0): point = 97
   Insn 81(l0): point = 100
   Insn 80(l0): point = 102
   Insn 79(l0): point = 104
   Insn 75(l0): point = 106
   Insn 245(l0): point = 109
   Insn 70(l0): point = 111
   Insn 68(l0): point = 114
   Insn 67(l0): point = 116
   Insn 232(l0): point = 119
   Insn 56(l0): point = 121
   Insn 54(l0): point = 123
   Insn 53(l0): point = 125
   Insn 243(l0): point = 128
   Insn 48(l0): point = 130
   Insn 46(l0): point = 133
   Insn 45(l0): point = 135
   Insn 241(l0): point = 138
   Insn 230(l0): point = 140
   Insn 29(l0): point = 142
   Insn 28(l0): point = 147
   Insn 239(l0): point = 150
   Insn 23(l0): point = 152
   Insn 21(l0): point = 155
   Insn 20(l0): point = 157
   Insn 17(l0): point = 159
   Insn 15(l0): point = 162
   Insn 14(l0): point = 164
   Insn 260(l0): point = 166
   Insn 5(l0): point = 168
   Insn 9(l0): point = 170
   Insn 4(l0): point = 172
   Insn 2(l0): point = 174
   Insn 3(l0): point = 176
 a0(r142): [4..174]
 a1(r138): [150..152] [138..140] [128..130] [7..119]
 a2(r137): [109..111] [88..90] [76..78] [66..68] [39..57] [7..37]
 a3(r139): [47..49] [26..28] [9..23]
 a4(r177): [16..16] [12..14]
 a5(r176): [14..18]
 a6(r175): [14..20]
 a7(r143): [52..176] [31..46] [24..25]
 a8(r144): [52..172] [29..46]
 a9(r174): [34..38]
 a10(r145): [55..168]
 a11(r165): [60..61]
 a12(r164): [60..63]
 a13(r133): [100..106] [74..75]
 a14(r161): [83..83] [79..81]
 a15(r162): [81..85]
 a16(r134): [93..97] [81..87]
 a17(r159): [103..104]
 a18(r155): [122..123]
 a19(r154): [122..125]
 a20(r135): [162..170] [136..137]
 a21(r151): [145..145] [141..143]
 a22(r152): [143..147]
 a23(r136): [155..159] [143..149]
 a24(r149): [165..166]
Compressing live ranges: from 179 to 76 - 42%
Ranges after the compression:
 a0(r142): [0..74]
 a1(r138): [64..65] [57..58] [53..54] [1..49]
 a2(r137): [47..48] [39..40] [32..33] [28..29] [18..24] [1..16]
 a3(r139): [20..21] [11..12] [2..8]
 a4(r177): [5..5] [3..4]
 a5(r176): [4..6]
 a6(r175): [4..7]
 a7(r143): [22..75] [14..19] [9..10]
 a8(r144): [22..73] [13..19]
 a9(r174): [15..17]
 a10(r145): [23..71]
 a11(r165): [25..26]
 a12(r164): [25..27]
 a13(r133): [43..46] [30..31]
 a14(r161): [36..36] [34..35]
 a15(r162): [35..37]
 a16(r134): [41..42] [35..38]
 a17(r159): [44..45]
 a18(r155): [50..51]
 a19(r154): [50..52]
 a20(r135): [68..72] [55..56]
 a21(r151): [61..61] [59..60]
 a22(r152): [60..62]
 a23(r136): [66..67] [60..63]
 a24(r149): [69..70]
+++Allocating 200 bytes for conflict table (uncompressed size 200)
;; a0(r142,l0) conflicts: a2(r137,l0) a1(r138,l0) a3(r139,l0) a4(r177,l0) a5(r176,l0) a6(r175,l0) a7(r143,l0) a8(r144,l0) a9(r174,l0) a10(r145,l0) a11(r165,l0) a12(r164,l0) a13(r133,l0) a14(r161,l0) a15(r162,l0) a16(r134,l0) a17(r159,l0) a18(r155,l0) a19(r154,l0) a20(r135,l0) a21(r151,l0) a22(r152,l0) a23(r136,l0) a24(r149,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r138,l0) conflicts: a0(r142,l0) a2(r137,l0) a3(r139,l0) a4(r177,l0) a5(r176,l0) a6(r175,l0) a7(r143,l0) a8(r144,l0) a9(r174,l0) a10(r145,l0) a11(r165,l0) a12(r164,l0) a13(r133,l0) a14(r161,l0) a15(r162,l0) a16(r134,l0) a17(r159,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r137,l0) conflicts: a0(r142,l0) a1(r138,l0) a3(r139,l0) a4(r177,l0) a5(r176,l0) a6(r175,l0) a7(r143,l0) a8(r144,l0) a9(r174,l0) a10(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r139,l0) conflicts: a0(r142,l0) a2(r137,l0) a1(r138,l0) a4(r177,l0) a5(r176,l0) a6(r175,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r177,l0) conflicts: a0(r142,l0) a2(r137,l0) a1(r138,l0) a3(r139,l0) a5(r176,l0) a6(r175,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r176,l0) conflicts: a0(r142,l0) a2(r137,l0) a1(r138,l0) a3(r139,l0) a4(r177,l0) a6(r175,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r175,l0) conflicts: a0(r142,l0) a2(r137,l0) a1(r138,l0) a3(r139,l0) a4(r177,l0) a5(r176,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r143,l0) conflicts: a0(r142,l0) a2(r137,l0) a1(r138,l0) a8(r144,l0) a9(r174,l0) a10(r145,l0) a11(r165,l0) a12(r164,l0) a13(r133,l0) a14(r161,l0) a15(r162,l0) a16(r134,l0) a17(r159,l0) a18(r155,l0) a19(r154,l0) a20(r135,l0) a21(r151,l0) a22(r152,l0) a23(r136,l0) a24(r149,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a8(r144,l0) conflicts: a0(r142,l0) a2(r137,l0) a1(r138,l0) a7(r143,l0) a9(r174,l0) a10(r145,l0) a11(r165,l0) a12(r164,l0) a13(r133,l0) a14(r161,l0) a15(r162,l0) a16(r134,l0) a17(r159,l0) a18(r155,l0) a19(r154,l0) a20(r135,l0) a21(r151,l0) a22(r152,l0) a23(r136,l0) a24(r149,l0)
;;     total conflict hard regs: 3 14
;;     conflict hard regs: 3 14
;; a9(r174,l0) conflicts: a0(r142,l0) a2(r137,l0) a1(r138,l0) a7(r143,l0) a8(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r145,l0) conflicts: a0(r142,l0) a2(r137,l0) a1(r138,l0) a7(r143,l0) a8(r144,l0) a11(r165,l0) a12(r164,l0) a13(r133,l0) a14(r161,l0) a15(r162,l0) a16(r134,l0) a17(r159,l0) a18(r155,l0) a19(r154,l0) a20(r135,l0) a21(r151,l0) a22(r152,l0) a23(r136,l0) a24(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r165,l0) conflicts: a0(r142,l0) a1(r138,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a12(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r164,l0) conflicts: a0(r142,l0) a1(r138,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a11(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r133,l0) conflicts: a0(r142,l0) a1(r138,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a17(r159,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r161,l0) conflicts: a0(r142,l0) a1(r138,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a15(r162,l0) a16(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r162,l0) conflicts: a0(r142,l0) a1(r138,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a14(r161,l0) a16(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r134,l0) conflicts: a0(r142,l0) a1(r138,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a14(r161,l0) a15(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r159,l0) conflicts: a0(r142,l0) a1(r138,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a13(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r155,l0) conflicts: a0(r142,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a19(r154,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r154,l0) conflicts: a0(r142,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a18(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r135,l0) conflicts: a0(r142,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a24(r149,l0)
;;     total conflict hard regs: 3 14
;;     conflict hard regs: 3 14
;; a21(r151,l0) conflicts: a0(r142,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a22(r152,l0) a23(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r152,l0) conflicts: a0(r142,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a21(r151,l0) a23(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r136,l0) conflicts: a0(r142,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a21(r151,l0) a22(r152,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r149,l0) conflicts: a0(r142,l0) a7(r143,l0) a8(r144,l0) a10(r145,l0) a20(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a3(r139)<->a7(r143)@1000:move
  cp1:a3(r139)<->a8(r144)@1000:move
  regions=1, blocks=26, points=76
    allocnos=25, copies=2, conflicts=0, ranges=45

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r142 1r138 2r137 3r139 4r177 5r176 6r175 7r143 8r144 9r174 10r145 11r165 12r164 13r133 14r161 15r162 16r134 17r159 18r155 19r154 20r135 21r151 22r152 23r136 24r149
    modified regnos: 133 134 135 136 137 138 139 142 143 144 145 149 151 152 154 155 159 161 162 164 165 174 175 176 177
    border:
    Pressure: GENERAL_REGS=10
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 175 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 2 regs less
    Reg 174 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
      Pushing a24(r149,l0)
      Pushing a22(r152,l0)
      Pushing a21(r151,l0)
      Pushing a19(r154,l0)
      Pushing a18(r155,l0)
      Pushing a17(r159,l0)
      Pushing a15(r162,l0)
      Pushing a14(r161,l0)
      Pushing a12(r164,l0)
      Pushing a11(r165,l0)
      Pushing a10(r145,l0)
      Pushing a9(r174,l0)
      Pushing a6(r175,l0)
      Pushing a5(r176,l0)
      Pushing a4(r177,l0)
      Pushing a13(r133,l0)
      Pushing a23(r136,l0)
      Pushing a16(r134,l0)
      Pushing a3(r139,l0)
      Pushing a20(r135,l0)
      Pushing a8(r144,l0)
      Pushing a7(r143,l0)
      Pushing a0(r142,l0)
      Pushing a2(r137,l0)
      Pushing a1(r138,l0)
      Popping a1(r138,l0)  -- assign reg 12
      Popping a2(r137,l0)  -- assign reg 4
      Popping a0(r142,l0)  -- assign reg 5
      Popping a7(r143,l0)  -- assign reg 1
      Popping a8(r144,l0)  -- assign reg 2
      Popping a20(r135,l0)  -- assign reg 0
      Popping a3(r139,l0)  -- assign reg 1
      Popping a16(r134,l0)  -- assign reg 6
      Popping a23(r136,l0)  -- assign reg 6
      Popping a13(r133,l0)  -- assign reg 0
      Popping a4(r177,l0)  -- assign reg 2
      Popping a5(r176,l0)  -- assign reg 6
      Popping a6(r175,l0)  -- assign reg 8
      Popping a9(r174,l0)  -- assign reg 3
      Popping a10(r145,l0)  -- assign reg 3
      Popping a11(r165,l0)  -- assign reg 0
      Popping a12(r164,l0)  -- assign reg 4
      Popping a14(r161,l0)  -- assign reg 8
      Popping a15(r162,l0)  -- assign reg 10
      Popping a17(r159,l0)  -- assign reg 4
      Popping a18(r155,l0)  -- assign reg 0
      Popping a19(r154,l0)  -- assign reg 12
      Popping a21(r151,l0)  -- assign reg 8
      Popping a22(r152,l0)  -- assign reg 10
      Popping a24(r149,l0)  -- assign reg 12
Disposition:
   13:r133 l0     0   16:r134 l0     6   20:r135 l0     0   23:r136 l0     6
    2:r137 l0     4    1:r138 l0    12    3:r139 l0     1    0:r142 l0     5
    7:r143 l0     1    8:r144 l0     2   10:r145 l0     3   24:r149 l0    12
   21:r151 l0     8   22:r152 l0    10   19:r154 l0    12   18:r155 l0     0
   17:r159 l0     4   14:r161 l0     8   15:r162 l0    10   12:r164 l0     4
   11:r165 l0     0    9:r174 l0     3    6:r175 l0     8    5:r176 l0     6
    4:r177 l0     2
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 3, 13, 14, dead_or_set: 1, 143
insn=2, live_throughout: 2, 3, 13, 14, 143, dead_or_set: 0, 142
insn=4, live_throughout: 3, 13, 14, 142, 143, dead_or_set: 2, 144
insn=9, live_throughout: 3, 13, 14, 142, 143, 144, dead_or_set: 135
insn=5, live_throughout: 13, 14, 135, 142, 143, 144, dead_or_set: 3, 145
insn=260, live_throughout: 13, 14, 135, 142, 143, 144, 145, dead_or_set: 149
insn=14, live_throughout: 13, 14, 135, 142, 143, 144, 145, dead_or_set: 149
insn=15, live_throughout: 13, 14, 135, 142, 143, 144, 145, dead_or_set: 
insn=17, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 136
insn=20, live_throughout: 13, 14, 136, 142, 143, 144, 145, dead_or_set: 
insn=21, live_throughout: 13, 14, 136, 142, 143, 144, 145, dead_or_set: 
insn=23, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 138
insn=239, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 
insn=26, live_throughout: 13, 14, 136, 142, 143, 144, 145, dead_or_set: 
insn=28, live_throughout: 13, 14, 136, 142, 143, 144, 145, dead_or_set: 152
insn=29, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 136, 151, 152
insn=230, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 138, 151
insn=241, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 
insn=43, live_throughout: 13, 14, 135, 142, 143, 144, 145, dead_or_set: 
insn=45, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 135
insn=46, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 
insn=48, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 138
insn=243, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 
insn=51, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 
insn=53, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 154
insn=54, live_throughout: 13, 14, 142, 143, 144, 145, 154, dead_or_set: 155
insn=56, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 154, 155
insn=232, live_throughout: 13, 14, 142, 143, 144, 145, dead_or_set: 138
insn=65, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 
insn=67, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 
insn=68, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 
insn=70, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 137
insn=245, live_throughout: 13, 14, 137, 138, 142, 143, 144, 145, dead_or_set: 
insn=73, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 
insn=75, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 133
insn=79, live_throughout: 13, 14, 133, 138, 142, 143, 144, 145, dead_or_set: 159
insn=80, live_throughout: 13, 14, 133, 138, 142, 143, 144, 145, dead_or_set: 159
insn=81, live_throughout: 13, 14, 133, 138, 142, 143, 144, 145, dead_or_set: 
insn=83, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 134
insn=86, live_throughout: 13, 14, 134, 138, 142, 143, 144, 145, dead_or_set: 
insn=87, live_throughout: 13, 14, 134, 138, 142, 143, 144, 145, dead_or_set: 
insn=89, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 137
insn=247, live_throughout: 13, 14, 137, 138, 142, 143, 144, 145, dead_or_set: 
insn=92, live_throughout: 13, 14, 134, 138, 142, 143, 144, 145, dead_or_set: 
insn=94, live_throughout: 13, 14, 134, 138, 142, 143, 144, 145, dead_or_set: 162
insn=95, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 134, 161, 162
insn=234, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 137, 161
insn=249, live_throughout: 13, 14, 137, 138, 142, 143, 144, 145, dead_or_set: 
insn=109, live_throughout: 13, 14, 133, 138, 142, 143, 144, 145, dead_or_set: 
insn=111, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 133
insn=112, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 
insn=114, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 137
insn=251, live_throughout: 13, 14, 137, 138, 142, 143, 144, 145, dead_or_set: 
insn=117, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 
insn=119, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 164
insn=120, live_throughout: 13, 14, 138, 142, 143, 144, 145, 164, dead_or_set: 165
insn=122, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 164, 165
insn=236, live_throughout: 13, 14, 138, 142, 143, 144, 145, dead_or_set: 137
insn=131, live_throughout: 13, 14, 137, 138, 142, 143, 144, 145, dead_or_set: 
insn=134, live_throughout: 13, 14, 137, 138, 142, 143, 144, dead_or_set: 145
insn=135, live_throughout: 13, 14, 137, 138, 142, 143, 144, dead_or_set: 
insn=137, live_throughout: 13, 14, 137, 138, 142, dead_or_set: 139
insn=253, live_throughout: 13, 14, 137, 138, 139, 142, dead_or_set: 
insn=141, live_throughout: 13, 14, 137, 138, 142, 143, 144, dead_or_set: 
insn=143, live_throughout: 13, 14, 137, 138, 142, 143, 144, dead_or_set: 
insn=144, live_throughout: 13, 14, 137, 138, 142, 143, 144, dead_or_set: 
insn=154, live_throughout: 13, 14, 137, 138, 142, 143, 144, dead_or_set: 174
insn=155, live_throughout: 13, 14, 137, 138, 142, 143, 144, dead_or_set: 174
insn=156, live_throughout: 13, 14, 137, 138, 142, 143, 144, dead_or_set: 
insn=158, live_throughout: 13, 14, 137, 138, 142, dead_or_set: 139, 144
insn=255, live_throughout: 13, 14, 137, 138, 139, 142, dead_or_set: 
insn=161, live_throughout: 13, 14, 137, 138, 142, 143, dead_or_set: 
insn=163, live_throughout: 13, 14, 137, 138, 142, dead_or_set: 139, 143
insn=164, live_throughout: 13, 14, 137, 138, 139, 142, dead_or_set: 
insn=166, live_throughout: 13, 14, 137, 138, 139, 142, dead_or_set: 175
insn=167, live_throughout: 13, 14, 137, 138, 139, 142, 175, dead_or_set: 176
insn=168, live_throughout: 13, 14, 137, 138, 139, 142, dead_or_set: 175, 176, 177
insn=169, live_throughout: 13, 14, 137, 138, 139, 142, dead_or_set: 177
insn=170, live_throughout: 13, 14, 137, 138, 139, 142, dead_or_set: 
insn=174, live_throughout: 13, 14, 137, 138, 142, dead_or_set: 0, 1, 2, 3, 139
insn=185, live_throughout: 0, 1, 2, 3, 13, 14, 142, dead_or_set: 137, 138
insn=175, live_throughout: 13, 14, 24, dead_or_set: 0, 1, 2, 3, 142
insn=200, live_throughout: 13, 14, dead_or_set: 0
insn=206, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 149: (insn_list:REG_DEP_TRUE 260 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 53 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 54 (nil))
init_insns for 159: (insn_list:REG_DEP_TRUE 79 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 94 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 119 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 120 (nil))
init_insns for 175: (insn_list:REG_DEP_TRUE 166 (nil))
init_insns for 176: (insn_list:REG_DEP_TRUE 167 (nil))
init_insns for 177: (insn_list:REG_DEP_TRUE 169 (nil))
changing reg in insn 75
changing reg in insn 80
changing reg in insn 111
changing reg in insn 83
changing reg in insn 95
changing reg in insn 95
changing reg in insn 9
changing reg in insn 14
changing reg in insn 45
changing reg in insn 17
changing reg in insn 29
changing reg in insn 29
changing reg in insn 234
changing reg in insn 236
changing reg in insn 70
changing reg in insn 114
changing reg in insn 89
changing reg in insn 185
changing reg in insn 154
changing reg in insn 230
changing reg in insn 232
changing reg in insn 48
changing reg in insn 23
changing reg in insn 185
changing reg in insn 154
changing reg in insn 143
changing reg in insn 137
changing reg in insn 163
changing reg in insn 158
changing reg in insn 174
changing reg in insn 174
changing reg in insn 174
changing reg in insn 174
changing reg in insn 169
changing reg in insn 166
changing reg in insn 168
changing reg in insn 166
changing reg in insn 2
changing reg in insn 175
changing reg in insn 175
changing reg in insn 175
changing reg in insn 175
changing reg in insn 3
changing reg in insn 163
changing reg in insn 54
changing reg in insn 53
changing reg in insn 17
changing reg in insn 9
changing reg in insn 54
changing reg in insn 53
changing reg in insn 4
changing reg in insn 70
changing reg in insn 158
changing reg in insn 120
changing reg in insn 119
changing reg in insn 83
changing reg in insn 75
changing reg in insn 67
changing reg in insn 120
changing reg in insn 119
changing reg in insn 5
changing reg in insn 134
changing reg in insn 260
changing reg in insn 14
changing reg in insn 29
changing reg in insn 28
changing reg in insn 29
changing reg in insn 53
changing reg in insn 56
changing reg in insn 54
changing reg in insn 56
changing reg in insn 79
changing reg in insn 80
changing reg in insn 95
changing reg in insn 94
changing reg in insn 95
changing reg in insn 119
changing reg in insn 122
changing reg in insn 120
changing reg in insn 122
changing reg in insn 154
changing reg in insn 155
changing reg in insn 166
changing reg in insn 168
changing reg in insn 168
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
Spilling for insn 20.
Using reg 0 for reload 0
Spilling for insn 56.
Spilling for insn 86.
Using reg 0 for reload 0
Spilling for insn 122.
Spilling for insn 169.

Reloads for insn # 20
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 56
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 86
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 122
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 169
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 163.


try_optimize_cfg iteration 1

Edge 20->23 redirected to 24
Edge 21->23 redirected to 24
Deleting block 23.
deleting insn with uid = 161.
deleting insn with uid = 162.
deleting block 23
Removing jump 255.
deleting insn with uid = 255.
deleting insn with uid = 256.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 34 count 48 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 34 count 48 (  1.9)


vfp_propagate_nan

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 24[cc]
;;  ref usage 	r0={11d,10u} r1={4d,11u,4d} r2={3d,9u,2d} r3={4d,4u} r4={7d,4u} r5={1d,4u} r6={3d,5u,2d} r7={3d,5u,2d} r8={3d,1u,1d} r9={3d,3u,1d} r10={2d,2u} r11={2d,2u} r12={7d,5u} r13={1d,24u} r14={1d,1u} r24={16d,13u} 
;;    total ref usage 186{71d,103u,12e} in 66{66 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 6 11 2 NOTE_INSN_DELETED)

(note 11 10 12 2 NOTE_INSN_DELETED)

(note 12 11 2 2 NOTE_INSN_DELETED)

(insn 2 12 9 2 arch/arm/vfp/vfpdouble.c:209 (set (reg/v/f:SI 5 r5 [orig:142 vdd ] [142])
        (reg:SI 0 r0 [ vdd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 260 2 arch/arm/vfp/vfp.h:330 (set (reg:SI 0 r0 [orig:135 D.5287 ] [135])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 1 r1 [orig:143 vdn ] [143]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 260 9 14 2 arch/arm/vfp/vfp.h:330 (set (reg:SI 12 ip [149])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 14 260 15 2 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:135 D.5287 ] [135])
            (reg:SI 12 ip [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 16 2 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  6 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 0 [r0]

;; Pred edge  2 [28.0%]  (fallthru)
(note 16 15 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 18 16 19 3 NOTE_INSN_DELETED)

(note 19 18 17 3 NOTE_INSN_DELETED)

(insn 17 19 20 3 arch/arm/vfp/vfp.h:331 (set (reg:DI 6 r6 [orig:136 D.5286 ] [136])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:143 vdn ] [143])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 20 17 21 3 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 6 r6 [orig:136 D.5286 ] [136])
                        (reg:SI 7 r7 [ D.5286+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 0 r0))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 21 20 22 3 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 12 [ip]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 239 4 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 12 ip [orig:138 tn ] [138])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 239 23 240 4 (set (pc)
        (label_ref 65)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 9)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 

(barrier 240 239 26)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%] 
(code_label 26 240 27 5 3 "" [1 uses])

(note 27 26 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 30 27 31 5 NOTE_INSN_DELETED)

(note 31 30 32 5 NOTE_INSN_DELETED)

(note 32 31 28 5 NOTE_INSN_DELETED)

(insn 28 32 29 5 arch/arm/vfp/vfp.h:333 (set (reg:DI 10 sl [152])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 29 28 230 5 arch/arm/vfp/vfp.h:333 (set (reg:DI 8 r8 [151])
        (and:DI (reg:DI 6 r6 [orig:136 D.5286 ] [136])
            (reg:DI 10 sl [152]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 6 r6 [orig:136 D.5286 ] [136])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 230 29 241 5 arch/arm/vfp/vfp.h:336 (parallel [
            (set (reg/v:SI 12 ip [orig:138 tn ] [138])
                (if_then_else:SI (ne (reg:SI 9 r9 [+4 ])
                        (const_int 0 [0x0]))
                    (const_int 16 [0x10])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(jump_insn 241 230 242 5 (set (pc)
        (label_ref 65)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 

(barrier 242 241 43)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
(code_label 43 242 44 6 2 "" [1 uses])

(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 6 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:135 D.5287 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 46 45 47 6 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  8 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 12 [ip]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 243 7 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 12 ip [orig:138 tn ] [138])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 243 48 244 7 (set (pc)
        (label_ref 65)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 

(barrier 244 243 51)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 24 [cc]
;; live  kill	 0 [r0]

;; Pred edge  6 [50.0%] 
(code_label 51 244 52 8 6 "" [1 uses])

(note 52 51 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 55 52 53 8 NOTE_INSN_DELETED)

(insn 53 55 54 8 arch/arm/vfp/vfp.h:338 (set (reg:SI 12 ip [orig:154 <variable>.significand ] [154])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 vdn ] [143])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 vdn ] [143])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])
        (nil)))

(insn 54 53 56 8 arch/arm/vfp/vfp.h:338 (set (reg:SI 0 r0 [orig:155 <variable>.significand+4 ] [155])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 vdn ] [143])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:143 vdn ] [143])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])
        (nil)))

(insn 56 54 232 8 arch/arm/vfp/vfp.h:338 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 12 ip [orig:154 <variable>.significand ] [154])
                        (reg:SI 0 r0 [orig:155 <variable>.significand+4 ] [155]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 0 r0))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 232 56 65 8 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 12 ip [orig:138 tn ] [138])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 4 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 65 232 66 9 4 "" [3 uses])

(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 67 66 68 9 arch/arm/vfp/vfpdouble.c:215 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 2 r2 [orig:144 vdm ] [144])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 68 67 69 9 arch/arm/vfp/vfpdouble.c:215 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  11 [85.0%] 
;; Succ edge  10 [15.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  9 [15.0%]  (fallthru)
(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 245 10 arch/arm/vfp/vfpdouble.c:211 (set (reg/v:SI 4 r4 [orig:137 tm ] [137])
        (reg/v/f:SI 2 r2 [orig:144 vdm ] [144])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 245 70 246 10 (set (pc)
        (label_ref 131)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 18)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 246 245 73)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  9 [85.0%] 
(code_label 73 246 74 11 8 "" [1 uses])

(note 74 73 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 76 74 77 11 NOTE_INSN_DELETED)

(note 77 76 78 11 NOTE_INSN_DELETED)

(note 78 77 75 11 NOTE_INSN_DELETED)

(insn 75 78 79 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 0 r0 [orig:133 D.5293 ] [133])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 2 r2 [orig:144 vdm ] [144]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 79 75 80 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 4 r4 [159])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 80 79 81 11 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:133 D.5293 ] [133])
            (reg:SI 4 r4 [159]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 81 80 82 11 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 11 -> ( 12 15)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  12 [28.0%]  (fallthru)
;; Succ edge  15 [72.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 0 [r0]

;; Pred edge  11 [28.0%]  (fallthru)
(note 82 81 84 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 84 82 85 12 NOTE_INSN_DELETED)

(note 85 84 83 12 NOTE_INSN_DELETED)

(insn 83 85 86 12 arch/arm/vfp/vfp.h:331 (set (reg:DI 6 r6 [orig:134 D.5292 ] [134])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 2 r2 [orig:144 vdm ] [144])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 86 83 87 12 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 6 r6 [orig:134 D.5292 ] [134])
                        (reg:SI 7 r7 [ D.5292+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 0 r0))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 87 86 88 12 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  13 [50.0%]  (fallthru)
;; Succ edge  14 [50.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 88 87 89 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 247 13 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 4 r4 [orig:137 tm ] [137])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 247 89 248 13 (set (pc)
        (label_ref 131)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 18)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 248 247 92)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	 24 [cc]

;; Pred edge  12 [50.0%] 
(code_label 92 248 93 14 11 "" [1 uses])

(note 93 92 96 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 96 93 97 14 NOTE_INSN_DELETED)

(note 97 96 98 14 NOTE_INSN_DELETED)

(note 98 97 94 14 NOTE_INSN_DELETED)

(insn 94 98 95 14 arch/arm/vfp/vfp.h:333 (set (reg:DI 10 sl [162])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 95 94 234 14 arch/arm/vfp/vfp.h:333 (set (reg:DI 8 r8 [161])
        (and:DI (reg:DI 6 r6 [orig:134 D.5292 ] [134])
            (reg:DI 10 sl [162]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 6 r6 [orig:134 D.5292 ] [134])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 234 95 249 14 arch/arm/vfp/vfp.h:336 (parallel [
            (set (reg/v:SI 4 r4 [orig:137 tm ] [137])
                (if_then_else:SI (ne (reg:SI 9 r9 [+4 ])
                        (const_int 0 [0x0]))
                    (const_int 16 [0x10])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(jump_insn 249 234 250 14 (set (pc)
        (label_ref 131)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 18)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 250 249 109)

;; Start of basic block ( 11) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [72.0%] 
(code_label 109 250 110 15 10 "" [1 uses])

(note 110 109 111 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 112 15 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:133 D.5293 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 112 111 113 15 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 15 -> ( 17 16)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  17 [50.0%] 
;; Succ edge  16 [50.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  15 [50.0%]  (fallthru)
(note 113 112 114 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 114 113 251 16 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 4 r4 [orig:137 tm ] [137])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 251 114 252 16 (set (pc)
        (label_ref 131)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 252 251 117)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	 0 [r0]

;; Pred edge  15 [50.0%] 
(code_label 117 252 118 17 13 "" [1 uses])

(note 118 117 121 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 121 118 119 17 NOTE_INSN_DELETED)

(insn 119 121 120 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 4 r4 [orig:164 <variable>.significand ] [164])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:144 vdm ] [144])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:144 vdm ] [144])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])
        (nil)))

(insn 120 119 122 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 0 r0 [orig:165 <variable>.significand+4 ] [165])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:144 vdm ] [144])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:144 vdm ] [144])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])
        (nil)))

(insn 122 120 236 17 arch/arm/vfp/vfp.h:338 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 4 r4 [orig:164 <variable>.significand ] [164])
                        (reg:SI 0 r0 [orig:165 <variable>.significand+4 ] [165]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 0 r0))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 236 122 131 17 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 4 r4 [orig:137 tm ] [137])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 17 14 10 13 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
;; Pred edge  10 [100.0%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  16 [100.0%] 
(code_label 131 236 132 18 9 "" [4 uses])

(note 132 131 133 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 133 132 134 18 NOTE_INSN_DELETED)

(insn 134 133 135 18 arch/arm/vfp/vfpdouble.c:218 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:145 fpscr ] [145])
                (const_int 1 [0x1])
                (const_int 25 [0x19]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 135 134 136 18 arch/arm/vfp/vfpdouble.c:218 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 141)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  20 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  18 [50.0%]  (fallthru)
(note 136 135 137 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 137 136 253 19 arch/arm/vfp/vfpdouble.c:222 (set (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(jump_insn 253 137 254 19 (set (pc)
        (label_ref 170)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 25)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  25 [100.0%] 

(barrier 254 253 141)

;; Start of basic block ( 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [50.0%] 
(code_label 141 254 142 20 15 "" [1 uses])

(note 142 141 143 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 143 142 144 20 arch/arm/vfp/vfpdouble.c:229 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:138 tn ] [138])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 144 143 145 20 arch/arm/vfp/vfpdouble.c:229 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 164)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 20 -> ( 24 21)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  24 [28.0%] 
;; Succ edge  21 [72.0%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 12 [ip] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  20 [72.0%]  (fallthru)
(note 145 144 146 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 146 145 147 21 NOTE_INSN_DELETED)

(note 147 146 149 21 NOTE_INSN_DELETED)

(note 149 147 150 21 NOTE_INSN_DELETED)

(note 150 149 152 21 NOTE_INSN_DELETED)

(note 152 150 153 21 NOTE_INSN_DELETED)

(note 153 152 154 21 NOTE_INSN_DELETED)

(insn 154 153 155 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (parallel [
            (set (reg:SI 3 r3 [174])
                (and:SI (ne:SI (reg/v:SI 4 r4 [orig:137 tm ] [137])
                        (const_int 48 [0x30]))
                    (eq:SI (reg/v:SI 12 ip [orig:138 tn ] [138])
                        (const_int 16 [0x10]))))
            (clobber (reg:CC 24 cc))
        ]) 290 {*and_scc_scc_nodom} (nil))

(insn 155 154 156 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [174])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 156 155 157 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 164)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 21 -> ( 24 22)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  24 [50.0%] 
;; Succ edge  22 [50.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  21 [50.0%]  (fallthru)
(note 157 156 158 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 158 157 164 22 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
        (reg/v/f:SI 2 r2 [orig:144 vdm ] [144])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 22 -> ( 24)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 21 22 20) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  21 [50.0%] 
;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  20 [28.0%] 
(code_label 164 158 165 24 18 "" [2 uses])

(note 165 164 166 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 166 165 167 24 arch/arm/vfp/vfpdouble.c:236 (set (reg:DI 8 r8 [orig:175 <variable>.significand ] [175])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (nil)))

(insn 167 166 168 24 arch/arm/vfp/vfpdouble.c:236 (set (reg:DI 6 r6 [176])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 168 167 169 24 arch/arm/vfp/vfpdouble.c:236 (set (reg:DI 2 r2 [177])
        (ior:DI (reg:DI 8 r8 [orig:175 <variable>.significand ] [175])
            (reg:DI 6 r6 [176]))) 86 {iordi3} (expr_list:REG_EQUIV (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (expr_list:REG_EQUAL (ior:DI (reg:DI 8 r8 [orig:175 <variable>.significand ] [175])
                (const_int 2305843009213693952 [0x2000000000000000]))
            (nil))))

(insn 169 168 170 24 arch/arm/vfp/vfpdouble.c:236 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 2 r2 [177])) 163 {*arm_movdi} (nil))
;; End of basic block 24 -> ( 25)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  25 [100.0%]  (fallthru)

;; Start of basic block ( 24 19) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  24 [100.0%]  (fallthru)
;; Pred edge  19 [100.0%] 
(code_label 170 169 171 25 16 "" [1 uses])

(note 171 170 176 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(note 176 171 177 25 NOTE_INSN_DELETED)

(note 177 176 179 25 NOTE_INSN_DELETED)

(note 179 177 180 25 NOTE_INSN_DELETED)

(note 180 179 182 25 NOTE_INSN_DELETED)

(note 182 180 183 25 NOTE_INSN_DELETED)

(note 183 182 184 25 NOTE_INSN_DELETED)

(note 184 183 238 25 NOTE_INSN_DELETED)

(note 238 184 174 25 NOTE_INSN_DELETED)

(insn 174 238 185 25 arch/arm/vfp/vfpdouble.c:239 (parallel [
            (set (reg:SI 0 r0)
                (mem/s:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139]) [0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s:SI (plus:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
                        (const_int 4 [0x4])) [0 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s:SI (plus:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
                        (const_int 8 [0x8])) [0 S4 A64]))
            (set (reg:SI 3 r3)
                (mem/s:SI (plus:SI (reg/v/f:SI 1 r1 [orig:139 nan ] [139])
                        (const_int 12 [0xc])) [0 S4 A32]))
        ]) 188 {*ldmsi4} (nil))

(insn 185 174 175 25 arch/arm/vfp/vfpdouble.c:244 (set (reg:CC_DEQ 24 cc)
        (compare:CC_DEQ (ior:SI (eq:SI (reg/v:SI 4 r4 [orig:137 tm ] [137])
                    (const_int 48 [0x30]))
                (eq:SI (reg/v:SI 12 ip [orig:138 tn ] [138])
                    (const_int 48 [0x30])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (nil))

(insn 175 185 200 25 arch/arm/vfp/vfpdouble.c:239 (parallel [
            (set (mem/s:SI (reg/v/f:SI 5 r5 [orig:142 vdd ] [142]) [0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 5 r5 [orig:142 vdd ] [142])
                        (const_int 4 [0x4])) [0 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 5 r5 [orig:142 vdd ] [142])
                        (const_int 8 [0x8])) [0 S4 A64])
                (reg:SI 2 r2))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 5 r5 [orig:142 vdd ] [142])
                        (const_int 12 [0xc])) [0 S4 A32])
                (reg:SI 3 r3))
        ]) 195 {*stmsi4} (nil))

(insn 200 175 206 25 arch/arm/vfp/vfpdouble.c:245 (set (reg/i:SI 0 r0)
        (if_then_else:SI (ne (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (const_int 1 [0x1])
            (const_int 256 [0x100]))) 240 {*movsicc_insn} (nil))

(insn 206 200 259 25 arch/arm/vfp/vfpdouble.c:245 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 25 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 259 206 261 NOTE_INSN_DELETED)

(note 261 259 0 NOTE_INSN_DELETED)


;; Function vfp_double_multiply (vfp_double_multiply)[0:173]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 275.
verify found no changes in insn with uid = 275.
deleting insn with uid = 29.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 39 count 51 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 39 count 52 (  1.9)

Pass 0 for finding allocno costs

    a16 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r225,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a2(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a10(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a14(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a15(r227,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a16(r230,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a17(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:170000
  a20(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a21(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a22(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a24(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a28(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a34(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a39(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a40(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a43(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r230: preferred GENERAL_REGS, alternative NO_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a2(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a10(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a14(r144,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a15(r227,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a16(r230,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a17(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:170000
  a20(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a21(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a22(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a24(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a28(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a34(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a39(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a40(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a43(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 228(l0): point = 0
   Insn 222(l0): point = 2
   Insn 214(l0): point = 5
   Insn 213(l0): point = 7
   Insn 215(l0): point = 12
   Insn 211(l0): point = 15
   Insn 210(l0): point = 18
   Insn 209(l0): point = 20
   Insn 205(l0): point = 22
   Insn 206(l0): point = 28
   Insn 204(l0): point = 30
   Insn 202(l0): point = 37
   Insn 268(l0): point = 40
   Insn 194(l0): point = 43
   Insn 192(l0): point = 46
   Insn 191(l0): point = 48
   Insn 189(l0): point = 50
   Insn 188(l0): point = 56
   Insn 186(l0): point = 58
   Insn 190(l0): point = 64
   Insn 185(l0): point = 66
   Insn 187(l0): point = 68
   Insn 184(l0): point = 70
   Insn 259(l0): point = 72
   Insn 258(l0): point = 74
   Insn 181(l0): point = 77
   Insn 266(l0): point = 80
   Insn 176(l0): point = 82
   Insn 169(l0): point = 85
   Insn 168(l0): point = 87
   Insn 167(l0): point = 90
   Insn 165(l0): point = 93
   Insn 164(l0): point = 95
   Insn 156(l0): point = 97
   Insn 130(l0): point = 99
   Insn 160(l0): point = 101
   Insn 152(l0): point = 103
   Insn 248(l0): point = 105
   Insn 247(l0): point = 107
   Insn 246(l0): point = 109
   Insn 249(l0): point = 111
   Insn 120(l0): point = 113
   Insn 272(l0): point = 115
   Insn 271(l0): point = 117
   Insn 116(l0): point = 119
   Insn 264(l0): point = 122
   Insn 108(l0): point = 124
   Insn 107(l0): point = 126
   Insn 109(l0): point = 128
   Insn 106(l0): point = 130
   Insn 102(l0): point = 133
   Insn 101(l0): point = 135
   Insn 98(l0): point = 137
   Insn 95(l0): point = 142
   Insn 97(l0): point = 144
   Insn 93(l0): point = 146
   Insn 262(l0): point = 149
   Insn 88(l0): point = 151
   Insn 87(l0): point = 153
   Insn 86(l0): point = 155
   Insn 85(l0): point = 157
   Insn 83(l0): point = 159
   Insn 260(l0): point = 162
   Insn 77(l0): point = 164
   Insn 76(l0): point = 166
   Insn 78(l0): point = 168
   Insn 73(l0): point = 170
   Insn 71(l0): point = 173
   Insn 70(l0): point = 175
   Insn 67(l0): point = 177
   Insn 64(l0): point = 182
   Insn 66(l0): point = 184
   Insn 58(l0): point = 187
   Insn 57(l0): point = 189
   Insn 56(l0): point = 191
   Insn 55(l0): point = 193
   Insn 54(l0): point = 195
   Insn 51(l0): point = 198
   Insn 50(l0): point = 200
   Insn 48(l0): point = 202
   Insn 47(l0): point = 204
   Insn 45(l0): point = 207
   Insn 44(l0): point = 209
   Insn 42(l0): point = 211
   Insn 39(l0): point = 213
   Insn 37(l0): point = 216
   Insn 36(l0): point = 218
   Insn 34(l0): point = 220
   Insn 33(l0): point = 222
   Insn 31(l0): point = 225
   Insn 30(l0): point = 227
   Insn 275(l0): point = 229
   Insn 28(l0): point = 231
   Insn 25(l0): point = 233
   Insn 24(l0): point = 235
   Insn 23(l0): point = 237
   Insn 21(l0): point = 239
   Insn 19(l0): point = 241
   Insn 16(l0): point = 244
   Insn 15(l0): point = 246
   Insn 14(l0): point = 248
   Insn 12(l0): point = 251
   Insn 11(l0): point = 253
   Insn 10(l0): point = 255
   Insn 9(l0): point = 257
   Insn 5(l0): point = 259
   Insn 2(l0): point = 261
   Insn 4(l0): point = 263
   Insn 3(l0): point = 265
 a0(r153): [162..168] [149..151] [122..128] [3..12]
 a1(r155): [196..261] [164..186] [154..161] [125..148] [6..121]
 a2(r225): [10..10] [6..8]
 a3(r223): [18..28] [8..15]
 a4(r222): [8..31]
 a5(r134): [21..59]
 a6(r148): [80..82] [23..77]
 a7(r221): [40..64] [31..37]
 a8(r147): [31..51]
 a9(r135): [49..74]
 a10(r146): [51..101]
 a11(r220): [51..72]
 a12(r143): [59..99]
 a13(r137): [69..97]
 a14(r144): [88..103]
 a15(r227): [98..105]
 a16(r230): [98..107]
 a17(r229): [100..109]
 a18(r228): [102..111]
 a19(r157): [247..263] [192..244] [185..186] [133..148] [106..121]
 a20(r156): [249..265] [194..246] [133..148] [108..121]
 a21(r201): [114..117]
 a22(r199): [118..119]
 a23(r140): [133..146] [120..121]
 a24(r142): [225..233] [133..148] [120..121]
 a25(r196): [125..126]
 a26(r193): [129..135]
 a27(r191): [136..139]
 a28(r192): [140..144] [138..138]
 a29(r190): [138..142]
 a30(r188): [154..155]
 a31(r187): [158..159]
 a32(r183): [167..170]
 a33(r180): [176..179]
 a34(r181): [180..184] [178..178]
 a35(r179): [178..182]
 a36(r141): [198..213] [183..186]
 a37(r158): [190..259]
 a38(r177): [201..202]
 a39(r176): [201..204]
 a40(r168): [210..231]
 a41(r174): [210..211]
 a42(r171): [219..220]
 a43(r170): [219..222]
 a44(r169): [228..229]
 a45(r165): [236..237]
 a46(r164): [238..239]
 a47(r162): [238..241]
 a48(r133): [245..248]
 a49(r160): [254..255]
 a50(r159): [254..257]
Compressing live ranges: from 268 to 116 - 43%
Ranges after the compression:
 a0(r153): [65..68] [58..59] [43..46] [0..4]
 a1(r155): [82..113] [66..78] [60..64] [44..57] [1..42]
 a2(r225): [3..3] [1..2]
 a3(r223): [6..9] [2..5]
 a4(r222): [2..10]
 a5(r134): [7..15]
 a6(r148): [21..22] [8..20]
 a7(r221): [12..16] [10..11]
 a8(r147): [10..14]
 a9(r135): [13..19]
 a10(r146): [14..28]
 a11(r220): [14..18]
 a12(r143): [15..26]
 a13(r137): [17..24]
 a14(r144): [23..30]
 a15(r227): [25..31]
 a16(r230): [25..33]
 a17(r229): [27..35]
 a18(r228): [29..36]
 a19(r157): [106..114] [80..103] [77..78] [48..57] [32..42]
 a20(r156): [108..115] [81..105] [48..57] [34..42]
 a21(r201): [37..38]
 a22(r199): [39..40]
 a23(r140): [48..56] [41..42]
 a24(r142): [93..97] [48..57] [41..42]
 a25(r196): [44..45]
 a26(r193): [47..49]
 a27(r191): [50..52]
 a28(r192): [53..55] [51..51]
 a29(r190): [51..54]
 a30(r188): [60..61]
 a31(r187): [62..63]
 a32(r183): [67..69]
 a33(r180): [70..72]
 a34(r181): [73..76] [71..71]
 a35(r179): [71..74]
 a36(r141): [83..89] [75..78]
 a37(r158): [79..112]
 a38(r177): [84..85]
 a39(r176): [84..86]
 a40(r168): [87..96]
 a41(r174): [87..88]
 a42(r171): [90..91]
 a43(r170): [90..92]
 a44(r169): [94..95]
 a45(r165): [98..99]
 a46(r164): [100..101]
 a47(r162): [100..102]
 a48(r133): [104..107]
 a49(r160): [109..110]
 a50(r159): [109..111]
+++Allocating 408 bytes for conflict table (uncompressed size 408)
;; a0(r153,l0) conflicts: a2(r225,l0) a1(r155,l0) a3(r223,l0) a4(r222,l0) a25(r196,l0) a32(r183,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r155,l0) conflicts: a0(r153,l0) a2(r225,l0) a3(r223,l0) a4(r222,l0) a5(r134,l0) a6(r148,l0) a8(r147,l0) a7(r221,l0) a9(r135,l0) a11(r220,l0) a10(r146,l0) a12(r143,l0) a13(r137,l0) a14(r144,l0) a15(r227,l0) a16(r230,l0) a17(r229,l0) a18(r228,l0) a19(r157,l0) a20(r156,l0) a21(r201,l0) a22(r199,l0) a23(r140,l0) a24(r142,l0) a25(r196,l0) a26(r193,l0) a27(r191,l0) a29(r190,l0) a28(r192,l0) a30(r188,l0) a31(r187,l0) a32(r183,l0) a33(r180,l0) a35(r179,l0) a34(r181,l0) a36(r141,l0) a37(r158,l0) a38(r177,l0) a39(r176,l0) a41(r174,l0) a40(r168,l0) a42(r171,l0) a43(r170,l0) a44(r169,l0) a45(r165,l0) a46(r164,l0) a47(r162,l0) a48(r133,l0) a49(r160,l0) a50(r159,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r225,l0) conflicts: a0(r153,l0) a1(r155,l0) a3(r223,l0) a4(r222,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r223,l0) conflicts: a0(r153,l0) a2(r225,l0) a1(r155,l0) a4(r222,l0) a5(r134,l0) a6(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r222,l0) conflicts: a0(r153,l0) a2(r225,l0) a1(r155,l0) a3(r223,l0) a5(r134,l0) a6(r148,l0) a8(r147,l0) a7(r221,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r134,l0) conflicts: a1(r155,l0) a3(r223,l0) a4(r222,l0) a6(r148,l0) a8(r147,l0) a7(r221,l0) a9(r135,l0) a11(r220,l0) a10(r146,l0) a12(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r148,l0) conflicts: a1(r155,l0) a3(r223,l0) a4(r222,l0) a5(r134,l0) a8(r147,l0) a7(r221,l0) a9(r135,l0) a11(r220,l0) a10(r146,l0) a12(r143,l0) a13(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r221,l0) conflicts: a1(r155,l0) a4(r222,l0) a5(r134,l0) a6(r148,l0) a8(r147,l0) a9(r135,l0) a11(r220,l0) a10(r146,l0) a12(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r147,l0) conflicts: a1(r155,l0) a4(r222,l0) a5(r134,l0) a6(r148,l0) a7(r221,l0) a9(r135,l0) a11(r220,l0) a10(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r135,l0) conflicts: a1(r155,l0) a5(r134,l0) a6(r148,l0) a8(r147,l0) a7(r221,l0) a11(r220,l0) a10(r146,l0) a12(r143,l0) a13(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r146,l0) conflicts: a1(r155,l0) a5(r134,l0) a6(r148,l0) a8(r147,l0) a7(r221,l0) a9(r135,l0) a11(r220,l0) a12(r143,l0) a13(r137,l0) a14(r144,l0) a15(r227,l0) a16(r230,l0) a17(r229,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r220,l0) conflicts: a1(r155,l0) a5(r134,l0) a6(r148,l0) a8(r147,l0) a7(r221,l0) a9(r135,l0) a10(r146,l0) a12(r143,l0) a13(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r143,l0) conflicts: a1(r155,l0) a5(r134,l0) a6(r148,l0) a7(r221,l0) a9(r135,l0) a11(r220,l0) a10(r146,l0) a13(r137,l0) a14(r144,l0) a15(r227,l0) a16(r230,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r137,l0) conflicts: a1(r155,l0) a6(r148,l0) a9(r135,l0) a11(r220,l0) a10(r146,l0) a12(r143,l0) a14(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r144,l0) conflicts: a1(r155,l0) a10(r146,l0) a12(r143,l0) a13(r137,l0) a15(r227,l0) a16(r230,l0) a17(r229,l0) a18(r228,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r227,l0) conflicts: a1(r155,l0) a10(r146,l0) a12(r143,l0) a14(r144,l0) a16(r230,l0) a17(r229,l0) a18(r228,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r230,l0) conflicts: a1(r155,l0) a10(r146,l0) a12(r143,l0) a14(r144,l0) a15(r227,l0) a17(r229,l0) a18(r228,l0) a19(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r229,l0) conflicts: a1(r155,l0) a10(r146,l0) a14(r144,l0) a15(r227,l0) a16(r230,l0) a18(r228,l0) a19(r157,l0) a20(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r228,l0) conflicts: a1(r155,l0) a14(r144,l0) a15(r227,l0) a16(r230,l0) a17(r229,l0) a19(r157,l0) a20(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r157,l0) conflicts: a1(r155,l0) a16(r230,l0) a17(r229,l0) a18(r228,l0) a20(r156,l0) a21(r201,l0) a22(r199,l0) a23(r140,l0) a24(r142,l0) a26(r193,l0) a27(r191,l0) a29(r190,l0) a28(r192,l0) a36(r141,l0) a37(r158,l0) a38(r177,l0) a39(r176,l0) a41(r174,l0) a40(r168,l0) a42(r171,l0) a43(r170,l0) a44(r169,l0) a45(r165,l0) a46(r164,l0) a47(r162,l0) a48(r133,l0) a49(r160,l0) a50(r159,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a20(r156,l0) conflicts: a1(r155,l0) a17(r229,l0) a18(r228,l0) a19(r157,l0) a21(r201,l0) a22(r199,l0) a23(r140,l0) a24(r142,l0) a26(r193,l0) a27(r191,l0) a29(r190,l0) a28(r192,l0) a36(r141,l0) a37(r158,l0) a38(r177,l0) a39(r176,l0) a41(r174,l0) a40(r168,l0) a42(r171,l0) a43(r170,l0) a44(r169,l0) a45(r165,l0) a46(r164,l0) a47(r162,l0) a48(r133,l0) a49(r160,l0) a50(r159,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a21(r201,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r199,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r140,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a24(r142,l0) a26(r193,l0) a27(r191,l0) a29(r190,l0) a28(r192,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r142,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a23(r140,l0) a26(r193,l0) a27(r191,l0) a29(r190,l0) a28(r192,l0) a37(r158,l0) a40(r168,l0) a44(r169,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r196,l0) conflicts: a0(r153,l0) a1(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r193,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a23(r140,l0) a24(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r191,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a23(r140,l0) a24(r142,l0) a29(r190,l0) a28(r192,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r192,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a23(r140,l0) a24(r142,l0) a27(r191,l0) a29(r190,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r190,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a23(r140,l0) a24(r142,l0) a27(r191,l0) a28(r192,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r188,l0) conflicts: a1(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a31(r187,l0) conflicts: a1(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r183,l0) conflicts: a0(r153,l0) a1(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r180,l0) conflicts: a1(r155,l0) a35(r179,l0) a34(r181,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r181,l0) conflicts: a1(r155,l0) a33(r180,l0) a35(r179,l0) a36(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a35(r179,l0) conflicts: a1(r155,l0) a33(r180,l0) a34(r181,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a36(r141,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a34(r181,l0) a37(r158,l0) a38(r177,l0) a39(r176,l0) a41(r174,l0) a40(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a37(r158,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a24(r142,l0) a36(r141,l0) a38(r177,l0) a39(r176,l0) a41(r174,l0) a40(r168,l0) a42(r171,l0) a43(r170,l0) a44(r169,l0) a45(r165,l0) a46(r164,l0) a47(r162,l0) a48(r133,l0) a49(r160,l0) a50(r159,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a38(r177,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a36(r141,l0) a37(r158,l0) a39(r176,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a39(r176,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a36(r141,l0) a37(r158,l0) a38(r177,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a40(r168,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a24(r142,l0) a36(r141,l0) a37(r158,l0) a41(r174,l0) a42(r171,l0) a43(r170,l0) a44(r169,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a41(r174,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a36(r141,l0) a37(r158,l0) a40(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a42(r171,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a37(r158,l0) a40(r168,l0) a43(r170,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a43(r170,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a37(r158,l0) a40(r168,l0) a42(r171,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a44(r169,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a24(r142,l0) a37(r158,l0) a40(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a45(r165,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a37(r158,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a46(r164,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a37(r158,l0) a47(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a47(r162,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a37(r158,l0) a46(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a48(r133,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a37(r158,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a49(r160,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a37(r158,l0) a50(r159,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a50(r159,l0) conflicts: a1(r155,l0) a19(r157,l0) a20(r156,l0) a37(r158,l0) a49(r160,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a22(r199)<->a24(r142)@125:shuffle
  cp1:a22(r199)<->a23(r140)@125:shuffle
  cp2:a21(r201)<->a22(r199)@125:shuffle
  cp3:a10(r146)<->a18(r228)@125:shuffle
  cp4:a12(r143)<->a17(r229)@125:shuffle
  cp5:a13(r137)<->a16(r230)@125:shuffle
  cp6:a13(r137)<->a15(r227)@125:shuffle
  cp7:a0(r153)<->a26(r193)@1000:move
  cp8:a26(r193)<->a27(r191)@125:shuffle
  cp9:a35(r179)<->a36(r141)@125:shuffle
  cp10:a45(r165)<->a47(r162)@125:shuffle
  cp11:a45(r165)<->a46(r164)@125:shuffle
  regions=1, blocks=27, points=116
    allocnos=51, copies=12, conflicts=2, ranges=75

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r153 1r155 2r225 3r223 4r222 5r134 6r148 7r221 8r147 9r135 10r146 11r220 12r143 13r137 14r144 15r227 16r230 17r229 18r228 19r157 20r156 21r201 22r199 23r140 24r142 25r196 26r193 27r191 28r192 29r190 30r188 31r187 32r183 33r180 34r181 35r179 36r141 37r158 38r177 39r176 40r168 41r174 42r171 43r170 44r169 45r165 46r164 47r162 48r133 49r160 50r159
    modified regnos: 133 134 135 137 140 141 142 143 144 146 147 148 153 155 156 157 158 159 160 162 164 165 168 169 170 171 174 176 177 179 180 181 183 187 188 190 191 192 193 196 199 201 220 221 222 223 225 227 228 229 230
    border:
    Pressure: GENERAL_REGS=16
    Reg 153 of GENERAL_REGS has 5 regs less
    Reg 155 of GENERAL_REGS has 5 regs less
    Reg 225 of GENERAL_REGS has 1 regs less
    Reg 223 of GENERAL_REGS has 1 regs less
    Reg 222 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 221 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 220 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 227 of GENERAL_REGS has 1 regs less
    Reg 230 of GENERAL_REGS has 1 regs less
    Reg 229 of GENERAL_REGS has 1 regs less
    Reg 228 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 4 regs less
    Reg 156 of GENERAL_REGS has 4 regs less
    Reg 201 of GENERAL_REGS has 1 regs less
    Reg 199 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 196 of GENERAL_REGS has 1 regs less
    Reg 193 of GENERAL_REGS has 1 regs less
    Reg 191 of GENERAL_REGS has 1 regs less
    Reg 192 of GENERAL_REGS has 1 regs less
    Reg 190 of GENERAL_REGS has 1 regs less
    Reg 188 of GENERAL_REGS has 1 regs less
    Reg 187 of GENERAL_REGS has 1 regs less
    Reg 183 of GENERAL_REGS has 1 regs less
    Reg 180 of GENERAL_REGS has 1 regs less
    Reg 181 of GENERAL_REGS has 1 regs less
    Reg 179 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 4 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 174 of GENERAL_REGS has 1 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 169 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
      Pushing a50(r159,l0)
      Pushing a49(r160,l0)
      Pushing a48(r133,l0)
      Pushing a47(r162,l0)
      Pushing a46(r164,l0)
      Pushing a45(r165,l0)
      Pushing a44(r169,l0)
      Pushing a43(r170,l0)
      Pushing a42(r171,l0)
      Pushing a41(r174,l0)
      Pushing a39(r176,l0)
      Pushing a38(r177,l0)
      Pushing a35(r179,l0)
      Pushing a34(r181,l0)
      Pushing a31(r187,l0)
      Pushing a30(r188,l0)
      Pushing a29(r190,l0)
      Pushing a28(r192,l0)
      Pushing a25(r196,l0)
      Pushing a22(r199,l0)
      Pushing a2(r225,l0)
      Pushing a40(r168,l0)
      Pushing a36(r141,l0)
      Pushing a33(r180,l0)
      Pushing a26(r193,l0)
      Pushing a24(r142,l0)
      Pushing a23(r140,l0)
      Pushing a18(r228,l0)
      Pushing a17(r229,l0)
      Pushing a16(r230,l0)
      Pushing a15(r227,l0)
      Pushing a3(r223,l0)
      Pushing a21(r201,l0)
      Pushing a14(r144,l0)
      Pushing a4(r222,l0)
      Pushing a32(r183,l0)
      Pushing a27(r191,l0)
      Pushing a37(r158,l0)
      Pushing a20(r156,l0)
      Pushing a19(r157,l0)
      Pushing a0(r153,l0)
      Pushing a10(r146,l0)(potential spill: pri=540, cost=20000)
      Pushing a13(r137,l0)
      Pushing a8(r147,l0)(potential spill: pri=800, cost=20000)
      Pushing a12(r143,l0)(potential spill: pri=800, cost=20000)
      Pushing a7(r221,l0)
      Pushing a6(r148,l0)
      Pushing a11(r220,l0)
      Pushing a5(r134,l0)
      Pushing a9(r135,l0)
      Pushing a1(r155,l0)
      Popping a1(r155,l0)  -- assign reg 12
      Popping a9(r135,l0)  -- assign reg 2
      Popping a5(r134,l0)  -- assign reg 0
      Popping a11(r220,l0)  -- assign reg 4
      Popping a6(r148,l0)  -- assign reg 6
      Popping a7(r221,l0)  -- assign reg 8
      Popping a12(r143,l0)  -- assign reg 10
      Popping a8(r147,l0)  -- assign reg 10
      Popping a13(r137,l0)  -- assign reg 0
      Popping a10(r146,l0)  -- spill
      Popping a0(r153,l0)  -- assign reg 4
      Popping a19(r157,l0)  -- assign reg 2
      Popping a20(r156,l0)  -- assign reg 1
      Popping a37(r158,l0)  -- assign reg 3
      Popping a27(r191,l0)  -- assign reg 4
      Popping a32(r183,l0)  -- assign reg 3
      Popping a4(r222,l0)  -- assign reg 2
      Popping a14(r144,l0)  -- assign reg 2
      Popping a21(r201,l0)  -- assign reg 3
      Popping a3(r223,l0)  -- assign reg 8
      Popping a15(r227,l0)  -- assign reg 1
      Popping a16(r230,l0)  -- assign reg 0
      Popping a17(r229,l0)  -- assign reg 10
      Popping a18(r228,l0)  -- assign reg 4
      Popping a23(r140,l0)  -- assign reg 3
      Popping a24(r142,l0)  -- assign reg 0
      Popping a26(r193,l0)  -- assign reg 4
      Popping a33(r180,l0)  -- assign reg 2
      Popping a36(r141,l0)  -- assign reg 0
      Popping a40(r168,l0)  -- assign reg 4
      Popping a2(r225,l0)  -- assign reg 0
      Popping a22(r199,l0)  -- assign reg 3
      Popping a25(r196,l0)  -- assign reg 2
      Popping a28(r192,l0)  -- assign reg 6
      Popping a29(r190,l0)  -- assign reg 8
      Popping a30(r188,l0)  -- assign reg 2
      Popping a31(r187,l0)  -- assign reg 3
      Popping a34(r181,l0)  -- assign reg 4
      Popping a35(r179,l0)  -- assign reg 0
      Popping a38(r177,l0)  -- assign reg 4
      Popping a39(r176,l0)  -- assign reg 5
      Popping a41(r174,l0)  -- assign reg 5
      Popping a42(r171,l0)  -- assign reg 0
      Popping a43(r170,l0)  -- assign reg 5
      Popping a44(r169,l0)  -- assign reg 5
      Popping a45(r165,l0)  -- assign reg 0
      Popping a46(r164,l0)  -- assign reg 0
      Popping a47(r162,l0)  -- assign reg 4
      Popping a48(r133,l0)  -- assign reg 0
      Popping a49(r160,l0)  -- assign reg 0
      Popping a50(r159,l0)  -- assign reg 4
Disposition:
   48:r133 l0     0    5:r134 l0     0    9:r135 l0     2   13:r137 l0     0
   23:r140 l0     3   36:r141 l0     0   24:r142 l0     0   12:r143 l0    10
   14:r144 l0     2   10:r146 l0   mem    8:r147 l0    10    6:r148 l0     6
    0:r153 l0     4    1:r155 l0    12   20:r156 l0     1   19:r157 l0     2
   37:r158 l0     3   50:r159 l0     4   49:r160 l0     0   47:r162 l0     4
   46:r164 l0     0   45:r165 l0     0   40:r168 l0     4   44:r169 l0     5
   43:r170 l0     5   42:r171 l0     0   41:r174 l0     5   39:r176 l0     5
   38:r177 l0     4   35:r179 l0     0   33:r180 l0     2   34:r181 l0     4
   32:r183 l0     3   31:r187 l0     3   30:r188 l0     2   29:r190 l0     8
   27:r191 l0     4   28:r192 l0     6   26:r193 l0     4   25:r196 l0     2
   22:r199 l0     3   21:r201 l0     3   11:r220 l0     4    7:r221 l0     8
    4:r222 l0     2    3:r223 l0     8    2:r225 l0     0   15:r227 l0     1
   18:r228 l0     4   17:r229 l0    10   16:r230 l0     0
New iteration of spill/restore move
+++Costs: overall 4000, reg -16000, mem 20000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 3, 13, 14, dead_or_set: 1, 156
insn=4, live_throughout: 0, 3, 13, 14, 156, dead_or_set: 2, 157
insn=2, live_throughout: 3, 13, 14, 156, 157, dead_or_set: 0, 155
insn=5, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 3, 158
insn=9, live_throughout: 13, 14, 155, 156, 157, 158, dead_or_set: 159
insn=10, live_throughout: 13, 14, 155, 156, 157, 158, 159, dead_or_set: 160
insn=11, live_throughout: 13, 14, 155, 156, 157, 158, dead_or_set: 159, 160
insn=12, live_throughout: 13, 14, 155, 156, 157, 158, dead_or_set: 
insn=14, live_throughout: 13, 14, 155, 157, 158, dead_or_set: 133, 156
insn=15, live_throughout: 13, 14, 133, 155, 158, dead_or_set: 156, 157
insn=16, live_throughout: 13, 14, 155, 156, 158, dead_or_set: 133, 157
insn=17, live_throughout: 13, 14, 155, 156, 157, 158, dead_or_set: 
insn=19, live_throughout: 13, 14, 155, 156, 157, 158, dead_or_set: 162
insn=21, live_throughout: 13, 14, 155, 156, 157, 158, 162, dead_or_set: 164
insn=23, live_throughout: 13, 14, 155, 156, 157, 158, dead_or_set: 162, 164, 165
insn=24, live_throughout: 13, 14, 155, 156, 157, 158, dead_or_set: 165
insn=25, live_throughout: 13, 14, 155, 156, 157, 158, dead_or_set: 142
insn=28, live_throughout: 13, 14, 142, 155, 156, 157, 158, dead_or_set: 168
insn=275, live_throughout: 13, 14, 142, 155, 156, 157, 158, 168, dead_or_set: 169
insn=30, live_throughout: 13, 14, 142, 155, 156, 157, 158, 168, dead_or_set: 169
insn=31, live_throughout: 13, 14, 142, 155, 156, 157, 158, 168, dead_or_set: 
insn=33, live_throughout: 13, 14, 155, 156, 157, 158, 168, dead_or_set: 170
insn=34, live_throughout: 13, 14, 155, 156, 157, 158, 168, 170, dead_or_set: 171
insn=36, live_throughout: 13, 14, 155, 156, 157, 158, 168, dead_or_set: 170, 171
insn=37, live_throughout: 13, 14, 155, 156, 157, 158, 168, dead_or_set: 
insn=39, live_throughout: 13, 14, 155, 156, 157, 158, 168, dead_or_set: 141
insn=42, live_throughout: 13, 14, 141, 155, 156, 157, 158, 168, dead_or_set: 174
insn=44, live_throughout: 13, 14, 141, 155, 156, 157, 158, dead_or_set: 168, 174
insn=45, live_throughout: 13, 14, 141, 155, 156, 157, 158, dead_or_set: 
insn=47, live_throughout: 13, 14, 141, 155, 156, 157, 158, dead_or_set: 176
insn=48, live_throughout: 13, 14, 141, 155, 156, 157, 158, 176, dead_or_set: 177
insn=50, live_throughout: 13, 14, 141, 155, 156, 157, 158, dead_or_set: 176, 177
insn=51, live_throughout: 13, 14, 141, 155, 156, 157, 158, dead_or_set: 
insn=52, live_throughout: 13, 14, 155, 156, 157, 158, dead_or_set: 
insn=54, live_throughout: 13, 14, 156, 157, 158, dead_or_set: 0, 155
insn=55, live_throughout: 0, 13, 14, 157, 158, dead_or_set: 1, 156
insn=56, live_throughout: 0, 1, 13, 14, 158, dead_or_set: 2, 157
insn=57, live_throughout: 0, 1, 2, 13, 14, dead_or_set: 3, 158
insn=58, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3
insn=61, live_throughout: 13, 14, 141, 155, 157, dead_or_set: 
insn=66, live_throughout: 13, 14, 141, 155, dead_or_set: 157, 181
insn=64, live_throughout: 13, 14, 155, 181, dead_or_set: 141, 179
insn=67, live_throughout: 13, 14, 155, dead_or_set: 179, 180, 181
insn=70, live_throughout: 13, 14, 155, dead_or_set: 180
insn=71, live_throughout: 13, 14, 155, dead_or_set: 
insn=73, live_throughout: 13, 14, 155, dead_or_set: 183
insn=78, live_throughout: 13, 14, 155, 183, dead_or_set: 153
insn=76, live_throughout: 13, 14, 153, 155, dead_or_set: 0, 1, 2, 3, 183
insn=77, live_throughout: 13, 14, 153, dead_or_set: 0, 1, 2, 3, 155
insn=260, live_throughout: 13, 14, 153, dead_or_set: 
insn=81, live_throughout: 13, 14, 155, dead_or_set: 
insn=83, live_throughout: 13, 14, 155, dead_or_set: 187
insn=85, live_throughout: 13, 14, 155, dead_or_set: 187
insn=86, live_throughout: 13, 14, 155, dead_or_set: 188
insn=87, live_throughout: 13, 14, dead_or_set: 155, 188
insn=88, live_throughout: 13, 14, dead_or_set: 153
insn=262, live_throughout: 13, 14, 153, dead_or_set: 
insn=91, live_throughout: 13, 14, 142, 155, 156, 157, dead_or_set: 
insn=93, live_throughout: 13, 14, 142, 155, 156, 157, dead_or_set: 140
insn=97, live_throughout: 13, 14, 140, 142, 155, 156, 157, dead_or_set: 192
insn=95, live_throughout: 13, 14, 140, 142, 155, 156, 157, 192, dead_or_set: 190
insn=98, live_throughout: 13, 14, 140, 142, 155, 156, 157, dead_or_set: 190, 191, 192
insn=101, live_throughout: 13, 14, 140, 142, 155, 156, 157, dead_or_set: 191, 193
insn=102, live_throughout: 13, 14, 140, 142, 155, 156, 157, 193, dead_or_set: 
insn=106, live_throughout: 13, 14, 155, 193, dead_or_set: 
insn=109, live_throughout: 13, 14, 155, dead_or_set: 153, 193
insn=107, live_throughout: 13, 14, 153, 155, dead_or_set: 196
insn=108, live_throughout: 13, 14, 153, dead_or_set: 155, 196
insn=264, live_throughout: 13, 14, 153, dead_or_set: 
insn=112, live_throughout: 13, 14, 140, 142, 155, 156, 157, dead_or_set: 
insn=116, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 140, 142, 199
insn=271, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 199, 201
insn=272, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 201
insn=120, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 201
insn=249, live_throughout: 13, 14, 155, 156, 157, dead_or_set: 228
insn=246, live_throughout: 13, 14, 155, 156, 157, 228, dead_or_set: 229
insn=247, live_throughout: 13, 14, 155, 157, 228, 229, dead_or_set: 156, 230
insn=248, live_throughout: 13, 14, 155, 228, 229, 230, dead_or_set: 157, 227
insn=152, live_throughout: 13, 14, 155, 227, 228, 229, 230, dead_or_set: 144
insn=160, live_throughout: 13, 14, 144, 155, 227, 229, 230, dead_or_set: 146, 228
insn=130, live_throughout: 13, 14, 144, 146, 155, 227, 230, dead_or_set: 143, 229
insn=156, live_throughout: 13, 14, 143, 144, 146, 155, dead_or_set: 137, 227, 230
insn=164, live_throughout: 13, 14, 137, 143, 144, 146, 155, dead_or_set: 
insn=165, live_throughout: 13, 14, 24, 137, 143, 144, 146, 155, dead_or_set: 
insn=167, live_throughout: 13, 14, 137, 143, 144, 146, 155, dead_or_set: 
insn=168, live_throughout: 13, 14, 137, 143, 146, 155, dead_or_set: 144
insn=169, live_throughout: 13, 14, 137, 143, 146, 155, dead_or_set: 
insn=245, live_throughout: 13, 14, 137, 143, 146, 155, dead_or_set: 
insn=176, live_throughout: 13, 14, 137, 143, 146, 155, dead_or_set: 148
insn=266, live_throughout: 13, 14, 137, 143, 146, 148, 155, dead_or_set: 
insn=179, live_throughout: 13, 14, 137, 143, 146, 155, dead_or_set: 
insn=181, live_throughout: 13, 14, 137, 143, 146, 155, dead_or_set: 148
insn=182, live_throughout: 13, 14, 137, 143, 146, 148, 155, dead_or_set: 
insn=258, live_throughout: 13, 14, 137, 143, 146, 148, 155, dead_or_set: 135
insn=259, live_throughout: 13, 14, 137, 143, 146, 148, 155, dead_or_set: 220
insn=184, live_throughout: 13, 14, 137, 143, 146, 148, 155, dead_or_set: 135
insn=187, live_throughout: 13, 14, 135, 143, 146, 148, 155, dead_or_set: 137, 220
insn=185, live_throughout: 13, 14, 135, 143, 146, 148, 155, 220, dead_or_set: 135
insn=190, live_throughout: 13, 14, 135, 143, 146, 148, 155, 220, dead_or_set: 221
insn=186, live_throughout: 13, 14, 135, 146, 148, 155, 220, 221, dead_or_set: 134, 143
insn=188, live_throughout: 13, 14, 134, 135, 146, 148, 155, 220, 221, dead_or_set: 220
insn=189, live_throughout: 13, 14, 134, 135, 148, 155, 221, dead_or_set: 146, 147, 220
insn=191, live_throughout: 13, 14, 134, 147, 148, 155, 221, dead_or_set: 135
insn=192, live_throughout: 13, 14, 24, 134, 147, 148, 155, 221, dead_or_set: 
insn=194, live_throughout: 13, 14, 134, 147, 148, 155, 221, dead_or_set: 
insn=268, live_throughout: 13, 14, 134, 147, 148, 155, 221, dead_or_set: 
insn=201, live_throughout: 13, 14, 134, 147, 148, 155, dead_or_set: 
insn=202, live_throughout: 13, 14, 134, 147, 148, 155, dead_or_set: 221
insn=203, live_throughout: 13, 14, 134, 147, 148, 155, 221, dead_or_set: 
insn=204, live_throughout: 13, 14, 134, 148, 155, dead_or_set: 147, 221, 222
insn=206, live_throughout: 13, 14, 134, 148, 155, 222, dead_or_set: 223
insn=205, live_throughout: 13, 14, 134, 155, 223, dead_or_set: 148, 222
insn=209, live_throughout: 13, 14, 155, 222, 223, dead_or_set: 134
insn=210, live_throughout: 13, 14, 155, 222, 223, dead_or_set: 
insn=211, live_throughout: 13, 14, 155, 222, dead_or_set: 223
insn=212, live_throughout: 13, 14, 155, 222, 223, dead_or_set: 
insn=215, live_throughout: 13, 14, 155, 222, 223, dead_or_set: 153
insn=213, live_throughout: 13, 14, 153, 155, dead_or_set: 222, 223, 225
insn=214, live_throughout: 13, 14, 153, dead_or_set: 155, 225
insn=216, live_throughout: 13, 14, 153, dead_or_set: 
insn=222, live_throughout: 13, 14, dead_or_set: 0, 153
insn=228, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 169: (insn_list:REG_DEP_TRUE 275 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 171: (insn_list:REG_DEP_TRUE 34 (nil))
init_insns for 176: (insn_list:REG_DEP_TRUE 47 (nil))
init_insns for 177: (insn_list:REG_DEP_TRUE 48 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 73 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 83 (nil))
init_insns for 188: (insn_list:REG_DEP_TRUE 86 (nil))
init_insns for 192: (insn_list:REG_DEP_TRUE 97 (nil))
init_insns for 196: (insn_list:REG_DEP_TRUE 107 (nil))
init_insns for 225: (insn_list:REG_DEP_TRUE 214 (nil))
      Slot 1 (freq,size): a10r146(2000,8)
      Assigning 146(freq=2000) a new slot 0
changing reg in insn 14
changing reg in insn 16
changing reg in insn 186
changing reg in insn 258
changing reg in insn 184
changing reg in insn 186
changing reg in insn 185
changing reg in insn 156
changing reg in insn 93
changing reg in insn 116
changing reg in insn 39
changing reg in insn 25
changing reg in insn 116
changing reg in insn 130
changing reg in insn 186
changing reg in insn 152
changing reg in insn 156
changing reg in insn 189
changing reg in insn 204
changing reg in insn 181
changing reg in insn 176
changing reg in insn 205
changing reg in insn 109
changing reg in insn 215
changing reg in insn 88
changing reg in insn 78
changing reg in insn 222
changing reg in insn 2
changing reg in insn 106
changing reg in insn 85
changing reg in insn 77
changing reg in insn 77
changing reg in insn 77
changing reg in insn 77
changing reg in insn 214
changing reg in insn 120
changing reg in insn 108
changing reg in insn 87
changing reg in insn 54
changing reg in insn 24
changing reg in insn 213
changing reg in insn 15
changing reg in insn 3
changing reg in insn 247
changing reg in insn 246
changing reg in insn 55
changing reg in insn 34
changing reg in insn 33
changing reg in insn 25
changing reg in insn 21
changing reg in insn 14
changing reg in insn 9
changing reg in insn 34
changing reg in insn 33
changing reg in insn 16
changing reg in insn 4
changing reg in insn 249
changing reg in insn 248
changing reg in insn 97
changing reg in insn 93
changing reg in insn 66
changing reg in insn 56
changing reg in insn 48
changing reg in insn 47
changing reg in insn 39
changing reg in insn 19
changing reg in insn 15
changing reg in insn 10
changing reg in insn 97
changing reg in insn 48
changing reg in insn 47
changing reg in insn 5
changing reg in insn 57
changing reg in insn 9
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 19
changing reg in insn 23
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 28
changing reg in insn 44
changing reg in insn 30
changing reg in insn 275
changing reg in insn 30
changing reg in insn 33
changing reg in insn 36
changing reg in insn 34
changing reg in insn 36
changing reg in insn 42
changing reg in insn 44
changing reg in insn 47
changing reg in insn 50
changing reg in insn 48
changing reg in insn 50
changing reg in insn 64
changing reg in insn 67
changing reg in insn 67
changing reg in insn 66
changing reg in insn 67
changing reg in insn 73
changing reg in insn 76
changing reg in insn 76
changing reg in insn 76
changing reg in insn 76
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 95
changing reg in insn 98
changing reg in insn 98
changing reg in insn 97
changing reg in insn 98
changing reg in insn 101
changing reg in insn 109
changing reg in insn 107
changing reg in insn 108
changing reg in insn 116
changing reg in insn 271
changing reg in insn 272
changing reg in insn 271
changing reg in insn 272
changing reg in insn 259
changing reg in insn 188
changing reg in insn 187
changing reg in insn 189
changing reg in insn 202
changing reg in insn 190
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 213
changing reg in insn 211
changing reg in insn 206
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 248
changing reg in insn 156
changing reg in insn 130
changing reg in insn 249
changing reg in insn 160
changing reg in insn 152
changing reg in insn 246
changing reg in insn 152
changing reg in insn 130
changing reg in insn 247
changing reg in insn 156
changing reg in insn 160
Spilling for insn 24.
Spilling for insn 36.
Spilling for insn 50.
Spilling for insn 70.
Using reg 1 for reload 0
Spilling for insn 85.
Spilling for insn 87.
Spilling for insn 106.
Spilling for insn 108.
Spilling for insn 120.
Spilling for insn 160.
Using reg 6 for reload 0
Spilling for insn 156.
Using reg 4 for reload 0
Spilling for insn 186.
Spilling for insn 189.
Spilling for insn 204.
Spilling for insn 209.
Using reg 4 for reload 0
Spilling for insn 214.

Reloads for insn # 24
Reload 0: reload_out (HI) = (mem/s/j:HI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                                                        (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                                                        (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])

Reloads for insn # 36
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 50
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 4 r4)

Reloads for insn # 70
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 85
Reload 0: reload_out (HI) = (mem/s/j:HI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 <variable>.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 <variable>.exponent+0 S2 A64])

Reloads for insn # 87
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])

Reloads for insn # 106
Reload 0: reload_out (HI) = (mem/s/j:HI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 <variable>.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 <variable>.exponent+0 S2 A64])

Reloads for insn # 108
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])

Reloads for insn # 120
Reload 0: reload_out (HI) = (mem/s/j:HI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 <variable>.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 <variable>.exponent+0 S2 A64])

Reloads for insn # 160
Reload 0: reload_out (DI) = (reg/v:DI 146 [ rh ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 146 [ rh ])
	reload_reg_rtx: (reg:DI 6 r6)

Reloads for insn # 156
Reload 0: reload_in (DI) = (reg/v:DI 2 r2 [orig:144 rmb ] [144])
	reload_out (DI) = (reg/v:DI 0 r0 [orig:137 rma.253 ] [137])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 2 r2 [orig:144 rmb ] [144])
	reload_out_reg: (reg/v:DI 0 r0 [orig:137 rma.253 ] [137])
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 186
Reload 0: reload_in (DI) = (reg/v:DI 2 r2 [orig:135 rma.255 ] [135])
	reload_out (DI) = (reg/v:DI 0 r0 [orig:134 rl.256 ] [134])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 2 r2 [orig:135 rma.255 ] [135])
	reload_out_reg: (reg/v:DI 0 r0 [orig:134 rl.256 ] [134])
	reload_reg_rtx: (reg/v:DI 0 r0 [orig:134 rl.256 ] [134])

Reloads for insn # 189
Reload 0: reload_in (DI) = (reg/v:DI 146 [ rh ])
	reload_out (DI) = (reg:DI 10 sl [orig:147 D.5348 ] [147])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 146 [ rh ])
	reload_out_reg: (reg:DI 10 sl [orig:147 D.5348 ] [147])
	reload_reg_rtx: (reg:DI 10 sl [orig:147 D.5348 ] [147])

Reloads for insn # 204
Reload 0: reload_in (DI) = (reg:DI 10 sl [orig:147 D.5348 ] [147])
	reload_out (DI) = (reg:DI 2 r2 [222])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 10 sl [orig:147 D.5348 ] [147])
	reload_out_reg: (reg:DI 2 r2 [222])
	reload_reg_rtx: (reg:DI 2 r2 [222])

Reloads for insn # 209
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 5 r5)

Reloads for insn # 214
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 55.
deleting insn with uid = 56.
deleting insn with uid = 57.
deleting insn with uid = 109.


try_optimize_cfg iteration 1

Replacing insn 194 by jump 283
deleting insn with uid = 194.
Deleting block 21.
deleting insn with uid = 236.
deleting insn with uid = 268.
deleting insn with uid = 269.
deleting block 21


try_optimize_cfg iteration 2

Simplifying condjump 192 around jump 283
deleting insn with uid = 235.
deleting insn with uid = 283.
deleting insn with uid = 284.
deleting block 20
deleting insn with uid = 201.
Deleted label in block 22.


try_optimize_cfg iteration 3



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 58.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 36 count 47 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 36 count 48 (  1.9)


vfp_double_multiply

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 24[cc]
;;  ref usage 	r0={19d,22u} r1={10d,18u,2d} r2={13d,23u,3d} r3={18d,22u} r4={16d,15u} r5={11d,10u} r6={4d,3u} r7={4d,3u} r8={5d,3u} r9={4d,2u} r10={4d,5u} r11={3d,3u} r12={3d,12u,1d} r13={1d,27u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={16d,12u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 429{242d,181u,6e} in 106{105 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 6 9 2 arch/arm/vfp/vfpdouble.c:792 (set (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
        (reg:SI 0 r0 [ vdd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 10 2 arch/arm/vfp/vfpdouble.c:801 (set (reg:SI 4 r4 [orig:159 <variable>.exponent ] [159])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 1 r1 [orig:156 vdn ] [156]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:801 (set (reg:SI 0 r0 [orig:160 <variable>.exponent ] [160])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:801 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 4 r4 [orig:159 <variable>.exponent ] [159])
            (reg:SI 0 r0 [orig:160 <variable>.exponent ] [160]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 12 11 13 2 arch/arm/vfp/vfpdouble.c:801 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 3 arch/arm/vfp/vfpdouble.c:801 (set (reg/v/f:SI 0 r0 [orig:133 vdn.258 ] [133])
        (reg/v/f:SI 1 r1 [orig:156 vdn ] [156])) 167 {*arm_movsi_insn} (nil))

(insn 15 14 16 3 arch/arm/vfp/vfpdouble.c:803 (set (reg/v/f:SI 1 r1 [orig:156 vdn ] [156])
        (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 16 15 17 3 arch/arm/vfp/vfpdouble.c:804 (set (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
        (reg/v/f:SI 0 r0 [orig:133 vdn.258 ] [133])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 17 16 18 4 26 "" [1 uses])

(note 18 17 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 26 18 27 4 NOTE_INSN_DELETED)

(note 27 26 19 4 NOTE_INSN_DELETED)

(insn 19 27 21 4 arch/arm/vfp/vfpdouble.c:808 (set (reg:SI 4 r4 [orig:162 <variable>.sign ] [162])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 21 19 23 4 arch/arm/vfp/vfpdouble.c:808 (set (reg:SI 0 r0 [orig:164 <variable>.sign ] [164])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 1 r1 [orig:156 vdn ] [156])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 23 21 24 4 arch/arm/vfp/vfpdouble.c:808 (set (reg:SI 0 r0 [165])
        (xor:SI (reg:SI 4 r4 [orig:162 <variable>.sign ] [162])
            (reg:SI 0 r0 [orig:164 <variable>.sign ] [164]))) 96 {*arm_xorsi3} (nil))

(insn 24 23 25 4 arch/arm/vfp/vfpdouble.c:808 (set (mem/s/j:HI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])
        (reg:HI 0 r0 [165])) 176 {*movhi_insn_arch4} (nil))

(insn 25 24 28 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:SI 0 r0 [orig:142 temp.244 ] [142])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 1 r1 [orig:156 vdn ] [156]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 28 25 275 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:SI 4 r4 [orig:168 temp.244 ] [168])
        (sign_extend:SI (reg:HI 0 r0 [orig:142 temp.244 ] [142]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 275 28 30 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:SI 5 r5 [169])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 30 275 31 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 4 r4 [orig:168 temp.244 ] [168])
            (reg:SI 5 r5 [169]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 31 30 32 4 arch/arm/vfp/vfpdouble.c:813 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 4 -> ( 5 12)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [28.0%]  (fallthru)
;; Succ edge  12 [72.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 0 [r0]

;; Pred edge  4 [28.0%]  (fallthru)
(note 32 31 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 35 32 33 5 NOTE_INSN_DELETED)

(insn 33 35 34 5 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 5 r5 [orig:170 <variable>.significand ] [170])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:156 vdn ] [156])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:156 vdn ] [156])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])
        (nil)))

(insn 34 33 36 5 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 0 r0 [orig:171 <variable>.significand+4 ] [171])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:156 vdn ] [156])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:156 vdn ] [156])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])
        (nil)))

(insn 36 34 37 5 arch/arm/vfp/vfpdouble.c:814 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 5 r5 [orig:170 <variable>.significand ] [170])
                        (reg:SI 0 r0 [orig:171 <variable>.significand+4 ] [171]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 0 r0))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 37 36 38 5 arch/arm/vfp/vfpdouble.c:814 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2071 [0x817])
        (nil)))
;; End of basic block 5 -> ( 8 6)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  8 [20.7%] 
;; Succ edge  6 [79.3%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  5 [79.3%]  (fallthru)
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 42 6 arch/arm/vfp/vfpdouble.c:814 discrim 1 (set (reg:SI 0 r0 [orig:141 temp.245 ] [141])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 42 39 44 6 arch/arm/vfp/vfpdouble.c:814 discrim 1 (set (reg:SI 5 r5 [orig:174 temp.245 ] [174])
        (sign_extend:SI (reg:HI 0 r0 [orig:141 temp.245 ] [141]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 44 42 45 6 arch/arm/vfp/vfpdouble.c:814 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [orig:174 temp.245 ] [174])
            (reg:SI 4 r4 [orig:168 temp.244 ] [168]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 45 44 46 6 arch/arm/vfp/vfpdouble.c:814 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 6 -> ( 7 9)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [28.0%]  (fallthru)
;; Succ edge  9 [72.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 4 [r4]

;; Pred edge  6 [28.0%]  (fallthru)
(note 46 45 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 49 46 47 7 NOTE_INSN_DELETED)

(insn 47 49 48 7 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 5 r5 [orig:176 <variable>.significand ] [176])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])
        (nil)))

(insn 48 47 50 7 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 4 r4 [orig:177 <variable>.significand+4 ] [177])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])
        (nil)))

(insn 50 48 51 7 arch/arm/vfp/vfpdouble.c:814 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 5 r5 [orig:176 <variable>.significand ] [176])
                        (reg:SI 4 r4 [orig:177 <variable>.significand+4 ] [177]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 4 r4))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 51 50 52 7 arch/arm/vfp/vfpdouble.c:814 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  8 [39.0%]  (fallthru)
;; Succ edge  9 [61.0%] 

;; Start of basic block ( 5 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [20.7%] 
;; Pred edge  7 [39.0%]  (fallthru)
(code_label 52 51 53 8 28 "" [1 uses])

(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 58 8 arch/arm/vfp/vfpdouble.c:815 (set (reg:SI 0 r0)
        (reg/v/f:SI 12 ip [orig:155 vdd ] [155])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 58 54 59 8 arch/arm/vfp/vfpdouble.c:815 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 59 58 61)

;; Start of basic block ( 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  6 [72.0%] 
;; Pred edge  7 [61.0%] 
(code_label 61 59 62 9 29 "" [2 uses])

(note 62 61 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 65 62 68 9 NOTE_INSN_DELETED)

(note 68 65 69 9 NOTE_INSN_DELETED)

(note 69 68 66 9 NOTE_INSN_DELETED)

(insn 66 69 64 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:DI 4 r4 [orig:181 <variable>.significand ] [181])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 64 66 67 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:SI 0 r0 [orig:179 temp.245 ] [179])
        (sign_extend:SI (reg:HI 0 r0 [orig:141 temp.245 ] [141]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 67 64 70 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:DI 2 r2 [180])
        (ior:DI (sign_extend:DI (reg:SI 0 r0 [orig:179 temp.245 ] [179]))
            (reg:DI 4 r4 [orig:181 <variable>.significand ] [181]))) 88 {*iordi_sesidi_di} (nil))

(insn 70 67 71 9 arch/arm/vfp/vfpdouble.c:816 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [180])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 71 70 72 9 arch/arm/vfp/vfpdouble.c:816 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  in  	 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  9 [50.0%]  (fallthru)
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 73 72 78 10 arch/arm/vfp/vfpdouble.c:817 (set (reg/f:SI 3 r3 [183])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 78 73 76 10 arch/arm/vfp/vfpdouble.c:818 (set (reg:SI 4 r4 [orig:153 D.4793 ] [153])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 76 78 77 10 arch/arm/vfp/vfpdouble.c:817 (parallel [
            (set (reg:SI 0 r0)
                (mem/s/c:SI (reg/f:SI 3 r3 [183]) [0 vfp_double_default_qnan+0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s/c:SI (plus:SI (reg/f:SI 3 r3 [183])
                        (const_int 4 [0x4])) [0 vfp_double_default_qnan+4 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s/c:SI (plus:SI (reg/f:SI 3 r3 [183])
                        (const_int 8 [0x8])) [0 vfp_double_default_qnan+8 S4 A64]))
            (set (reg:SI 3 r3)
                (mem/s/c:SI (plus:SI (reg/f:SI 3 r3 [183])
                        (const_int 12 [0xc])) [0 vfp_double_default_qnan+12 S4 A32]))
        ]) 188 {*ldmsi4} (nil))

(insn 77 76 260 10 arch/arm/vfp/vfpdouble.c:817 (parallel [
            (set (mem/s:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                        (const_int 4 [0x4])) [0 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                        (const_int 8 [0x8])) [0 S4 A64])
                (reg:SI 2 r2))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                        (const_int 12 [0xc])) [0 S4 A32])
                (reg:SI 3 r3))
        ]) 195 {*stmsi4} (nil))

(jump_insn 260 77 261 10 arch/arm/vfp/vfpdouble.c:818 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 26)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  26 [100.0%] 

(barrier 261 260 81)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4]
;; live  in  	 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4]
;; live  kill	

;; Pred edge  9 [50.0%] 
(code_label 81 261 82 11 30 "" [1 uses])

(note 82 81 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 83 82 85 11 arch/arm/vfp/vfpdouble.c:820 (set (reg:SI 3 r3 [187])
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -63489 [0xffffffffffff07ff])
        (nil)))

(insn 85 83 86 11 arch/arm/vfp/vfpdouble.c:820 (set (mem/s/j:HI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 <variable>.exponent+0 S2 A64])
        (reg:HI 3 r3 [187])) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
        (nil)))

(insn 86 85 87 11 arch/arm/vfp/vfpdouble.c:821 (set (reg:DI 2 r2 [188])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 87 86 88 11 arch/arm/vfp/vfpdouble.c:821 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 2 r2 [188])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 88 87 262 11 arch/arm/vfp/vfpdouble.c:822 (set (reg:SI 4 r4 [orig:153 D.4793 ] [153])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 262 88 263 11 arch/arm/vfp/vfpdouble.c:822 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 26)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  26 [100.0%] 

(barrier 263 262 91)

;; Start of basic block ( 4) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  4 [72.0%] 
(code_label 91 263 92 12 27 "" [1 uses])

(note 92 91 96 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 96 92 99 12 NOTE_INSN_DELETED)

(note 99 96 100 12 NOTE_INSN_DELETED)

(note 100 99 93 12 NOTE_INSN_DELETED)

(insn 93 100 97 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:SI 3 r3 [orig:140 temp.247 ] [140])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 97 93 95 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:DI 6 r6 [orig:192 <variable>.significand ] [192])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/s/j:DI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (nil)))

(insn 95 97 98 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:SI 8 r8 [orig:190 temp.247 ] [190])
        (sign_extend:SI (reg:HI 3 r3 [orig:140 temp.247 ] [140]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 98 95 101 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:DI 4 r4 [191])
        (ior:DI (sign_extend:DI (reg:SI 8 r8 [orig:190 temp.247 ] [190]))
            (reg:DI 6 r6 [orig:192 <variable>.significand ] [192]))) 88 {*iordi_sesidi_di} (nil))

(insn 101 98 102 12 arch/arm/vfp/vfpdouble.c:829 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 4 r4 [191])
                        (reg:SI 5 r5 [+4 ]))
                    (const_int 0 [0x0])))
            (set (reg:SI 4 r4 [193])
                (ior:SI (reg:SI 4 r4 [191])
                    (reg:SI 5 r5 [+4 ])))
        ]) 91 {*iorsi3_compare0} (nil))

(jump_insn 102 101 103 12 arch/arm/vfp/vfpdouble.c:829 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  13 [39.0%]  (fallthru)
;; Succ edge  14 [61.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  12 [39.0%]  (fallthru)
(note 103 102 106 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 106 103 107 13 arch/arm/vfp/vfpdouble.c:830 (set (mem/s/j:HI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 <variable>.exponent+0 S2 A64])
        (reg:HI 4 r4 [193])) 176 {*movhi_insn_arch4} (nil))

(insn 107 106 108 13 arch/arm/vfp/vfpdouble.c:831 (set (reg:DI 2 r2 [196])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 108 107 264 13 arch/arm/vfp/vfpdouble.c:831 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 2 r2 [196])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 264 108 265 13 arch/arm/vfp/vfpdouble.c:832 (set (pc)
        (label_ref 216)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 26)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  26 [100.0%] 

(barrier 265 264 112)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	

;; Pred edge  12 [61.0%] 
(code_label 112 265 113 14 32 "" [1 uses])

(note 113 112 141 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 141 113 116 14 NOTE_INSN_DELETED)

(insn 116 141 271 14 arch/arm/vfp/vfpdouble.c:840 (set (reg:SI 3 r3 [199])
        (plus:SI (reg:SI 0 r0 [orig:142 temp.244 ] [142])
            (reg:SI 3 r3 [orig:140 temp.247 ] [140]))) 4 {*arm_addsi3} (nil))

(insn 271 116 272 14 arch/arm/vfp/vfpdouble.c:840 (set (reg:SI 3 r3 [201])
        (plus:SI (reg:SI 3 r3 [199])
            (const_int -1020 [0xfffffffffffffc04]))) 4 {*arm_addsi3} (nil))

(insn 272 271 120 14 arch/arm/vfp/vfpdouble.c:840 (set (reg:SI 3 r3 [201])
        (plus:SI (reg:SI 3 r3 [201])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 120 272 249 14 arch/arm/vfp/vfpdouble.c:840 (set (mem/s/j:HI (reg/v/f:SI 12 ip [orig:155 vdd ] [155]) [0 <variable>.exponent+0 S2 A64])
        (reg:HI 3 r3 [201])) 176 {*movhi_insn_arch4} (nil))

(insn 249 120 246 14 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 4 r4 [orig:228 temp.252+4 ] [228])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 246 249 247 14 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 10 sl [orig:229 temp.251 ] [229])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:156 vdn ] [156])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 247 246 248 14 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 0 r0 [orig:230 temp.251+4 ] [230])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 1 r1 [orig:156 vdn ] [156])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 248 247 152 14 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 1 r1 [orig:227 temp.252 ] [227])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:157 vdm ] [157])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 152 248 160 14 arch/arm/vfp/vfp.h:86 (set (reg/v:DI 2 r2 [orig:144 rmb ] [144])
        (mult:DI (zero_extend:DI (reg:SI 4 r4 [orig:228 temp.252+4 ] [228]))
            (zero_extend:DI (reg:SI 10 sl [orig:229 temp.251 ] [229])))) 51 {*umulsidi3_v6} (nil))

(insn 160 152 277 14 arch/arm/vfp/vfp.h:89 (set (reg:DI 6 r6)
        (mult:DI (zero_extend:DI (reg:SI 4 r4 [orig:228 temp.252+4 ] [228]))
            (zero_extend:DI (reg:SI 0 r0 [orig:230 temp.251+4 ] [230])))) 51 {*umulsidi3_v6} (nil))

(insn 277 160 130 14 arch/arm/vfp/vfp.h:89 (set (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])
        (reg:DI 6 r6)) 163 {*arm_movdi} (nil))

(insn 130 277 278 14 arch/arm/vfp/vfp.h:80 (set (reg/v:DI 10 sl [orig:143 rl ] [143])
        (mult:DI (zero_extend:DI (reg:SI 1 r1 [orig:227 temp.252 ] [227]))
            (zero_extend:DI (reg:SI 10 sl [orig:229 temp.251 ] [229])))) 51 {*umulsidi3_v6} (nil))

(insn 278 130 156 14 arch/arm/vfp/vfp.h:87 (set (reg:DI 4 r4)
        (reg/v:DI 2 r2 [orig:144 rmb ] [144])) 163 {*arm_movdi} (nil))

(insn 156 278 279 14 arch/arm/vfp/vfp.h:87 (set (reg:DI 4 r4)
        (plus:DI (mult:DI (zero_extend:DI (reg:SI 0 r0 [orig:230 temp.251+4 ] [230]))
                (zero_extend:DI (reg:SI 1 r1 [orig:227 temp.252 ] [227])))
            (reg:DI 4 r4))) 53 {*umulsidi3adddi_v6} (nil))

(insn 279 156 164 14 arch/arm/vfp/vfp.h:87 (set (reg/v:DI 0 r0 [orig:137 rma.253 ] [137])
        (reg:DI 4 r4)) 163 {*arm_movdi} (nil))

(insn 164 279 165 14 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ rmb+4 ])
            (reg:SI 1 r1 [ rma.253+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 165 164 230 14 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14 -> ( 18 15)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  18 [50.0%] 
;; Succ edge  15 [50.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  14 [50.0%]  (fallthru)
(note 230 165 167 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(jump_insn 167 230 231 15 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 245)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 15 -> ( 17 16)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  17 [71.0%] 
;; Succ edge  16 [29.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [29.0%]  (fallthru)
(note 231 167 168 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 168 231 169 16 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:144 rmb ] [144])
            (reg:SI 0 r0 [orig:137 rma.253 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 169 168 245 16 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16 -> ( 18 17)
;; lr  out 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [50.0%] 
;; Succ edge  17 [50.0%]  (fallthru)

;; Start of basic block ( 16 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  16 [50.0%]  (fallthru)
;; Pred edge  15 [71.0%] 
(code_label 245 169 175 17 40 "" [1 uses])

(note 175 245 176 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 176 175 266 17 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 6 r6 [orig:148 iftmp.83 ] [148])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 266 176 267 17 (set (pc)
        (label_ref 182)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 19)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  19 [100.0%] 

(barrier 267 266 179)

;; Start of basic block ( 14 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  14 [50.0%] 
;; Pred edge  16 [50.0%] 
(code_label 179 267 180 18 33 "" [2 uses])

(note 180 179 181 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 181 180 182 18 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 6 r6 [orig:148 iftmp.83 ] [148])
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4294967296 [0x100000000])
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  18 [100.0%]  (fallthru)
;; Pred edge  17 [100.0%] 
(code_label 182 181 183 19 35 "" [1 uses])

(note 183 182 258 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 258 183 259 19 arch/arm/vfp/vfp.h:92 (set (reg/v:DI 2 r2 [orig:135 rma.255 ] [135])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 259 258 184 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 4 r4 [orig:220 rma.255 ] [220])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 184 259 187 19 arch/arm/vfp/vfp.h:92 (set (reg:SI 3 r3 [ rma.255+4 ])
        (reg:SI 0 r0 [orig:137 rma.253 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 187 184 185 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 4 r4 [orig:220 rma.255 ] [220])
        (reg:SI 1 r1 [ rma.253+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 185 187 190 19 arch/arm/vfp/vfp.h:92 (set (reg:SI 2 r2 [orig:135 rma.255 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 190 185 280 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 8 r8 [221])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 280 190 186 19 arch/arm/vfp/vfp.h:93 (set (reg/v:DI 0 r0 [orig:134 rl.256 ] [134])
        (reg/v:DI 2 r2 [orig:135 rma.255 ] [135])) 163 {*arm_movdi} (nil))

(insn 186 280 188 19 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg/v:DI 0 r0 [orig:134 rl.256 ] [134])
                (plus:DI (reg/v:DI 0 r0 [orig:134 rl.256 ] [134])
                    (reg/v:DI 10 sl [orig:143 rl ] [143])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 188 186 281 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 5 r5 [ rma.255+4 ])
        (reg:SI 2 r2 [orig:135 rma.255 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 281 188 189 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 10 sl [orig:147 D.5348 ] [147])
        (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-8 S8 A64])) 163 {*arm_movdi} (nil))

(insn 189 281 191 19 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 10 sl [orig:147 D.5348 ] [147])
                (plus:DI (reg:DI 10 sl [orig:147 D.5348 ] [147])
                    (reg:DI 4 r4 [orig:220 rma.255 ] [220])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 191 189 192 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ rma.255+4 ])
            (reg:SI 1 r1 [ rl.256+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 192 191 239 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 203)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 19 -> ( 22 23)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  22 [50.0%]  (fallthru)
;; Succ edge  23 [50.0%] 

;; Start of basic block ( 19) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8] 9 [r9]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  19 [50.0%]  (fallthru)
(note 239 192 202 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 202 239 203 22 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 8 r8 [221])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 22 -> ( 23)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 19 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	 5 [r5] 24 [cc]

;; Pred edge  19 [50.0%] 
;; Pred edge  22 [100.0%]  (fallthru)
(code_label 203 202 240 23 36 "" [1 uses])

(note 240 203 207 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 207 240 208 23 NOTE_INSN_DELETED)

(note 208 207 282 23 NOTE_INSN_DELETED)

(insn 282 208 204 23 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 2 r2 [222])
        (reg:DI 10 sl [orig:147 D.5348 ] [147])) 163 {*arm_movdi} (nil))

(insn 204 282 206 23 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 2 r2 [222])
                (plus:DI (reg:DI 2 r2 [222])
                    (reg:DI 8 r8 [221])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 206 204 205 23 arch/arm/vfp/vfpdouble.c:841 (set (reg:DI 8 r8 [223])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 205 206 209 23 arch/arm/vfp/vfpdouble.c:841 (parallel [
            (set (reg:DI 2 r2 [222])
                (plus:DI (reg:DI 2 r2 [222])
                    (reg:DI 6 r6 [orig:148 iftmp.83 ] [148])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 209 205 210 23 arch/arm/vfp/vfpdouble.c:841 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 0 r0 [orig:134 rl.256 ] [134])
                        (reg:SI 1 r1 [ rl.256+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 5 r5))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 210 209 241 23 arch/arm/vfp/vfpdouble.c:841 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 212)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 23 -> ( 25 24)
;; lr  out 	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  25 [50.0%] 
;; Succ edge  24 [50.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8] 9 [r9]
;; live  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  23 [50.0%]  (fallthru)
(note 241 210 211 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 211 241 212 24 arch/arm/vfp/vfpdouble.c:841 (set (reg:DI 8 r8 [223])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 24 -> ( 25)
;; lr  out 	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  25 [100.0%]  (fallthru)

;; Start of basic block ( 23 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4]
;; live  in  	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4]
;; live  kill	

;; Pred edge  23 [50.0%] 
;; Pred edge  24 [100.0%]  (fallthru)
(code_label 212 211 242 25 38 "" [1 uses])

(note 242 212 215 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 215 242 213 25 arch/arm/vfp/vfpdouble.c:844 (set (reg:SI 4 r4 [orig:153 D.4793 ] [153])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 213 215 214 25 arch/arm/vfp/vfpdouble.c:841 (set (reg:DI 0 r0 [225])
        (ior:DI (reg:DI 2 r2 [222])
            (reg:DI 8 r8 [223]))) 86 {iordi3} (expr_list:REG_EQUIV (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (nil)))

(insn 214 213 216 25 arch/arm/vfp/vfpdouble.c:841 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 12 ip [orig:155 vdd ] [155])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 0 r0 [225])) 163 {*arm_movdi} (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  26 [100.0%]  (fallthru)

;; Start of basic block ( 25 11 10 13) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  25 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
;; Pred edge  10 [100.0%] 
;; Pred edge  13 [100.0%] 
(code_label 216 214 217 26 31 "" [3 uses])

(note 217 216 222 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 222 217 228 26 arch/arm/vfp/vfpdouble.c:845 (set (reg/i:SI 0 r0)
        (reg:SI 4 r4 [orig:153 D.4793 ] [153])) 167 {*arm_movsi_insn} (nil))

(insn 228 222 274 26 arch/arm/vfp/vfpdouble.c:845 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 26 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 274 228 276 NOTE_INSN_DELETED)

(note 276 274 0 NOTE_INSN_DELETED)


;; Function vfp_double_cpdo (vfp_double_cpdo)[0:184]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 42 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 42 (  1.9)
scanning new insn with uid = 204.
verify found no changes in insn with uid = 204.
deleting insn with uid = 41.
scanning new insn with uid = 205.
verify found no changes in insn with uid = 205.
deleting insn with uid = 30.
scanning new insn with uid = 206.
verify found no changes in insn with uid = 206.
deleting insn with uid = 25.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 42 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 42 (  1.9)

Pass 0 for finding allocno costs

    a14 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r202,l1) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r200,l1) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r198,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r156,l1) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r150,l1) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r149,l1) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r148,l1) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r147,l1) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r142,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r140,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r138,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:12000
  a8(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a14(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a18(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r158,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a33(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a35(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a36(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a38(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a39(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a40(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r200,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r198,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r202,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r208: preferred GENERAL_REGS, alternative NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r138,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:12000
  a8(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a14(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a18(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r158,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a33(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a35(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a36(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a38(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a39(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a40(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r200,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r198,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r202,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 166(l0): point = 0
   Insn 160(l0): point = 2
   Insn 120(l0): point = 5
   Insn 118(l0): point = 7
   Insn 119(l0): point = 9
   Insn 117(l0): point = 11
   Insn 197(l0): point = 14
   Insn 111(l0): point = 16
   Insn 109(l0): point = 19
   Insn 108(l0): point = 21
   Insn 107(l0): point = 23
   Insn 104(l0): point = 26
   Insn 195(l0): point = 29
   Insn 99(l0): point = 31
   Insn 97(l0): point = 34
   Insn 96(l0): point = 36
   Insn 93(l0): point = 39
   Insn 92(l0): point = 41
   Insn 88(l0): point = 44
   Insn 193(l0): point = 47
   Insn 80(l0): point = 49
   Insn 79(l0): point = 51
   Insn 74(l0): point = 54
   Insn 180(l0): point = 56
   Insn 183(l0): point = 58
   Insn 73(l0): point = 60
   Insn 69(l0): point = 63
   Insn 68(l0): point = 65
   Insn 191(l0): point = 68
   Insn 60(l0): point = 70
   Insn 59(l0): point = 72
   Insn 54(l0): point = 75
   Insn 53(l0): point = 77
   Insn 177(l0): point = 79
   Insn 174(l0): point = 81
   Insn 51(l0): point = 83
   Insn 48(l0): point = 86
   Insn 204(l0): point = 88
   Insn 46(l0): point = 90
   Insn 45(l0): point = 92
   Insn 42(l0): point = 94
   Insn 44(l0): point = 96
   Insn 189(l0): point = 99
   Insn 35(l0): point = 101
   Insn 205(l0): point = 103
   Insn 33(l0): point = 105
   Insn 32(l0): point = 107
   Insn 27(l0): point = 110
   Insn 12(l0): point = 112
   Insn 11(l0): point = 114
   Insn 26(l0): point = 116
   Insn 206(l0): point = 118
   Insn 186(l0): point = 120
   Insn 13(l0): point = 122
   Insn 200(l0): point = 124
   Insn 5(l0): point = 126
   Insn 4(l0): point = 128
   Insn 199(l0): point = 130
   Insn 153(l1): point = 133
   Insn 152(l1): point = 135
   Insn 147(l1): point = 138
   Insn 142(l1): point = 141
   Insn 129(l1): point = 143
   Insn 139(l1): point = 145
   Insn 134(l1): point = 147
   Insn 135(l1): point = 149
   Insn 130(l1): point = 151
   Insn 138(l1): point = 153
   Insn 133(l1): point = 155
   Insn 141(l1): point = 157
   Insn 137(l1): point = 159
   Insn 132(l1): point = 161
   Insn 146(l1): point = 163
   Insn 150(l1): point = 165
   Insn 145(l1): point = 167
   Insn 127(l1): point = 169
   Insn 126(l1): point = 171
   Insn 125(l1): point = 173
   Insn 124(l1): point = 175
   Insn 123(l1): point = 177
 a0(r144): [14..16] [3..5]
 a1(r140): [5..9]
 a2(r142): [5..7]
 a3(r195): [8..11]
 a4(r152): [19..112] [8..13]
 a5(r153): [19..114] [12..13]
 a6(r137): [99..101] [19..86] [5..13]
 a7(r138): [19..120] [5..13]
 a8(r139): [29..31] [19..26] [5..13]
 a9(r141): [47..49] [19..44] [5..13]
 a10(r143): [68..70] [19..63] [5..13]
 a11(r156): [19..126] [5..13]
 a12(r193): [22..23]
 a13(r151): [42..83]
 a14(r208): [52..58] [45..46]
 a15(r207): [50..56] [45..46]
 a16(r187): [50..51]
 a17(r155): [57..128]
 a18(r182): [64..65]
 a19(r205): [71..81] [64..67]
 a20(r206): [73..79] [66..67]
 a21(r178): [71..72]
 a22(r167): [87..88]
 a23(r172): [87..90]
 a24(r171): [91..92]
 a25(r168): [91..94]
 a26(r170): [93..96]
 a27(r161): [102..103]
 a28(r164): [102..105]
 a29(r163): [106..107]
 a30(r159): [117..118]
 a31(r145): [117..130]
 a32(r158): [121..122]
 a33(r137): [133..179]
 a34(r138): [133..179]
 a35(r139): [133..179]
 a36(r140): [133..179]
 a37(r141): [141..179] [133..138]
 a38(r142): [150..179] [133..145]
 a39(r143): [152..179] [133..147]
 a40(r144): [133..179]
 a41(r156): [133..179]
 a42(r147): [139..157]
 a43(r146): [139..163]
 a44(r149): [146..149]
 a45(r148): [146..153]
 a46(r135): [148..151]
 a47(r150): [148..155]
 a48(r200): [154..159]
 a49(r198): [156..161]
 a50(r202): [164..167]
Compressing live ranges: from 180 to 90 - 50%
Ranges after the compression:
 a0(r144): [8..9] [0..1]
 a1(r140): [1..4]
 a2(r142): [1..2]
 a3(r195): [3..5]
 a4(r152): [10..57] [3..7]
 a5(r153): [10..58] [6..7]
 a6(r137): [50..51] [10..41] [1..7]
 a7(r138): [10..61] [1..7]
 a8(r139): [14..15] [10..13] [1..7]
 a9(r141): [20..21] [10..17] [1..7]
 a10(r143): [33..34] [10..28] [1..7]
 a11(r156): [10..64] [1..7]
 a12(r193): [11..12]
 a13(r151): [16..40]
 a14(r208): [24..27] [18..19]
 a15(r207): [22..25] [18..19]
 a16(r187): [22..23]
 a17(r155): [26..65]
 a18(r182): [29..30]
 a19(r205): [35..39] [29..32]
 a20(r206): [37..38] [31..32]
 a21(r178): [35..36]
 a22(r167): [42..43]
 a23(r172): [42..44]
 a24(r171): [45..46]
 a25(r168): [45..48]
 a26(r170): [47..49]
 a27(r161): [52..53]
 a28(r164): [52..54]
 a29(r163): [55..56]
 a30(r159): [59..60]
 a31(r145): [59..66]
 a32(r158): [62..63]
 a33(r137): [67..89]
 a34(r138): [67..89]
 a35(r139): [67..89]
 a36(r140): [67..89]
 a37(r141): [70..89] [67..68]
 a38(r142): [76..89] [67..71]
 a39(r143): [78..89] [67..73]
 a40(r144): [67..89]
 a41(r156): [67..89]
 a42(r147): [69..83]
 a43(r146): [69..86]
 a44(r149): [72..75]
 a45(r148): [72..79]
 a46(r135): [74..77]
 a47(r150): [74..81]
 a48(r200): [80..84]
 a49(r198): [82..85]
 a50(r202): [87..88]
    Creating cap  a51(r147,l0: a42(r147,l1))
    Creating cap  a52(r146,l0: a43(r146,l1))
    Creating cap  a53(r149,l0: a44(r149,l1))
    Creating cap  a54(r148,l0: a45(r148,l1))
    Creating cap  a55(r135,l0: a46(r135,l1))
    Creating cap  a56(r150,l0: a47(r150,l1))
    Creating cap  a57(r200,l0: a48(r200,l1))
    Creating cap  a58(r198,l0: a49(r198,l1))
    Creating cap  a59(r202,l0: a50(r202,l1))
+++Allocating 480 bytes for conflict table (uncompressed size 480)
;; a0(r144,l0) conflicts: a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0) a59(r202,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a1(r140,l0) conflicts: a0(r144,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a3(r195,l0) a4(r152,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0) a59(r202,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a2(r142,l0) conflicts: a0(r144,l0) a1(r140,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a51(r147,l0) a52(r146,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0) a59(r202,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs:
;; a3(r195,l0) conflicts: a1(r140,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a4(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a4(r152,l0) conflicts: a1(r140,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a3(r195,l0) a5(r153,l0) a12(r193,l0) a13(r151,l0) a15(r207,l0) a14(r208,l0) a16(r187,l0) a17(r155,l0) a18(r182,l0) a19(r205,l0) a20(r206,l0) a21(r178,l0) a22(r167,l0) a23(r172,l0) a24(r171,l0) a25(r168,l0) a26(r170,l0) a27(r161,l0) a28(r164,l0) a29(r163,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r153,l0) conflicts: a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a4(r152,l0) a12(r193,l0) a13(r151,l0) a15(r207,l0) a14(r208,l0) a16(r187,l0) a17(r155,l0) a18(r182,l0) a19(r205,l0) a20(r206,l0) a21(r178,l0) a22(r167,l0) a23(r172,l0) a24(r171,l0) a25(r168,l0) a26(r170,l0) a27(r161,l0) a28(r164,l0) a29(r163,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r137,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a3(r195,l0) a4(r152,l0) a5(r153,l0) a12(r193,l0) a13(r151,l0) a15(r207,l0) a14(r208,l0) a16(r187,l0) a17(r155,l0) a18(r182,l0) a19(r205,l0) a20(r206,l0) a21(r178,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0) a59(r202,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a7(r138,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a3(r195,l0) a4(r152,l0) a5(r153,l0) a12(r193,l0) a13(r151,l0) a15(r207,l0) a14(r208,l0) a16(r187,l0) a17(r155,l0) a18(r182,l0) a19(r205,l0) a20(r206,l0) a21(r178,l0) a22(r167,l0) a23(r172,l0) a24(r171,l0) a25(r168,l0) a26(r170,l0) a27(r161,l0) a28(r164,l0) a29(r163,l0) a30(r159,l0) a31(r145,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0) a59(r202,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a8(r139,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a3(r195,l0) a4(r152,l0) a5(r153,l0) a12(r193,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0) a59(r202,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a9(r141,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a10(r143,l0) a11(r156,l0) a3(r195,l0) a4(r152,l0) a5(r153,l0) a12(r193,l0) a13(r151,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0) a59(r202,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a10(r143,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a11(r156,l0) a3(r195,l0) a4(r152,l0) a5(r153,l0) a12(r193,l0) a13(r151,l0) a15(r207,l0) a14(r208,l0) a16(r187,l0) a17(r155,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0) a59(r202,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a11(r156,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a3(r195,l0) a4(r152,l0) a5(r153,l0) a12(r193,l0) a13(r151,l0) a15(r207,l0) a14(r208,l0) a16(r187,l0) a17(r155,l0) a18(r182,l0) a19(r205,l0) a20(r206,l0) a21(r178,l0) a22(r167,l0) a23(r172,l0) a24(r171,l0) a25(r168,l0) a26(r170,l0) a27(r161,l0) a28(r164,l0) a29(r163,l0) a30(r159,l0) a31(r145,l0) a32(r158,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0) a59(r202,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a12(r193,l0) conflicts: a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r151,l0) conflicts: a6(r137,l0) a7(r138,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a15(r207,l0) a14(r208,l0) a16(r187,l0) a17(r155,l0) a18(r182,l0) a19(r205,l0) a20(r206,l0) a21(r178,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r208,l0) conflicts: a6(r137,l0) a7(r138,l0) a10(r143,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a13(r151,l0) a15(r207,l0) a17(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r207,l0) conflicts: a6(r137,l0) a7(r138,l0) a10(r143,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a13(r151,l0) a14(r208,l0) a16(r187,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r187,l0) conflicts: a6(r137,l0) a7(r138,l0) a10(r143,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a13(r151,l0) a15(r207,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r155,l0) conflicts: a6(r137,l0) a7(r138,l0) a10(r143,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a13(r151,l0) a14(r208,l0) a18(r182,l0) a19(r205,l0) a20(r206,l0) a21(r178,l0) a22(r167,l0) a23(r172,l0) a24(r171,l0) a25(r168,l0) a26(r170,l0) a27(r161,l0) a28(r164,l0) a29(r163,l0) a30(r159,l0) a31(r145,l0) a32(r158,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a18(r182,l0) conflicts: a6(r137,l0) a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a13(r151,l0) a17(r155,l0) a19(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r205,l0) conflicts: a6(r137,l0) a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a13(r151,l0) a17(r155,l0) a18(r182,l0) a20(r206,l0) a21(r178,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r206,l0) conflicts: a6(r137,l0) a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a13(r151,l0) a17(r155,l0) a19(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r178,l0) conflicts: a6(r137,l0) a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a13(r151,l0) a17(r155,l0) a19(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r167,l0) conflicts: a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a17(r155,l0) a23(r172,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r172,l0) conflicts: a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a17(r155,l0) a22(r167,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r171,l0) conflicts: a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a17(r155,l0) a25(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r168,l0) conflicts: a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a17(r155,l0) a24(r171,l0) a26(r170,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r170,l0) conflicts: a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a17(r155,l0) a25(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r161,l0) conflicts: a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a17(r155,l0) a28(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r164,l0) conflicts: a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a17(r155,l0) a27(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r163,l0) conflicts: a7(r138,l0) a11(r156,l0) a4(r152,l0) a5(r153,l0) a17(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r159,l0) conflicts: a7(r138,l0) a11(r156,l0) a17(r155,l0) a31(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a31(r145,l0) conflicts: a7(r138,l0) a11(r156,l0) a17(r155,l0) a30(r159,l0) a32(r158,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a32(r158,l0) conflicts: a11(r156,l0) a17(r155,l0) a31(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r137,l1) conflicts: a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1) a50(r202,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a34(r138,l1) conflicts: a33(r137,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1) a50(r202,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a35(r139,l1) conflicts: a33(r137,l1) a34(r138,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1) a50(r202,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a36(r140,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1) a50(r202,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a37(r141,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1) a50(r202,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a38(r142,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1) a50(r202,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a39(r143,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1) a50(r202,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a40(r144,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1) a50(r202,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a41(r156,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1) a50(r202,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a42(r147,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a43(r146,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1) a48(r200,l1) a49(r198,l1)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a44(r149,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a45(r148,l1) a46(r135,l1) a47(r150,l1)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a45(r148,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a46(r135,l1) a47(r150,l1)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a46(r135,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a47(r150,l1)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a47(r150,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a44(r149,l1) a45(r148,l1) a46(r135,l1) a48(r200,l1)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a48(r200,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a47(r150,l1) a49(r198,l1)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a49(r198,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1) a42(r147,l1) a43(r146,l1) a48(r200,l1)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a50(r202,l1) conflicts: a33(r137,l1) a34(r138,l1) a35(r139,l1) a36(r140,l1) a37(r141,l1) a38(r142,l1) a39(r143,l1) a40(r144,l1) a41(r156,l1)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a51(r147,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a52(r146,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a51(r147,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0) a57(r200,l0) a58(r198,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a53(r149,l0) conflicts: a0(r144,l0) a1(r140,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a51(r147,l0) a52(r146,l0) a54(r148,l0) a55(r135,l0) a56(r150,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a54(r148,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a55(r135,l0) a56(r150,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a55(r135,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a11(r156,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a56(r150,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a56(r150,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a51(r147,l0) a52(r146,l0) a53(r149,l0) a54(r148,l0) a55(r135,l0) a57(r200,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a57(r200,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a51(r147,l0) a52(r146,l0) a56(r150,l0) a58(r198,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a58(r198,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0) a51(r147,l0) a52(r146,l0) a57(r200,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a59(r202,l0) conflicts: a0(r144,l0) a1(r140,l0) a2(r142,l0) a6(r137,l0) a7(r138,l0) a8(r139,l0) a9(r141,l0) a10(r143,l0) a11(r156,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  cp0:a3(r195)<->a5(r153)@125:shuffle
  cp1:a2(r142)<->a3(r195)@125:shuffle
  cp2:a2(r142)<->a4(r152)@125:shuffle
  cp3:a9(r141)<->a14(r208)@125:shuffle
  cp4:a9(r141)<->a15(r207)@250:shuffle
  cp5:a14(r208)<->a16(r187)@125:shuffle
  cp6:a9(r141)<->a16(r187)@125:shuffle
  cp7:a15(r207)<->a17(r155)@125:shuffle
  cp8:a18(r182)<->a20(r206)@125:shuffle
  cp9:a10(r143)<->a18(r182)@125:shuffle
  cp10:a10(r143)<->a19(r205)@250:shuffle
  cp11:a20(r206)<->a21(r178)@125:shuffle
  cp12:a10(r143)<->a21(r178)@125:shuffle
  cp13:a24(r171)<->a26(r170)@125:shuffle
  cp14:a23(r172)<->a24(r171)@125:shuffle
  cp15:a23(r172)<->a25(r168)@125:shuffle
  cp16:a6(r137)<->a22(r167)@125:shuffle
  cp17:a6(r137)<->a23(r172)@125:shuffle
  cp18:a28(r164)<->a29(r163)@125:shuffle
  cp19:a6(r137)<->a27(r161)@125:shuffle
  cp20:a6(r137)<->a28(r164)@125:shuffle
  cp21:a7(r138)<->a32(r158)@125:shuffle
  cp22:a43(r146)<->a50(r202)@125:shuffle
  cp23:a47(r150)<->a49(r198)@125:shuffle
  cp24:a45(r148)<->a48(r200)@125:shuffle
  cp25:a39(r143)<->a46(r135)@250:shuffle
  cp26:a38(r142)<->a44(r149)@250:shuffle
  cp27:a52(r146)<->a59(r202)@125:shuffle
  cp28:a56(r150)<->a58(r198)@125:shuffle
  cp29:a54(r148)<->a57(r200)@125:shuffle
  cp30:a10(r143)<->a55(r135)@250:shuffle
  cp31:a2(r142)<->a53(r149)@250:shuffle
  regions=2, blocks=22, points=90
    allocnos=60, copies=32, conflicts=0, ranges=71

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 21 17(->18:l1) 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r144 1r140 2r142 3r195 4r152 5r153 6r137 7r138 8r139 9r141 10r143 11r156 12r193 13r151 14r208 15r207 16r187 17r155 18r182 19r205 20r206 21r178 22r167 23r172 24r171 25r168 26r170 27r161 28r164 29r163 30r159 31r145 32r158 51r147 52r146 53r149 54r148 55r135 56r150 57r200 58r198 59r202
    modified regnos: 135 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 155 156 158 159 161 163 164 167 168 170 171 172 178 182 187 193 195 198 200 202 205 206 207 208
    border:
    Pressure: GENERAL_REGS=15
    Reg 144 of GENERAL_REGS has 5 regs less
    Reg 140 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 143 of GENERAL_REGS has 5 regs less
    Reg 156 of GENERAL_REGS has 5 regs less
    Reg 193 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 208 of GENERAL_REGS has 1 regs less
    Reg 207 of GENERAL_REGS has 1 regs less
    Reg 187 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 2 regs less
    Reg 182 of GENERAL_REGS has 1 regs less
    Reg 205 of GENERAL_REGS has 1 regs less
    Reg 206 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 172 of GENERAL_REGS has 1 regs less
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 3 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 2 regs less
    Reg 146 of GENERAL_REGS has 2 regs less
    Reg 149 of GENERAL_REGS has 2 regs less
    Reg 148 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 150 of GENERAL_REGS has 2 regs less
    Reg 200 of GENERAL_REGS has 2 regs less
    Reg 198 of GENERAL_REGS has 2 regs less
    Reg 202 of GENERAL_REGS has 2 regs less
      Pushing a3(r195,l0)
      Pushing a32(r158,l0)
      Pushing a30(r159,l0)
      Pushing a29(r163,l0)
      Pushing a28(r164,l0)
      Pushing a27(r161,l0)
      Pushing a26(r170,l0)
      Pushing a25(r168,l0)
      Pushing a24(r171,l0)
      Pushing a23(r172,l0)
      Pushing a22(r167,l0)
      Pushing a21(r178,l0)
      Pushing a18(r182,l0)
      Pushing a16(r187,l0)
      Pushing a12(r193,l0)
      Pushing a20(r206,l0)
      Pushing a19(r205,l0)
      Pushing a15(r207,l0)
      Pushing a14(r208,l0)
      Pushing a5(r153,l0)
      Pushing a4(r152,l0)
      Pushing a13(r151,l0)
      Pushing a59(r202,l0: a50(r202,l1))
      Pushing a17(r155,l0)
      Pushing a31(r145,l0)
      Pushing a51(r147,l0: a42(r147,l1))(potential spill: pri=1052, cost=20000)
      Pushing a52(r146,l0: a43(r146,l1))(potential spill: pri=1111, cost=20000)
      Pushing a56(r150,l0: a47(r150,l1))(potential spill: pri=1250, cost=20000)
      Pushing a54(r148,l0: a45(r148,l1))(potential spill: pri=1428, cost=20000)
      Pushing a55(r135,l0: a46(r135,l1))
      Pushing a53(r149,l0: a44(r149,l1))
      Pushing a57(r200,l0: a48(r200,l1))(potential spill: pri=1538, cost=20000)
      Pushing a58(r198,l0: a49(r198,l1))
      Pushing a8(r139,l0)(potential spill: pri=2142, cost=30000)
      Pushing a7(r138,l0)(potential spill: pri=3076, cost=40000)
      Pushing a11(r156,l0)(potential spill: pri=3333, cost=40000)
      Pushing a0(r144,l0)(potential spill: pri=4545, cost=50000)
      Pushing a1(r140,l0)(potential spill: pri=5000, cost=50000)
      Pushing a6(r137,l0)
      Pushing a2(r142,l0)
      Pushing a10(r143,l0)
      Pushing a9(r141,l0)
      Popping a9(r141,l0)  -- assign reg 4
      Popping a10(r143,l0)  -- assign reg 5
      Popping a2(r142,l0)  -- assign reg 6
      Popping a6(r137,l0)  -- assign reg 7
      Popping a1(r140,l0)  -- assign reg 8
      Popping a0(r144,l0)  -- assign reg 10
      Popping a11(r156,l0)  -- assign reg 9
      Popping a7(r138,l0)  -- assign reg 11
      Popping a8(r139,l0)  -- assign reg 12
      Popping a58(r198,l0: a49(r198,l1))  -- assign reg 3
      Popping a57(r200,l0: a48(r200,l1))  -- assign reg 2
      Popping a53(r149,l0: a44(r149,l1))  -- assign reg 6
      Popping a55(r135,l0: a46(r135,l1))  -- assign reg 5
      Popping a54(r148,l0: a45(r148,l1))  -- assign reg 2
      Popping a56(r150,l0: a47(r150,l1))  -- assign reg 3
      Popping a52(r146,l0: a43(r146,l1))  -- assign reg 1
      Popping a51(r147,l0: a42(r147,l1))  -- spill
      Popping a31(r145,l0)  -- assign reg 3
      Popping a17(r155,l0)  -- assign reg 0
      Popping a59(r202,l0: a50(r202,l1))  -- assign reg 1
      Popping a13(r151,l0)  -- assign reg 3
      Popping a4(r152,l0)  -- assign reg 2
      Popping a5(r153,l0)  -- assign reg 6
      Popping a14(r208,l0)  -- assign reg 1
      Popping a15(r207,l0)  -- assign reg 0
      Popping a19(r205,l0)  -- assign reg 1
      Popping a20(r206,l0)  -- assign reg 5
      Popping a12(r193,l0)  -- assign reg 3
      Popping a16(r187,l0)  -- assign reg 4
      Popping a18(r182,l0)  -- assign reg 5
      Popping a21(r178,l0)  -- assign reg 5
      Popping a22(r167,l0)  -- assign reg 3
      Popping a23(r172,l0)  -- assign reg 7
      Popping a24(r171,l0)  -- assign reg 7
      Popping a25(r168,l0)  -- assign reg 3
      Popping a26(r170,l0)  -- assign reg 7
      Popping a27(r161,l0)  -- assign reg 3
      Popping a28(r164,l0)  -- assign reg 7
      Popping a29(r163,l0)  -- assign reg 7
      Popping a30(r159,l0)  -- assign reg 2
      Popping a32(r158,l0)  -- assign reg 11
      Popping a3(r195,l0)  -- assign reg 6

  Loop 1 (parent 0, header bb18, depth 1)
    bbs: 20(->21:l0) 19 18
    all: 33r137 34r138 35r139 36r140 37r141 38r142 39r143 40r144 41r156 42r147 43r146 44r149 45r148 46r135 47r150 48r200 49r198 50r202
    modified regnos: 135 140 141 142 143 144 146 147 148 149 150 198 200 202
    border: 33r137 34r138 35r139 36r140 37r141 38r142 39r143 40r144 41r156
    Pressure: GENERAL_REGS=15
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 140 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 143 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 5 regs less
    Reg 156 of GENERAL_REGS has 5 regs less
    Reg 147 of GENERAL_REGS has 2 regs less
    Reg 146 of GENERAL_REGS has 2 regs less
    Reg 149 of GENERAL_REGS has 2 regs less
    Reg 148 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 150 of GENERAL_REGS has 2 regs less
    Reg 200 of GENERAL_REGS has 2 regs less
    Reg 198 of GENERAL_REGS has 2 regs less
    Reg 202 of GENERAL_REGS has 2 regs less
      Pushing a50(r202,l1)
      Pushing a42(r147,l1)(potential spill: pri=1052, cost=20000)
      Pushing a43(r146,l1)(potential spill: pri=1111, cost=20000)
      Pushing a47(r150,l1)(potential spill: pri=1250, cost=20000)
      Pushing a45(r148,l1)(potential spill: pri=1428, cost=20000)
      Pushing a46(r135,l1)
      Pushing a44(r149,l1)
      Pushing a48(r200,l1)(potential spill: pri=1538, cost=20000)
      Pushing a49(r198,l1)
      Pushing a35(r139,l1)(potential spill: pri=3285, cost=46000)
      Pushing a33(r137,l1)(potential spill: pri=3846, cost=50000)
      Pushing a41(r156,l1)(potential spill: pri=4166, cost=50000)
      Pushing a40(r144,l1)(potential spill: pri=5454, cost=60000)
      Pushing a34(r138,l1)(potential spill: pri=7000, cost=70000)
      Pushing a36(r140,l1)
      Pushing a39(r143,l1)
      Pushing a38(r142,l1)
      Pushing a37(r141,l1)
      Popping a37(r141,l1)  -- assign reg 4
      Popping a38(r142,l1)  -- assign reg 6
      Popping a39(r143,l1)  -- assign reg 5
      Popping a36(r140,l1)  -- assign reg 8
      Popping a34(r138,l1)  -- assign reg 11
      Popping a40(r144,l1)  -- assign reg 10
      Popping a41(r156,l1)  -- assign reg 9
      Popping a33(r137,l1)  -- assign reg 7
      Popping a35(r139,l1)  -- assign reg 12
      Popping a49(r198,l1)  -- assign reg 3
      Popping a48(r200,l1)  -- assign reg 2
      Popping a44(r149,l1)  -- assign reg 6
      Popping a46(r135,l1)  -- assign reg 5
      Popping a45(r148,l1)  -- assign reg 2
      Popping a47(r150,l1)  -- assign reg 3
      Popping a43(r146,l1)  -- assign reg 1
      Popping a42(r147,l1)  -- spill
      Popping a50(r202,l1)  -- assign reg 1
Disposition:
   46:r135 l1     5   33:r137 l1     7    6:r137 l0     7   34:r138 l1    11
    7:r138 l0    11   35:r139 l1    12    8:r139 l0    12   36:r140 l1     8
    1:r140 l0     8   37:r141 l1     4    9:r141 l0     4   38:r142 l1     6
    2:r142 l0     6   39:r143 l1     5   10:r143 l0     5   40:r144 l1    10
    0:r144 l0    10   31:r145 l0     3   43:r146 l1     1   42:r147 l1   mem
   45:r148 l1     2   44:r149 l1     6   47:r150 l1     3   13:r151 l0     3
    4:r152 l0     2    5:r153 l0     6   17:r155 l0     0   41:r156 l1     9
   11:r156 l0     9   32:r158 l0    11   30:r159 l0     2   27:r161 l0     3
   29:r163 l0     7   28:r164 l0     7   22:r167 l0     3   25:r168 l0     3
   26:r170 l0     7   24:r171 l0     7   23:r172 l0     7   21:r178 l0     5
   18:r182 l0     5   16:r187 l0     4   12:r193 l0     3    3:r195 l0     6
   49:r198 l1     3   48:r200 l1     2   50:r202 l1     1   19:r205 l0     1
   20:r206 l0     5   15:r207 l0     0   14:r208 l0     1
New iteration of spill/restore move
      Changing RTL for loop 1 (header bb18)
  7 vs parent 7:      Creating newreg=209 from oldreg=137
  11 vs parent 11:      Creating newreg=210 from oldreg=138
  12 vs parent 12:      Creating newreg=211 from oldreg=139
  8 vs parent 8:      Creating newreg=212 from oldreg=140
  4 vs parent 4:      Creating newreg=213 from oldreg=141
  6 vs parent 6:      Creating newreg=214 from oldreg=142
  5 vs parent 5:      Creating newreg=215 from oldreg=143
  10 vs parent 10:      Creating newreg=216 from oldreg=144
  9 vs parent 9:      Creating newreg=217 from oldreg=156
rescanning insn with uid = 152.
deleting insn with uid = 152.
rescanning insn with uid = 147.
deleting insn with uid = 147.
rescanning insn with uid = 123.
deleting insn with uid = 123.
rescanning insn with uid = 124.
deleting insn with uid = 124.
rescanning insn with uid = 125.
deleting insn with uid = 125.
rescanning insn with uid = 126.
deleting insn with uid = 126.
rescanning insn with uid = 127.
deleting insn with uid = 127.
rescanning insn with uid = 145.
deleting insn with uid = 145.
rescanning insn with uid = 150.
deleting insn with uid = 150.
rescanning insn with uid = 132.
deleting insn with uid = 132.
rescanning insn with uid = 137.
deleting insn with uid = 137.
rescanning insn with uid = 141.
deleting insn with uid = 141.
rescanning insn with uid = 130.
deleting insn with uid = 130.
rescanning insn with uid = 135.
deleting insn with uid = 135.
rescanning insn with uid = 134.
deleting insn with uid = 134.
rescanning insn with uid = 139.
deleting insn with uid = 139.
rescanning insn with uid = 129.
deleting insn with uid = 129.
scanning new insn with uid = 207.
scanning new insn with uid = 208.
scanning new insn with uid = 209.
scanning new insn with uid = 210.
scanning new insn with uid = 211.
scanning new insn with uid = 212.
scanning new insn with uid = 213.
scanning new insn with uid = 214.
scanning new insn with uid = 215.
    Adding cp32:a6r137-a33r209
    Adding range [91..91] to allocno a6r137
    Adding cp33:a7r138-a34r210
    Adding range [91..93] to allocno a7r138
    Adding cp34:a8r139-a35r211
    Adding range [91..95] to allocno a8r139
    Adding cp35:a1r140-a36r212
    Adding range [91..97] to allocno a1r140
    Adding cp36:a9r141-a37r213
    Adding range [91..99] to allocno a9r141
    Adding cp37:a2r142-a38r214
    Adding range [91..101] to allocno a2r142
    Adding cp38:a10r143-a39r215
    Adding range [91..103] to allocno a10r143
    Adding cp39:a0r144-a40r216
    Adding range [91..105] to allocno a0r144
    Adding cp40:a11r156-a41r217
    Adding range [91..107] to allocno a11r156
    Adding range [92..108] to allocno a33r209
    Adding range [94..108] to allocno a34r210
    Adding range [96..108] to allocno a35r211
    Adding range [98..108] to allocno a36r212
    Adding range [100..108] to allocno a37r213
    Adding range [102..108] to allocno a38r214
    Adding range [104..108] to allocno a39r215
    Adding range [106..108] to allocno a40r216
    Adding range [108..108] to allocno a41r217
    Adding cp41:a0r144-a40r216
    Adding range [110..110] to allocno a40r216
    Adding range [111..111] to allocno a0r144
changing bb of uid 217
  unscanned insn
scanning new insn with uid = 216.
    New r209: setting preferred GENERAL_REGS, alternative NO_REGS
    New r210: setting preferred GENERAL_REGS, alternative NO_REGS
    New r211: setting preferred GENERAL_REGS, alternative NO_REGS
    New r212: setting preferred GENERAL_REGS, alternative NO_REGS
    New r213: setting preferred GENERAL_REGS, alternative NO_REGS
    New r214: setting preferred GENERAL_REGS, alternative NO_REGS
    New r215: setting preferred GENERAL_REGS, alternative NO_REGS
    New r216: setting preferred GENERAL_REGS, alternative NO_REGS
    New r217: setting preferred GENERAL_REGS, alternative NO_REGS
Flattening IR
      Remove cp27:c52r146-c59r202
      Remove cp28:c56r150-c58r198
      Remove cp29:c54r148-c57r200
      Remove cp30:a10r143-c55r135
      Remove cp31:a2r142-c53r149
      Remove a51r147
      Remove a52r146
      Remove a53r149
      Remove a54r148
      Remove a55r135
      Remove a56r150
      Remove a57r200
      Remove a58r198
      Remove a59r202
Compressing live ranges: from 112 to 110 - 98%
Ranges after the compression:
 a0(r144): [109..109] [90..104] [8..9] [0..1]
 a1(r140): [90..96] [1..4]
 a2(r142): [90..100] [1..2]
 a3(r195): [3..5]
 a4(r152): [10..57] [3..7]
 a5(r153): [10..58] [6..7]
 a6(r137): [90..90] [50..51] [10..41] [1..7]
 a7(r138): [90..92] [10..61] [1..7]
 a8(r139): [90..94] [14..15] [10..13] [1..7]
 a9(r141): [90..98] [20..21] [10..17] [1..7]
 a10(r143): [90..102] [33..34] [10..28] [1..7]
 a11(r156): [90..106] [10..64] [1..7]
 a12(r193): [11..12]
 a13(r151): [16..40]
 a14(r208): [24..27] [18..19]
 a15(r207): [22..25] [18..19]
 a16(r187): [22..23]
 a17(r155): [26..65]
 a18(r182): [29..30]
 a19(r205): [35..39] [29..32]
 a20(r206): [37..38] [31..32]
 a21(r178): [35..36]
 a22(r167): [42..43]
 a23(r172): [42..44]
 a24(r171): [45..46]
 a25(r168): [45..48]
 a26(r170): [47..49]
 a27(r161): [52..53]
 a28(r164): [52..54]
 a29(r163): [55..56]
 a30(r159): [59..60]
 a31(r145): [59..66]
 a32(r158): [62..63]
 a33(r209): [91..107] [67..89]
 a34(r210): [93..107] [67..89]
 a35(r211): [95..107] [67..89]
 a36(r212): [97..107] [67..89]
 a37(r213): [99..107] [70..89] [67..68]
 a38(r214): [101..107] [76..89] [67..71]
 a39(r215): [103..107] [78..89] [67..73]
 a40(r216): [108..108] [105..107] [67..89]
 a41(r217): [107..107] [67..89]
 a42(r147): [69..83]
 a43(r146): [69..86]
 a44(r149): [72..75]
 a45(r148): [72..79]
 a46(r135): [74..77]
 a47(r150): [74..81]
 a48(r200): [80..84]
 a49(r198): [82..85]
 a50(r202): [87..88]
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 30 count 44 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 30 count 44 (  1.9)
+++Costs: overall 40000, reg 20000, mem 20000, ld 0, st 0, move 20000
+++       move loops 0, new jumps 0
insn=199, live_throughout: 0, 1, 13, 14, dead_or_set: 145
insn=4, live_throughout: 1, 13, 14, 145, dead_or_set: 0, 155
insn=5, live_throughout: 13, 14, 145, 155, dead_or_set: 1, 156
insn=200, live_throughout: 13, 14, 155, 156, dead_or_set: 145
insn=13, live_throughout: 13, 14, 145, 155, 156, dead_or_set: 158
insn=186, live_throughout: 13, 14, 145, 155, 156, dead_or_set: 138, 158
insn=206, live_throughout: 13, 14, 138, 145, 155, 156, dead_or_set: 159
insn=26, live_throughout: 13, 14, 138, 155, 156, dead_or_set: 145, 159
insn=11, live_throughout: 13, 14, 24, 138, 155, 156, dead_or_set: 153
insn=12, live_throughout: 13, 14, 24, 138, 153, 155, 156, dead_or_set: 152
insn=27, live_throughout: 13, 14, 138, 152, 153, 155, 156, dead_or_set: 
insn=32, live_throughout: 13, 14, 138, 152, 153, 155, 156, dead_or_set: 163
insn=33, live_throughout: 13, 14, 138, 152, 153, 155, 156, dead_or_set: 163, 164
insn=205, live_throughout: 13, 14, 138, 152, 153, 155, 156, 164, dead_or_set: 161
insn=35, live_throughout: 13, 14, 138, 152, 153, 155, 156, dead_or_set: 137, 161, 164
insn=189, live_throughout: 13, 14, 137, 138, 152, 153, 155, 156, dead_or_set: 
insn=38, live_throughout: 13, 14, 138, 152, 153, 155, 156, dead_or_set: 
insn=44, live_throughout: 13, 14, 138, 152, 153, 155, 156, dead_or_set: 170
insn=42, live_throughout: 13, 14, 138, 152, 153, 155, 156, 170, dead_or_set: 168
insn=45, live_throughout: 13, 14, 138, 152, 153, 155, 156, 168, dead_or_set: 170, 171
insn=46, live_throughout: 13, 14, 138, 152, 153, 155, 156, dead_or_set: 168, 171, 172
insn=204, live_throughout: 13, 14, 138, 152, 153, 155, 156, 172, dead_or_set: 167
insn=48, live_throughout: 13, 14, 138, 152, 153, 155, 156, dead_or_set: 137, 167, 172
insn=49, live_throughout: 13, 14, 137, 138, 152, 153, 155, 156, dead_or_set: 
insn=51, live_throughout: 13, 14, 137, 138, 152, 153, 155, 156, dead_or_set: 151
insn=174, live_throughout: 13, 14, 137, 138, 151, 152, 153, 155, 156, dead_or_set: 205
insn=177, live_throughout: 13, 14, 137, 138, 151, 152, 153, 155, 156, 205, dead_or_set: 206
insn=53, live_throughout: 13, 14, 137, 138, 151, 152, 153, 155, 156, 205, 206, dead_or_set: 
insn=54, live_throughout: 13, 14, 137, 138, 151, 152, 153, 155, 156, 205, 206, dead_or_set: 
insn=59, live_throughout: 13, 14, 137, 138, 151, 152, 153, 155, 156, 205, dead_or_set: 178, 206
insn=60, live_throughout: 13, 14, 137, 138, 151, 152, 153, 155, 156, dead_or_set: 143, 178, 205
insn=191, live_throughout: 13, 14, 137, 138, 143, 151, 152, 153, 155, 156, dead_or_set: 
insn=63, live_throughout: 13, 14, 137, 138, 151, 152, 153, 155, 156, 205, 206, dead_or_set: 
insn=68, live_throughout: 13, 14, 137, 138, 151, 152, 153, 155, 156, 205, dead_or_set: 182, 206
insn=69, live_throughout: 13, 14, 137, 138, 151, 152, 153, 155, 156, dead_or_set: 143, 182, 205
insn=70, live_throughout: 13, 14, 137, 138, 143, 151, 152, 153, 155, 156, dead_or_set: 
insn=73, live_throughout: 13, 14, 137, 138, 143, 151, 152, 153, 155, 156, dead_or_set: 
insn=183, live_throughout: 13, 14, 24, 137, 138, 143, 151, 152, 153, 155, 156, dead_or_set: 208
insn=180, live_throughout: 13, 14, 24, 137, 138, 143, 151, 152, 153, 156, 208, dead_or_set: 155, 207
insn=74, live_throughout: 13, 14, 137, 138, 143, 151, 152, 153, 156, 207, 208, dead_or_set: 
insn=79, live_throughout: 13, 14, 137, 138, 143, 151, 152, 153, 156, 207, dead_or_set: 187, 208
insn=80, live_throughout: 13, 14, 137, 138, 143, 151, 152, 153, 156, dead_or_set: 141, 187, 207
insn=193, live_throughout: 13, 14, 137, 138, 141, 143, 151, 152, 153, 156, dead_or_set: 
insn=83, live_throughout: 13, 14, 137, 138, 143, 151, 152, 153, 156, 207, 208, dead_or_set: 
insn=88, live_throughout: 13, 14, 137, 138, 143, 151, 152, 153, 156, dead_or_set: 141, 207, 208
insn=89, live_throughout: 13, 14, 137, 138, 141, 143, 151, 152, 153, 156, dead_or_set: 
insn=92, live_throughout: 13, 14, 137, 138, 141, 143, 152, 153, 156, dead_or_set: 151
insn=93, live_throughout: 13, 14, 137, 138, 141, 143, 152, 153, 156, dead_or_set: 
insn=96, live_throughout: 13, 14, 137, 138, 141, 143, 152, 153, 156, dead_or_set: 
insn=97, live_throughout: 13, 14, 137, 138, 141, 143, 152, 153, 156, dead_or_set: 
insn=99, live_throughout: 13, 14, 137, 138, 141, 143, 152, 153, 156, dead_or_set: 139
insn=195, live_throughout: 13, 14, 137, 138, 139, 141, 143, 152, 153, 156, dead_or_set: 
insn=102, live_throughout: 13, 14, 137, 138, 141, 143, 152, 153, 156, dead_or_set: 
insn=104, live_throughout: 13, 14, 137, 138, 141, 143, 152, 153, 156, dead_or_set: 139
insn=105, live_throughout: 13, 14, 137, 138, 139, 141, 143, 152, 153, 156, dead_or_set: 
insn=107, live_throughout: 13, 14, 137, 138, 139, 141, 143, 152, 153, 156, dead_or_set: 193
insn=108, live_throughout: 13, 14, 137, 138, 139, 141, 143, 152, 153, 156, dead_or_set: 193
insn=109, live_throughout: 13, 14, 137, 138, 139, 141, 143, 152, 153, 156, dead_or_set: 
insn=111, live_throughout: 13, 14, dead_or_set: 144
insn=197, live_throughout: 13, 14, 144, dead_or_set: 
insn=114, live_throughout: 13, 137, 138, 139, 141, 143, 152, 153, 156, dead_or_set: 
insn=117, live_throughout: 13, 137, 138, 139, 141, 143, 152, 156, dead_or_set: 153, 195
insn=119, live_throughout: 13, 137, 138, 139, 141, 143, 152, 156, 195, dead_or_set: 140
insn=118, live_throughout: 13, 137, 138, 139, 140, 141, 143, 156, dead_or_set: 142, 152, 195
insn=120, live_throughout: 13, 137, 138, 139, 140, 141, 142, 143, 156, dead_or_set: 144
insn=207, live_throughout: 13, 138, 139, 140, 141, 142, 143, 144, 156, dead_or_set: 137, 209
insn=208, live_throughout: 13, 139, 140, 141, 142, 143, 144, 156, 209, dead_or_set: 138, 210
insn=209, live_throughout: 13, 140, 141, 142, 143, 144, 156, 209, 210, dead_or_set: 139, 211
insn=210, live_throughout: 13, 141, 142, 143, 144, 156, 209, 210, 211, dead_or_set: 140, 212
insn=211, live_throughout: 13, 142, 143, 144, 156, 209, 210, 211, 212, dead_or_set: 141, 213
insn=212, live_throughout: 13, 143, 144, 156, 209, 210, 211, 212, 213, dead_or_set: 142, 214
insn=213, live_throughout: 13, 144, 156, 209, 210, 211, 212, 213, 214, dead_or_set: 143, 215
insn=214, live_throughout: 13, 156, 209, 210, 211, 212, 213, 214, 215, dead_or_set: 144, 216
insn=215, live_throughout: 13, 209, 210, 211, 212, 213, 214, 215, 216, dead_or_set: 156, 217
insn=151, live_throughout: 13, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 
insn=123, live_throughout: 13, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 0
insn=124, live_throughout: 0, 13, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 1
insn=125, live_throughout: 0, 1, 13, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 2
insn=126, live_throughout: 0, 1, 2, 13, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 3
insn=127, live_throughout: 13, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 0, 1, 2, 3, 14
insn=145, live_throughout: 0, 13, 14, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 202
insn=150, live_throughout: 0, 13, 14, 202, 209, 210, 211, 213, 214, 215, 216, 217, dead_or_set: 212
insn=146, live_throughout: 0, 13, 14, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 146, 202
insn=132, live_throughout: 0, 13, 14, 146, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 198
insn=137, live_throughout: 0, 13, 14, 146, 198, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 200
insn=141, live_throughout: 0, 13, 14, 146, 198, 200, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 147
insn=133, live_throughout: 0, 13, 14, 24, 146, 147, 200, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 150, 198
insn=138, live_throughout: 0, 13, 14, 24, 146, 147, 150, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 148, 200
insn=130, live_throughout: 0, 13, 14, 24, 146, 147, 148, 150, 209, 210, 211, 212, 213, 214, 216, 217, dead_or_set: 135, 215
insn=135, live_throughout: 0, 13, 14, 24, 135, 146, 147, 148, 150, 209, 210, 211, 212, 213, 216, 217, dead_or_set: 149, 214
insn=134, live_throughout: 0, 13, 14, 24, 146, 147, 148, 149, 209, 210, 211, 212, 213, 216, 217, dead_or_set: 135, 150, 215
insn=139, live_throughout: 0, 13, 14, 24, 146, 147, 209, 210, 211, 212, 213, 215, 216, 217, dead_or_set: 148, 149, 214
insn=129, live_throughout: 13, 14, 24, 146, 147, 209, 210, 211, 212, 213, 214, 215, 217, dead_or_set: 0, 216
insn=142, live_throughout: 13, 14, 146, 147, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 
insn=147, live_throughout: 13, 14, 209, 210, 211, 212, 214, 215, 216, 217, dead_or_set: 146, 147, 213
insn=148, live_throughout: 13, 14, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 
insn=152, live_throughout: 13, 14, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 
insn=153, live_throughout: 13, 14, 209, 210, 211, 212, 213, 214, 215, 216, 217, dead_or_set: 
insn=216, live_throughout: 13, 14, dead_or_set: 144, 216
insn=154, live_throughout: 13, 14, 144, dead_or_set: 
insn=160, live_throughout: 13, 14, dead_or_set: 0, 144
insn=166, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 159: (insn_list:REG_DEP_TRUE 206 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 205 (nil))
init_insns for 167: (insn_list:REG_DEP_TRUE 204 (nil))
init_insns for 193: (insn_list:REG_DEP_TRUE 107 (nil))
      Slot 1 (freq,size): a42r147(2000,4)
      Assigning 147(freq=2000) a new slot 0
changing reg in insn 130
changing reg in insn 134
changing reg in insn 48
changing reg in insn 35
changing reg in insn 207
changing reg in insn 107
changing reg in insn 51
changing reg in insn 107
changing reg in insn 186
changing reg in insn 208
changing reg in insn 104
changing reg in insn 99
changing reg in insn 209
changing reg in insn 119
changing reg in insn 210
changing reg in insn 120
changing reg in insn 88
changing reg in insn 80
changing reg in insn 211
changing reg in insn 118
changing reg in insn 212
changing reg in insn 69
changing reg in insn 60
changing reg in insn 213
changing reg in insn 96
changing reg in insn 216
changing reg in insn 120
changing reg in insn 111
changing reg in insn 214
changing reg in insn 160
changing reg in insn 200
changing reg in insn 199
changing reg in insn 200
changing reg in insn 26
changing reg in insn 26
changing reg in insn 146
changing reg in insn 147
changing reg in insn 138
changing reg in insn 139
changing reg in insn 135
changing reg in insn 139
changing reg in insn 133
changing reg in insn 134
changing reg in insn 51
changing reg in insn 92
changing reg in insn 73
changing reg in insn 53
changing reg in insn 12
changing reg in insn 118
changing reg in insn 33
changing reg in insn 11
changing reg in insn 117
changing reg in insn 32
changing reg in insn 4
changing reg in insn 200
changing reg in insn 44
changing reg in insn 42
changing reg in insn 183
changing reg in insn 180
changing reg in insn 177
changing reg in insn 174
changing reg in insn 12
changing reg in insn 11
changing reg in insn 5
changing reg in insn 215
changing reg in insn 99
changing reg in insn 13
changing reg in insn 13
changing reg in insn 186
changing reg in insn 206
changing reg in insn 26
changing reg in insn 205
changing reg in insn 35
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 204
changing reg in insn 48
changing reg in insn 42
changing reg in insn 46
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 59
changing reg in insn 60
changing reg in insn 68
changing reg in insn 69
changing reg in insn 79
changing reg in insn 80
changing reg in insn 107
changing reg in insn 108
changing reg in insn 117
changing reg in insn 118
changing reg in insn 132
changing reg in insn 133
changing reg in insn 137
changing reg in insn 138
changing reg in insn 145
changing reg in insn 146
changing reg in insn 174
changing reg in insn 69
changing reg in insn 60
changing reg in insn 177
changing reg in insn 68
changing reg in insn 59
changing reg in insn 180
changing reg in insn 88
changing reg in insn 80
changing reg in insn 183
changing reg in insn 88
changing reg in insn 79
changing reg in insn 207
changing reg in insn 127
changing reg in insn 208
changing reg in insn 137
changing reg in insn 132
changing reg in insn 145
changing reg in insn 209
changing reg in insn 152
changing reg in insn 210
changing reg in insn 150
changing reg in insn 150
changing reg in insn 152
changing reg in insn 211
changing reg in insn 147
changing reg in insn 141
changing reg in insn 141
changing reg in insn 145
changing reg in insn 125
changing reg in insn 212
changing reg in insn 139
changing reg in insn 135
changing reg in insn 137
changing reg in insn 124
changing reg in insn 213
changing reg in insn 134
changing reg in insn 130
changing reg in insn 132
changing reg in insn 123
changing reg in insn 214
changing reg in insn 129
changing reg in insn 216
changing reg in insn 129
changing reg in insn 215
changing reg in insn 126
12 uses a new slot
12 uses a slot from prev iteration
Spilling for insn 219.
Spilling for insn 141.
Using reg 1 for reload 0
Spilling for insn 147.
Using reg 3 for reload 0
      Spill 146(a43), cost=20000
      Spilled regs 146
        Try assign 147(a42), cost=20000
changing reg in insn 146
changing reg in insn 147
      Assigning 146(freq=2000) a new slot 1
 Register 146 now on stack.

deleting insn with uid = 219.
deleting insn with uid = 220.
12 uses a slot from prev iteration
12 uses a slot from prev iteration
Spilling for insn 221.
Spilling for insn 146.
Spilling for insn 141.
Using reg 1 for reload 0
Spilling for insn 147.
Using reg 3 for reload 0
Using reg 2 for reload 1

Reloads for insn # 221
Reload 0: reload_out (SI) = (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])

Reloads for insn # 146
Reload 0: reload_out (SI) = (reg:SI 146 [ D.5213 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 146 [ D.5213 ])
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 141
Reload 0: reload_out (SI) = (reg:SI 147 [ D.5208 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 147 [ D.5208 ])
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 147
Reload 0: reload_in (SI) = (reg:SI 146 [ D.5213 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:SI 146 [ D.5213 ])
	reload_reg_rtx: (reg:SI 2 r2)
Reload 1: reload_in (SI) = (reg:SI 147 [ D.5208 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:SI 147 [ D.5208 ])
	reload_reg_rtx: (reg:SI 1 r1)
deleting insn with uid = 4.
deleting insn with uid = 207.
deleting insn with uid = 208.
deleting insn with uid = 209.
deleting insn with uid = 210.
deleting insn with uid = 211.
deleting insn with uid = 212.
deleting insn with uid = 213.
deleting insn with uid = 214.
deleting insn with uid = 215.
deleting insn with uid = 216.
+++Overall after reload 60000


try_optimize_cfg iteration 1

Forwarding edge 20->21 to 22 failed.
Deleting fallthru block 21.
deleting insn with uid = 217.
deleting block 21


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 127.
deleting insn with uid = 127.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 41 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 42 (  1.9)


vfp_double_cpdo

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,15u} r1={8d,10u} r2={8d,7u} r3={12d,12u,1d} r4={4d,5u} r5={7d,9u} r6={5d,7u} r7={7d,8u,1d} r8={2d,3u} r9={1d,3u} r10={3d,2u} r11={2d,4u} r12={5d,2u} r13={1d,27u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={10d,8u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 317{192d,123u,2e} in 84{83 regular + 1 call} insns.
(note 3 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 9 [r9] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 9 [r9] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 3 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 185 2 NOTE_INSN_FUNCTION_BEG)

(note 185 6 199 2 NOTE_INSN_DELETED)

(insn 199 185 5 2 arch/arm/vfp/vfpdouble.c:1127 (set (reg/v:SI 3 r3 [orig:145 op ] [145])
        (const_int 11534400 [0xb00040])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 11534400 [0xb00040])
        (nil)))

(insn 5 199 200 2 arch/arm/vfp/vfpdouble.c:1126 (set (reg/v:SI 9 r9 [orig:156 fpscr ] [156])
        (reg:SI 1 r1 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(insn 200 5 13 2 arch/arm/vfp/vfpdouble.c:1127 (set (reg/v:SI 3 r3 [orig:145 op ] [145])
        (and:SI (reg/v:SI 0 r0 [orig:155 inst ] [155])
            (reg/v:SI 3 r3 [orig:145 op ] [145]))) 67 {*arm_andsi3_insn} (nil))

(insn 13 200 186 2 arch/arm/vfp/vfpdouble.c:1135 (set (reg:SI 11 fp [158])
        (and:SI (reg/v:SI 9 r9 [orig:156 fpscr ] [156])
            (const_int 3145728 [0x300000]))) 67 {*arm_andsi3_insn} (nil))

(insn 186 13 206 2 arch/arm/vfp/vfpdouble.c:1135 discrim 2 (parallel [
            (set (reg/v:SI 11 fp [orig:138 vecstride ] [138])
                (if_then_else:SI (eq (reg:SI 11 fp [158])
                        (const_int 3145728 [0x300000]))
                    (const_int 2 [0x2])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(insn 206 186 26 2 arch/arm/vfp/vfpdouble.c:1137 (set (reg:SI 2 r2 [159])
        (const_int 11534400 [0xb00040])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 11534400 [0xb00040])
        (nil)))

(insn 26 206 11 2 arch/arm/vfp/vfpdouble.c:1137 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:145 op ] [145])
            (reg:SI 2 r2 [159]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 3 r3 [orig:145 op ] [145])
            (const_int 11534400 [0xb00040]))
        (nil)))

(insn 11 26 12 2 arch/arm/vfp/vfpdouble.c:1130 (set (reg:SI 6 r6 [orig:153 D.5133 ] [153])
        (and:SI (reg/v:SI 0 r0 [orig:155 inst ] [155])
            (const_int 983040 [0xf0000]))) 67 {*arm_andsi3_insn} (nil))

(insn 12 11 27 2 arch/arm/vfp/vfpdouble.c:1130 (set (reg:SI 2 r2 [orig:152 D.5135 ] [152])
        (and:SI (reg/v:SI 0 r0 [orig:155 inst ] [155])
            (const_int 128 [0x80]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 27 12 28 2 arch/arm/vfp/vfpdouble.c:1137 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 2 [r2] 6 [r6] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 6 [r6] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  4 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 6 [r6] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7]
;; live  in  	 0 [r0] 2 [r2] 6 [r6] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 28 27 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 31 28 34 3 NOTE_INSN_DELETED)

(note 34 31 32 3 NOTE_INSN_DELETED)

(insn 32 34 33 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg:SI 7 r7 [163])
        (lshiftrt:SI (reg:SI 6 r6 [orig:153 D.5133 ] [153])
            (const_int 15 [0xf]))) 117 {*arm_shiftsi3} (nil))

(insn 33 32 205 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg:SI 7 r7 [164])
        (ior:SI (lshiftrt:SI (reg:SI 2 r2 [orig:152 D.5135 ] [152])
                (const_int 7 [0x7]))
            (reg:SI 7 r7 [163]))) 270 {*arith_shiftsi} (nil))

(insn 205 33 35 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg/f:SI 3 r3 [161])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 35 205 189 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg/v/f:SI 7 r7 [orig:137 fop ] [137])
        (plus:SI (mult:SI (reg:SI 7 r7 [164])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [161]))) 270 {*arith_shiftsi} (nil))

(jump_insn 189 35 190 3 (set (pc)
        (label_ref 49)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 190 189 38)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 6 [r6] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7]
;; live  in  	 0 [r0] 2 [r2] 6 [r6] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  2 [72.0%] 
(code_label 38 190 39 4 46 "" [1 uses])

(note 39 38 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 43 39 47 4 NOTE_INSN_DELETED)

(note 47 43 44 4 NOTE_INSN_DELETED)

(insn 44 47 42 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 7 r7 [170])
        (and:SI (reg/v:SI 0 r0 [orig:155 inst ] [155])
            (const_int 11534336 [0xb00000]))) 67 {*arm_andsi3_insn} (nil))

(insn 42 44 45 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 3 r3 [168])
        (and:SI (reg/v:SI 0 r0 [orig:155 inst ] [155])
            (const_int 64 [0x40]))) 67 {*arm_andsi3_insn} (nil))

(insn 45 42 46 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 7 r7 [171])
        (lshiftrt:SI (reg:SI 7 r7 [170])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 46 45 204 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 7 r7 [172])
        (ior:SI (lshiftrt:SI (reg:SI 3 r3 [168])
                (const_int 4 [0x4]))
            (reg:SI 7 r7 [171]))) 270 {*arith_shiftsi} (nil))

(insn 204 46 48 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg/f:SI 3 r3 [167])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 272 [0x110])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 272 [0x110])))
        (nil)))

(insn 48 204 49 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg/v/f:SI 7 r7 [orig:137 fop ] [137])
        (plus:SI (mult:SI (reg:SI 7 r7 [172])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [167]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 49 48 50 5 47 "" [1 uses])

(note 50 49 52 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 52 50 51 5 NOTE_INSN_DELETED)

(insn 51 52 174 5 arch/arm/vfp/vfpdouble.c:1143 (set (reg:SI 3 r3 [orig:151 D.5156 ] [151])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:137 fop ] [137])
                (const_int 4 [0x4])) [0 <variable>.flags+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 174 51 177 5 (set (reg:SI 1 r1 [205])
        (and:SI (reg/v:SI 0 r0 [orig:155 inst ] [155])
            (const_int 4194304 [0x400000]))) 67 {*arm_andsi3_insn} (nil))

(insn 177 174 53 5 (set (reg:SI 5 r5 [206])
        (and:SI (reg/v:SI 0 r0 [orig:155 inst ] [155])
            (const_int 61440 [0xf000]))) 67 {*arm_andsi3_insn} (nil))

(insn 53 177 54 5 arch/arm/vfp/vfpdouble.c:1143 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:151 D.5156 ] [151])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 54 53 55 5 arch/arm/vfp/vfpdouble.c:1143 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 5 [r5] 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 55 54 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 57 55 59 6 NOTE_INSN_DELETED)

(insn 59 57 60 6 arch/arm/vfp/vfpdouble.c:1144 (set (reg:SI 5 r5 [178])
        (lshiftrt:SI (reg:SI 5 r5 [206])
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (nil))

(insn 60 59 191 6 arch/arm/vfp/vfpdouble.c:1144 (set (reg/v:SI 5 r5 [orig:143 dest ] [143])
        (ior:SI (lshiftrt:SI (reg:SI 1 r1 [205])
                (const_int 22 [0x16]))
            (reg:SI 5 r5 [178]))) 270 {*arith_shiftsi} (nil))

(jump_insn 191 60 192 6 (set (pc)
        (label_ref 70)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%] 

(barrier 192 191 63)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 5 [r5] 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  5 [50.0%] 
(code_label 63 192 64 7 48 "" [1 uses])

(note 64 63 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 66 64 68 7 NOTE_INSN_DELETED)

(insn 68 66 69 7 arch/arm/vfp/vfpdouble.c:1146 (set (reg:SI 5 r5 [182])
        (lshiftrt:SI (reg:SI 5 r5 [206])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 69 68 70 7 arch/arm/vfp/vfpdouble.c:1146 (set (reg/v:SI 5 r5 [orig:143 dest ] [143])
        (ior:SI (lshiftrt:SI (reg:SI 1 r1 [205])
                (const_int 18 [0x12]))
            (reg:SI 5 r5 [182]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 70 69 71 8 49 "" [1 uses])

(note 71 70 72 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 72 71 73 8 NOTE_INSN_DELETED)

(insn 73 72 183 8 arch/arm/vfp/vfpdouble.c:1151 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:151 D.5156 ] [151])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 183 73 180 8 (set (reg:SI 1 r1 [208])
        (and:SI (reg/v:SI 0 r0 [orig:155 inst ] [155])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (nil))

(insn 180 183 74 8 (set (reg:SI 0 r0 [207])
        (and:SI (reg/v:SI 0 r0 [orig:155 inst ] [155])
            (const_int 32 [0x20]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 74 180 75 8 arch/arm/vfp/vfpdouble.c:1151 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 83)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 75 74 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 77 75 79 9 NOTE_INSN_DELETED)

(insn 79 77 80 9 arch/arm/vfp/vfpdouble.c:1152 (set (reg:SI 4 r4 [187])
        (ashift:SI (reg:SI 1 r1 [208])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn 80 79 193 9 arch/arm/vfp/vfpdouble.c:1152 (set (reg/v:SI 4 r4 [orig:141 dm ] [141])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [207])
                (const_int 5 [0x5]))
            (reg:SI 4 r4 [187]))) 270 {*arith_shiftsi} (nil))

(jump_insn 193 80 194 9 (set (pc)
        (label_ref 89)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 194 193 83)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  8 [50.0%] 
(code_label 83 194 84 10 50 "" [1 uses])

(note 84 83 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 86 84 88 10 NOTE_INSN_DELETED)

(insn 88 86 89 10 arch/arm/vfp/vfpdouble.c:1154 (set (reg/v:SI 4 r4 [orig:141 dm ] [141])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [207])
                (const_int 1 [0x1]))
            (reg:SI 1 r1 [208]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 89 88 90 11 51 "" [1 uses])

(note 90 89 91 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 91 90 92 11 NOTE_INSN_DELETED)

(insn 92 91 93 11 arch/arm/vfp/vfpdouble.c:1160 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:151 D.5156 ] [151])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 93 92 94 11 arch/arm/vfp/vfpdouble.c:1160 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  14 [50.0%] 
;; Succ edge  12 [50.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [50.0%]  (fallthru)
(note 94 93 95 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 95 94 96 12 NOTE_INSN_DELETED)

(insn 96 95 97 12 arch/arm/vfp/vfpdouble.c:1160 discrim 2 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 5 r5 [orig:143 dest ] [143])
                        (const_int 12 [0xc]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 97 96 98 12 arch/arm/vfp/vfpdouble.c:1160 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 14 13)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  14 [50.0%] 
;; Succ edge  13 [50.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 12 [ip]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 98 97 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 99 98 195 13 arch/arm/vfp/vfpdouble.c:1163 (set (reg/v:SI 12 ip [orig:139 veclen ] [139])
        (and:SI (reg/v:SI 9 r9 [orig:156 fpscr ] [156])
            (const_int 458752 [0x70000]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 195 99 196 13 (set (pc)
        (label_ref 105)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 15)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  15 [100.0%] 

(barrier 196 195 102)

;; Start of basic block ( 12 11) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 12 [ip]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip]
;; live  kill	

;; Pred edge  12 [50.0%] 
;; Pred edge  11 [50.0%] 
(code_label 102 196 103 14 52 "" [2 uses])

(note 103 102 104 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 104 103 105 14 arch/arm/vfp/vfpdouble.c:1161 (set (reg/v:SI 12 ip [orig:139 veclen ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 14 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru)
;; Pred edge  13 [100.0%] 
(code_label 105 104 106 15 53 "" [1 uses])

(note 106 105 107 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 107 106 108 15 arch/arm/vfp/vfpdouble.c:1168 (set (reg/f:SI 3 r3 [orig:193 <variable>.fn ] [193])
        (mem/s/f/j:SI (reg/v/f:SI 7 r7 [orig:137 fop ] [137]) [0 <variable>.fn+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (reg/v/f:SI 7 r7 [orig:137 fop ] [137]) [0 <variable>.fn+0 S4 A32])
        (nil)))

(insn 108 107 109 15 arch/arm/vfp/vfpdouble.c:1168 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:193 <variable>.fn ] [193])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 109 108 110 15 arch/arm/vfp/vfpdouble.c:1168 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8986 [0x231a])
        (nil)))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  16 [10.1%]  (fallthru)
;; Succ edge  17 [89.9%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 10 [sl]
;; live  kill	

;; Pred edge  15 [10.1%]  (fallthru)
(note 110 109 111 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 197 16 arch/arm/vfp/vfpdouble.c:1203 (set (reg/v:SI 10 sl [orig:144 exceptions ] [144])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(jump_insn 197 111 198 16 (set (pc)
        (label_ref 154)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 22)
;; lr  out 	 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  22 [100.0%] 

(barrier 198 197 114)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 8 [r8] 10 [sl]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 6 [r6] 8 [r8] 10 [sl]
;; live  kill	

;; Pred edge  15 [89.9%] 
(code_label 114 198 115 17 54 "" [1 uses])

(note 115 114 116 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 116 115 117 17 NOTE_INSN_DELETED)

(insn 117 116 119 17 arch/arm/vfp/vfpdouble.c:1130 (set (reg:SI 6 r6 [195])
        (lshiftrt:SI (reg:SI 6 r6 [orig:153 D.5133 ] [153])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 119 117 118 17 arch/arm/vfp/vfpdouble.c:1130 (set (reg/v:SI 8 r8 [orig:140 vecitr ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 118 119 120 17 arch/arm/vfp/vfpdouble.c:1130 (set (reg/v:SI 6 r6 [orig:142 dn ] [142])
        (ior:SI (lshiftrt:SI (reg:SI 2 r2 [orig:152 D.5135 ] [152])
                (const_int 3 [0x3]))
            (reg:SI 6 r6 [195]))) 270 {*arith_shiftsi} (nil))

(insn 120 118 151 17 arch/arm/vfp/vfpdouble.c:1130 (set (reg/v:SI 10 sl [orig:144 exceptions ] [144])
        (reg/v:SI 8 r8 [orig:140 vecitr ] [140])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 17 -> ( 18)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 17 20) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 8 [r8] 10 [sl] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  20 [90.1%]  (dfs_back)
(code_label 151 120 121 18 57 "" [1 uses])

(note 121 151 122 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 122 121 128 18 NOTE_INSN_DELETED)

(note 128 122 131 18 NOTE_INSN_DELETED)

(note 131 128 136 18 NOTE_INSN_DELETED)

(note 136 131 140 18 NOTE_INSN_DELETED)

(note 140 136 123 18 NOTE_INSN_DELETED)

(insn 123 140 124 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:143 dest ] [143])) 167 {*arm_movsi_insn} (nil))

(insn 124 123 125 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:142 dn ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 125 124 126 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:141 dm ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 126 125 221 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg:SI 3 r3)
        (reg/v:SI 9 r9 [orig:156 fpscr ] [156])) 167 {*arm_movsi_insn} (nil))

(insn 221 126 127 18 arch/arm/vfp/vfpdouble.c:1185 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (nil))

(call_insn 127 221 145 18 arch/arm/vfp/vfpdouble.c:1185 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (reg/v/f:SI 7 r7 [orig:137 fop ] [137]) [0 <variable>.fn+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 145 127 150 18 arch/arm/vfp/vfpdouble.c:1198 (set (reg:SI 1 r1 [202])
        (plus:SI (reg/v:SI 4 r4 [orig:141 dm ] [141])
            (reg/v:SI 11 fp [orig:138 vecstride ] [138]))) 4 {*arm_addsi3} (nil))

(insn 150 145 146 18 arch/arm/vfp/vfpdouble.c:1171 (set (reg/v:SI 8 r8 [orig:140 vecitr ] [140])
        (plus:SI (reg/v:SI 8 r8 [orig:140 vecitr ] [140])
            (const_int 65536 [0x10000]))) 4 {*arm_addsi3} (nil))

(insn 146 150 223 18 arch/arm/vfp/vfpdouble.c:1198 (set (reg:SI 1 r1)
        (and:SI (reg:SI 1 r1 [202])
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (nil))

(insn 223 146 132 18 arch/arm/vfp/vfpdouble.c:1198 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-12 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 132 223 137 18 arch/arm/vfp/vfpdouble.c:1195 (set (reg:SI 3 r3 [198])
        (plus:SI (reg/v:SI 5 r5 [orig:143 dest ] [143])
            (reg/v:SI 11 fp [orig:138 vecstride ] [138]))) 4 {*arm_addsi3} (nil))

(insn 137 132 141 18 arch/arm/vfp/vfpdouble.c:1196 (set (reg:SI 2 r2 [200])
        (plus:SI (reg/v:SI 6 r6 [orig:142 dn ] [142])
            (reg/v:SI 11 fp [orig:138 vecstride ] [138]))) 4 {*arm_addsi3} (nil))

(insn 141 137 224 18 arch/arm/vfp/vfpdouble.c:1197 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 4 r4 [orig:141 dm ] [141])
                        (const_int 12 [0xc]))
                    (const_int 0 [0x0])))
            (set (reg:SI 1 r1)
                (and:SI (reg/v:SI 4 r4 [orig:141 dm ] [141])
                    (const_int 12 [0xc])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 224 141 133 18 arch/arm/vfp/vfpdouble.c:1197 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-4 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 133 224 138 18 arch/arm/vfp/vfpdouble.c:1195 (set (reg:SI 3 r3 [orig:150 D.5203 ] [150])
        (and:SI (reg:SI 3 r3 [198])
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (nil))

(insn 138 133 130 18 arch/arm/vfp/vfpdouble.c:1196 (set (reg:SI 2 r2 [orig:148 D.5207 ] [148])
        (and:SI (reg:SI 2 r2 [200])
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (nil))

(insn 130 138 135 18 arch/arm/vfp/vfpdouble.c:1195 (set (reg:SI 5 r5 [orig:135 temp.297 ] [135])
        (and:SI (reg/v:SI 5 r5 [orig:143 dest ] [143])
            (const_int 12 [0xc]))) 67 {*arm_andsi3_insn} (nil))

(insn 135 130 134 18 arch/arm/vfp/vfpdouble.c:1196 (set (reg:SI 6 r6 [orig:149 D.5204 ] [149])
        (and:SI (reg/v:SI 6 r6 [orig:142 dn ] [142])
            (const_int 12 [0xc]))) 67 {*arm_andsi3_insn} (nil))

(insn 134 135 139 18 arch/arm/vfp/vfpdouble.c:1195 (set (reg/v:SI 5 r5 [orig:143 dest ] [143])
        (plus:SI (reg:SI 3 r3 [orig:150 D.5203 ] [150])
            (reg:SI 5 r5 [orig:135 temp.297 ] [135]))) 4 {*arm_addsi3} (nil))

(insn 139 134 129 18 arch/arm/vfp/vfpdouble.c:1196 (set (reg/v:SI 6 r6 [orig:142 dn ] [142])
        (plus:SI (reg:SI 2 r2 [orig:148 D.5207 ] [148])
            (reg:SI 6 r6 [orig:149 D.5204 ] [149]))) 4 {*arm_addsi3} (nil))

(insn 129 139 222 18 arch/arm/vfp/vfpdouble.c:1189 (set (reg/v:SI 10 sl [orig:144 exceptions ] [144])
        (ior:SI (reg/v:SI 10 sl [orig:144 exceptions ] [144])
            (reg:SI 0 r0))) 89 {*arm_iorsi3} (nil))

(insn 222 129 142 18 arch/arm/vfp/vfpdouble.c:1197 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 142 222 143 18 arch/arm/vfp/vfpdouble.c:1197 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 148)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  20 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4]
;; live  in  	 1 [r1] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4]
;; live  kill	

;; Pred edge  18 [50.0%]  (fallthru)
(note 143 142 144 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 144 143 225 19 NOTE_INSN_DELETED)

(insn 225 144 147 19 arch/arm/vfp/vfpdouble.c:1198 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-12 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 147 225 148 19 arch/arm/vfp/vfpdouble.c:1198 (set (reg/v:SI 4 r4 [orig:141 dm ] [141])
        (plus:SI (reg:SI 2 r2)
            (reg:SI 1 r1))) 4 {*arm_addsi3} (nil))
;; End of basic block 19 -> ( 20)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 18 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [50.0%] 
;; Pred edge  19 [100.0%]  (fallthru)
(code_label 148 147 149 20 56 "" [1 uses])

(note 149 148 152 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 152 149 153 20 arch/arm/vfp/vfpdouble.c:1171 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:140 vecitr ] [140])
            (reg/v:SI 12 ip [orig:139 veclen ] [139]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 153 152 154 20 arch/arm/vfp/vfpdouble.c:1171 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 151)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9011 [0x2333])
        (nil)))
;; End of basic block 20 -> ( 18 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  18 [90.1%]  (dfs_back)
;; Succ edge  22 [9.9%]  (fallthru,loop_exit)

;; Start of basic block ( 20 16) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  20 [9.9%]  (fallthru,loop_exit)
;; Pred edge  16 [100.0%] 
(code_label 154 153 155 22 55 "" [1 uses])

(note 155 154 160 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 160 155 166 22 arch/arm/vfp/vfpdouble.c:1204 (set (reg/i:SI 0 r0)
        (reg/v:SI 10 sl [orig:144 exceptions ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 166 160 203 22 arch/arm/vfp/vfpdouble.c:1204 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 22 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 203 166 218 NOTE_INSN_DELETED)

(note 218 203 0 NOTE_INSN_DELETED)


;; Function vfp_compare (vfp_compare)[0:159]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 284.
verify found no changes in insn with uid = 284.
deleting insn with uid = 61.
scanning new insn with uid = 285.
verify found no changes in insn with uid = 285.
deleting insn with uid = 59.
scanning new insn with uid = 286.
verify found no changes in insn with uid = 286.
deleting insn with uid = 17.
scanning new insn with uid = 287.
verify found no changes in insn with uid = 287.
deleting insn with uid = 15.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 39 n_edges 62 count 75 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 39 n_edges 62 count 76 (  1.9)

Pass 0 for finding allocno costs

    a1 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a1(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:150000
  a6(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a22(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a28(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000


Pass 1 for finding allocno costs

    r184: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a1(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:150000
  a6(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a22(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a28(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000

   Insn 221(l0): point = 0
   Insn 215(l0): point = 2
   Insn 208(l0): point = 5
   Insn 279(l0): point = 8
   Insn 203(l0): point = 10
   Insn 277(l0): point = 13
   Insn 198(l0): point = 15
   Insn 275(l0): point = 18
   Insn 192(l0): point = 21
   Insn 191(l0): point = 23
   Insn 189(l0): point = 25
   Insn 186(l0): point = 28
   Insn 179(l0): point = 31
   Insn 178(l0): point = 33
   Insn 177(l0): point = 36
   Insn 175(l0): point = 39
   Insn 173(l0): point = 41
   Insn 174(l0): point = 43
   Insn 170(l0): point = 46
   Insn 169(l0): point = 48
   Insn 168(l0): point = 50
   Insn 167(l0): point = 52
   Insn 164(l0): point = 55
   Insn 157(l0): point = 58
   Insn 156(l0): point = 60
   Insn 155(l0): point = 63
   Insn 272(l0): point = 66
   Insn 122(l0): point = 69
   Insn 121(l0): point = 71
   Insn 269(l0): point = 74
   Insn 153(l0): point = 77
   Insn 151(l0): point = 79
   Insn 149(l0): point = 81
   Insn 152(l0): point = 83
   Insn 112(l0): point = 86
   Insn 111(l0): point = 88
   Insn 110(l0): point = 90
   Insn 108(l0): point = 96
   Insn 107(l0): point = 98
   Insn 104(l0): point = 100
   Insn 103(l0): point = 105
   Insn 102(l0): point = 107
   Insn 97(l0): point = 113
   Insn 96(l0): point = 115
   Insn 95(l0): point = 118
   Insn 94(l0): point = 120
   Insn 92(l0): point = 123
   Insn 91(l0): point = 125
   Insn 265(l0): point = 128
   Insn 86(l0): point = 130
   Insn 83(l0): point = 133
   Insn 82(l0): point = 135
   Insn 79(l0): point = 137
   Insn 78(l0): point = 142
   Insn 76(l0): point = 145
   Insn 74(l0): point = 147
   Insn 75(l0): point = 149
   Insn 72(l0): point = 152
   Insn 71(l0): point = 154
   Insn 68(l0): point = 156
   Insn 67(l0): point = 161
   Insn 65(l0): point = 164
   Insn 64(l0): point = 166
   Insn 63(l0): point = 169
   Insn 62(l0): point = 171
   Insn 284(l0): point = 173
   Insn 60(l0): point = 175
   Insn 285(l0): point = 180
   Insn 58(l0): point = 182
   Insn 57(l0): point = 184
   Insn 260(l0): point = 186
   Insn 55(l0): point = 188
   Insn 54(l0): point = 190
   Insn 53(l0): point = 192
   Insn 50(l0): point = 195
   Insn 263(l0): point = 198
   Insn 45(l0): point = 200
   Insn 261(l0): point = 203
   Insn 40(l0): point = 205
   Insn 38(l0): point = 208
   Insn 37(l0): point = 210
   Insn 34(l0): point = 212
   Insn 33(l0): point = 217
   Insn 31(l0): point = 220
   Insn 30(l0): point = 222
   Insn 28(l0): point = 225
   Insn 27(l0): point = 227
   Insn 24(l0): point = 229
   Insn 23(l0): point = 234
   Insn 21(l0): point = 237
   Insn 20(l0): point = 239
   Insn 19(l0): point = 242
   Insn 18(l0): point = 244
   Insn 286(l0): point = 246
   Insn 16(l0): point = 248
   Insn 287(l0): point = 253
   Insn 14(l0): point = 255
   Insn 13(l0): point = 257
   Insn 259(l0): point = 259
   Insn 11(l0): point = 261
   Insn 10(l0): point = 263
   Insn 3(l0): point = 265
   Insn 9(l0): point = 267
   Insn 2(l0): point = 269
 a0(r133): [203..205] [198..200] [74..195] [18..65] [13..15] [8..10] [3..5]
 a1(r184): [24..25]
 a2(r180): [31..41] [26..28]
 a3(r136): [74..81] [26..65]
 a4(r134): [152..261] [74..127] [34..65]
 a5(r137): [138..188] [72..127] [34..65]
 a6(r179): [42..50]
 a7(r178): [51..52]
 a8(r174): [74..79] [58..65] [53..55]
 a9(r170): [93..93] [89..91]
 a10(r167): [103..103] [99..101]
 a11(r168): [101..105]
 a12(r166): [110..110] [101..108]
 a13(r163): [140..140] [136..138]
 a14(r164): [138..142]
 a15(r141): [150..265]
 a16(r160): [159..159] [155..157]
 a17(r161): [157..161]
 a18(r157): [178..178] [167..176]
 a19(r159): [172..173]
 a20(r158): [176..180]
 a21(r156): [176..186]
 a22(r140): [193..269]
 a23(r152): [215..215] [211..213]
 a24(r153): [213..217]
 a25(r149): [232..232] [228..230]
 a26(r150): [230..234]
 a27(r146): [251..251] [240..249]
 a28(r148): [245..246]
 a29(r147): [249..253]
 a30(r145): [249..259]
Compressing live ranges: from 272 to 78 - 28%
Ranges after the compression:
 a0(r133): [58..59] [56..57] [23..55] [6..21] [4..5] [2..3] [0..1]
 a1(r184): [7..8]
 a2(r180): [11..13] [9..10]
 a3(r136): [23..25] [9..21]
 a4(r134): [41..75] [23..35] [12..21]
 a5(r137): [37..53] [22..35] [12..21]
 a6(r179): [14..15]
 a7(r178): [16..17]
 a8(r174): [23..24] [20..21] [18..19]
 a9(r170): [28..28] [26..27]
 a10(r167): [31..31] [29..30]
 a11(r168): [30..32]
 a12(r166): [34..34] [30..33]
 a13(r163): [38..38] [36..37]
 a14(r164): [37..39]
 a15(r141): [40..76]
 a16(r160): [44..44] [42..43]
 a17(r161): [43..45]
 a18(r157): [50..50] [46..49]
 a19(r159): [47..48]
 a20(r158): [49..51]
 a21(r156): [49..52]
 a22(r140): [54..77]
 a23(r152): [62..62] [60..61]
 a24(r153): [61..63]
 a25(r149): [66..66] [64..65]
 a26(r150): [65..67]
 a27(r146): [72..72] [68..71]
 a28(r148): [69..70]
 a29(r147): [71..73]
 a30(r145): [71..74]
+++Allocating 248 bytes for conflict table (uncompressed size 248)
;; a0(r133,l0) conflicts: a1(r184,l0) a2(r180,l0) a3(r136,l0) a5(r137,l0) a4(r134,l0) a6(r179,l0) a7(r178,l0) a8(r174,l0) a9(r170,l0) a10(r167,l0) a11(r168,l0) a12(r166,l0) a13(r163,l0) a14(r164,l0) a15(r141,l0) a16(r160,l0) a17(r161,l0) a18(r157,l0) a19(r159,l0) a20(r158,l0) a21(r156,l0) a22(r140,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r184,l0) conflicts: a0(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r180,l0) conflicts: a0(r133,l0) a3(r136,l0) a5(r137,l0) a4(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r136,l0) conflicts: a0(r133,l0) a2(r180,l0) a5(r137,l0) a4(r134,l0) a6(r179,l0) a7(r178,l0) a8(r174,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r134,l0) conflicts: a0(r133,l0) a2(r180,l0) a3(r136,l0) a5(r137,l0) a6(r179,l0) a7(r178,l0) a8(r174,l0) a9(r170,l0) a10(r167,l0) a11(r168,l0) a12(r166,l0) a15(r141,l0) a16(r160,l0) a17(r161,l0) a18(r157,l0) a19(r159,l0) a20(r158,l0) a21(r156,l0) a22(r140,l0) a23(r152,l0) a24(r153,l0) a25(r149,l0) a26(r150,l0) a27(r146,l0) a28(r148,l0) a29(r147,l0) a30(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r137,l0) conflicts: a0(r133,l0) a2(r180,l0) a3(r136,l0) a4(r134,l0) a6(r179,l0) a7(r178,l0) a8(r174,l0) a9(r170,l0) a10(r167,l0) a11(r168,l0) a12(r166,l0) a13(r163,l0) a14(r164,l0) a15(r141,l0) a16(r160,l0) a17(r161,l0) a18(r157,l0) a19(r159,l0) a20(r158,l0) a21(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r179,l0) conflicts: a0(r133,l0) a3(r136,l0) a5(r137,l0) a4(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r178,l0) conflicts: a0(r133,l0) a3(r136,l0) a5(r137,l0) a4(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r174,l0) conflicts: a0(r133,l0) a3(r136,l0) a5(r137,l0) a4(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r170,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r167,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a11(r168,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r168,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a10(r167,l0) a12(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r166,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a10(r167,l0) a11(r168,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r163,l0) conflicts: a0(r133,l0) a5(r137,l0) a14(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r164,l0) conflicts: a0(r133,l0) a5(r137,l0) a13(r163,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r141,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a16(r160,l0) a17(r161,l0) a18(r157,l0) a19(r159,l0) a20(r158,l0) a21(r156,l0) a22(r140,l0) a23(r152,l0) a24(r153,l0) a25(r149,l0) a26(r150,l0) a27(r146,l0) a28(r148,l0) a29(r147,l0) a30(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a16(r160,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a15(r141,l0) a17(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r161,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a15(r141,l0) a16(r160,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r157,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a15(r141,l0) a19(r159,l0) a20(r158,l0) a21(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r159,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a15(r141,l0) a18(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r158,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a15(r141,l0) a18(r157,l0) a21(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r156,l0) conflicts: a0(r133,l0) a5(r137,l0) a4(r134,l0) a15(r141,l0) a18(r157,l0) a20(r158,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r140,l0) conflicts: a0(r133,l0) a4(r134,l0) a15(r141,l0) a23(r152,l0) a24(r153,l0) a25(r149,l0) a26(r150,l0) a27(r146,l0) a28(r148,l0) a29(r147,l0) a30(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a23(r152,l0) conflicts: a4(r134,l0) a15(r141,l0) a22(r140,l0) a24(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r153,l0) conflicts: a4(r134,l0) a15(r141,l0) a22(r140,l0) a23(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r149,l0) conflicts: a4(r134,l0) a15(r141,l0) a22(r140,l0) a26(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r150,l0) conflicts: a4(r134,l0) a15(r141,l0) a22(r140,l0) a25(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r146,l0) conflicts: a4(r134,l0) a15(r141,l0) a22(r140,l0) a28(r148,l0) a29(r147,l0) a30(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r148,l0) conflicts: a4(r134,l0) a15(r141,l0) a22(r140,l0) a27(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r147,l0) conflicts: a4(r134,l0) a15(r141,l0) a22(r140,l0) a27(r146,l0) a30(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r145,l0) conflicts: a4(r134,l0) a15(r141,l0) a22(r140,l0) a27(r146,l0) a29(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a1(r184)<->a3(r136)@125:shuffle
  cp1:a1(r184)<->a2(r180)@125:shuffle
  cp2:a2(r180)<->a6(r179)@1000:move
  cp3:a7(r178)<->a8(r174)@125:shuffle
  cp4:a6(r179)<->a7(r178)@125:shuffle
  regions=1, blocks=39, points=78
    allocnos=31, copies=5, conflicts=1, ranges=54

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r133 1r184 2r180 3r136 4r134 5r137 6r179 7r178 8r174 9r170 10r167 11r168 12r166 13r163 14r164 15r141 16r160 17r161 18r157 19r159 20r158 21r156 22r140 23r152 24r153 25r149 26r150 27r146 28r148 29r147 30r145
    modified regnos: 133 134 136 137 140 141 145 146 147 148 149 150 152 153 156 157 158 159 160 161 163 164 166 167 168 170 174 178 179 180 184
    border:
    Pressure: GENERAL_REGS=11
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 184 of GENERAL_REGS has 1 regs less
    Reg 180 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 179 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 174 of GENERAL_REGS has 1 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
      Pushing a29(r147,l0)
      Pushing a28(r148,l0)
      Pushing a26(r150,l0)
      Pushing a24(r153,l0)
      Pushing a23(r152,l0)
      Pushing a27(r146,l0)
      Pushing a25(r149,l0)
      Pushing a30(r145,l0)
      Pushing a20(r158,l0)
      Pushing a19(r159,l0)
      Pushing a17(r161,l0)
      Pushing a14(r164,l0)
      Pushing a13(r163,l0)
      Pushing a12(r166,l0)
      Pushing a11(r168,l0)
      Pushing a9(r170,l0)
      Pushing a7(r178,l0)
      Pushing a1(r184,l0)
      Pushing a18(r157,l0)
      Pushing a16(r160,l0)
      Pushing a10(r167,l0)
      Pushing a8(r174,l0)
      Pushing a6(r179,l0)
      Pushing a3(r136,l0)
      Pushing a2(r180,l0)
      Pushing a21(r156,l0)
      Pushing a5(r137,l0)
      Pushing a15(r141,l0)
      Pushing a0(r133,l0)
      Pushing a4(r134,l0)
      Pushing a22(r140,l0)
      Popping a22(r140,l0)  -- assign reg 4
      Popping a4(r134,l0)  -- assign reg 6
      Popping a0(r133,l0)  -- assign reg 5
      Popping a15(r141,l0)  -- assign reg 8
      Popping a5(r137,l0)  -- assign reg 0
      Popping a21(r156,l0)  -- assign reg 2
      Popping a2(r180,l0)  -- assign reg 3
      Popping a3(r136,l0)  -- assign reg 2
      Popping a6(r179,l0)  -- assign reg 3
      Popping a8(r174,l0)  -- assign reg 3
      Popping a10(r167,l0)  -- assign reg 2
      Popping a16(r160,l0)  -- assign reg 2
      Popping a18(r157,l0)  -- assign reg 10
      Popping a1(r184,l0)  -- assign reg 3
      Popping a7(r178,l0)  -- assign reg 3
      Popping a9(r170,l0)  -- assign reg 2
      Popping a11(r168,l0)  -- assign reg 8
      Popping a12(r166,l0)  -- assign reg 10
      Popping a13(r163,l0)  -- assign reg 2
      Popping a14(r164,l0)  -- assign reg 6
      Popping a17(r161,l0)  -- assign reg 10
      Popping a19(r159,l0)  -- assign reg 3
      Popping a20(r158,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a30(r145,l0)  -- assign reg 2
      Popping a25(r149,l0)  -- assign reg 2
      Popping a27(r146,l0)  -- assign reg 0
      Popping a23(r152,l0)  -- assign reg 2
      Popping a24(r153,l0)  -- assign reg 0
      Popping a26(r150,l0)  -- assign reg 0
      Popping a28(r148,l0)  -- assign reg 3
      Popping a29(r147,l0)  -- assign reg 10
Disposition:
    0:r133 l0     5    4:r134 l0     6    3:r136 l0     2    5:r137 l0     0
   22:r140 l0     4   15:r141 l0     8   30:r145 l0     2   27:r146 l0     0
   29:r147 l0    10   28:r148 l0     3   25:r149 l0     2   26:r150 l0     0
   23:r152 l0     2   24:r153 l0     0   21:r156 l0     2   18:r157 l0    10
   20:r158 l0   mem   19:r159 l0     3   16:r160 l0     2   17:r161 l0    10
   13:r163 l0     2   14:r164 l0     6   12:r166 l0    10   10:r167 l0     2
   11:r168 l0     8    9:r170 l0     2    8:r174 l0     3    7:r178 l0     3
    6:r179 l0     3    2:r180 l0     3    1:r184 l0     3
New iteration of spill/restore move
+++Costs: overall 18000, reg -2000, mem 20000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 13, dead_or_set: 0, 140
insn=9, live_throughout: 1, 13, 140, dead_or_set: 0, 2
insn=3, live_throughout: 0, 13, 140, dead_or_set: 1, 141
insn=10, live_throughout: 13, 140, 141, dead_or_set: 0, 1, 14
insn=11, live_throughout: 13, 140, 141, dead_or_set: 0, 1, 134
insn=259, live_throughout: 13, 134, 140, 141, dead_or_set: 145
insn=13, live_throughout: 13, 134, 140, 141, dead_or_set: 145
insn=14, live_throughout: 13, 134, 140, 141, 145, dead_or_set: 145
insn=287, live_throughout: 13, 134, 140, 141, 145, dead_or_set: 147
insn=16, live_throughout: 13, 134, 140, 141, dead_or_set: 145, 146, 147
insn=286, live_throughout: 13, 134, 140, 141, 146, dead_or_set: 148
insn=18, live_throughout: 13, 134, 140, 141, 146, dead_or_set: 148
insn=19, live_throughout: 13, 134, 140, 141, 146, dead_or_set: 
insn=20, live_throughout: 13, 134, 140, 141, dead_or_set: 146
insn=21, live_throughout: 13, 134, 140, 141, dead_or_set: 
insn=23, live_throughout: 13, 134, 140, 141, dead_or_set: 150
insn=24, live_throughout: 13, 134, 140, 141, dead_or_set: 149, 150
insn=27, live_throughout: 13, 134, 140, 141, dead_or_set: 149
insn=28, live_throughout: 13, 134, 140, 141, dead_or_set: 
insn=30, live_throughout: 13, 134, 140, 141, dead_or_set: 
insn=31, live_throughout: 13, 134, 140, 141, dead_or_set: 
insn=33, live_throughout: 13, 134, 140, 141, dead_or_set: 153
insn=34, live_throughout: 13, 134, 140, 141, dead_or_set: 152, 153
insn=37, live_throughout: 13, 134, 140, 141, dead_or_set: 152
insn=38, live_throughout: 13, 134, 140, 141, dead_or_set: 
insn=40, live_throughout: 13, 134, 140, 141, dead_or_set: 133
insn=261, live_throughout: 13, 133, 134, 140, 141, dead_or_set: 
insn=43, live_throughout: 13, 134, 140, 141, dead_or_set: 
insn=45, live_throughout: 13, 134, 140, 141, dead_or_set: 133
insn=263, live_throughout: 13, 133, 134, 140, 141, dead_or_set: 
insn=48, live_throughout: 13, 134, 140, 141, dead_or_set: 
insn=50, live_throughout: 13, 134, 140, 141, dead_or_set: 133
insn=51, live_throughout: 13, 133, 134, 140, 141, dead_or_set: 
insn=53, live_throughout: 13, 133, 134, 141, dead_or_set: 0, 140
insn=54, live_throughout: 13, 133, 134, 141, dead_or_set: 0, 1, 14
insn=55, live_throughout: 13, 14, 133, 134, 141, dead_or_set: 0, 1, 137
insn=260, live_throughout: 13, 14, 133, 134, 137, 141, dead_or_set: 156
insn=57, live_throughout: 13, 14, 133, 134, 137, 141, dead_or_set: 156
insn=58, live_throughout: 13, 14, 133, 134, 137, 141, 156, dead_or_set: 156
insn=285, live_throughout: 13, 14, 133, 134, 137, 141, 156, dead_or_set: 158
insn=60, live_throughout: 13, 14, 133, 134, 137, 141, dead_or_set: 156, 157, 158
insn=284, live_throughout: 13, 14, 133, 134, 137, 141, 157, dead_or_set: 159
insn=62, live_throughout: 13, 14, 133, 134, 137, 141, 157, dead_or_set: 159
insn=63, live_throughout: 13, 14, 133, 134, 137, 141, 157, dead_or_set: 
insn=64, live_throughout: 13, 14, 133, 134, 137, 141, dead_or_set: 157
insn=65, live_throughout: 13, 14, 133, 134, 137, 141, dead_or_set: 
insn=67, live_throughout: 13, 14, 133, 134, 137, 141, dead_or_set: 161
insn=68, live_throughout: 13, 14, 133, 134, 137, 141, dead_or_set: 160, 161
insn=71, live_throughout: 13, 14, 133, 134, 137, 141, dead_or_set: 160
insn=72, live_throughout: 13, 14, 133, 134, 137, 141, dead_or_set: 
insn=75, live_throughout: 13, 14, 133, 137, dead_or_set: 141
insn=74, live_throughout: 13, 14, 24, 137, dead_or_set: 133
insn=76, live_throughout: 13, 14, 133, 137, dead_or_set: 
insn=78, live_throughout: 13, 14, 133, 137, dead_or_set: 164
insn=79, live_throughout: 13, 14, 133, dead_or_set: 137, 163, 164
insn=82, live_throughout: 13, 14, 133, dead_or_set: 163
insn=83, live_throughout: 13, 14, 133, dead_or_set: 
insn=84, live_throughout: 13, 14, 133, dead_or_set: 
insn=86, live_throughout: 13, 14, dead_or_set: 133
insn=265, live_throughout: 13, 14, 133, dead_or_set: 
insn=89, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=91, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=92, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=94, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=95, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=96, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=97, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=255, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=102, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 166
insn=103, live_throughout: 13, 14, 133, 134, 137, 166, dead_or_set: 168
insn=104, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 166, 167, 168
insn=107, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 167
insn=108, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=110, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 170
insn=111, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 170
insn=112, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=152, live_throughout: 13, 14, 133, 134, 137, dead_or_set: 
insn=149, live_throughout: 13, 14, 24, 133, 134, 137, dead_or_set: 136
insn=151, live_throughout: 13, 14, 24, 133, 134, 136, 137, dead_or_set: 174
insn=153, live_throughout: 13, 14, 24, 133, 134, 136, 137, 174, dead_or_set: 
insn=269, live_throughout: 13, 14, 24, 133, 134, 136, 137, 174, dead_or_set: 
insn=256, live_throughout: 13, 14, 137, dead_or_set: 
insn=121, live_throughout: 13, 14, dead_or_set: 137
insn=122, live_throughout: 13, 14, dead_or_set: 
insn=272, live_throughout: 13, 14, dead_or_set: 
insn=268, live_throughout: 13, 14, 24, 133, 134, 136, 137, 174, dead_or_set: 
insn=155, live_throughout: 13, 14, 133, 134, 136, 137, 174, dead_or_set: 
insn=156, live_throughout: 13, 14, 133, 134, 136, 137, 174, dead_or_set: 
insn=157, live_throughout: 13, 14, 133, 134, 136, 137, 174, dead_or_set: 
insn=162, live_throughout: 13, 14, 133, 134, 136, 137, dead_or_set: 
insn=164, live_throughout: 13, 14, 133, 134, 136, 137, dead_or_set: 174
insn=165, live_throughout: 13, 14, 133, 134, 136, 137, 174, dead_or_set: 
insn=167, live_throughout: 13, 14, 133, 134, 136, 137, dead_or_set: 174, 178
insn=168, live_throughout: 13, 14, 133, 134, 136, 137, dead_or_set: 178, 179
insn=169, live_throughout: 13, 14, 133, 134, 136, 137, 179, dead_or_set: 
insn=170, live_throughout: 13, 14, 133, 134, 136, 137, 179, dead_or_set: 
insn=174, live_throughout: 13, 14, 133, 134, 136, 137, 179, dead_or_set: 
insn=173, live_throughout: 13, 14, 24, 133, 134, 136, 137, dead_or_set: 179, 180
insn=175, live_throughout: 13, 14, 24, 133, 134, 136, 137, 180, dead_or_set: 
insn=177, live_throughout: 13, 14, 133, 134, 136, 137, 180, dead_or_set: 
insn=178, live_throughout: 13, 14, 133, 136, 180, dead_or_set: 134, 137
insn=179, live_throughout: 13, 14, 133, 136, 180, dead_or_set: 
insn=184, live_throughout: 13, 14, 133, 136, dead_or_set: 
insn=186, live_throughout: 13, 14, 133, 136, dead_or_set: 180
insn=187, live_throughout: 13, 14, 133, 136, 180, dead_or_set: 
insn=189, live_throughout: 13, 14, 133, dead_or_set: 136, 180, 184
insn=191, live_throughout: 13, 14, 133, dead_or_set: 184
insn=192, live_throughout: 13, 14, 133, dead_or_set: 
insn=275, live_throughout: 13, 14, 133, dead_or_set: 
insn=196, live_throughout: 13, 14, dead_or_set: 
insn=198, live_throughout: 13, 14, dead_or_set: 133
insn=277, live_throughout: 13, 14, 133, dead_or_set: 
insn=201, live_throughout: 13, 14, dead_or_set: 
insn=203, live_throughout: 13, 14, dead_or_set: 133
insn=279, live_throughout: 13, 14, 133, dead_or_set: 
insn=206, live_throughout: 13, 14, dead_or_set: 
insn=208, live_throughout: 13, 14, dead_or_set: 133
insn=209, live_throughout: 13, 14, 133, dead_or_set: 
insn=215, live_throughout: 13, 14, dead_or_set: 0, 133
insn=221, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 147: (insn_list:REG_DEP_TRUE 287 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 286 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 23 (nil))
init_insns for 153: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 158: (insn_list:REG_DEP_TRUE 285 (nil))
init_insns for 159: (insn_list:REG_DEP_TRUE 284 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 67 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 78 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 103 (nil))
changing reg in insn 208
changing reg in insn 203
changing reg in insn 198
changing reg in insn 86
changing reg in insn 74
changing reg in insn 50
changing reg in insn 45
changing reg in insn 40
changing reg in insn 215
changing reg in insn 91
changing reg in insn 86
changing reg in insn 74
changing reg in insn 11
changing reg in insn 110
changing reg in insn 102
changing reg in insn 34
changing reg in insn 24
changing reg in insn 34
changing reg in insn 24
changing reg in insn 149
changing reg in insn 189
changing reg in insn 167
changing reg in insn 55
changing reg in insn 110
changing reg in insn 102
changing reg in insn 79
changing reg in insn 68
changing reg in insn 79
changing reg in insn 68
changing reg in insn 2
changing reg in insn 53
changing reg in insn 3
changing reg in insn 75
changing reg in insn 30
changing reg in insn 259
changing reg in insn 16
changing reg in insn 14
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 287
changing reg in insn 16
changing reg in insn 286
changing reg in insn 18
changing reg in insn 24
changing reg in insn 23
changing reg in insn 24
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 260
changing reg in insn 58
changing reg in insn 57
changing reg in insn 60
changing reg in insn 60
changing reg in insn 60
changing reg in insn 284
changing reg in insn 62
changing reg in insn 68
changing reg in insn 67
changing reg in insn 68
changing reg in insn 79
changing reg in insn 78
changing reg in insn 79
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 104
changing reg in insn 103
changing reg in insn 104
changing reg in insn 110
changing reg in insn 164
changing reg in insn 151
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 186
changing reg in insn 173
changing reg in insn 191
Spilling for insn 27.
Using reg 1 for reload 0
Spilling for insn 60.
Using reg 8 for reload 0
Spilling for insn 71.
Using reg 12 for reload 0
Spilling for insn 107.
Using reg 12 for reload 0
      Spill 141(a15), cost=30000
      Spilled regs 141
        Try assign 158(a20), cost=20000
changing reg in insn 3
changing reg in insn 30
changing reg in insn 75
      Assigning 141(freq=3000) a new slot 0
 Register 141 now on stack.

Spilling for insn 3.
Spilling for insn 27.
Using reg 1 for reload 0
Spilling for insn 30.
Using reg 3 for reload 0
Spilling for insn 60.
Using reg 8 for reload 0
Spilling for insn 71.
Using reg 12 for reload 0
Spilling for insn 75.
Using reg 3 for reload 0
Spilling for insn 107.
Using reg 12 for reload 0
deleting insn with uid = 285.

Reloads for insn # 3
Reload 0: reload_out (SI) = (reg/v:SI 141 [ signal_on_qnan ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 141 [ signal_on_qnan ])

Reloads for insn # 27
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 30
Reload 0: reload_in (SI) = (reg/v:SI 141 [ signal_on_qnan ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 0)
	reload_in_reg: (reg/v:SI 141 [ signal_on_qnan ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 60
Reload 0: reload_in (DI) = (const_int 2047 [0x7ff])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 158)
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 71
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 9 r9)

Reloads for insn # 75
Reload 0: reload_in (SI) = (reg/v:SI 141 [ signal_on_qnan ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 0)
	reload_in_reg: (reg/v:SI 141 [ signal_on_qnan ])
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 107
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 8 r8)
deleting insn with uid = 55.
+++Overall after reload 48000


try_optimize_cfg iteration 1

Forwarding edge 21->22 to 25 failed.
Forwarding edge 23->24 to 37 failed.
Forwarding edge 33->34 to 38 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 54.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 39 n_edges 62 count 75 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 39 n_edges 62 count 76 (  1.9)


vfp_compare

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,16u,3d} r1={7d,16u,2d} r2={14d,8u,2d} r3={23d,17u,2d} r4={1d,1u} r5={8d,4u} r6={2d,8u,2d} r7={2d,10u,2d} r8={3d,2u} r9={3d,2u} r10={4d,4u,2d} r11={4d,4u,1d} r12={4d,1u} r13={1d,43u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={24d,24u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 509{332d,161u,16e} in 105{103 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 6 9 2 arch/arm/vfp/vfpdouble.c:359 (set (reg/v:SI 4 r4 [orig:140 dd ] [140])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 3 2 arch/arm/vfp/vfpdouble.c:363 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 3 9 10 2 arch/arm/vfp/vfpdouble.c:359 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])
        (reg:SI 1 r1 [ signal_on_qnan ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 3 11 2 arch/arm/vfp/vfpdouble.c:363 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 259 2 arch/arm/vfp/vfpdouble.c:363 (set (reg/v:DI 6 r6 [orig:134 m ] [134])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 259 11 13 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:DI 2 r2 [145])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 13 259 14 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:SI 2 r2 [145])
        (ashiftrt:SI (reg:SI 7 r7 [ m+4 ])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 14 13 287 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:SI 3 r3 [+4 ])
        (ashiftrt:SI (reg:SI 7 r7 [ m+4 ])
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 287 14 16 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:DI 10 sl [147])
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 16 287 286 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:DI 0 r0 [146])
        (and:DI (reg:DI 2 r2 [145])
            (reg:DI 10 sl [147]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 2 r2 [145])
            (const_int 2047 [0x7ff]))
        (nil)))

(insn 286 16 18 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:SI 3 r3 [148])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 18 286 19 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [146])
            (reg:SI 3 r3 [148]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (subreg:SI (reg:DI 0 r0 [146]) 0)
            (const_int 2047 [0x7ff]))
        (nil)))

(jump_insn 19 18 223 2 arch/arm/vfp/vfpdouble.c:364 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [71.0%] 
;; Succ edge  3 [29.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [29.0%]  (fallthru)
(note 223 19 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 20 223 21 3 arch/arm/vfp/vfpdouble.c:364 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 3 arch/arm/vfp/vfpdouble.c:364 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  3 [50.0%]  (fallthru)
(note 22 21 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 25 22 26 4 NOTE_INSN_DELETED)

(note 26 25 23 4 NOTE_INSN_DELETED)

(insn 23 26 24 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (set (reg:DI 0 r0 [150])
        (const_int 4503599627370495 [0xfffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4503599627370495 [0xfffffffffffff])
        (nil)))

(insn 24 23 27 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (set (reg:DI 2 r2 [149])
        (and:DI (reg/v:DI 6 r6 [orig:134 m ] [134])
            (reg:DI 0 r0 [150]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 6 r6 [orig:134 m ] [134])
            (const_int 4503599627370495 [0xfffffffffffff]))
        (nil)))

(insn 27 24 28 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [149])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 28 27 29 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 29 28 289 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 289 29 30 5 arch/arm/vfp/vfpdouble.c:366 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 30 289 31 5 arch/arm/vfp/vfpdouble.c:366 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 31 30 32 5 arch/arm/vfp/vfpdouble.c:366 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 9 6)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 32 31 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 35 32 36 6 NOTE_INSN_DELETED)

(note 36 35 33 6 NOTE_INSN_DELETED)

(insn 33 36 34 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (reg:DI 0 r0 [153])
        (const_int 2251799813685248 [0x8000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2251799813685248 [0x8000000000000])
        (nil)))

(insn 34 33 37 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (reg:DI 2 r2 [152])
        (and:DI (reg/v:DI 6 r6 [orig:134 m ] [134])
            (reg:DI 0 r0 [153]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 6 r6 [orig:134 m ] [134])
            (const_int 2251799813685248 [0x8000000000000]))
        (nil)))

(insn 37 34 38 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 38 37 39 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 9 7)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 40 39 261 7 arch/arm/vfp/vfpdouble.c:365 (set (reg/v:SI 5 r5 [orig:133 ret ] [133])
        (const_int 805306368 [0x30000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 805306368 [0x30000000])
        (nil)))

(jump_insn 261 40 262 7 (set (pc)
        (label_ref 51)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 262 261 43)

;; Start of basic block ( 3 4 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [50.0%] 
;; Pred edge  2 [71.0%] 
(code_label 43 262 44 8 64 "" [3 uses])

(note 44 43 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 263 8 arch/arm/vfp/vfpdouble.c:361 (set (reg/v:SI 5 r5 [orig:133 ret ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 263 45 264 8 (set (pc)
        (label_ref 51)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 264 263 48)

;; Start of basic block ( 6 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  5 [50.0%] 
(code_label 48 264 49 9 65 "" [2 uses])

(note 49 48 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 51 9 arch/arm/vfp/vfpdouble.c:370 (set (reg/v:SI 5 r5 [orig:133 ret ] [133])
        (const_int 805306369 [0x30000001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 805306369 [0x30000001])
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 7 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  8 [100.0%] 
(code_label 51 50 52 10 66 "" [2 uses])

(note 52 51 53 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 10 arch/arm/vfp/vfpdouble.c:373 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:140 dd ] [140])) 167 {*arm_movsi_insn} (nil))

(call_insn 54 53 260 10 arch/arm/vfp/vfpdouble.c:373 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 260 54 57 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:DI 2 r2 [156])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 57 260 58 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:SI 2 r2 [156])
        (ashiftrt:SI (reg:SI 1 r1 [ D.4354+4 ])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 58 57 285 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:SI 3 r3 [+4 ])
        (ashiftrt:SI (reg:SI 1 r1 [ D.4354+4 ])
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(note 285 58 290 10 NOTE_INSN_DELETED)

(insn 290 285 60 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:DI 8 r8)
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (nil))

(insn 60 290 284 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:DI 10 sl [157])
        (and:DI (reg:DI 2 r2 [156])
            (reg:DI 8 r8))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 2 r2 [156])
            (const_int 2047 [0x7ff]))
        (nil)))

(insn 284 60 62 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:SI 3 r3 [159])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 62 284 63 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 10 sl [157])
            (reg:SI 3 r3 [159]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (subreg:SI (reg:DI 10 sl [157]) 0)
            (const_int 2047 [0x7ff]))
        (nil)))

(jump_insn 63 62 224 10 arch/arm/vfp/vfpdouble.c:374 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 10 -> ( 16 11)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]


;; Succ edge  16 [71.0%] 
;; Succ edge  11 [29.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  10 [29.0%]  (fallthru)
(note 224 63 64 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 64 224 65 11 arch/arm/vfp/vfpdouble.c:374 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 11 fp [+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 65 64 66 11 arch/arm/vfp/vfpdouble.c:374 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 12 16)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  12 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 9 [r9]

;; Pred edge  11 [50.0%]  (fallthru)
(note 66 65 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 69 66 70 12 NOTE_INSN_DELETED)

(note 70 69 67 12 NOTE_INSN_DELETED)

(insn 67 70 68 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (set (reg:DI 10 sl [161])
        (const_int 4503599627370495 [0xfffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4503599627370495 [0xfffffffffffff])
        (nil)))

(insn 68 67 71 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (set (reg:DI 2 r2 [160])
        (and:DI (reg:DI 0 r0 [orig:137 D.4354 ] [137])
            (reg:DI 10 sl [161]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:137 D.4354 ] [137])
            (const_int 4503599627370495 [0xfffffffffffff]))
        (nil)))

(insn 71 68 72 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [160])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 9 r9))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 72 71 73 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 13 16)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  13 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 13 [sp]
;; live  gen 	 5 [r5] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 73 72 291 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 291 73 75 13 arch/arm/vfp/vfpdouble.c:376 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 75 291 74 13 arch/arm/vfp/vfpdouble.c:376 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 74 75 76 13 arch/arm/vfp/vfpdouble.c:375 (set (reg/v:SI 5 r5 [orig:133 ret ] [133])
        (ior:SI (reg/v:SI 5 r5 [orig:133 ret ] [133])
            (const_int 805306368 [0x30000000]))) 89 {*arm_iorsi3} (nil))

(jump_insn 76 74 77 13 arch/arm/vfp/vfpdouble.c:376 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 13 [sp]


;; Succ edge  15 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  13 [50.0%]  (fallthru)
(note 77 76 80 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 80 77 81 14 NOTE_INSN_DELETED)

(note 81 80 78 14 NOTE_INSN_DELETED)

(insn 78 81 79 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (reg:DI 6 r6 [164])
        (const_int 2251799813685248 [0x8000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2251799813685248 [0x8000000000000])
        (nil)))

(insn 79 78 82 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (reg:DI 2 r2 [163])
        (and:DI (reg:DI 0 r0 [orig:137 D.4354 ] [137])
            (reg:DI 6 r6 [164]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:137 D.4354 ] [137])
            (const_int 2251799813685248 [0x8000000000000]))
        (nil)))

(insn 82 79 83 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 83 82 84 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 209)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14 -> ( 15 38)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  38 [50.0%] 

;; Start of basic block ( 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  13 [50.0%] 
;; Pred edge  14 [50.0%]  (fallthru)
(code_label 84 83 85 15 68 "" [1 uses])

(note 85 84 86 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 265 15 arch/arm/vfp/vfpdouble.c:380 (set (reg/v:SI 5 r5 [orig:133 ret ] [133])
        (ior:SI (reg/v:SI 5 r5 [orig:133 ret ] [133])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(jump_insn 265 86 266 15 (set (pc)
        (label_ref 209)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 38)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  38 [100.0%] 

(barrier 266 265 89)

;; Start of basic block ( 11 12 10) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [50.0%] 
;; Pred edge  12 [50.0%] 
;; Pred edge  10 [71.0%] 
(code_label 89 266 90 16 67 "" [3 uses])

(note 90 89 91 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 92 16 arch/arm/vfp/vfpdouble.c:383 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:133 ret ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 92 91 93 16 arch/arm/vfp/vfpdouble.c:383 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 209)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2907 [0xb5b])
        (nil)))
;; End of basic block 16 -> ( 17 38)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  17 [70.9%]  (fallthru)
;; Succ edge  38 [29.1%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  16 [70.9%]  (fallthru)
(note 93 92 94 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 17 arch/arm/vfp/vfpdouble.c:384 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 D.4354 ] [137])
            (reg:SI 6 r6 [orig:134 m ] [134]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 95 94 225 17 arch/arm/vfp/vfpdouble.c:384 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 255)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 17 -> ( 19 18)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  19 [71.0%] 
;; Succ edge  18 [29.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  17 [29.0%]  (fallthru)
(note 225 95 96 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 96 225 97 18 arch/arm/vfp/vfpdouble.c:384 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [ D.4354+4 ])
            (reg:SI 7 r7 [ m+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 97 96 255 18 arch/arm/vfp/vfpdouble.c:384 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 196)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 18 -> ( 19 35)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  19 [71.0%]  (fallthru)
;; Succ edge  35 [29.0%] 

;; Start of basic block ( 18 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 8 [r8]

;; Pred edge  18 [71.0%]  (fallthru)
;; Pred edge  17 [71.0%] 
(code_label 255 97 101 19 84 "" [1 uses])

(note 101 255 105 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 105 101 106 19 NOTE_INSN_DELETED)

(note 106 105 102 19 NOTE_INSN_DELETED)

(insn 102 106 103 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (reg:DI 10 sl [166])
        (ior:DI (reg:DI 0 r0 [orig:137 D.4354 ] [137])
            (reg/v:DI 6 r6 [orig:134 m ] [134]))) 86 {iordi3} (nil))

(insn 103 102 104 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (reg:DI 8 r8 [168])
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 9223372036854775807 [0x7fffffffffffffff])
        (nil)))

(insn 104 103 107 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (reg:DI 2 r2 [167])
        (and:DI (reg:DI 10 sl [166])
            (reg:DI 8 r8 [168]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 10 sl [166])
            (const_int 9223372036854775807 [0x7fffffffffffffff]))
        (nil)))

(insn 107 104 108 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [167])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 8 r8))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 108 107 109 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 196)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 19 -> ( 35 20)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  35 [39.0%] 
;; Succ edge  20 [61.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  19 [61.0%]  (fallthru)
(note 109 108 110 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 110 109 111 20 arch/arm/vfp/vfpdouble.c:389 (set (reg:DI 2 r2 [170])
        (xor:DI (reg:DI 0 r0 [orig:137 D.4354 ] [137])
            (reg/v:DI 6 r6 [orig:134 m ] [134]))) 93 {xordi3} (nil))

(insn 111 110 112 20 arch/arm/vfp/vfpdouble.c:389 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 112 111 228 20 arch/arm/vfp/vfpdouble.c:389 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 256)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2100 [0x834])
        (nil)))
;; End of basic block 20 -> ( 23 21)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  23 [21.0%] 
;; Succ edge  21 [79.0%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  20 [79.0%]  (fallthru)
(note 228 112 257 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 257 228 258 21 NOTE_INSN_DELETED)

(note 258 257 152 21 NOTE_INSN_DELETED)

(insn 152 258 149 21 arch/arm/vfp/vfpdouble.c:403 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [ m+4 ])
            (reg:SI 1 r1 [ D.4354+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(insn 149 152 151 21 arch/arm/vfp/vfpdouble.c:403 (set (reg:SI 2 r2 [orig:136 D.4383 ] [136])
        (lshiftrt:SI (reg:SI 1 r1 [ D.4354+4 ])
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 151 149 153 21 arch/arm/vfp/vfpdouble.c:403 (set (reg:QI 3 r3 [174])
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 153 151 267 21 arch/arm/vfp/vfpdouble.c:403 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 162)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 21 -> ( 27 22)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]


;; Succ edge  27 [50.0%] 
;; Succ edge  22 [50.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  21 [50.0%]  (fallthru)
(note 267 153 269 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(jump_insn 269 267 270 22 (set (pc)
        (label_ref 268)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 25)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]


;; Succ edge  25 [100.0%] 

(barrier 270 269 256)

;; Start of basic block ( 20) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  20 [21.0%] 
(code_label 256 270 120 23 85 "" [1 uses])

(note 120 256 121 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 121 120 122 23 arch/arm/vfp/vfpdouble.c:393 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [ D.4354+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 122 121 271 23 arch/arm/vfp/vfpdouble.c:393 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 201)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7900 [0x1edc])
        (nil)))
;; End of basic block 23 -> ( 24 36)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  24 [21.0%]  (fallthru)
;; Succ edge  36 [79.0%] 

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  23 [21.0%]  (fallthru)
(note 271 122 272 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(jump_insn 272 271 273 24 (set (pc)
        (label_ref 206)) 242 {*arm_jump} (nil))
;; End of basic block 24 -> ( 37)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  37 [100.0%] 

(barrier 273 272 268)

;; Start of basic block ( 22) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  22 [100.0%] 
(code_label 268 273 241 25 86 "" [1 uses])

(note 241 268 155 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(jump_insn 155 241 242 25 arch/arm/vfp/vfpdouble.c:403 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 165)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 25 -> ( 28 26)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  28 [71.0%] 
;; Succ edge  26 [29.0%]  (fallthru)

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  25 [29.0%]  (fallthru)
(note 242 155 156 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 156 242 157 26 arch/arm/vfp/vfpdouble.c:403 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [orig:134 m ] [134])
            (reg:SI 0 r0 [orig:137 D.4354 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 157 156 162 26 arch/arm/vfp/vfpdouble.c:403 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 165)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 26 -> ( 27 28)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  27 [50.0%]  (fallthru)
;; Succ edge  28 [50.0%] 

;; Start of basic block ( 21 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  21 [50.0%] 
;; Pred edge  26 [50.0%]  (fallthru)
(code_label 162 157 245 27 80 "" [1 uses])

(note 245 162 164 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 164 245 165 27 arch/arm/vfp/vfpdouble.c:403 (set (reg:QI 3 r3 [174])
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 27 -> ( 28)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 25 26 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  25 [71.0%] 
;; Pred edge  26 [50.0%] 
;; Pred edge  27 [100.0%]  (fallthru)
(code_label 165 164 246 28 79 "" [2 uses])

(note 246 165 166 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 166 246 167 28 NOTE_INSN_DELETED)

(insn 167 166 168 28 arch/arm/vfp/vfpdouble.c:403 (set (reg:SI 3 r3 [178])
        (xor:SI (reg:SI 2 r2 [orig:136 D.4383 ] [136])
            (reg:SI 3 r3 [174]))) 96 {*arm_xorsi3} (nil))

(insn 168 167 169 28 arch/arm/vfp/vfpdouble.c:403 (set (reg:SI 3 r3 [179])
        (zero_extend:SI (reg:QI 3 r3 [178]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 169 168 170 28 arch/arm/vfp/vfpdouble.c:403 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [179])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 170 169 171 28 arch/arm/vfp/vfpdouble.c:403 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 206)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 28 -> ( 37 29)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  37 [50.0%] 
;; Succ edge  29 [50.0%]  (fallthru)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  28 [50.0%]  (fallthru)
(note 171 170 174 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 174 171 173 29 arch/arm/vfp/vfpdouble.c:408 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [ D.4354+4 ])
            (reg:SI 7 r7 [ m+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(insn 173 174 175 29 arch/arm/vfp/vfpdouble.c:408 (set (reg:QI 3 r3 [180])
        (reg:QI 3 r3 [179])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 175 173 247 29 arch/arm/vfp/vfpdouble.c:408 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 184)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 29 -> ( 32 30)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 24 [cc]


;; Succ edge  32 [50.0%] 
;; Succ edge  30 [50.0%]  (fallthru)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  29 [50.0%]  (fallthru)
(note 247 175 177 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(jump_insn 177 247 248 30 arch/arm/vfp/vfpdouble.c:408 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 187)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 30 -> ( 33 31)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  33 [71.0%] 
;; Succ edge  31 [29.0%]  (fallthru)

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  30 [29.0%]  (fallthru)
(note 248 177 178 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 178 248 179 31 arch/arm/vfp/vfpdouble.c:408 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:137 D.4354 ] [137])
            (reg:SI 6 r6 [orig:134 m ] [134]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 179 178 184 31 arch/arm/vfp/vfpdouble.c:408 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 187)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 31 -> ( 32 33)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]


;; Succ edge  32 [50.0%]  (fallthru)
;; Succ edge  33 [50.0%] 

;; Start of basic block ( 29 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 2 [r2] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  29 [50.0%] 
;; Pred edge  31 [50.0%]  (fallthru)
(code_label 184 179 251 32 82 "" [1 uses])

(note 251 184 186 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 186 251 187 32 arch/arm/vfp/vfpdouble.c:408 (set (reg:QI 3 r3 [180])
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 32 -> ( 33)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]


;; Succ edge  33 [100.0%]  (fallthru)

;; Start of basic block ( 30 31 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  30 [71.0%] 
;; Pred edge  31 [50.0%] 
;; Pred edge  32 [100.0%]  (fallthru)
(code_label 187 186 252 33 81 "" [2 uses])

(note 252 187 188 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(note 188 252 190 33 NOTE_INSN_DELETED)

(note 190 188 189 33 NOTE_INSN_DELETED)

(insn 189 190 191 33 arch/arm/vfp/vfpdouble.c:408 (set (reg:SI 3 r3 [184])
        (xor:SI (reg:SI 2 r2 [orig:136 D.4383 ] [136])
            (reg:SI 3 r3 [180]))) 96 {*arm_xorsi3} (nil))

(insn 191 189 192 33 arch/arm/vfp/vfpdouble.c:408 (set (reg:CC_Z 24 cc)
        (compare:CC_Z (reg:QI 3 r3 [184])
            (const_int 0 [0x0]))) 151 {*compareqi_eq0} (nil))

(jump_insn 192 191 274 33 arch/arm/vfp/vfpdouble.c:408 (set (pc)
        (if_then_else (ne (reg:CC_Z 24 cc)
                (const_int 0 [0x0]))
            (label_ref 201)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 33 -> ( 36 34)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  36 [50.0%] 
;; Succ edge  34 [50.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  33 [50.0%]  (fallthru)
(note 274 192 275 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(jump_insn 275 274 276 34 (set (pc)
        (label_ref 209)) 242 {*arm_jump} (nil))
;; End of basic block 34 -> ( 38)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  38 [100.0%] 

(barrier 276 275 196)

;; Start of basic block ( 19 18) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  19 [39.0%] 
;; Pred edge  18 [29.0%] 
(code_label 196 276 197 35 70 "" [2 uses])

(note 197 196 198 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 198 197 277 35 arch/arm/vfp/vfpdouble.c:388 (set (reg/v:SI 5 r5 [orig:133 ret ] [133])
        (const_int 1610612736 [0x60000000])) 167 {*arm_movsi_insn} (nil))

(jump_insn 277 198 278 35 (set (pc)
        (label_ref 209)) 242 {*arm_jump} (nil))
;; End of basic block 35 -> ( 38)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  38 [100.0%] 

(barrier 278 277 201)

;; Start of basic block ( 33 23) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  33 [50.0%] 
;; Pred edge  23 [79.0%] 
(code_label 201 278 202 36 76 "" [2 uses])

(note 202 201 203 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 203 202 279 36 arch/arm/vfp/vfpdouble.c:402 (set (reg/v:SI 5 r5 [orig:133 ret ] [133])
        (const_int 536870912 [0x20000000])) 167 {*arm_movsi_insn} (nil))

(jump_insn 279 203 280 36 (set (pc)
        (label_ref 209)) 242 {*arm_jump} (nil))
;; End of basic block 36 -> ( 38)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  38 [100.0%] 

(barrier 280 279 206)

;; Start of basic block ( 28 24) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  28 [50.0%] 
;; Pred edge  24 [100.0%] 
(code_label 206 280 207 37 74 "" [2 uses])

(note 207 206 208 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 208 207 209 37 arch/arm/vfp/vfpdouble.c:407 (set (reg/v:SI 5 r5 [orig:133 ret ] [133])
        (const_int -2147483648 [0xffffffff80000000])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 37 -> ( 38)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  38 [100.0%]  (fallthru)

;; Start of basic block ( 37 35 16 34 14 15 36) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  37 [100.0%]  (fallthru)
;; Pred edge  35 [100.0%] 
;; Pred edge  16 [29.1%] 
;; Pred edge  34 [100.0%] 
;; Pred edge  14 [50.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  36 [100.0%] 
(code_label 209 208 210 38 69 "" [6 uses])

(note 210 209 215 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 215 210 221 38 arch/arm/vfp/vfpdouble.c:417 (set (reg/i:SI 0 r0)
        (reg/v:SI 5 r5 [orig:133 ret ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 221 215 283 38 arch/arm/vfp/vfpdouble.c:417 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 38 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 283 221 288 NOTE_INSN_DELETED)

(note 288 283 0 NOTE_INSN_DELETED)


;; Function vfp_double_fcmpez (vfp_double_fcmpez)[0:163]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 13(l0): point = 0
   Insn 11(l0): point = 2
   Insn 10(l0): point = 4
Compressing live ranges: from 7 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=5
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=10, live_throughout: 0, 3, 13, 14, dead_or_set: 1
insn=11, live_throughout: 0, 1, 3, 13, 14, dead_or_set: 2
insn=13, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcmpez

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={3d,1u} r3={2d,1u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 134{125d,9u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 11 2 arch/arm/vfp/vfpdouble.c:436 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 13 2 arch/arm/vfp/vfpdouble.c:436 (set (reg:SI 2 r2)
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 11 14 2 arch/arm/vfp/vfpdouble.c:436 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_compare") [flags 0x3] <function_decl 0x10ad5380 vfp_compare>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 27)

(note 27 14 0 NOTE_INSN_DELETED)


;; Function vfp_double_fcmpz (vfp_double_fcmpz)[0:162]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 13(l0): point = 0
   Insn 11(l0): point = 2
   Insn 10(l0): point = 4
Compressing live ranges: from 7 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=5
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=10, live_throughout: 0, 3, 13, 14, dead_or_set: 1
insn=11, live_throughout: 0, 1, 3, 13, 14, dead_or_set: 2
insn=13, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcmpz

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={3d,1u} r3={2d,1u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 134{125d,9u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 11 2 arch/arm/vfp/vfpdouble.c:431 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 13 2 arch/arm/vfp/vfpdouble.c:431 (set (reg:SI 2 r2)
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 11 14 2 arch/arm/vfp/vfpdouble.c:431 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_compare") [flags 0x3] <function_decl 0x10ad5380 vfp_compare>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 27)

(note 27 14 0 NOTE_INSN_DELETED)


;; Function vfp_double_fcmpe (vfp_double_fcmpe)[0:161]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=5
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=10, live_throughout: 0, 2, 3, 13, 14, dead_or_set: 1
insn=13, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcmpe

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={2d,1u} r3={2d,1u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 133{124d,9u,0e} in 2{1 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 13 2 arch/arm/vfp/vfpdouble.c:426 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 10 14 2 arch/arm/vfp/vfpdouble.c:426 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_compare") [flags 0x3] <function_decl 0x10ad5380 vfp_compare>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 27)

(note 27 14 0 NOTE_INSN_DELETED)


;; Function vfp_double_fcmp (vfp_double_fcmp)[0:160]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=5
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=10, live_throughout: 0, 2, 3, 13, 14, dead_or_set: 1
insn=13, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcmp

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={2d,1u} r3={2d,1u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 133{124d,9u,0e} in 2{1 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 13 2 arch/arm/vfp/vfpdouble.c:421 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 10 14 2 arch/arm/vfp/vfpdouble.c:421 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_compare") [flags 0x3] <function_decl 0x10ad5380 vfp_compare>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 27)

(note 27 14 0 NOTE_INSN_DELETED)


;; Function vfp_double_fneg (vfp_double_fneg)[0:157]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 32.
verify found no changes in insn with uid = 32.
deleting insn with uid = 12.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a0 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 27(l0): point = 0
   Insn 21(l0): point = 2
   Insn 16(l0): point = 4
   Insn 14(l0): point = 6
   Insn 32(l0): point = 8
   Insn 15(l0): point = 10
   Insn 10(l0): point = 12
   Insn 9(l0): point = 14
   Insn 2(l0): point = 16
 a0(r140): [7..8]
 a1(r135): [11..16]
Compressing live ranges: from 19 to 4 - 21%
Ranges after the compression:
 a0(r140): [0..1]
 a1(r135): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r140,l0) conflicts:
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a1(r135,l0) conflicts:
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14

  regions=1, blocks=3, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r140 1r135
    modified regnos: 135 140
    border:
    Pressure: GENERAL_REGS=5
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 4 regs less
      Pushing a0(r140,l0)
      Pushing a1(r135,l0)
      Popping a1(r135,l0)  -- assign reg 4
      Popping a0(r140,l0)  -- assign reg 4
Disposition:
    1:r135 l0     4    0:r140 l0     4
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 2, 13, dead_or_set: 0, 135
insn=9, live_throughout: 13, 135, dead_or_set: 0, 2
insn=10, live_throughout: 13, 135, dead_or_set: 0, 1, 14
insn=15, live_throughout: 0, 1, 13, dead_or_set: 2, 135
insn=32, live_throughout: 0, 1, 2, 13, dead_or_set: 140
insn=14, live_throughout: 2, 13, dead_or_set: 0, 1, 140
insn=16, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=21, live_throughout: 13, 14, dead_or_set: 0
insn=27, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 140: (insn_list:REG_DEP_TRUE 32 (nil))
changing reg in insn 2
changing reg in insn 15
changing reg in insn 32
changing reg in insn 14


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fneg

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 4[r4] 5[r5] 13[sp] 14[lr]
;;  ref usage 	r0={6d,6u} r1={4d,2u} r2={4d,2u} r3={3d} r4={2d,2u} r5={1d,1u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 267{249d,18u,0e} in 9{7 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 6 13 2 NOTE_INSN_DELETED)

(note 13 11 17 2 NOTE_INSN_DELETED)

(note 17 13 2 2 NOTE_INSN_DELETED)

(insn 2 17 9 2 arch/arm/vfp/vfpdouble.c:263 (set (reg/v:SI 4 r4 [orig:135 dd ] [135])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 10 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 9 15 2 arch/arm/vfp/vfpdouble.c:264 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 15 10 32 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:135 dd ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 32 15 14 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:DI 4 r4 [140])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 14 32 16 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:DI 0 r0)
        (xor:DI (reg:DI 0 r0)
            (reg:DI 4 r4 [140]))) 93 {xordi3} (nil))

(call_insn 16 14 21 2 arch/arm/vfp/vfpdouble.c:264 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 21 16 27 2 arch/arm/vfp/vfpdouble.c:266 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 27 21 31 2 arch/arm/vfp/vfpdouble.c:266 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 31 27 33 NOTE_INSN_DELETED)

(note 33 31 0 NOTE_INSN_DELETED)


;; Function vfp_double_fabs (vfp_double_fabs)[0:155]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 32.
verify found no changes in insn with uid = 32.
deleting insn with uid = 12.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a0 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 27(l0): point = 0
   Insn 21(l0): point = 2
   Insn 16(l0): point = 4
   Insn 14(l0): point = 6
   Insn 32(l0): point = 8
   Insn 15(l0): point = 10
   Insn 10(l0): point = 12
   Insn 9(l0): point = 14
   Insn 2(l0): point = 16
 a0(r140): [7..8]
 a1(r135): [11..16]
Compressing live ranges: from 19 to 4 - 21%
Ranges after the compression:
 a0(r140): [0..1]
 a1(r135): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r140,l0) conflicts:
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a1(r135,l0) conflicts:
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14

  regions=1, blocks=3, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r140 1r135
    modified regnos: 135 140
    border:
    Pressure: GENERAL_REGS=5
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 4 regs less
      Pushing a0(r140,l0)
      Pushing a1(r135,l0)
      Popping a1(r135,l0)  -- assign reg 4
      Popping a0(r140,l0)  -- assign reg 4
Disposition:
    1:r135 l0     4    0:r140 l0     4
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 2, 13, dead_or_set: 0, 135
insn=9, live_throughout: 13, 135, dead_or_set: 0, 2
insn=10, live_throughout: 13, 135, dead_or_set: 0, 1, 14
insn=15, live_throughout: 0, 1, 13, dead_or_set: 2, 135
insn=32, live_throughout: 0, 1, 2, 13, dead_or_set: 140
insn=14, live_throughout: 2, 13, dead_or_set: 0, 1, 140
insn=16, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=21, live_throughout: 13, 14, dead_or_set: 0
insn=27, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 140: (insn_list:REG_DEP_TRUE 32 (nil))
changing reg in insn 2
changing reg in insn 15
changing reg in insn 32
changing reg in insn 14


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fabs

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 4[r4] 5[r5] 13[sp] 14[lr]
;;  ref usage 	r0={6d,6u} r1={4d,2u} r2={4d,2u} r3={3d} r4={2d,2u} r5={1d,1u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 267{249d,18u,0e} in 9{7 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 6 13 2 NOTE_INSN_DELETED)

(note 13 11 17 2 NOTE_INSN_DELETED)

(note 17 13 2 2 NOTE_INSN_DELETED)

(insn 2 17 9 2 arch/arm/vfp/vfpdouble.c:251 (set (reg/v:SI 4 r4 [orig:135 dd ] [135])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 10 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 9 15 2 arch/arm/vfp/vfpdouble.c:252 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 15 10 32 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:135 dd ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 32 15 14 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:DI 4 r4 [140])
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 9223372036854775807 [0x7fffffffffffffff])
        (nil)))

(insn 14 32 16 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:DI 0 r0)
        (and:DI (reg:DI 0 r0)
            (reg:DI 4 r4 [140]))) 64 {anddi3} (nil))

(call_insn 16 14 21 2 arch/arm/vfp/vfpdouble.c:252 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 21 16 27 2 arch/arm/vfp/vfpdouble.c:254 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 27 21 31 2 arch/arm/vfp/vfpdouble.c:254 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 31 27 33 NOTE_INSN_DELETED)

(note 33 31 0 NOTE_INSN_DELETED)


;; Function vfp_double_fcpy (vfp_double_fcpy)[0:156]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 25(l0): point = 0
   Insn 19(l0): point = 2
   Insn 14(l0): point = 4
   Insn 13(l0): point = 6
   Insn 10(l0): point = 8
   Insn 9(l0): point = 10
   Insn 2(l0): point = 12
 a0(r135): [7..12]
Compressing live ranges: from 15 to 2 - 13%
Ranges after the compression:
 a0(r135): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r135,l0) conflicts:
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14

  regions=1, blocks=3, points=2
    allocnos=1, copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r135
    modified regnos: 135
    border:
    Pressure: GENERAL_REGS=4
    Reg 135 of GENERAL_REGS has 4 regs less
      Pushing a0(r135,l0)
      Popping a0(r135,l0)  -- assign reg 4
Disposition:
    0:r135 l0     4
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 2, 13, dead_or_set: 0, 135
insn=9, live_throughout: 13, 135, dead_or_set: 0, 2
insn=10, live_throughout: 13, 135, dead_or_set: 0, 1, 14
insn=13, live_throughout: 0, 1, 13, dead_or_set: 2, 135
insn=14, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=19, live_throughout: 13, 14, dead_or_set: 0
insn=25, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 2
changing reg in insn 13


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcpy

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={5d,5u} r1={3d,1u} r2={4d,2u} r3={3d} r4={1d,1u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 259{245d,14u,0e} in 7{5 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 15 2 NOTE_INSN_FUNCTION_BEG)

(note 15 6 2 2 NOTE_INSN_DELETED)

(insn 2 15 9 2 arch/arm/vfp/vfpdouble.c:257 (set (reg/v:SI 4 r4 [orig:135 dd ] [135])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 10 2 arch/arm/vfp/vfpdouble.c:258 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 9 13 2 arch/arm/vfp/vfpdouble.c:258 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 13 10 14 2 arch/arm/vfp/vfpdouble.c:258 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:135 dd ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn 14 13 19 2 arch/arm/vfp/vfpdouble.c:258 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 19 14 25 2 arch/arm/vfp/vfpdouble.c:260 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 25 19 29 2 arch/arm/vfp/vfpdouble.c:260 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 29 25 30 NOTE_INSN_DELETED)

(note 30 29 0 NOTE_INSN_DELETED)


;; Function vfp_double_normalise_denormal (vfp_double_normalise_denormal)[0:152]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a8 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a1(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a3(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a1(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a3(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 37(l0): point = 1
   Insn 35(l0): point = 3
   Insn 29(l0): point = 5
   Insn 28(l0): point = 7
   Insn 25(l0): point = 9
   Insn 33(l0): point = 11
   Insn 34(l0): point = 13
   Insn 23(l0): point = 15
   Insn 21(l0): point = 18
   Insn 20(l0): point = 20
   Insn 17(l0): point = 23
   Insn 15(l0): point = 25
   Insn 13(l0): point = 28
   Insn 12(l0): point = 30
   Insn 47(l0): point = 32
   Insn 11(l0): point = 34
   Insn 9(l0): point = 36
   Insn 48(l0): point = 38
   Insn 2(l0): point = 40
 a0(r137): [2..40]
 a1(r147): [6..7]
 a2(r135): [28..34] [8..23]
 a3(r144): [8..9]
 a4(r143): [10..15]
 a5(r133): [24..25]
 a6(r155): [26..32]
 a7(r134): [35..36]
 a8(r156): [37..38]
Compressing live ranges: from 43 to 19 - 44%
Ranges after the compression:
 a0(r137): [0..18]
 a1(r147): [1..2]
 a2(r135): [11..13] [3..7]
 a3(r144): [3..4]
 a4(r143): [5..6]
 a5(r133): [8..9]
 a6(r155): [10..12]
 a7(r134): [14..15]
 a8(r156): [16..17]
+++Allocating 72 bytes for conflict table (uncompressed size 72)
;; a0(r137,l0) conflicts: a1(r147,l0) a3(r144,l0) a2(r135,l0) a4(r143,l0) a5(r133,l0) a6(r155,l0) a7(r134,l0) a8(r156,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r147,l0) conflicts: a0(r137,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a2(r135,l0) conflicts: a0(r137,l0) a3(r144,l0) a4(r143,l0) a6(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r144,l0) conflicts: a0(r137,l0) a2(r135,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a4(r143,l0) conflicts: a0(r137,l0) a2(r135,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a5(r133,l0) conflicts: a0(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r155,l0) conflicts: a0(r137,l0) a2(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r134,l0) conflicts: a0(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r156,l0) conflicts: a0(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a3(r144)<->a4(r143)@125:shuffle
  cp1:a1(r147)<->a3(r144)@125:shuffle
  cp2:a1(r147)<->a2(r135)@125:shuffle
  cp3:a5(r133)<->a6(r155)@125:shuffle
  cp4:a2(r135)<->a5(r133)@125:shuffle
  cp5:a7(r134)<->a8(r156)@125:shuffle
  cp6:a2(r135)<->a7(r134)@125:shuffle
  regions=1, blocks=7, points=19
    allocnos=9, copies=7, conflicts=4, ranges=10

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r137 1r147 2r135 3r144 4r143 5r133 6r155 7r134 8r156
    modified regnos: 133 134 135 137 143 144 147 155 156
    border:
    Pressure: GENERAL_REGS=6
    Reg 137 of GENERAL_REGS has 4 regs less
    Reg 147 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 143 of GENERAL_REGS has 3 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
      Pushing a8(r156,l0)
      Pushing a7(r134,l0)
      Pushing a6(r155,l0)
      Pushing a5(r133,l0)
      Pushing a4(r143,l0)
      Pushing a3(r144,l0)
      Pushing a1(r147,l0)
      Pushing a2(r135,l0)
      Pushing a0(r137,l0)
      Popping a0(r137,l0)  -- assign reg 4
      Popping a2(r135,l0)  -- assign reg 3
      Popping a1(r147,l0)  -- assign reg 3
      Popping a3(r144,l0)  -- assign reg 12
      Popping a4(r143,l0)  -- assign reg 12
      Popping a5(r133,l0)  -- assign reg 3
      Popping a6(r155,l0)  -- assign reg 2
      Popping a7(r134,l0)  -- assign reg 3
      Popping a8(r156,l0)  -- assign reg 3
Disposition:
    5:r133 l0     3    7:r134 l0     3    2:r135 l0     3    0:r137 l0     4
    4:r143 l0    12    3:r144 l0    12    1:r147 l0     3    6:r155 l0     2
    8:r156 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, 14, dead_or_set: 0, 137
insn=48, live_throughout: 13, 14, 137, dead_or_set: 156
insn=9, live_throughout: 13, 14, 137, dead_or_set: 134, 156
insn=11, live_throughout: 13, 14, 137, dead_or_set: 134, 135
insn=47, live_throughout: 13, 14, 135, 137, dead_or_set: 155
insn=12, live_throughout: 13, 14, 135, 137, 155, dead_or_set: 
insn=13, live_throughout: 13, 14, 135, 137, 155, dead_or_set: 
insn=15, live_throughout: 13, 14, 137, dead_or_set: 133, 155
insn=17, live_throughout: 13, 14, 137, dead_or_set: 133, 135
insn=18, live_throughout: 13, 14, 135, 137, dead_or_set: 
insn=20, live_throughout: 13, 14, 135, 137, dead_or_set: 
insn=21, live_throughout: 13, 14, 135, 137, dead_or_set: 
insn=23, live_throughout: 13, 135, 137, dead_or_set: 143
insn=34, live_throughout: 13, 135, 137, 143, dead_or_set: 2
insn=33, live_throughout: 2, 13, 135, 137, 143, dead_or_set: 0, 1
insn=25, live_throughout: 0, 1, 2, 13, 135, 137, dead_or_set: 143, 144
insn=28, live_throughout: 0, 1, 2, 13, 137, dead_or_set: 135, 144, 147
insn=29, live_throughout: 0, 1, 2, 13, 137, dead_or_set: 147
insn=35, live_throughout: 13, 137, dead_or_set: 0, 1, 2, 14
insn=37, live_throughout: 13, 14, dead_or_set: 0, 1, 137
insn=43, live_throughout: 13, 14, dead_or_set: 
init_insns for 156: (insn_list:REG_DEP_TRUE 48 (nil))
changing reg in insn 15
changing reg in insn 17
changing reg in insn 9
changing reg in insn 11
changing reg in insn 17
changing reg in insn 11
changing reg in insn 28
changing reg in insn 34
changing reg in insn 20
changing reg in insn 12
changing reg in insn 2
changing reg in insn 37
changing reg in insn 33
changing reg in insn 29
changing reg in insn 23
changing reg in insn 48
changing reg in insn 47
changing reg in insn 48
changing reg in insn 23
changing reg in insn 25
changing reg in insn 25
changing reg in insn 28
changing reg in insn 28
changing reg in insn 47
changing reg in insn 15
changing reg in insn 48
changing reg in insn 9
Spilling for insn 29.
Spilling for insn 37.

Reloads for insn # 29
Reload 0: reload_out (HI) = (mem/s/j:HI (reg/v/f:SI 4 r4 [orig:137 vd ] [137]) [0 <variable>.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (reg/v/f:SI 4 r4 [orig:137 vd ] [137]) [0 <variable>.exponent+0 S2 A64])

Reloads for insn # 37
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 4 r4 [orig:137 vd ] [137])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 4 r4 [orig:137 vd ] [137])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 35.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


vfp_double_normalise_denormal

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={3d,2u} r2={4d,2u} r3={8d,8u} r4={1d,6u,1d} r12={4d,2u} r13={1d,7u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 173{139d,33u,1e} in 19{18 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 3 2 2 NOTE_INSN_DELETED)

(insn 2 10 48 2 arch/arm/vfp/vfpdouble.c:55 (set (reg/v/f:SI 4 r4 [orig:137 vd ] [137])
        (reg:SI 0 r0 [ vd ])) 167 {*arm_movsi_insn} (nil))

(insn 48 2 9 2 arch/arm/vfp/vfpdouble.c:56 (set (reg:SI 3 r3 [orig:156 D.4073+4 ] [156])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 vd ] [137])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 vd ] [137])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])
        (nil)))

(insn 9 48 11 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 3 r3 [orig:134 ret ] [134])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 3 r3 [orig:156 D.4073+4 ] [156])
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1139895)) -1 (nil))

(insn 11 9 47 2 arch/arm/vfp/vfpdouble.c:56 (set (reg/v:SI 3 r3 [orig:135 bits ] [135])
        (plus:SI (reg/v:SI 3 r3 [orig:134 ret ] [134])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 47 11 12 2 arch/arm/vfp/vfpdouble.c:56 (set (reg:SI 2 r2 [orig:155 D.4073 ] [155])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:137 vd ] [137])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 12 47 13 2 arch/arm/vfp/vfpdouble.c:57 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:135 bits ] [135])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 13 12 14 2 arch/arm/vfp/vfpdouble.c:57 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  4 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 14 13 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 16 14 15 3 NOTE_INSN_DELETED)

(insn 15 16 17 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 3 r3 [orig:133 ret ] [133])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 2 r2 [orig:155 D.4073 ] [155])
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1139895)) -1 (nil))

(insn 17 15 18 3 arch/arm/vfp/vfpdouble.c:58 (set (reg/v:SI 3 r3 [orig:135 bits ] [135])
        (plus:SI (reg/v:SI 3 r3 [orig:133 ret ] [133])
            (const_int 31 [0x1f]))) 4 {*arm_addsi3} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 18 17 19 4 106 "" [1 uses])

(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 4 arch/arm/vfp/vfpdouble.c:62 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:135 bits ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 4 arch/arm/vfp/vfpdouble.c:62 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  5 [61.0%]  (fallthru)
;; Succ edge  6 [39.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  4 [61.0%]  (fallthru)
(note 22 21 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 36 22 23 5 NOTE_INSN_DELETED)

(insn 23 36 34 5 arch/arm/vfp/vfpdouble.c:63 (set (reg:SI 12 ip [orig:143 <variable>.exponent ] [143])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 4 r4 [orig:137 vd ] [137]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 34 23 33 5 arch/arm/vfp/vfpdouble.c:64 (set (reg:SI 2 r2)
        (reg/v:SI 3 r3 [orig:135 bits ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 33 34 25 5 arch/arm/vfp/vfpdouble.c:64 (set (reg:DI 0 r0)
        (mem/s/j:DI (plus:SI (reg/v/f:SI 4 r4 [orig:137 vd ] [137])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 25 33 28 5 arch/arm/vfp/vfpdouble.c:63 (set (reg:SI 12 ip [144])
        (plus:SI (reg:SI 12 ip [orig:143 <variable>.exponent ] [143])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 28 25 29 5 arch/arm/vfp/vfpdouble.c:63 (set (reg:SI 3 r3 [147])
        (minus:SI (reg:SI 12 ip [144])
            (reg/v:SI 3 r3 [orig:135 bits ] [135]))) 28 {*arm_subsi3_insn} (nil))

(insn 29 28 35 5 arch/arm/vfp/vfpdouble.c:63 (set (mem/s/j:HI (reg/v/f:SI 4 r4 [orig:137 vd ] [137]) [0 <variable>.exponent+0 S2 A64])
        (reg:HI 3 r3 [147])) 176 {*movhi_insn_arch4} (nil))

(call_insn/u 35 29 37 5 arch/arm/vfp/vfpdouble.c:64 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 37 35 43 5 arch/arm/vfp/vfpdouble.c:64 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 4 r4 [orig:137 vd ] [137])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [39.0%] 
(code_label 43 37 46 6 108 "" [1 uses])

(note 46 43 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 49 46 50 NOTE_INSN_DELETED)

(note 50 49 0 NOTE_INSN_DELETED)


;; Function vfp_double_normaliseround (vfp_double_normaliseround)[0:153]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 409.
verify found no changes in insn with uid = 409.
deleting insn with uid = 204.
scanning new insn with uid = 410.
verify found no changes in insn with uid = 410.
deleting insn with uid = 14.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 51 n_edges 77 count 95 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 51 n_edges 77 count 100 (    2)

Pass 0 for finding allocno costs

    a44 (r261,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r260,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r259,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r258,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r256,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r249,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r237,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r236,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r234,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r226,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r224,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r209,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a1(r234,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a2(r231,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a3(r236,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a6(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r237,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r224,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:190000
  a11(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:140000
  a13(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a15(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r143,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:224000
  a21(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:102000
  a22(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r145,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a29(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r197,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a32(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a35(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a43(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a44(r261,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a45(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a48(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a49(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r256,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a52(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a54(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a58(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a60(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a61(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r261: preferred GENERAL_REGS, alternative NO_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a1(r234,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a2(r231,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a3(r236,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a6(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r237,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r224,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:190000
  a11(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:140000
  a13(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a15(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r143,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:224000
  a21(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:102000
  a22(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r145,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a29(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r197,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a32(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a35(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a43(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a44(r261,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a45(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a48(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a49(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r256,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a52(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a54(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a58(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a60(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a61(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 330(l0): point = 0
   Insn 324(l0): point = 2
   Insn 319(l0): point = 4
   Insn 317(l0): point = 6
   Insn 315(l0): point = 11
   Insn 307(l0): point = 13
   Insn 313(l0): point = 19
   Insn 306(l0): point = 21
   Insn 318(l0): point = 23
   Insn 305(l0): point = 25
   Insn 301(l0): point = 27
   Insn 312(l0): point = 29
   Insn 300(l0): point = 31
   Insn 309(l0): point = 33
   Insn 377(l0): point = 35
   Insn 303(l0): point = 37
   Insn 376(l0): point = 39
   Insn 311(l0): point = 41
   Insn 375(l0): point = 43
   Insn 298(l0): point = 45
   Insn 294(l0): point = 48
   Insn 292(l0): point = 50
   Insn 293(l0): point = 52
   Insn 289(l0): point = 56
   Insn 287(l0): point = 59
   Insn 286(l0): point = 61
   Insn 284(l0): point = 64
   Insn 283(l0): point = 66
   Insn 281(l0): point = 68
   Insn 278(l0): point = 71
   Insn 271(l0): point = 74
   Insn 270(l0): point = 76
   Insn 269(l0): point = 79
   Insn 267(l0): point = 82
   Insn 266(l0): point = 84
   Insn 262(l0): point = 86
   Insn 374(l0): point = 88
   Insn 373(l0): point = 90
   Insn 250(l0): point = 92
   Insn 265(l0): point = 94
   Insn 248(l0): point = 96
   Insn 394(l0): point = 103
   Insn 243(l0): point = 105
   Insn 242(l0): point = 107
   Insn 241(l0): point = 109
   Insn 239(l0): point = 111
   Insn 392(l0): point = 114
   Insn 234(l0): point = 116
   Insn 233(l0): point = 118
   Insn 232(l0): point = 120
   Insn 228(l0): point = 123
   Insn 224(l0): point = 125
   Insn 227(l0): point = 127
   Insn 222(l0): point = 130
   Insn 221(l0): point = 132
   Insn 220(l0): point = 134
   Insn 217(l0): point = 137
   Insn 215(l0): point = 140
   Insn 214(l0): point = 142
   Insn 211(l0): point = 144
   Insn 210(l0): point = 149
   Insn 202(l0): point = 152
   Insn 206(l0): point = 154
   Insn 207(l0): point = 159
   Insn 205(l0): point = 162
   Insn 409(l0): point = 167
   Insn 203(l0): point = 169
   Insn 195(l0): point = 173
   Insn 194(l0): point = 175
   Insn 193(l0): point = 178
   Insn 191(l0): point = 181
   Insn 190(l0): point = 183
   Insn 189(l0): point = 185
   Insn 186(l0): point = 192
   Insn 390(l0): point = 195
   Insn 181(l0): point = 197
   Insn 179(l0): point = 200
   Insn 178(l0): point = 202
   Insn 177(l0): point = 204
   Insn 173(l0): point = 206
   Insn 171(l0): point = 208
   Insn 166(l0): point = 211
   Insn 165(l0): point = 213
   Insn 388(l0): point = 216
   Insn 160(l0): point = 218
   Insn 386(l0): point = 221
   Insn 155(l0): point = 223
   Insn 153(l0): point = 226
   Insn 152(l0): point = 228
   Insn 149(l0): point = 230
   Insn 148(l0): point = 235
   Insn 146(l0): point = 238
   Insn 145(l0): point = 240
   Insn 141(l0): point = 243
   Insn 140(l0): point = 245
   Insn 384(l0): point = 248
   Insn 135(l0): point = 250
   Insn 134(l0): point = 252
   Insn 132(l0): point = 255
   Insn 131(l0): point = 257
   Insn 128(l0): point = 259
   Insn 127(l0): point = 264
   Insn 123(l0): point = 267
   Insn 122(l0): point = 270
   Insn 121(l0): point = 272
   Insn 119(l0): point = 274
   Insn 118(l0): point = 276
   Insn 117(l0): point = 278
   Insn 382(l0): point = 281
   Insn 112(l0): point = 283
   Insn 109(l0): point = 289
   Insn 108(l0): point = 292
   Insn 107(l0): point = 294
   Insn 105(l0): point = 296
   Insn 103(l0): point = 298
   Insn 407(l0): point = 300
   Insn 104(l0): point = 302
   Insn 406(l0): point = 304
   Insn 405(l0): point = 306
   Insn 404(l0): point = 308
   Insn 368(l0): point = 310
   Insn 367(l0): point = 312
   Insn 100(l0): point = 314
   Insn 98(l0): point = 316
   Insn 362(l0): point = 318
   Insn 361(l0): point = 320
   Insn 99(l0): point = 322
   Insn 360(l0): point = 324
   Insn 94(l0): point = 326
   Insn 92(l0): point = 328
   Insn 93(l0): point = 330
   Insn 90(l0): point = 333
   Insn 89(l0): point = 335
   Insn 87(l0): point = 338
   Insn 86(l0): point = 340
   Insn 84(l0): point = 342
   Insn 380(l0): point = 345
   Insn 79(l0): point = 347
   Insn 77(l0): point = 350
   Insn 76(l0): point = 352
   Insn 402(l0): point = 355
   Insn 401(l0): point = 357
   Insn 400(l0): point = 359
   Insn 399(l0): point = 361
   Insn 356(l0): point = 363
   Insn 355(l0): point = 365
   Insn 71(l0): point = 367
   Insn 68(l0): point = 369
   Insn 70(l0): point = 371
   Insn 69(l0): point = 373
   Insn 66(l0): point = 376
   Insn 65(l0): point = 378
   Insn 62(l0): point = 381
   Insn 60(l0): point = 383
   Insn 58(l0): point = 386
   Insn 57(l0): point = 388
   Insn 51(l0): point = 390
   Insn 56(l0): point = 392
   Insn 54(l0): point = 394
   Insn 378(l0): point = 397
   Insn 46(l0): point = 399
   Insn 42(l0): point = 402
   Insn 41(l0): point = 404
   Insn 38(l0): point = 406
   Insn 35(l0): point = 409
   Insn 34(l0): point = 411
   Insn 32(l0): point = 413
   Insn 29(l0): point = 416
   Insn 27(l0): point = 419
   Insn 26(l0): point = 421
   Insn 22(l0): point = 423
   Insn 24(l0): point = 425
   Insn 19(l0): point = 427
   Insn 23(l0): point = 429
   Insn 16(l0): point = 432
   Insn 15(l0): point = 434
   Insn 410(l0): point = 436
   Insn 5(l0): point = 438
   Insn 10(l0): point = 440
   Insn 4(l0): point = 442
   Insn 2(l0): point = 444
   Insn 3(l0): point = 446
 a0(r153): [3..438]
 a1(r234): [7..35]
 a2(r231): [7..14]
 a3(r236): [12..33]
 a4(r230): [14..39]
 a5(r226): [14..43]
 a6(r150): [24..444]
 a7(r228): [26..37]
 a8(r237): [30..41]
 a9(r224): [32..45]
 a10(r151): [34..446]
 a11(r222): [49..53]
 a12(r141): [343..390] [248..250] [130..243] [51..102]
 a13(r133): [53..97]
 a14(r139): [345..347] [248..252] [130..245] [62..102]
 a15(r220): [67..68]
 a16(r216): [74..94] [69..71]
 a17(r215): [69..86]
 a18(r213): [89..90]
 a19(r249): [91..92]
 a20(r143): [402..406] [374..396] [317..355] [286..286] [270..284] [163..267] [157..157] [130..155] [97..102]
 a21(r142): [221..223] [216..218] [195..197] [128..192] [97..102]
 a22(r209): [106..107]
 a23(r208): [110..111]
 a24(r206): [117..118]
 a25(r202): [121..134]
 a26(r199): [147..147] [143..145]
 a27(r200): [145..149]
 a28(r145): [155..170]
 a29(r144): [165..165] [155..163]
 a30(r198): [163..167]
 a31(r197): [176..186]
 a32(r196): [203..204]
 a33(r193): [205..206]
 a34(r138): [238..240] [205..215]
 a35(r192): [207..208]
 a36(r186): [233..233] [229..231]
 a37(r187): [231..235]
 a38(r152): [402..442] [241..396]
 a39(r185): [253..257]
 a40(r183): [262..262] [258..260]
 a41(r184): [260..264]
 a42(r254): [284..324]
 a43(r180): [292..300] [284..289]
 a44(r261): [301..308]
 a45(r259): [305..310]
 a46(r258): [307..312]
 a47(r147): [323..342]
 a48(r260): [356..361]
 a49(r257): [358..363]
 a50(r256): [360..365]
 a51(r140): [386..392] [370..381]
 a52(r136): [382..383]
 a53(r148): [402..440] [391..396]
 a54(r137): [393..394]
 a55(r169): [400..404]
 a56(r167): [412..413]
 a57(r161): [419..423] [414..416]
 a58(r160): [414..427]
 a59(r164): [422..425]
 a60(r163): [422..429]
 a61(r158): [435..436]
Compressing live ranges: from 449 to 147 - 32%
Ranges after the compression:
 a0(r153): [0..142]
 a1(r234): [1..10]
 a2(r231): [1..3]
 a3(r236): [2..8]
 a4(r230): [3..12]
 a5(r226): [3..14]
 a6(r150): [4..145]
 a7(r228): [5..11]
 a8(r237): [6..13]
 a9(r224): [7..15]
 a10(r151): [9..146]
 a11(r222): [16..18]
 a12(r141): [104..120] [78..79] [41..76] [17..32]
 a13(r133): [18..31]
 a14(r139): [105..106] [78..80] [41..77] [19..32]
 a15(r220): [20..21]
 a16(r216): [24..30] [22..23]
 a17(r215): [22..25]
 a18(r213): [26..27]
 a19(r249): [28..29]
 a20(r143): [127..129] [115..125] [100..107] [90..90] [88..89] [49..87] [48..48] [41..47] [31..32]
 a21(r142): [67..68] [65..66] [56..57] [40..55] [31..32]
 a22(r209): [33..34]
 a23(r208): [35..36]
 a24(r206): [37..38]
 a25(r202): [39..42]
 a26(r199): [45..45] [43..44]
 a27(r200): [44..46]
 a28(r145): [47..52]
 a29(r144): [50..50] [47..49]
 a30(r198): [49..51]
 a31(r197): [53..54]
 a32(r196): [58..59]
 a33(r193): [60..61]
 a34(r138): [73..74] [60..64]
 a35(r192): [62..63]
 a36(r186): [71..71] [69..70]
 a37(r187): [70..72]
 a38(r152): [127..144] [75..125]
 a39(r185): [81..82]
 a40(r183): [85..85] [83..84]
 a41(r184): [84..86]
 a42(r254): [89..102]
 a43(r180): [92..93] [89..91]
 a44(r261): [94..97]
 a45(r259): [95..98]
 a46(r258): [96..99]
 a47(r147): [101..103]
 a48(r260): [108..111]
 a49(r257): [109..112]
 a50(r256): [110..113]
 a51(r140): [119..122] [114..116]
 a52(r136): [117..118]
 a53(r148): [127..143] [121..125]
 a54(r137): [123..124]
 a55(r169): [126..128]
 a56(r167): [130..131]
 a57(r161): [134..136] [132..133]
 a58(r160): [132..138]
 a59(r164): [135..137]
 a60(r163): [135..139]
 a61(r158): [140..141]
+++Allocating 496 bytes for conflict table (uncompressed size 496)
;; a0(r153,l0) conflicts: a2(r231,l0) a1(r234,l0) a3(r236,l0) a4(r230,l0) a5(r226,l0) a6(r150,l0) a7(r228,l0) a8(r237,l0) a9(r224,l0) a10(r151,l0) a11(r222,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0) a15(r220,l0) a17(r215,l0) a16(r216,l0) a18(r213,l0) a19(r249,l0) a21(r142,l0) a20(r143,l0) a22(r209,l0) a23(r208,l0) a24(r206,l0) a25(r202,l0) a26(r199,l0) a27(r200,l0) a29(r144,l0) a28(r145,l0) a30(r198,l0) a31(r197,l0) a32(r196,l0) a33(r193,l0) a34(r138,l0) a35(r192,l0) a36(r186,l0) a37(r187,l0) a38(r152,l0) a39(r185,l0) a40(r183,l0) a41(r184,l0) a43(r180,l0) a42(r254,l0) a44(r261,l0) a45(r259,l0) a46(r258,l0) a47(r147,l0) a48(r260,l0) a49(r257,l0) a50(r256,l0) a51(r140,l0) a52(r136,l0) a53(r148,l0) a54(r137,l0) a55(r169,l0) a56(r167,l0) a57(r161,l0) a58(r160,l0) a59(r164,l0) a60(r163,l0) a61(r158,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r234,l0) conflicts: a0(r153,l0) a2(r231,l0) a3(r236,l0) a4(r230,l0) a5(r226,l0) a6(r150,l0) a7(r228,l0) a8(r237,l0) a9(r224,l0) a10(r151,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a2(r231,l0) conflicts: a0(r153,l0) a1(r234,l0) a3(r236,l0) a4(r230,l0) a5(r226,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a3(r236,l0) conflicts: a0(r153,l0) a2(r231,l0) a1(r234,l0) a4(r230,l0) a5(r226,l0) a6(r150,l0) a7(r228,l0) a8(r237,l0) a9(r224,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a4(r230,l0) conflicts: a0(r153,l0) a2(r231,l0) a1(r234,l0) a3(r236,l0) a5(r226,l0) a6(r150,l0) a7(r228,l0) a8(r237,l0) a9(r224,l0) a10(r151,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a5(r226,l0) conflicts: a0(r153,l0) a2(r231,l0) a1(r234,l0) a3(r236,l0) a4(r230,l0) a6(r150,l0) a7(r228,l0) a8(r237,l0) a9(r224,l0) a10(r151,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a6(r150,l0) conflicts: a0(r153,l0) a1(r234,l0) a3(r236,l0) a4(r230,l0) a5(r226,l0) a7(r228,l0) a8(r237,l0) a9(r224,l0) a10(r151,l0) a11(r222,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0) a15(r220,l0) a17(r215,l0) a16(r216,l0) a18(r213,l0) a19(r249,l0) a21(r142,l0) a20(r143,l0) a22(r209,l0) a23(r208,l0) a24(r206,l0) a25(r202,l0) a26(r199,l0) a27(r200,l0) a29(r144,l0) a28(r145,l0) a30(r198,l0) a31(r197,l0) a32(r196,l0) a33(r193,l0) a34(r138,l0) a35(r192,l0) a36(r186,l0) a37(r187,l0) a38(r152,l0) a39(r185,l0) a40(r183,l0) a41(r184,l0) a43(r180,l0) a42(r254,l0) a44(r261,l0) a45(r259,l0) a46(r258,l0) a47(r147,l0) a48(r260,l0) a49(r257,l0) a50(r256,l0) a51(r140,l0) a52(r136,l0) a53(r148,l0) a54(r137,l0) a55(r169,l0) a56(r167,l0) a57(r161,l0) a58(r160,l0) a59(r164,l0) a60(r163,l0) a61(r158,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r228,l0) conflicts: a0(r153,l0) a1(r234,l0) a3(r236,l0) a4(r230,l0) a5(r226,l0) a6(r150,l0) a8(r237,l0) a9(r224,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r237,l0) conflicts: a0(r153,l0) a1(r234,l0) a3(r236,l0) a4(r230,l0) a5(r226,l0) a6(r150,l0) a7(r228,l0) a9(r224,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r224,l0) conflicts: a0(r153,l0) a1(r234,l0) a3(r236,l0) a4(r230,l0) a5(r226,l0) a6(r150,l0) a7(r228,l0) a8(r237,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r151,l0) conflicts: a0(r153,l0) a1(r234,l0) a4(r230,l0) a5(r226,l0) a6(r150,l0) a7(r228,l0) a8(r237,l0) a9(r224,l0) a11(r222,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0) a15(r220,l0) a17(r215,l0) a16(r216,l0) a18(r213,l0) a19(r249,l0) a21(r142,l0) a20(r143,l0) a22(r209,l0) a23(r208,l0) a24(r206,l0) a25(r202,l0) a26(r199,l0) a27(r200,l0) a29(r144,l0) a28(r145,l0) a30(r198,l0) a31(r197,l0) a32(r196,l0) a33(r193,l0) a34(r138,l0) a35(r192,l0) a36(r186,l0) a37(r187,l0) a38(r152,l0) a39(r185,l0) a40(r183,l0) a41(r184,l0) a43(r180,l0) a42(r254,l0) a44(r261,l0) a45(r259,l0) a46(r258,l0) a47(r147,l0) a48(r260,l0) a49(r257,l0) a50(r256,l0) a51(r140,l0) a52(r136,l0) a53(r148,l0) a54(r137,l0) a55(r169,l0) a56(r167,l0) a57(r161,l0) a58(r160,l0) a59(r164,l0) a60(r163,l0) a61(r158,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a11(r222,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a13(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r141,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a11(r222,l0) a13(r133,l0) a14(r139,l0) a15(r220,l0) a17(r215,l0) a16(r216,l0) a18(r213,l0) a19(r249,l0) a21(r142,l0) a20(r143,l0) a25(r202,l0) a26(r199,l0) a27(r200,l0) a29(r144,l0) a28(r145,l0) a30(r198,l0) a31(r197,l0) a32(r196,l0) a33(r193,l0) a34(r138,l0) a35(r192,l0) a36(r186,l0) a37(r187,l0) a38(r152,l0) a48(r260,l0) a49(r257,l0) a50(r256,l0) a51(r140,l0) a52(r136,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a13(r133,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a11(r222,l0) a12(r141,l0) a14(r139,l0) a15(r220,l0) a17(r215,l0) a16(r216,l0) a18(r213,l0) a19(r249,l0) a21(r142,l0) a20(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r139,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a13(r133,l0) a15(r220,l0) a17(r215,l0) a16(r216,l0) a18(r213,l0) a19(r249,l0) a21(r142,l0) a20(r143,l0) a25(r202,l0) a26(r199,l0) a27(r200,l0) a29(r144,l0) a28(r145,l0) a30(r198,l0) a31(r197,l0) a32(r196,l0) a33(r193,l0) a34(r138,l0) a35(r192,l0) a36(r186,l0) a37(r187,l0) a38(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r220,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r216,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0) a17(r215,l0) a18(r213,l0) a19(r249,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r215,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0) a16(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r213,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0) a16(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r249,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0) a16(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r143,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0) a21(r142,l0) a25(r202,l0) a26(r199,l0) a27(r200,l0) a29(r144,l0) a28(r145,l0) a30(r198,l0) a31(r197,l0) a32(r196,l0) a33(r193,l0) a34(r138,l0) a35(r192,l0) a36(r186,l0) a37(r187,l0) a38(r152,l0) a39(r185,l0) a40(r183,l0) a41(r184,l0) a43(r180,l0) a42(r254,l0) a47(r147,l0) a51(r140,l0) a52(r136,l0) a53(r148,l0) a54(r137,l0) a55(r169,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a21(r142,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a13(r133,l0) a14(r139,l0) a20(r143,l0) a25(r202,l0) a26(r199,l0) a27(r200,l0) a29(r144,l0) a28(r145,l0) a30(r198,l0) a31(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r209,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r208,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r206,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r202,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a21(r142,l0) a20(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r199,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a21(r142,l0) a20(r143,l0) a27(r200,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r200,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a21(r142,l0) a20(r143,l0) a26(r199,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r145,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a21(r142,l0) a20(r143,l0) a29(r144,l0) a30(r198,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r144,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a21(r142,l0) a20(r143,l0) a28(r145,l0) a30(r198,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r198,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a21(r142,l0) a20(r143,l0) a29(r144,l0) a28(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r197,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a21(r142,l0) a20(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r196,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a20(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r193,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a20(r143,l0) a34(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r138,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a20(r143,l0) a33(r193,l0) a35(r192,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r192,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a20(r143,l0) a34(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r186,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a20(r143,l0) a37(r187,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r187,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a20(r143,l0) a36(r186,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r152,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a14(r139,l0) a20(r143,l0) a39(r185,l0) a40(r183,l0) a41(r184,l0) a43(r180,l0) a42(r254,l0) a44(r261,l0) a45(r259,l0) a46(r258,l0) a47(r147,l0) a48(r260,l0) a49(r257,l0) a50(r256,l0) a51(r140,l0) a52(r136,l0) a53(r148,l0) a54(r137,l0) a55(r169,l0) a56(r167,l0) a57(r161,l0) a58(r160,l0) a59(r164,l0) a60(r163,l0) a61(r158,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a39(r185,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a20(r143,l0) a38(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r183,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a20(r143,l0) a38(r152,l0) a41(r184,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r184,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a20(r143,l0) a38(r152,l0) a40(r183,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r254,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a20(r143,l0) a38(r152,l0) a43(r180,l0) a44(r261,l0) a45(r259,l0) a46(r258,l0) a47(r147,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a43(r180,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a20(r143,l0) a38(r152,l0) a42(r254,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a44(r261,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a38(r152,l0) a42(r254,l0) a45(r259,l0) a46(r258,l0)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a45(r259,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a38(r152,l0) a42(r254,l0) a44(r261,l0) a46(r258,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a46(r258,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a38(r152,l0) a42(r254,l0) a44(r261,l0) a45(r259,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a47(r147,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a20(r143,l0) a38(r152,l0) a42(r254,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a48(r260,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a38(r152,l0) a49(r257,l0) a50(r256,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a49(r257,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a38(r152,l0) a48(r260,l0) a50(r256,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a50(r256,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a38(r152,l0) a48(r260,l0) a49(r257,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a51(r140,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a20(r143,l0) a38(r152,l0) a53(r148,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a52(r136,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a12(r141,l0) a20(r143,l0) a38(r152,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a53(r148,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a20(r143,l0) a38(r152,l0) a51(r140,l0) a54(r137,l0) a55(r169,l0) a56(r167,l0) a57(r161,l0) a58(r160,l0) a59(r164,l0) a60(r163,l0) a61(r158,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a54(r137,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a20(r143,l0) a38(r152,l0) a53(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a55(r169,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a20(r143,l0) a38(r152,l0) a53(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a56(r167,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a38(r152,l0) a53(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a57(r161,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a38(r152,l0) a53(r148,l0) a58(r160,l0) a59(r164,l0) a60(r163,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a58(r160,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a38(r152,l0) a53(r148,l0) a57(r161,l0) a59(r164,l0) a60(r163,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a59(r164,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a38(r152,l0) a53(r148,l0) a57(r161,l0) a58(r160,l0) a60(r163,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a60(r163,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a38(r152,l0) a53(r148,l0) a57(r161,l0) a58(r160,l0) a59(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a61(r158,l0) conflicts: a0(r153,l0) a6(r150,l0) a10(r151,l0) a38(r152,l0) a53(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a15(r220)<->a17(r215)@125:shuffle
  cp1:a15(r220)<->a16(r216)@125:shuffle
  cp2:a18(r213)<->a19(r249)@125:shuffle
  cp3:a33(r193)<->a35(r192)@125:shuffle
  cp4:a32(r196)<->a33(r193)@125:shuffle
  cp5:a32(r196)<->a34(r138)@125:shuffle
  cp6:a34(r138)<->a38(r152)@125:shuffle
  cp7:a14(r139)<->a39(r185)@1000:move
  cp8:a39(r185)<->a40(r183)@125:shuffle
  cp9:a43(r180)<->a44(r261)@1000:move
  cp10:a12(r141)<->a47(r147)@125:shuffle
  cp11:a20(r143)<->a48(r260)@1000:move
  cp12:a51(r140)<->a52(r136)@125:shuffle
  cp13:a51(r140)<->a54(r137)@1000:move
  cp14:a12(r141)<->a53(r148)@125:shuffle
  cp15:a56(r167)<->a58(r160)@125:shuffle
  cp16:a56(r167)<->a57(r161)@125:shuffle
  regions=1, blocks=51, points=147
    allocnos=62, copies=17, conflicts=0, ranges=91

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r153 1r234 2r231 3r236 4r230 5r226 6r150 7r228 8r237 9r224 10r151 11r222 12r141 13r133 14r139 15r220 16r216 17r215 18r213 19r249 20r143 21r142 22r209 23r208 24r206 25r202 26r199 27r200 28r145 29r144 30r198 31r197 32r196 33r193 34r138 35r192 36r186 37r187 38r152 39r185 40r183 41r184 42r254 43r180 44r261 45r259 46r258 47r147 48r260 49r257 50r256 51r140 52r136 53r148 54r137 55r169 56r167 57r161 58r160 59r164 60r163 61r158
    modified regnos: 133 136 137 138 139 140 141 142 143 144 145 147 148 150 151 152 153 158 160 161 163 164 167 169 180 183 184 185 186 187 192 193 196 197 198 199 200 202 206 208 209 213 215 216 220 222 224 226 228 230 231 234 236 237 249 254 256 257 258 259 260 261
    border:
    Pressure: GENERAL_REGS=13
    Reg 153 of GENERAL_REGS has 5 regs less
    Reg 234 of GENERAL_REGS has 1 regs less
    Reg 231 of GENERAL_REGS has 1 regs less
    Reg 236 of GENERAL_REGS has 1 regs less
    Reg 230 of GENERAL_REGS has 1 regs less
    Reg 226 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 5 regs less
    Reg 151 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 5 regs less
    Reg 152 of GENERAL_REGS has 5 regs less
    Reg 254 of GENERAL_REGS has 5 regs less
    Reg 180 of GENERAL_REGS has 5 regs less
    Reg 261 of GENERAL_REGS has 2 regs less
    Reg 258 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 256 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
      Pushing a61(r158,l0)
      Pushing a60(r163,l0)
      Pushing a59(r164,l0)
      Pushing a58(r160,l0)
      Pushing a56(r167,l0)
      Pushing a55(r169,l0)
      Pushing a54(r137,l0)
      Pushing a52(r136,l0)
      Pushing a49(r257,l0)
      Pushing a45(r259,l0)
      Pushing a41(r184,l0)
      Pushing a39(r185,l0)
      Pushing a37(r187,l0)
      Pushing a35(r192,l0)
      Pushing a33(r193,l0)
      Pushing a32(r196,l0)
      Pushing a27(r200,l0)
      Pushing a24(r206,l0)
      Pushing a23(r208,l0)
      Pushing a22(r209,l0)
      Pushing a18(r213,l0)
      Pushing a17(r215,l0)
      Pushing a15(r220,l0)
      Pushing a11(r222,l0)
      Pushing a9(r224,l0)
      Pushing a8(r237,l0)
      Pushing a7(r228,l0)
      Pushing a57(r161,l0)
      Pushing a36(r186,l0)
      Pushing a34(r138,l0)
      Pushing a31(r197,l0)
      Pushing a26(r199,l0)
      Pushing a25(r202,l0)
      Pushing a19(r249,l0)
      Pushing a16(r216,l0)
      Pushing a48(r260,l0)
      Pushing a40(r183,l0)
      Pushing a13(r133,l0)
      Pushing a50(r256,l0)
      Pushing a46(r258,l0)
      Pushing a2(r231,l0)
      Pushing a53(r148,l0)
      Pushing a3(r236,l0)
      Pushing a4(r230,l0)
      Pushing a5(r226,l0)
      Pushing a1(r234,l0)
      Pushing a44(r261,l0)
      Pushing a51(r140,l0)
      Pushing a28(r145,l0)(potential spill: pri=740, cost=20000)
      Pushing a30(r198,l0)
      Pushing a29(r144,l0)
      Pushing a14(r139,l0)
      Pushing a21(r142,l0)
      Pushing a42(r254,l0)(potential spill: pri=1034, cost=30000)
      Pushing a6(r150,l0)(potential spill: pri=1333, cost=20000)
      Pushing a47(r147,l0)
      Pushing a12(r141,l0)
      Pushing a38(r152,l0)(potential spill: pri=1666, cost=20000)
      Pushing a43(r180,l0)(potential spill: pri=2105, cost=40000)
      Pushing a0(r153,l0)
      Pushing a10(r151,l0)
      Pushing a20(r143,l0)
      Popping a20(r143,l0)  -- assign reg 4
      Popping a10(r151,l0)  -- assign reg 6
      Popping a0(r153,l0)  -- assign reg 7
      Popping a43(r180,l0)  -- assign reg 8
      Popping a38(r152,l0)  -- assign reg 10
      Popping a12(r141,l0)  -- assign reg 8
      Popping a47(r147,l0)  -- assign reg 8
      Popping a6(r150,l0)  -- assign reg 11
      Popping a42(r254,l0)  -- (memory is more profitable 30000 vs 2147483647) spill
      Popping a21(r142,l0)  -- assign reg 2
      Popping a14(r139,l0)  -- assign reg 1
      Popping a29(r144,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a30(r198,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a28(r145,l0)  -- (memory is more profitable 22000 vs 2147483647) spill
      Popping a51(r140,l0)  -- assign reg 3
      Popping a44(r261,l0)  -- assign reg 8
      Popping a1(r234,l0)  -- assign reg 0
      Popping a5(r226,l0)  -- assign reg 4
      Popping a4(r230,l0)  -- assign reg 8
      Popping a3(r236,l0)  -- assign reg 3
      Popping a53(r148,l0)  -- assign reg 8
      Popping a2(r231,l0)  -- assign reg 10
      Popping a46(r258,l0)  -- assign reg 0
      Popping a50(r256,l0)  -- assign reg 0
      Popping a13(r133,l0)  -- (memory is more profitable 60000 vs 2147483647) spill
      Popping a40(r183,l0)  -- assign reg 2
      Popping a48(r260,l0)  -- assign reg 4
      Popping a16(r216,l0)  -- assign reg 3
      Popping a19(r249,l0)  -- assign reg 2
      Popping a25(r202,l0)  -- assign reg 0
      Popping a26(r199,l0)  -- (memory is more profitable 30000 vs 2147483647) spill
      Popping a31(r197,l0)  -- (memory is more profitable 32000 vs 2147483647) spill
      Popping a34(r138,l0)  -- assign reg 10
      Popping a36(r186,l0)  -- assign reg 2
      Popping a57(r161,l0)  -- assign reg 3
      Popping a7(r228,l0)  -- assign reg 2
      Popping a8(r237,l0)  -- assign reg 12
      Popping a9(r224,l0)  -- assign reg 14
      Popping a11(r222,l0)  -- assign reg 2
      Popping a15(r220,l0)  -- assign reg 3
      Popping a17(r215,l0)  -- assign reg 2
      Popping a18(r213,l0)  -- assign reg 2
      Popping a22(r209,l0)  -- assign reg 2
      Popping a23(r208,l0)  -- assign reg 3
      Popping a24(r206,l0)  -- assign reg 2
      Popping a27(r200,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a32(r196,l0)  -- assign reg 10
      Popping a33(r193,l0)  -- assign reg 3
      Popping a35(r192,l0)  -- assign reg 3
      Popping a37(r187,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a39(r185,l0)  -- assign reg 1
      Popping a41(r184,l0)  -- assign reg 0
      Popping a45(r259,l0)  -- assign reg 1
      Popping a49(r257,l0)  -- assign reg 1
      Popping a52(r136,l0)  -- assign reg 3
      Popping a54(r137,l0)  -- assign reg 3
      Popping a55(r169,l0)  -- assign reg 3
      Popping a56(r167,l0)  -- assign reg 3
      Popping a58(r160,l0)  -- assign reg 2
      Popping a59(r164,l0)  -- assign reg 1
      Popping a60(r163,l0)  -- assign reg 0
      Popping a61(r158,l0)  -- assign reg 3
Disposition:
   13:r133 l0   mem   52:r136 l0     3   54:r137 l0     3   34:r138 l0    10
   14:r139 l0     1   51:r140 l0     3   12:r141 l0     8   21:r142 l0     2
   20:r143 l0     4   29:r144 l0   mem   28:r145 l0   mem   47:r147 l0     8
   53:r148 l0     8    6:r150 l0    11   10:r151 l0     6   38:r152 l0    10
    0:r153 l0     7   61:r158 l0     3   58:r160 l0     2   57:r161 l0     3
   60:r163 l0     0   59:r164 l0     1   56:r167 l0     3   55:r169 l0     3
   43:r180 l0     8   40:r183 l0     2   41:r184 l0     0   39:r185 l0     1
   36:r186 l0     2   37:r187 l0   mem   35:r192 l0     3   33:r193 l0     3
   32:r196 l0    10   31:r197 l0   mem   30:r198 l0   mem   26:r199 l0   mem
   27:r200 l0   mem   25:r202 l0     0   24:r206 l0     2   23:r208 l0     3
   22:r209 l0     2   18:r213 l0     2   17:r215 l0     2   16:r216 l0     3
   15:r220 l0     3   11:r222 l0     2    9:r224 l0    14    5:r226 l0     4
    7:r228 l0     2    4:r230 l0     8    2:r231 l0    10    1:r234 l0     0
    3:r236 l0     3    8:r237 l0    12   19:r249 l0     2   42:r254 l0   mem
   50:r256 l0     0   49:r257 l0     1   46:r258 l0     0   45:r259 l0     1
   48:r260 l0     4   44:r261 l0     8
New iteration of spill/restore move
+++Costs: overall 246000, reg -8000, mem 254000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 3, 13, dead_or_set: 1, 151
insn=2, live_throughout: 2, 3, 13, 151, dead_or_set: 0, 150
insn=4, live_throughout: 3, 13, 150, 151, dead_or_set: 2, 152
insn=10, live_throughout: 3, 13, 150, 151, 152, dead_or_set: 148
insn=5, live_throughout: 13, 148, 150, 151, 152, dead_or_set: 3, 153
insn=410, live_throughout: 13, 148, 150, 151, 152, 153, dead_or_set: 158
insn=15, live_throughout: 13, 148, 150, 151, 152, 153, dead_or_set: 158
insn=16, live_throughout: 13, 148, 150, 151, 152, 153, dead_or_set: 
insn=23, live_throughout: 13, 148, 150, 151, 152, 153, dead_or_set: 163
insn=19, live_throughout: 13, 148, 150, 151, 152, 153, 163, dead_or_set: 160
insn=24, live_throughout: 13, 148, 150, 151, 152, 153, 160, 163, dead_or_set: 164
insn=22, live_throughout: 13, 148, 150, 151, 152, 153, 160, 163, 164, dead_or_set: 161
insn=26, live_throughout: 13, 148, 150, 151, 152, 153, 160, 161, dead_or_set: 163, 164
insn=27, live_throughout: 13, 148, 150, 151, 152, 153, 160, 161, dead_or_set: 
insn=29, live_throughout: 13, 148, 150, 151, 152, 153, 160, dead_or_set: 161
insn=30, live_throughout: 13, 148, 150, 151, 152, 153, 160, 161, dead_or_set: 
insn=32, live_throughout: 13, 148, 150, 151, 152, 153, dead_or_set: 160, 161, 167
insn=34, live_throughout: 13, 148, 150, 151, 152, 153, dead_or_set: 167
insn=35, live_throughout: 13, 148, 150, 151, 152, 153, dead_or_set: 
insn=36, live_throughout: 13, 148, 150, 151, 152, 153, dead_or_set: 
insn=38, live_throughout: 13, 148, 150, 151, 152, 153, dead_or_set: 143
insn=41, live_throughout: 13, 143, 148, 150, 151, 152, 153, dead_or_set: 169
insn=42, live_throughout: 13, 143, 148, 150, 151, 152, 153, 169, dead_or_set: 
insn=46, live_throughout: 13, 150, 151, 153, dead_or_set: 169
insn=378, live_throughout: 13, 150, 151, 153, dead_or_set: 
insn=49, live_throughout: 13, 143, 148, 150, 151, 152, 153, dead_or_set: 
insn=54, live_throughout: 13, 143, 148, 150, 151, 152, 153, dead_or_set: 137
insn=56, live_throughout: 13, 143, 148, 150, 151, 152, 153, dead_or_set: 137, 140
insn=51, live_throughout: 13, 140, 143, 150, 151, 152, 153, dead_or_set: 141, 148
insn=57, live_throughout: 13, 140, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=58, live_throughout: 13, 140, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=60, live_throughout: 13, 141, 143, 150, 151, 152, 153, dead_or_set: 136
insn=62, live_throughout: 13, 141, 143, 150, 151, 152, 153, dead_or_set: 136, 140
insn=63, live_throughout: 13, 140, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=65, live_throughout: 13, 140, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=66, live_throughout: 13, 140, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=69, live_throughout: 13, 140, 141, 150, 151, 152, 153, dead_or_set: 0, 1, 143
insn=70, live_throughout: 0, 1, 13, 140, 141, 150, 151, 152, 153, dead_or_set: 2
insn=68, live_throughout: 0, 1, 2, 13, 150, 151, 152, 153, dead_or_set: 140, 141
insn=71, live_throughout: 13, 141, 150, 151, 152, 153, dead_or_set: 0, 1, 2, 14
insn=355, live_throughout: 1, 13, 141, 150, 151, 152, 153, dead_or_set: 0, 256
insn=356, live_throughout: 13, 141, 150, 151, 152, 153, 256, dead_or_set: 1, 257
insn=399, live_throughout: 13, 141, 150, 151, 152, 153, 256, 257, dead_or_set: 260
insn=400, live_throughout: 13, 141, 150, 151, 152, 153, 257, dead_or_set: 256, 260
insn=401, live_throughout: 13, 141, 150, 151, 152, 153, 260, dead_or_set: 257, 260
insn=402, live_throughout: 13, 141, 150, 151, 152, 153, dead_or_set: 143, 260
insn=74, live_throughout: 13, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=76, live_throughout: 13, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=77, live_throughout: 13, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=79, live_throughout: 13, 141, 143, 150, 151, 152, 153, dead_or_set: 139
insn=380, live_throughout: 13, 139, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=82, live_throughout: 13, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=84, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 141, 147
insn=86, live_throughout: 13, 143, 147, 150, 151, 152, 153, dead_or_set: 
insn=87, live_throughout: 13, 143, 147, 150, 151, 152, 153, dead_or_set: 
insn=89, live_throughout: 13, 143, 147, 150, 151, 152, 153, dead_or_set: 
insn=90, live_throughout: 13, 143, 147, 150, 151, 152, 153, dead_or_set: 
insn=93, live_throughout: 13, 143, 147, 150, 151, 152, 153, dead_or_set: 2
insn=92, live_throughout: 2, 13, 143, 147, 150, 151, 152, 153, dead_or_set: 0, 1
insn=94, live_throughout: 13, 143, 147, 150, 151, 152, 153, dead_or_set: 0, 1, 2, 14
insn=360, live_throughout: 0, 1, 13, 143, 147, 150, 151, 152, 153, dead_or_set: 254
insn=99, live_throughout: 0, 1, 13, 143, 150, 151, 152, 153, dead_or_set: 2, 147
insn=361, live_throughout: 1, 2, 13, 143, 150, 151, 152, 153, dead_or_set: 0, 254
insn=362, live_throughout: 2, 13, 143, 150, 151, 152, 153, 254, dead_or_set: 1, 254
insn=98, live_throughout: 2, 13, 150, 151, 152, 153, 254, dead_or_set: 0, 1, 143
insn=100, live_throughout: 13, 150, 151, 152, 153, 254, dead_or_set: 0, 1, 2, 14
insn=367, live_throughout: 1, 13, 150, 151, 152, 153, 254, dead_or_set: 0, 258
insn=368, live_throughout: 13, 150, 151, 152, 153, 254, 258, dead_or_set: 1, 259
insn=404, live_throughout: 13, 150, 151, 152, 153, 254, 258, 259, dead_or_set: 261
insn=405, live_throughout: 13, 150, 151, 152, 153, 254, 259, dead_or_set: 258, 261
insn=406, live_throughout: 13, 150, 151, 152, 153, 254, 261, dead_or_set: 259, 261
insn=104, live_throughout: 13, 150, 151, 152, 153, 254, 261, dead_or_set: 2, 3
insn=407, live_throughout: 2, 3, 13, 150, 151, 152, 153, 254, dead_or_set: 180, 261
insn=103, live_throughout: 2, 3, 13, 150, 151, 152, 153, 180, 254, dead_or_set: 0, 1
insn=105, live_throughout: 13, 150, 151, 152, 153, 180, 254, dead_or_set: 0, 1, 2, 3, 14
insn=107, live_throughout: 13, 150, 151, 152, 153, 180, 254, dead_or_set: 0
insn=108, live_throughout: 13, 150, 151, 152, 153, 180, 254, dead_or_set: 
insn=109, live_throughout: 13, 150, 151, 152, 153, 254, dead_or_set: 180
insn=110, live_throughout: 13, 150, 151, 152, 153, 180, 254, dead_or_set: 
insn=112, live_throughout: 13, 150, 151, 152, 153, dead_or_set: 143, 180, 254
insn=382, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 
insn=115, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 
insn=117, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 0, 1
insn=118, live_throughout: 0, 1, 13, 143, 150, 151, 152, 153, dead_or_set: 2, 3
insn=119, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 0, 1, 2, 3, 14
insn=121, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 0
insn=122, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 
insn=123, live_throughout: 13, 150, 151, 152, 153, dead_or_set: 143
insn=125, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 
insn=127, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 184
insn=128, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 183, 184
insn=131, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 183, 185
insn=132, live_throughout: 13, 143, 150, 151, 152, 153, 185, dead_or_set: 
insn=134, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 139, 185
insn=135, live_throughout: 13, 139, 143, 150, 151, 152, 153, dead_or_set: 141
insn=384, live_throughout: 13, 139, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=138, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 
insn=140, live_throughout: 13, 143, 150, 151, 152, 153, dead_or_set: 139
insn=141, live_throughout: 13, 139, 143, 150, 151, 152, 153, dead_or_set: 141
insn=142, live_throughout: 13, 139, 141, 143, 150, 151, 152, 153, dead_or_set: 
insn=145, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 138, 152
insn=146, live_throughout: 13, 138, 139, 141, 143, 150, 151, 153, dead_or_set: 
insn=148, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 187
insn=149, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 186, 187
insn=152, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 186
insn=153, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 
insn=155, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 142
insn=386, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=158, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 
insn=160, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 142
insn=388, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=163, live_throughout: 13, 138, 139, 141, 143, 150, 151, 153, dead_or_set: 
insn=165, live_throughout: 13, 138, 139, 141, 143, 150, 151, 153, dead_or_set: 
insn=166, live_throughout: 13, 138, 139, 141, 143, 150, 151, 153, dead_or_set: 
insn=171, live_throughout: 13, 138, 139, 141, 143, 150, 151, 153, dead_or_set: 192
insn=173, live_throughout: 13, 138, 139, 141, 143, 150, 151, 153, dead_or_set: 192, 193
insn=177, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 138, 193, 196
insn=178, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 196
insn=179, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 
insn=181, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 142
insn=390, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=184, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 
insn=186, live_throughout: 13, 139, 141, 143, 150, 151, 153, dead_or_set: 142
insn=187, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=189, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 197
insn=190, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, 197, dead_or_set: 
insn=191, live_throughout: 13, 24, 139, 141, 142, 143, 150, 151, 153, 197, dead_or_set: 
insn=193, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, 197, dead_or_set: 
insn=194, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 197
insn=195, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=351, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=203, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 145
insn=409, live_throughout: 13, 139, 141, 142, 143, 145, 150, 151, 153, dead_or_set: 198
insn=205, live_throughout: 13, 139, 141, 142, 145, 150, 151, 153, dead_or_set: 143, 144, 198
insn=207, live_throughout: 13, 139, 141, 144, 145, 150, 151, 153, dead_or_set: 142
insn=206, live_throughout: 13, 139, 141, 142, 150, 151, 153, dead_or_set: 143, 144, 145
insn=202, live_throughout: 13, 139, 142, 143, 150, 151, 153, dead_or_set: 141
insn=208, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=210, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 200
insn=211, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 199, 200
insn=214, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 199
insn=215, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=217, live_throughout: 13, 139, 141, 142, 143, 150, 151, dead_or_set: 153
insn=218, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=220, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 202
insn=221, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, 202, dead_or_set: 
insn=222, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, 202, dead_or_set: 
insn=227, live_throughout: 13, 150, 151, 153, 202, dead_or_set: 142
insn=224, live_throughout: 13, 24, 150, 151, 202, dead_or_set: 153
insn=228, live_throughout: 13, 150, 151, 153, 202, dead_or_set: 
insn=232, live_throughout: 13, 150, 151, 153, dead_or_set: 202
insn=233, live_throughout: 13, 150, 151, 153, dead_or_set: 206
insn=234, live_throughout: 13, 150, 151, 153, dead_or_set: 206
insn=392, live_throughout: 13, 150, 151, 153, dead_or_set: 
insn=237, live_throughout: 13, 150, 151, 153, dead_or_set: 
insn=239, live_throughout: 13, 150, 151, 153, dead_or_set: 208
insn=241, live_throughout: 13, 150, 151, 153, dead_or_set: 208
insn=242, live_throughout: 13, 150, 151, 153, dead_or_set: 209
insn=243, live_throughout: 13, 150, 151, 153, dead_or_set: 209
insn=394, live_throughout: 13, 150, 151, 153, dead_or_set: 
insn=246, live_throughout: 13, 139, 141, 142, 143, 150, 151, 153, dead_or_set: 
insn=248, live_throughout: 13, 139, 141, 150, 151, 153, dead_or_set: 133, 142, 143
insn=265, live_throughout: 13, 133, 139, 141, 150, 151, 153, dead_or_set: 216
insn=250, live_throughout: 13, 133, 139, 141, 150, 151, 153, 216, dead_or_set: 249
insn=373, live_throughout: 13, 133, 139, 141, 150, 151, 153, 216, dead_or_set: 213, 249
insn=374, live_throughout: 13, 133, 139, 150, 151, 153, 216, dead_or_set: 141, 213
insn=262, live_throughout: 13, 133, 139, 141, 150, 151, 153, 216, dead_or_set: 215
insn=266, live_throughout: 13, 133, 139, 141, 150, 151, 153, 215, 216, dead_or_set: 
insn=267, live_throughout: 13, 24, 133, 139, 141, 150, 151, 153, 215, 216, dead_or_set: 
insn=269, live_throughout: 13, 133, 139, 141, 150, 151, 153, 215, 216, dead_or_set: 
insn=270, live_throughout: 13, 133, 139, 141, 150, 151, 153, 215, 216, dead_or_set: 
insn=271, live_throughout: 13, 133, 139, 141, 150, 151, 153, 215, 216, dead_or_set: 
insn=276, live_throughout: 13, 133, 139, 141, 150, 151, 153, 215, dead_or_set: 
insn=278, live_throughout: 13, 133, 139, 141, 150, 151, 153, 215, dead_or_set: 216
insn=279, live_throughout: 13, 133, 139, 141, 150, 151, 153, 215, 216, dead_or_set: 
insn=281, live_throughout: 13, 133, 139, 141, 150, 151, 153, dead_or_set: 215, 216, 220
insn=283, live_throughout: 13, 133, 139, 141, 150, 151, 153, dead_or_set: 220
insn=284, live_throughout: 13, 133, 139, 141, 150, 151, 153, dead_or_set: 
insn=286, live_throughout: 13, 133, 141, 150, 151, 153, dead_or_set: 139
insn=287, live_throughout: 13, 133, 141, 150, 151, 153, dead_or_set: 
insn=289, live_throughout: 13, 133, 141, 150, 151, dead_or_set: 153
insn=290, live_throughout: 13, 133, 141, 150, 151, 153, dead_or_set: 
insn=293, live_throughout: 13, 141, 150, 151, 153, dead_or_set: 133, 222
insn=292, live_throughout: 13, 150, 151, 153, 222, dead_or_set: 141
insn=294, live_throughout: 13, 150, 151, 153, dead_or_set: 222
insn=295, live_throughout: 13, 150, 151, 153, dead_or_set: 
insn=298, live_throughout: 13, 150, 151, 153, dead_or_set: 224
insn=375, live_throughout: 13, 150, 151, 153, 224, dead_or_set: 226
insn=311, live_throughout: 13, 150, 151, 153, 224, dead_or_set: 237
insn=376, live_throughout: 13, 150, 151, 153, 224, 237, dead_or_set: 230
insn=303, live_throughout: 13, 150, 151, 153, 224, 237, dead_or_set: 228
insn=377, live_throughout: 13, 150, 151, 153, 224, 228, 237, dead_or_set: 234
insn=309, live_throughout: 13, 150, 153, 224, 228, 237, dead_or_set: 151, 236
insn=300, live_throughout: 13, 150, 153, 228, 236, 237, dead_or_set: 224, 226
insn=312, live_throughout: 13, 150, 153, 226, 228, 236, dead_or_set: 234, 237
insn=301, live_throughout: 13, 150, 153, 226, 228, 234, 236, dead_or_set: 226
insn=305, live_throughout: 13, 150, 153, 226, 234, 236, dead_or_set: 228, 230
insn=318, live_throughout: 13, 153, 226, 230, 234, 236, dead_or_set: 2, 150
insn=306, live_throughout: 2, 13, 153, 226, 230, 234, 236, dead_or_set: 230
insn=313, live_throughout: 2, 13, 153, 226, 230, 236, dead_or_set: 234
insn=307, live_throughout: 2, 13, 153, 234, 236, dead_or_set: 226, 230, 231
insn=315, live_throughout: 2, 13, 153, 231, 234, dead_or_set: 234, 236
insn=317, live_throughout: 2, 13, 153, dead_or_set: 0, 1, 231, 234
insn=319, live_throughout: 13, 153, dead_or_set: 0, 1, 2, 14
insn=324, live_throughout: 13, 14, dead_or_set: 0, 153
insn=330, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 158: (insn_list:REG_DEP_TRUE 410 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 23 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 24 (nil))
init_insns for 184: (insn_list:REG_DEP_TRUE 127 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 148 (nil))
init_insns for 198: (insn_list:REG_DEP_TRUE 409 (nil))
init_insns for 200: (insn_list:REG_DEP_TRUE 210 (nil))
init_insns for 202: (insn_list:REG_DEP_TRUE 220 (nil))
init_insns for 206: (insn_list:REG_DEP_TRUE 233 (nil))
init_insns for 208: (insn_list:REG_DEP_TRUE 239 (nil))
init_insns for 209: (insn_list:REG_DEP_TRUE 242 (nil))
init_insns for 222: (insn_list:REG_DEP_TRUE 294 (nil))
      Coalescing spilled allocnos a42r254->a13r133
      Coalescing spilled allocnos a31r197->a13r133
      Coalescing spilled allocnos a26r199->a13r133
      Coalescing spilled allocnos a29r144->a13r133
      Slot 1 (freq,size): a29r144(2000,8) a26r199(3000,8) a31r197(3000,8) a42r254(4000,8) a13r133(7000,8)
      Slot 2 (freq,size): a28r145(2000,8)
      Assigning 145(freq=2000) a new slot 1
      Assigning 133(freq=7000) a new slot 0
      Assigning 144(freq=2000) slot 0 of 133
      Assigning 197(freq=3000) slot 0 of 133 144
      Assigning 199(freq=3000) slot 0 of 133 144 197
      Assigning 254(freq=6000) slot 0 of 133 144 197 199
changing reg in insn 60
changing reg in insn 62
changing reg in insn 54
changing reg in insn 56
changing reg in insn 145
changing reg in insn 177
changing reg in insn 165
changing reg in insn 134
changing reg in insn 140
changing reg in insn 79
changing reg in insn 135
changing reg in insn 286
changing reg in insn 62
changing reg in insn 56
changing reg in insn 70
changing reg in insn 68
changing reg in insn 65
changing reg in insn 57
changing reg in insn 135
changing reg in insn 374
changing reg in insn 202
changing reg in insn 141
changing reg in insn 68
changing reg in insn 51
changing reg in insn 262
changing reg in insn 374
changing reg in insn 221
changing reg in insn 202
changing reg in insn 84
changing reg in insn 76
changing reg in insn 68
changing reg in insn 221
changing reg in insn 207
changing reg in insn 186
changing reg in insn 181
changing reg in insn 160
changing reg in insn 155
changing reg in insn 248
changing reg in insn 207
changing reg in insn 189
changing reg in insn 402
changing reg in insn 112
changing reg in insn 206
changing reg in insn 123
changing reg in insn 38
changing reg in insn 248
changing reg in insn 211
changing reg in insn 205
changing reg in insn 203
changing reg in insn 189
changing reg in insn 149
changing reg in insn 128
changing reg in insn 117
changing reg in insn 98
changing reg in insn 92
changing reg in insn 69
changing reg in insn 211
changing reg in insn 205
changing reg in insn 149
changing reg in insn 128
changing reg in insn 84
changing reg in insn 99
changing reg in insn 89
changing reg in insn 86
changing reg in insn 93
changing reg in insn 10
changing reg in insn 15
changing reg in insn 2
changing reg in insn 318
changing reg in insn 3
changing reg in insn 241
changing reg in insn 232
changing reg in insn 46
changing reg in insn 311
changing reg in insn 309
changing reg in insn 303
changing reg in insn 298
changing reg in insn 294
changing reg in insn 292
changing reg in insn 243
changing reg in insn 234
changing reg in insn 171
changing reg in insn 38
changing reg in insn 24
changing reg in insn 23
changing reg in insn 10
changing reg in insn 293
changing reg in insn 24
changing reg in insn 23
changing reg in insn 4
changing reg in insn 145
changing reg in insn 145
changing reg in insn 289
changing reg in insn 224
changing reg in insn 217
changing reg in insn 5
changing reg in insn 19
changing reg in insn 324
changing reg in insn 289
changing reg in insn 224
changing reg in insn 217
changing reg in insn 410
changing reg in insn 15
changing reg in insn 19
changing reg in insn 32
changing reg in insn 29
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 24
changing reg in insn 26
changing reg in insn 34
changing reg in insn 41
changing reg in insn 407
changing reg in insn 109
changing reg in insn 103
changing reg in insn 112
changing reg in insn 128
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 134
changing reg in insn 149
changing reg in insn 171
changing reg in insn 173
changing reg in insn 173
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 220
changing reg in insn 221
changing reg in insn 233
changing reg in insn 234
changing reg in insn 239
changing reg in insn 242
changing reg in insn 243
changing reg in insn 373
changing reg in insn 374
changing reg in insn 262
changing reg in insn 281
changing reg in insn 278
changing reg in insn 265
changing reg in insn 283
changing reg in insn 293
changing reg in insn 294
changing reg in insn 298
changing reg in insn 300
changing reg in insn 375
changing reg in insn 300
changing reg in insn 307
changing reg in insn 301
changing reg in insn 303
changing reg in insn 305
changing reg in insn 376
changing reg in insn 305
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 317
changing reg in insn 377
changing reg in insn 317
changing reg in insn 313
changing reg in insn 315
changing reg in insn 312
changing reg in insn 309
changing reg in insn 313
changing reg in insn 315
changing reg in insn 311
changing reg in insn 312
changing reg in insn 250
changing reg in insn 373
changing reg in insn 373
changing reg in insn 355
changing reg in insn 400
changing reg in insn 356
changing reg in insn 401
changing reg in insn 367
changing reg in insn 405
changing reg in insn 368
changing reg in insn 406
changing reg in insn 399
changing reg in insn 402
changing reg in insn 401
changing reg in insn 400
changing reg in insn 404
changing reg in insn 407
changing reg in insn 406
changing reg in insn 405
Spilling for insn 26.
Spilling for insn 46.
Spilling for insn 361.
Spilling for insn 362.
Spilling for insn 112.
Using reg 2 for reload 0
Spilling for insn 149.
Using reg 10 for reload 0
Spilling for insn 152.
Using reg 0 for reload 0
Spilling for insn 189.
Using reg 10 for reload 0
Spilling for insn 190.
Using reg 0 for reload 0
Spilling for insn 194.
Using reg 0 for reload 0
Spilling for insn 203.
Using reg 10 for reload 0
Spilling for insn 205.
Using reg 10 for reload 0
Using reg 0 for reload 1
Spilling for insn 206.
Using reg 0 for reload 1
Spilling for insn 211.
Using reg 0 for reload 0
Using reg 10 for reload 1
Spilling for insn 214.
Using reg 1 for reload 1
Using reg 0 for reload 2
Spilling for insn 227.
Using reg 1 for reload 0
Spilling for insn 232.
Spilling for insn 234.
Spilling for insn 241.
Spilling for insn 243.
Spilling for insn 248.
Using reg 0 for reload 0
Spilling for insn 250.
Using reg 1 for reload 0
Spilling for insn 373.
Using reg 1 for reload 0
Spilling for insn 266.
Using reg 1 for reload 0
Spilling for insn 270.
Using reg 1 for reload 0
Spilling for insn 293.
Spilling for insn 292.
Spilling for insn 294.
Spilling for insn 307.
      Spill 139(a14), cost=50000: reassign to 12
changing reg in insn 79
changing reg in insn 140
changing reg in insn 134
changing reg in insn 286
changing reg in insn 135
      Spill 150(a6), cost=20000
      Spilled regs 150
        Try assign 133(a13), cost=60000: reassign to 10
changing reg in insn 248
changing reg in insn 293
        Try assign 254(a42), cost=30000
        Try assign 199(a26), cost=30000
        Try assign 197(a31), cost=30000
        Try assign 200(a27), cost=20000
        Try assign 145(a28), cost=20000
        Try assign 144(a29), cost=20000
        Try assign 198(a30), cost=20000
        Try assign 187(a37), cost=20000: reassign to 0
changing reg in insn 148
changing reg in insn 149
 Register 133 now in 10.

 Register 139 now in 12.

changing reg in insn 2
changing reg in insn 318
      Assigning 150(freq=2000) a new slot 2
 Register 150 now on stack.

 Register 187 now in 0.

Spilling for insn 2.
Spilling for insn 26.
Spilling for insn 46.
Spilling for insn 361.
Spilling for insn 362.
Spilling for insn 112.
Using reg 2 for reload 0
Spilling for insn 152.
Using reg 1 for reload 0
Spilling for insn 189.
Using reg 0 for reload 0
Spilling for insn 190.
Using reg 1 for reload 0
Spilling for insn 194.
Using reg 1 for reload 0
Spilling for insn 203.
Using reg 0 for reload 0
Spilling for insn 205.
Using reg 0 for reload 0
Using reg 10 for reload 1
Spilling for insn 206.
Using reg 0 for reload 1
Spilling for insn 211.
Using reg 0 for reload 0
Using reg 10 for reload 1
Spilling for insn 214.
Using reg 1 for reload 1
Using reg 0 for reload 2
Spilling for insn 227.
Using reg 1 for reload 0
Spilling for insn 232.
Spilling for insn 234.
Spilling for insn 241.
Spilling for insn 243.
Spilling for insn 248.
Spilling for insn 292.
Spilling for insn 294.
Spilling for insn 307.
deleting insn with uid = 409.
deleting insn with uid = 210.

Reloads for insn # 2
Reload 0: reload_out (SI) = (reg/v:SI 150 [ dd ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 150 [ dd ])

Reloads for insn # 26
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 46
Reload 0: reload_out (HI) = (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])

Reloads for insn # 361
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 254 [ D.5449 ]) 0)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 254 [ D.5449 ]) 0)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 362
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 254 [ D.5449 ]) 4)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 254 [ D.5449 ]) 4)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 112
Reload 0: reload_in (DI) = (reg:DI 254 [ D.5449 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 254 [ D.5449 ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 152
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 189
Reload 0: reload_in (DI) = (reg/v:DI 2 r2 [orig:142 incr ] [142])
	reload_out (DI) = (reg:DI 197)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 2 r2 [orig:142 incr ] [142])
	reload_out_reg: (reg:DI 197)
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 190
Reload 0: reload_in (SI) = (subreg:SI (reg:DI 197) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg:DI 197) 4)
	reload_reg_rtx: (reg:SI 11 fp)

Reloads for insn # 194
Reload 0: reload_in (SI) = (subreg:SI (reg:DI 197) 0)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg:DI 197) 0)
	reload_reg_rtx: (reg:SI 10 sl)

Reloads for insn # 203
Reload 0: reload_out (DI) = (reg:DI 145 [ D.4150 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 145 [ D.4150 ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 205
Reload 0: reload_out (DI) = (reg:DI 144 [ D.4151 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 144 [ D.4151 ])
	reload_reg_rtx: (reg:DI 10 sl)
Reload 1: reload_in (DI) = (const_int 1 [0x1])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 198)
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 206
Reload 0: reload_in (DI) = (reg:DI 10 sl)
	reload_out (DI) = (reg/v:DI 4 r4 [orig:143 significand ] [143])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 144 [ D.4151 ])
	reload_out_reg: (reg/v:DI 4 r4 [orig:143 significand ] [143])
	reload_reg_rtx: (reg/v:DI 4 r4 [orig:143 significand ] [143])
Reload 1: reload_in (DI) = (reg:DI 145 [ D.4150 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 145 [ D.4150 ])
	reload_reg_rtx: (reg:DI 10 sl)
deleting insn with uid = 418.
changing reg in insn 206

Reloads for insn # 211
Reload 0: reload_out (DI) = (reg:DI 199)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 199)
	reload_reg_rtx: (reg:DI 0 r0)
Reload 1: reload_in (DI) = (const_int 2047 [0x7ff])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 200)
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 214
Reload 0: GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
Reload 1: reload_in (SI) = (subreg:SI (reg:DI 199) 0)
	reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg:DI 199) 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 0 r0)
Reload 2: reload_in (SI) = (subreg:SI (reg:DI 199) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (subreg:SI (reg:DI 199) 4)
	reload_reg_rtx: (reg:SI 1 r1)
deleting insn with uid = 422.

Reloads for insn # 227
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 11 fp)

Reloads for insn # 232
Reload 0: reload_out (HI) = (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])

Reloads for insn # 234
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])

Reloads for insn # 241
Reload 0: reload_out (HI) = (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])

Reloads for insn # 243
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])

Reloads for insn # 248
Reload 0: reload_in (DI) = (reg/v:DI 2 r2 [orig:142 incr ] [142])
	reload_out (DI) = (reg/v:DI 10 sl [orig:133 significand.542 ] [133])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 2 r2 [orig:142 incr ] [142])
	reload_out_reg: (reg/v:DI 10 sl [orig:133 significand.542 ] [133])
	reload_reg_rtx: (reg/v:DI 10 sl [orig:133 significand.542 ] [133])

Reloads for insn # 292
Reload 0: reload_out (HI) = (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])

Reloads for insn # 294
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])

Reloads for insn # 307
Reload 0: reload_in (DI) = (reg:DI 4 r4 [226])
	reload_out (DI) = (reg:DI 10 sl [231])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 4 r4 [226])
	reload_out_reg: (reg:DI 10 sl [231])
	reload_reg_rtx: (reg:DI 10 sl [231])
deleting insn with uid = 56.
deleting insn with uid = 355.
deleting insn with uid = 356.
deleting insn with uid = 399.
deleting insn with uid = 402.
deleting insn with uid = 360.
deleting insn with uid = 361.
deleting insn with uid = 362.
deleting insn with uid = 367.
deleting insn with uid = 368.
deleting insn with uid = 404.
deleting insn with uid = 407.
+++Overall after reload 186000


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 100.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 319.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 51 n_edges 77 count 95 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 51 n_edges 77 count 100 (    2)


vfp_double_normaliseround

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={26d,25u} r1={25d,19u} r2={28d,23u} r3={34d,29u} r4={8d,18u,4d} r5={8d,17u,4d} r6={1d,16u,3d} r7={4d,5u} r8={12d,17u,1d} r9={4d,3u} r10={12d,17u} r11={10d,13u} r12={11d,3u} r13={1d,64u} r14={8d,2u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={43d,28u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 1206{895d,299u,12e} in 180{174 regular + 6 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 7 12 2 NOTE_INSN_DELETED)

(note 12 11 13 2 NOTE_INSN_DELETED)

(note 13 12 3 2 NOTE_INSN_DELETED)

(insn 3 13 2 2 arch/arm/vfp/vfpdouble.c:71 (set (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
        (reg:SI 1 r1 [ vd ])) 167 {*arm_movsi_insn} (nil))

(insn 2 3 4 2 arch/arm/vfp/vfpdouble.c:71 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-20 S4 A32])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 4 2 10 2 arch/arm/vfp/vfpdouble.c:71 (set (reg/v:SI 10 sl [orig:152 fpscr ] [152])
        (reg:SI 2 r2 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(insn 10 4 5 2 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 8 r8 [orig:148 D.4105 ] [148])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 5 10 410 2 arch/arm/vfp/vfpdouble.c:71 (set (reg/v:SI 7 r7 [orig:153 exceptions ] [153])
        (reg:SI 3 r3 [ exceptions ])) 167 {*arm_movsi_insn} (nil))

(insn 410 5 15 2 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 3 r3 [158])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 15 410 16 2 arch/arm/vfp/vfpdouble.c:81 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:148 D.4105 ] [148])
            (reg:SI 3 r3 [158]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 17 2 arch/arm/vfp/vfpdouble.c:81 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  6 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 1 [r1] 24 [cc]

;; Pred edge  2 [28.0%]  (fallthru)
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 18 17 25 3 NOTE_INSN_DELETED)

(note 25 18 23 3 NOTE_INSN_DELETED)

(insn 23 25 19 3 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 0 r0 [orig:163 <variable>.significand ] [163])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])
        (nil)))

(insn 19 23 24 3 arch/arm/vfp/vfpdouble.c:81 discrim 1 (parallel [
            (set (reg:SI 2 r2 [160])
                (ne:SI (reg/v:SI 7 r7 [orig:153 exceptions ] [153])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 24 19 22 3 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 1 r1 [orig:164 <variable>.significand+4 ] [164])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])
        (nil)))

(insn 22 24 26 3 arch/arm/vfp/vfpdouble.c:81 discrim 1 (set (reg:QI 3 r3 [161])
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 26 22 27 3 arch/arm/vfp/vfpdouble.c:81 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 0 r0 [orig:163 <variable>.significand ] [163])
                        (reg:SI 1 r1 [orig:164 <variable>.significand+4 ] [164]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 27 26 332 3 arch/arm/vfp/vfpdouble.c:81 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 2 [r2] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 332 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 29 332 30 4 arch/arm/vfp/vfpdouble.c:81 (set (reg:QI 3 r3 [161])
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 30 29 333 5 112 "" [1 uses])

(note 333 30 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 31 333 33 5 NOTE_INSN_DELETED)

(note 33 31 32 5 NOTE_INSN_DELETED)

(insn 32 33 34 5 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 3 r3 [167])
        (ior:SI (reg:SI 2 r2 [160])
            (reg:SI 3 r3 [161]))) 89 {*arm_iorsi3} (nil))

(insn 34 32 35 5 arch/arm/vfp/vfpdouble.c:81 (set (reg:CC_Z 24 cc)
        (compare:CC_Z (reg:QI 3 r3 [167])
            (const_int 0 [0x0]))) 151 {*compareqi_eq0} (nil))

(jump_insn 35 34 36 5 arch/arm/vfp/vfpdouble.c:81 (set (pc)
        (if_then_else (ne (reg:CC_Z 24 cc)
                (const_int 0 [0x0]))
            (label_ref 295)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 50 6)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  50 [50.0%] 
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 2 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
;; Pred edge  5 [50.0%]  (fallthru)
(code_label 36 35 37 6 110 "" [1 uses])

(note 37 36 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 39 37 40 6 NOTE_INSN_DELETED)

(note 40 39 38 6 NOTE_INSN_DELETED)

(insn 38 40 41 6 arch/arm/vfp/vfpdouble.c:87 (set (reg/v:DI 4 r4 [orig:143 significand ] [143])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 41 38 42 6 arch/arm/vfp/vfpdouble.c:87 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 4 r4 [orig:143 significand ] [143])
                        (reg:SI 5 r5 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [orig:169 significand ] [169])
                (ior:SI (reg:SI 4 r4 [orig:143 significand ] [143])
                    (reg:SI 5 r5 [ significand+4 ])))
        ]) 91 {*iorsi3_compare0} (nil))

(jump_insn 42 41 43 6 arch/arm/vfp/vfpdouble.c:87 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	
;; live  in  	 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 43 42 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 43 378 7 arch/arm/vfp/vfpdouble.c:88 (set (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])
        (reg:HI 3 r3 [orig:169 significand ] [169])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 378 46 379 7 arch/arm/vfp/vfpdouble.c:89 (set (pc)
        (label_ref 295)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 50)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  50 [100.0%] 

(barrier 379 378 49)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  6 [61.0%] 
(code_label 49 379 50 8 113 "" [1 uses])

(note 50 49 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 52 50 55 8 NOTE_INSN_DELETED)

(note 55 52 54 8 NOTE_INSN_DELETED)

(insn 54 55 51 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 3 r3 [orig:137 ret ] [137])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 5 r5 [ significand+4 ])
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1139895)) -1 (nil))

(insn 51 54 57 8 arch/arm/vfp/vfpdouble.c:92 (set (reg/v:SI 8 r8 [orig:141 exponent ] [141])
        (sign_extend:SI (reg:HI 8 r8 [orig:148 D.4105 ] [148]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 57 51 58 8 arch/arm/vfp/vfpdouble.c:96 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:140 shift ] [140])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 58 57 59 8 arch/arm/vfp/vfpdouble.c:96 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  9 [28.0%]  (fallthru)
;; Succ edge  10 [72.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  8 [28.0%]  (fallthru)
(note 59 58 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 61 59 60 9 NOTE_INSN_DELETED)

(insn 60 61 62 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 3 r3 [orig:136 ret ] [136])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 4 r4 [orig:143 significand ] [143])
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1139895)) -1 (nil))

(insn 62 60 63 9 arch/arm/vfp/vfpdouble.c:97 (set (reg/v:SI 3 r3 [orig:140 shift ] [140])
        (plus:SI (reg/v:SI 3 r3 [orig:136 ret ] [136])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [72.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 63 62 64 10 114 "" [1 uses])

(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 65 64 66 10 arch/arm/vfp/vfpdouble.c:98 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:140 shift ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 66 65 67 10 arch/arm/vfp/vfpdouble.c:98 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  11 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  10 [50.0%]  (fallthru)
(note 67 66 352 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 352 67 353 11 NOTE_INSN_DELETED)

(note 353 352 69 11 NOTE_INSN_DELETED)

(insn 69 353 70 11 arch/arm/vfp/vfpdouble.c:100 (set (reg:DI 0 r0)
        (reg/v:DI 4 r4 [orig:143 significand ] [143])) 163 {*arm_movdi} (nil))

(insn 70 69 68 11 arch/arm/vfp/vfpdouble.c:100 (set (reg:SI 2 r2)
        (reg/v:SI 3 r3 [orig:140 shift ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 68 70 71 11 arch/arm/vfp/vfpdouble.c:99 (set (reg/v:SI 8 r8 [orig:141 exponent ] [141])
        (minus:SI (reg/v:SI 8 r8 [orig:141 exponent ] [141])
            (reg/v:SI 3 r3 [orig:140 shift ] [140]))) 28 {*arm_subsi3_insn} (nil))

(call_insn/u 71 68 400 11 arch/arm/vfp/vfpdouble.c:100 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 400 71 401 11 arch/arm/vfp/vfpdouble.c:100 (set (reg:SI 4 r4 [orig:260 significand ] [260])
        (reg:SI 0 r0 [orig:256 significand ] [256])) 167 {*arm_movsi_insn} (nil))

(insn 401 400 74 11 arch/arm/vfp/vfpdouble.c:100 (set (reg:SI 5 r5 [ significand+4 ])
        (reg:SI 1 r1 [orig:257 significand+4 ] [257])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  10 [50.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 74 401 75 12 115 "" [1 uses])

(note 75 74 76 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 76 75 77 12 arch/arm/vfp/vfpdouble.c:113 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:141 exponent ] [141])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 77 76 78 12 arch/arm/vfp/vfpdouble.c:113 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 14 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  14 [50.0%] 
;; Succ edge  13 [50.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 12 [ip]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 12 [ip]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 78 77 79 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 79 78 380 13 arch/arm/vfp/vfpdouble.c:113 (set (reg/v:SI 12 ip [orig:139 underflow ] [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 380 79 381 13 (set (pc)
        (label_ref 142)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 381 380 82)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  12 [50.0%] 
(code_label 82 381 83 14 116 "" [1 uses])

(note 83 82 84 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 84 83 86 14 arch/arm/vfp/vfpdouble.c:114 (set (reg:SI 8 r8 [orig:147 D.4126 ] [147])
        (neg:SI (reg/v:SI 8 r8 [orig:141 exponent ] [141]))) 127 {*arm_negsi2} (nil))

(insn 86 84 87 14 arch/arm/vfp/vfp.h:25 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:147 D.4126 ] [147])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 87 86 88 14 arch/arm/vfp/vfp.h:25 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14 -> ( 15 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [50.0%]  (fallthru)
(note 88 87 89 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 90 15 arch/arm/vfp/vfp.h:26 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:147 D.4126 ] [147])
            (const_int 63 [0x3f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 90 89 91 15 arch/arm/vfp/vfp.h:26 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 115)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 15 -> ( 16 19)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  16 [50.0%]  (fallthru)
;; Succ edge  19 [50.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  15 [50.0%]  (fallthru)
(note 91 90 358 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 358 91 359 16 NOTE_INSN_DELETED)

(note 359 358 97 16 NOTE_INSN_DELETED)

(note 97 359 364 16 NOTE_INSN_DELETED)

(note 364 97 365 16 NOTE_INSN_DELETED)

(note 365 364 106 16 NOTE_INSN_DELETED)

(note 106 365 93 16 NOTE_INSN_DELETED)

(insn 93 106 92 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 2 r2)
        (reg:SI 8 r8 [orig:147 D.4126 ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 92 93 94 16 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg/v:DI 4 r4 [orig:143 significand ] [143])) 163 {*arm_movdi} (nil))

(call_insn/u 94 92 99 16 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 99 94 412 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 2 r2)
        (minus:SI (const_int 64 [0x40])
            (reg:SI 8 r8 [orig:147 D.4126 ] [147]))) 28 {*arm_subsi3_insn} (nil))

(insn 412 99 413 16 arch/arm/vfp/vfp.h:27 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-16 S4 A64])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 413 412 98 16 arch/arm/vfp/vfp.h:27 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-12 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 98 413 100 16 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg/v:DI 4 r4 [orig:143 significand ] [143])) 163 {*arm_movdi} (nil))

(call_insn/u 100 98 405 16 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 405 100 406 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 8 r8 [orig:261+4 ] [261])
        (reg:SI 0 r0 [orig:258+4 ] [258])) 167 {*arm_movsi_insn} (nil))

(insn 406 405 104 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 9 r9 [+8 ])
        (reg:SI 1 r1 [orig:259+8 ] [259])) 167 {*arm_movsi_insn} (nil))

(insn 104 406 103 16 arch/arm/vfp/vfp.h:27 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 103 104 105 16 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg:DI 8 r8 [orig:180+4 ] [180])) 163 {*arm_movdi} (nil))

(call_insn/u 105 103 107 16 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_ulcmp") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 107 105 108 16 arch/arm/vfp/vfp.h:27 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 108 107 334 16 arch/arm/vfp/vfp.h:27 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 16 -> ( 18 17)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  18 [29.0%] 
;; Succ edge  17 [71.0%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8] 9 [r9]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  16 [71.0%]  (fallthru)
(note 334 108 109 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 109 334 110 17 arch/arm/vfp/vfp.h:27 (set (reg:DI 8 r8 [orig:180+4 ] [180])
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 5 [r5]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  16 [29.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
(code_label 110 109 335 18 120 "" [1 uses])

(note 335 110 414 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 414 335 112 18 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-16 S8 A64])) 163 {*arm_movdi} (nil))

(insn 112 414 382 18 arch/arm/vfp/vfp.h:27 (set (reg/v:DI 4 r4 [orig:143 significand ] [143])
        (ior:DI (reg:DI 8 r8 [orig:180+4 ] [180])
            (reg:DI 0 r0))) 86 {iordi3} (nil))

(jump_insn 382 112 383 18 (set (pc)
        (label_ref 125)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 383 382 115)

;; Start of basic block ( 15) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  15 [50.0%] 
(code_label 115 383 116 19 119 "" [1 uses])

(note 116 115 120 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 120 116 117 19 NOTE_INSN_DELETED)

(insn 117 120 118 19 arch/arm/vfp/vfp.h:29 (set (reg:DI 0 r0)
        (reg/v:DI 4 r4 [orig:143 significand ] [143])) 163 {*arm_movdi} (nil))

(insn 118 117 119 19 arch/arm/vfp/vfp.h:29 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(call_insn/u 119 118 121 19 arch/arm/vfp/vfp.h:29 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_ulcmp") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 121 119 122 19 arch/arm/vfp/vfp.h:29 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 122 121 336 19 arch/arm/vfp/vfp.h:29 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 19 -> ( 21 20)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  21 [29.0%] 
;; Succ edge  20 [71.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  19 [71.0%]  (fallthru)
(note 336 122 123 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 123 336 125 20 arch/arm/vfp/vfp.h:29 (set (reg/v:DI 4 r4 [orig:143 significand ] [143])
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 20 -> ( 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 14 19 20 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [50.0%] 
;; Pred edge  19 [29.0%] 
;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 125 123 126 21 118 "" [3 uses])

(note 126 125 129 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 129 126 130 21 NOTE_INSN_DELETED)

(note 130 129 127 21 NOTE_INSN_DELETED)

(insn 127 130 128 21 arch/arm/vfp/vfpdouble.c:121 (set (reg:DI 0 r0 [184])
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 128 127 131 21 arch/arm/vfp/vfpdouble.c:121 (set (reg:DI 2 r2 [183])
        (and:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
            (reg:DI 0 r0 [184]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
            (const_int 2047 [0x7ff]))
        (nil)))

(insn 131 128 132 21 arch/arm/vfp/vfpdouble.c:121 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [183])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (set (reg:SI 1 r1 [185])
                (ior:SI (reg:SI 2 r2 [183])
                    (reg:SI 3 r3 [+4 ])))
        ]) 91 {*iorsi3_compare0} (nil))

(jump_insn 132 131 133 21 arch/arm/vfp/vfpdouble.c:121 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 138)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  22 [50.0%]  (fallthru)
;; Succ edge  23 [50.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 8 [r8] 12 [ip]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 8 [r8] 12 [ip]
;; live  kill	

;; Pred edge  21 [50.0%]  (fallthru)
(note 133 132 134 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 134 133 135 22 arch/arm/vfp/vfpdouble.c:122 (set (reg/v:SI 12 ip [orig:139 underflow ] [139])
        (reg:SI 1 r1 [185])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 135 134 384 22 arch/arm/vfp/vfpdouble.c:115 (set (reg/v:SI 8 r8 [orig:141 exponent ] [141])
        (reg/v:SI 12 ip [orig:139 underflow ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 384 135 385 22 (set (pc)
        (label_ref 142)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 385 384 138)

;; Start of basic block ( 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8] 12 [ip]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 8 [r8] 12 [ip]
;; live  kill	

;; Pred edge  21 [50.0%] 
(code_label 138 385 139 23 122 "" [1 uses])

(note 139 138 140 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 140 139 141 23 arch/arm/vfp/vfpdouble.c:115 (set (reg/v:SI 12 ip [orig:139 underflow ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 141 140 142 23 arch/arm/vfp/vfpdouble.c:115 (set (reg/v:SI 8 r8 [orig:141 exponent ] [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 23 -> ( 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 13 23 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%] 
;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  22 [100.0%] 
(code_label 142 141 143 24 117 "" [2 uses])

(note 143 142 144 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 144 143 145 24 NOTE_INSN_DELETED)

(insn 145 144 146 24 arch/arm/vfp/vfpdouble.c:131 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 10 sl [orig:152 fpscr ] [152])
                        (const_int 12582912 [0xc00000]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 10 sl [orig:138 rmode ] [138])
                (and:SI (reg/v:SI 10 sl [orig:152 fpscr ] [152])
                    (const_int 12582912 [0xc00000])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 146 145 147 24 arch/arm/vfp/vfpdouble.c:131 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 163)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 24 -> ( 25 28)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  25 [50.0%]  (fallthru)
;; Succ edge  28 [50.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  24 [50.0%]  (fallthru)
(note 147 146 150 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(note 150 147 151 25 NOTE_INSN_DELETED)

(note 151 150 148 25 NOTE_INSN_DELETED)

(insn 148 151 149 25 arch/arm/vfp/vfpdouble.c:133 (set (reg:DI 0 r0 [187])
        (const_int 2048 [0x800])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2048 [0x800])
        (nil)))

(insn 149 148 152 25 arch/arm/vfp/vfpdouble.c:133 (set (reg:DI 2 r2 [186])
        (and:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
            (reg:DI 0 r0 [187]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
            (const_int 2048 [0x800]))
        (nil)))

(insn 152 149 153 25 arch/arm/vfp/vfpdouble.c:133 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [186])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 153 152 154 25 arch/arm/vfp/vfpdouble.c:133 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 25 -> ( 26 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  26 [50.0%]  (fallthru)
;; Succ edge  27 [50.0%] 

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  25 [50.0%]  (fallthru)
(note 154 153 155 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 155 154 386 26 arch/arm/vfp/vfpdouble.c:134 (set (reg/v:DI 2 r2 [orig:142 incr ] [142])
        (const_int 1023 [0x3ff])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1023 [0x3ff])
        (nil)))

(jump_insn 386 155 387 26 (set (pc)
        (label_ref 187)) 242 {*arm_jump} (nil))
;; End of basic block 26 -> ( 32)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  32 [100.0%] 

(barrier 387 386 158)

;; Start of basic block ( 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  25 [50.0%] 
(code_label 158 387 159 27 124 "" [1 uses])

(note 159 158 160 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 160 159 388 27 arch/arm/vfp/vfpdouble.c:132 (set (reg/v:DI 2 r2 [orig:142 incr ] [142])
        (const_int 1024 [0x400])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1024 [0x400])
        (nil)))

(jump_insn 388 160 389 27 (set (pc)
        (label_ref 187)) 242 {*arm_jump} (nil))
;; End of basic block 27 -> ( 32)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  32 [100.0%] 

(barrier 389 388 163)

;; Start of basic block ( 24) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  24 [50.0%] 
(code_label 163 389 164 28 123 "" [1 uses])

(note 164 163 165 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 165 164 166 28 arch/arm/vfp/vfpdouble.c:135 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:138 rmode ] [138])
            (const_int 12582912 [0xc00000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 166 165 167 28 arch/arm/vfp/vfpdouble.c:135 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 184)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 28 -> ( 31 29)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  31 [28.0%] 
;; Succ edge  29 [72.0%]  (fallthru)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 10 [sl] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  28 [72.0%]  (fallthru)
(note 167 166 168 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 168 167 169 29 NOTE_INSN_DELETED)

(note 169 168 172 29 NOTE_INSN_DELETED)

(note 172 169 175 29 NOTE_INSN_DELETED)

(note 175 172 176 29 NOTE_INSN_DELETED)

(note 176 175 171 29 NOTE_INSN_DELETED)

(insn 171 176 173 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:SI 3 r3 [orig:192 <variable>.sign ] [192])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 173 171 177 29 arch/arm/vfp/vfpdouble.c:137 (parallel [
            (set (reg:SI 3 r3 [193])
                (ne:SI (reg:SI 3 r3 [orig:192 <variable>.sign ] [192])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 177 173 178 29 arch/arm/vfp/vfpdouble.c:137 (parallel [
            (set (reg:SI 10 sl [196])
                (xor:SI (eq:SI (reg/v:SI 10 sl [orig:138 rmode ] [138])
                        (const_int 4194304 [0x400000]))
                    (reg:SI 3 r3 [193])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 178 177 179 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 10 sl [196])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 179 178 180 29 arch/arm/vfp/vfpdouble.c:137 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 184)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 29 -> ( 30 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  30 [50.0%]  (fallthru)
;; Succ edge  31 [50.0%] 

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  29 [50.0%]  (fallthru)
(note 180 179 181 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 181 180 390 30 arch/arm/vfp/vfpdouble.c:138 (set (reg/v:DI 2 r2 [orig:142 incr ] [142])
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
        (nil)))

(jump_insn 390 181 391 30 (set (pc)
        (label_ref 187)) 242 {*arm_jump} (nil))
;; End of basic block 30 -> ( 32)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  32 [100.0%] 

(barrier 391 390 184)

;; Start of basic block ( 29 28) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  29 [50.0%] 
;; Pred edge  28 [28.0%] 
(code_label 184 391 185 31 126 "" [2 uses])

(note 185 184 186 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 186 185 187 31 arch/arm/vfp/vfpdouble.c:136 (set (reg/v:DI 2 r2 [orig:142 incr ] [142])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 31 -> ( 32)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  32 [100.0%]  (fallthru)

;; Start of basic block ( 31 27 26 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  31 [100.0%]  (fallthru)
;; Pred edge  27 [100.0%] 
;; Pred edge  26 [100.0%] 
;; Pred edge  30 [100.0%] 
(code_label 187 186 188 32 125 "" [3 uses])

(note 188 187 415 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 415 188 189 32 arch/arm/vfp/vfpdouble.c:145 (set (reg:DI 10 sl)
        (reg/v:DI 2 r2 [orig:142 incr ] [142])) 163 {*arm_movdi} (nil))

(insn 189 415 416 32 arch/arm/vfp/vfpdouble.c:145 (parallel [
            (set (reg:DI 10 sl)
                (plus:DI (reg:DI 10 sl)
                    (reg/v:DI 4 r4 [orig:143 significand ] [143])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 416 189 190 32 arch/arm/vfp/vfpdouble.c:145 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-16 S8 A64])
        (reg:DI 10 sl)) 163 {*arm_movdi} (nil))

(insn 190 416 191 32 arch/arm/vfp/vfpdouble.c:145 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [ significand+4 ])
            (reg:SI 11 fp))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 191 190 338 32 arch/arm/vfp/vfpdouble.c:145 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 351)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 32 -> ( 35 33)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 24 [cc]


;; Succ edge  35 [50.0%] 
;; Succ edge  33 [50.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  32 [50.0%]  (fallthru)
(note 338 191 193 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(jump_insn 193 338 339 33 arch/arm/vfp/vfpdouble.c:145 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 33 -> ( 36 34)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  36 [71.0%] 
;; Succ edge  34 [29.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  33 [29.0%]  (fallthru)
(note 339 193 194 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 194 339 195 34 arch/arm/vfp/vfpdouble.c:145 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 4 r4 [orig:143 significand ] [143])
            (reg:SI 10 sl))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 195 194 351 34 arch/arm/vfp/vfpdouble.c:145 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 34 -> ( 35 36)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  35 [50.0%]  (fallthru)
;; Succ edge  36 [50.0%] 

;; Start of basic block ( 34 32) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 11 [fp]
;; live  kill	 24 [cc]

;; Pred edge  34 [50.0%]  (fallthru)
;; Pred edge  32 [50.0%] 
(code_label 351 195 201 35 137 "" [1 uses])

(note 201 351 203 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 203 201 417 35 arch/arm/vfp/vfpdouble.c:147 (parallel [
            (set (reg:DI 0 r0)
                (lshiftrt:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (nil))

(insn 417 203 409 35 arch/arm/vfp/vfpdouble.c:147 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-8 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(note 409 417 419 35 NOTE_INSN_DELETED)

(insn 419 409 205 35 arch/arm/vfp/vfpdouble.c:147 (set (reg:DI 0 r0)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 205 419 207 35 arch/arm/vfp/vfpdouble.c:147 (set (reg:DI 10 sl)
        (and:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
            (reg:DI 0 r0))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
            (const_int 1 [0x1]))
        (nil)))

(insn 207 205 420 35 arch/arm/vfp/vfpdouble.c:148 (parallel [
            (set (reg/v:DI 2 r2 [orig:142 incr ] [142])
                (lshiftrt:DI (reg/v:DI 2 r2 [orig:142 incr ] [142])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (nil))

(insn 420 207 421 35 arch/arm/vfp/vfpdouble.c:147 (set (reg/v:DI 4 r4 [orig:143 significand ] [143])
        (reg:DI 10 sl)) 163 {*arm_movdi} (nil))

(insn 421 420 206 35 arch/arm/vfp/vfpdouble.c:147 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-8 S8 A64])) 163 {*arm_movdi} (nil))

(insn 206 421 202 35 arch/arm/vfp/vfpdouble.c:147 (set (reg/v:DI 4 r4 [orig:143 significand ] [143])
        (ior:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
            (reg:DI 10 sl))) 86 {iordi3} (nil))

(insn 202 206 208 35 arch/arm/vfp/vfpdouble.c:146 (set (reg/v:SI 8 r8 [orig:141 exponent ] [141])
        (plus:SI (reg/v:SI 8 r8 [orig:141 exponent ] [141])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 35 -> ( 36)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  36 [100.0%]  (fallthru)

;; Start of basic block ( 35 33 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 0 [r0]

;; Pred edge  35 [100.0%]  (fallthru)
;; Pred edge  33 [71.0%] 
;; Pred edge  34 [50.0%] 
(code_label 208 202 209 36 127 "" [2 uses])

(note 209 208 212 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(note 212 209 213 36 NOTE_INSN_DELETED)

(note 213 212 210 36 NOTE_INSN_DELETED)

(note 210 213 423 36 NOTE_INSN_DELETED)

(insn 423 210 211 36 arch/arm/vfp/vfpdouble.c:160 (set (reg:DI 10 sl)
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (nil))

(insn 211 423 214 36 arch/arm/vfp/vfpdouble.c:160 (set (reg:DI 0 r0)
        (and:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
            (reg:DI 10 sl))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 4 r4 [orig:143 significand ] [143])
            (const_int 2047 [0x7ff]))
        (nil)))

(insn 214 211 215 36 arch/arm/vfp/vfpdouble.c:160 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 0 r0)
                        (reg:SI 1 r1))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 0 r0))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 215 214 216 36 arch/arm/vfp/vfpdouble.c:160 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 218)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 36 -> ( 37 38)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  37 [50.0%]  (fallthru)
;; Succ edge  38 [50.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  36 [50.0%]  (fallthru)
(note 216 215 217 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 217 216 218 37 arch/arm/vfp/vfpdouble.c:161 (set (reg/v:SI 7 r7 [orig:153 exceptions ] [153])
        (ior:SI (reg/v:SI 7 r7 [orig:153 exceptions ] [153])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))
;; End of basic block 37 -> ( 38)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  38 [100.0%]  (fallthru)

;; Start of basic block ( 36 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  36 [50.0%] 
;; Pred edge  37 [100.0%]  (fallthru)
(code_label 218 217 219 38 129 "" [1 uses])

(note 219 218 220 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 220 219 221 38 arch/arm/vfp/vfpdouble.c:171 (set (reg:SI 0 r0 [202])
        (const_int 2045 [0x7fd])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2045 [0x7fd])
        (nil)))

(insn 221 220 222 38 arch/arm/vfp/vfpdouble.c:171 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:141 exponent ] [141])
            (reg:SI 0 r0 [202]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 8 r8 [orig:141 exponent ] [141])
            (const_int 2045 [0x7fd]))
        (nil)))

(jump_insn 222 221 223 38 arch/arm/vfp/vfpdouble.c:171 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 246)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 38 -> ( 39 42)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]


;; Succ edge  39 [50.0%]  (fallthru)
;; Succ edge  42 [50.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 7 [r7] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	 11 [fp]

;; Pred edge  38 [50.0%]  (fallthru)
(note 223 222 225 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(note 225 223 226 39 NOTE_INSN_DELETED)

(note 226 225 227 39 NOTE_INSN_DELETED)

(insn 227 226 224 39 arch/arm/vfp/vfpdouble.c:173 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:142 incr ] [142])
                        (reg:SI 3 r3 [ incr+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 11 fp))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 224 227 228 39 arch/arm/vfp/vfpdouble.c:172 (set (reg/v:SI 7 r7 [orig:153 exceptions ] [153])
        (ior:SI (reg/v:SI 7 r7 [orig:153 exceptions ] [153])
            (const_int 20 [0x14]))) 89 {*arm_iorsi3} (nil))

(jump_insn 228 224 229 39 arch/arm/vfp/vfpdouble.c:173 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 237)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 39 -> ( 40 41)
;; lr  out 	 0 [r0] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  40 [50.0%]  (fallthru)
;; Succ edge  41 [50.0%] 

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  39 [50.0%]  (fallthru)
(note 229 228 232 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 232 229 233 40 arch/arm/vfp/vfpdouble.c:174 (set (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])
        (reg:HI 0 r0 [202])) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 2045 [0x7fd])
        (nil)))

(insn 233 232 234 40 arch/arm/vfp/vfpdouble.c:175 (set (reg:DI 2 r2 [206])
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 9223372036854775807 [0x7fffffffffffffff])
        (nil)))

(insn 234 233 392 40 arch/arm/vfp/vfpdouble.c:175 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 2 r2 [206])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 9223372036854775807 [0x7fffffffffffffff])
        (nil)))

(jump_insn 392 234 393 40 (set (pc)
        (label_ref 295)) 242 {*arm_jump} (nil))
;; End of basic block 40 -> ( 50)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  50 [100.0%] 

(barrier 393 392 237)

;; Start of basic block ( 39) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  39 [50.0%] 
(code_label 237 393 238 41 131 "" [1 uses])

(note 238 237 239 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 239 238 241 41 arch/arm/vfp/vfpdouble.c:177 (set (reg:SI 3 r3 [208])
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -63489 [0xffffffffffff07ff])
        (nil)))

(insn 241 239 242 41 arch/arm/vfp/vfpdouble.c:177 (set (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])
        (reg:HI 3 r3 [208])) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
        (nil)))

(insn 242 241 243 41 arch/arm/vfp/vfpdouble.c:178 (set (reg:DI 2 r2 [209])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 243 242 394 41 arch/arm/vfp/vfpdouble.c:178 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 2 r2 [209])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 394 243 395 41 (set (pc)
        (label_ref 295)) 242 {*arm_jump} (nil))
;; End of basic block 41 -> ( 50)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  50 [100.0%] 

(barrier 395 394 246)

;; Start of basic block ( 38) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 8 [r8] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 8 [r8] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  38 [50.0%] 
(code_label 246 395 247 42 130 "" [1 uses])

(note 247 246 249 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(note 249 247 251 42 NOTE_INSN_DELETED)

(note 251 249 252 42 NOTE_INSN_DELETED)

(note 252 251 254 42 NOTE_INSN_DELETED)

(note 254 252 261 42 NOTE_INSN_DELETED)

(note 261 254 424 42 NOTE_INSN_DELETED)

(insn 424 261 248 42 arch/arm/vfp/vfpdouble.c:166 (set (reg/v:DI 10 sl [orig:133 significand.542 ] [133])
        (reg/v:DI 2 r2 [orig:142 incr ] [142])) 163 {*arm_movdi} (nil))

(insn 248 424 265 42 arch/arm/vfp/vfpdouble.c:166 (parallel [
            (set (reg/v:DI 10 sl [orig:133 significand.542 ] [133])
                (plus:DI (reg/v:DI 10 sl [orig:133 significand.542 ] [133])
                    (reg/v:DI 4 r4 [orig:143 significand ] [143])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 265 248 250 42 arch/arm/vfp/vfpdouble.c:183 (set (reg:QI 3 r3 [216])
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 250 265 373 42 arch/arm/vfp/vfpdouble.c:181 (set (reg:SI 2 r2 [249])
        (lshiftrt:SI (reg:SI 10 sl [orig:133 significand.542 ] [133])
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (nil))

(insn 373 250 374 42 arch/arm/vfp/vfpdouble.c:182 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (rotate:SI (reg:SI 11 fp [ significand.542+4 ])
                            (const_int 21 [0x15]))
                        (reg:SI 2 r2 [249]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [213])
                (ior:SI (rotate:SI (reg:SI 11 fp [ significand.542+4 ])
                        (const_int 21 [0x15]))
                    (reg:SI 2 r2 [249])))
        ]) 271 {*arith_shiftsi_compare0} (nil))

(insn 374 373 262 42 arch/arm/vfp/vfpdouble.c:182 (set (reg/v:SI 8 r8 [orig:141 exponent ] [141])
        (if_then_else:SI (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 8 r8 [orig:141 exponent ] [141])
            (reg:SI 2 r2 [213]))) 240 {*movsicc_insn} (nil))

(insn 262 374 266 42 arch/arm/vfp/vfpdouble.c:183 (parallel [
            (set (reg:SI 2 r2 [215])
                (ne:SI (reg/v:SI 8 r8 [orig:141 exponent ] [141])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 266 262 267 42 arch/arm/vfp/vfpdouble.c:183 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 11 fp [ significand.542+4 ])
            (const_int -2147483648 [0xffffffff80000000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 267 266 343 42 arch/arm/vfp/vfpdouble.c:183 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 276)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 42 -> ( 45 43)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 24 [cc]


;; Succ edge  45 [50.0%] 
;; Succ edge  43 [50.0%]  (fallthru)

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  42 [50.0%]  (fallthru)
(note 343 267 269 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(jump_insn 269 343 344 43 arch/arm/vfp/vfpdouble.c:183 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 279)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 43 -> ( 46 44)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  46 [71.0%] 
;; Succ edge  44 [29.0%]  (fallthru)

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  43 [29.0%]  (fallthru)
(note 344 269 270 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 270 344 271 44 arch/arm/vfp/vfpdouble.c:183 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 10 sl [orig:133 significand.542 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 271 270 276 44 arch/arm/vfp/vfpdouble.c:183 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 279)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 44 -> ( 45 46)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  45 [50.0%]  (fallthru)
;; Succ edge  46 [50.0%] 

;; Start of basic block ( 42 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 2 [r2] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  42 [50.0%] 
;; Pred edge  44 [50.0%]  (fallthru)
(code_label 276 271 347 45 135 "" [1 uses])

(note 347 276 278 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 278 347 279 45 arch/arm/vfp/vfpdouble.c:183 (set (reg:QI 3 r3 [216])
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 45 -> ( 46)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  46 [100.0%]  (fallthru)

;; Start of basic block ( 43 44 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  43 [71.0%] 
;; Pred edge  44 [50.0%] 
;; Pred edge  45 [100.0%]  (fallthru)
(code_label 279 278 348 46 134 "" [2 uses])

(note 348 279 280 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(note 280 348 282 46 NOTE_INSN_DELETED)

(note 282 280 281 46 NOTE_INSN_DELETED)

(insn 281 282 283 46 arch/arm/vfp/vfpdouble.c:183 (set (reg:SI 3 r3 [220])
        (ior:SI (reg:SI 2 r2 [215])
            (reg:SI 3 r3 [216]))) 89 {*arm_iorsi3} (nil))

(insn 283 281 284 46 arch/arm/vfp/vfpdouble.c:183 (set (reg:CC_Z 24 cc)
        (compare:CC_Z (reg:QI 3 r3 [220])
            (const_int 0 [0x0]))) 151 {*compareqi_eq0} (nil))

(jump_insn 284 283 285 46 arch/arm/vfp/vfpdouble.c:183 (set (pc)
        (if_then_else (ne (reg:CC_Z 24 cc)
                (const_int 0 [0x0]))
            (label_ref 290)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 46 -> ( 49 47)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  49 [50.0%] 
;; Succ edge  47 [50.0%]  (fallthru)

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  46 [50.0%]  (fallthru)
(note 285 284 286 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 286 285 287 47 arch/arm/vfp/vfpdouble.c:185 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:139 underflow ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 287 286 288 47 arch/arm/vfp/vfpdouble.c:185 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 290)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 47 -> ( 48 49)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  48 [100.0%]  (fallthru)
;; Succ edge  49 [0.0%] 

;; Start of basic block ( 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  47 [100.0%]  (fallthru)
(note 288 287 289 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 289 288 290 48 arch/arm/vfp/vfpdouble.c:186 (set (reg/v:SI 7 r7 [orig:153 exceptions ] [153])
        (ior:SI (reg/v:SI 7 r7 [orig:153 exceptions ] [153])
            (const_int 8 [0x8]))) 89 {*arm_iorsi3} (nil))
;; End of basic block 48 -> ( 49)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  49 [100.0%]  (fallthru)

;; Start of basic block ( 47 48 46) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  47 [0.0%] 
;; Pred edge  48 [100.0%]  (fallthru)
;; Pred edge  46 [50.0%] 
(code_label 290 289 291 49 133 "" [2 uses])

(note 291 290 293 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 293 291 292 49 arch/arm/vfp/vfpdouble.c:188 (parallel [
            (set (reg:DI 2 r2 [222])
                (lshiftrt:DI (reg/v:DI 10 sl [orig:133 significand.542 ] [133])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (expr_list:REG_EQUIV (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (nil)))

(insn 292 293 294 49 arch/arm/vfp/vfpdouble.c:187 (set (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64])
        (reg:HI 8 r8 [orig:141 exponent ] [141])) 176 {*movhi_insn_arch4} (nil))

(insn 294 292 295 49 arch/arm/vfp/vfpdouble.c:188 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 2 r2 [222])) 163 {*arm_movdi} (nil))
;; End of basic block 49 -> ( 50)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  50 [100.0%]  (fallthru)

;; Start of basic block ( 5 7 40 49 41) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  5 [50.0%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  40 [100.0%] 
;; Pred edge  49 [100.0%]  (fallthru)
;; Pred edge  41 [100.0%] 
(code_label 295 294 296 50 111 ("pack") [4 uses])

(note 296 295 304 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(note 304 296 310 50 NOTE_INSN_DELETED)

(note 310 304 316 50 NOTE_INSN_DELETED)

(note 316 310 298 50 NOTE_INSN_DELETED)

(insn 298 316 375 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 14 lr [orig:224 <variable>.sign ] [224])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 375 298 311 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:DI 4 r4 [226])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 311 375 376 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 12 ip [orig:237 <variable>.significand ] [237])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 376 311 303 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:DI 8 r8 [230])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 303 376 377 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 2 r2 [orig:228 <variable>.exponent ] [228])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vd ] [151]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 377 303 309 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:DI 0 r0 [234])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 309 377 300 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 3 r3 [orig:236 <variable>.significand+4 ] [236])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vd ] [151])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 300 309 312 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 5 r5 [+4 ])
        (ashift:SI (reg:SI 14 lr [orig:224 <variable>.sign ] [224])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 312 300 301 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 0 r0 [234])
        (lshiftrt:SI (reg:SI 12 ip [orig:237 <variable>.significand ] [237])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (nil))

(insn 301 312 305 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 4 r4 [226])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 305 301 318 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 9 r9 [+4 ])
        (ashift:SI (reg:SI 2 r2 [orig:228 <variable>.exponent ] [228])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 318 305 306 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-20 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 306 318 313 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 8 r8 [230])
        (reg:SI 4 r4 [226])) 167 {*arm_movsi_insn} (nil))

(insn 313 306 425 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 0 r0 [234])
        (ior:SI (ashift:SI (reg:SI 3 r3 [orig:236 <variable>.significand+4 ] [236])
                (const_int 22 [0x16]))
            (reg:SI 0 r0 [234]))) 270 {*arith_shiftsi} (nil))

(insn 425 313 307 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:DI 10 sl [231])
        (reg:DI 4 r4 [226])) 163 {*arm_movdi} (nil))

(insn 307 425 315 50 arch/arm/vfp/vfpdouble.c:197 (parallel [
            (set (reg:DI 10 sl [231])
                (plus:DI (reg:DI 10 sl [231])
                    (reg:DI 8 r8 [230])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 315 307 317 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 1 r1 [+4 ])
        (lshiftrt:SI (reg:SI 3 r3 [orig:236 <variable>.significand+4 ] [236])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (nil))

(insn 317 315 319 50 arch/arm/vfp/vfpdouble.c:197 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (reg:DI 0 r0 [234])
                    (reg:DI 10 sl [231])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(call_insn 319 317 324 50 arch/arm/vfp/vfpdouble.c:197 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 324 319 330 50 arch/arm/vfp/vfpdouble.c:200 (set (reg/i:SI 0 r0)
        (reg/v:SI 7 r7 [orig:153 exceptions ] [153])) 167 {*arm_movsi_insn} (nil))

(insn 330 324 408 50 arch/arm/vfp/vfpdouble.c:200 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 50 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 408 330 411 NOTE_INSN_DELETED)

(note 411 408 0 NOTE_INSN_DELETED)


;; Function vfp_double_fnmul (vfp_double_fnmul)[0:180]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 166.
verify found no changes in insn with uid = 166.
deleting insn with uid = 134.
scanning new insn with uid = 167.
verify found no changes in insn with uid = 167.
deleting insn with uid = 138.
scanning new insn with uid = 168.
verify found no changes in insn with uid = 168.
deleting insn with uid = 91.
scanning new insn with uid = 169.
verify found no changes in insn with uid = 169.
deleting insn with uid = 69.
scanning new insn with uid = 170.
verify found no changes in insn with uid = 170.
deleting insn with uid = 34.
scanning new insn with uid = 171.
verify found no changes in insn with uid = 171.
deleting insn with uid = 12.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)

Pass 0 for finding allocno costs

    a11 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a10(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a18(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a20(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a21(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a23(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000


Pass 1 for finding allocno costs

    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a10(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a18(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a20(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a21(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a23(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000

   Insn 156(l0): point = 0
   Insn 144(l0): point = 2
   Insn 136(l0): point = 4
   Insn 135(l0): point = 6
   Insn 166(l0): point = 8
   Insn 139(l0): point = 10
   Insn 167(l0): point = 12
   Insn 143(l0): point = 14
   Insn 142(l0): point = 16
   Insn 141(l0): point = 18
   Insn 132(l0): point = 20
   Insn 140(l0): point = 22
   Insn 131(l0): point = 24
   Insn 130(l0): point = 26
   Insn 126(l0): point = 28
   Insn 129(l0): point = 30
   Insn 128(l0): point = 32
   Insn 127(l0): point = 34
   Insn 123(l0): point = 36
   Insn 120(l0): point = 39
   Insn 119(l0): point = 41
   Insn 116(l0): point = 44
   Insn 115(l0): point = 46
   Insn 111(l0): point = 49
   Insn 109(l0): point = 51
   Insn 110(l0): point = 53
   Insn 106(l0): point = 56
   Insn 105(l0): point = 61
   Insn 103(l0): point = 64
   Insn 79(l0): point = 66
   Insn 87(l0): point = 68
   Insn 73(l0): point = 70
   Insn 71(l0): point = 72
   Insn 86(l0): point = 74
   Insn 85(l0): point = 76
   Insn 102(l0): point = 78
   Insn 168(l0): point = 80
   Insn 70(l0): point = 82
   Insn 169(l0): point = 87
   Insn 161(l0): point = 89
   Insn 82(l0): point = 91
   Insn 81(l0): point = 93
   Insn 83(l0): point = 95
   Insn 78(l0): point = 97
   Insn 68(l0): point = 99
   Insn 67(l0): point = 101
   Insn 66(l0): point = 103
   Insn 63(l0): point = 106
   Insn 62(l0): point = 108
   Insn 59(l0): point = 111
   Insn 58(l0): point = 113
   Insn 54(l0): point = 116
   Insn 52(l0): point = 118
   Insn 53(l0): point = 120
   Insn 49(l0): point = 123
   Insn 48(l0): point = 128
   Insn 46(l0): point = 131
   Insn 22(l0): point = 133
   Insn 30(l0): point = 135
   Insn 16(l0): point = 137
   Insn 14(l0): point = 139
   Insn 29(l0): point = 141
   Insn 28(l0): point = 143
   Insn 45(l0): point = 145
   Insn 170(l0): point = 147
   Insn 13(l0): point = 149
   Insn 171(l0): point = 154
   Insn 160(l0): point = 156
   Insn 25(l0): point = 158
   Insn 24(l0): point = 160
   Insn 26(l0): point = 162
   Insn 21(l0): point = 164
   Insn 11(l0): point = 166
   Insn 10(l0): point = 168
   Insn 5(l0): point = 170
   Insn 4(l0): point = 172
   Insn 9(l0): point = 174
   Insn 2(l0): point = 176
 a0(r205): [5..6]
 a1(r206): [7..8]
 a2(r204): [7..20]
 a3(r208): [11..12]
 a4(r137): [15..24]
 a5(r145): [17..170]
 a6(r200): [19..36]
 a7(r142): [23..176]
 a8(r134): [47..89]
 a9(r133): [54..97]
 a10(r197): [57..61]
 a11(r221): [69..93]
 a12(r216): [71..72]
 a13(r173): [85..85] [73..83]
 a14(r220): [77..95]
 a15(r189): [79..80]
 a16(r174): [83..87]
 a17(r139): [83..99]
 a18(r144): [104..172]
 a19(r136): [114..156]
 a20(r135): [121..164]
 a21(r170): [124..128]
 a22(r215): [136..160]
 a23(r210): [138..139]
 a24(r146): [152..152] [140..150]
 a25(r214): [144..162]
 a26(r162): [146..147]
 a27(r147): [150..154]
 a28(r140): [150..166]
Compressing live ranges: from 179 to 55 - 30%
Ranges after the compression:
 a0(r205): [0..1]
 a1(r206): [2..3]
 a2(r204): [2..9]
 a3(r208): [4..5]
 a4(r137): [6..11]
 a5(r145): [7..52]
 a6(r200): [8..12]
 a7(r142): [10..54]
 a8(r134): [13..27]
 a9(r133): [14..30]
 a10(r197): [15..16]
 a11(r221): [17..28]
 a12(r216): [18..19]
 a13(r173): [25..25] [20..24]
 a14(r220): [21..29]
 a15(r189): [22..23]
 a16(r174): [24..26]
 a17(r139): [24..31]
 a18(r144): [32..53]
 a19(r136): [33..47]
 a20(r135): [34..50]
 a21(r170): [35..36]
 a22(r215): [37..48]
 a23(r210): [38..39]
 a24(r146): [45..45] [40..44]
 a25(r214): [41..49]
 a26(r162): [42..43]
 a27(r147): [44..46]
 a28(r140): [44..51]
+++Allocating 224 bytes for conflict table (uncompressed size 232)
;; a0(r205,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r206,l0) conflicts: a2(r204,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a2(r204,l0) conflicts: a1(r206,l0) a3(r208,l0) a4(r137,l0) a5(r145,l0) a6(r200,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r208,l0) conflicts: a2(r204,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a4(r137,l0) conflicts: a2(r204,l0) a5(r145,l0) a6(r200,l0) a7(r142,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a5(r145,l0) conflicts: a2(r204,l0) a4(r137,l0) a6(r200,l0) a7(r142,l0) a8(r134,l0) a9(r133,l0) a10(r197,l0) a11(r221,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r200,l0) conflicts: a2(r204,l0) a4(r137,l0) a5(r145,l0) a7(r142,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r142,l0) conflicts: a4(r137,l0) a5(r145,l0) a6(r200,l0) a8(r134,l0) a9(r133,l0) a10(r197,l0) a11(r221,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r134,l0) conflicts: a5(r145,l0) a7(r142,l0) a9(r133,l0) a10(r197,l0) a11(r221,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r133,l0) conflicts: a5(r145,l0) a7(r142,l0) a8(r134,l0) a10(r197,l0) a11(r221,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r197,l0) conflicts: a5(r145,l0) a7(r142,l0) a8(r134,l0) a9(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r221,l0) conflicts: a5(r145,l0) a7(r142,l0) a8(r134,l0) a9(r133,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r216,l0) conflicts: a5(r145,l0) a7(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r173,l0) conflicts: a5(r145,l0) a7(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r220,l0) conflicts: a5(r145,l0) a7(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a13(r173,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r189,l0) conflicts: a5(r145,l0) a7(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a13(r173,l0) a14(r220,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r174,l0) conflicts: a5(r145,l0) a7(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a13(r173,l0) a14(r220,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r139,l0) conflicts: a5(r145,l0) a7(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a13(r173,l0) a14(r220,l0) a16(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r144,l0) conflicts: a5(r145,l0) a7(r142,l0) a19(r136,l0) a20(r135,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a19(r136,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a20(r135,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r135,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a19(r136,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r170,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r215,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r210,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r146,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r214,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a24(r146,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r162,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a24(r146,l0) a25(r214,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r147,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a24(r146,l0) a25(r214,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r140,l0) conflicts: a5(r145,l0) a7(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a24(r146,l0) a25(r214,l0) a27(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a0(r205)<->a2(r204)@125:shuffle
  cp1:a0(r205)<->a1(r206)@125:shuffle
  regions=1, blocks=13, points=55
    allocnos=29, copies=2, conflicts=2, ranges=31

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 12 11 10 9 8 7 6 5 4 3 2
    all: 0r205 1r206 2r204 3r208 4r137 5r145 6r200 7r142 8r134 9r133 10r197 11r221 12r216 13r173 14r220 15r189 16r174 17r139 18r144 19r136 20r135 21r170 22r215 23r210 24r146 25r214 26r162 27r147 28r140
    modified regnos: 133 134 135 136 137 139 140 142 144 145 146 147 162 170 173 174 189 197 200 204 205 206 208 210 214 215 216 220 221
    border:
    Pressure: GENERAL_REGS=12
    Reg 205 of GENERAL_REGS has 4 regs less
    Reg 206 of GENERAL_REGS has 4 regs less
    Reg 204 of GENERAL_REGS has 4 regs less
    Reg 208 of GENERAL_REGS has 4 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 200 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
      Pushing a27(r147,l0)
      Pushing a26(r162,l0)
      Pushing a25(r214,l0)
      Pushing a24(r146,l0)
      Pushing a23(r210,l0)
      Pushing a21(r170,l0)
      Pushing a16(r174,l0)
      Pushing a15(r189,l0)
      Pushing a14(r220,l0)
      Pushing a13(r173,l0)
      Pushing a12(r216,l0)
      Pushing a10(r197,l0)
      Pushing a22(r215,l0)
      Pushing a20(r135,l0)
      Pushing a11(r221,l0)
      Pushing a9(r133,l0)
      Pushing a28(r140,l0)
      Pushing a17(r139,l0)
      Pushing a19(r136,l0)
      Pushing a8(r134,l0)
      Pushing a4(r137,l0)
      Pushing a18(r144,l0)
      Pushing a3(r208,l0)
      Pushing a2(r204,l0)
      Pushing a1(r206,l0)
      Pushing a0(r205,l0)
      Pushing a7(r142,l0)
      Pushing a6(r200,l0)
      Pushing a5(r145,l0)
      Popping a5(r145,l0)  -- assign reg 4
      Popping a6(r200,l0)  -- assign reg 5
      Popping a7(r142,l0)  -- assign reg 6
      Popping a0(r205,l0)  -- assign reg 12
      Popping a1(r206,l0)  -- assign reg 12
      Popping a2(r204,l0)  -- assign reg 14
      Popping a3(r208,l0)  -- assign reg 12
      Popping a18(r144,l0)  -- assign reg 5
      Popping a4(r137,l0)  -- assign reg 3
      Popping a8(r134,l0)  -- assign reg 2
      Popping a19(r136,l0)  -- assign reg 2
      Popping a17(r139,l0)  -- assign reg 0
      Popping a28(r140,l0)  -- assign reg 0
      Popping a9(r133,l0)  -- assign reg 12
      Popping a11(r221,l0)  -- assign reg 14
      Popping a20(r135,l0)  -- assign reg 12
      Popping a22(r215,l0)  -- assign reg 14
      Popping a10(r197,l0)  -- assign reg 0
      Popping a12(r216,l0)  -- assign reg 1
      Popping a13(r173,l0)  -- assign reg 8
      Popping a14(r220,l0)  -- assign reg 5
      Popping a15(r189,l0)  -- assign reg 1
      Popping a16(r174,l0)  -- assign reg 10
      Popping a21(r170,l0)  -- assign reg 0
      Popping a23(r210,l0)  -- assign reg 1
      Popping a24(r146,l0)  -- assign reg 8
      Popping a25(r214,l0)  -- assign reg 7
      Popping a26(r162,l0)  -- assign reg 1
      Popping a27(r147,l0)  -- assign reg 10
Disposition:
    9:r133 l0    12    8:r134 l0     2   20:r135 l0    12   19:r136 l0     2
    4:r137 l0     3   17:r139 l0     0   28:r140 l0     0    7:r142 l0     6
   18:r144 l0     5    5:r145 l0     4   24:r146 l0     8   27:r147 l0    10
   26:r162 l0     1   21:r170 l0     0   13:r173 l0     8   16:r174 l0    10
   15:r189 l0     1   10:r197 l0     0    6:r200 l0     5    2:r204 l0    14
    0:r205 l0    12    1:r206 l0    12    3:r208 l0    12   23:r210 l0     1
   25:r214 l0     7   22:r215 l0    14   12:r216 l0     1   14:r220 l0     5
   11:r221 l0    14
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 142
insn=9, live_throughout: 2, 3, 13, 142, dead_or_set: 0, 1
insn=4, live_throughout: 0, 3, 13, 142, dead_or_set: 2, 144
insn=5, live_throughout: 0, 13, 142, 144, dead_or_set: 3, 145
insn=10, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 1, 14
insn=11, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 1, 140
insn=21, live_throughout: 13, 140, 142, 144, 145, dead_or_set: 135
insn=26, live_throughout: 13, 135, 140, 142, 144, 145, dead_or_set: 214
insn=24, live_throughout: 13, 135, 140, 142, 144, 145, 214, dead_or_set: 215
insn=25, live_throughout: 13, 135, 140, 142, 144, 145, 214, dead_or_set: 215
insn=160, live_throughout: 13, 135, 140, 142, 144, 145, 214, 215, dead_or_set: 136
insn=171, live_throughout: 13, 135, 140, 142, 144, 145, 214, 215, dead_or_set: 147
insn=13, live_throughout: 13, 135, 142, 144, 145, 214, 215, dead_or_set: 140, 146, 147
insn=170, live_throughout: 13, 135, 142, 144, 145, 146, 214, 215, dead_or_set: 162
insn=45, live_throughout: 13, 135, 142, 144, 145, 146, 214, 215, dead_or_set: 162
insn=28, live_throughout: 13, 24, 135, 142, 144, 145, 146, 215, dead_or_set: 136, 214
insn=29, live_throughout: 13, 24, 135, 142, 144, 145, 146, 215, dead_or_set: 136
insn=14, live_throughout: 13, 24, 135, 136, 142, 144, 145, 215, dead_or_set: 146, 210
insn=16, live_throughout: 13, 24, 135, 136, 142, 144, 145, 215, dead_or_set: 210
insn=30, live_throughout: 13, 24, 135, 136, 142, 144, 145, dead_or_set: 136, 215
insn=22, live_throughout: 13, 24, 135, 136, 142, 144, 145, dead_or_set: 
insn=46, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 
insn=48, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 170
insn=49, live_throughout: 13, 135, 142, 144, 145, dead_or_set: 136, 170
insn=50, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 
insn=53, live_throughout: 13, 136, 142, 144, 145, dead_or_set: 135
insn=52, live_throughout: 13, 24, 136, 142, 144, 145, dead_or_set: 
insn=54, live_throughout: 13, 136, 142, 144, 145, dead_or_set: 
insn=58, live_throughout: 13, 142, 144, 145, dead_or_set: 136
insn=59, live_throughout: 13, 142, 144, 145, dead_or_set: 
insn=62, live_throughout: 13, 142, 144, 145, dead_or_set: 0
insn=63, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 14
insn=64, live_throughout: 13, 142, 144, 145, dead_or_set: 
insn=66, live_throughout: 13, 142, 145, dead_or_set: 0, 144
insn=67, live_throughout: 13, 142, 145, dead_or_set: 0, 1, 14
insn=68, live_throughout: 13, 142, 145, dead_or_set: 0, 1, 139
insn=78, live_throughout: 13, 139, 142, 145, dead_or_set: 133
insn=83, live_throughout: 13, 133, 139, 142, 145, dead_or_set: 220
insn=81, live_throughout: 13, 133, 139, 142, 145, 220, dead_or_set: 221
insn=82, live_throughout: 13, 133, 139, 142, 145, 220, dead_or_set: 221
insn=161, live_throughout: 13, 133, 139, 142, 145, 220, 221, dead_or_set: 134
insn=169, live_throughout: 13, 133, 139, 142, 145, 220, 221, dead_or_set: 174
insn=70, live_throughout: 13, 133, 142, 145, 220, 221, dead_or_set: 139, 173, 174
insn=168, live_throughout: 13, 133, 142, 145, 173, 220, 221, dead_or_set: 189
insn=102, live_throughout: 13, 133, 142, 145, 173, 220, 221, dead_or_set: 189
insn=85, live_throughout: 13, 24, 133, 142, 145, 173, 221, dead_or_set: 134, 220
insn=86, live_throughout: 13, 24, 133, 142, 145, 173, 221, dead_or_set: 134
insn=71, live_throughout: 13, 24, 133, 134, 142, 145, 221, dead_or_set: 173, 216
insn=73, live_throughout: 13, 24, 133, 134, 142, 145, 221, dead_or_set: 216
insn=87, live_throughout: 13, 24, 133, 134, 142, 145, dead_or_set: 134, 221
insn=79, live_throughout: 13, 24, 133, 134, 142, 145, dead_or_set: 
insn=103, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 
insn=105, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 197
insn=106, live_throughout: 13, 133, 142, 145, dead_or_set: 134, 197
insn=107, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 
insn=110, live_throughout: 13, 134, 142, 145, dead_or_set: 133
insn=109, live_throughout: 13, 24, 134, 142, 145, dead_or_set: 
insn=111, live_throughout: 13, 134, 142, 145, dead_or_set: 
insn=115, live_throughout: 13, 142, 145, dead_or_set: 134
insn=116, live_throughout: 13, 142, 145, dead_or_set: 
insn=119, live_throughout: 13, 142, 145, dead_or_set: 0
insn=120, live_throughout: 13, 142, 145, dead_or_set: 0, 14
insn=121, live_throughout: 13, 142, 145, dead_or_set: 
insn=123, live_throughout: 13, 142, 145, dead_or_set: 200
insn=127, live_throughout: 13, 142, 145, 200, dead_or_set: 1
insn=128, live_throughout: 1, 13, 142, 145, 200, dead_or_set: 2
insn=129, live_throughout: 1, 2, 13, 142, 145, 200, dead_or_set: 3
insn=126, live_throughout: 1, 2, 3, 13, 142, 145, 200, dead_or_set: 0
insn=130, live_throughout: 13, 142, 145, 200, dead_or_set: 0, 1, 2, 3, 14
insn=131, live_throughout: 13, 142, 145, 200, dead_or_set: 0, 137
insn=140, live_throughout: 13, 137, 145, 200, dead_or_set: 0, 142
insn=132, live_throughout: 0, 13, 137, 145, 200, dead_or_set: 204
insn=141, live_throughout: 0, 13, 137, 145, 204, dead_or_set: 1, 200
insn=142, live_throughout: 0, 1, 13, 137, 204, dead_or_set: 2, 145
insn=143, live_throughout: 0, 1, 2, 13, 204, dead_or_set: 3, 137
insn=167, live_throughout: 0, 1, 2, 3, 13, 204, dead_or_set: 208
insn=139, live_throughout: 0, 1, 2, 3, 13, 204, dead_or_set: 208
insn=166, live_throughout: 0, 1, 2, 3, 13, 204, dead_or_set: 206
insn=135, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 204, 205, 206
insn=136, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 205
insn=144, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=156, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 147: (insn_list:REG_DEP_TRUE 171 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 170 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 48 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 169 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 168 (nil))
init_insns for 197: (insn_list:REG_DEP_TRUE 105 (nil))
init_insns for 200: (insn_list:REG_DEP_TRUE 123 (nil))
init_insns for 206: (insn_list:REG_DEP_TRUE 166 (nil))
init_insns for 208: (insn_list:REG_DEP_TRUE 167 (nil))
changing reg in insn 78
changing reg in insn 102
changing reg in insn 102
changing reg in insn 110
changing reg in insn 161
changing reg in insn 106
changing reg in insn 86
changing reg in insn 109
changing reg in insn 106
changing reg in insn 87
changing reg in insn 85
changing reg in insn 106
changing reg in insn 21
changing reg in insn 45
changing reg in insn 45
changing reg in insn 53
changing reg in insn 160
changing reg in insn 49
changing reg in insn 29
changing reg in insn 52
changing reg in insn 49
changing reg in insn 30
changing reg in insn 28
changing reg in insn 49
changing reg in insn 131
changing reg in insn 143
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 2
changing reg in insn 140
changing reg in insn 4
changing reg in insn 66
changing reg in insn 5
changing reg in insn 142
changing reg in insn 129
changing reg in insn 13
changing reg in insn 171
changing reg in insn 13
changing reg in insn 170
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 70
changing reg in insn 169
changing reg in insn 70
changing reg in insn 168
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 123
changing reg in insn 141
changing reg in insn 126
changing reg in insn 132
changing reg in insn 135
changing reg in insn 135
changing reg in insn 135
changing reg in insn 166
changing reg in insn 135
changing reg in insn 167
changing reg in insn 139
changing reg in insn 14
changing reg in insn 26
changing reg in insn 28
changing reg in insn 25
changing reg in insn 24
changing reg in insn 29
changing reg in insn 25
changing reg in insn 30
changing reg in insn 71
changing reg in insn 83
changing reg in insn 85
changing reg in insn 82
changing reg in insn 81
changing reg in insn 86
changing reg in insn 82
changing reg in insn 87
Spilling for insn 16.
Spilling for insn 22.
Spilling for insn 52.
Spilling for insn 58.
Using reg 1 for reload 0
Spilling for insn 73.
Spilling for insn 79.
Spilling for insn 109.
Spilling for insn 115.
Using reg 1 for reload 0
Spilling for insn 139.
Spilling for insn 136.

Reloads for insn # 16
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])

Reloads for insn # 22
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])

Reloads for insn # 52
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])

Reloads for insn # 58
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 73
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 79
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 109
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 115
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 139
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 136
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 42 [0x2a])) [0 vdd.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 42 [0x2a])) [0 vdd.sign+0 S2 A16])
deleting insn with uid = 11.
deleting insn with uid = 68.
deleting insn with uid = 143.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 144.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)


vfp_double_fnmul

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,18u,2d} r1={17d,15u,2d} r2={17d,11u,2d} r3={15d,9u,2d} r4={1d,2u} r5={3d,4u} r6={1d,1u} r7={1d,1u} r8={2d} r9={2d,2u} r10={2d,2u} r11={2d,2u} r12={12d,11u} r13={1d,32u,1d} r14={12d,8u,1d} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={12d,6u} r25={2d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 911{775d,124u,12e} in 75{69 regular + 6 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 17 2 NOTE_INSN_FUNCTION_BEG)

(note 17 6 19 2 NOTE_INSN_DELETED)

(note 19 17 20 2 NOTE_INSN_DELETED)

(note 20 19 23 2 NOTE_INSN_DELETED)

(note 23 20 27 2 NOTE_INSN_DELETED)

(note 27 23 31 2 NOTE_INSN_DELETED)

(note 31 27 32 2 NOTE_INSN_DELETED)

(note 32 31 33 2 NOTE_INSN_DELETED)

(note 33 32 35 2 NOTE_INSN_DELETED)

(note 35 33 36 2 NOTE_INSN_DELETED)

(note 36 35 39 2 NOTE_INSN_DELETED)

(note 39 36 40 2 NOTE_INSN_DELETED)

(note 40 39 42 2 NOTE_INSN_DELETED)

(note 42 40 43 2 NOTE_INSN_DELETED)

(note 43 42 44 2 NOTE_INSN_DELETED)

(note 44 43 2 2 NOTE_INSN_DELETED)

(insn 2 44 9 2 arch/arm/vfp/vfpdouble.c:937 (set (reg/v:SI 6 r6 [orig:142 dd ] [142])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 4 2 arch/arm/vfp/vfpdouble.c:941 (set (reg:SI 0 r0)
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (nil))

(insn 4 9 5 2 arch/arm/vfp/vfpdouble.c:937 (set (reg/v:SI 5 r5 [orig:144 dm ] [144])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 10 2 arch/arm/vfp/vfpdouble.c:937 (set (reg/v:SI 4 r4 [orig:145 fpscr ] [145])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 21 2 arch/arm/vfp/vfpdouble.c:941 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 21 10 26 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:135 D.5485 ] [135])
        (zero_extract:SI (reg:SI 1 r1 [ D.4931+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 26 21 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 7 r7 [214])
        (ashift:SI (reg:SI 0 r0 [orig:140 D.4931 ] [140])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 24 26 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:215+4 ] [215])
        (ashift:SI (reg:SI 1 r1 [ D.4931+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 160 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:215+4 ] [215])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:140 D.4931 ] [140])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:215+4 ] [215]))) 270 {*arith_shiftsi} (nil))

(insn 160 25 171 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:136 significand ] [136])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 171 160 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [147])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 13 171 170 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [146])
        (and:DI (reg:DI 0 r0 [orig:140 D.4931 ] [140])
            (reg:DI 10 sl [147]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:140 D.4931 ] [140])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 170 13 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [162])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 45 170 28 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:135 D.5485 ] [135])
                    (reg:SI 1 r1 [162]))
                (ne:SI (reg:SI 12 ip [orig:135 D.5485 ] [135])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 28 45 29 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:136 significand ] [136])
        (lshiftrt:SI (reg:SI 7 r7 [214])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 29 28 14 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:136 significand ] [136])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:215+4 ] [215])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:136 significand ] [136]))) 270 {*arith_shiftsi} (nil))

(insn 14 29 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [210])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 16 14 30 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
        (reg:HI 1 r1 [210])) 176 {*movhi_insn_arch4} (nil))

(insn 30 16 22 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:215+4 ] [215])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 22 30 46 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:135 D.5485 ] [135])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 46 22 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [170])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:136 significand ] [136])
        (ior:DI (reg/v:DI 2 r2 [orig:136 significand ] [136])
            (reg:DI 0 r0 [170]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:136 significand ] [136])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 141 "" [1 uses])

(note 51 50 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 53 51 52 4 arch/arm/vfp/vfpdouble.c:942 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:135 D.5485 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 52 53 54 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:136 significand ] [136])) 163 {*arm_movdi} (nil))

(jump_insn 54 52 55 4 arch/arm/vfp/vfpdouble.c:942 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  4 [50.0%]  (fallthru)
(note 55 54 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 56 55 57 5 NOTE_INSN_DELETED)

(note 57 56 58 5 NOTE_INSN_DELETED)

(insn 58 57 59 5 arch/arm/vfp/vfpdouble.c:942 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:136 significand ] [136])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 59 58 60 5 arch/arm/vfp/vfpdouble.c:942 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 6 NOTE_INSN_DELETED)

(insn 62 61 63 6 arch/arm/vfp/vfpdouble.c:943 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(call_insn 63 62 64 6 arch/arm/vfp/vfpdouble.c:943 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 64 63 65 7 142 "" [2 uses])

(note 65 64 74 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 74 65 76 7 NOTE_INSN_DELETED)

(note 76 74 77 7 NOTE_INSN_DELETED)

(note 77 76 80 7 NOTE_INSN_DELETED)

(note 80 77 84 7 NOTE_INSN_DELETED)

(note 84 80 88 7 NOTE_INSN_DELETED)

(note 88 84 89 7 NOTE_INSN_DELETED)

(note 89 88 90 7 NOTE_INSN_DELETED)

(note 90 89 92 7 NOTE_INSN_DELETED)

(note 92 90 93 7 NOTE_INSN_DELETED)

(note 93 92 96 7 NOTE_INSN_DELETED)

(note 96 93 97 7 NOTE_INSN_DELETED)

(note 97 96 99 7 NOTE_INSN_DELETED)

(note 99 97 100 7 NOTE_INSN_DELETED)

(note 100 99 101 7 NOTE_INSN_DELETED)

(note 101 100 66 7 NOTE_INSN_DELETED)

(insn 66 101 67 7 arch/arm/vfp/vfpdouble.c:945 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:144 dm ] [144])) 167 {*arm_movsi_insn} (nil))

(call_insn 67 66 78 7 arch/arm/vfp/vfpdouble.c:945 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 78 67 83 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:133 D.5500 ] [133])
        (zero_extract:SI (reg:SI 1 r1 [ D.4940+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 83 78 81 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 5 r5 [220])
        (ashift:SI (reg:SI 0 r0 [orig:139 D.4940 ] [139])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 81 83 82 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:221+4 ] [221])
        (ashift:SI (reg:SI 1 r1 [ D.4940+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 82 81 161 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:221+4 ] [221])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:139 D.4940 ] [139])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:221+4 ] [221]))) 270 {*arith_shiftsi} (nil))

(insn 161 82 169 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:134 significand ] [134])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 169 161 70 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [174])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 70 169 168 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [173])
        (and:DI (reg:DI 0 r0 [orig:139 D.4940 ] [139])
            (reg:DI 10 sl [174]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:139 D.4940 ] [139])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 168 70 102 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [189])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 102 168 85 7 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:133 D.5500 ] [133])
                    (reg:SI 1 r1 [189]))
                (ne:SI (reg:SI 12 ip [orig:133 D.5500 ] [133])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 85 102 86 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:134 significand ] [134])
        (lshiftrt:SI (reg:SI 5 r5 [220])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 86 85 71 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:134 significand ] [134])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:221+4 ] [221])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:134 significand ] [134]))) 270 {*arith_shiftsi} (nil))

(insn 71 86 73 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [216])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 73 71 87 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
        (reg:HI 1 r1 [216])) 176 {*movhi_insn_arch4} (nil))

(insn 87 73 79 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:221+4 ] [221])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 79 87 103 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:133 D.5500 ] [133])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 103 79 104 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 104 103 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 105 104 106 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [197])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 106 105 107 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:134 significand ] [134])
        (ior:DI (reg/v:DI 2 r2 [orig:134 significand ] [134])
            (reg:DI 0 r0 [197]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:134 significand ] [134])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 107 106 108 9 143 "" [1 uses])

(note 108 107 110 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 110 108 109 9 arch/arm/vfp/vfpdouble.c:946 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:133 D.5500 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 109 110 111 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:134 significand ] [134])) 163 {*arm_movdi} (nil))

(jump_insn 111 109 112 9 arch/arm/vfp/vfpdouble.c:946 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  10 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  9 [61.0%]  (fallthru)
(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 113 112 114 10 NOTE_INSN_DELETED)

(note 114 113 115 10 NOTE_INSN_DELETED)

(insn 115 114 116 10 arch/arm/vfp/vfpdouble.c:946 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:134 significand ] [134])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 116 115 117 10 arch/arm/vfp/vfpdouble.c:946 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  11 [39.0%]  (fallthru)
;; Succ edge  12 [61.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  10 [39.0%]  (fallthru)
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 118 117 119 11 NOTE_INSN_DELETED)

(insn 119 118 120 11 arch/arm/vfp/vfpdouble.c:947 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(call_insn 120 119 121 11 arch/arm/vfp/vfpdouble.c:947 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  9 [39.0%] 
;; Pred edge  10 [61.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 121 120 122 12 144 "" [2 uses])

(note 122 121 124 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 124 122 125 12 NOTE_INSN_DELETED)

(note 125 124 123 12 NOTE_INSN_DELETED)

(insn 123 125 127 12 arch/arm/vfp/vfpdouble.c:949 (set (reg/f:SI 5 r5 [200])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))
        (nil)))

(insn 127 123 128 12 arch/arm/vfp/vfpdouble.c:949 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(insn 128 127 129 12 arch/arm/vfp/vfpdouble.c:949 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 129 128 126 12 arch/arm/vfp/vfpdouble.c:949 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:145 fpscr ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 126 129 130 12 arch/arm/vfp/vfpdouble.c:949 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(call_insn 130 126 131 12 arch/arm/vfp/vfpdouble.c:949 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply") [flags 0x3] <function_decl 0x10b08180 vfp_double_multiply>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 131 130 140 12 arch/arm/vfp/vfpdouble.c:949 (set (reg/v:SI 3 r3 [orig:137 exceptions ] [137])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 140 131 132 12 arch/arm/vfp/vfpdouble.c:952 (set (reg:SI 0 r0)
        (reg/v:SI 6 r6 [orig:142 dd ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 132 140 141 12 arch/arm/vfp/vfpdouble.c:950 (set (reg:SI 14 lr [orig:204 vdd.sign ] [204])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 42 [0x2a])) [0 vdd.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 141 132 142 12 arch/arm/vfp/vfpdouble.c:952 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 142 141 167 12 arch/arm/vfp/vfpdouble.c:952 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 fpscr ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 167 142 139 12 arch/arm/vfp/vfpdouble.c:952 (set (reg/f:SI 12 ip [208])
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10d43b60>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10d43b60>)
        (nil)))

(insn 139 167 166 12 arch/arm/vfp/vfpdouble.c:952 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [208])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10d43b60>)
        (nil)))

(insn 166 139 135 12 arch/arm/vfp/vfpdouble.c:950 (set (reg:SI 12 ip [206])
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -32768 [0xffffffffffff8000])
        (nil)))

(insn 135 166 136 12 arch/arm/vfp/vfpdouble.c:950 (set (reg:SI 12 ip [205])
        (xor:SI (reg:SI 14 lr [orig:204 vdd.sign ] [204])
            (reg:SI 12 ip [206]))) 96 {*arm_xorsi3} (expr_list:REG_EQUAL (xor:SI (reg:SI 14 lr [orig:204 vdd.sign ] [204])
            (const_int -32768 [0xffffffffffff8000]))
        (nil)))

(insn 136 135 144 12 arch/arm/vfp/vfpdouble.c:950 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 42 [0x2a])) [0 vdd.sign+0 S2 A16])
        (reg:HI 12 ip [205])) 176 {*movhi_insn_arch4} (nil))

(call_insn 144 136 156 12 arch/arm/vfp/vfpdouble.c:952 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 156 144 165 12 arch/arm/vfp/vfpdouble.c:953 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 165 156 172 NOTE_INSN_DELETED)

(note 172 165 0 NOTE_INSN_DELETED)


;; Function vfp_double_fmul (vfp_double_fmul)[0:179]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 160.
verify found no changes in insn with uid = 160.
deleting insn with uid = 133.
scanning new insn with uid = 161.
verify found no changes in insn with uid = 161.
deleting insn with uid = 91.
scanning new insn with uid = 162.
verify found no changes in insn with uid = 162.
deleting insn with uid = 69.
scanning new insn with uid = 163.
verify found no changes in insn with uid = 163.
deleting insn with uid = 34.
scanning new insn with uid = 164.
verify found no changes in insn with uid = 164.
deleting insn with uid = 12.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)

Pass 0 for finding allocno costs

    a8 (r217,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a9(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a15(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a17(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a18(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000


Pass 1 for finding allocno costs

    r217: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a9(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a15(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a17(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a18(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000

   Insn 151(l0): point = 0
   Insn 139(l0): point = 2
   Insn 134(l0): point = 4
   Insn 160(l0): point = 6
   Insn 138(l0): point = 8
   Insn 137(l0): point = 10
   Insn 136(l0): point = 12
   Insn 135(l0): point = 14
   Insn 131(l0): point = 16
   Insn 130(l0): point = 18
   Insn 126(l0): point = 20
   Insn 129(l0): point = 22
   Insn 128(l0): point = 24
   Insn 127(l0): point = 26
   Insn 123(l0): point = 28
   Insn 120(l0): point = 31
   Insn 119(l0): point = 33
   Insn 116(l0): point = 36
   Insn 115(l0): point = 38
   Insn 111(l0): point = 41
   Insn 109(l0): point = 43
   Insn 110(l0): point = 45
   Insn 106(l0): point = 48
   Insn 105(l0): point = 53
   Insn 103(l0): point = 56
   Insn 79(l0): point = 58
   Insn 87(l0): point = 60
   Insn 73(l0): point = 62
   Insn 71(l0): point = 64
   Insn 86(l0): point = 66
   Insn 85(l0): point = 68
   Insn 102(l0): point = 70
   Insn 161(l0): point = 72
   Insn 70(l0): point = 74
   Insn 162(l0): point = 79
   Insn 156(l0): point = 81
   Insn 82(l0): point = 83
   Insn 81(l0): point = 85
   Insn 83(l0): point = 87
   Insn 78(l0): point = 89
   Insn 68(l0): point = 91
   Insn 67(l0): point = 93
   Insn 66(l0): point = 95
   Insn 63(l0): point = 98
   Insn 62(l0): point = 100
   Insn 59(l0): point = 103
   Insn 58(l0): point = 105
   Insn 54(l0): point = 108
   Insn 52(l0): point = 110
   Insn 53(l0): point = 112
   Insn 49(l0): point = 115
   Insn 48(l0): point = 120
   Insn 46(l0): point = 123
   Insn 22(l0): point = 125
   Insn 30(l0): point = 127
   Insn 16(l0): point = 129
   Insn 14(l0): point = 131
   Insn 29(l0): point = 133
   Insn 28(l0): point = 135
   Insn 45(l0): point = 137
   Insn 163(l0): point = 139
   Insn 13(l0): point = 141
   Insn 164(l0): point = 146
   Insn 155(l0): point = 148
   Insn 25(l0): point = 150
   Insn 24(l0): point = 152
   Insn 26(l0): point = 154
   Insn 21(l0): point = 156
   Insn 11(l0): point = 158
   Insn 10(l0): point = 160
   Insn 5(l0): point = 162
   Insn 4(l0): point = 164
   Insn 9(l0): point = 166
   Insn 2(l0): point = 168
 a0(r204): [5..6]
 a1(r137): [9..16]
 a2(r145): [11..162]
 a3(r200): [13..28]
 a4(r142): [15..168]
 a5(r134): [39..81]
 a6(r133): [46..89]
 a7(r197): [49..53]
 a8(r217): [61..85]
 a9(r212): [63..64]
 a10(r173): [77..77] [65..75]
 a11(r216): [69..87]
 a12(r189): [71..72]
 a13(r174): [75..79]
 a14(r139): [75..91]
 a15(r144): [96..164]
 a16(r136): [106..148]
 a17(r135): [113..156]
 a18(r170): [116..120]
 a19(r211): [128..152]
 a20(r206): [130..131]
 a21(r146): [144..144] [132..142]
 a22(r210): [136..154]
 a23(r162): [138..139]
 a24(r147): [142..146]
 a25(r140): [142..158]
Compressing live ranges: from 171 to 50 - 29%
Ranges after the compression:
 a0(r204): [0..1]
 a1(r137): [2..6]
 a2(r145): [3..47]
 a3(r200): [4..7]
 a4(r142): [5..49]
 a5(r134): [8..22]
 a6(r133): [9..25]
 a7(r197): [10..11]
 a8(r217): [12..23]
 a9(r212): [13..14]
 a10(r173): [20..20] [15..19]
 a11(r216): [16..24]
 a12(r189): [17..18]
 a13(r174): [19..21]
 a14(r139): [19..26]
 a15(r144): [27..48]
 a16(r136): [28..42]
 a17(r135): [29..45]
 a18(r170): [30..31]
 a19(r211): [32..43]
 a20(r206): [33..34]
 a21(r146): [40..40] [35..39]
 a22(r210): [36..44]
 a23(r162): [37..38]
 a24(r147): [39..41]
 a25(r140): [39..46]
+++Allocating 200 bytes for conflict table (uncompressed size 208)
;; a0(r204,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r137,l0) conflicts: a2(r145,l0) a3(r200,l0) a4(r142,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a2(r145,l0) conflicts: a1(r137,l0) a3(r200,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a7(r197,l0) a8(r217,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r200,l0) conflicts: a1(r137,l0) a2(r145,l0) a4(r142,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r142,l0) conflicts: a1(r137,l0) a2(r145,l0) a3(r200,l0) a5(r134,l0) a6(r133,l0) a7(r197,l0) a8(r217,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r134,l0) conflicts: a2(r145,l0) a4(r142,l0) a6(r133,l0) a7(r197,l0) a8(r217,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r133,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a7(r197,l0) a8(r217,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r197,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r217,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r212,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r173,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r216,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a10(r173,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r189,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a10(r173,l0) a11(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r174,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a10(r173,l0) a11(r216,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r139,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a10(r173,l0) a11(r216,l0) a13(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r144,l0) conflicts: a2(r145,l0) a4(r142,l0) a16(r136,l0) a17(r135,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a16(r136,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a17(r135,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r135,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r170,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r211,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r206,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r146,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r210,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a21(r146,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r162,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a21(r146,l0) a22(r210,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r147,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a21(r146,l0) a22(r210,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r140,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a21(r146,l0) a22(r210,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=13, points=50
    allocnos=26, copies=0, conflicts=0, ranges=28

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 12 11 10 9 8 7 6 5 4 3 2
    all: 0r204 1r137 2r145 3r200 4r142 5r134 6r133 7r197 8r217 9r212 10r173 11r216 12r189 13r174 14r139 15r144 16r136 17r135 18r170 19r211 20r206 21r146 22r210 23r162 24r147 25r140
    modified regnos: 133 134 135 136 137 139 140 142 144 145 146 147 162 170 173 174 189 197 200 204 206 210 211 212 216 217
    border:
    Pressure: GENERAL_REGS=12
    Reg 204 of GENERAL_REGS has 4 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 200 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
      Pushing a24(r147,l0)
      Pushing a23(r162,l0)
      Pushing a22(r210,l0)
      Pushing a21(r146,l0)
      Pushing a20(r206,l0)
      Pushing a18(r170,l0)
      Pushing a13(r174,l0)
      Pushing a12(r189,l0)
      Pushing a11(r216,l0)
      Pushing a10(r173,l0)
      Pushing a9(r212,l0)
      Pushing a7(r197,l0)
      Pushing a19(r211,l0)
      Pushing a17(r135,l0)
      Pushing a8(r217,l0)
      Pushing a6(r133,l0)
      Pushing a25(r140,l0)
      Pushing a14(r139,l0)
      Pushing a16(r136,l0)
      Pushing a5(r134,l0)
      Pushing a1(r137,l0)
      Pushing a15(r144,l0)
      Pushing a0(r204,l0)
      Pushing a4(r142,l0)
      Pushing a3(r200,l0)
      Pushing a2(r145,l0)
      Popping a2(r145,l0)  -- assign reg 4
      Popping a3(r200,l0)  -- assign reg 5
      Popping a4(r142,l0)  -- assign reg 6
      Popping a0(r204,l0)  -- assign reg 12
      Popping a15(r144,l0)  -- assign reg 5
      Popping a1(r137,l0)  -- assign reg 3
      Popping a5(r134,l0)  -- assign reg 2
      Popping a16(r136,l0)  -- assign reg 2
      Popping a14(r139,l0)  -- assign reg 0
      Popping a25(r140,l0)  -- assign reg 0
      Popping a6(r133,l0)  -- assign reg 12
      Popping a8(r217,l0)  -- assign reg 14
      Popping a17(r135,l0)  -- assign reg 12
      Popping a19(r211,l0)  -- assign reg 14
      Popping a7(r197,l0)  -- assign reg 0
      Popping a9(r212,l0)  -- assign reg 1
      Popping a10(r173,l0)  -- assign reg 8
      Popping a11(r216,l0)  -- assign reg 5
      Popping a12(r189,l0)  -- assign reg 1
      Popping a13(r174,l0)  -- assign reg 10
      Popping a18(r170,l0)  -- assign reg 0
      Popping a20(r206,l0)  -- assign reg 1
      Popping a21(r146,l0)  -- assign reg 8
      Popping a22(r210,l0)  -- assign reg 7
      Popping a23(r162,l0)  -- assign reg 1
      Popping a24(r147,l0)  -- assign reg 10
Disposition:
    6:r133 l0    12    5:r134 l0     2   17:r135 l0    12   16:r136 l0     2
    1:r137 l0     3   14:r139 l0     0   25:r140 l0     0    4:r142 l0     6
   15:r144 l0     5    2:r145 l0     4   21:r146 l0     8   24:r147 l0    10
   23:r162 l0     1   18:r170 l0     0   10:r173 l0     8   13:r174 l0    10
   12:r189 l0     1    7:r197 l0     0    3:r200 l0     5    0:r204 l0    12
   20:r206 l0     1   22:r210 l0     7   19:r211 l0    14    9:r212 l0     1
   11:r216 l0     5    8:r217 l0    14
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 142
insn=9, live_throughout: 2, 3, 13, 142, dead_or_set: 0, 1
insn=4, live_throughout: 0, 3, 13, 142, dead_or_set: 2, 144
insn=5, live_throughout: 0, 13, 142, 144, dead_or_set: 3, 145
insn=10, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 1, 14
insn=11, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 1, 140
insn=21, live_throughout: 13, 140, 142, 144, 145, dead_or_set: 135
insn=26, live_throughout: 13, 135, 140, 142, 144, 145, dead_or_set: 210
insn=24, live_throughout: 13, 135, 140, 142, 144, 145, 210, dead_or_set: 211
insn=25, live_throughout: 13, 135, 140, 142, 144, 145, 210, dead_or_set: 211
insn=155, live_throughout: 13, 135, 140, 142, 144, 145, 210, 211, dead_or_set: 136
insn=164, live_throughout: 13, 135, 140, 142, 144, 145, 210, 211, dead_or_set: 147
insn=13, live_throughout: 13, 135, 142, 144, 145, 210, 211, dead_or_set: 140, 146, 147
insn=163, live_throughout: 13, 135, 142, 144, 145, 146, 210, 211, dead_or_set: 162
insn=45, live_throughout: 13, 135, 142, 144, 145, 146, 210, 211, dead_or_set: 162
insn=28, live_throughout: 13, 24, 135, 142, 144, 145, 146, 211, dead_or_set: 136, 210
insn=29, live_throughout: 13, 24, 135, 142, 144, 145, 146, 211, dead_or_set: 136
insn=14, live_throughout: 13, 24, 135, 136, 142, 144, 145, 211, dead_or_set: 146, 206
insn=16, live_throughout: 13, 24, 135, 136, 142, 144, 145, 211, dead_or_set: 206
insn=30, live_throughout: 13, 24, 135, 136, 142, 144, 145, dead_or_set: 136, 211
insn=22, live_throughout: 13, 24, 135, 136, 142, 144, 145, dead_or_set: 
insn=46, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 
insn=48, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 170
insn=49, live_throughout: 13, 135, 142, 144, 145, dead_or_set: 136, 170
insn=50, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 
insn=53, live_throughout: 13, 136, 142, 144, 145, dead_or_set: 135
insn=52, live_throughout: 13, 24, 136, 142, 144, 145, dead_or_set: 
insn=54, live_throughout: 13, 136, 142, 144, 145, dead_or_set: 
insn=58, live_throughout: 13, 142, 144, 145, dead_or_set: 136
insn=59, live_throughout: 13, 142, 144, 145, dead_or_set: 
insn=62, live_throughout: 13, 142, 144, 145, dead_or_set: 0
insn=63, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 14
insn=64, live_throughout: 13, 142, 144, 145, dead_or_set: 
insn=66, live_throughout: 13, 142, 145, dead_or_set: 0, 144
insn=67, live_throughout: 13, 142, 145, dead_or_set: 0, 1, 14
insn=68, live_throughout: 13, 142, 145, dead_or_set: 0, 1, 139
insn=78, live_throughout: 13, 139, 142, 145, dead_or_set: 133
insn=83, live_throughout: 13, 133, 139, 142, 145, dead_or_set: 216
insn=81, live_throughout: 13, 133, 139, 142, 145, 216, dead_or_set: 217
insn=82, live_throughout: 13, 133, 139, 142, 145, 216, dead_or_set: 217
insn=156, live_throughout: 13, 133, 139, 142, 145, 216, 217, dead_or_set: 134
insn=162, live_throughout: 13, 133, 139, 142, 145, 216, 217, dead_or_set: 174
insn=70, live_throughout: 13, 133, 142, 145, 216, 217, dead_or_set: 139, 173, 174
insn=161, live_throughout: 13, 133, 142, 145, 173, 216, 217, dead_or_set: 189
insn=102, live_throughout: 13, 133, 142, 145, 173, 216, 217, dead_or_set: 189
insn=85, live_throughout: 13, 24, 133, 142, 145, 173, 217, dead_or_set: 134, 216
insn=86, live_throughout: 13, 24, 133, 142, 145, 173, 217, dead_or_set: 134
insn=71, live_throughout: 13, 24, 133, 134, 142, 145, 217, dead_or_set: 173, 212
insn=73, live_throughout: 13, 24, 133, 134, 142, 145, 217, dead_or_set: 212
insn=87, live_throughout: 13, 24, 133, 134, 142, 145, dead_or_set: 134, 217
insn=79, live_throughout: 13, 24, 133, 134, 142, 145, dead_or_set: 
insn=103, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 
insn=105, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 197
insn=106, live_throughout: 13, 133, 142, 145, dead_or_set: 134, 197
insn=107, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 
insn=110, live_throughout: 13, 134, 142, 145, dead_or_set: 133
insn=109, live_throughout: 13, 24, 134, 142, 145, dead_or_set: 
insn=111, live_throughout: 13, 134, 142, 145, dead_or_set: 
insn=115, live_throughout: 13, 142, 145, dead_or_set: 134
insn=116, live_throughout: 13, 142, 145, dead_or_set: 
insn=119, live_throughout: 13, 142, 145, dead_or_set: 0
insn=120, live_throughout: 13, 142, 145, dead_or_set: 0, 14
insn=121, live_throughout: 13, 142, 145, dead_or_set: 
insn=123, live_throughout: 13, 142, 145, dead_or_set: 200
insn=127, live_throughout: 13, 142, 145, 200, dead_or_set: 1
insn=128, live_throughout: 1, 13, 142, 145, 200, dead_or_set: 2
insn=129, live_throughout: 1, 2, 13, 142, 145, 200, dead_or_set: 3
insn=126, live_throughout: 1, 2, 3, 13, 142, 145, 200, dead_or_set: 0
insn=130, live_throughout: 13, 142, 145, 200, dead_or_set: 0, 1, 2, 3, 14
insn=131, live_throughout: 13, 142, 145, 200, dead_or_set: 0, 137
insn=135, live_throughout: 13, 137, 145, 200, dead_or_set: 0, 142
insn=136, live_throughout: 0, 13, 137, 145, dead_or_set: 1, 200
insn=137, live_throughout: 0, 1, 13, 137, dead_or_set: 2, 145
insn=138, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 137
insn=160, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 204
insn=134, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 204
insn=139, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=151, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 147: (insn_list:REG_DEP_TRUE 164 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 163 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 48 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 162 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 161 (nil))
init_insns for 197: (insn_list:REG_DEP_TRUE 105 (nil))
init_insns for 200: (insn_list:REG_DEP_TRUE 123 (nil))
init_insns for 204: (insn_list:REG_DEP_TRUE 160 (nil))
changing reg in insn 78
changing reg in insn 102
changing reg in insn 102
changing reg in insn 110
changing reg in insn 156
changing reg in insn 106
changing reg in insn 86
changing reg in insn 109
changing reg in insn 106
changing reg in insn 87
changing reg in insn 85
changing reg in insn 106
changing reg in insn 21
changing reg in insn 45
changing reg in insn 45
changing reg in insn 53
changing reg in insn 155
changing reg in insn 49
changing reg in insn 29
changing reg in insn 52
changing reg in insn 49
changing reg in insn 30
changing reg in insn 28
changing reg in insn 49
changing reg in insn 131
changing reg in insn 138
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 2
changing reg in insn 135
changing reg in insn 4
changing reg in insn 66
changing reg in insn 5
changing reg in insn 137
changing reg in insn 129
changing reg in insn 13
changing reg in insn 164
changing reg in insn 13
changing reg in insn 163
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 70
changing reg in insn 162
changing reg in insn 70
changing reg in insn 161
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 123
changing reg in insn 136
changing reg in insn 126
changing reg in insn 160
changing reg in insn 134
changing reg in insn 14
changing reg in insn 26
changing reg in insn 28
changing reg in insn 25
changing reg in insn 24
changing reg in insn 29
changing reg in insn 25
changing reg in insn 30
changing reg in insn 71
changing reg in insn 83
changing reg in insn 85
changing reg in insn 82
changing reg in insn 81
changing reg in insn 86
changing reg in insn 82
changing reg in insn 87
Spilling for insn 16.
Spilling for insn 22.
Spilling for insn 52.
Spilling for insn 58.
Using reg 1 for reload 0
Spilling for insn 73.
Spilling for insn 79.
Spilling for insn 109.
Spilling for insn 115.
Using reg 1 for reload 0
Spilling for insn 134.

Reloads for insn # 16
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])

Reloads for insn # 22
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])

Reloads for insn # 52
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])

Reloads for insn # 58
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 73
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 79
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 109
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 115
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 134
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
deleting insn with uid = 11.
deleting insn with uid = 68.
deleting insn with uid = 138.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 139.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)


vfp_double_fmul

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,18u,2d} r1={17d,15u,2d} r2={17d,11u,2d} r3={15d,9u,2d} r4={1d,2u} r5={3d,4u} r6={1d,1u} r7={1d,1u} r8={2d} r9={2d,2u} r10={2d,2u} r11={2d,2u} r12={10d,9u} r13={1d,30u,1d} r14={11d,7u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={12d,6u} r25={2d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 902{772d,119u,11e} in 71{65 regular + 6 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 17 2 NOTE_INSN_FUNCTION_BEG)

(note 17 6 19 2 NOTE_INSN_DELETED)

(note 19 17 20 2 NOTE_INSN_DELETED)

(note 20 19 23 2 NOTE_INSN_DELETED)

(note 23 20 27 2 NOTE_INSN_DELETED)

(note 27 23 31 2 NOTE_INSN_DELETED)

(note 31 27 32 2 NOTE_INSN_DELETED)

(note 32 31 33 2 NOTE_INSN_DELETED)

(note 33 32 35 2 NOTE_INSN_DELETED)

(note 35 33 36 2 NOTE_INSN_DELETED)

(note 36 35 39 2 NOTE_INSN_DELETED)

(note 39 36 40 2 NOTE_INSN_DELETED)

(note 40 39 42 2 NOTE_INSN_DELETED)

(note 42 40 43 2 NOTE_INSN_DELETED)

(note 43 42 44 2 NOTE_INSN_DELETED)

(note 44 43 2 2 NOTE_INSN_DELETED)

(insn 2 44 9 2 arch/arm/vfp/vfpdouble.c:917 (set (reg/v:SI 6 r6 [orig:142 dd ] [142])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 4 2 arch/arm/vfp/vfpdouble.c:921 (set (reg:SI 0 r0)
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (nil))

(insn 4 9 5 2 arch/arm/vfp/vfpdouble.c:917 (set (reg/v:SI 5 r5 [orig:144 dm ] [144])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 10 2 arch/arm/vfp/vfpdouble.c:917 (set (reg/v:SI 4 r4 [orig:145 fpscr ] [145])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 21 2 arch/arm/vfp/vfpdouble.c:921 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 21 10 26 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:135 D.5515 ] [135])
        (zero_extract:SI (reg:SI 1 r1 [ D.4900+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 26 21 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 7 r7 [210])
        (ashift:SI (reg:SI 0 r0 [orig:140 D.4900 ] [140])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 24 26 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:211+4 ] [211])
        (ashift:SI (reg:SI 1 r1 [ D.4900+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 155 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:211+4 ] [211])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:140 D.4900 ] [140])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:211+4 ] [211]))) 270 {*arith_shiftsi} (nil))

(insn 155 25 164 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:136 significand ] [136])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 164 155 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [147])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 13 164 163 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [146])
        (and:DI (reg:DI 0 r0 [orig:140 D.4900 ] [140])
            (reg:DI 10 sl [147]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:140 D.4900 ] [140])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 163 13 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [162])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 45 163 28 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:135 D.5515 ] [135])
                    (reg:SI 1 r1 [162]))
                (ne:SI (reg:SI 12 ip [orig:135 D.5515 ] [135])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 28 45 29 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:136 significand ] [136])
        (lshiftrt:SI (reg:SI 7 r7 [210])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 29 28 14 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:136 significand ] [136])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:211+4 ] [211])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:136 significand ] [136]))) 270 {*arith_shiftsi} (nil))

(insn 14 29 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [206])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 16 14 30 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
        (reg:HI 1 r1 [206])) 176 {*movhi_insn_arch4} (nil))

(insn 30 16 22 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:211+4 ] [211])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 22 30 46 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:135 D.5515 ] [135])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 46 22 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [170])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:136 significand ] [136])
        (ior:DI (reg/v:DI 2 r2 [orig:136 significand ] [136])
            (reg:DI 0 r0 [170]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:136 significand ] [136])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 149 "" [1 uses])

(note 51 50 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 53 51 52 4 arch/arm/vfp/vfpdouble.c:922 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:135 D.5515 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 52 53 54 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:136 significand ] [136])) 163 {*arm_movdi} (nil))

(jump_insn 54 52 55 4 arch/arm/vfp/vfpdouble.c:922 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  4 [50.0%]  (fallthru)
(note 55 54 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 56 55 57 5 NOTE_INSN_DELETED)

(note 57 56 58 5 NOTE_INSN_DELETED)

(insn 58 57 59 5 arch/arm/vfp/vfpdouble.c:922 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:136 significand ] [136])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 59 58 60 5 arch/arm/vfp/vfpdouble.c:922 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 6 NOTE_INSN_DELETED)

(insn 62 61 63 6 arch/arm/vfp/vfpdouble.c:923 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(call_insn 63 62 64 6 arch/arm/vfp/vfpdouble.c:923 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 64 63 65 7 150 "" [2 uses])

(note 65 64 74 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 74 65 76 7 NOTE_INSN_DELETED)

(note 76 74 77 7 NOTE_INSN_DELETED)

(note 77 76 80 7 NOTE_INSN_DELETED)

(note 80 77 84 7 NOTE_INSN_DELETED)

(note 84 80 88 7 NOTE_INSN_DELETED)

(note 88 84 89 7 NOTE_INSN_DELETED)

(note 89 88 90 7 NOTE_INSN_DELETED)

(note 90 89 92 7 NOTE_INSN_DELETED)

(note 92 90 93 7 NOTE_INSN_DELETED)

(note 93 92 96 7 NOTE_INSN_DELETED)

(note 96 93 97 7 NOTE_INSN_DELETED)

(note 97 96 99 7 NOTE_INSN_DELETED)

(note 99 97 100 7 NOTE_INSN_DELETED)

(note 100 99 101 7 NOTE_INSN_DELETED)

(note 101 100 66 7 NOTE_INSN_DELETED)

(insn 66 101 67 7 arch/arm/vfp/vfpdouble.c:925 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:144 dm ] [144])) 167 {*arm_movsi_insn} (nil))

(call_insn 67 66 78 7 arch/arm/vfp/vfpdouble.c:925 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 78 67 83 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:133 D.5530 ] [133])
        (zero_extract:SI (reg:SI 1 r1 [ D.4909+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 83 78 81 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 5 r5 [216])
        (ashift:SI (reg:SI 0 r0 [orig:139 D.4909 ] [139])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 81 83 82 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:217+4 ] [217])
        (ashift:SI (reg:SI 1 r1 [ D.4909+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 82 81 156 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:217+4 ] [217])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:139 D.4909 ] [139])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:217+4 ] [217]))) 270 {*arith_shiftsi} (nil))

(insn 156 82 162 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:134 significand ] [134])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 162 156 70 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [174])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 70 162 161 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [173])
        (and:DI (reg:DI 0 r0 [orig:139 D.4909 ] [139])
            (reg:DI 10 sl [174]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:139 D.4909 ] [139])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 161 70 102 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [189])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 102 161 85 7 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:133 D.5530 ] [133])
                    (reg:SI 1 r1 [189]))
                (ne:SI (reg:SI 12 ip [orig:133 D.5530 ] [133])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 85 102 86 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:134 significand ] [134])
        (lshiftrt:SI (reg:SI 5 r5 [216])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 86 85 71 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:134 significand ] [134])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:217+4 ] [217])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:134 significand ] [134]))) 270 {*arith_shiftsi} (nil))

(insn 71 86 73 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [212])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 73 71 87 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
        (reg:HI 1 r1 [212])) 176 {*movhi_insn_arch4} (nil))

(insn 87 73 79 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:217+4 ] [217])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 79 87 103 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:133 D.5530 ] [133])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 103 79 104 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 104 103 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 105 104 106 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [197])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 106 105 107 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:134 significand ] [134])
        (ior:DI (reg/v:DI 2 r2 [orig:134 significand ] [134])
            (reg:DI 0 r0 [197]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:134 significand ] [134])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 107 106 108 9 151 "" [1 uses])

(note 108 107 110 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 110 108 109 9 arch/arm/vfp/vfpdouble.c:926 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:133 D.5530 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 109 110 111 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:134 significand ] [134])) 163 {*arm_movdi} (nil))

(jump_insn 111 109 112 9 arch/arm/vfp/vfpdouble.c:926 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  10 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  9 [61.0%]  (fallthru)
(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 113 112 114 10 NOTE_INSN_DELETED)

(note 114 113 115 10 NOTE_INSN_DELETED)

(insn 115 114 116 10 arch/arm/vfp/vfpdouble.c:926 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:134 significand ] [134])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 116 115 117 10 arch/arm/vfp/vfpdouble.c:926 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  11 [39.0%]  (fallthru)
;; Succ edge  12 [61.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  10 [39.0%]  (fallthru)
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 118 117 119 11 NOTE_INSN_DELETED)

(insn 119 118 120 11 arch/arm/vfp/vfpdouble.c:927 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(call_insn 120 119 121 11 arch/arm/vfp/vfpdouble.c:927 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  9 [39.0%] 
;; Pred edge  10 [61.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 121 120 122 12 152 "" [2 uses])

(note 122 121 124 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 124 122 125 12 NOTE_INSN_DELETED)

(note 125 124 123 12 NOTE_INSN_DELETED)

(insn 123 125 127 12 arch/arm/vfp/vfpdouble.c:929 (set (reg/f:SI 5 r5 [200])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))
        (nil)))

(insn 127 123 128 12 arch/arm/vfp/vfpdouble.c:929 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(insn 128 127 129 12 arch/arm/vfp/vfpdouble.c:929 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 129 128 126 12 arch/arm/vfp/vfpdouble.c:929 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:145 fpscr ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 126 129 130 12 arch/arm/vfp/vfpdouble.c:929 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(call_insn 130 126 131 12 arch/arm/vfp/vfpdouble.c:929 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply") [flags 0x3] <function_decl 0x10b08180 vfp_double_multiply>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 131 130 135 12 arch/arm/vfp/vfpdouble.c:929 (set (reg/v:SI 3 r3 [orig:137 exceptions ] [137])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 135 131 136 12 arch/arm/vfp/vfpdouble.c:930 (set (reg:SI 0 r0)
        (reg/v:SI 6 r6 [orig:142 dd ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 136 135 137 12 arch/arm/vfp/vfpdouble.c:930 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 137 136 160 12 arch/arm/vfp/vfpdouble.c:930 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 fpscr ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 160 137 134 12 arch/arm/vfp/vfpdouble.c:930 (set (reg/f:SI 12 ip [204])
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x10d50fc0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x10d50fc0>)
        (nil)))

(insn 134 160 139 12 arch/arm/vfp/vfpdouble.c:930 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [204])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x10d50fc0>)
        (nil)))

(call_insn 139 134 151 12 arch/arm/vfp/vfpdouble.c:930 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 151 139 159 12 arch/arm/vfp/vfpdouble.c:931 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 159 151 165 NOTE_INSN_DELETED)

(note 165 159 0 NOTE_INSN_DELETED)


;; Function vfp_double_fdiv (vfp_double_fdiv)[0:183]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 918.
rescanning insn with uid = 918.
deleting insn with uid = 918.
deleting insn with uid = 655.
scanning new insn with uid = 919.
verify found no changes in insn with uid = 919.
deleting insn with uid = 618.
scanning new insn with uid = 920.
verify found no changes in insn with uid = 920.
deleting insn with uid = 485.
rescanning insn with uid = 913.
deleting insn with uid = 913.
deleting insn with uid = 430.
scanning new insn with uid = 921.
rescanning insn with uid = 921.
deleting insn with uid = 921.
deleting insn with uid = 147.
scanning new insn with uid = 922.
verify found no changes in insn with uid = 922.
deleting insn with uid = 107.
scanning new insn with uid = 923.
verify found no changes in insn with uid = 923.
deleting insn with uid = 57.
scanning new insn with uid = 924.
verify found no changes in insn with uid = 924.
deleting insn with uid = 35.
scanning new insn with uid = 925.
verify found no changes in insn with uid = 925.
deleting insn with uid = 13.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 76 n_edges 111 count 150 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 76 n_edges 111 count 152 (    2)

Pass 0 for finding allocno costs

    a147 (r446,l1) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r446,l0) best GENERAL_REGS, cover GENERAL_REGS
    a135 (r445,l2) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r445,l0) best GENERAL_REGS, cover GENERAL_REGS
    a134 (r444,l2) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r444,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r443,l0) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r442,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r436,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r434,l0) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r432,l0) best GENERAL_REGS, cover GENERAL_REGS
    a110 (r431,l0) best GENERAL_REGS, cover GENERAL_REGS
    a112 (r430,l0) best GENERAL_REGS, cover GENERAL_REGS
    a111 (r426,l0) best GENERAL_REGS, cover GENERAL_REGS
    a121 (r425,l0) best GENERAL_REGS, cover GENERAL_REGS
    a124 (r424,l0) best GENERAL_REGS, cover GENERAL_REGS
    a122 (r420,l0) best GENERAL_REGS, cover GENERAL_REGS
    a146 (r411,l1) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r411,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r396,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r395,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r393,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r389,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r388,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r386,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r383,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r381,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r379,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r378,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r377,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r375,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r367,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r366,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r364,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r361,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r360,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r358,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r356,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r354,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r349,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r347,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r345,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r343,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r340,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r339,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r337,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r321,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r320,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r319,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r318,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r317,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r316,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r314,l0) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r311,l0) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r308,l0) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r295,l0) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r294,l0) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r293,l0) best GENERAL_REGS, cover GENERAL_REGS
    a82 (r291,l0) best GENERAL_REGS, cover GENERAL_REGS
    a84 (r290,l0) best GENERAL_REGS, cover GENERAL_REGS
    a145 (r289,l1) best GENERAL_REGS, cover GENERAL_REGS
    a133 (r289,l2) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r289,l0) best GENERAL_REGS, cover GENERAL_REGS
    a89 (r288,l0) best GENERAL_REGS, cover GENERAL_REGS
    a85 (r287,l0) best GENERAL_REGS, cover GENERAL_REGS
    a86 (r286,l0) best GENERAL_REGS, cover GENERAL_REGS
    a88 (r283,l0) best GENERAL_REGS, cover GENERAL_REGS
    a87 (r282,l0) best GENERAL_REGS, cover GENERAL_REGS
    a90 (r281,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r271,l0) best GENERAL_REGS, cover GENERAL_REGS
    a93 (r270,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r269,l0) best GENERAL_REGS, cover GENERAL_REGS
    a97 (r265,l0) best GENERAL_REGS, cover GENERAL_REGS
    a96 (r264,l0) best GENERAL_REGS, cover GENERAL_REGS
    a98 (r262,l0) best GENERAL_REGS, cover GENERAL_REGS
    a99 (r258,l0) best GENERAL_REGS, cover GENERAL_REGS
    a100 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    a103 (r255,l0) best GENERAL_REGS, cover GENERAL_REGS
    a102 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    a108 (r252,l0) best GENERAL_REGS, cover GENERAL_REGS
    a105 (r248,l0) best GENERAL_REGS, cover GENERAL_REGS
    a106 (r247,l0) best GENERAL_REGS, cover GENERAL_REGS
    a109 (r245,l0) best GENERAL_REGS, cover GENERAL_REGS
    a114 (r237,l0) best GENERAL_REGS, cover GENERAL_REGS
    a116 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a113 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a119 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a125 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    a126 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a123 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a144 (r195,l1) best GENERAL_REGS, cover GENERAL_REGS
    a132 (r195,l2) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a118 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a143 (r192,l1) best GENERAL_REGS, cover GENERAL_REGS
    a131 (r192,l2) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a127 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a115 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a83 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a91 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a92 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a130 (r182,l2) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a129 (r181,l2) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a117 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a120 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a94 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a95 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a107 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a104 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a101 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a142 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a141 (r161,l1) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a128 (r160,l2) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a140 (r159,l1) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a139 (r158,l1) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a138 (r157,l1) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a137 (r156,l1) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a136 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a1(r393,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a2(r389,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a3(r395,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r388,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r383,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r386,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r381,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r396,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r379,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a11(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r378,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r377,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r271,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r375,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r364,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a18(r361,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a19(r366,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r360,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r356,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a22(r367,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r358,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r354,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r349,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r347,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r345,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a28(r343,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a29(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a30(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a31(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a32(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r340,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a34(r444,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r339,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r445,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a37(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a38(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a39(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r443,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a42(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r337,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a44(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a46(r289,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a47(r153,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a48(r434,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a49(r321,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a50(r320,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a51(r436,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a52(r318,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a53(r319,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a55(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a56(r163,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a57(r317,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r411,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r316,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a60(r314,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a61(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a62(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a63(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a64(r311,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a65(r446,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a66(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a67(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a68(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a69(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r442,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a71(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r308,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a74(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a75(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a76(r165,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a77(r295,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a78(r294,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a79(r432,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a80(r293,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a81(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a82(r291,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r186,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:44000
  a84(r290,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a85(r287,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a86(r286,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r282,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a88(r283,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a89(r288,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a90(r281,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r184,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:92000
  a92(r183,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:92000
  a93(r270,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a94(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a95(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a96(r264,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a97(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a98(r262,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a99(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a100(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a101(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a102(r254,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a103(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a104(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a105(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a106(r247,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a107(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a108(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a109(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a110(r431,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a111(r426,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a112(r430,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a113(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a114(r237,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a115(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a116(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a117(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a118(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a119(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a120(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a121(r425,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a122(r420,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a123(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a124(r424,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a125(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a126(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a127(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a128(r160,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a129(r181,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a130(r182,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a131(r192,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a132(r195,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a133(r289,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a134(r444,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a135(r445,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a136(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a137(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a138(r157,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a139(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a140(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a141(r161,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a142(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a143(r192,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a144(r195,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a145(r289,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a146(r411,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a147(r446,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r446: preferred GENERAL_REGS, alternative NO_REGS
    r445: preferred GENERAL_REGS, alternative NO_REGS
    r444: preferred GENERAL_REGS, alternative NO_REGS
    r443: preferred GENERAL_REGS, alternative NO_REGS
    r442: preferred GENERAL_REGS, alternative NO_REGS
    r436: preferred GENERAL_REGS, alternative NO_REGS
    r434: preferred GENERAL_REGS, alternative NO_REGS
    r432: preferred GENERAL_REGS, alternative NO_REGS
    r431: preferred GENERAL_REGS, alternative NO_REGS
    r430: preferred GENERAL_REGS, alternative NO_REGS
    r426: preferred GENERAL_REGS, alternative NO_REGS
    r425: preferred GENERAL_REGS, alternative NO_REGS
    r424: preferred GENERAL_REGS, alternative NO_REGS
    r420: preferred GENERAL_REGS, alternative NO_REGS
    r411: preferred GENERAL_REGS, alternative NO_REGS
    r396: preferred GENERAL_REGS, alternative NO_REGS
    r395: preferred GENERAL_REGS, alternative NO_REGS
    r393: preferred GENERAL_REGS, alternative NO_REGS
    r389: preferred GENERAL_REGS, alternative NO_REGS
    r388: preferred GENERAL_REGS, alternative NO_REGS
    r386: preferred GENERAL_REGS, alternative NO_REGS
    r383: preferred GENERAL_REGS, alternative NO_REGS
    r381: preferred GENERAL_REGS, alternative NO_REGS
    r379: preferred GENERAL_REGS, alternative NO_REGS
    r378: preferred GENERAL_REGS, alternative NO_REGS
    r377: preferred GENERAL_REGS, alternative NO_REGS
    r375: preferred GENERAL_REGS, alternative NO_REGS
    r367: preferred GENERAL_REGS, alternative NO_REGS
    r366: preferred GENERAL_REGS, alternative NO_REGS
    r364: preferred GENERAL_REGS, alternative NO_REGS
    r361: preferred GENERAL_REGS, alternative NO_REGS
    r360: preferred GENERAL_REGS, alternative NO_REGS
    r358: preferred GENERAL_REGS, alternative NO_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS
    r354: preferred GENERAL_REGS, alternative NO_REGS
    r349: preferred GENERAL_REGS, alternative NO_REGS
    r347: preferred GENERAL_REGS, alternative NO_REGS
    r345: preferred GENERAL_REGS, alternative NO_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS
    r317: preferred GENERAL_REGS, alternative NO_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a1(r393,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a2(r389,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a3(r395,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r388,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r383,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r386,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r381,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r396,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r379,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a11(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r378,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r377,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r271,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r375,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r364,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a18(r361,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a19(r366,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r360,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r356,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a22(r367,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r358,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r354,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r349,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r347,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r345,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a28(r343,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a29(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a30(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a31(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a32(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r340,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a34(r444,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r339,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r445,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a37(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a38(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a39(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r443,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a42(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r337,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a44(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r137,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a46(r289,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a47(r153,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a48(r434,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a49(r321,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a50(r320,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a51(r436,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a52(r318,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a53(r319,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a55(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a56(r163,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a57(r317,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r411,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r316,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a60(r314,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a61(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a62(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a63(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a64(r311,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a65(r446,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a66(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a67(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a68(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a69(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r442,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a71(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r308,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a74(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a75(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a76(r165,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a77(r295,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a78(r294,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a79(r432,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a80(r293,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a81(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a82(r291,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r186,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:44000
  a84(r290,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a85(r287,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a86(r286,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r282,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a88(r283,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a89(r288,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a90(r281,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r184,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:92000
  a92(r183,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:92000
  a93(r270,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a94(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a95(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a96(r264,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a97(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a98(r262,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a99(r258,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a100(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a101(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a102(r254,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a103(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a104(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a105(r248,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a106(r247,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a107(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a108(r252,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a109(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a110(r431,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a111(r426,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a112(r430,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a113(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a114(r237,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a115(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a116(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a117(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a118(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a119(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a120(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a121(r425,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a122(r420,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a123(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a124(r424,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a125(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a126(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a127(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a128(r160,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a129(r181,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a130(r182,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a131(r192,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a132(r195,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a133(r289,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a134(r444,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a135(r445,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a136(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a137(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a138(r157,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a139(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a140(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a141(r161,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a142(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a143(r192,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a144(r195,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a145(r289,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a146(r411,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a147(r446,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 742(l0): point = 0
   Insn 736(l0): point = 2
   Insn 728(l0): point = 5
   Insn 726(l0): point = 7
   Insn 724(l0): point = 12
   Insn 715(l0): point = 14
   Insn 722(l0): point = 20
   Insn 714(l0): point = 22
   Insn 708(l0): point = 24
   Insn 713(l0): point = 26
   Insn 707(l0): point = 28
   Insn 721(l0): point = 30
   Insn 718(l0): point = 32
   Insn 711(l0): point = 34
   Insn 705(l0): point = 36
   Insn 720(l0): point = 38
   Insn 729(l0): point = 40
   Insn 727(l0): point = 42
   Insn 869(l0): point = 44
   Insn 868(l0): point = 46
   Insn 867(l0): point = 48
   Insn 703(l0): point = 50
   Insn 906(l0): point = 53
   Insn 698(l0): point = 55
   Insn 697(l0): point = 57
   Insn 696(l0): point = 59
   Insn 694(l0): point = 61
   Insn 691(l0): point = 64
   Insn 904(l0): point = 67
   Insn 686(l0): point = 69
   Insn 685(l0): point = 71
   Insn 684(l0): point = 73
   Insn 683(l0): point = 75
   Insn 902(l0): point = 78
   Insn 676(l0): point = 80
   Insn 675(l0): point = 82
   Insn 673(l0): point = 84
   Insn 672(l0): point = 86
   Insn 671(l0): point = 88
   Insn 674(l0): point = 90
   Insn 900(l0): point = 93
   Insn 663(l0): point = 95
   Insn 661(l0): point = 97
   Insn 662(l0): point = 102
   Insn 659(l0): point = 104
   Insn 651(l0): point = 106
   Insn 657(l0): point = 112
   Insn 650(l0): point = 114
   Insn 656(l0): point = 116
   Insn 918(l0): point = 118
   Insn 645(l0): point = 120
   Insn 649(l0): point = 122
   Insn 644(l0): point = 124
   Insn 653(l0): point = 126
   Insn 866(l0): point = 128
   Insn 865(l0): point = 130
   Insn 647(l0): point = 132
   Insn 864(l0): point = 134
   Insn 642(l0): point = 136
   Insn 638(l0): point = 139
   Insn 637(l0): point = 141
   Insn 635(l0): point = 143
   Insn 634(l0): point = 145
   Insn 633(l0): point = 147
   Insn 636(l0): point = 149
   Insn 898(l0): point = 152
   Insn 625(l0): point = 154
   Insn 624(l0): point = 156
   Insn 619(l0): point = 158
   Insn 919(l0): point = 160
   Insn 623(l0): point = 162
   Insn 621(l0): point = 164
   Insn 622(l0): point = 166
   Insn 620(l0): point = 168
   Insn 614(l0): point = 171
   Insn 613(l0): point = 173
   Insn 612(l0): point = 178
   Insn 611(l0): point = 184
   Insn 609(l0): point = 187
   Insn 608(l0): point = 190
   Insn 604(l0): point = 192
   Insn 607(l0): point = 194
   Insn 896(l0): point = 197
   Insn 583(l0): point = 199
   Insn 591(l0): point = 201
   Insn 915(l0): point = 203
   Insn 587(l0): point = 205
   Insn 582(l0): point = 207
   Insn 916(l0): point = 213
   Insn 580(l0): point = 215
   Insn 848(l0): point = 220
   Insn 565(l0): point = 222
   Insn 564(l0): point = 228
   Insn 562(l0): point = 230
   Insn 581(l0): point = 236
   Insn 561(l0): point = 238
   Insn 563(l0): point = 240
   Insn 560(l0): point = 242
   Insn 863(l0): point = 244
   Insn 862(l0): point = 246
   Insn 557(l0): point = 249
   Insn 894(l0): point = 252
   Insn 552(l0): point = 254
   Insn 545(l0): point = 257
   Insn 544(l0): point = 259
   Insn 543(l0): point = 262
   Insn 541(l0): point = 265
   Insn 540(l0): point = 267
   Insn 532(l0): point = 269
   Insn 506(l0): point = 271
   Insn 536(l0): point = 273
   Insn 528(l0): point = 275
   Insn 510(l0): point = 277
   Insn 501(l0): point = 279
   Insn 521(l0): point = 281
   Insn 499(l0): point = 283
   Insn 492(l0): point = 286
   Insn 491(l0): point = 288
   Insn 488(l0): point = 291
   Insn 487(l0): point = 293
   Insn 486(l0): point = 295
   Insn 920(l0): point = 300
   Insn 484(l0): point = 302
   Insn 481(l0): point = 305
   Insn 479(l0): point = 309
   Insn 478(l0): point = 311
   Insn 477(l0): point = 313
   Insn 892(l0): point = 316
   Insn 472(l0): point = 318
   Insn 471(l0): point = 323
   Insn 460(l0): point = 326
   Insn 459(l0): point = 328
   Insn 458(l0): point = 330
   Insn 457(l0): point = 335
   Insn 455(l0): point = 337
   Insn 456(l0): point = 339
   Insn 454(l0): point = 341
   Insn 861(l0): point = 343
   Insn 860(l0): point = 345
   Insn 890(l0): point = 348
   Insn 432(l0): point = 350
   Insn 438(l0): point = 352
   Insn 914(l0): point = 354
   Insn 434(l0): point = 356
   Insn 913(l0): point = 358
   Insn 431(l0): point = 360
   Insn 433(l0): point = 366
   Insn 429(l0): point = 368
   Insn 845(l0): point = 373
   Insn 414(l0): point = 375
   Insn 413(l0): point = 381
   Insn 411(l0): point = 383
   Insn 859(l0): point = 389
   Insn 410(l0): point = 391
   Insn 412(l0): point = 393
   Insn 409(l0): point = 395
   Insn 858(l0): point = 397
   Insn 857(l0): point = 399
   Insn 406(l0): point = 402
   Insn 888(l0): point = 405
   Insn 401(l0): point = 407
   Insn 394(l0): point = 410
   Insn 393(l0): point = 412
   Insn 392(l0): point = 415
   Insn 390(l0): point = 418
   Insn 389(l0): point = 420
   Insn 381(l0): point = 422
   Insn 357(l0): point = 424
   Insn 385(l0): point = 426
   Insn 377(l0): point = 428
   Insn 361(l0): point = 430
   Insn 352(l0): point = 432
   Insn 370(l0): point = 434
   Insn 350(l0): point = 436
   Insn 347(l0): point = 439
   Insn 346(l0): point = 441
   Insn 344(l0): point = 443
   Insn 343(l0): point = 445
   Insn 342(l0): point = 447
   Insn 856(l0): point = 449
   Insn 886(l0): point = 452
   Insn 337(l0): point = 454
   Insn 326(l0): point = 457
   Insn 325(l0): point = 459
   Insn 323(l0): point = 461
   Insn 322(l0): point = 463
   Insn 321(l0): point = 465
   Insn 855(l0): point = 467
   Insn 884(l0): point = 470
   Insn 316(l0): point = 472
   Insn 309(l0): point = 475
   Insn 308(l0): point = 477
   Insn 307(l0): point = 480
   Insn 305(l0): point = 483
   Insn 304(l0): point = 485
   Insn 303(l0): point = 487
   Insn 300(l0): point = 490
   Insn 299(l0): point = 492
   Insn 297(l0): point = 494
   Insn 296(l0): point = 496
   Insn 289(l0): point = 500
   Insn 288(l0): point = 502
   Insn 287(l0): point = 505
   Insn 285(l0): point = 508
   Insn 277(l0): point = 510
   Insn 276(l0): point = 512
   Insn 281(l0): point = 514
   Insn 284(l0): point = 516
   Insn 275(l0): point = 518
   Insn 283(l0): point = 520
   Insn 271(l0): point = 526
   Insn 279(l0): point = 528
   Insn 273(l0): point = 534
   Insn 270(l0): point = 536
   Insn 282(l0): point = 538
   Insn 278(l0): point = 540
   Insn 268(l0): point = 542
   Insn 265(l0): point = 545
   Insn 264(l0): point = 547
   Insn 261(l0): point = 550
   Insn 260(l0): point = 552
   Insn 256(l0): point = 555
   Insn 255(l0): point = 557
   Insn 252(l0): point = 560
   Insn 251(l0): point = 562
   Insn 248(l0): point = 565
   Insn 247(l0): point = 567
   Insn 244(l0): point = 570
   Insn 243(l0): point = 572
   Insn 882(l0): point = 575
   Insn 237(l0): point = 577
   Insn 235(l0): point = 580
   Insn 234(l0): point = 582
   Insn 231(l0): point = 585
   Insn 230(l0): point = 587
   Insn 227(l0): point = 590
   Insn 226(l0): point = 592
   Insn 224(l0): point = 594
   Insn 222(l0): point = 597
   Insn 221(l0): point = 599
   Insn 218(l0): point = 602
   Insn 217(l0): point = 604
   Insn 843(l0): point = 607
   Insn 842(l0): point = 609
   Insn 880(l0): point = 612
   Insn 198(l0): point = 614
   Insn 196(l0): point = 617
   Insn 195(l0): point = 619
   Insn 878(l0): point = 622
   Insn 841(l0): point = 624
   Insn 179(l0): point = 626
   Insn 178(l0): point = 631
   Insn 876(l0): point = 634
   Insn 173(l0): point = 636
   Insn 171(l0): point = 639
   Insn 170(l0): point = 641
   Insn 166(l0): point = 644
   Insn 165(l0): point = 646
   Insn 164(l0): point = 648
   Insn 839(l0): point = 651
   Insn 838(l0): point = 653
   Insn 921(l0): point = 655
   Insn 148(l0): point = 657
   Insn 874(l0): point = 660
   Insn 142(l0): point = 662
   Insn 140(l0): point = 665
   Insn 139(l0): point = 667
   Insn 872(l0): point = 670
   Insn 837(l0): point = 672
   Insn 123(l0): point = 674
   Insn 122(l0): point = 679
   Insn 870(l0): point = 682
   Insn 117(l0): point = 684
   Insn 115(l0): point = 687
   Insn 114(l0): point = 689
   Insn 111(l0): point = 691
   Insn 109(l0): point = 694
   Insn 102(l0): point = 696
   Insn 101(l0): point = 698
   Insn 98(l0): point = 700
   Insn 108(l0): point = 702
   Insn 922(l0): point = 704
   Insn 99(l0): point = 706
   Insn 103(l0): point = 708
   Insn 95(l0): point = 711
   Insn 94(l0): point = 716
   Insn 92(l0): point = 719
   Insn 62(l0): point = 721
   Insn 76(l0): point = 723
   Insn 61(l0): point = 725
   Insn 75(l0): point = 727
   Insn 68(l0): point = 729
   Insn 74(l0): point = 731
   Insn 59(l0): point = 733
   Insn 91(l0): point = 735
   Insn 80(l0): point = 737
   Insn 71(l0): point = 739
   Insn 854(l0): point = 741
   Insn 70(l0): point = 743
   Insn 72(l0): point = 745
   Insn 58(l0): point = 747
   Insn 923(l0): point = 752
   Insn 67(l0): point = 754
   Insn 56(l0): point = 756
   Insn 55(l0): point = 758
   Insn 53(l0): point = 760
   Insn 54(l0): point = 762
   Insn 50(l0): point = 765
   Insn 49(l0): point = 770
   Insn 47(l0): point = 773
   Insn 23(l0): point = 775
   Insn 31(l0): point = 777
   Insn 17(l0): point = 779
   Insn 15(l0): point = 781
   Insn 30(l0): point = 783
   Insn 29(l0): point = 785
   Insn 46(l0): point = 787
   Insn 924(l0): point = 789
   Insn 14(l0): point = 791
   Insn 925(l0): point = 796
   Insn 853(l0): point = 798
   Insn 26(l0): point = 800
   Insn 25(l0): point = 802
   Insn 27(l0): point = 804
   Insn 22(l0): point = 806
   Insn 12(l0): point = 808
   Insn 11(l0): point = 810
   Insn 6(l0): point = 812
   Insn 5(l0): point = 814
   Insn 10(l0): point = 816
   Insn 3(l0): point = 818
   Insn 595(l2): point = 821
   Insn 594(l2): point = 823
   Insn 592(l2): point = 825
   Insn 588(l2): point = 832
   Insn 445(l1): point = 835
   Insn 444(l1): point = 837
   Insn 440(l1): point = 840
   Insn 439(l1): point = 842
 a0(r185): [575..577] [152..154] [93..139] [78..80] [67..69] [53..64] [3..40]
 a1(r393): [8..44]
 a2(r389): [8..15]
 a3(r395): [13..32]
 a4(r388): [15..46]
 a5(r383): [15..48]
 a6(r269): [590..599] [23..52]
 a7(r386): [27..34]
 a8(r381): [29..36]
 a9(r396): [31..38]
 a10(r379): [33..50]
 a11(r192): [169..818] [103..151] [43..92]
 a12(r378): [56..57]
 a13(r377): [60..61]
 a14(r271): [585..592] [65..66]
 a15(r375): [72..73]
 a16(r195): [580..812] [167..574] [150..151] [91..92]
 a17(r364): [98..128]
 a18(r361): [98..107]
 a19(r366): [105..126]
 a20(r360): [107..130]
 a21(r356): [107..134]
 a22(r367): [117..118]
 a23(r358): [123..132]
 a24(r354): [125..136]
 a25(r349): [159..160]
 a26(r347): [176..176] [172..174]
 a27(r345): [174..184]
 a28(r343): [190..192] [174..187]
 a29(r160): [470..472] [321..321] [316..319] [179..307]
 a30(r181): [195..203]
 a31(r182): [197..213]
 a32(r134): [200..231]
 a33(r340): [200..217]
 a34(r444): [197..201]
 a35(r339): [204..236]
 a36(r445): [197..205]
 a37(r149): [252..254] [208..249]
 a38(r161): [214..487]
 a39(r150): [218..223] [216..216]
 a40(r443): [216..220]
 a41(r135): [221..246]
 a42(r151): [223..273]
 a43(r337): [223..244]
 a44(r154): [231..271]
 a45(r137): [241..269]
 a46(r289): [197..529]
 a47(r153): [260..275]
 a48(r434): [270..277]
 a49(r321): [270..279]
 a50(r320): [272..283]
 a51(r436): [274..281]
 a52(r318): [298..298] [289..296]
 a53(r319): [296..300]
 a54(r143): [452..454] [319..449] [306..315]
 a55(r162): [333..333] [326..331] [312..315]
 a56(r163): [326..430] [314..315]
 a57(r317): [319..323]
 a58(r411): [329..461]
 a59(r316): [331..343]
 a60(r314): [331..345]
 a61(r158): [340..354]
 a62(r159): [342..358]
 a63(r139): [351..384]
 a64(r311): [351..370]
 a65(r446): [348..352]
 a66(r157): [348..389]
 a67(r140): [357..399]
 a68(r169): [405..407] [361..402]
 a69(r168): [371..376] [369..369]
 a70(r442): [369..373]
 a71(r167): [376..426]
 a72(r308): [376..397]
 a73(r164): [384..424]
 a74(r142): [394..422]
 a75(r156): [348..467]
 a76(r165): [413..428]
 a77(r295): [423..432]
 a78(r294): [425..436]
 a79(r432): [427..434]
 a80(r293): [491..492]
 a81(r188): [493..512]
 a82(r291): [495..497]
 a83(r186): [497..538]
 a84(r290): [503..521]
 a85(r287): [513..518]
 a86(r286): [519..534]
 a87(r282): [519..526]
 a88(r283): [527..536]
 a89(r288): [529..540]
 a90(r281): [537..542]
 a91(r184): [634..636] [622..624] [612..614] [580..607] [553..574]
 a92(r183): [682..684] [670..672] [660..662] [580..651] [563..574]
 a93(r270): [593..594]
 a94(r178): [639..741] [627..633] [617..621] [610..611]
 a95(r177): [644..754] [620..621]
 a96(r264): [629..629] [625..627]
 a97(r265): [627..631]
 a98(r262): [647..648]
 a99(r258): [654..657]
 a100(r257): [654..655]
 a101(r174): [694..708] [668..669]
 a102(r254): [677..677] [673..675]
 a103(r255): [675..679]
 a104(r175): [687..691] [675..681]
 a105(r248): [697..698]
 a106(r247): [699..706]
 a107(r176): [699..725]
 a108(r252): [703..704]
 a109(r245): [712..716]
 a110(r431): [724..743]
 a111(r426): [726..733]
 a112(r430): [732..745]
 a113(r221): [750..750] [734..748]
 a114(r237): [736..737]
 a115(r189): [740..756]
 a116(r222): [748..752]
 a117(r180): [761..798]
 a118(r194): [763..814]
 a119(r220): [766..770]
 a120(r179): [776..806]
 a121(r425): [778..802]
 a122(r420): [780..781]
 a123(r196): [794..794] [782..792]
 a124(r424): [786..804]
 a125(r212): [788..789]
 a126(r197): [792..796]
 a127(r190): [792..808]
 a128(r160): [821..834]
 a129(r181): [821..834]
 a130(r182): [821..834]
 a131(r192): [821..834]
 a132(r195): [821..834]
 a133(r289): [821..834]
 a134(r444): [821..834]
 a135(r445): [821..834]
 a136(r143): [835..848]
 a137(r156): [835..848]
 a138(r157): [835..848]
 a139(r158): [835..848]
 a140(r159): [835..848]
 a141(r161): [835..848]
 a142(r163): [835..848]
 a143(r192): [835..848]
 a144(r195): [835..848]
 a145(r289): [835..848]
 a146(r411): [835..848]
 a147(r446): [835..848]
Compressing live ranges: from 849 to 291 - 34%
Ranges after the compression:
 a0(r185): [188..189] [54..55] [36..51] [32..33] [28..29] [20..25] [0..13]
 a1(r393): [1..15]
 a2(r389): [1..3]
 a3(r395): [2..8]
 a4(r388): [3..16]
 a5(r383): [3..17]
 a6(r269): [192..196] [4..19]
 a7(r386): [5..10]
 a8(r381): [6..11]
 a9(r396): [7..12]
 a10(r379): [9..18]
 a11(r192): [59..286] [38..53] [14..35]
 a12(r378): [21..22]
 a13(r377): [23..24]
 a14(r271): [191..193] [26..27]
 a15(r375): [30..31]
 a16(r195): [190..284] [58..187] [52..53] [34..35]
 a17(r364): [37..46]
 a18(r361): [37..40]
 a19(r366): [39..45]
 a20(r360): [40..47]
 a21(r356): [40..49]
 a22(r367): [41..42]
 a23(r358): [43..48]
 a24(r354): [44..50]
 a25(r349): [56..57]
 a26(r347): [62..62] [60..61]
 a27(r345): [61..64]
 a28(r343): [66..67] [61..65]
 a29(r160): [162..163] [115..115] [113..114] [63..109]
 a30(r181): [68..72]
 a31(r182): [69..76]
 a32(r134): [70..84]
 a33(r340): [70..79]
 a34(r444): [69..71]
 a35(r339): [73..85]
 a36(r445): [69..74]
 a37(r149): [90..91] [75..89]
 a38(r161): [77..164]
 a39(r150): [80..83] [78..78]
 a40(r443): [78..81]
 a41(r135): [82..88]
 a42(r151): [83..97]
 a43(r337): [83..87]
 a44(r154): [84..95]
 a45(r137): [86..93]
 a46(r289): [69..178]
 a47(r153): [92..99]
 a48(r434): [94..100]
 a49(r321): [94..101]
 a50(r320): [96..103]
 a51(r436): [98..102]
 a52(r318): [106..106] [104..105]
 a53(r319): [105..107]
 a54(r143): [158..159] [114..157] [108..112]
 a55(r162): [120..120] [117..119] [110..112]
 a56(r163): [117..153] [111..112]
 a57(r317): [114..116]
 a58(r411): [118..160]
 a59(r316): [119..123]
 a60(r314): [119..124]
 a61(r158): [121..128]
 a62(r159): [122..130]
 a63(r139): [126..137]
 a64(r311): [126..133]
 a65(r446): [125..127]
 a66(r157): [125..138]
 a67(r140): [129..141]
 a68(r169): [143..144] [131..142]
 a69(r168): [134..136] [132..132]
 a70(r442): [132..135]
 a71(r167): [136..150]
 a72(r308): [136..140]
 a73(r164): [137..148]
 a74(r142): [139..146]
 a75(r156): [125..161]
 a76(r165): [145..152]
 a77(r295): [147..154]
 a78(r294): [149..156]
 a79(r432): [151..155]
 a80(r293): [165..166]
 a81(r188): [167..171]
 a82(r291): [168..169]
 a83(r186): [169..182]
 a84(r290): [170..175]
 a85(r287): [172..173]
 a86(r286): [174..179]
 a87(r282): [174..176]
 a88(r283): [177..180]
 a89(r288): [178..183]
 a90(r281): [181..184]
 a91(r184): [212..213] [205..206] [200..201] [190..197] [185..187]
 a92(r183): [233..234] [226..227] [222..223] [190..218] [186..187]
 a93(r270): [194..195]
 a94(r178): [214..256] [208..211] [202..204] [198..199]
 a95(r177): [215..262] [203..204]
 a96(r264): [209..209] [207..208]
 a97(r265): [208..210]
 a98(r262): [216..217]
 a99(r258): [219..221]
 a100(r257): [219..220]
 a101(r174): [237..244] [224..225]
 a102(r254): [230..230] [228..229]
 a103(r255): [229..231]
 a104(r175): [235..236] [229..232]
 a105(r248): [238..239]
 a106(r247): [240..243]
 a107(r176): [240..248]
 a108(r252): [241..242]
 a109(r245): [245..246]
 a110(r431): [247..257]
 a111(r426): [249..251]
 a112(r430): [250..258]
 a113(r221): [260..260] [252..259]
 a114(r237): [253..254]
 a115(r189): [255..263]
 a116(r222): [259..261]
 a117(r180): [264..279]
 a118(r194): [265..285]
 a119(r220): [266..267]
 a120(r179): [268..282]
 a121(r425): [269..280]
 a122(r420): [270..271]
 a123(r196): [277..277] [272..276]
 a124(r424): [273..281]
 a125(r212): [274..275]
 a126(r197): [276..278]
 a127(r190): [276..283]
 a128(r160): [287..288]
 a129(r181): [287..288]
 a130(r182): [287..288]
 a131(r192): [287..288]
 a132(r195): [287..288]
 a133(r289): [287..288]
 a134(r444): [287..288]
 a135(r445): [287..288]
 a136(r143): [289..290]
 a137(r156): [289..290]
 a138(r157): [289..290]
 a139(r158): [289..290]
 a140(r159): [289..290]
 a141(r161): [289..290]
 a142(r163): [289..290]
 a143(r192): [289..290]
 a144(r195): [289..290]
 a145(r289): [289..290]
 a146(r411): [289..290]
 a147(r446): [289..290]
+++Allocating 2232 bytes for conflict table (uncompressed size 3552)
;; a0(r185,l0) conflicts: a2(r389,l0) a1(r393,l0) a3(r395,l0) a4(r388,l0) a5(r383,l0) a6(r269,l0) a7(r386,l0) a8(r381,l0) a9(r396,l0) a10(r379,l0) a11(r192,l0) a12(r378,l0) a13(r377,l0) a18(r361,l0) a17(r364,l0) a19(r366,l0) a20(r360,l0) a21(r356,l0) a22(r367,l0) a23(r358,l0) a24(r354,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r393,l0) conflicts: a0(r185,l0) a2(r389,l0) a3(r395,l0) a4(r388,l0) a5(r383,l0) a6(r269,l0) a7(r386,l0) a8(r381,l0) a9(r396,l0) a10(r379,l0) a11(r192,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a2(r389,l0) conflicts: a0(r185,l0) a1(r393,l0) a3(r395,l0) a4(r388,l0) a5(r383,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a3(r395,l0) conflicts: a0(r185,l0) a2(r389,l0) a1(r393,l0) a4(r388,l0) a5(r383,l0) a6(r269,l0) a7(r386,l0) a8(r381,l0) a9(r396,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a4(r388,l0) conflicts: a0(r185,l0) a2(r389,l0) a1(r393,l0) a3(r395,l0) a5(r383,l0) a6(r269,l0) a7(r386,l0) a8(r381,l0) a9(r396,l0) a10(r379,l0) a11(r192,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a5(r383,l0) conflicts: a0(r185,l0) a2(r389,l0) a1(r393,l0) a3(r395,l0) a4(r388,l0) a6(r269,l0) a7(r386,l0) a8(r381,l0) a9(r396,l0) a10(r379,l0) a11(r192,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a6(r269,l0) conflicts: a0(r185,l0) a1(r393,l0) a3(r395,l0) a4(r388,l0) a5(r383,l0) a7(r386,l0) a8(r381,l0) a9(r396,l0) a10(r379,l0) a11(r192,l0) a14(r271,l0) a16(r195,l0) a91(r184,l0) a92(r183,l0) a93(r270,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a7(r386,l0) conflicts: a0(r185,l0) a1(r393,l0) a3(r395,l0) a4(r388,l0) a5(r383,l0) a6(r269,l0) a8(r381,l0) a9(r396,l0) a10(r379,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a8(r381,l0) conflicts: a0(r185,l0) a1(r393,l0) a3(r395,l0) a4(r388,l0) a5(r383,l0) a6(r269,l0) a7(r386,l0) a9(r396,l0) a10(r379,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a9(r396,l0) conflicts: a0(r185,l0) a1(r393,l0) a3(r395,l0) a4(r388,l0) a5(r383,l0) a6(r269,l0) a7(r386,l0) a8(r381,l0) a10(r379,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a10(r379,l0) conflicts: a0(r185,l0) a1(r393,l0) a4(r388,l0) a5(r383,l0) a6(r269,l0) a7(r386,l0) a8(r381,l0) a9(r396,l0) a11(r192,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a11(r192,l0) conflicts: a0(r185,l0) a1(r393,l0) a4(r388,l0) a5(r383,l0) a6(r269,l0) a10(r379,l0) a12(r378,l0) a13(r377,l0) a14(r271,l0) a15(r375,l0) a16(r195,l0) a18(r361,l0) a17(r364,l0) a19(r366,l0) a20(r360,l0) a21(r356,l0) a22(r367,l0) a23(r358,l0) a24(r354,l0) a26(r347,l0) a27(r345,l0) a28(r343,l0) a29(r160,l0) a30(r181,l0) a31(r182,l0) a34(r444,l0) a36(r445,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a40(r443,l0) a39(r150,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0) a45(r137,l0) a47(r153,l0) a48(r434,l0) a49(r321,l0) a50(r320,l0) a51(r436,l0) a52(r318,l0) a53(r319,l0) a54(r143,l0) a55(r162,l0) a56(r163,l0) a57(r317,l0) a58(r411,l0) a59(r316,l0) a60(r314,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0) a79(r432,l0) a80(r293,l0) a81(r188,l0) a82(r291,l0) a83(r186,l0) a84(r290,l0) a85(r287,l0) a87(r282,l0) a86(r286,l0) a88(r283,l0) a89(r288,l0) a90(r281,l0) a91(r184,l0) a92(r183,l0) a93(r270,l0) a94(r178,l0) a95(r177,l0) a96(r264,l0) a97(r265,l0) a98(r262,l0) a100(r257,l0) a99(r258,l0) a101(r174,l0) a102(r254,l0) a103(r255,l0) a104(r175,l0) a105(r248,l0) a106(r247,l0) a107(r176,l0) a108(r252,l0) a109(r245,l0) a110(r431,l0) a111(r426,l0) a112(r430,l0) a113(r221,l0) a114(r237,l0) a115(r189,l0) a116(r222,l0) a117(r180,l0) a118(r194,l0) a119(r220,l0) a120(r179,l0) a121(r425,l0) a122(r420,l0) a123(r196,l0) a124(r424,l0) a125(r212,l0) a126(r197,l0) a127(r190,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a12(r378,l0) conflicts: a0(r185,l0) a11(r192,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r377,l0) conflicts: a0(r185,l0) a11(r192,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r271,l0) conflicts: a6(r269,l0) a11(r192,l0) a16(r195,l0) a91(r184,l0) a92(r183,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r375,l0) conflicts: a11(r192,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r195,l0) conflicts: a6(r269,l0) a11(r192,l0) a14(r271,l0) a26(r347,l0) a27(r345,l0) a28(r343,l0) a29(r160,l0) a30(r181,l0) a31(r182,l0) a34(r444,l0) a36(r445,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a40(r443,l0) a39(r150,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0) a45(r137,l0) a47(r153,l0) a48(r434,l0) a49(r321,l0) a50(r320,l0) a51(r436,l0) a52(r318,l0) a53(r319,l0) a54(r143,l0) a55(r162,l0) a56(r163,l0) a57(r317,l0) a58(r411,l0) a59(r316,l0) a60(r314,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0) a79(r432,l0) a80(r293,l0) a81(r188,l0) a82(r291,l0) a83(r186,l0) a84(r290,l0) a85(r287,l0) a87(r282,l0) a86(r286,l0) a88(r283,l0) a89(r288,l0) a90(r281,l0) a91(r184,l0) a92(r183,l0) a93(r270,l0) a94(r178,l0) a95(r177,l0) a96(r264,l0) a97(r265,l0) a98(r262,l0) a100(r257,l0) a99(r258,l0) a101(r174,l0) a102(r254,l0) a103(r255,l0) a104(r175,l0) a105(r248,l0) a106(r247,l0) a107(r176,l0) a108(r252,l0) a109(r245,l0) a110(r431,l0) a111(r426,l0) a112(r430,l0) a113(r221,l0) a114(r237,l0) a115(r189,l0) a116(r222,l0) a117(r180,l0) a118(r194,l0) a119(r220,l0) a120(r179,l0) a121(r425,l0) a122(r420,l0) a123(r196,l0) a124(r424,l0) a125(r212,l0) a126(r197,l0) a127(r190,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a17(r364,l0) conflicts: a0(r185,l0) a11(r192,l0) a18(r361,l0) a19(r366,l0) a20(r360,l0) a21(r356,l0) a22(r367,l0) a23(r358,l0) a24(r354,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a18(r361,l0) conflicts: a0(r185,l0) a11(r192,l0) a17(r364,l0) a19(r366,l0) a20(r360,l0) a21(r356,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a19(r366,l0) conflicts: a0(r185,l0) a11(r192,l0) a18(r361,l0) a17(r364,l0) a20(r360,l0) a21(r356,l0) a22(r367,l0) a23(r358,l0) a24(r354,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r360,l0) conflicts: a0(r185,l0) a11(r192,l0) a18(r361,l0) a17(r364,l0) a19(r366,l0) a21(r356,l0) a22(r367,l0) a23(r358,l0) a24(r354,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r356,l0) conflicts: a0(r185,l0) a11(r192,l0) a18(r361,l0) a17(r364,l0) a19(r366,l0) a20(r360,l0) a22(r367,l0) a23(r358,l0) a24(r354,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r367,l0) conflicts: a0(r185,l0) a11(r192,l0) a17(r364,l0) a19(r366,l0) a20(r360,l0) a21(r356,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r358,l0) conflicts: a0(r185,l0) a11(r192,l0) a17(r364,l0) a19(r366,l0) a20(r360,l0) a21(r356,l0) a24(r354,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r354,l0) conflicts: a0(r185,l0) a11(r192,l0) a17(r364,l0) a19(r366,l0) a20(r360,l0) a21(r356,l0) a23(r358,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r349,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a26(r347,l0) conflicts: a11(r192,l0) a16(r195,l0) a27(r345,l0) a28(r343,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r345,l0) conflicts: a11(r192,l0) a16(r195,l0) a26(r347,l0) a28(r343,l0) a29(r160,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r343,l0) conflicts: a11(r192,l0) a16(r195,l0) a26(r347,l0) a27(r345,l0) a29(r160,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r160,l0) conflicts: a11(r192,l0) a16(r195,l0) a27(r345,l0) a28(r343,l0) a30(r181,l0) a31(r182,l0) a34(r444,l0) a36(r445,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a40(r443,l0) a39(r150,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0) a45(r137,l0) a47(r153,l0) a48(r434,l0) a49(r321,l0) a50(r320,l0) a51(r436,l0) a52(r318,l0) a53(r319,l0) a54(r143,l0) a57(r317,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r181,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a31(r182,l0) a34(r444,l0) a36(r445,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r182,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a30(r181,l0) a34(r444,l0) a36(r445,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r134,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a30(r181,l0) a31(r182,l0) a34(r444,l0) a36(r445,l0) a46(r289,l0) a33(r340,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a40(r443,l0) a39(r150,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r340,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a30(r181,l0) a31(r182,l0) a34(r444,l0) a36(r445,l0) a46(r289,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a40(r443,l0) a39(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r444,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a30(r181,l0) a31(r182,l0) a36(r445,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r339,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a31(r182,l0) a36(r445,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a37(r149,l0) a38(r161,l0) a40(r443,l0) a39(r150,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r445,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a30(r181,l0) a31(r182,l0) a34(r444,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r149,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a31(r182,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0) a38(r161,l0) a40(r443,l0) a39(r150,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0) a45(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r161,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a40(r443,l0) a39(r150,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0) a45(r137,l0) a47(r153,l0) a48(r434,l0) a49(r321,l0) a50(r320,l0) a51(r436,l0) a52(r318,l0) a53(r319,l0) a54(r143,l0) a55(r162,l0) a56(r163,l0) a57(r317,l0) a58(r411,l0) a59(r316,l0) a60(r314,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0) a79(r432,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a39(r150,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a40(r443,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r443,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a39(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r135,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a39(r150,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0) a45(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r151,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a39(r150,l0) a41(r135,l0) a43(r337,l0) a44(r154,l0) a45(r137,l0) a47(r153,l0) a48(r434,l0) a49(r321,l0) a50(r320,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r337,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a39(r150,l0) a41(r135,l0) a42(r151,l0) a44(r154,l0) a45(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a44(r154,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a45(r137,l0) a47(r153,l0) a48(r434,l0) a49(r321,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a45(r137,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a37(r149,l0) a38(r161,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0) a47(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a46(r289,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a30(r181,l0) a31(r182,l0) a34(r444,l0) a36(r445,l0) a33(r340,l0) a32(r134,l0) a35(r339,l0) a37(r149,l0) a38(r161,l0) a40(r443,l0) a39(r150,l0) a41(r135,l0) a43(r337,l0) a42(r151,l0) a44(r154,l0) a45(r137,l0) a47(r153,l0) a48(r434,l0) a49(r321,l0) a50(r320,l0) a51(r436,l0) a52(r318,l0) a53(r319,l0) a54(r143,l0) a55(r162,l0) a56(r163,l0) a57(r317,l0) a58(r411,l0) a59(r316,l0) a60(r314,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0) a79(r432,l0) a80(r293,l0) a81(r188,l0) a82(r291,l0) a83(r186,l0) a84(r290,l0) a85(r287,l0) a87(r282,l0) a86(r286,l0) a88(r283,l0) a89(r288,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a47(r153,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a38(r161,l0) a42(r151,l0) a44(r154,l0) a45(r137,l0) a48(r434,l0) a49(r321,l0) a50(r320,l0) a51(r436,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a48(r434,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a38(r161,l0) a42(r151,l0) a44(r154,l0) a47(r153,l0) a49(r321,l0) a50(r320,l0) a51(r436,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a49(r321,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a38(r161,l0) a42(r151,l0) a44(r154,l0) a47(r153,l0) a48(r434,l0) a50(r320,l0) a51(r436,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a50(r320,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a38(r161,l0) a42(r151,l0) a47(r153,l0) a48(r434,l0) a49(r321,l0) a51(r436,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a51(r436,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a38(r161,l0) a47(r153,l0) a48(r434,l0) a49(r321,l0) a50(r320,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a52(r318,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a38(r161,l0) a53(r319,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a53(r319,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a38(r161,l0) a52(r318,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a54(r143,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a38(r161,l0) a55(r162,l0) a56(r163,l0) a57(r317,l0) a58(r411,l0) a59(r316,l0) a60(r314,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0) a79(r432,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a55(r162,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a59(r316,l0) a60(r314,l0)
;;     total conflict hard regs: 4
;;     conflict hard regs: 4
;; a56(r163,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a55(r162,l0) a58(r411,l0) a59(r316,l0) a60(r314,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0) a79(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a57(r317,l0) conflicts: a11(r192,l0) a16(r195,l0) a29(r160,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a58(r411,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a55(r162,l0) a56(r163,l0) a59(r316,l0) a60(r314,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0) a79(r432,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a59(r316,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a55(r162,l0) a56(r163,l0) a58(r411,l0) a60(r314,l0) a61(r158,l0) a62(r159,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a60(r314,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a55(r162,l0) a56(r163,l0) a58(r411,l0) a59(r316,l0) a61(r158,l0) a62(r159,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a61(r158,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a59(r316,l0) a60(r314,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a62(r159,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a59(r316,l0) a60(r314,l0) a61(r158,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a63(r139,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a64(r311,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a75(r156,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a65(r446,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a61(r158,l0) a62(r159,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a66(r157,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a67(r140,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a62(r159,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a68(r169,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a69(r168,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a72(r308,l0) a71(r167,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a70(r442,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a66(r157,l0) a75(r156,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a69(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a71(r167,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a66(r157,l0) a75(r156,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a69(r168,l0) a72(r308,l0) a73(r164,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a72(r308,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a66(r157,l0) a75(r156,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a69(r168,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a73(r164,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a66(r157,l0) a75(r156,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a72(r308,l0) a71(r167,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a74(r142,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a75(r156,l0) a67(r140,l0) a68(r169,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a76(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a75(r156,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a61(r158,l0) a62(r159,l0) a65(r446,l0) a66(r157,l0) a64(r311,l0) a63(r139,l0) a67(r140,l0) a68(r169,l0) a70(r442,l0) a69(r168,l0) a72(r308,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0) a79(r432,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a76(r165,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a75(r156,l0) a71(r167,l0) a73(r164,l0) a74(r142,l0) a77(r295,l0) a78(r294,l0) a79(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a77(r295,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a75(r156,l0) a71(r167,l0) a73(r164,l0) a76(r165,l0) a78(r294,l0) a79(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a78(r294,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a75(r156,l0) a71(r167,l0) a76(r165,l0) a77(r295,l0) a79(r432,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a79(r432,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a38(r161,l0) a54(r143,l0) a56(r163,l0) a58(r411,l0) a75(r156,l0) a76(r165,l0) a77(r295,l0) a78(r294,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a80(r293,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a81(r188,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a82(r291,l0) a83(r186,l0) a84(r290,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a82(r291,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a81(r188,l0) a83(r186,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a83(r186,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a81(r188,l0) a82(r291,l0) a84(r290,l0) a85(r287,l0) a87(r282,l0) a86(r286,l0) a88(r283,l0) a89(r288,l0) a90(r281,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a84(r290,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a81(r188,l0) a83(r186,l0) a85(r287,l0) a87(r282,l0) a86(r286,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a85(r287,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a83(r186,l0) a84(r290,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a86(r286,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a83(r186,l0) a84(r290,l0) a87(r282,l0) a88(r283,l0) a89(r288,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a87(r282,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a83(r186,l0) a84(r290,l0) a86(r286,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a88(r283,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a83(r186,l0) a86(r286,l0) a89(r288,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a89(r288,l0) conflicts: a11(r192,l0) a16(r195,l0) a46(r289,l0) a83(r186,l0) a86(r286,l0) a88(r283,l0) a90(r281,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a90(r281,l0) conflicts: a11(r192,l0) a16(r195,l0) a83(r186,l0) a89(r288,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a91(r184,l0) conflicts: a6(r269,l0) a11(r192,l0) a14(r271,l0) a16(r195,l0) a92(r183,l0) a93(r270,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a92(r183,l0) conflicts: a6(r269,l0) a11(r192,l0) a14(r271,l0) a16(r195,l0) a91(r184,l0) a93(r270,l0) a94(r178,l0) a95(r177,l0) a96(r264,l0) a97(r265,l0) a98(r262,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a93(r270,l0) conflicts: a6(r269,l0) a11(r192,l0) a16(r195,l0) a91(r184,l0) a92(r183,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a94(r178,l0) conflicts: a11(r192,l0) a16(r195,l0) a92(r183,l0) a95(r177,l0) a96(r264,l0) a97(r265,l0) a98(r262,l0) a100(r257,l0) a99(r258,l0) a101(r174,l0) a102(r254,l0) a103(r255,l0) a104(r175,l0) a105(r248,l0) a106(r247,l0) a107(r176,l0) a108(r252,l0) a109(r245,l0) a110(r431,l0) a111(r426,l0) a112(r430,l0) a113(r221,l0) a114(r237,l0) a115(r189,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a95(r177,l0) conflicts: a11(r192,l0) a16(r195,l0) a92(r183,l0) a94(r178,l0) a98(r262,l0) a100(r257,l0) a99(r258,l0) a101(r174,l0) a102(r254,l0) a103(r255,l0) a104(r175,l0) a105(r248,l0) a106(r247,l0) a107(r176,l0) a108(r252,l0) a109(r245,l0) a110(r431,l0) a111(r426,l0) a112(r430,l0) a113(r221,l0) a114(r237,l0) a115(r189,l0) a116(r222,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a96(r264,l0) conflicts: a11(r192,l0) a16(r195,l0) a92(r183,l0) a94(r178,l0) a97(r265,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a97(r265,l0) conflicts: a11(r192,l0) a16(r195,l0) a92(r183,l0) a94(r178,l0) a96(r264,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a98(r262,l0) conflicts: a11(r192,l0) a16(r195,l0) a92(r183,l0) a94(r178,l0) a95(r177,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a99(r258,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a100(r257,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a100(r257,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a99(r258,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a101(r174,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a105(r248,l0) a106(r247,l0) a107(r176,l0) a108(r252,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a102(r254,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a103(r255,l0) a104(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a103(r255,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a102(r254,l0) a104(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a104(r175,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a102(r254,l0) a103(r255,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a105(r248,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a101(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a106(r247,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a101(r174,l0) a107(r176,l0) a108(r252,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a107(r176,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a101(r174,l0) a106(r247,l0) a108(r252,l0) a109(r245,l0) a110(r431,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a108(r252,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a101(r174,l0) a106(r247,l0) a107(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a109(r245,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a107(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a110(r431,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a107(r176,l0) a111(r426,l0) a112(r430,l0) a113(r221,l0) a114(r237,l0) a115(r189,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a111(r426,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a110(r431,l0) a112(r430,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a112(r430,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a110(r431,l0) a111(r426,l0) a113(r221,l0) a114(r237,l0) a115(r189,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a113(r221,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a110(r431,l0) a112(r430,l0) a114(r237,l0) a115(r189,l0) a116(r222,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a114(r237,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a110(r431,l0) a112(r430,l0) a113(r221,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a115(r189,l0) conflicts: a11(r192,l0) a16(r195,l0) a94(r178,l0) a95(r177,l0) a110(r431,l0) a112(r430,l0) a113(r221,l0) a116(r222,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a116(r222,l0) conflicts: a11(r192,l0) a16(r195,l0) a95(r177,l0) a113(r221,l0) a115(r189,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a117(r180,l0) conflicts: a11(r192,l0) a16(r195,l0) a118(r194,l0) a119(r220,l0) a120(r179,l0) a121(r425,l0) a122(r420,l0) a123(r196,l0) a124(r424,l0) a125(r212,l0) a126(r197,l0) a127(r190,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a118(r194,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a119(r220,l0) a120(r179,l0) a121(r425,l0) a122(r420,l0) a123(r196,l0) a124(r424,l0) a125(r212,l0) a126(r197,l0) a127(r190,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a119(r220,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a118(r194,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a120(r179,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a118(r194,l0) a121(r425,l0) a122(r420,l0) a123(r196,l0) a124(r424,l0) a125(r212,l0) a126(r197,l0) a127(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a121(r425,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a118(r194,l0) a120(r179,l0) a122(r420,l0) a123(r196,l0) a124(r424,l0) a125(r212,l0) a126(r197,l0) a127(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a122(r420,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a118(r194,l0) a120(r179,l0) a121(r425,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a123(r196,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a118(r194,l0) a120(r179,l0) a121(r425,l0) a124(r424,l0) a125(r212,l0) a126(r197,l0) a127(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a124(r424,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a118(r194,l0) a120(r179,l0) a121(r425,l0) a123(r196,l0) a125(r212,l0) a126(r197,l0) a127(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a125(r212,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a118(r194,l0) a120(r179,l0) a121(r425,l0) a123(r196,l0) a124(r424,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a126(r197,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a118(r194,l0) a120(r179,l0) a121(r425,l0) a123(r196,l0) a124(r424,l0) a127(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a127(r190,l0) conflicts: a11(r192,l0) a16(r195,l0) a117(r180,l0) a118(r194,l0) a120(r179,l0) a121(r425,l0) a123(r196,l0) a124(r424,l0) a126(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a128(r160,l2) conflicts: a129(r181,l2) a130(r182,l2) a131(r192,l2) a132(r195,l2) a133(r289,l2) a134(r444,l2) a135(r445,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a129(r181,l2) conflicts: a128(r160,l2) a130(r182,l2) a131(r192,l2) a132(r195,l2) a133(r289,l2) a134(r444,l2) a135(r445,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a130(r182,l2) conflicts: a128(r160,l2) a129(r181,l2) a131(r192,l2) a132(r195,l2) a133(r289,l2) a134(r444,l2) a135(r445,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a131(r192,l2) conflicts: a128(r160,l2) a129(r181,l2) a130(r182,l2) a132(r195,l2) a133(r289,l2) a134(r444,l2) a135(r445,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a132(r195,l2) conflicts: a128(r160,l2) a129(r181,l2) a130(r182,l2) a131(r192,l2) a133(r289,l2) a134(r444,l2) a135(r445,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a133(r289,l2) conflicts: a128(r160,l2) a129(r181,l2) a130(r182,l2) a131(r192,l2) a132(r195,l2) a134(r444,l2) a135(r445,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a134(r444,l2) conflicts: a128(r160,l2) a129(r181,l2) a130(r182,l2) a131(r192,l2) a132(r195,l2) a133(r289,l2) a135(r445,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a135(r445,l2) conflicts: a128(r160,l2) a129(r181,l2) a130(r182,l2) a131(r192,l2) a132(r195,l2) a133(r289,l2) a134(r444,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a136(r143,l1) conflicts: a137(r156,l1) a138(r157,l1) a139(r158,l1) a140(r159,l1) a141(r161,l1) a142(r163,l1) a143(r192,l1) a144(r195,l1) a145(r289,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a137(r156,l1) conflicts: a136(r143,l1) a138(r157,l1) a139(r158,l1) a140(r159,l1) a141(r161,l1) a142(r163,l1) a143(r192,l1) a144(r195,l1) a145(r289,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a138(r157,l1) conflicts: a136(r143,l1) a137(r156,l1) a139(r158,l1) a140(r159,l1) a141(r161,l1) a142(r163,l1) a143(r192,l1) a144(r195,l1) a145(r289,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a139(r158,l1) conflicts: a136(r143,l1) a137(r156,l1) a138(r157,l1) a140(r159,l1) a141(r161,l1) a142(r163,l1) a143(r192,l1) a144(r195,l1) a145(r289,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a140(r159,l1) conflicts: a136(r143,l1) a137(r156,l1) a138(r157,l1) a139(r158,l1) a141(r161,l1) a142(r163,l1) a143(r192,l1) a144(r195,l1) a145(r289,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a141(r161,l1) conflicts: a136(r143,l1) a137(r156,l1) a138(r157,l1) a139(r158,l1) a140(r159,l1) a142(r163,l1) a143(r192,l1) a144(r195,l1) a145(r289,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a142(r163,l1) conflicts: a136(r143,l1) a137(r156,l1) a138(r157,l1) a139(r158,l1) a140(r159,l1) a141(r161,l1) a143(r192,l1) a144(r195,l1) a145(r289,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a143(r192,l1) conflicts: a136(r143,l1) a137(r156,l1) a138(r157,l1) a139(r158,l1) a140(r159,l1) a141(r161,l1) a142(r163,l1) a144(r195,l1) a145(r289,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a144(r195,l1) conflicts: a136(r143,l1) a137(r156,l1) a138(r157,l1) a139(r158,l1) a140(r159,l1) a141(r161,l1) a142(r163,l1) a143(r192,l1) a145(r289,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a145(r289,l1) conflicts: a136(r143,l1) a137(r156,l1) a138(r157,l1) a139(r158,l1) a140(r159,l1) a141(r161,l1) a142(r163,l1) a143(r192,l1) a144(r195,l1) a146(r411,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a146(r411,l1) conflicts: a136(r143,l1) a137(r156,l1) a138(r157,l1) a139(r158,l1) a140(r159,l1) a141(r161,l1) a142(r163,l1) a143(r192,l1) a144(r195,l1) a145(r289,l1) a147(r446,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a147(r446,l1) conflicts: a136(r143,l1) a137(r156,l1) a138(r157,l1) a139(r158,l1) a140(r159,l1) a141(r161,l1) a142(r163,l1) a143(r192,l1) a144(r195,l1) a145(r289,l1) a146(r411,l1)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a0(r185)<->a14(r271)@1000:move
  cp1:a31(r182)<->a38(r161)@1000:move
  cp2:a30(r181)<->a35(r339)@1000:move
  cp3:a42(r151)<->a51(r436)@125:shuffle
  cp4:a44(r154)<->a50(r320)@125:shuffle
  cp5:a45(r137)<->a49(r321)@125:shuffle
  cp6:a45(r137)<->a48(r434)@125:shuffle
  cp7:a71(r167)<->a79(r432)@125:shuffle
  cp8:a73(r164)<->a78(r294)@125:shuffle
  cp9:a74(r142)<->a77(r295)@125:shuffle
  cp10:a80(r293)<->a81(r188)@125:shuffle
  cp11:a88(r283)<->a90(r281)@125:shuffle
  cp12:a87(r282)<->a88(r283)@125:shuffle
  cp13:a85(r287)<->a87(r282)@125:shuffle
  cp14:a85(r287)<->a86(r286)@125:shuffle
  cp15:a81(r188)<->a85(r287)@125:shuffle
  cp16:a14(r271)<->a93(r270)@125:shuffle
  cp17:a105(r248)<->a107(r176)@125:shuffle
  cp18:a105(r248)<->a106(r247)@125:shuffle
  cp19:a107(r176)<->a111(r426)@125:shuffle
  regions=3, blocks=76, points=291
    allocnos=148, copies=20, conflicts=12, ranges=194

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 75 74 73 72 71 70 69 68 67 66 65 64 61(->63:l2) 60 59 58 57 56 55 54 53 52 51 48(->50:l1) 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r185 1r393 2r389 3r395 4r388 5r383 6r269 7r386 8r381 9r396 10r379 11r192 12r378 13r377 14r271 15r375 16r195 17r364 18r361 19r366 20r360 21r356 22r367 23r358 24r354 25r349 26r347 27r345 28r343 29r160 30r181 31r182 32r134 33r340 34r444 35r339 36r445 37r149 38r161 39r150 40r443 41r135 42r151 43r337 44r154 45r137 46r289 47r153 48r434 49r321 50r320 51r436 52r318 53r319 54r143 55r162 56r163 57r317 58r411 59r316 60r314 61r158 62r159 63r139 64r311 65r446 66r157 67r140 68r169 69r168 70r442 71r167 72r308 73r164 74r142 75r156 76r165 77r295 78r294 79r432 80r293 81r188 82r291 83r186 84r290 85r287 86r286 87r282 88r283 89r288 90r281 91r184 92r183 93r270 94r178 95r177 96r264 97r265 98r262 99r258 100r257 101r174 102r254 103r255 104r175 105r248 106r247 107r176 108r252 109r245 110r431 111r426 112r430 113r221 114r237 115r189 116r222 117r180 118r194 119r220 120r179 121r425 122r420 123r196 124r424 125r212 126r197 127r190
    modified regnos
    border:
    Pressure: GENERAL_REGS=26
    Reg 185 of GENERAL_REGS has 4 regs less
    Reg 393 of GENERAL_REGS has 1 regs less
    Reg 389 of GENERAL_REGS has 1 regs less
    Reg 395 of GENERAL_REGS has 1 regs less
    Reg 388 of GENERAL_REGS has 1 regs less
    Reg 383 of GENERAL_REGS has 1 regs less
    Reg 269 of GENERAL_REGS has 1 regs less
    Reg 386 of GENERAL_REGS has 1 regs less
    Reg 381 of GENERAL_REGS has 1 regs less
    Reg 396 of GENERAL_REGS has 1 regs less
    Reg 379 of GENERAL_REGS has 1 regs less
    Reg 192 of GENERAL_REGS has 7 regs less
    Reg 195 of GENERAL_REGS has 7 regs less
    Reg 364 of GENERAL_REGS has 1 regs less
    Reg 361 of GENERAL_REGS has 1 regs less
    Reg 349 of GENERAL_REGS has 4 regs less
    Reg 161 of GENERAL_REGS has 7 regs less
    Reg 289 of GENERAL_REGS has 7 regs less
    Reg 143 of GENERAL_REGS has 7 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 411 of GENERAL_REGS has 7 regs less
    Reg 156 of GENERAL_REGS has 7 regs less
    Reg 184 of GENERAL_REGS has 2 regs less
    Reg 180 of GENERAL_REGS has 1 regs less
    Reg 194 of GENERAL_REGS has 4 regs less
      Pushing a126(r197,l0)
      Pushing a125(r212,l0)
      Pushing a124(r424,l0)
      Pushing a123(r196,l0)
      Pushing a122(r420,l0)
      Pushing a119(r220,l0)
      Pushing a116(r222,l0)
      Pushing a114(r237,l0)
      Pushing a113(r221,l0)
      Pushing a112(r430,l0)
      Pushing a111(r426,l0)
      Pushing a109(r245,l0)
      Pushing a108(r252,l0)
      Pushing a106(r247,l0)
      Pushing a105(r248,l0)
      Pushing a103(r255,l0)
      Pushing a102(r254,l0)
      Pushing a100(r257,l0)
      Pushing a99(r258,l0)
      Pushing a98(r262,l0)
      Pushing a97(r265,l0)
      Pushing a96(r264,l0)
      Pushing a90(r281,l0)
      Pushing a88(r283,l0)
      Pushing a87(r282,l0)
      Pushing a86(r286,l0)
      Pushing a85(r287,l0)
      Pushing a82(r291,l0)
      Pushing a80(r293,l0)
      Pushing a57(r317,l0)
      Pushing a53(r319,l0)
      Pushing a26(r347,l0)
      Pushing a24(r354,l0)
      Pushing a23(r358,l0)
      Pushing a22(r367,l0)
      Pushing a15(r375,l0)
      Pushing a14(r271,l0)
      Pushing a13(r377,l0)
      Pushing a12(r378,l0)
      Pushing a107(r176,l0)
      Pushing a101(r174,l0)
      Pushing a93(r270,l0)
      Pushing a89(r288,l0)
      Pushing a84(r290,l0)
      Pushing a81(r188,l0)
      Pushing a52(r318,l0)
      Pushing a51(r436,l0)
      Pushing a28(r343,l0)
      Pushing a19(r366,l0)
      Pushing a120(r179,l0)
      Pushing a104(r175,l0)
      Pushing a83(r186,l0)
      Pushing a27(r345,l0)
      Pushing a20(r360,l0)
      Pushing a121(r425,l0)
      Pushing a110(r431,l0)
      Pushing a21(r356,l0)
      Pushing a127(r190,l0)
      Pushing a115(r189,l0)
      Pushing a95(r177,l0)
      Pushing a92(r183,l0)
      Pushing a94(r178,l0)
      Pushing a18(r361,l0)
      Pushing a2(r389,l0)
      Pushing a3(r395,l0)
      Pushing a9(r396,l0)
      Pushing a8(r381,l0)
      Pushing a7(r386,l0)
      Pushing a6(r269,l0)
      Pushing a5(r383,l0)
      Pushing a4(r388,l0)
      Pushing a10(r379,l0)
      Pushing a17(r364,l0)
      Pushing a1(r393,l0)
      Pushing a117(r180,l0)
      Pushing a91(r184,l0)
      Pushing a118(r194,l0)
      Pushing a25(r349,l0)
      Pushing a0(r185,l0)
      Pushing a71(r167,l0)(potential spill: pri=307, cost=20000)
      Pushing a42(r151,l0)(potential spill: pri=338, cost=20000)
      Pushing a50(r320,l0)
      Pushing a49(r321,l0)
      Pushing a48(r434,l0)
      Pushing a47(r153,l0)
      Pushing a73(r164,l0)(potential spill: pri=363, cost=20000)
      Pushing a69(r168,l0)(potential spill: pri=392, cost=20000)
      Pushing a65(r446,l0)(potential spill: pri=444, cost=20000)
      Pushing a39(r150,l0)(potential spill: pri=465, cost=20000)
      Pushing a44(r154,l0)(potential spill: pri=487, cost=20000)
      Pushing a36(r445,l0)(potential spill: pri=540, cost=20000)
      Pushing a63(r139,l0)(potential spill: pri=545, cost=30000)
      Pushing a11(r192,l0)(potential spill: pri=571, cost=40000)
      Pushing a16(r195,l0)(potential spill: pri=579, cost=40000)
      Pushing a34(r444,l0)
      Pushing a45(r137,l0)
      Pushing a30(r181,l0)
      Pushing a31(r182,l0)
      Pushing a38(r161,l0)(potential spill: pri=615, cost=72000)
      Pushing a40(r443,l0)
      Pushing a79(r432,l0)
      Pushing a78(r294,l0)
      Pushing a77(r295,l0)
      Pushing a76(r165,l0)
      Pushing a43(r337,l0)
      Pushing a37(r149,l0)
      Pushing a35(r339,l0)
      Pushing a32(r134,l0)
      Pushing a33(r340,l0)
      Pushing a41(r135,l0)
      Pushing a29(r160,l0)
      Pushing a55(r162,l0)
      Pushing a59(r316,l0)
      Pushing a60(r314,l0)
      Pushing a68(r169,l0)(potential spill: pri=769, cost=30000)
      Pushing a74(r142,l0)
      Pushing a72(r308,l0)
      Pushing a64(r311,l0)(potential spill: pri=1142, cost=40000)
      Pushing a70(r442,l0)
      Pushing a67(r140,l0)
      Pushing a56(r163,l0)
      Pushing a66(r157,l0)
      Pushing a62(r159,l0)
      Pushing a61(r158,l0)
      Pushing a58(r411,l0)(potential spill: pri=2142, cost=30000)
      Pushing a75(r156,l0)(potential spill: pri=3478, cost=80000)
      Pushing a54(r143,l0)(potential spill: pri=5368, cost=102000)
      Pushing a46(r289,l0)(potential spill: pri=8000, cost=120000)
      Popping a46(r289,l0)  -- assign reg 6
      Popping a54(r143,l0)  -- assign reg 8
      Popping a75(r156,l0)  -- assign reg 10
      Popping a58(r411,l0)  -- assign reg 5
      Popping a61(r158,l0)  -- assign reg 2
      Popping a62(r159,l0)  -- assign reg 0
      Popping a66(r157,l0)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a56(r163,l0)  -- assign reg 4
      Popping a67(r140,l0)  -- assign reg 2
      Popping a70(r442,l0)  -- assign reg 1
      Popping a64(r311,l0)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a72(r308,l0)  -- assign reg 0
      Popping a74(r142,l0)  -- (memory is more profitable 52000 vs 2147483647) spill
      Popping a68(r169,l0)  -- (memory is more profitable 30000 vs 2147483647) spill
      Popping a60(r314,l0)  -- assign reg 10
      Popping a59(r316,l0)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a55(r162,l0)  -- assign reg 0
      Popping a29(r160,l0)  -- assign reg 2
      Popping a41(r135,l0)  -- assign reg 0
      Popping a33(r340,l0)  -- assign reg 0
      Popping a32(r134,l0)  -- assign reg 4
      Popping a35(r339,l0)  -- assign reg 8
      Popping a37(r149,l0)  -- assign reg 10
      Popping a43(r337,l0)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a76(r165,l0)  -- assign reg 2
      Popping a77(r295,l0)  -- assign reg 1
      Popping a78(r294,l0)  -- assign reg 0
      Popping a79(r432,l0)  -- assign reg 12
      Popping a40(r443,l0)  -- assign reg 12
      Popping a38(r161,l0)  -- spill
      Popping a31(r182,l0)  -- (memory is more profitable 60000 vs 2147483647) spill
      Popping a30(r181,l0)  -- assign reg 8
      Popping a45(r137,l0)  -- assign reg 4
      Popping a34(r444,l0)  -- assign reg 10
      Popping a16(r195,l0)  -- spill
      Popping a11(r192,l0)  -- spill
      Popping a63(r139,l0)  -- (memory is more profitable 30000 vs 2147483647) spill
      Popping a36(r445,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a44(r154,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a39(r150,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a65(r446,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a69(r168,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a73(r164,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a47(r153,l0)  -- assign reg 0
      Popping a48(r434,l0)  -- assign reg 12
      Popping a49(r321,l0)  -- assign reg 4
      Popping a50(r320,l0)  -- assign reg 14
      Popping a42(r151,l0)  -- spill
      Popping a71(r167,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a0(r185,l0)  -- assign reg 4
      Popping a25(r349,l0)  -- assign reg 12
      Popping a118(r194,l0)  -- assign reg 4
      Popping a91(r184,l0)  -- assign reg 5
      Popping a117(r180,l0)  -- assign reg 2
      Popping a1(r393,l0)  -- assign reg 0
      Popping a17(r364,l0)  -- assign reg 0
      Popping a10(r379,l0)  -- assign reg 3
      Popping a4(r388,l0)  -- assign reg 6
      Popping a5(r383,l0)  -- assign reg 8
      Popping a6(r269,l0)  -- assign reg 12
      Popping a7(r386,l0)  -- assign reg 14
      Popping a8(r381,l0)  -- assign reg 5
      Popping a9(r396,l0)  -- assign reg 10
      Popping a3(r395,l0)  -- assign reg 3
      Popping a2(r389,l0)  -- assign reg 10
      Popping a18(r361,l0)  -- assign reg 6
      Popping a94(r178,l0)  -- assign reg 2
      Popping a92(r183,l0)  -- assign reg 1
      Popping a95(r177,l0)  -- assign reg 12
      Popping a115(r189,l0)  -- assign reg 0
      Popping a127(r190,l0)  -- assign reg 0
      Popping a21(r356,l0)  -- assign reg 2
      Popping a110(r431,l0)  -- assign reg 14
      Popping a121(r425,l0)  -- assign reg 12
      Popping a20(r360,l0)  -- assign reg 8
      Popping a27(r345,l0)  -- assign reg 0
      Popping a83(r186,l0)  -- assign reg 2
      Popping a104(r175,l0)  -- assign reg 0
      Popping a120(r179,l0)  -- assign reg 14
      Popping a19(r366,l0)  -- assign reg 12
      Popping a28(r343,l0)  -- assign reg 4
      Popping a51(r436,l0)  -- assign reg 5
      Popping a52(r318,l0)  -- assign reg 0
      Popping a81(r188,l0)  -- assign reg 1
      Popping a84(r290,l0)  -- assign reg 4
      Popping a89(r288,l0)  -- assign reg 0
      Popping a93(r270,l0)  -- assign reg 4
      Popping a101(r174,l0)  -- assign reg 1
      Popping a107(r176,l0)  -- assign reg 0
      Popping a12(r378,l0)  -- assign reg 2
      Popping a13(r377,l0)  -- assign reg 3
      Popping a14(r271,l0)  -- assign reg 4
      Popping a15(r375,l0)  -- assign reg 2
      Popping a22(r367,l0)  -- assign reg 14
      Popping a23(r358,l0)  -- assign reg 14
      Popping a24(r354,l0)  -- assign reg 5
      Popping a26(r347,l0)  -- assign reg 2
      Popping a53(r319,l0)  -- assign reg 4
      Popping a57(r317,l0)  -- assign reg 0
      Popping a80(r293,l0)  -- assign reg 1
      Popping a82(r291,l0)  -- assign reg 4
      Popping a85(r287,l0)  -- assign reg 1
      Popping a86(r286,l0)  -- assign reg 12
      Popping a87(r282,l0)  -- assign reg 1
      Popping a88(r283,l0)  -- assign reg 14
      Popping a90(r281,l0)  -- assign reg 14
      Popping a96(r264,l0)  -- assign reg 4
      Popping a97(r265,l0)  -- assign reg 6
      Popping a98(r262,l0)  -- assign reg 0
      Popping a99(r258,l0)  -- assign reg 1
      Popping a100(r257,l0)  -- assign reg 0
      Popping a102(r254,l0)  -- assign reg 4
      Popping a103(r255,l0)  -- assign reg 6
      Popping a105(r248,l0)  -- assign reg 0
      Popping a106(r247,l0)  -- assign reg 14
      Popping a108(r252,l0)  -- assign reg 4
      Popping a109(r245,l0)  -- assign reg 4
      Popping a111(r426,l0)  -- assign reg 0
      Popping a112(r430,l0)  -- assign reg 4
      Popping a113(r221,l0)  -- assign reg 6
      Popping a114(r237,l0)  -- assign reg 1
      Popping a116(r222,l0)  -- assign reg 2
      Popping a119(r220,l0)  -- assign reg 0
      Popping a122(r420,l0)  -- assign reg 1
      Popping a123(r196,l0)  -- assign reg 6
      Popping a124(r424,l0)  -- assign reg 5
      Popping a125(r212,l0)  -- assign reg 1
      Popping a126(r197,l0)  -- assign reg 8

  Loop 2 (parent 0, header bb63, depth 1)
    bbs: 63(->64:l0) 62
    all: 128r160 129r181 130r182 131r192 132r195 133r289 134r444 135r445
    modified regnos: 160 181 182
    border: 128r160 129r181 130r182 131r192 132r195 133r289 134r444 135r445
    Pressure: GENERAL_REGS=14
      Pushing a132(r195,l2)
      Pushing a131(r192,l2)
      Pushing a133(r289,l2)
      Pushing a128(r160,l2)
      Pushing a129(r181,l2)
      Pushing a130(r182,l2)
      Popping a130(r182,l2)  -- assign reg 0
      Popping a129(r181,l2)  -- assign reg 8
      Popping a128(r160,l2)  -- assign reg 2
      Popping a133(r289,l2)  -- assign reg 6
      Popping a131(r192,l2)  -- (memory is more profitable -20000 vs 0) spill
      Popping a132(r195,l2)  -- (memory is more profitable -20000 vs 0) spill

  Loop 1 (parent 0, header bb50, depth 1)
    bbs: 50(->51:l0) 49
    all: 136r143 137r156 138r157 139r158 140r159 141r161 142r163 143r192 144r195 145r289 146r411 147r446
    modified regnos: 143 158 159
    border: 136r143 137r156 138r157 139r158 140r159 141r161 142r163 143r192 144r195 145r289 146r411 147r446
    Pressure: GENERAL_REGS=20
      Pushing a143(r192,l1)(potential spill: pri=-2222, cost=-40000)
      Pushing a144(r195,l1)(potential spill: pri=-2352, cost=-40000)
      Pushing a141(r161,l1)(potential spill: pri=-1379, cost=-40000)
      Pushing a146(r411,l1)
      Pushing a145(r289,l1)
      Pushing a142(r163,l1)
      Pushing a138(r157,l1)
      Pushing a137(r156,l1)
      Pushing a136(r143,l1)
      Pushing a140(r159,l1)
      Pushing a139(r158,l1)
      Popping a139(r158,l1)  -- assign reg 2
      Popping a140(r159,l1)  -- assign reg 0
      Popping a136(r143,l1)  -- assign reg 8
      Popping a137(r156,l1)  -- assign reg 10
      Popping a138(r157,l1)  -- (memory is more profitable -10000 vs 4000) spill
      Popping a142(r163,l1)  -- assign reg 4
      Popping a145(r289,l1)  -- assign reg 6
      Popping a146(r411,l1)  -- assign reg 5
      Popping a141(r161,l1)  -- (memory is more profitable -20000 vs 2147483647) spill
      Popping a144(r195,l1)  -- (memory is more profitable -20000 vs 0) spill
      Popping a143(r192,l1)  -- (memory is more profitable -20000 vs 0) spill
Disposition:
   32:r134 l0     4   41:r135 l0     0   45:r137 l0     4   63:r139 l0   mem
   67:r140 l0     2   74:r142 l0   mem  136:r143 l1     8   54:r143 l0     8
   37:r149 l0    10   39:r150 l0   mem   42:r151 l0   mem   47:r153 l0     0
   44:r154 l0   mem  137:r156 l1    10   75:r156 l0    10  138:r157 l1   mem
   66:r157 l0   mem  139:r158 l1     2   61:r158 l0     2  140:r159 l1     0
   62:r159 l0     0  128:r160 l2     2   29:r160 l0     2  141:r161 l1   mem
   38:r161 l0   mem   55:r162 l0     0  142:r163 l1     4   56:r163 l0     4
   73:r164 l0   mem   76:r165 l0     2   71:r167 l0   mem   69:r168 l0   mem
   68:r169 l0   mem  101:r174 l0     1  104:r175 l0     0  107:r176 l0     0
   95:r177 l0    12   94:r178 l0     2  120:r179 l0    14  117:r180 l0     2
  129:r181 l2     8   30:r181 l0     8  130:r182 l2     0   31:r182 l0   mem
   92:r183 l0     1   91:r184 l0     5    0:r185 l0     4   83:r186 l0     2
   81:r188 l0     1  115:r189 l0     0  127:r190 l0     0  143:r192 l1   mem
  131:r192 l2   mem   11:r192 l0   mem  118:r194 l0     4  144:r195 l1   mem
  132:r195 l2   mem   16:r195 l0   mem  123:r196 l0     6  126:r197 l0     8
  125:r212 l0     1  119:r220 l0     0  113:r221 l0     6  116:r222 l0     2
  114:r237 l0     1  109:r245 l0     4  106:r247 l0    14  105:r248 l0     0
  108:r252 l0     4  102:r254 l0     4  103:r255 l0     6  100:r257 l0     0
   99:r258 l0     1   98:r262 l0     0   96:r264 l0     4   97:r265 l0     6
    6:r269 l0    12   93:r270 l0     4   14:r271 l0     4   90:r281 l0    14
   87:r282 l0     1   88:r283 l0    14   86:r286 l0    12   85:r287 l0     1
   89:r288 l0     0  145:r289 l1     6  133:r289 l2     6   46:r289 l0     6
   84:r290 l0     4   82:r291 l0     4   80:r293 l0     1   78:r294 l0     0
   77:r295 l0     1   72:r308 l0     0   64:r311 l0   mem   60:r314 l0    10
   59:r316 l0   mem   57:r317 l0     0   52:r318 l0     0   53:r319 l0     4
   50:r320 l0    14   49:r321 l0     4   43:r337 l0   mem   35:r339 l0     8
   33:r340 l0     0   28:r343 l0     4   27:r345 l0     0   26:r347 l0     2
   25:r349 l0    12   24:r354 l0     5   21:r356 l0     2   23:r358 l0    14
   20:r360 l0     8   18:r361 l0     6   17:r364 l0     0   19:r366 l0    12
   22:r367 l0    14   15:r375 l0     2   13:r377 l0     3   12:r378 l0     2
   10:r379 l0     3    8:r381 l0     5    5:r383 l0     8    7:r386 l0    14
    4:r388 l0     6    2:r389 l0    10    1:r393 l0     0    3:r395 l0     3
    9:r396 l0    10  146:r411 l1     5   58:r411 l0     5  122:r420 l0     1
  124:r424 l0     5  121:r425 l0    12  111:r426 l0     0  112:r430 l0     4
  110:r431 l0    14   79:r432 l0    12   48:r434 l0    12   51:r436 l0     5
   70:r442 l0     1   40:r443 l0    12  134:r444 l2    10   34:r444 l0    10
  135:r445 l2   mem   36:r445 l0   mem  147:r446 l1   mem   65:r446 l0   mem
New iteration of spill/restore move
      Changing RTL for loop 2 (header bb63)
  2 vs parent 2:      Creating newreg=447 from oldreg=160
  8 vs parent 8:      Creating newreg=448 from oldreg=181
  0 vs parent -1:      Creating newreg=449 from oldreg=182
  6 vs parent 6:      Creating newreg=450 from oldreg=289
rescanning insn with uid = 592.
deleting insn with uid = 592.
rescanning insn with uid = 594.
deleting insn with uid = 594.
rescanning insn with uid = 588.
deleting insn with uid = 588.
      Changing RTL for loop 1 (header bb50)
  8 vs parent 8:      Creating newreg=451 from oldreg=143
  10 vs parent 10:      Creating newreg=452 from oldreg=156
  2 vs parent 2:      Creating newreg=453 from oldreg=158
  0 vs parent 0:      Creating newreg=454 from oldreg=159
  4 vs parent 4:      Creating newreg=455 from oldreg=163
  6 vs parent 6:      Creating newreg=456 from oldreg=289
  5 vs parent 5:      Creating newreg=457 from oldreg=411
rescanning insn with uid = 444.
deleting insn with uid = 444.
rescanning insn with uid = 439.
deleting insn with uid = 439.
rescanning insn with uid = 440.
deleting insn with uid = 440.
scanning new insn with uid = 933.
scanning new insn with uid = 934.
scanning new insn with uid = 935.
scanning new insn with uid = 936.
scanning new insn with uid = 937.
scanning new insn with uid = 938.
scanning new insn with uid = 943.
scanning new insn with uid = 944.
    Adding cp20:a54r143-a136r451
    Adding range [292..292] to allocno a54r143
    Adding cp21:a75r156-a137r452
    Adding range [292..294] to allocno a75r156
    Adding cp22:a61r158-a139r453
    Adding range [292..296] to allocno a61r158
    Adding cp23:a62r159-a140r454
    Adding range [292..298] to allocno a62r159
    Adding cp24:a56r163-a142r455
    Adding range [292..300] to allocno a56r163
    Adding cp25:a46r289-a145r456
    Adding range [292..302] to allocno a46r289
    Adding cp26:a58r411-a146r457
    Adding range [292..304] to allocno a58r411
    Adding range [293..305] to allocno a136r451
    Adding range [295..305] to allocno a137r452
    Adding range [297..305] to allocno a139r453
    Adding range [299..305] to allocno a140r454
    Adding range [301..305] to allocno a142r455
    Adding range [303..305] to allocno a145r456
    Adding range [305..305] to allocno a146r457
    Adding range [292..305] to live through  allocno a66r157
    Adding range [292..305] to live through  allocno a38r161
    Adding range [292..305] to live through  allocno a11r192
    Adding range [292..305] to live through  allocno a16r195
    Adding range [292..305] to live through  allocno a65r446
    Adding cp27:a54r143-a136r451
    Adding range [307..307] to allocno a136r451
    Adding cp28:a61r158-a139r453
    Adding range [307..309] to allocno a139r453
    Adding cp29:a62r159-a140r454
    Adding range [307..311] to allocno a140r454
    Adding cp30:a56r163-a142r455
    Adding range [307..313] to allocno a142r455
    Adding cp31:a46r289-a145r456
    Adding range [307..315] to allocno a145r456
    Adding cp32:a58r411-a146r457
    Adding range [307..317] to allocno a146r457
    Adding range [308..318] to allocno a54r143
    Adding range [310..318] to allocno a61r158
    Adding range [312..318] to allocno a62r159
    Adding range [314..318] to allocno a56r163
    Adding range [316..318] to allocno a46r289
    Adding range [318..318] to allocno a58r411
    Adding range [307..318] to live through  allocno a38r161
    Adding range [307..318] to live through  allocno a11r192
    Adding range [307..318] to live through  allocno a16r195
    Adding cp33:a29r160-a128r447
    Adding range [320..320] to allocno a29r160
    Adding cp34:a30r181-a129r448
    Adding range [320..322] to allocno a30r181
    Adding cp35:a31r182-a130r449
    Adding range [320..324] to allocno a31r182
    Adding cp36:a46r289-a133r450
    Adding range [320..326] to allocno a46r289
    Adding range [321..327] to allocno a128r447
    Adding range [323..327] to allocno a129r448
    Adding range [325..327] to allocno a130r449
    Adding range [327..327] to allocno a133r450
    Adding range [320..327] to live through  allocno a11r192
    Adding range [320..327] to live through  allocno a16r195
    Adding range [320..327] to live through  allocno a34r444
    Adding range [320..327] to live through  allocno a36r445
    Adding cp37:a29r160-a128r447
    Adding range [329..329] to allocno a128r447
    Adding cp38:a30r181-a129r448
    Adding range [329..331] to allocno a129r448
    Adding range [330..332] to allocno a29r160
    Adding range [332..332] to allocno a30r181
    Adding range [329..332] to live through  allocno a11r192
    Adding range [329..332] to live through  allocno a16r195
scanning new insn with uid = 926.
scanning new insn with uid = 927.
scanning new insn with uid = 928.
scanning new insn with uid = 929.
scanning new insn with uid = 930.
scanning new insn with uid = 931.
scanning new insn with uid = 932.
scanning new insn with uid = 939.
scanning new insn with uid = 940.
scanning new insn with uid = 941.
scanning new insn with uid = 942.
    New r447: setting preferred GENERAL_REGS, alternative NO_REGS
    New r448: setting preferred GENERAL_REGS, alternative NO_REGS
    New r449: setting preferred GENERAL_REGS, alternative NO_REGS
    New r450: setting preferred GENERAL_REGS, alternative NO_REGS
    New r451: setting preferred GENERAL_REGS, alternative NO_REGS
    New r452: setting preferred GENERAL_REGS, alternative NO_REGS
    New r453: setting preferred GENERAL_REGS, alternative NO_REGS
    New r454: setting preferred GENERAL_REGS, alternative NO_REGS
    New r455: setting preferred GENERAL_REGS, alternative NO_REGS
    New r456: setting preferred GENERAL_REGS, alternative NO_REGS
    New r457: setting preferred GENERAL_REGS, alternative NO_REGS
Flattening IR
      Moving ranges of a147r446 to a65r446:  [289..290]
      Moving ranges of a135r445 to a36r445:  [287..288]
      Moving ranges of a134r444 to a34r444:  [287..288]
      Moving ranges of a144r195 to a16r195:  [289..290]
      Moving ranges of a132r195 to a16r195:  [287..288]
      Moving ranges of a143r192 to a11r192:  [289..290]
      Moving ranges of a131r192 to a11r192:  [287..288]
      Moving ranges of a141r161 to a38r161:  [289..290]
      Moving ranges of a138r157 to a66r157:  [289..290]
      Remove a131r192
      Remove a132r195
      Remove a134r444
      Remove a135r445
      Remove a138r157
      Remove a141r161
      Remove a143r192
      Remove a144r195
      Remove a147r446
Compressing live ranges: from 333 to 328 - 98%
Ranges after the compression:
 a0(r185): [188..189] [54..55] [36..51] [32..33] [28..29] [20..25] [0..13]
 a1(r393): [1..15]
 a2(r389): [1..3]
 a3(r395): [2..8]
 a4(r388): [3..16]
 a5(r383): [3..17]
 a6(r269): [192..196] [4..19]
 a7(r386): [5..10]
 a8(r381): [6..11]
 a9(r396): [7..12]
 a10(r379): [9..18]
 a11(r192): [324..327] [316..323] [304..315] [290..303] [59..289] [38..53] [14..35]
 a12(r378): [21..22]
 a13(r377): [23..24]
 a14(r271): [191..193] [26..27]
 a15(r375): [30..31]
 a16(r195): [324..327] [316..323] [304..315] [290..303] [286..289] [190..284] [58..187] [52..53] [34..35]
 a17(r364): [37..46]
 a18(r361): [37..40]
 a19(r366): [39..45]
 a20(r360): [40..47]
 a21(r356): [40..49]
 a22(r367): [41..42]
 a23(r358): [43..48]
 a24(r354): [44..50]
 a25(r349): [56..57]
 a26(r347): [62..62] [60..61]
 a27(r345): [61..64]
 a28(r343): [66..67] [61..65]
 a29(r160): [325..327] [316..316] [162..163] [115..115] [113..114] [63..109]
 a30(r181): [327..327] [316..318] [68..72]
 a31(r182): [316..320] [69..76]
 a32(r134): [70..84]
 a33(r340): [70..79]
 a34(r444): [316..323] [286..287] [69..71]
 a35(r339): [73..85]
 a36(r445): [316..323] [286..287] [69..74]
 a37(r149): [90..91] [75..89]
 a38(r161): [304..315] [290..303] [288..289] [77..164]
 a39(r150): [80..83] [78..78]
 a40(r443): [78..81]
 a41(r135): [82..88]
 a42(r151): [83..97]
 a43(r337): [83..87]
 a44(r154): [84..95]
 a45(r137): [86..93]
 a46(r289): [316..322] [313..315] [290..300] [69..178]
 a47(r153): [92..99]
 a48(r434): [94..100]
 a49(r321): [94..101]
 a50(r320): [96..103]
 a51(r436): [98..102]
 a52(r318): [106..106] [104..105]
 a53(r319): [105..107]
 a54(r143): [305..315] [290..290] [158..159] [114..157] [108..112]
 a55(r162): [120..120] [117..119] [110..112]
 a56(r163): [311..315] [290..298] [117..153] [111..112]
 a57(r317): [114..116]
 a58(r411): [315..315] [290..302] [118..160]
 a59(r316): [119..123]
 a60(r314): [119..124]
 a61(r158): [307..315] [290..294] [121..128]
 a62(r159): [309..315] [290..296] [122..130]
 a63(r139): [126..137]
 a64(r311): [126..133]
 a65(r446): [290..303] [288..289] [125..127]
 a66(r157): [290..303] [288..289] [125..138]
 a67(r140): [129..141]
 a68(r169): [143..144] [131..142]
 a69(r168): [134..136] [132..132]
 a70(r442): [132..135]
 a71(r167): [136..150]
 a72(r308): [136..140]
 a73(r164): [137..148]
 a74(r142): [139..146]
 a75(r156): [290..292] [125..161]
 a76(r165): [145..152]
 a77(r295): [147..154]
 a78(r294): [149..156]
 a79(r432): [151..155]
 a80(r293): [165..166]
 a81(r188): [167..171]
 a82(r291): [168..169]
 a83(r186): [169..182]
 a84(r290): [170..175]
 a85(r287): [172..173]
 a86(r286): [174..179]
 a87(r282): [174..176]
 a88(r283): [177..180]
 a89(r288): [178..183]
 a90(r281): [181..184]
 a91(r184): [212..213] [205..206] [200..201] [190..197] [185..187]
 a92(r183): [233..234] [226..227] [222..223] [190..218] [186..187]
 a93(r270): [194..195]
 a94(r178): [214..256] [208..211] [202..204] [198..199]
 a95(r177): [215..262] [203..204]
 a96(r264): [209..209] [207..208]
 a97(r265): [208..210]
 a98(r262): [216..217]
 a99(r258): [219..221]
 a100(r257): [219..220]
 a101(r174): [237..244] [224..225]
 a102(r254): [230..230] [228..229]
 a103(r255): [229..231]
 a104(r175): [235..236] [229..232]
 a105(r248): [238..239]
 a106(r247): [240..243]
 a107(r176): [240..248]
 a108(r252): [241..242]
 a109(r245): [245..246]
 a110(r431): [247..257]
 a111(r426): [249..251]
 a112(r430): [250..258]
 a113(r221): [260..260] [252..259]
 a114(r237): [253..254]
 a115(r189): [255..263]
 a116(r222): [259..261]
 a117(r180): [264..279]
 a118(r194): [265..285]
 a119(r220): [266..267]
 a120(r179): [268..282]
 a121(r425): [269..280]
 a122(r420): [270..271]
 a123(r196): [277..277] [272..276]
 a124(r424): [273..281]
 a125(r212): [274..275]
 a126(r197): [276..278]
 a127(r190): [276..283]
 a128(r447): [324..324] [317..323] [286..287]
 a129(r448): [324..326] [319..323] [286..287]
 a130(r449): [321..323] [286..287]
 a133(r450): [323..323] [286..287]
 a136(r451): [304..304] [291..303] [288..289]
 a137(r452): [293..303] [288..289]
 a139(r453): [304..306] [295..303] [288..289]
 a140(r454): [304..308] [297..303] [288..289]
 a142(r455): [304..310] [299..303] [288..289]
 a145(r456): [304..312] [301..303] [288..289]
 a146(r457): [304..314] [303..303] [288..289]
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 76 n_edges 111 count 150 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 76 n_edges 111 count 152 (    2)
+++Costs: overall 642000, reg 20000, mem 622000, ld 10000, st 0, move 36000
+++       move loops 0, new jumps 2
insn=3, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 192
insn=10, live_throughout: 2, 3, 13, 192, dead_or_set: 0, 1
insn=5, live_throughout: 0, 3, 13, 192, dead_or_set: 2, 194
insn=6, live_throughout: 0, 13, 192, 194, dead_or_set: 3, 195
insn=11, live_throughout: 13, 192, 194, 195, dead_or_set: 0, 1, 14
insn=12, live_throughout: 13, 192, 194, 195, dead_or_set: 0, 1, 190
insn=22, live_throughout: 13, 190, 192, 194, 195, dead_or_set: 179
insn=27, live_throughout: 13, 179, 190, 192, 194, 195, dead_or_set: 424
insn=25, live_throughout: 13, 179, 190, 192, 194, 195, 424, dead_or_set: 425
insn=26, live_throughout: 13, 179, 190, 192, 194, 195, 424, dead_or_set: 425
insn=853, live_throughout: 13, 179, 190, 192, 194, 195, 424, 425, dead_or_set: 180
insn=925, live_throughout: 13, 179, 190, 192, 194, 195, 424, 425, dead_or_set: 197
insn=14, live_throughout: 13, 179, 192, 194, 195, 424, 425, dead_or_set: 190, 196, 197
insn=924, live_throughout: 13, 179, 192, 194, 195, 196, 424, 425, dead_or_set: 212
insn=46, live_throughout: 13, 179, 192, 194, 195, 196, 424, 425, dead_or_set: 212
insn=29, live_throughout: 13, 24, 179, 192, 194, 195, 196, 425, dead_or_set: 180, 424
insn=30, live_throughout: 13, 24, 179, 192, 194, 195, 196, 425, dead_or_set: 180
insn=15, live_throughout: 13, 24, 179, 180, 192, 194, 195, 425, dead_or_set: 196, 420
insn=17, live_throughout: 13, 24, 179, 180, 192, 194, 195, 425, dead_or_set: 420
insn=31, live_throughout: 13, 24, 179, 180, 192, 194, 195, dead_or_set: 180, 425
insn=23, live_throughout: 13, 24, 180, 192, 194, 195, dead_or_set: 179
insn=47, live_throughout: 13, 180, 192, 194, 195, dead_or_set: 
insn=49, live_throughout: 13, 180, 192, 194, 195, dead_or_set: 220
insn=50, live_throughout: 13, 192, 194, 195, dead_or_set: 180, 220
insn=51, live_throughout: 13, 180, 192, 194, 195, dead_or_set: 
insn=54, live_throughout: 13, 180, 192, 195, dead_or_set: 0, 194
insn=53, live_throughout: 0, 13, 192, 195, dead_or_set: 180
insn=55, live_throughout: 13, 192, 195, dead_or_set: 0, 1, 14
insn=56, live_throughout: 13, 192, 195, dead_or_set: 0, 1, 189
insn=67, live_throughout: 13, 189, 192, 195, dead_or_set: 177
insn=923, live_throughout: 13, 177, 189, 192, 195, dead_or_set: 222
insn=58, live_throughout: 13, 177, 189, 192, 195, dead_or_set: 221, 222
insn=72, live_throughout: 13, 177, 189, 192, 195, 221, dead_or_set: 430
insn=70, live_throughout: 13, 177, 189, 192, 195, 221, 430, dead_or_set: 431
insn=854, live_throughout: 13, 177, 189, 192, 195, 221, 430, 431, dead_or_set: 178
insn=71, live_throughout: 13, 177, 192, 195, 221, 430, dead_or_set: 189, 431
insn=80, live_throughout: 13, 177, 192, 195, 221, 430, 431, dead_or_set: 237
insn=91, live_throughout: 13, 177, 192, 195, 221, 430, 431, dead_or_set: 237
insn=59, live_throughout: 13, 24, 177, 192, 195, 430, 431, dead_or_set: 221, 426
insn=74, live_throughout: 13, 24, 177, 192, 195, 426, 431, dead_or_set: 178, 430
insn=68, live_throughout: 13, 24, 177, 178, 192, 195, 426, 431, dead_or_set: 
insn=75, live_throughout: 13, 24, 177, 192, 195, 426, 431, dead_or_set: 178
insn=61, live_throughout: 13, 24, 177, 178, 192, 195, 431, dead_or_set: 176, 426
insn=76, live_throughout: 13, 24, 176, 177, 178, 192, 195, dead_or_set: 178, 431
insn=62, live_throughout: 13, 24, 176, 177, 178, 192, 195, dead_or_set: 
insn=92, live_throughout: 13, 176, 177, 178, 192, 195, dead_or_set: 
insn=94, live_throughout: 13, 176, 177, 178, 192, 195, dead_or_set: 245
insn=95, live_throughout: 13, 176, 177, 192, 195, dead_or_set: 178, 245
insn=96, live_throughout: 13, 176, 177, 178, 192, 195, dead_or_set: 
insn=103, live_throughout: 13, 176, 177, 178, 192, 195, dead_or_set: 174
insn=99, live_throughout: 13, 174, 176, 177, 178, 192, 195, dead_or_set: 247
insn=922, live_throughout: 13, 174, 176, 177, 178, 192, 195, 247, dead_or_set: 252
insn=108, live_throughout: 13, 174, 176, 177, 178, 192, 195, 247, dead_or_set: 252
insn=98, live_throughout: 13, 24, 174, 176, 177, 178, 192, 195, 247, dead_or_set: 
insn=101, live_throughout: 13, 24, 174, 177, 178, 192, 195, dead_or_set: 176, 247, 248
insn=102, live_throughout: 13, 24, 174, 177, 178, 192, 195, dead_or_set: 248
insn=109, live_throughout: 13, 174, 177, 178, 192, 195, dead_or_set: 
insn=111, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 175
insn=114, live_throughout: 13, 175, 177, 178, 192, 195, dead_or_set: 
insn=115, live_throughout: 13, 175, 177, 178, 192, 195, dead_or_set: 
insn=117, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 183
insn=870, live_throughout: 13, 177, 178, 183, 192, 195, dead_or_set: 
insn=120, live_throughout: 13, 175, 177, 178, 192, 195, dead_or_set: 
insn=122, live_throughout: 13, 175, 177, 178, 192, 195, dead_or_set: 255
insn=123, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 175, 254, 255
insn=837, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 183, 254
insn=872, live_throughout: 13, 177, 178, 183, 192, 195, dead_or_set: 
insn=137, live_throughout: 13, 174, 177, 178, 192, 195, dead_or_set: 
insn=139, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 174
insn=140, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 
insn=142, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 183
insn=874, live_throughout: 13, 177, 178, 183, 192, 195, dead_or_set: 
insn=145, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 
insn=148, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 258
insn=921, live_throughout: 13, 177, 178, 192, 195, 258, dead_or_set: 257
insn=838, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 257, 258
insn=839, live_throughout: 13, 177, 178, 192, 195, dead_or_set: 183
insn=159, live_throughout: 13, 177, 178, 183, 192, 195, dead_or_set: 
insn=164, live_throughout: 13, 177, 178, 183, 192, 195, dead_or_set: 262
insn=165, live_throughout: 13, 177, 178, 183, 192, 195, dead_or_set: 262
insn=166, live_throughout: 13, 177, 178, 183, 192, 195, dead_or_set: 
insn=170, live_throughout: 13, 178, 183, 192, 195, dead_or_set: 
insn=171, live_throughout: 13, 178, 183, 192, 195, dead_or_set: 
insn=173, live_throughout: 13, 183, 192, 195, dead_or_set: 184
insn=876, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=176, live_throughout: 13, 178, 183, 192, 195, dead_or_set: 
insn=178, live_throughout: 13, 178, 183, 192, 195, dead_or_set: 265
insn=179, live_throughout: 13, 183, 192, 195, dead_or_set: 178, 264, 265
insn=841, live_throughout: 13, 183, 192, 195, dead_or_set: 184, 264
insn=878, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=193, live_throughout: 13, 177, 178, 183, 192, 195, dead_or_set: 
insn=195, live_throughout: 13, 178, 183, 192, 195, dead_or_set: 177
insn=196, live_throughout: 13, 178, 183, 192, 195, dead_or_set: 
insn=198, live_throughout: 13, 183, 192, 195, dead_or_set: 184
insn=880, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=201, live_throughout: 13, 178, 183, 192, 195, dead_or_set: 
insn=842, live_throughout: 13, 183, 192, 195, dead_or_set: 178
insn=843, live_throughout: 13, 183, 192, 195, dead_or_set: 184
insn=214, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=217, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=218, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=221, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 269
insn=222, live_throughout: 13, 183, 184, 192, 195, 269, dead_or_set: 
insn=224, live_throughout: 13, 183, 184, 192, 195, 269, dead_or_set: 270
insn=226, live_throughout: 13, 183, 184, 192, 195, 269, dead_or_set: 270, 271
insn=227, live_throughout: 13, 183, 184, 192, 195, 269, 271, dead_or_set: 
insn=230, live_throughout: 13, 183, 184, 192, 195, 271, dead_or_set: 
insn=231, live_throughout: 13, 183, 184, 192, 195, 271, dead_or_set: 
insn=234, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=235, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=237, live_throughout: 13, 192, dead_or_set: 185
insn=882, live_throughout: 13, 185, 192, dead_or_set: 
insn=240, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=243, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=244, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=247, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=248, live_throughout: 13, 183, 184, 192, 195, dead_or_set: 
insn=251, live_throughout: 13, 184, 192, 195, dead_or_set: 183
insn=252, live_throughout: 13, 184, 192, 195, dead_or_set: 
insn=255, live_throughout: 13, 184, 192, 195, dead_or_set: 0
insn=256, live_throughout: 13, 184, 192, 195, dead_or_set: 0, 14
insn=257, live_throughout: 13, 184, 192, 195, dead_or_set: 
insn=260, live_throughout: 13, 192, 195, dead_or_set: 184
insn=261, live_throughout: 13, 192, 195, dead_or_set: 
insn=264, live_throughout: 13, 192, 195, dead_or_set: 0
insn=265, live_throughout: 13, 192, 195, dead_or_set: 0, 14
insn=266, live_throughout: 13, 192, 195, dead_or_set: 
insn=268, live_throughout: 13, 192, 195, dead_or_set: 281
insn=278, live_throughout: 13, 192, 195, 281, dead_or_set: 288
insn=282, live_throughout: 13, 192, 195, 281, 288, dead_or_set: 186
insn=270, live_throughout: 13, 186, 192, 195, 288, dead_or_set: 281, 283
insn=273, live_throughout: 13, 186, 192, 195, 283, 288, dead_or_set: 286
insn=279, live_throughout: 13, 186, 192, 195, 283, 286, dead_or_set: 288, 289
insn=271, live_throughout: 13, 186, 192, 195, 286, 289, dead_or_set: 282, 283
insn=283, live_throughout: 13, 186, 192, 195, 282, 286, 289, dead_or_set: 290
insn=275, live_throughout: 13, 186, 192, 195, 289, 290, dead_or_set: 282, 286, 287
insn=284, live_throughout: 13, 186, 192, 195, 287, 289, 290, dead_or_set: 
insn=281, live_throughout: 13, 24, 186, 192, 195, 287, 289, 290, dead_or_set: 
insn=276, live_throughout: 13, 24, 186, 192, 195, 289, 290, dead_or_set: 188, 287
insn=277, live_throughout: 13, 24, 186, 188, 192, 195, 289, 290, dead_or_set: 
insn=285, live_throughout: 13, 24, 186, 188, 192, 195, 289, 290, dead_or_set: 
insn=287, live_throughout: 13, 186, 188, 192, 195, 289, 290, dead_or_set: 
insn=288, live_throughout: 13, 186, 188, 192, 195, 289, dead_or_set: 290
insn=289, live_throughout: 13, 186, 188, 192, 195, 289, dead_or_set: 
insn=803, live_throughout: 13, 186, 188, 192, 195, 289, dead_or_set: 
insn=296, live_throughout: 13, 188, 192, 195, 289, dead_or_set: 186, 291
insn=297, live_throughout: 13, 188, 192, 195, 289, dead_or_set: 291
insn=299, live_throughout: 13, 192, 195, 289, dead_or_set: 188, 293
insn=300, live_throughout: 13, 192, 195, 289, dead_or_set: 293
insn=301, live_throughout: 13, 192, 195, 289, dead_or_set: 
insn=303, live_throughout: 13, 192, 195, 289, dead_or_set: 161
insn=304, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 
insn=305, live_throughout: 13, 24, 161, 192, 195, 289, dead_or_set: 
insn=307, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 
insn=308, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 
insn=309, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 
insn=804, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 
insn=316, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 160
insn=884, live_throughout: 13, 160, 161, 192, 195, 289, dead_or_set: 
insn=319, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 
insn=855, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 156
insn=321, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 156
insn=322, live_throughout: 13, 156, 161, 192, 195, 289, dead_or_set: 156
insn=323, live_throughout: 13, 156, 161, 192, 195, 289, dead_or_set: 411
insn=325, live_throughout: 13, 156, 161, 192, 195, 289, 411, dead_or_set: 
insn=326, live_throughout: 13, 156, 161, 192, 195, 289, 411, dead_or_set: 
insn=337, live_throughout: 13, 156, 161, 192, 195, 289, 411, dead_or_set: 143
insn=886, live_throughout: 13, 143, 156, 161, 192, 195, 289, 411, dead_or_set: 
insn=340, live_throughout: 13, 156, 161, 192, 195, 289, 411, dead_or_set: 
insn=856, live_throughout: 13, 156, 161, 192, 195, 289, 411, dead_or_set: 143
insn=342, live_throughout: 13, 156, 161, 192, 195, 289, 411, dead_or_set: 4
insn=343, live_throughout: 4, 13, 156, 161, 192, 195, 289, 411, dead_or_set: 0, 1
insn=344, live_throughout: 13, 156, 161, 192, 195, 289, 411, dead_or_set: 0, 1, 2, 3, 4, 12, 14
insn=346, live_throughout: 13, 156, 161, 192, 195, 289, 411, dead_or_set: 2, 143
insn=347, live_throughout: 13, 143, 156, 161, 192, 195, 289, 411, dead_or_set: 143
insn=348, live_throughout: 13, 143, 156, 161, 192, 195, 289, 411, dead_or_set: 
insn=350, live_throughout: 13, 143, 156, 161, 192, 195, 289, 411, dead_or_set: 294
insn=370, live_throughout: 13, 143, 156, 161, 192, 195, 289, 294, 411, dead_or_set: 432
insn=352, live_throughout: 13, 143, 156, 161, 192, 195, 289, 294, 411, 432, dead_or_set: 295
insn=361, live_throughout: 13, 143, 156, 161, 192, 195, 289, 294, 295, 411, 432, dead_or_set: 163
insn=377, live_throughout: 13, 143, 156, 161, 163, 192, 195, 289, 294, 295, 411, 432, dead_or_set: 165
insn=385, live_throughout: 13, 143, 156, 161, 163, 165, 192, 195, 289, 294, 295, 411, dead_or_set: 167, 432
insn=357, live_throughout: 13, 143, 156, 161, 163, 165, 167, 192, 195, 289, 295, 411, dead_or_set: 164, 294
insn=381, live_throughout: 13, 143, 156, 161, 163, 164, 165, 167, 192, 195, 289, 411, dead_or_set: 142, 295
insn=389, live_throughout: 13, 142, 143, 156, 161, 163, 164, 165, 167, 192, 195, 289, 411, dead_or_set: 
insn=390, live_throughout: 13, 24, 142, 143, 156, 161, 163, 164, 165, 167, 192, 195, 289, 411, dead_or_set: 
insn=392, live_throughout: 13, 142, 143, 156, 161, 163, 164, 165, 167, 192, 195, 289, 411, dead_or_set: 
insn=393, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 192, 195, 289, 411, dead_or_set: 165
insn=394, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 192, 195, 289, 411, dead_or_set: 
insn=806, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 192, 195, 289, 411, dead_or_set: 
insn=401, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 192, 195, 289, 411, dead_or_set: 169
insn=888, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 169, 192, 195, 289, 411, dead_or_set: 
insn=404, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 192, 195, 289, 411, dead_or_set: 
insn=406, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 192, 195, 289, 411, dead_or_set: 169
insn=407, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 169, 192, 195, 289, 411, dead_or_set: 
insn=857, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 169, 192, 195, 289, 411, dead_or_set: 140
insn=858, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 169, 192, 195, 289, 411, dead_or_set: 308
insn=409, live_throughout: 13, 142, 143, 156, 161, 163, 164, 167, 169, 192, 195, 289, 411, dead_or_set: 140
insn=412, live_throughout: 13, 140, 143, 156, 161, 163, 164, 167, 169, 192, 195, 289, 411, dead_or_set: 142, 308
insn=410, live_throughout: 13, 140, 143, 156, 161, 163, 164, 167, 169, 192, 195, 289, 308, 411, dead_or_set: 140
insn=859, live_throughout: 13, 140, 143, 156, 161, 163, 164, 167, 169, 192, 195, 289, 308, 411, dead_or_set: 157
insn=411, live_throughout: 13, 140, 143, 156, 161, 163, 167, 169, 192, 195, 289, 308, 411, dead_or_set: 139, 164
insn=413, live_throughout: 13, 139, 140, 143, 156, 161, 163, 167, 169, 192, 195, 289, 308, 411, dead_or_set: 308
insn=414, live_throughout: 13, 139, 140, 143, 156, 161, 163, 169, 192, 195, 289, 411, dead_or_set: 167, 168, 308
insn=845, live_throughout: 13, 139, 140, 143, 156, 161, 163, 168, 169, 192, 195, 289, 411, dead_or_set: 442
insn=429, live_throughout: 13, 139, 140, 143, 156, 161, 163, 169, 192, 195, 289, 411, dead_or_set: 168, 311, 442
insn=433, live_throughout: 13, 139, 140, 143, 156, 161, 163, 169, 192, 195, 289, 311, 411, dead_or_set: 157
insn=431, live_throughout: 13, 139, 140, 143, 156, 157, 161, 163, 192, 195, 289, 411, dead_or_set: 169, 311
insn=913, live_throughout: 13, 139, 140, 143, 156, 157, 161, 163, 192, 195, 289, 311, 411, dead_or_set: 159
insn=434, live_throughout: 13, 139, 143, 156, 157, 159, 161, 163, 192, 195, 289, 311, 411, dead_or_set: 140, 157
insn=914, live_throughout: 13, 139, 143, 156, 157, 159, 161, 163, 192, 195, 289, 311, 411, dead_or_set: 158
insn=438, live_throughout: 13, 139, 143, 156, 157, 158, 159, 161, 163, 192, 195, 289, 311, 411, dead_or_set: 446
insn=432, live_throughout: 13, 143, 156, 157, 161, 163, 192, 195, 289, 411, 446, dead_or_set: 139, 158, 159, 311
insn=926, live_throughout: 13, 156, 157, 158, 159, 161, 163, 192, 195, 289, 411, 446, dead_or_set: 143, 451
insn=927, live_throughout: 13, 157, 158, 159, 161, 163, 192, 195, 289, 411, 446, 451, dead_or_set: 156, 452
insn=928, live_throughout: 13, 157, 159, 161, 163, 192, 195, 289, 411, 446, 451, 452, dead_or_set: 158, 453
insn=929, live_throughout: 13, 157, 161, 163, 192, 195, 289, 411, 446, 451, 452, 453, dead_or_set: 159, 454
insn=930, live_throughout: 13, 157, 161, 192, 195, 289, 411, 446, 451, 452, 453, 454, dead_or_set: 163, 455
insn=931, live_throughout: 13, 157, 161, 192, 195, 411, 446, 451, 452, 453, 454, 455, dead_or_set: 289, 456
insn=932, live_throughout: 13, 157, 161, 192, 195, 446, 451, 452, 453, 454, 455, 456, dead_or_set: 411, 457
insn=890, live_throughout: 13, 157, 161, 192, 195, 446, 451, 452, 453, 454, 455, 456, 457, dead_or_set: 
insn=443, live_throughout: 13, 157, 161, 192, 195, 446, 451, 452, 453, 454, 455, 456, 457, dead_or_set: 
insn=439, live_throughout: 13, 157, 161, 192, 195, 446, 452, 453, 454, 455, 456, 457, dead_or_set: 451
insn=440, live_throughout: 13, 157, 161, 192, 195, 446, 451, 452, 455, 456, 457, dead_or_set: 453, 454
insn=441, live_throughout: 13, 157, 161, 192, 195, 446, 451, 452, 453, 454, 455, 456, 457, dead_or_set: 
insn=444, live_throughout: 13, 157, 161, 192, 195, 446, 451, 452, 453, 454, 455, 456, 457, dead_or_set: 
insn=445, live_throughout: 13, 157, 161, 192, 195, 446, 451, 452, 453, 454, 455, 456, 457, dead_or_set: 
insn=933, live_throughout: 13, 161, 192, 195, 453, 454, 455, 456, 457, dead_or_set: 143, 451
insn=934, live_throughout: 13, 143, 161, 192, 195, 454, 455, 456, 457, dead_or_set: 158, 453
insn=935, live_throughout: 13, 143, 158, 161, 192, 195, 455, 456, 457, dead_or_set: 159, 454
insn=936, live_throughout: 13, 143, 158, 159, 161, 192, 195, 456, 457, dead_or_set: 163, 455
insn=937, live_throughout: 13, 143, 158, 159, 161, 163, 192, 195, 457, dead_or_set: 289, 456
insn=938, live_throughout: 13, 143, 158, 159, 161, 163, 192, 195, 289, dead_or_set: 411, 457
insn=860, live_throughout: 13, 143, 158, 159, 161, 163, 192, 195, 289, 411, dead_or_set: 314
insn=861, live_throughout: 13, 143, 158, 159, 161, 163, 192, 195, 289, 411, dead_or_set: 316
insn=454, live_throughout: 13, 143, 158, 161, 163, 192, 195, 289, 411, dead_or_set: 159, 314
insn=456, live_throughout: 13, 143, 161, 163, 192, 195, 289, 314, 411, dead_or_set: 158, 316
insn=455, live_throughout: 13, 143, 161, 163, 192, 195, 289, 314, 316, 411, dead_or_set: 314
insn=457, live_throughout: 13, 143, 161, 163, 192, 195, 289, 314, 316, 411, dead_or_set: 316
insn=458, live_throughout: 13, 143, 161, 163, 192, 195, 289, 411, dead_or_set: 162, 314, 316
insn=459, live_throughout: 13, 143, 161, 162, 163, 192, 195, 289, dead_or_set: 411
insn=460, live_throughout: 13, 143, 161, 162, 163, 192, 195, 289, dead_or_set: 
insn=471, live_throughout: 13, 143, 161, 192, 195, 289, dead_or_set: 317
insn=472, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 143, 160, 317
insn=892, live_throughout: 13, 160, 161, 192, 195, 289, dead_or_set: 
insn=475, live_throughout: 13, 143, 161, 162, 163, 192, 195, 289, dead_or_set: 
insn=477, live_throughout: 13, 143, 161, 162, 192, 195, 289, dead_or_set: 4, 163
insn=478, live_throughout: 4, 13, 143, 161, 192, 195, 289, dead_or_set: 0, 1, 162
insn=479, live_throughout: 13, 143, 161, 192, 195, 289, dead_or_set: 0, 1, 2, 3, 4, 12, 14
insn=481, live_throughout: 13, 161, 192, 195, 289, dead_or_set: 2, 3, 143, 160
insn=482, live_throughout: 13, 160, 161, 192, 195, 289, dead_or_set: 
insn=484, live_throughout: 13, 160, 161, 192, 195, 289, dead_or_set: 
insn=920, live_throughout: 13, 160, 161, 192, 195, 289, dead_or_set: 319
insn=486, live_throughout: 13, 160, 161, 192, 195, 289, dead_or_set: 318, 319
insn=487, live_throughout: 13, 160, 161, 192, 195, 289, 318, dead_or_set: 
insn=488, live_throughout: 13, 160, 161, 192, 195, 289, 318, dead_or_set: 
insn=491, live_throughout: 13, 160, 161, 192, 195, 289, dead_or_set: 318
insn=492, live_throughout: 13, 160, 161, 192, 195, 289, dead_or_set: 
insn=499, live_throughout: 13, 160, 161, 192, 195, 289, dead_or_set: 320
insn=521, live_throughout: 13, 160, 161, 192, 195, 289, 320, dead_or_set: 436
insn=501, live_throughout: 13, 160, 161, 192, 195, 289, 320, 436, dead_or_set: 321
insn=510, live_throughout: 13, 160, 161, 192, 195, 289, 320, 321, 436, dead_or_set: 434
insn=528, live_throughout: 13, 160, 161, 192, 195, 289, 320, 321, 434, 436, dead_or_set: 153
insn=536, live_throughout: 13, 153, 160, 161, 192, 195, 289, 320, 321, 434, dead_or_set: 151, 436
insn=506, live_throughout: 13, 151, 153, 160, 161, 192, 195, 289, 321, 434, dead_or_set: 154, 320
insn=532, live_throughout: 13, 151, 153, 154, 160, 161, 192, 195, 289, dead_or_set: 137, 321, 434
insn=540, live_throughout: 13, 137, 151, 153, 154, 160, 161, 192, 195, 289, dead_or_set: 
insn=541, live_throughout: 13, 24, 137, 151, 153, 154, 160, 161, 192, 195, 289, dead_or_set: 
insn=543, live_throughout: 13, 137, 151, 153, 154, 160, 161, 192, 195, 289, dead_or_set: 
insn=544, live_throughout: 13, 137, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 153
insn=545, live_throughout: 13, 137, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 
insn=810, live_throughout: 13, 137, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 
insn=552, live_throughout: 13, 137, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 149
insn=894, live_throughout: 13, 137, 149, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 
insn=555, live_throughout: 13, 137, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 
insn=557, live_throughout: 13, 137, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 149
insn=558, live_throughout: 13, 137, 149, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 
insn=862, live_throughout: 13, 137, 149, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 135
insn=863, live_throughout: 13, 137, 149, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 337
insn=560, live_throughout: 13, 137, 149, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 135
insn=563, live_throughout: 13, 135, 149, 151, 154, 160, 161, 192, 195, 289, dead_or_set: 137, 337
insn=561, live_throughout: 13, 135, 149, 151, 154, 160, 161, 192, 195, 289, 337, dead_or_set: 135
insn=581, live_throughout: 13, 135, 149, 151, 154, 160, 161, 192, 195, 289, 337, dead_or_set: 339
insn=562, live_throughout: 13, 135, 149, 151, 160, 161, 192, 195, 289, 337, 339, dead_or_set: 134, 154
insn=564, live_throughout: 13, 134, 135, 149, 151, 160, 161, 192, 195, 289, 337, 339, dead_or_set: 337
insn=565, live_throughout: 13, 134, 135, 149, 160, 161, 192, 195, 289, 339, dead_or_set: 150, 151, 337
insn=848, live_throughout: 13, 134, 149, 150, 160, 161, 192, 195, 289, 339, dead_or_set: 135, 443
insn=580, live_throughout: 13, 134, 149, 160, 161, 192, 195, 289, 339, dead_or_set: 150, 340, 443
insn=916, live_throughout: 13, 134, 149, 160, 192, 195, 289, 339, 340, dead_or_set: 161, 182
insn=582, live_throughout: 13, 134, 160, 182, 192, 195, 289, 339, dead_or_set: 149, 340
insn=587, live_throughout: 13, 134, 160, 182, 192, 195, 289, 339, 340, dead_or_set: 445
insn=915, live_throughout: 13, 134, 160, 182, 192, 195, 289, 340, 445, dead_or_set: 181, 339
insn=591, live_throughout: 13, 134, 160, 181, 182, 192, 195, 289, 340, 445, dead_or_set: 444
insn=583, live_throughout: 13, 160, 192, 195, 289, 444, 445, dead_or_set: 134, 181, 182, 340
insn=939, live_throughout: 13, 181, 182, 192, 195, 289, 444, 445, dead_or_set: 160, 447
insn=940, live_throughout: 13, 182, 192, 195, 289, 444, 445, 447, dead_or_set: 181, 448
insn=941, live_throughout: 13, 192, 195, 289, 444, 445, 447, 448, dead_or_set: 182, 449
insn=942, live_throughout: 13, 192, 195, 444, 445, 447, 448, 449, dead_or_set: 289, 450
insn=896, live_throughout: 13, 192, 195, 444, 445, 447, 448, 449, 450, dead_or_set: 
insn=593, live_throughout: 13, 192, 195, 444, 445, 447, 448, 449, 450, dead_or_set: 
insn=588, live_throughout: 13, 192, 195, 444, 445, 447, 450, dead_or_set: 448, 449
insn=589, live_throughout: 13, 192, 195, 444, 445, 447, 448, 449, 450, dead_or_set: 
insn=592, live_throughout: 13, 192, 195, 444, 445, 448, 449, 450, dead_or_set: 447
insn=594, live_throughout: 13, 192, 195, 444, 445, 447, 448, 449, 450, dead_or_set: 
insn=595, live_throughout: 13, 192, 195, 444, 445, 447, 448, 449, 450, dead_or_set: 
insn=943, live_throughout: 13, 192, 195, 448, dead_or_set: 160, 447
insn=944, live_throughout: 13, 160, 192, 195, dead_or_set: 181, 448
insn=607, live_throughout: 13, 160, 192, 195, dead_or_set: 181
insn=604, live_throughout: 13, 24, 160, 192, 195, dead_or_set: 343
insn=608, live_throughout: 13, 160, 192, 195, 343, dead_or_set: 
insn=609, live_throughout: 13, 160, 192, 195, dead_or_set: 343
insn=610, live_throughout: 13, 160, 192, 195, 343, dead_or_set: 
insn=611, live_throughout: 13, 160, 192, 195, 343, dead_or_set: 345
insn=612, live_throughout: 13, 192, 195, 343, dead_or_set: 160, 345
insn=613, live_throughout: 13, 192, 195, dead_or_set: 343, 345, 347
insn=614, live_throughout: 13, 192, 195, dead_or_set: 347
insn=615, live_throughout: 13, 192, 195, dead_or_set: 
insn=620, live_throughout: 13, 195, dead_or_set: 0, 192
insn=622, live_throughout: 0, 13, dead_or_set: 2, 195
insn=621, live_throughout: 0, 2, 13, dead_or_set: 1
insn=623, live_throughout: 0, 1, 2, 13, dead_or_set: 3
insn=919, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 349
insn=619, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 349
insn=624, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=625, live_throughout: 13, 14, dead_or_set: 0, 185
insn=898, live_throughout: 13, 14, 185, dead_or_set: 
insn=628, live_throughout: 13, 192, 195, dead_or_set: 
insn=636, live_throughout: 13, 192, dead_or_set: 3, 195
insn=633, live_throughout: 3, 13, 192, dead_or_set: 0
insn=634, live_throughout: 0, 3, 13, 192, dead_or_set: 1
insn=635, live_throughout: 0, 1, 3, 13, 192, dead_or_set: 2
insn=637, live_throughout: 13, 192, dead_or_set: 0, 1, 2, 3, 14
insn=638, live_throughout: 13, 192, dead_or_set: 0, 185
insn=639, live_throughout: 13, 185, 192, dead_or_set: 
insn=642, live_throughout: 13, 185, 192, dead_or_set: 354
insn=864, live_throughout: 13, 185, 192, 354, dead_or_set: 356
insn=647, live_throughout: 13, 185, 192, 354, dead_or_set: 358
insn=865, live_throughout: 13, 185, 192, 354, 358, dead_or_set: 360
insn=866, live_throughout: 13, 185, 192, 354, 358, dead_or_set: 364
insn=653, live_throughout: 13, 185, 192, 354, 358, dead_or_set: 366
insn=644, live_throughout: 13, 185, 192, 358, 366, dead_or_set: 354, 356
insn=649, live_throughout: 13, 185, 192, 356, 366, dead_or_set: 358, 360
insn=645, live_throughout: 13, 185, 192, 356, 360, 366, dead_or_set: 356
insn=918, live_throughout: 13, 185, 192, 356, 360, 366, dead_or_set: 367
insn=656, live_throughout: 13, 185, 192, 356, 360, 366, dead_or_set: 364, 367
insn=650, live_throughout: 13, 185, 192, 356, 360, 364, 366, dead_or_set: 360
insn=657, live_throughout: 13, 185, 192, 356, 360, 366, dead_or_set: 364
insn=651, live_throughout: 13, 185, 192, 364, 366, dead_or_set: 356, 360, 361
insn=659, live_throughout: 13, 185, 192, 361, 364, dead_or_set: 364, 366
insn=662, live_throughout: 13, 185, 361, 364, dead_or_set: 2, 192
insn=661, live_throughout: 2, 13, 185, dead_or_set: 0, 1, 361, 364
insn=663, live_throughout: 13, 185, dead_or_set: 0, 1, 2, 14
insn=900, live_throughout: 13, 14, 185, dead_or_set: 
insn=666, live_throughout: 13, 192, 195, dead_or_set: 
insn=674, live_throughout: 13, 192, dead_or_set: 3, 195
insn=671, live_throughout: 3, 13, 192, dead_or_set: 0
insn=672, live_throughout: 0, 3, 13, 192, dead_or_set: 1
insn=673, live_throughout: 0, 1, 3, 13, 192, dead_or_set: 2
insn=675, live_throughout: 13, 192, dead_or_set: 0, 1, 2, 3, 14
insn=676, live_throughout: 13, 192, dead_or_set: 0, 185
insn=902, live_throughout: 13, 185, 192, dead_or_set: 
insn=679, live_throughout: 13, 192, dead_or_set: 
insn=683, live_throughout: 13, 192, dead_or_set: 
insn=684, live_throughout: 13, 192, dead_or_set: 375
insn=685, live_throughout: 13, 192, dead_or_set: 375
insn=686, live_throughout: 13, 192, dead_or_set: 185
insn=904, live_throughout: 13, 185, 192, dead_or_set: 
insn=689, live_throughout: 13, 192, 271, dead_or_set: 
insn=691, live_throughout: 13, 192, dead_or_set: 185, 271
insn=692, live_throughout: 13, 185, 192, dead_or_set: 
insn=694, live_throughout: 13, 185, 192, dead_or_set: 377
insn=696, live_throughout: 13, 185, 192, dead_or_set: 377
insn=697, live_throughout: 13, 185, 192, dead_or_set: 378
insn=698, live_throughout: 13, 185, 192, dead_or_set: 378
insn=906, live_throughout: 13, 185, 192, dead_or_set: 
insn=701, live_throughout: 13, 192, 269, dead_or_set: 
insn=703, live_throughout: 13, 192, 269, dead_or_set: 379
insn=867, live_throughout: 13, 192, 269, 379, dead_or_set: 383
insn=868, live_throughout: 13, 192, 269, 379, dead_or_set: 388
insn=869, live_throughout: 13, 192, 269, 379, dead_or_set: 393
insn=727, live_throughout: 13, 269, 379, dead_or_set: 2, 192
insn=729, live_throughout: 2, 13, 269, 379, dead_or_set: 185
insn=720, live_throughout: 2, 13, 185, 269, 379, dead_or_set: 396
insn=705, live_throughout: 2, 13, 185, 269, 379, 396, dead_or_set: 381
insn=711, live_throughout: 2, 13, 185, 269, 379, 381, 396, dead_or_set: 386
insn=718, live_throughout: 2, 13, 185, 269, 381, 386, 396, dead_or_set: 379, 395
insn=721, live_throughout: 2, 13, 185, 269, 381, 386, 395, dead_or_set: 393, 396
insn=707, live_throughout: 2, 13, 185, 269, 386, 393, 395, dead_or_set: 381, 383
insn=713, live_throughout: 2, 13, 185, 269, 383, 393, 395, dead_or_set: 386, 388
insn=708, live_throughout: 2, 13, 185, 269, 383, 388, 393, 395, dead_or_set: 383
insn=714, live_throughout: 2, 13, 185, 383, 388, 393, 395, dead_or_set: 269, 388
insn=722, live_throughout: 2, 13, 185, 383, 388, 395, dead_or_set: 393
insn=715, live_throughout: 2, 13, 185, 393, 395, dead_or_set: 383, 388, 389
insn=724, live_throughout: 2, 13, 185, 389, 393, dead_or_set: 393, 395
insn=726, live_throughout: 2, 13, 185, dead_or_set: 0, 1, 389, 393
insn=728, live_throughout: 13, 185, dead_or_set: 0, 1, 2, 14
insn=730, live_throughout: 13, 14, 185, dead_or_set: 
insn=736, live_throughout: 13, 14, dead_or_set: 0, 185
insn=742, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 197: (insn_list:REG_DEP_TRUE 925 (nil))
init_insns for 212: (insn_list:REG_DEP_TRUE 924 (nil))
init_insns for 220: (insn_list:REG_DEP_TRUE 49 (nil))
init_insns for 222: (insn_list:REG_DEP_TRUE 923 (nil))
init_insns for 237: (insn_list:REG_DEP_TRUE 80 (nil))
init_insns for 245: (insn_list:REG_DEP_TRUE 94 (nil))
init_insns for 252: (insn_list:REG_DEP_TRUE 922 (nil))
init_insns for 255: (insn_list:REG_DEP_TRUE 122 (nil))
init_insns for 257: (insn_list:REG_DEP_TRUE 921 (nil))
init_insns for 258: (insn_list:REG_DEP_TRUE 148 (nil))
init_insns for 262: (insn_list:REG_DEP_TRUE 164 (nil))
init_insns for 265: (insn_list:REG_DEP_TRUE 178 (nil))
init_insns for 288: (insn_list:REG_DEP_TRUE 278 (nil))
init_insns for 291: (insn_list:REG_DEP_TRUE 297 (nil))
init_insns for 317: (insn_list:REG_DEP_TRUE 471 (nil))
init_insns for 319: (insn_list:REG_DEP_TRUE 920 (nil))
init_insns for 339: (insn_list:REG_DEP_TRUE 581 (nil))
init_insns for 347: (insn_list:REG_DEP_TRUE 614 (nil))
init_insns for 349: (insn_list:REG_DEP_TRUE 919 (nil))
init_insns for 366: (insn_list:REG_DEP_TRUE 653 (nil))
init_insns for 367: (insn_list:REG_DEP_TRUE 918 (nil))
init_insns for 375: (insn_list:REG_DEP_TRUE 684 (nil))
init_insns for 377: (insn_list:REG_DEP_TRUE 694 (nil))
init_insns for 378: (insn_list:REG_DEP_TRUE 697 (nil))
init_insns for 379: (insn_list:REG_DEP_TRUE 703 (nil))
init_insns for 444: (insn_list:REG_DEP_TRUE 591 (nil))
init_insns for 445: (insn_list:REG_DEP_TRUE 587 (nil))
init_insns for 446: (insn_list:REG_DEP_TRUE 438 (nil))
      Coalescing copy 1:a31r182-a38r161 (freq=1000)
      Coalescing spilled allocnos a66r157->a74r142
      Coalescing spilled allocnos a59r316->a74r142
      Coalescing spilled allocnos a43r337->a74r142
      Coalescing spilled allocnos a39r150->a64r311
      Coalescing spilled allocnos a42r151->a63r139
      Coalescing spilled allocnos a44r154->a64r311
      Coalescing spilled allocnos a73r164->a64r311
      Slot 1 (freq,size): a43r337(4000,8) a59r316(4000,8) a66r157(5000,8) a74r142(5000,8)
      Slot 2 (freq,size): a38r161(7000,8) a31r182(5000,8)
      Slot 3 (freq,size): a73r164(2000,8) a44r154(2000,8) a39r150(2000,8) a64r311(5000,8)
      Slot 4 (freq,size): a42r151(2000,8) a63r139(4000,8)
      Slot 5 (freq,size): a11r192(4000,4)
      Slot 6 (freq,size): a16r195(4000,4)
      Slot 7 (freq,size): a68r169(3000,8)
      Slot 8 (freq,size): a71r167(2000,8)
      Slot 9 (freq,size): a69r168(2000,8)
      Assigning 168(freq=2000) a new slot 8
      Assigning 167(freq=2000) a new slot 7
      Assigning 169(freq=3000) a new slot 6
      Assigning 195(freq=4000) a new slot 5
      Assigning 192(freq=4000) a new slot 4
      Assigning 139(freq=3000) a new slot 3
      Assigning 151(freq=2000) slot 3 of 139
      Assigning 150(freq=2000) a new slot 2
      Assigning 154(freq=2000) slot 2 of 150
      Assigning 164(freq=2000) slot 2 of 150 154
      Assigning 311(freq=4000) slot 2 of 150 154 164
      Assigning 161(freq=7000) a new slot 1
      Assigning 182(freq=4000) slot 1 of 161
      Assigning 142(freq=5000) a new slot 0
      Assigning 157(freq=6000) slot 0 of 142
      Assigning 316(freq=6000) slot 0 of 142 157
      Assigning 337(freq=6000) slot 0 of 142 157 316
changing reg in insn 562
changing reg in insn 583
changing reg in insn 862
changing reg in insn 560
changing reg in insn 562
changing reg in insn 561
changing reg in insn 532
changing reg in insn 857
changing reg in insn 409
changing reg in insn 411
changing reg in insn 410
changing reg in insn 933
changing reg in insn 856
changing reg in insn 337
changing reg in insn 926
changing reg in insn 481
changing reg in insn 346
changing reg in insn 347
changing reg in insn 472
changing reg in insn 472
changing reg in insn 557
changing reg in insn 552
changing reg in insn 582
changing reg in insn 528
changing reg in insn 532
changing reg in insn 855
changing reg in insn 927
changing reg in insn 321
changing reg in insn 322
changing reg in insn 934
changing reg in insn 914
changing reg in insn 432
changing reg in insn 928
changing reg in insn 432
changing reg in insn 935
changing reg in insn 913
changing reg in insn 432
changing reg in insn 929
changing reg in insn 432
changing reg in insn 943
changing reg in insn 481
changing reg in insn 472
changing reg in insn 316
changing reg in insn 939
changing reg in insn 612
changing reg in insn 486
changing reg in insn 484
changing reg in insn 612
changing reg in insn 486
changing reg in insn 458
changing reg in insn 478
changing reg in insn 936
changing reg in insn 361
changing reg in insn 930
changing reg in insn 381
changing reg in insn 385
changing reg in insn 477
changing reg in insn 377
changing reg in insn 381
changing reg in insn 103
changing reg in insn 108
changing reg in insn 139
changing reg in insn 111
changing reg in insn 123
changing reg in insn 123
changing reg in insn 61
changing reg in insn 101
changing reg in insn 67
changing reg in insn 165
changing reg in insn 91
changing reg in insn 91
changing reg in insn 195
changing reg in insn 854
changing reg in insn 95
changing reg in insn 75
changing reg in insn 179
changing reg in insn 98
changing reg in insn 95
changing reg in insn 76
changing reg in insn 74
changing reg in insn 179
changing reg in insn 95
changing reg in insn 22
changing reg in insn 46
changing reg in insn 46
changing reg in insn 853
changing reg in insn 50
changing reg in insn 30
changing reg in insn 53
changing reg in insn 50
changing reg in insn 31
changing reg in insn 29
changing reg in insn 50
changing reg in insn 944
changing reg in insn 915
changing reg in insn 583
changing reg in insn 940
changing reg in insn 583
changing reg in insn 837
changing reg in insn 839
changing reg in insn 142
changing reg in insn 117
changing reg in insn 251
changing reg in insn 247
changing reg in insn 230
changing reg in insn 217
changing reg in insn 224
changing reg in insn 841
changing reg in insn 843
changing reg in insn 198
changing reg in insn 173
changing reg in insn 260
changing reg in insn 243
changing reg in insn 234
changing reg in insn 226
changing reg in insn 226
changing reg in insn 221
changing reg in insn 221
changing reg in insn 691
changing reg in insn 686
changing reg in insn 729
changing reg in insn 676
changing reg in insn 638
changing reg in insn 625
changing reg in insn 237
changing reg in insn 736
changing reg in insn 282
changing reg in insn 296
changing reg in insn 283
changing reg in insn 283
changing reg in insn 276
changing reg in insn 299
changing reg in insn 56
changing reg in insn 58
changing reg in insn 58
changing reg in insn 12
changing reg in insn 14
changing reg in insn 14
changing reg in insn 5
changing reg in insn 54
changing reg in insn 14
changing reg in insn 925
changing reg in insn 14
changing reg in insn 924
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 58
changing reg in insn 923
changing reg in insn 58
changing reg in insn 80
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 922
changing reg in insn 108
changing reg in insn 123
changing reg in insn 122
changing reg in insn 123
changing reg in insn 921
changing reg in insn 838
changing reg in insn 148
changing reg in insn 838
changing reg in insn 164
changing reg in insn 165
changing reg in insn 179
changing reg in insn 178
changing reg in insn 179
changing reg in insn 221
changing reg in insn 714
changing reg in insn 708
changing reg in insn 224
changing reg in insn 226
changing reg in insn 226
changing reg in insn 226
changing reg in insn 691
changing reg in insn 268
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 275
changing reg in insn 270
changing reg in insn 271
changing reg in insn 273
changing reg in insn 275
changing reg in insn 275
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 937
changing reg in insn 279
changing reg in insn 942
changing reg in insn 931
changing reg in insn 281
changing reg in insn 283
changing reg in insn 296
changing reg in insn 297
changing reg in insn 299
changing reg in insn 350
changing reg in insn 377
changing reg in insn 357
changing reg in insn 352
changing reg in insn 381
changing reg in insn 357
changing reg in insn 858
changing reg in insn 413
changing reg in insn 412
changing reg in insn 414
changing reg in insn 860
changing reg in insn 454
changing reg in insn 458
changing reg in insn 455
changing reg in insn 471
changing reg in insn 472
changing reg in insn 486
changing reg in insn 920
changing reg in insn 486
changing reg in insn 499
changing reg in insn 528
changing reg in insn 506
changing reg in insn 501
changing reg in insn 532
changing reg in insn 506
changing reg in insn 581
changing reg in insn 915
changing reg in insn 587
changing reg in insn 580
changing reg in insn 582
changing reg in insn 583
changing reg in insn 582
changing reg in insn 609
changing reg in insn 604
changing reg in insn 613
changing reg in insn 611
changing reg in insn 612
changing reg in insn 612
changing reg in insn 613
changing reg in insn 613
changing reg in insn 614
changing reg in insn 919
changing reg in insn 619
changing reg in insn 642
changing reg in insn 644
changing reg in insn 864
changing reg in insn 644
changing reg in insn 651
changing reg in insn 645
changing reg in insn 647
changing reg in insn 649
changing reg in insn 865
changing reg in insn 649
changing reg in insn 650
changing reg in insn 651
changing reg in insn 651
changing reg in insn 661
changing reg in insn 866
changing reg in insn 661
changing reg in insn 657
changing reg in insn 659
changing reg in insn 656
changing reg in insn 653
changing reg in insn 657
changing reg in insn 659
changing reg in insn 918
changing reg in insn 656
changing reg in insn 684
changing reg in insn 685
changing reg in insn 694
changing reg in insn 697
changing reg in insn 698
changing reg in insn 703
changing reg in insn 720
changing reg in insn 718
changing reg in insn 711
changing reg in insn 705
changing reg in insn 705
changing reg in insn 707
changing reg in insn 867
changing reg in insn 708
changing reg in insn 707
changing reg in insn 715
changing reg in insn 711
changing reg in insn 713
changing reg in insn 868
changing reg in insn 713
changing reg in insn 714
changing reg in insn 715
changing reg in insn 715
changing reg in insn 726
changing reg in insn 869
changing reg in insn 726
changing reg in insn 722
changing reg in insn 724
changing reg in insn 721
changing reg in insn 718
changing reg in insn 722
changing reg in insn 724
changing reg in insn 720
changing reg in insn 721
changing reg in insn 938
changing reg in insn 323
changing reg in insn 932
changing reg in insn 459
changing reg in insn 325
changing reg in insn 15
changing reg in insn 27
changing reg in insn 29
changing reg in insn 26
changing reg in insn 25
changing reg in insn 30
changing reg in insn 26
changing reg in insn 31
changing reg in insn 59
changing reg in insn 72
changing reg in insn 74
changing reg in insn 71
changing reg in insn 70
changing reg in insn 75
changing reg in insn 71
changing reg in insn 76
changing reg in insn 370
changing reg in insn 385
changing reg in insn 377
changing reg in insn 510
changing reg in insn 532
changing reg in insn 536
changing reg in insn 521
changing reg in insn 536
changing reg in insn 528
changing reg in insn 845
changing reg in insn 429
changing reg in insn 848
changing reg in insn 580
changing reg in insn 591
changing reg in insn 592
changing reg in insn 939
changing reg in insn 592
changing reg in insn 943
changing reg in insn 592
changing reg in insn 592
changing reg in insn 940
changing reg in insn 588
changing reg in insn 944
changing reg in insn 588
changing reg in insn 941
changing reg in insn 588
changing reg in insn 588
changing reg in insn 942
changing reg in insn 588
changing reg in insn 926
changing reg in insn 439
changing reg in insn 933
changing reg in insn 439
changing reg in insn 439
changing reg in insn 927
changing reg in insn 440
changing reg in insn 928
changing reg in insn 440
changing reg in insn 934
changing reg in insn 440
changing reg in insn 929
changing reg in insn 440
changing reg in insn 935
changing reg in insn 440
changing reg in insn 930
changing reg in insn 936
changing reg in insn 931
changing reg in insn 937
changing reg in insn 932
changing reg in insn 938
deleting insn with uid = 916.
Spilling for insn 3.
Spilling for insn 6.
Spilling for insn 17.
Spilling for insn 23.
Spilling for insn 53.
Spilling for insn 68.
Spilling for insn 62.
Spilling for insn 98.
Spilling for insn 102.
Spilling for insn 114.
Using reg 14 for reload 0
Spilling for insn 838.
Spilling for insn 170.
Using reg 0 for reload 0
Spilling for insn 842.
Using reg 0 for reload 0
Spilling for insn 279.
Spilling for insn 283.
Spilling for insn 281.
Spilling for insn 277.
Spilling for insn 297.
Spilling for insn 300.
Spilling for insn 303.
Using reg 2 for reload 0
Spilling for insn 304.
Using reg 3 for reload 0
Spilling for insn 308.
Using reg 3 for reload 0
Spilling for insn 325.
Using reg 3 for reload 0
Spilling for insn 385.
Using reg 2 for reload 0
Spilling for insn 357.
Using reg 2 for reload 0
Spilling for insn 381.
Using reg 2 for reload 0
Spilling for insn 389.
Using reg 3 for reload 0
Spilling for insn 393.
Using reg 3 for reload 0
Spilling for insn 401.
Using reg 2 for reload 0
Spilling for insn 406.
Using reg 2 for reload 0
Spilling for insn 409.
Using reg 1 for reload 0
Spilling for insn 412.
Using reg 12 for reload 0
Spilling for insn 859.
Using reg 0 for reload 0
Spilling for insn 411.
Using reg 0 for reload 0
Spilling for insn 414.
Using reg 0 for reload 0
Spilling for insn 845.
Using reg 0 for reload 0
Spilling for insn 429.
Using reg 0 for reload 0
Using reg 2 for reload 1
Spilling for insn 433.
Using reg 3 for reload 0
Spilling for insn 431.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 434.
Using reg 3 for reload 0
Spilling for insn 432.
Using reg 0 for reload 0
Using reg 2 for reload 1
Spilling for insn 439.
Using reg 6 for reload 0
Spilling for insn 440.
Using reg 6 for reload 0
Spilling for insn 861.
Using reg 2 for reload 0
Spilling for insn 456.
Using reg 3 for reload 0
Spilling for insn 457.
Using reg 3 for reload 0
Spilling for insn 458.
Using reg 2 for reload 0
Spilling for insn 484.
Spilling for insn 536.
Using reg 8 for reload 0
Spilling for insn 506.
Using reg 8 for reload 0
Spilling for insn 532.
Using reg 8 for reload 0
Spilling for insn 863.
Using reg 0 for reload 0
Spilling for insn 563.
Using reg 12 for reload 0
Spilling for insn 562.
Spilling for insn 564.
Using reg 12 for reload 0
Spilling for insn 565.
Using reg 4 for reload 0
Using reg 10 for reload 1
Spilling for insn 580.
Using reg 4 for reload 0
Spilling for insn 583.
Using reg 4 for reload 0
Spilling for insn 588.
Using reg 4 for reload 0
Spilling for insn 607.
Using reg 1 for reload 0
Spilling for insn 614.
Spilling for insn 619.
Spilling for insn 651.
Spilling for insn 683.
Using reg 3 for reload 1
Spilling for insn 685.
Spilling for insn 696.
Spilling for insn 698.
Spilling for insn 715.
      Spill 140(a67), cost=70000
      Spill 158(a61), cost=60000
      Spill 159(a62), cost=60000
      Spill 308(a72), cost=40000: reassign to 2
changing reg in insn 858
changing reg in insn 412
changing reg in insn 413
      Spill 165(a76), cost=40000
      Spill 134(a32), cost=30000
      Spill 149(a37), cost=30000
      Spill 442(a70), cost=20000: reassign to 12
changing reg in insn 845
changing reg in insn 429
      Spill 456(a145), cost=20000
      Spilled regs 140 158 159 165 134 149 456
        Try assign 316(a59), cost=40000
        Try assign 158(a61), cost=60000
        Try assign 159(a62), cost=60000
        Try assign 445(a36), cost=20000
        Try assign 142(a74), cost=50000
        Try assign 337(a43), cost=40000
        Try assign 456(a145), cost=20000
        Try assign 150(a39), cost=20000
        Try assign 157(a66), cost=40000
        Try assign 168(a69), cost=20000
        Try assign 134(a32), cost=30000
        Try assign 149(a37), cost=30000
        Try assign 169(a68), cost=30000
        Try assign 140(a67), cost=70000
        Try assign 139(a63), cost=30000
        Try assign 154(a44), cost=20000: reassign to 10
changing reg in insn 506
        Try assign 446(a65), cost=20000
        Try assign 164(a73), cost=20000
        Try assign 311(a64), cost=40000
        Try assign 151(a42), cost=20000
        Try assign 167(a71), cost=20000
        Try assign 192(a11), cost=40000
        Try assign 195(a16), cost=40000
changing reg in insn 562
changing reg in insn 583
      Assigning 134(freq=3000) slot 6 of 169
 Register 134 now on stack.

changing reg in insn 857
changing reg in insn 410
changing reg in insn 409
      Assigning 140(freq=9000) a new slot 9
 Register 140 now on stack.

changing reg in insn 552
changing reg in insn 557
changing reg in insn 582
      Assigning 149(freq=3000) slot 7 of 167
 Register 149 now on stack.

 Register 154 now in 10.

changing reg in insn 432
changing reg in insn 914
changing reg in insn 934
changing reg in insn 432
changing reg in insn 928
      Assigning 158(freq=6000) slot 6 of 134 169
 Register 158 now on stack.

changing reg in insn 432
changing reg in insn 913
changing reg in insn 935
changing reg in insn 432
changing reg in insn 929
      Assigning 159(freq=6000) slot 7 of 149 167
 Register 159 now on stack.

changing reg in insn 377
changing reg in insn 381
      Assigning 165(freq=4000) slot 3 of 139 151
 Register 165 now on stack.

 Register 308 now in 2.

 Register 442 now in 12.

changing reg in insn 931
changing reg in insn 937
      Assigning 456(freq=2000) slot 2 of 150 154 164 311
 Register 456 now on stack.

Spilling for insn 3.
Spilling for insn 6.
Spilling for insn 17.
Spilling for insn 23.
Spilling for insn 53.
Spilling for insn 68.
Spilling for insn 62.
Spilling for insn 98.
Spilling for insn 102.
Spilling for insn 114.
Using reg 14 for reload 0
Spilling for insn 838.
Spilling for insn 170.
Using reg 0 for reload 0
Spilling for insn 842.
Using reg 0 for reload 0
Spilling for insn 279.
Spilling for insn 283.
Spilling for insn 281.
Spilling for insn 277.
Spilling for insn 297.
Spilling for insn 300.
Spilling for insn 303.
Using reg 2 for reload 0
Spilling for insn 304.
Using reg 3 for reload 0
Spilling for insn 308.
Using reg 3 for reload 0
Spilling for insn 325.
Using reg 3 for reload 0
Spilling for insn 377.
Using reg 2 for reload 0
Spilling for insn 385.
Using reg 2 for reload 0
Spilling for insn 357.
Using reg 2 for reload 0
Spilling for insn 381.
Using reg 2 for reload 0
Spilling for insn 389.
Using reg 3 for reload 0
Using reg 2 for reload 1
Spilling for insn 393.
Using reg 3 for reload 0
Using reg 2 for reload 1
Spilling for insn 401.
Using reg 2 for reload 0
Spilling for insn 406.
Using reg 2 for reload 0
Spilling for insn 857.
Using reg 2 for reload 0
Spilling for insn 409.
Using reg 3 for reload 1
Spilling for insn 412.
Using reg 1 for reload 0
Spilling for insn 410.
Using reg 1 for reload 0
Spilling for insn 859.
Using reg 0 for reload 0
Spilling for insn 411.
Using reg 0 for reload 0
Using reg 2 for reload 1
Spilling for insn 413.
Using reg 3 for reload 0
Spilling for insn 414.
Using reg 2 for reload 0
Spilling for insn 845.
Using reg 3 for reload 0
Using reg 2 for reload 1
Spilling for insn 429.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 433.
Using reg 3 for reload 0
Spilling for insn 431.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 913.
Using reg 2 for reload 0
Spilling for insn 434.
Using reg 3 for reload 1
Spilling for insn 914.
Using reg 2 for reload 1
Spilling for insn 432.
Using reg 2 for reload 0
Using reg 0 for reload 1
Using reg 10 for reload 2
Using reg 8 for reload 3
Spilling for insn 931.
Spilling for insn 439.
Using reg 6 for reload 0
Spilling for insn 440.
Using reg 6 for reload 0
Spilling for insn 934.
Spilling for insn 935.
Spilling for insn 861.
Using reg 2 for reload 0
Spilling for insn 454.
Using reg 3 for reload 0
Spilling for insn 456.
Using reg 3 for reload 1
Spilling for insn 457.
Using reg 3 for reload 0
Spilling for insn 458.
Using reg 2 for reload 0
Spilling for insn 484.
Spilling for insn 536.
Using reg 8 for reload 0
Spilling for insn 532.
Using reg 8 for reload 0
Spilling for insn 552.
Using reg 0 for reload 0
Spilling for insn 557.
Using reg 0 for reload 0
Spilling for insn 863.
Using reg 0 for reload 0
Spilling for insn 563.
Using reg 12 for reload 0
Spilling for insn 562.
Using reg 4 for reload 0
Spilling for insn 564.
Using reg 12 for reload 0
Spilling for insn 565.
Using reg 4 for reload 0
Using reg 10 for reload 1
Spilling for insn 848.
Using reg 14 for reload 0
Spilling for insn 580.
Using reg 4 for reload 0
Spilling for insn 582.
Using reg 4 for reload 0
Spilling for insn 583.
Using reg 4 for reload 0
Using reg 10 for reload 1
Spilling for insn 588.
Using reg 4 for reload 0
Spilling for insn 607.
Using reg 1 for reload 0
Spilling for insn 614.
Spilling for insn 619.
Spilling for insn 651.
Spilling for insn 683.
Using reg 3 for reload 1
Spilling for insn 685.
Spilling for insn 696.
Spilling for insn 698.
Spilling for insn 715.
      Spill 143(a54), cost=102000
      Spill 156(a75), cost=80000
      Spill 308(a72), cost=40000: reassign to 8
changing reg in insn 858
changing reg in insn 413
changing reg in insn 412
      Spill 444(a34), cost=20000
      Spilled regs 143 156 444
        Try assign 165(a76), cost=40000: reassign to 8
changing reg in insn 377
changing reg in insn 381
        Try assign 143(a54), cost=102000
        Try assign 156(a75), cost=80000
changing reg in insn 337
changing reg in insn 856
changing reg in insn 933
changing reg in insn 472
changing reg in insn 347
changing reg in insn 346
changing reg in insn 481
changing reg in insn 926
changing reg in insn 472
      Assigning 143(freq=12000) a new slot 10
 Register 143 now on stack.

changing reg in insn 855
changing reg in insn 322
changing reg in insn 321
changing reg in insn 927
      Assigning 156(freq=10000) a new slot 11
 Register 156 now on stack.

 Register 165 now in 8.

 Register 308 now in 8.

changing reg in insn 591
changing reg in insn 592
 Register 444 now on stack.

Spilling for insn 3.
Spilling for insn 6.
Spilling for insn 17.
Spilling for insn 23.
Spilling for insn 53.
Spilling for insn 68.
Spilling for insn 62.
Spilling for insn 98.
Spilling for insn 102.
Spilling for insn 114.
Using reg 14 for reload 0
Spilling for insn 838.
Spilling for insn 170.
Using reg 0 for reload 0
Spilling for insn 842.
Using reg 0 for reload 0
Spilling for insn 279.
Spilling for insn 283.
Spilling for insn 281.
Spilling for insn 277.
Spilling for insn 297.
Spilling for insn 300.
Spilling for insn 303.
Using reg 2 for reload 0
Spilling for insn 304.
Using reg 3 for reload 0
Spilling for insn 308.
Using reg 3 for reload 0
Spilling for insn 855.
Using reg 2 for reload 0
Spilling for insn 321.
Using reg 3 for reload 0
Spilling for insn 322.
Using reg 3 for reload 0
Spilling for insn 323.
Spilling for insn 325.
Using reg 3 for reload 0
Spilling for insn 337.
Using reg 2 for reload 0
Spilling for insn 856.
Using reg 2 for reload 0
Spilling for insn 342.
Spilling for insn 346.
Spilling for insn 347.
Using reg 3 for reload 1
Spilling for insn 370.
Spilling for insn 352.
Spilling for insn 361.
Spilling for insn 385.
Using reg 2 for reload 0
Spilling for insn 357.
Using reg 2 for reload 0
Spilling for insn 381.
Using reg 2 for reload 0
Spilling for insn 389.
Using reg 3 for reload 0
Spilling for insn 393.
Using reg 3 for reload 0
Spilling for insn 401.
Using reg 2 for reload 0
Spilling for insn 406.
Using reg 2 for reload 0
Spilling for insn 857.
Using reg 2 for reload 0
Spilling for insn 409.
Using reg 3 for reload 1
Spilling for insn 412.
Using reg 3 for reload 0
Spilling for insn 410.
Using reg 3 for reload 0
Spilling for insn 859.
Using reg 2 for reload 0
Spilling for insn 411.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 413.
Using reg 3 for reload 0
Spilling for insn 414.
Using reg 2 for reload 0
Spilling for insn 845.
Using reg 3 for reload 0
Using reg 2 for reload 1
Spilling for insn 429.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 433.
Using reg 3 for reload 0
Spilling for insn 431.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 913.
Using reg 2 for reload 0
Spilling for insn 434.
Using reg 3 for reload 1
Spilling for insn 914.
Using reg 2 for reload 1
Spilling for insn 432.
Using reg 2 for reload 0
Using reg 0 for reload 1
Using reg 8 for reload 2
Using reg 10 for reload 3
Spilling for insn 931.
Spilling for insn 439.
Using reg 6 for reload 0
Spilling for insn 440.
Using reg 6 for reload 0
Spilling for insn 933.
Spilling for insn 934.
Spilling for insn 935.
Spilling for insn 861.
Using reg 2 for reload 0
Spilling for insn 454.
Using reg 3 for reload 0
Spilling for insn 456.
Using reg 3 for reload 1
Spilling for insn 457.
Using reg 3 for reload 0
Spilling for insn 458.
Using reg 2 for reload 0
Spilling for insn 472.
Spilling for insn 481.
Using reg 0 for reload 0
Spilling for insn 484.
Spilling for insn 536.
Using reg 8 for reload 0
Spilling for insn 532.
Using reg 8 for reload 0
Spilling for insn 552.
Using reg 0 for reload 0
Spilling for insn 557.
Using reg 0 for reload 0
Spilling for insn 863.
Using reg 0 for reload 0
Spilling for insn 563.
Using reg 12 for reload 0
Spilling for insn 562.
Using reg 4 for reload 0
Spilling for insn 564.
Using reg 12 for reload 0
Spilling for insn 565.
Using reg 4 for reload 0
Using reg 10 for reload 1
Spilling for insn 848.
Using reg 14 for reload 0
Spilling for insn 580.
Using reg 4 for reload 0
Spilling for insn 582.
Using reg 4 for reload 0
Spilling for insn 583.
Using reg 4 for reload 0
Using reg 10 for reload 1
Spilling for insn 588.
Using reg 4 for reload 0
Spilling for insn 592.
Using reg 4 for reload 0
Spilling for insn 607.
Using reg 1 for reload 0
Spilling for insn 614.
Spilling for insn 619.
Spilling for insn 651.
Spilling for insn 683.
Using reg 3 for reload 1
Spilling for insn 685.
Spilling for insn 696.
Spilling for insn 698.
Spilling for insn 715.
deleting insn with uid = 591.
deleting insn with uid = 587.
deleting insn with uid = 438.

Reloads for insn # 3
Reload 0: reload_out (SI) = (reg/v:SI 192 [ dd ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 192 [ dd ])

Reloads for insn # 6
Reload 0: reload_out (SI) = (reg/v:SI 195 [ fpscr ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 195 [ fpscr ])

Reloads for insn # 17
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 114 [0x72])) [0 vdn.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 114 [0x72])) [0 vdn.sign+0 S2 A16])

Reloads for insn # 23
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdn.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdn.exponent+0 S2 A64])

Reloads for insn # 53
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 120 [0x78])) [0 vdn.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 120 [0x78])) [0 vdn.significand+0 S8 A64])

Reloads for insn # 68
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 96 [0x60])) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 96 [0x60])) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 62
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 98 [0x62])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 98 [0x62])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 98
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 104 [0x68])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 104 [0x68])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 102
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 130 [0x82])) [0 vdd.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 130 [0x82])) [0 vdd.sign+0 S2 A16])

Reloads for insn # 114
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 4 r4)

Reloads for insn # 838
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 170
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 5 r5)

Reloads for insn # 842
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 6 r6)

Reloads for insn # 279
Reload 0: reload_in (DI) = (reg:DI 0 r0 [orig:288 vdm.significand ] [288])
	reload_out (DI) = (reg:DI 6 r6 [289])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 0 r0 [orig:288 vdm.significand ] [288])
	reload_out_reg: (reg:DI 6 r6 [289])
	reload_reg_rtx: (reg:DI 6 r6 [289])

Reloads for insn # 283
Reload 0: reload_in (DI) = (reg:DI 2 r2 [orig:186 D.5084 ] [186])
	reload_out (DI) = (reg:DI 4 r4 [290])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 2 r2 [orig:186 D.5084 ] [186])
	reload_out_reg: (reg:DI 4 r4 [290])
	reload_reg_rtx: (reg:DI 4 r4 [290])

Reloads for insn # 281
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 104 [0x68])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 104 [0x68])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 277
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])

Reloads for insn # 297
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 120 [0x78])) [0 vdn.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 120 [0x78])) [0 vdn.significand+0 S8 A64])

Reloads for insn # 300
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])

Reloads for insn # 303
Reload 0: reload_out (DI) = (reg/v:DI 161 [ __n ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 161 [ __n ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 304
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 161 [ __n ]) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 161 [ __n ]) 4)
	reload_reg_rtx: (reg:SI 9 r9)

Reloads for insn # 308
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 161 [ __n ]) 0)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 161 [ __n ]) 0)
	reload_reg_rtx: (reg:SI 8 r8)

Reloads for insn # 855
Reload 0: reload_out (DI) = (reg/v:DI 156 [ mh ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 156 [ mh ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 321
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 156 [ mh ]) 0)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 156 [ mh ]) 0)
	reload_reg_rtx: (reg:SI 11 fp)

Reloads for insn # 322
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 156 [ mh ]) 4)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 156 [ mh ]) 4)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 323
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 156 [ mh ]) 0)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 156 [ mh ]) 0)
	reload_reg_rtx: (reg:SI 5 r5 [orig:411 D.5814+4 ] [411])

Reloads for insn # 325
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 161 [ __n ]) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 161 [ __n ]) 4)
	reload_reg_rtx: (reg:SI 14 lr)

Reloads for insn # 337
Reload 0: reload_out (DI) = (reg/v:DI 143 [ z.732 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 143 [ z.732 ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 856
Reload 0: reload_out (DI) = (reg/v:DI 143 [ z.732 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 143 [ z.732 ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 342
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 156 [ mh ]) 0)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 156 [ mh ]) 0)
	reload_reg_rtx: (reg/v:SI 4 r4 [ __base ])

Reloads for insn # 346
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 143 [ z.732 ]) 4)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 143 [ z.732 ]) 4)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 347
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 143 [ z.732 ]) 0)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 156 [ mh ]) 4)
	reload_out (SI) = (subreg:SI (reg/v:DI 143 [ z.732 ]) 0)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 156 [ mh ]) 4)
	reload_out_reg: (subreg:SI (reg/v:DI 143 [ z.732 ]) 0)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 370
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 143 [ z.732 ]) 4)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 143 [ z.732 ]) 4)
	reload_reg_rtx: (reg:SI 12 ip [432])

Reloads for insn # 352
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 143 [ z.732 ]) 0)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 143 [ z.732 ]) 0)
	reload_reg_rtx: (reg:SI 1 r1 [orig:295 z.732 ] [295])

Reloads for insn # 361
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 156 [ mh ]) 0)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 156 [ mh ]) 0)
	reload_reg_rtx: (reg/v:SI 4 r4 [orig:163 __left ] [163])

Reloads for insn # 385
Reload 0: reload_out (DI) = (reg/v:DI 167 [ rh ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 167 [ rh ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 357
Reload 0: reload_out (DI) = (reg/v:DI 164 [ rl ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 164 [ rl ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 381
Reload 0: reload_in (DI) = (reg/v:DI 8 r8 [orig:165 rmb ] [165])
	reload_out (DI) = (reg/v:DI 142 [ rma.733 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 8 r8 [orig:165 rmb ] [165])
	reload_out_reg: (reg/v:DI 142 [ rma.733 ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 389
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 142 [ rma.733 ]) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 142 [ rma.733 ]) 4)
	reload_reg_rtx: (reg:SI 11 fp)

Reloads for insn # 393
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 142 [ rma.733 ]) 0)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 142 [ rma.733 ]) 0)
	reload_reg_rtx: (reg:SI 10 sl)

Reloads for insn # 401
Reload 0: reload_out (DI) = (reg:DI 169 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 169 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 406
Reload 0: reload_out (DI) = (reg:DI 169 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 169 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 857
Reload 0: reload_out (DI) = (reg/v:DI 140 [ rma.735 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 140 [ rma.735 ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 409
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 140 [ rma.735 ]) 4)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 142 [ rma.733 ]) 0)
	reload_out (SI) = (subreg:SI (reg/v:DI 140 [ rma.735 ]) 4)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 142 [ rma.733 ]) 0)
	reload_out_reg: (subreg:SI (reg/v:DI 140 [ rma.735 ]) 4)
	reload_reg_rtx: (reg:SI 9 r9)

Reloads for insn # 412
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 142 [ rma.733 ]) 4)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 142 [ rma.733 ]) 4)
	reload_reg_rtx: (reg:SI 10 sl)

Reloads for insn # 410
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 140 [ rma.735 ]) 0)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 140 [ rma.735 ]) 0)
	reload_reg_rtx: (reg:SI 11 fp)

Reloads for insn # 859
Reload 0: reload_out (DI) = (reg/v:DI 157 [ ml ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 157 [ ml ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 411
Reload 0: reload_in (DI) = (reg/v:DI 164 [ rl ])
	reload_out (DI) = (reg/v:DI 139 [ rl.736 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 164 [ rl ])
	reload_out_reg: (reg/v:DI 139 [ rl.736 ])
	reload_reg_rtx: (reg:DI 2 r2)
Reload 1: reload_in (DI) = (reg/v:DI 140 [ rma.735 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:DI 140 [ rma.735 ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 413
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 140 [ rma.735 ]) 0)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 140 [ rma.735 ]) 0)
	reload_reg_rtx: (reg:SI 10 sl)

Reloads for insn # 414
Reload 0: reload_in (DI) = (reg/v:DI 167 [ rh ])
	reload_out (DI) = (reg:DI 168 [ D.5684 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 167 [ rh ])
	reload_out_reg: (reg:DI 168 [ D.5684 ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 845
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 140 [ rma.735 ]) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (subreg:SI (reg/v:DI 140 [ rma.735 ]) 4)
	reload_reg_rtx: (reg:SI 11 fp)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 139 [ rl.736 ]) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 3)
	reload_in_reg: (subreg:SI (reg/v:DI 139 [ rl.736 ]) 4)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 429
Reload 0: reload_out (DI) = (reg:DI 311)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 311)
	reload_reg_rtx: (reg:DI 2 r2)
Reload 1: reload_in (DI) = (reg:DI 168 [ D.5684 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:DI 168 [ D.5684 ])
	reload_reg_rtx: (reg:DI 0 r0)
deleting insn with uid = 979.
changing reg in insn 429

Reloads for insn # 433
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 157 [ ml ]) 4)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 157 [ ml ]) 4)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 431
Reload 0: reload_in (DI) = (reg:DI 311)
	reload_out (DI) = (reg:DI 311)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 311)
	reload_out_reg: (reg:DI 311)
	reload_reg_rtx: (reg:DI 8 r8)
Reload 1: reload_in (DI) = (reg:DI 169 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 169 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 913
Reload 0: reload_out (DI) = (reg/v:DI 159 [ reml ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 159 [ reml ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 434
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 157 [ ml ]) 0)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 140 [ rma.735 ]) 0)
	reload_out (SI) = (subreg:SI (reg/v:DI 157 [ ml ]) 0)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 140 [ rma.735 ]) 0)
	reload_out_reg: (subreg:SI (reg/v:DI 157 [ ml ]) 0)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 914
Reload 0: reload_out (DI) = (reg/v:DI 158 [ remh ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:DI 158 [ remh ])
Reload 1: reload_in (DI) = (reg/v:DI 161 [ __n ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/v:DI 161 [ __n ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 432
Reload 0: reload_in (DI) = (reg/v:DI 159 [ reml ])
	reload_out (DI) = (reg/v:DI 159 [ reml ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 159 [ reml ])
	reload_out_reg: (reg/v:DI 159 [ reml ])
	reload_reg_rtx: (reg:DI 10 sl)
Reload 1: reload_in (DI) = (reg/v:DI 158 [ remh ])
	reload_out (DI) = (reg/v:DI 158 [ remh ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg/v:DI 158 [ remh ])
	reload_out_reg: (reg/v:DI 158 [ remh ])
	reload_reg_rtx: (reg:DI 2 r2)
Reload 2: reload_in (DI) = (reg/v:DI 139 [ rl.736 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 4)
	reload_in_reg: (reg/v:DI 139 [ rl.736 ])
	reload_reg_rtx: (reg:DI 0 r0)
Reload 3: reload_in (DI) = (reg:DI 311)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 5)
	reload_in_reg: (reg:DI 311)
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 931
Reload 0: reload_out (DI) = (reg:DI 456 [289])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg:DI 456 [289])

Reloads for insn # 439
Reload 0: reload_in (DI) = (const_int -4294967296 [0xffffffff00000000])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 446)
	reload_reg_rtx: (reg:DI 6 r6)

Reloads for insn # 440
Reload 0: reload_in (DI) = (reg/v:DI 157 [ ml ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 4)
	reload_in_reg: (reg/v:DI 157 [ ml ])
	reload_reg_rtx: (reg:DI 6 r6)

Reloads for insn # 933
Reload 0: reload_out (DI) = (reg/v:DI 143 [ z.732 ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:DI 143 [ z.732 ])

Reloads for insn # 934
Reload 0: reload_out (DI) = (reg/v:DI 158 [ remh ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:DI 158 [ remh ])

Reloads for insn # 935
Reload 0: reload_out (DI) = (reg/v:DI 159 [ reml ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:DI 159 [ reml ])

Reloads for insn # 861
Reload 0: reload_out (DI) = (reg:DI 316 [ remh ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 316 [ remh ])
	reload_reg_rtx: (reg:DI 10 sl [314])

Reloads for insn # 454
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 159 [ reml ]) 4)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 159 [ reml ]) 4)
	reload_reg_rtx: (reg:SI 1 r1)
deleting insn with uid = 935.

Reloads for insn # 456
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 316 [ remh ]) 4)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 158 [ remh ]) 0)
	reload_out (SI) = (subreg:SI (reg:DI 316 [ remh ]) 4)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 158 [ remh ]) 0)
	reload_out_reg: (subreg:SI (reg:DI 316 [ remh ]) 4)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 457
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 316 [ remh ]) 0)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 316 [ remh ]) 0)
	reload_reg_rtx: (reg:SI 8 r8)

Reloads for insn # 458
Reload 0: reload_in (DI) = (reg:DI 316 [ remh ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 316 [ remh ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 472
Reload 0: reload_in (DI) = (reg/v:DI 143 [ z.732 ])
	reload_out (DI) = (reg/v:DI 2 r2 [orig:160 z ] [160])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 143 [ z.732 ])
	reload_out_reg: (reg/v:DI 2 r2 [orig:160 z ] [160])
	reload_reg_rtx: (reg/v:DI 2 r2 [orig:160 z ] [160])

Reloads for insn # 481
Reload 0: reload_in (DI) = (reg/v:DI 143 [ z.732 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:DI 143 [ z.732 ])
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 484
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])

Reloads for insn # 536
Reload 0: reload_out (DI) = (reg/v:DI 151 [ rh ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 151 [ rh ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 532
Reload 0: reload_in (DI) = (reg/v:DI 0 r0 [orig:153 rmb ] [153])
	reload_out (DI) = (reg/v:DI 4 r4 [orig:137 rma.739 ] [137])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 0 r0 [orig:153 rmb ] [153])
	reload_out_reg: (reg/v:DI 4 r4 [orig:137 rma.739 ] [137])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 552
Reload 0: reload_out (DI) = (reg:DI 149 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 149 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 557
Reload 0: reload_out (DI) = (reg:DI 149 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 149 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 863
Reload 0: reload_out (DI) = (reg:DI 337 [ rma.741 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 337 [ rma.741 ])
	reload_reg_rtx: (reg/v:DI 0 r0 [orig:135 rma.741 ] [135])

Reloads for insn # 563
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 337 [ rma.741 ]) 0)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 337 [ rma.741 ]) 0)
	reload_reg_rtx: (reg:SI 9 r9)

Reloads for insn # 562
Reload 0: reload_in (DI) = (reg/v:DI 10 sl [orig:154 rl ] [154])
	reload_out (DI) = (reg/v:DI 134 [ rl.742 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 10 sl [orig:154 rl ] [154])
	reload_out_reg: (reg/v:DI 134 [ rl.742 ])
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 564
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 337 [ rma.741 ]) 4)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 337 [ rma.741 ]) 4)
	reload_reg_rtx: (reg:SI 5 r5)

Reloads for insn # 565
Reload 0: reload_in (DI) = (reg:DI 337 [ rma.741 ])
	reload_out (DI) = (reg:DI 150 [ D.5828 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 337 [ rma.741 ])
	reload_out_reg: (reg:DI 150 [ D.5828 ])
	reload_reg_rtx: (reg:DI 10 sl)
Reload 1: reload_in (DI) = (reg/v:DI 151 [ rh ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:DI 151 [ rh ])
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 848
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 134 [ rl.742 ]) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 3)
	reload_in_reg: (subreg:SI (reg/v:DI 134 [ rl.742 ]) 4)
	reload_reg_rtx: (reg:SI 5 r5)

Reloads for insn # 580
Reload 0: reload_in (DI) = (reg:DI 150 [ D.5828 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:DI 150 [ D.5828 ])
	reload_reg_rtx: (reg:DI 10 sl)
deleting insn with uid = 1012.
changing reg in insn 580

Reloads for insn # 582
Reload 0: reload_in (DI) = (reg:DI 149 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 149 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 583
Reload 0: reload_in (DI) = (reg/v:DI 182 [ remh ])
	reload_out (DI) = (reg/v:DI 182 [ remh ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg/v:DI 182 [ remh ])
	reload_out_reg: (reg/v:DI 182 [ remh ])
	reload_reg_rtx: (reg:DI 4 r4)
Reload 1: reload_in (DI) = (reg/v:DI 134 [ rl.742 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 4)
	reload_in_reg: (reg/v:DI 134 [ rl.742 ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 588
Reload 0: reload_in (DI) = (const_int 0 [0x0])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 5), can't combine
	reload_in_reg: (reg:DI 445)
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 592
Reload 0: reload_in (DI) = (const_int -1 [0xffffffffffffffff])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 444)
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 607
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 11 fp)

Reloads for insn # 614
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])

Reloads for insn # 619
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 651
Reload 0: reload_in (DI) = (reg:DI 2 r2 [356])
	reload_out (DI) = (reg:DI 6 r6 [361])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 2 r2 [356])
	reload_out_reg: (reg:DI 6 r6 [361])
	reload_reg_rtx: (reg:DI 6 r6 [361])

Reloads for insn # 683
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])
Reload 1: reload_in (HI) = (const_int 0 [0x0])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (const_int 0 [0x0])
	reload_reg_rtx: (reg:HI 12 ip)

Reloads for insn # 685
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])

Reloads for insn # 696
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])

Reloads for insn # 698
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])

Reloads for insn # 715
Reload 0: reload_in (DI) = (reg:DI 8 r8 [383])
	reload_out (DI) = (reg:DI 10 sl [389])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 8 r8 [383])
	reload_out_reg: (reg:DI 10 sl [389])
	reload_reg_rtx: (reg:DI 10 sl [389])
deleting insn with uid = 12.
deleting insn with uid = 56.
deleting insn with uid = 323.
deleting insn with uid = 342.
deleting insn with uid = 346.
deleting insn with uid = 347.
deleting insn with uid = 370.
deleting insn with uid = 352.
deleting insn with uid = 361.
deleting insn with uid = 409.
deleting insn with uid = 434.
deleting insn with uid = 930.
deleting insn with uid = 932.
deleting insn with uid = 936.
deleting insn with uid = 938.
deleting insn with uid = 456.
deleting insn with uid = 477.
deleting insn with uid = 478.
deleting insn with uid = 915.
deleting insn with uid = 939.
deleting insn with uid = 940.
deleting insn with uid = 942.
deleting insn with uid = 943.
deleting insn with uid = 944.
deleting insn with uid = 691.
+++Overall after reload 1094000


try_optimize_cfg iteration 1

Edge 23->72 redirected to 73
Deleting block 72.
deleting insn with uid = 689.
deleting insn with uid = 690.
deleting block 72


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 256.
verify found no changes in insn with uid = 265.
verify found no changes in insn with uid = 624.
verify found no changes in insn with uid = 637.
verify found no changes in insn with uid = 663.
verify found no changes in insn with uid = 675.
verify found no changes in insn with uid = 728.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 75 n_edges 110 count 141 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 75 n_edges 110 count 150 (    2)


vfp_double_fdiv

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={59d,61u,3d} r1={64d,64u,3d} r2={48d,45u,6d} r3={49d,49u,6d} r4={32d,27u} r5={29d,33u} r6={14d,16u} r7={13d,17u} r8={22d,22u,1d} r9={23d,23u,1d} r10={22d,23u} r11={23d,24u} r12={25d,22u} r13={1d,207u,6d} r14={23d,16u,1d} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={71d,38u} r25={2d} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} 
;;    total ref usage 2224{1508d,687u,29e} in 404{395 regular + 9 call} insns.
(note 2 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 2 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 8 7 2 NOTE_INSN_DELETED)

(note 7 4 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 7 20 2 NOTE_INSN_DELETED)

(note 20 18 21 2 NOTE_INSN_DELETED)

(note 21 20 24 2 NOTE_INSN_DELETED)

(note 24 21 28 2 NOTE_INSN_DELETED)

(note 28 24 32 2 NOTE_INSN_DELETED)

(note 32 28 33 2 NOTE_INSN_DELETED)

(note 33 32 34 2 NOTE_INSN_DELETED)

(note 34 33 36 2 NOTE_INSN_DELETED)

(note 36 34 37 2 NOTE_INSN_DELETED)

(note 37 36 40 2 NOTE_INSN_DELETED)

(note 40 37 41 2 NOTE_INSN_DELETED)

(note 41 40 43 2 NOTE_INSN_DELETED)

(note 43 41 44 2 NOTE_INSN_DELETED)

(note 44 43 45 2 NOTE_INSN_DELETED)

(note 45 44 3 2 NOTE_INSN_DELETED)

(insn 3 45 10 2 arch/arm/vfp/vfpdouble.c:1006 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 %sfp+-80 S4 A32])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 10 3 5 2 arch/arm/vfp/vfpdouble.c:1011 (set (reg:SI 0 r0)
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (nil))

(insn 5 10 6 2 arch/arm/vfp/vfpdouble.c:1006 (set (reg/v:SI 4 r4 [orig:194 dm ] [194])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 6 5 11 2 arch/arm/vfp/vfpdouble.c:1006 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 %sfp+-76 S4 A32])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 11 6 22 2 arch/arm/vfp/vfpdouble.c:1011 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 22 11 27 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 14 lr [orig:179 D.5579 ] [179])
        (zero_extract:SI (reg:SI 1 r1 [ D.5044+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 27 22 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 5 r5 [424])
        (ashift:SI (reg:SI 0 r0 [orig:190 D.5044 ] [190])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 27 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 12 ip [orig:425+4 ] [425])
        (ashift:SI (reg:SI 1 r1 [ D.5044+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 26 25 853 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 12 ip [orig:425+4 ] [425])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:190 D.5044 ] [190])
                (const_int 20 [0x14]))
            (reg:SI 12 ip [orig:425+4 ] [425]))) 270 {*arith_shiftsi} (nil))

(insn 853 26 925 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:180 significand ] [180])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 925 853 14 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [197])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 14 925 924 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 6 r6 [196])
        (and:DI (reg:DI 0 r0 [orig:190 D.5044 ] [190])
            (reg:DI 8 r8 [197]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:190 D.5044 ] [190])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 924 14 46 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [212])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 46 924 29 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 14 lr [orig:179 D.5579 ] [179])
                    (reg:SI 1 r1 [212]))
                (ne:SI (reg:SI 14 lr [orig:179 D.5579 ] [179])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 29 46 30 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:180 significand ] [180])
        (lshiftrt:SI (reg:SI 5 r5 [424])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 30 29 15 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:180 significand ] [180])
        (ior:SI (ashift:SI (reg:SI 12 ip [orig:425+4 ] [425])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:180 significand ] [180]))) 270 {*arith_shiftsi} (nil))

(insn 15 30 17 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [420])
        (lshiftrt:SI (reg:SI 7 r7 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 17 15 31 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 114 [0x72])) [0 vdn.sign+0 S2 A16])
        (reg:HI 1 r1 [420])) 176 {*movhi_insn_arch4} (nil))

(insn 31 17 23 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 12 ip [orig:425+4 ] [425])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 23 31 47 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 vdn.exponent+0 S2 A64])
        (reg:HI 14 lr [orig:179 D.5579 ] [179])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 47 23 48 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 48 47 49 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [220])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 50 49 51 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:180 significand ] [180])
        (ior:DI (reg/v:DI 2 r2 [orig:180 significand ] [180])
            (reg:DI 0 r0 [220]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:180 significand ] [180])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 51 50 52 4 157 "" [1 uses])

(note 52 51 63 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 63 52 65 4 NOTE_INSN_DELETED)

(note 65 63 66 4 NOTE_INSN_DELETED)

(note 66 65 69 4 NOTE_INSN_DELETED)

(note 69 66 73 4 NOTE_INSN_DELETED)

(note 73 69 77 4 NOTE_INSN_DELETED)

(note 77 73 78 4 NOTE_INSN_DELETED)

(note 78 77 79 4 NOTE_INSN_DELETED)

(note 79 78 81 4 NOTE_INSN_DELETED)

(note 81 79 82 4 NOTE_INSN_DELETED)

(note 82 81 85 4 NOTE_INSN_DELETED)

(note 85 82 86 4 NOTE_INSN_DELETED)

(note 86 85 88 4 NOTE_INSN_DELETED)

(note 88 86 89 4 NOTE_INSN_DELETED)

(note 89 88 90 4 NOTE_INSN_DELETED)

(note 90 89 54 4 NOTE_INSN_DELETED)

(insn 54 90 53 4 arch/arm/vfp/vfpdouble.c:1012 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:194 dm ] [194])) 167 {*arm_movsi_insn} (nil))

(insn 53 54 55 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 120 [0x78])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:180 significand ] [180])) 163 {*arm_movdi} (nil))

(call_insn 55 53 67 4 arch/arm/vfp/vfpdouble.c:1012 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 67 55 923 4 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:177 D.5594 ] [177])
        (zero_extract:SI (reg:SI 1 r1 [ D.5047+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 923 67 58 4 arch/arm/vfp/vfp.h:304 (set (reg:DI 2 r2 [222])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 58 923 72 4 arch/arm/vfp/vfp.h:304 (set (reg:DI 6 r6 [221])
        (and:DI (reg:DI 0 r0 [orig:189 D.5047 ] [189])
            (reg:DI 2 r2 [222]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:189 D.5047 ] [189])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 72 58 70 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 4 r4 [430])
        (ashift:SI (reg:SI 0 r0 [orig:189 D.5047 ] [189])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 70 72 854 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:431+4 ] [431])
        (ashift:SI (reg:SI 1 r1 [ D.5047+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 854 70 71 4 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:178 significand ] [178])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 71 854 80 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:431+4 ] [431])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:189 D.5047 ] [189])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:431+4 ] [431]))) 270 {*arith_shiftsi} (nil))

(insn 80 71 91 4 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [237])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 91 80 59 4 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:177 D.5594 ] [177])
                    (reg:SI 1 r1 [237]))
                (ne:SI (reg:SI 12 ip [orig:177 D.5594 ] [177])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 59 91 74 4 arch/arm/vfp/vfp.h:304 (set (reg:SI 0 r0 [426])
        (lshiftrt:SI (reg:SI 7 r7 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 74 59 68 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:178 significand ] [178])
        (lshiftrt:SI (reg:SI 4 r4 [430])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 68 74 75 4 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 96 [0x60])) [0 vdm.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:177 D.5594 ] [177])) 176 {*movhi_insn_arch4} (nil))

(insn 75 68 61 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:178 significand ] [178])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:431+4 ] [431])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:178 significand ] [178]))) 270 {*arith_shiftsi} (nil))

(insn 61 75 76 4 arch/arm/vfp/vfp.h:304 (set (reg:SI 0 r0 [orig:176 D.5597 ] [176])
        (zero_extend:SI (reg:HI 0 r0 [426]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 76 61 62 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:431+4 ] [431])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 62 76 92 4 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 98 [0x62])) [0 vdm.sign+0 S2 A16])
        (reg:HI 0 r0 [orig:176 D.5597 ] [176])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 92 62 93 4 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 96)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 93 92 94 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 5 arch/arm/vfp/vfp.h:310 (set (reg:DI 4 r4 [245])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 95 94 96 5 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:178 significand ] [178])
        (ior:DI (reg/v:DI 2 r2 [orig:178 significand ] [178])
            (reg:DI 4 r4 [245]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:178 significand ] [178])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 14 [lr] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 96 95 97 6 158 "" [1 uses])

(note 97 96 104 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 104 97 105 6 NOTE_INSN_DELETED)

(note 105 104 106 6 NOTE_INSN_DELETED)

(note 106 105 103 6 NOTE_INSN_DELETED)

(insn 103 106 99 6 arch/arm/vfp/vfp.h:330 (set (reg:SI 1 r1 [orig:174 D.5606 ] [174])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 112 [0x70])) [0 vdn.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 99 103 922 6 arch/arm/vfp/vfpdouble.c:1014 (set (reg:SI 14 lr [orig:247 vdn.sign ] [247])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 114 [0x72])) [0 vdn.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 922 99 108 6 arch/arm/vfp/vfp.h:330 (set (reg:SI 4 r4 [252])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 108 922 98 6 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:174 D.5606 ] [174])
            (reg:SI 4 r4 [252]))) 219 {*arm_cmpsi_insn} (nil))

(insn 98 108 101 6 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 104 [0x68])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:178 significand ] [178])) 163 {*arm_movdi} (nil))

(insn 101 98 102 6 arch/arm/vfp/vfpdouble.c:1014 (set (reg:SI 0 r0 [248])
        (xor:SI (reg:SI 0 r0 [orig:176 D.5597 ] [176])
            (reg:SI 14 lr [orig:247 vdn.sign ] [247]))) 96 {*arm_xorsi3} (nil))

(insn 102 101 109 6 arch/arm/vfp/vfpdouble.c:1014 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 130 [0x82])) [0 vdd.sign+0 S2 A16])
        (reg:HI 0 r0 [248])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 109 102 110 6 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 137)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 6 -> ( 7 10)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  7 [28.0%]  (fallthru)
;; Succ edge  10 [72.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 4 [r4]

;; Pred edge  6 [28.0%]  (fallthru)
(note 110 109 112 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 112 110 113 7 NOTE_INSN_DELETED)

(note 113 112 111 7 NOTE_INSN_DELETED)

(insn 111 113 114 7 arch/arm/vfp/vfp.h:331 (set (reg:DI 0 r0 [orig:175 D.5605 ] [175])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 120 [0x78])) [0 vdn.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 114 111 115 7 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 0 r0 [orig:175 D.5605 ] [175])
                        (reg:SI 1 r1 [ D.5605+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 4 r4))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 115 114 116 7 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 116 115 117 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 117 116 870 8 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 1 r1 [orig:183 tn ] [183])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 870 117 871 8 (set (pc)
        (label_ref 159)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 13)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 871 870 120)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  7 [50.0%] 
(code_label 120 871 121 9 160 "" [1 uses])

(note 121 120 124 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 124 121 125 9 NOTE_INSN_DELETED)

(note 125 124 836 9 NOTE_INSN_DELETED)

(note 836 125 122 9 NOTE_INSN_DELETED)

(insn 122 836 123 9 arch/arm/vfp/vfp.h:333 (set (reg:DI 6 r6 [255])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 123 122 837 9 arch/arm/vfp/vfp.h:333 (set (reg:DI 4 r4 [254])
        (and:DI (reg:DI 0 r0 [orig:175 D.5605 ] [175])
            (reg:DI 6 r6 [255]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:175 D.5605 ] [175])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 837 123 872 9 arch/arm/vfp/vfp.h:336 (parallel [
            (set (reg/v:SI 1 r1 [orig:183 tn ] [183])
                (if_then_else:SI (ne (reg:SI 5 r5 [+4 ])
                        (const_int 0 [0x0]))
                    (const_int 16 [0x10])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(jump_insn 872 837 873 9 (set (pc)
        (label_ref 159)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 13)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 873 872 137)

;; Start of basic block ( 6) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  6 [72.0%] 
(code_label 137 873 138 10 159 "" [1 uses])

(note 138 137 139 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 139 138 140 10 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:174 D.5606 ] [174])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 140 139 141 10 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 145)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  12 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  10 [50.0%]  (fallthru)
(note 141 140 142 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 142 141 874 11 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 1 r1 [orig:183 tn ] [183])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 874 142 875 11 (set (pc)
        (label_ref 159)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 875 874 145)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  10 [50.0%] 
(code_label 145 875 146 12 163 "" [1 uses])

(note 146 145 149 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 149 146 148 12 NOTE_INSN_DELETED)

(insn 148 149 921 12 arch/arm/vfp/vfp.h:338 (set (reg:SI 1 r1 [orig:258 vdn.significand+4 ] [258])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 vdn.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 vdn.significand+4 S4 A32])
        (nil)))

(insn 921 148 838 12 arch/arm/vfp/vfp.h:341 (set (reg:SI 0 r0 [orig:257 vdn.significand ] [257])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 120 [0x78])) [0 vdn.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 120 [0x78])) [0 vdn.significand+0 S4 A64])
        (nil)))

(insn 838 921 839 12 arch/arm/vfp/vfp.h:341 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 0 r0 [orig:257 vdn.significand ] [257])
                        (reg:SI 1 r1 [orig:258 vdn.significand+4 ] [258]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 839 838 159 12 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 1 r1 [orig:183 tn ] [183])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 9 8 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
;; Pred edge  8 [100.0%] 
;; Pred edge  11 [100.0%] 
(code_label 159 839 160 13 161 "" [3 uses])

(note 160 159 161 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 161 160 162 13 NOTE_INSN_DELETED)

(note 162 161 163 13 NOTE_INSN_DELETED)

(note 163 162 164 13 NOTE_INSN_DELETED)

(insn 164 163 165 13 arch/arm/vfp/vfp.h:330 (set (reg:SI 0 r0 [262])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 165 164 166 13 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:177 D.5594 ] [177])
            (reg:SI 0 r0 [262]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 166 165 167 13 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 193)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 13 -> ( 14 17)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  14 [28.0%]  (fallthru)
;; Succ edge  17 [72.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 5 [r5]

;; Pred edge  13 [28.0%]  (fallthru)
(note 167 166 168 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 168 167 169 14 NOTE_INSN_DELETED)

(note 169 168 170 14 NOTE_INSN_DELETED)

(insn 170 169 171 14 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:178 significand ] [178])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 5 r5))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 171 170 172 14 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 176)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  14 [50.0%]  (fallthru)
(note 172 171 173 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 173 172 876 15 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 5 r5 [orig:184 tm ] [184])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 876 173 877 15 (set (pc)
        (label_ref 214)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 20)
;; lr  out 	 1 [r1] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 5 [r5] 13 [sp]


;; Succ edge  20 [100.0%] 

(barrier 877 876 176)

;; Start of basic block ( 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  14 [50.0%] 
(code_label 176 877 177 16 166 "" [1 uses])

(note 177 176 180 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 180 177 181 16 NOTE_INSN_DELETED)

(note 181 180 840 16 NOTE_INSN_DELETED)

(note 840 181 178 16 NOTE_INSN_DELETED)

(insn 178 840 179 16 arch/arm/vfp/vfp.h:333 (set (reg:DI 6 r6 [265])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 179 178 841 16 arch/arm/vfp/vfp.h:333 (set (reg:DI 4 r4 [264])
        (and:DI (reg/v:DI 2 r2 [orig:178 significand ] [178])
            (reg:DI 6 r6 [265]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 2 r2 [orig:178 significand ] [178])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 841 179 878 16 arch/arm/vfp/vfp.h:336 (parallel [
            (set (reg/v:SI 5 r5 [orig:184 tm ] [184])
                (if_then_else:SI (ne (reg:SI 5 r5 [+4 ])
                        (const_int 0 [0x0]))
                    (const_int 16 [0x10])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(jump_insn 878 841 879 16 (set (pc)
        (label_ref 214)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 20)
;; lr  out 	 1 [r1] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 5 [r5] 13 [sp]


;; Succ edge  20 [100.0%] 

(barrier 879 878 193)

;; Start of basic block ( 13) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  13 [72.0%] 
(code_label 193 879 194 17 165 "" [1 uses])

(note 194 193 195 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 195 194 196 17 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:177 D.5594 ] [177])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 196 195 197 17 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 201)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 17 -> ( 19 18)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]


;; Succ edge  19 [50.0%] 
;; Succ edge  18 [50.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 1 [r1] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  17 [50.0%]  (fallthru)
(note 197 196 198 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 198 197 880 18 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 5 r5 [orig:184 tm ] [184])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 880 198 881 18 (set (pc)
        (label_ref 214)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 20)
;; lr  out 	 1 [r1] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 5 [r5] 13 [sp]


;; Succ edge  20 [100.0%] 

(barrier 881 880 201)

;; Start of basic block ( 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	 6 [r6]

;; Pred edge  17 [50.0%] 
(code_label 201 881 202 19 169 "" [1 uses])

(note 202 201 203 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 203 202 204 19 NOTE_INSN_DELETED)

(note 204 203 842 19 NOTE_INSN_DELETED)

(insn 842 204 843 19 arch/arm/vfp/vfp.h:341 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:178 significand ] [178])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 6 r6))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 843 842 214 19 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 5 r5 [orig:184 tm ] [184])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))
;; End of basic block 19 -> ( 20)
;; lr  out 	 1 [r1] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 5 [r5] 13 [sp]


;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 19 16 15 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru)
;; Pred edge  16 [100.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  18 [100.0%] 
(code_label 214 843 215 20 167 "" [3 uses])

(note 215 214 216 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 216 215 217 20 NOTE_INSN_DELETED)

(insn 217 216 218 20 arch/arm/vfp/vfpdouble.c:1022 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:183 tn ] [183])
                (const_int 1 [0x1])
                (const_int 4 [0x4]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 218 217 219 20 arch/arm/vfp/vfpdouble.c:1022 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 628)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 20 -> ( 68 21)
;; lr  out 	 1 [r1] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 5 [r5] 13 [sp]


;; Succ edge  68 [29.0%] 
;; Succ edge  21 [71.0%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 5 [r5] 13 [sp]
;; live  gen 	 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  20 [71.0%]  (fallthru)
(note 219 218 220 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 220 219 221 21 NOTE_INSN_DELETED)

(insn 221 220 222 21 arch/arm/vfp/vfpdouble.c:1028 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 5 r5 [orig:184 tm ] [184])
                        (const_int 16 [0x10]))
                    (const_int 0 [0x0])))
            (set (reg:SI 12 ip [269])
                (and:SI (reg/v:SI 5 r5 [orig:184 tm ] [184])
                    (const_int 16 [0x10])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 222 221 223 21 arch/arm/vfp/vfpdouble.c:1028 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 666)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 21 -> ( 70 22)
;; lr  out 	 1 [r1] 5 [r5] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 5 [r5] 12 [ip] 13 [sp]


;; Succ edge  70 [29.0%] 
;; Succ edge  22 [71.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 5 [r5] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 1 [r1] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  21 [71.0%]  (fallthru)
(note 223 222 225 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 225 223 224 22 NOTE_INSN_DELETED)

(insn 224 225 226 22 arch/arm/vfp/vfpdouble.c:1035 (set (reg:SI 4 r4 [270])
        (and:SI (reg/v:SI 1 r1 [orig:183 tn ] [183])
            (const_int 10 [0xa]))) 67 {*arm_andsi3_insn} (nil))

(insn 226 224 227 22 arch/arm/vfp/vfpdouble.c:1035 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 4 r4 [270])
                        (reg/v:SI 5 r5 [orig:184 tm ] [184]))
                    (const_int 0 [0x0])))
            (set (reg:SI 4 r4 [271])
                (and:SI (reg:SI 4 r4 [270])
                    (reg/v:SI 5 r5 [orig:184 tm ] [184])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 227 226 228 22 arch/arm/vfp/vfpdouble.c:1035 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 701)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 22 -> ( 74 23)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 12 [ip] 13 [sp]


;; Succ edge  74 [29.0%] 
;; Succ edge  23 [71.0%]  (fallthru)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  22 [71.0%]  (fallthru)
(note 228 227 229 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 229 228 230 23 NOTE_INSN_DELETED)

(insn 230 229 231 23 arch/arm/vfp/vfpdouble.c:1041 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:183 tn ] [183])
                (const_int 1 [0x1])
                (const_int 3 [0x3]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 231 230 232 23 arch/arm/vfp/vfpdouble.c:1041 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 692)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 23 -> ( 73 24)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  73 [50.0%] 
;; Succ edge  24 [50.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  23 [50.0%]  (fallthru)
(note 232 231 233 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(note 233 232 234 24 NOTE_INSN_DELETED)

(insn 234 233 235 24 arch/arm/vfp/vfpdouble.c:1047 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 5 r5 [orig:184 tm ] [184])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 235 234 236 24 arch/arm/vfp/vfpdouble.c:1047 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 240)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 1 [r1] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 5 [r5] 13 [sp]


;; Succ edge  25 [50.0%]  (fallthru)
;; Succ edge  26 [50.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  24 [50.0%]  (fallthru)
(note 236 235 237 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 237 236 882 25 arch/arm/vfp/vfpdouble.c:1099 (set (reg/v:SI 4 r4 [orig:185 exceptions ] [185])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(jump_insn 882 237 883 25 (set (pc)
        (label_ref 692)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 73)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  73 [100.0%] 

(barrier 883 882 240)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  24 [50.0%] 
(code_label 240 883 241 26 175 "" [1 uses])

(note 241 240 242 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 242 241 243 26 NOTE_INSN_DELETED)

(insn 243 242 244 26 arch/arm/vfp/vfpdouble.c:1053 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 5 r5 [orig:184 tm ] [184])
                (const_int 1 [0x1])
                (const_int 3 [0x3]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 244 243 245 26 arch/arm/vfp/vfpdouble.c:1053 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 679)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 26 -> ( 71 27)
;; lr  out 	 1 [r1] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 5 [r5] 13 [sp]


;; Succ edge  71 [50.0%] 
;; Succ edge  27 [50.0%]  (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [50.0%]  (fallthru)
(note 245 244 246 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(note 246 245 247 27 NOTE_INSN_DELETED)

(insn 247 246 248 27 arch/arm/vfp/vfpdouble.c:1053 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:183 tn ] [183])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 248 247 249 27 arch/arm/vfp/vfpdouble.c:1053 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 679)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 27 -> ( 71 28)
;; lr  out 	 1 [r1] 5 [r5] 13 [sp]
;; live  out 	 1 [r1] 5 [r5] 13 [sp]


;; Succ edge  71 [50.0%] 
;; Succ edge  28 [50.0%]  (fallthru)

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 5 [r5] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  27 [50.0%]  (fallthru)
(note 249 248 250 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 250 249 251 28 NOTE_INSN_DELETED)

(insn 251 250 252 28 arch/arm/vfp/vfpdouble.c:1056 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 1 r1 [orig:183 tn ] [183])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 252 251 253 28 arch/arm/vfp/vfpdouble.c:1056 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 257)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  29 [29.0%]  (fallthru)
;; Succ edge  30 [71.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  28 [29.0%]  (fallthru)
(note 253 252 254 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 254 253 255 29 NOTE_INSN_DELETED)

(insn 255 254 256 29 arch/arm/vfp/vfpdouble.c:1057 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 112 [0x70]))) 4 {*arm_addsi3} (nil))

(call_insn 256 255 257 29 arch/arm/vfp/vfpdouble.c:1057 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 29 -> ( 30)
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  30 [100.0%]  (fallthru)

;; Start of basic block ( 28 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  28 [71.0%] 
;; Pred edge  29 [100.0%]  (fallthru)
(code_label 257 256 258 30 178 "" [1 uses])

(note 258 257 259 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(note 259 258 260 30 NOTE_INSN_DELETED)

(insn 260 259 261 30 arch/arm/vfp/vfpdouble.c:1058 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 5 r5 [orig:184 tm ] [184])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 261 260 262 30 arch/arm/vfp/vfpdouble.c:1058 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 266)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 30 -> ( 31 32)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  31 [29.0%]  (fallthru)
;; Succ edge  32 [71.0%] 

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  30 [29.0%]  (fallthru)
(note 262 261 263 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 263 262 264 31 NOTE_INSN_DELETED)

(insn 264 263 265 31 arch/arm/vfp/vfpdouble.c:1059 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 96 [0x60]))) 4 {*arm_addsi3} (nil))

(call_insn 265 264 266 31 arch/arm/vfp/vfpdouble.c:1059 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 31 -> ( 32)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  32 [100.0%]  (fallthru)

;; Start of basic block ( 30 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  30 [71.0%] 
;; Pred edge  31 [100.0%]  (fallthru)
(code_label 266 265 267 32 179 "" [1 uses])

(note 267 266 268 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 268 267 278 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 14 lr [orig:281 vdn.exponent ] [281])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 112 [0x70])) [0 vdn.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 278 268 282 32 arch/arm/vfp/vfpdouble.c:1065 (set (reg:DI 0 r0 [orig:288 vdm.significand ] [288])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 104 [0x68])) [0 vdm.significand+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 104 [0x68])) [0 vdm.significand+0 S8 A64])
        (nil)))

(insn 282 278 270 32 arch/arm/vfp/vfpdouble.c:1066 (set (reg:DI 2 r2 [orig:186 D.5084 ] [186])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 120 [0x78])) [0 vdn.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 270 282 273 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 14 lr [283])
        (plus:SI (reg:SI 14 lr [orig:281 vdn.exponent ] [281])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn 273 270 946 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 12 ip [orig:286 vdm.exponent ] [286])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 96 [0x60])) [0 vdm.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 946 273 279 32 arch/arm/vfp/vfpdouble.c:1065 (set (reg:DI 6 r6 [289])
        (reg:DI 0 r0 [orig:288 vdm.significand ] [288])) 163 {*arm_movdi} (nil))

(insn 279 946 271 32 arch/arm/vfp/vfpdouble.c:1065 (parallel [
            (set (reg:DI 6 r6 [289])
                (plus:DI (reg:DI 6 r6 [289])
                    (reg:DI 0 r0 [orig:288 vdm.significand ] [288])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 271 279 947 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 1 r1 [282])
        (plus:SI (reg:SI 14 lr [283])
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 14 lr [orig:281 vdn.exponent ] [281])
            (const_int 1022 [0x3fe]))
        (nil)))

(insn 947 271 283 32 arch/arm/vfp/vfpdouble.c:1066 (set (reg:DI 4 r4 [290])
        (reg:DI 2 r2 [orig:186 D.5084 ] [186])) 163 {*arm_movdi} (nil))

(insn 283 947 275 32 arch/arm/vfp/vfpdouble.c:1066 (parallel [
            (set (reg:DI 4 r4 [290])
                (plus:DI (reg:DI 4 r4 [290])
                    (reg:DI 2 r2 [orig:186 D.5084 ] [186])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 275 283 284 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 1 r1 [287])
        (minus:SI (reg:SI 1 r1 [282])
            (reg:SI 12 ip [orig:286 vdm.exponent ] [286]))) 28 {*arm_subsi3_insn} (nil))

(insn 284 275 281 32 arch/arm/vfp/vfpdouble.c:1066 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [+4 ])
            (reg:SI 5 r5 [+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(insn 281 284 276 32 arch/arm/vfp/vfpdouble.c:1065 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 104 [0x68])) [0 vdm.significand+0 S8 A64])
        (reg:DI 6 r6 [289])) 163 {*arm_movdi} (nil))

(insn 276 281 277 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 1 r1 [orig:188 D.5081 ] [188])
        (zero_extend:SI (reg:HI 1 r1 [287]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 277 276 285 32 arch/arm/vfp/vfpdouble.c:1064 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])
        (reg:HI 1 r1 [orig:188 D.5081 ] [188])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 285 277 744 32 arch/arm/vfp/vfpdouble.c:1066 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 301)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 32 -> ( 36 33)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]


;; Succ edge  36 [50.0%] 
;; Succ edge  33 [50.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  32 [50.0%]  (fallthru)
(note 744 285 287 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(jump_insn 287 744 745 33 arch/arm/vfp/vfpdouble.c:1066 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 803)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 33 -> ( 35 34)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  35 [71.0%] 
;; Succ edge  34 [29.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  33 [29.0%]  (fallthru)
(note 745 287 288 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 288 745 289 34 arch/arm/vfp/vfpdouble.c:1066 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [289])
            (reg:SI 4 r4 [290]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 289 288 803 34 arch/arm/vfp/vfpdouble.c:1066 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 301)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 34 -> ( 36 35)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  36 [50.0%] 
;; Succ edge  35 [50.0%]  (fallthru)

;; Start of basic block ( 34 33) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 5 [r5]
;; live  kill	 24 [cc]

;; Pred edge  34 [50.0%]  (fallthru)
;; Pred edge  33 [71.0%] 
(code_label 803 289 295 35 212 "" [1 uses])

(note 295 803 296 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 296 295 297 35 arch/arm/vfp/vfpdouble.c:1067 (parallel [
            (set (reg:DI 4 r4 [291])
                (lshiftrt:DI (reg:DI 2 r2 [orig:186 D.5084 ] [186])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (expr_list:REG_EQUIV (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])
        (nil)))

(insn 297 296 299 35 arch/arm/vfp/vfpdouble.c:1067 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 120 [0x78])) [0 vdn.significand+0 S8 A64])
        (reg:DI 4 r4 [291])) 163 {*arm_movdi} (nil))

(insn 299 297 300 35 arch/arm/vfp/vfpdouble.c:1068 (set (reg:SI 1 r1 [293])
        (plus:SI (reg:SI 1 r1 [orig:188 D.5081 ] [188])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 300 299 301 35 arch/arm/vfp/vfpdouble.c:1068 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])
        (reg:HI 1 r1 [293])) 176 {*movhi_insn_arch4} (nil))
;; End of basic block 35 -> ( 36)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  36 [100.0%]  (fallthru)

;; Start of basic block ( 35 32 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 8 [r8] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  35 [100.0%]  (fallthru)
;; Pred edge  32 [50.0%] 
;; Pred edge  34 [50.0%] 
(code_label 301 300 302 36 180 "" [2 uses])

(note 302 301 303 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 303 302 948 36 arch/arm/vfp/vfpdouble.c:1070 (set (reg:DI 8 r8)
        (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 120 [0x78])) [0 vdn.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 948 303 304 36 arch/arm/vfp/vfpdouble.c:1070 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-104 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 304 948 305 36 arch/arm/vfp/vfp.h:117 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [+4 ])
            (reg:SI 9 r9))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 305 304 749 36 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 319)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 36 -> ( 40 37)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  40 [50.0%] 
;; Succ edge  37 [50.0%]  (fallthru)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  36 [50.0%]  (fallthru)
(note 749 305 307 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(jump_insn 307 749 750 37 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 804)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 37 -> ( 39 38)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [71.0%] 
;; Succ edge  38 [29.0%]  (fallthru)

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  37 [29.0%]  (fallthru)
(note 750 307 308 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 308 750 309 38 arch/arm/vfp/vfp.h:117 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [289])
            (reg:SI 8 r8))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 309 308 804 38 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 319)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 38 -> ( 40 39)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  40 [50.0%] 
;; Succ edge  39 [50.0%]  (fallthru)

;; Start of basic block ( 38 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  38 [50.0%]  (fallthru)
;; Pred edge  37 [71.0%] 
(code_label 804 309 315 39 213 "" [1 uses])

(note 315 804 316 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 316 315 884 39 arch/arm/vfp/vfp.h:118 (set (reg/v:DI 2 r2 [orig:160 z ] [160])
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(jump_insn 884 316 885 39 (set (pc)
        (label_ref 482)) 242 {*arm_jump} (nil))
;; End of basic block 39 -> ( 54)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  54 [100.0%] 

(barrier 885 884 319)

;; Start of basic block ( 36 38) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 5 [r5] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 5 [r5] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	

;; Pred edge  36 [50.0%] 
;; Pred edge  38 [50.0%] 
(code_label 319 885 320 40 182 "" [2 uses])

(note 320 319 855 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 855 320 949 40 arch/arm/vfp/vfp.h:119 (set (reg:DI 10 sl)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 949 855 321 40 arch/arm/vfp/vfp.h:119 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-136 S8 A64])
        (reg:DI 10 sl)) 163 {*arm_movdi} (nil))

(insn 321 949 950 40 arch/arm/vfp/vfp.h:119 (set (reg:SI 11 fp)
        (reg:SI 7 r7 [+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 950 321 322 40 arch/arm/vfp/vfp.h:119 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-136 S4 A64])
        (reg:SI 11 fp)) 167 {*arm_movsi_insn} (nil))

(insn 322 950 951 40 arch/arm/vfp/vfp.h:119 (set (reg:SI 12 ip)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 951 322 952 40 arch/arm/vfp/vfp.h:119 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-132 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (nil))

(insn 952 951 953 40 arch/arm/vfp/vfp.h:120 (set (reg:SI 5 r5 [orig:411 D.5814+4 ] [411])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-136 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 953 952 325 40 arch/arm/vfp/vfp.h:120 (set (reg:SI 14 lr)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 %sfp+-100 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 325 953 326 40 arch/arm/vfp/vfp.h:120 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [orig:411 D.5814+4 ] [411])
            (reg:SI 14 lr))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 326 325 754 40 arch/arm/vfp/vfp.h:120 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 340)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 40 -> ( 42 41)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  42 [50.0%] 
;; Succ edge  41 [50.0%]  (fallthru)

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  40 [50.0%]  (fallthru)
(note 754 326 337 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 337 754 954 41 arch/arm/vfp/vfp.h:121 (set (reg:DI 0 r0)
        (const_int -4294967296 [0xffffffff00000000])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int -4294967296 [0xffffffff00000000])
        (nil)))

(insn 954 337 886 41 arch/arm/vfp/vfp.h:121 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-128 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(jump_insn 886 954 887 41 (set (pc)
        (label_ref 348)) 242 {*arm_jump} (nil))
;; End of basic block 41 -> ( 43)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  43 [100.0%] 

(barrier 887 886 340)

;; Start of basic block ( 40) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  40 [50.0%] 
(code_label 340 887 341 42 185 "" [1 uses])

(note 341 340 812 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(note 812 341 856 42 NOTE_INSN_DELETED)

(insn 856 812 955 42 arch/arm/vfp/vfp.h:125 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 955 856 956 42 arch/arm/vfp/vfp.h:125 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-128 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 956 955 343 42 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg/v:SI 4 r4 [ __base ])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-136 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 343 956 344 42 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg/v:DI 0 r0 [ __n ])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-104 S8 A64])) 163 {*arm_movdi} (nil))

(insn 344 343 957 42 arch/arm/vfp/vfp.h:124 discrim 1 (parallel [
            (set (reg/v:SI 1 r1 [ __rem ])
                (asm_operands:SI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 0 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779402))
            (set (reg/v:DI 2 r2 [ __res ])
                (asm_operands:DI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 1 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779402))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (nil))

(insn 957 344 958 42 arch/arm/vfp/vfp.h:125 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-124 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (nil))

(insn 958 957 959 42 arch/arm/vfp/vfp.h:125 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-132 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 959 958 348 42 arch/arm/vfp/vfp.h:125 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-128 S4 A64])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 42 -> ( 43)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  43 [100.0%]  (fallthru)

;; Start of basic block ( 42 41) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  42 [100.0%]  (fallthru)
;; Pred edge  41 [100.0%] 
(code_label 348 959 349 43 187 "" [1 uses])

(note 349 348 366 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(note 366 349 350 43 NOTE_INSN_DELETED)

(insn 350 366 960 43 arch/arm/vfp/vfp.h:80 (set (reg:SI 0 r0 [orig:294 D.5083 ] [294])
        (reg:SI 6 r6 [289])) 167 {*arm_movsi_insn} (nil))

(insn 960 350 961 43 arch/arm/vfp/vfp.h:86 (set (reg:SI 12 ip [432])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-124 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 961 960 962 43 arch/arm/vfp/vfp.h:80 (set (reg:SI 1 r1 [orig:295 z.732 ] [295])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-128 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 962 961 377 43 arch/arm/vfp/vfp.h:82 (set (reg/v:SI 4 r4 [orig:163 __left ] [163])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-136 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 377 962 385 43 arch/arm/vfp/vfp.h:86 (set (reg/v:DI 8 r8 [orig:165 rmb ] [165])
        (mult:DI (zero_extend:DI (reg:SI 12 ip [432]))
            (zero_extend:DI (reg:SI 0 r0 [orig:294 D.5083 ] [294])))) 51 {*umulsidi3_v6} (nil))

(insn 385 377 963 43 arch/arm/vfp/vfp.h:89 (set (reg:DI 10 sl)
        (mult:DI (zero_extend:DI (reg:SI 12 ip [432]))
            (zero_extend:DI (reg/v:SI 4 r4 [orig:163 __left ] [163])))) 51 {*umulsidi3_v6} (nil))

(insn 963 385 357 43 arch/arm/vfp/vfp.h:89 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-64 S8 A64])
        (reg:DI 10 sl)) 163 {*arm_movdi} (nil))

(insn 357 963 964 43 arch/arm/vfp/vfp.h:80 (set (reg:DI 2 r2)
        (mult:DI (zero_extend:DI (reg:SI 1 r1 [orig:295 z.732 ] [295]))
            (zero_extend:DI (reg:SI 0 r0 [orig:294 D.5083 ] [294])))) 51 {*umulsidi3_v6} (nil))

(insn 964 357 965 43 arch/arm/vfp/vfp.h:80 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-96 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 965 964 381 43 arch/arm/vfp/vfp.h:87 (set (reg:DI 10 sl)
        (reg/v:DI 8 r8 [orig:165 rmb ] [165])) 163 {*arm_movdi} (nil))

(insn 381 965 966 43 arch/arm/vfp/vfp.h:87 (set (reg:DI 10 sl)
        (plus:DI (mult:DI (zero_extend:DI (reg:SI 1 r1 [orig:295 z.732 ] [295]))
                (zero_extend:DI (reg/v:SI 4 r4 [orig:163 __left ] [163])))
            (reg:DI 10 sl))) 53 {*umulsidi3adddi_v6} (nil))

(insn 966 381 389 43 arch/arm/vfp/vfp.h:87 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S8 A64])
        (reg:DI 10 sl)) 163 {*arm_movdi} (nil))

(insn 389 966 390 43 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [ rmb+4 ])
            (reg:SI 11 fp))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 390 389 759 43 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 404)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 43 -> ( 47 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]


;; Succ edge  47 [50.0%] 
;; Succ edge  44 [50.0%]  (fallthru)

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  43 [50.0%]  (fallthru)
(note 759 390 392 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(jump_insn 392 759 760 44 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 806)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 44 -> ( 46 45)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  46 [71.0%] 
;; Succ edge  45 [29.0%]  (fallthru)

;; Start of basic block ( 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  44 [29.0%]  (fallthru)
(note 760 392 393 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 393 760 394 45 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:165 rmb ] [165])
            (reg:SI 10 sl))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 394 393 806 45 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 404)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 45 -> ( 47 46)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  47 [50.0%] 
;; Succ edge  46 [50.0%]  (fallthru)

;; Start of basic block ( 45 44) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  45 [50.0%]  (fallthru)
;; Pred edge  44 [71.0%] 
(code_label 806 394 400 46 215 "" [1 uses])

(note 400 806 401 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 401 400 967 46 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 0 r0)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 967 401 888 46 arch/arm/vfp/vfp.h:90 discrim 2 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-72 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(jump_insn 888 967 889 46 (set (pc)
        (label_ref 407)) 242 {*arm_jump} (nil))
;; End of basic block 46 -> ( 48)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  48 [100.0%] 

(barrier 889 888 404)

;; Start of basic block ( 43 45) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  43 [50.0%] 
;; Pred edge  45 [50.0%] 
(code_label 404 889 405 47 188 "" [2 uses])

(note 405 404 406 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 406 405 968 47 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 2 r2)
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4294967296 [0x100000000])
        (nil)))

(insn 968 406 407 47 arch/arm/vfp/vfp.h:90 discrim 1 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-72 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))
;; End of basic block 47 -> ( 48)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  48 [100.0%]  (fallthru)

;; Start of basic block ( 47 46) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  47 [100.0%]  (fallthru)
;; Pred edge  46 [100.0%] 
(code_label 407 968 408 48 190 "" [1 uses])

(note 408 407 844 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(note 844 408 846 48 NOTE_INSN_DELETED)

(note 846 844 857 48 NOTE_INSN_DELETED)

(insn 857 846 969 48 arch/arm/vfp/vfp.h:92 (set (reg:DI 8 r8)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 969 857 858 48 arch/arm/vfp/vfp.h:92 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 %sfp+-120 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 858 969 970 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 8 r8 [orig:308 rma.735 ] [308])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 970 858 971 48 arch/arm/vfp/vfp.h:92 (set (reg:SI 9 r9)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 971 970 972 48 arch/arm/vfp/vfp.h:92 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 %sfp+-116 S4 A32])
        (reg:SI 9 r9)) 167 {*arm_movsi_insn} (nil))

(insn 972 971 412 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 10 sl)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 %sfp+-108 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 412 972 410 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 8 r8 [orig:308 rma.735 ] [308])
        (reg:SI 10 sl)) 167 {*arm_movsi_insn} (nil))

(insn 410 412 973 48 arch/arm/vfp/vfp.h:92 (set (reg:SI 11 fp)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 973 410 859 48 arch/arm/vfp/vfp.h:92 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 %sfp+-120 S4 A64])
        (reg:SI 11 fp)) 167 {*arm_movsi_insn} (nil))

(insn 859 973 974 48 arch/arm/vfp/vfp.h:129 (set (reg:DI 0 r0)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 974 859 975 48 arch/arm/vfp/vfp.h:129 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 975 974 977 48 arch/arm/vfp/vfp.h:93 (set (reg:DI 2 r2)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-96 S8 A64])) 163 {*arm_movdi} (nil))

(insn 977 975 411 48 arch/arm/vfp/vfp.h:93 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 %sfp+-120 S8 A64])) 163 {*arm_movdi} (nil))

(insn 411 977 976 48 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg:DI 2 r2)
                (plus:DI (reg:DI 2 r2)
                    (reg:DI 10 sl)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 976 411 413 48 arch/arm/vfp/vfp.h:93 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 %sfp+-88 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 413 976 978 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 9 r9 [ rma.735+4 ])
        (reg:SI 10 sl)) 167 {*arm_movsi_insn} (nil))

(insn 978 413 414 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 0 r0)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-64 S8 A64])) 163 {*arm_movdi} (nil))

(insn 414 978 845 48 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (reg:DI 0 r0)
                    (reg:DI 8 r8 [orig:308 rma.735 ] [308])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 845 414 429 48 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:SI 12 ip [442])
                (gtu:SI (reg:SI 11 fp)
                    (reg:SI 3 r3)))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 429 845 980 48 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 2 r2)
                (plus:DI (zero_extend:DI (reg:SI 12 ip [442]))
                    (reg:DI 0 r0)))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (nil))

(insn 980 429 433 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-96 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 433 980 981 48 arch/arm/vfp/vfp.h:129 (set (reg:SI 3 r3)
        (reg:SI 6 r6 [289])) 167 {*arm_movsi_insn} (nil))

(insn 981 433 982 48 arch/arm/vfp/vfp.h:129 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 %sfp+-108 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 982 981 984 48 arch/arm/vfp/vfp.h:62 (set (reg:DI 8 r8)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-96 S8 A64])) 163 {*arm_movdi} (nil))

(insn 984 982 431 48 arch/arm/vfp/vfp.h:62 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-72 S8 A64])) 163 {*arm_movdi} (nil))

(insn 431 984 983 48 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 8 r8)
                (plus:DI (reg:DI 8 r8)
                    (reg:DI 10 sl)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 983 431 913 48 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-96 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 913 983 985 48 arch/arm/vfp/vfp.h:62 (set (reg:DI 0 r0)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 985 913 986 48 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-64 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 986 985 987 48 arch/arm/vfp/vfp.h:129 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 %sfp+-120 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 987 986 988 48 arch/arm/vfp/vfp.h:129 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S4 A64])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 988 987 914 48 arch/arm/vfp/vfp.h:62 (set (reg:DI 2 r2)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-104 S8 A64])) 163 {*arm_movdi} (nil))

(insn 914 988 438 48 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-72 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(note 438 914 989 48 NOTE_INSN_DELETED)

(insn 989 438 992 48 arch/arm/vfp/vfp.h:62 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-64 S8 A64])) 163 {*arm_movdi} (nil))

(insn 992 989 432 48 arch/arm/vfp/vfp.h:62 (set (reg:DI 0 r0)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 %sfp+-88 S8 A64])) 163 {*arm_movdi} (nil))

(insn 432 992 991 48 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 10 sl)
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 0 [
                        (reg:DI 10 sl)
                        (reg:DI 2 r2)
                        (reg:DI 0 r0)
                        (reg:DI 8 r8)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (set (reg:DI 2 r2)
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 1 [
                        (reg:DI 10 sl)
                        (reg:DI 2 r2)
                        (reg:DI 0 r0)
                        (reg:DI 8 r8)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 991 432 990 48 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-72 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 990 991 926 48 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-64 S8 A64])
        (reg:DI 10 sl)) 163 {*arm_movdi} (nil))

(insn 926 990 927 48 (set (reg/v:DI 8 r8 [orig:143 z.732 ] [143])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-128 S8 A64])) 163 {*arm_movdi} (nil))

(insn 927 926 928 48 (set (reg/v:DI 10 sl [orig:156 mh ] [156])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-136 S8 A64])) 163 {*arm_movdi} (nil))

(insn 928 927 929 48 (set (reg/v:DI 2 r2 [orig:158 remh ] [158])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-72 S8 A64])) 163 {*arm_movdi} (nil))

(insn 929 928 931 48 (set (reg/v:DI 0 r0 [orig:159 reml ] [159])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-64 S8 A64])) 163 {*arm_movdi} (nil))

(insn 931 929 890 48 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-96 S8 A64])
        (reg:DI 6 r6 [289])) 163 {*arm_movdi} (nil))

(jump_insn 890 931 891 48 (set (pc)
        (label_ref 441)) 242 {*arm_jump} (nil))
;; End of basic block 48 -> ( 50)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  50 [100.0%] 

(barrier 891 890 443)

;; Start of basic block ( 50) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9]
;; live  kill	 24 [cc]

;; Pred edge  50 [21.0%] 
(code_label 443 891 437 49 194 "" [1 uses])

(note 437 443 993 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 993 437 439 49 arch/arm/vfp/vfp.h:131 (set (reg:DI 6 r6)
        (const_int -4294967296 [0xffffffff00000000])) 163 {*arm_movdi} (nil))

(insn 439 993 994 49 arch/arm/vfp/vfp.h:131 (parallel [
            (set (reg/v:DI 8 r8 [orig:143 z.732 ] [143])
                (plus:DI (reg/v:DI 8 r8 [orig:143 z.732 ] [143])
                    (reg:DI 6 r6)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg/v:DI 8 r8 [orig:143 z.732 ] [143])
            (const_int -4294967296 [0xffffffff00000000]))
        (nil)))

(insn 994 439 440 49 arch/arm/vfp/vfp.h:49 (set (reg:DI 6 r6)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S8 A64])) 163 {*arm_movdi} (nil))

(insn 440 994 441 49 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 0 r0 [orig:159 reml ] [159])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 0 [
                        (reg/v:DI 0 r0 [orig:159 reml ] [159])
                        (reg/v:DI 2 r2 [orig:158 remh ] [158])
                        (reg:DI 6 r6)
                        (reg/v:DI 10 sl [orig:156 mh ] [156])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (set (reg/v:DI 2 r2 [orig:158 remh ] [158])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 1 [
                        (reg/v:DI 0 r0 [orig:159 reml ] [159])
                        (reg/v:DI 2 r2 [orig:158 remh ] [158])
                        (reg:DI 6 r6)
                        (reg/v:DI 10 sl [orig:156 mh ] [156])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 49 -> ( 50)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  50 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 49 48) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  49 [100.0%]  (fallthru,dfs_back)
;; Pred edge  48 [100.0%] 
(code_label 441 440 442 50 193 "" [1 uses])

(note 442 441 444 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 444 442 445 50 arch/arm/vfp/vfp.h:130 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ remh+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 445 444 770 50 arch/arm/vfp/vfp.h:130 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 443)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2100 [0x834])
        (nil)))
;; End of basic block 50 -> ( 49 51)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  49 [21.0%] 
;; Succ edge  51 [79.0%]  (fallthru,loop_exit)

;; Start of basic block ( 50) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	

;; Pred edge  50 [79.0%]  (fallthru,loop_exit)
(note 770 445 933 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 933 770 934 51 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-128 S8 A64])
        (reg/v:DI 8 r8 [orig:143 z.732 ] [143])) 163 {*arm_movdi} (nil))

(insn 934 933 937 51 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-72 S8 A64])
        (reg/v:DI 2 r2 [orig:158 remh ] [158])) 163 {*arm_movdi} (nil))

(insn 937 934 860 51 (set (reg:DI 6 r6 [289])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-96 S8 A64])) 163 {*arm_movdi} (nil))

(insn 860 937 861 51 arch/arm/vfp/vfp.h:134 (set (reg:DI 10 sl [314])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 861 860 995 51 arch/arm/vfp/vfp.h:134 (set (reg:DI 10 sl [314])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 995 861 454 51 arch/arm/vfp/vfp.h:134 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S8 A64])
        (reg:DI 10 sl [314])) 163 {*arm_movdi} (nil))

(insn 454 995 996 51 arch/arm/vfp/vfp.h:134 (set (reg:SI 10 sl [314])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 996 454 455 51 arch/arm/vfp/vfp.h:134 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 %sfp+-108 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (nil))

(insn 455 996 457 51 arch/arm/vfp/vfp.h:134 (set (reg:SI 11 fp [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 457 455 997 51 arch/arm/vfp/vfp.h:134 (set (reg:SI 8 r8)
        (reg:SI 11 fp [+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 997 457 998 51 arch/arm/vfp/vfp.h:134 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S4 A64])
        (reg:SI 8 r8)) 167 {*arm_movsi_insn} (nil))

(insn 998 997 458 51 arch/arm/vfp/vfp.h:134 (set (reg:DI 2 r2)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S8 A64])) 163 {*arm_movdi} (nil))

(insn 458 998 459 51 arch/arm/vfp/vfp.h:134 (set (reg/v:DI 0 r0 [orig:162 __n ] [162])
        (ior:DI (reg:DI 10 sl [314])
            (reg:DI 2 r2))) 86 {iordi3} (nil))

(insn 459 458 460 51 arch/arm/vfp/vfp.h:135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [orig:411 D.5814+4 ] [411])
            (reg:SI 1 r1 [ __n+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 460 459 774 51 arch/arm/vfp/vfp.h:135 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 475)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 51 -> ( 53 52)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  53 [50.0%] 
;; Succ edge  52 [50.0%]  (fallthru)

;; Start of basic block ( 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  51 [50.0%]  (fallthru)
(note 774 460 471 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 471 774 999 52 arch/arm/vfp/vfp.h:136 (set (reg:DI 0 r0 [317])
        (const_int 4294967295 [0xffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4294967295 [0xffffffff])
        (nil)))

(insn 999 471 472 52 arch/arm/vfp/vfp.h:136 (set (reg/v:DI 2 r2 [orig:160 z ] [160])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-128 S8 A64])) 163 {*arm_movdi} (nil))

(insn 472 999 892 52 arch/arm/vfp/vfp.h:136 (set (reg/v:DI 2 r2 [orig:160 z ] [160])
        (ior:DI (reg/v:DI 2 r2 [orig:160 z ] [160])
            (reg:DI 0 r0 [317]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                    (const_int 16 [0x10])) [0 %sfp+-128 S8 A64])
            (const_int 4294967295 [0xffffffff]))
        (nil)))

(jump_insn 892 472 893 52 (set (pc)
        (label_ref 482)) 242 {*arm_jump} (nil))
;; End of basic block 52 -> ( 54)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  54 [100.0%] 

(barrier 893 892 475)

;; Start of basic block ( 51) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  51 [50.0%] 
(code_label 475 893 476 53 196 "" [1 uses])

(note 476 475 480 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(note 480 476 479 53 NOTE_INSN_DELETED)

(insn 479 480 1000 53 arch/arm/vfp/vfp.h:138 discrim 1 (parallel [
            (set (reg/v:SI 1 r1 [ __rem ])
                (asm_operands:SI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 0 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779457))
            (set (reg/v:DI 2 r2 [ __res ])
                (asm_operands:DI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 1 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779457))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (nil))

(insn 1000 479 481 53 arch/arm/vfp/vfp.h:139 (set (reg:DI 4 r4)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-128 S8 A64])) 163 {*arm_movdi} (nil))

(insn 481 1000 482 53 arch/arm/vfp/vfp.h:139 (set (reg/v:DI 2 r2 [orig:160 z ] [160])
        (ior:DI (reg/v:DI 2 r2 [ __res ])
            (reg:DI 4 r4))) 86 {iordi3} (nil))
;; End of basic block 53 -> ( 54)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  54 [100.0%]  (fallthru)

;; Start of basic block ( 39 53 52) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  39 [100.0%] 
;; Pred edge  53 [100.0%]  (fallthru)
;; Pred edge  52 [100.0%] 
(code_label 482 481 483 54 184 "" [2 uses])

(note 483 482 484 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn 484 483 920 54 arch/arm/vfp/vfpdouble.c:1070 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:160 z ] [160])) 163 {*arm_movdi} (nil))

(insn 920 484 486 54 arch/arm/vfp/vfpdouble.c:1071 (set (reg:DI 4 r4 [319])
        (const_int 511 [0x1ff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 511 [0x1ff])
        (nil)))

(insn 486 920 487 54 arch/arm/vfp/vfpdouble.c:1071 (set (reg:DI 0 r0 [318])
        (and:DI (reg/v:DI 2 r2 [orig:160 z ] [160])
            (reg:DI 4 r4 [319]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 2 r2 [orig:160 z ] [160])
            (const_int 511 [0x1ff]))
        (nil)))

(insn 487 486 488 54 arch/arm/vfp/vfpdouble.c:1071 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 488 487 780 54 arch/arm/vfp/vfpdouble.c:1071 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 615)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 54 -> ( 67 55)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  67 [50.0%] 
;; Succ edge  55 [50.0%]  (fallthru)

;; Start of basic block ( 54) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  54 [50.0%]  (fallthru)
(note 780 488 491 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 491 780 492 55 arch/arm/vfp/vfpdouble.c:1071 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [318])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 492 491 781 55 arch/arm/vfp/vfpdouble.c:1071 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 615)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 55 -> ( 67 56)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  67 [50.0%] 
;; Succ edge  56 [50.0%]  (fallthru)

;; Start of basic block ( 55) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	

;; Pred edge  55 [50.0%]  (fallthru)
(note 781 492 517 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(note 517 781 499 56 NOTE_INSN_DELETED)

(insn 499 517 521 56 arch/arm/vfp/vfp.h:80 (set (reg:SI 14 lr [orig:320 D.5083 ] [320])
        (reg:SI 6 r6 [289])) 167 {*arm_movsi_insn} (nil))

(insn 521 499 501 56 arch/arm/vfp/vfp.h:86 (set (reg:SI 5 r5 [436])
        (reg:SI 3 r3 [ z+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 501 521 510 56 arch/arm/vfp/vfp.h:80 (set (reg:SI 4 r4 [orig:321 z ] [321])
        (reg:SI 2 r2 [orig:160 z ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 510 501 528 56 arch/arm/vfp/vfp.h:83 (set (reg:SI 12 ip [434])
        (reg:SI 7 r7 [+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 528 510 536 56 arch/arm/vfp/vfp.h:86 (set (reg/v:DI 0 r0 [orig:153 rmb ] [153])
        (mult:DI (zero_extend:DI (reg:SI 5 r5 [436]))
            (zero_extend:DI (reg:SI 14 lr [orig:320 D.5083 ] [320])))) 51 {*umulsidi3_v6} (nil))

(insn 536 528 1001 56 arch/arm/vfp/vfp.h:89 (set (reg:DI 8 r8)
        (mult:DI (zero_extend:DI (reg:SI 5 r5 [436]))
            (zero_extend:DI (reg:SI 12 ip [434])))) 51 {*umulsidi3_v6} (nil))

(insn 1001 536 506 56 arch/arm/vfp/vfp.h:89 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 %sfp+-88 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 506 1001 1002 56 arch/arm/vfp/vfp.h:80 (set (reg/v:DI 10 sl [orig:154 rl ] [154])
        (mult:DI (zero_extend:DI (reg:SI 4 r4 [orig:321 z ] [321]))
            (zero_extend:DI (reg:SI 14 lr [orig:320 D.5083 ] [320])))) 51 {*umulsidi3_v6} (nil))

(insn 1002 506 532 56 arch/arm/vfp/vfp.h:87 (set (reg:DI 8 r8)
        (reg/v:DI 0 r0 [orig:153 rmb ] [153])) 163 {*arm_movdi} (nil))

(insn 532 1002 1003 56 arch/arm/vfp/vfp.h:87 (set (reg:DI 8 r8)
        (plus:DI (mult:DI (zero_extend:DI (reg:SI 4 r4 [orig:321 z ] [321]))
                (zero_extend:DI (reg:SI 12 ip [434])))
            (reg:DI 8 r8))) 53 {*umulsidi3adddi_v6} (nil))

(insn 1003 532 540 56 arch/arm/vfp/vfp.h:87 (set (reg/v:DI 4 r4 [orig:137 rma.739 ] [137])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 540 1003 541 56 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [ rmb+4 ])
            (reg:SI 5 r5 [ rma.739+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 541 540 784 56 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 555)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 56 -> ( 60 57)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 24 [cc]


;; Succ edge  60 [50.0%] 
;; Succ edge  57 [50.0%]  (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  56 [50.0%]  (fallthru)
(note 784 541 543 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(jump_insn 543 784 785 57 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 810)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 57 -> ( 59 58)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  59 [71.0%] 
;; Succ edge  58 [29.0%]  (fallthru)

;; Start of basic block ( 57) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  57 [29.0%]  (fallthru)
(note 785 543 544 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(insn 544 785 545 58 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [orig:153 rmb ] [153])
            (reg:SI 4 r4 [orig:137 rma.739 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 545 544 810 58 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 555)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 58 -> ( 60 59)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  60 [50.0%] 
;; Succ edge  59 [50.0%]  (fallthru)

;; Start of basic block ( 58 57) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  58 [50.0%]  (fallthru)
;; Pred edge  57 [71.0%] 
(code_label 810 545 551 59 219 "" [1 uses])

(note 551 810 552 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn 552 551 1004 59 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 0 r0)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 1004 552 894 59 arch/arm/vfp/vfp.h:90 discrim 2 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-64 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(jump_insn 894 1004 895 59 (set (pc)
        (label_ref 558)) 242 {*arm_jump} (nil))
;; End of basic block 59 -> ( 61)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  61 [100.0%] 

(barrier 895 894 555)

;; Start of basic block ( 56 58) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8] 9 [r9]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  56 [50.0%] 
;; Pred edge  58 [50.0%] 
(code_label 555 895 556 60 200 "" [2 uses])

(note 556 555 557 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(insn 557 556 1005 60 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 8 r8)
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4294967296 [0x100000000])
        (nil)))

(insn 1005 557 558 60 arch/arm/vfp/vfp.h:90 discrim 1 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-64 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))
;; End of basic block 60 -> ( 61)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  61 [100.0%]  (fallthru)

;; Start of basic block ( 60 59) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  60 [100.0%]  (fallthru)
;; Pred edge  59 [100.0%] 
(code_label 558 1005 559 61 202 "" [1 uses])

(note 559 558 847 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(note 847 559 849 61 NOTE_INSN_DELETED)

(note 849 847 862 61 NOTE_INSN_DELETED)

(insn 862 849 863 61 arch/arm/vfp/vfp.h:92 (set (reg/v:DI 0 r0 [orig:135 rma.741 ] [135])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 863 862 1006 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg/v:DI 0 r0 [orig:135 rma.741 ] [135])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 1006 863 560 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S8 A64])
        (reg/v:DI 0 r0 [orig:135 rma.741 ] [135])) 163 {*arm_movdi} (nil))

(insn 560 1006 563 61 arch/arm/vfp/vfp.h:92 (set (reg:SI 1 r1 [ rma.741+4 ])
        (reg:SI 4 r4 [orig:137 rma.739 ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 563 560 1007 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 9 r9)
        (reg:SI 5 r5 [ rma.739+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 1007 563 561 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S4 A64])
        (reg:SI 9 r9)) 167 {*arm_movsi_insn} (nil))

(insn 561 1007 581 61 arch/arm/vfp/vfp.h:92 (set (reg:SI 0 r0 [orig:135 rma.741 ] [135])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 581 561 1008 61 arch/arm/vfp/vfp.h:62 (set (reg:DI 8 r8 [339])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 1008 581 562 61 arch/arm/vfp/vfp.h:93 (set (reg:DI 4 r4)
        (reg/v:DI 10 sl [orig:154 rl ] [154])) 163 {*arm_movdi} (nil))

(insn 562 1008 1009 61 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg:DI 4 r4)
                (plus:DI (reg:DI 4 r4)
                    (reg/v:DI 0 r0 [orig:135 rma.741 ] [135])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 1009 562 564 61 arch/arm/vfp/vfp.h:93 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-72 S8 A64])
        (reg:DI 4 r4)) 163 {*arm_movdi} (nil))

(insn 564 1009 1010 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 5 r5)
        (reg:SI 0 r0 [orig:135 rma.741 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 1010 564 1011 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 %sfp+-108 S4 A32])
        (reg:SI 5 r5)) 167 {*arm_movsi_insn} (nil))

(insn 1011 1010 1013 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-112 S8 A64])) 163 {*arm_movdi} (nil))

(insn 1013 1011 565 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 4 r4)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 %sfp+-88 S8 A64])) 163 {*arm_movdi} (nil))

(insn 565 1013 1014 61 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 10 sl)
                (plus:DI (reg:DI 10 sl)
                    (reg:DI 4 r4)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 1014 565 848 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 5 r5)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 76 [0x4c])) [0 %sfp+-68 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 848 1014 580 61 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:SI 12 ip [443])
                (gtu:SI (reg:SI 1 r1 [ rma.741+4 ])
                    (reg:SI 5 r5)))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 580 848 1015 61 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 0 r0 [340])
                (plus:DI (zero_extend:DI (reg:SI 12 ip [443]))
                    (reg:DI 10 sl)))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (nil))

(insn 1015 580 582 61 arch/arm/vfp/vfp.h:62 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-64 S8 A64])) 163 {*arm_movdi} (nil))

(insn 582 1015 587 61 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 0 r0 [340])
                (plus:DI (reg:DI 0 r0 [340])
                    (reg:DI 10 sl)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(note 587 582 591 61 NOTE_INSN_DELETED)

(note 591 587 1016 61 NOTE_INSN_DELETED)

(insn 1016 591 1018 61 arch/arm/vfp/vfp.h:62 (set (reg:DI 4 r4)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-104 S8 A64])) 163 {*arm_movdi} (nil))

(insn 1018 1016 583 61 arch/arm/vfp/vfp.h:62 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-72 S8 A64])) 163 {*arm_movdi} (nil))

(insn 583 1018 1017 61 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg/v:DI 8 r8 [orig:181 reml ] [181])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 0 [
                        (reg/v:DI 8 r8 [orig:181 reml ] [181])
                        (reg:DI 4 r4)
                        (reg:DI 10 sl)
                        (reg:DI 0 r0 [340])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (set (reg:DI 4 r4)
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 1 [
                        (reg/v:DI 8 r8 [orig:181 reml ] [181])
                        (reg:DI 4 r4)
                        (reg:DI 10 sl)
                        (reg:DI 0 r0 [340])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 1017 583 941 61 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-104 S8 A64])
        (reg:DI 4 r4)) 163 {*arm_movdi} (nil))

(insn 941 1017 896 61 (set (reg/v:DI 0 r0 [orig:182 remh ] [182])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-104 S8 A64])) 163 {*arm_movdi} (nil))

(jump_insn 896 941 897 61 arch/arm/vfp/vfpdouble.c:1075 (set (pc)
        (label_ref 589)) 242 {*arm_jump} (nil))
;; End of basic block 61 -> ( 63)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  63 [100.0%] 

(barrier 897 896 593)

;; Start of basic block ( 63) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 8 [r8] 9 [r9]
;; live  kill	 24 [cc]

;; Pred edge  63 [21.0%] 
(code_label 593 897 586 62 206 "" [1 uses])

(note 586 593 1019 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 1019 586 588 62 arch/arm/vfp/vfp.h:49 (set (reg:DI 4 r4)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 588 1019 589 62 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 8 r8 [orig:181 reml ] [181])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 0 [
                        (reg/v:DI 8 r8 [orig:181 reml ] [181])
                        (reg/v:DI 0 r0 [orig:182 remh ] [182])
                        (reg:DI 6 r6 [289])
                        (reg:DI 4 r4)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (set (reg/v:DI 0 r0 [orig:182 remh ] [182])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 1 [
                        (reg/v:DI 8 r8 [orig:181 reml ] [181])
                        (reg/v:DI 0 r0 [orig:182 remh ] [182])
                        (reg:DI 6 r6 [289])
                        (reg:DI 4 r4)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 62 -> ( 63)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  63 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 62 61) -> 63
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  62 [100.0%]  (fallthru,dfs_back)
;; Pred edge  61 [100.0%] 
(code_label 589 588 590 63 205 "" [1 uses])

(note 590 589 1020 63 [bb 63] NOTE_INSN_BASIC_BLOCK)

(insn 1020 590 592 63 arch/arm/vfp/vfp.h:49 (set (reg:DI 10 sl)
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(insn 592 1020 594 63 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 2 r2 [orig:160 z ] [160])
                (plus:DI (reg/v:DI 2 r2 [orig:160 z ] [160])
                    (reg:DI 10 sl)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg/v:DI 2 r2 [orig:160 z ] [160])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 594 592 595 63 arch/arm/vfp/vfpdouble.c:1075 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [ remh+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 595 594 795 63 arch/arm/vfp/vfpdouble.c:1075 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 593)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2100 [0x834])
        (nil)))
;; End of basic block 63 -> ( 62 64)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  62 [21.0%] 
;; Succ edge  64 [79.0%]  (fallthru,loop_exit)

;; Start of basic block ( 63) -> 64
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 11 [fp] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 11 [fp]

;; Pred edge  63 [79.0%]  (fallthru,loop_exit)
(note 795 595 605 64 [bb 64] NOTE_INSN_BASIC_BLOCK)

(note 605 795 606 64 NOTE_INSN_DELETED)

(note 606 605 607 64 NOTE_INSN_DELETED)

(insn 607 606 604 64 arch/arm/vfp/vfpdouble.c:1079 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 8 r8 [orig:181 reml ] [181])
                        (reg:SI 9 r9 [ reml+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 11 fp))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 604 607 608 64 arch/arm/vfp/vfpdouble.c:1079 (set (reg:DI 4 r4 [343])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 608 604 799 64 arch/arm/vfp/vfpdouble.c:1079 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 610)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 64 -> ( 66 65)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  66 [50.0%] 
;; Succ edge  65 [50.0%]  (fallthru)

;; Start of basic block ( 64) -> 65
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  64 [50.0%]  (fallthru)
(note 799 608 609 65 [bb 65] NOTE_INSN_BASIC_BLOCK)

(insn 609 799 610 65 arch/arm/vfp/vfpdouble.c:1079 (set (reg:DI 4 r4 [343])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 65 -> ( 66)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  66 [100.0%]  (fallthru)

;; Start of basic block ( 64 65) -> 66
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  64 [50.0%] 
;; Pred edge  65 [100.0%]  (fallthru)
(code_label 610 609 800 66 208 "" [1 uses])

(note 800 610 611 66 [bb 66] NOTE_INSN_BASIC_BLOCK)

(insn 611 800 612 66 arch/arm/vfp/vfpdouble.c:1079 (set (reg:DI 0 r0 [345])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 612 611 613 66 arch/arm/vfp/vfpdouble.c:1079 (parallel [
            (set (reg:DI 0 r0 [345])
                (plus:DI (reg:DI 0 r0 [345])
                    (reg/v:DI 2 r2 [orig:160 z ] [160])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg/v:DI 2 r2 [orig:160 z ] [160])
            (const_int 1 [0x1]))
        (nil)))

(insn 613 612 614 66 arch/arm/vfp/vfpdouble.c:1079 (set (reg:DI 2 r2 [347])
        (ior:DI (reg:DI 4 r4 [343])
            (reg:DI 0 r0 [345]))) 86 {iordi3} (expr_list:REG_EQUIV (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdd.significand+0 S8 A64])
        (nil)))

(insn 614 613 615 66 arch/arm/vfp/vfpdouble.c:1079 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])
        (reg:DI 2 r2 [347])) 163 {*arm_movdi} (nil))
;; End of basic block 66 -> ( 67)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  67 [100.0%]  (fallthru)

;; Start of basic block ( 66 54 55) -> 67
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  66 [100.0%]  (fallthru)
;; Pred edge  54 [50.0%] 
;; Pred edge  55 [50.0%] 
(code_label 615 614 616 67 198 "" [2 uses])

(note 616 615 617 67 [bb 67] NOTE_INSN_BASIC_BLOCK)

(note 617 616 620 67 NOTE_INSN_DELETED)

(insn 620 617 622 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 %sfp+-80 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 622 620 621 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 %sfp+-76 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 621 622 623 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 128 [0x80]))) 4 {*arm_addsi3} (nil))

(insn 623 621 919 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 919 623 619 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg/f:SI 12 ip [349])
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x10d96040>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x10d96040>)
        (nil)))

(insn 619 919 624 67 arch/arm/vfp/vfpdouble.c:1081 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [349])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x10d96040>)
        (nil)))

(call_insn 624 619 625 67 arch/arm/vfp/vfpdouble.c:1081 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 625 624 898 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg/v:SI 4 r4 [orig:185 exceptions ] [185])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 898 625 899 67 arch/arm/vfp/vfpdouble.c:1081 (set (pc)
        (label_ref 730)) 242 {*arm_jump} (nil))
;; End of basic block 67 -> ( 75)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  75 [100.0%] 

(barrier 899 898 628)

;; Start of basic block ( 20) -> 68
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  20 [29.0%] 
(code_label 628 899 629 68 171 ("vdn_nan") [1 uses])

(note 629 628 630 68 [bb 68] NOTE_INSN_BASIC_BLOCK)

(note 630 629 631 68 NOTE_INSN_DELETED)

(note 631 630 632 68 NOTE_INSN_DELETED)

(note 632 631 636 68 NOTE_INSN_DELETED)

(insn 636 632 633 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 %sfp+-76 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 633 636 634 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 128 [0x80]))) 4 {*arm_addsi3} (nil))

(insn 634 633 635 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 112 [0x70]))) 4 {*arm_addsi3} (nil))

(insn 635 634 637 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 96 [0x60]))) 4 {*arm_addsi3} (nil))

(call_insn 637 635 638 68 arch/arm/vfp/vfpdouble.c:1084 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 638 637 639 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg/v:SI 4 r4 [orig:185 exceptions ] [185])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 68 -> ( 69)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  69 [100.0%]  (fallthru)

;; Start of basic block ( 68 71 70 73) -> 69
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 14 [lr]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  68 [100.0%]  (fallthru)
;; Pred edge  71 [100.0%] 
;; Pred edge  70 [100.0%] 
;; Pred edge  73 [100.0%] 
(code_label 639 638 640 69 210 ("pack") [3 uses])

(note 640 639 648 69 [bb 69] NOTE_INSN_BASIC_BLOCK)

(note 648 640 654 69 NOTE_INSN_DELETED)

(note 654 648 660 69 NOTE_INSN_DELETED)

(note 660 654 642 69 NOTE_INSN_DELETED)

(insn 642 660 864 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 5 r5 [orig:354 vdd.sign ] [354])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 130 [0x82])) [0 vdd.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 864 642 647 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:DI 2 r2 [356])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 647 864 865 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 14 lr [orig:358 vdd.exponent ] [358])
        (sign_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 865 647 866 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:DI 8 r8 [360])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 866 865 653 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:DI 0 r0 [364])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 653 866 644 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 12 ip [orig:366 vdd.significand+4 ] [366])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 140 [0x8c])) [0 vdd.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 140 [0x8c])) [0 vdd.significand+4 S4 A32])
        (nil)))

(insn 644 653 649 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 3 r3 [+4 ])
        (ashift:SI (reg:SI 5 r5 [orig:354 vdd.sign ] [354])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 649 644 645 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 9 r9 [+4 ])
        (ashift:SI (reg:SI 14 lr [orig:358 vdd.exponent ] [358])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 645 649 918 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 2 r2 [356])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 918 645 656 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 14 lr [orig:367 vdd.significand ] [367])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 vdd.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 vdd.significand+0 S4 A64])
        (nil)))

(insn 656 918 650 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 0 r0 [364])
        (lshiftrt:SI (reg:SI 14 lr [orig:367 vdd.significand ] [367])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (nil))

(insn 650 656 657 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 8 r8 [360])
        (reg:SI 2 r2 [356])) 167 {*arm_movsi_insn} (nil))

(insn 657 650 1021 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 0 r0 [364])
        (ior:SI (ashift:SI (reg:SI 12 ip [orig:366 vdd.significand+4 ] [366])
                (const_int 22 [0x16]))
            (reg:SI 0 r0 [364]))) 270 {*arith_shiftsi} (nil))

(insn 1021 657 651 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:DI 6 r6 [361])
        (reg:DI 2 r2 [356])) 163 {*arm_movdi} (nil))

(insn 651 1021 659 69 arch/arm/vfp/vfpdouble.c:1086 (parallel [
            (set (reg:DI 6 r6 [361])
                (plus:DI (reg:DI 6 r6 [361])
                    (reg:DI 8 r8 [360])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 659 651 662 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 1 r1 [+4 ])
        (lshiftrt:SI (reg:SI 12 ip [orig:366 vdd.significand+4 ] [366])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (nil))

(insn 662 659 661 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 %sfp+-80 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 661 662 663 69 arch/arm/vfp/vfpdouble.c:1086 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (reg:DI 0 r0 [364])
                    (reg:DI 6 r6 [361])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(call_insn 663 661 900 69 arch/arm/vfp/vfpdouble.c:1086 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(jump_insn 900 663 901 69 arch/arm/vfp/vfpdouble.c:1087 (set (pc)
        (label_ref 730)) 242 {*arm_jump} (nil))
;; End of basic block 69 -> ( 75)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  75 [100.0%] 

(barrier 901 900 666)

;; Start of basic block ( 21) -> 70
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  21 [29.0%] 
(code_label 666 901 667 70 172 ("vdm_nan") [1 uses])

(note 667 666 668 70 [bb 70] NOTE_INSN_BASIC_BLOCK)

(note 668 667 669 70 NOTE_INSN_DELETED)

(note 669 668 670 70 NOTE_INSN_DELETED)

(note 670 669 674 70 NOTE_INSN_DELETED)

(insn 674 670 671 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 %sfp+-76 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 671 674 672 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 128 [0x80]))) 4 {*arm_addsi3} (nil))

(insn 672 671 673 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 96 [0x60]))) 4 {*arm_addsi3} (nil))

(insn 673 672 675 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 112 [0x70]))) 4 {*arm_addsi3} (nil))

(call_insn 675 673 676 70 arch/arm/vfp/vfpdouble.c:1090 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 676 675 902 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg/v:SI 4 r4 [orig:185 exceptions ] [185])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 902 676 903 70 arch/arm/vfp/vfpdouble.c:1091 (set (pc)
        (label_ref 639)) 242 {*arm_jump} (nil))
;; End of basic block 70 -> ( 69)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  69 [100.0%] 

(barrier 903 902 679)

;; Start of basic block ( 26 27) -> 71
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 12 [ip]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 12 [ip]
;; live  kill	

;; Pred edge  26 [50.0%] 
;; Pred edge  27 [50.0%] 
(code_label 679 903 680 71 177 ("zero") [2 uses])

(note 680 679 1022 71 [bb 71] NOTE_INSN_BASIC_BLOCK)

(insn 1022 680 683 71 arch/arm/vfp/vfpdouble.c:1094 (set (reg:HI 12 ip)
        (const_int 0 [0x0])) 176 {*movhi_insn_arch4} (nil))

(insn 683 1022 684 71 arch/arm/vfp/vfpdouble.c:1094 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])
        (reg:HI 12 ip)) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 684 683 685 71 arch/arm/vfp/vfpdouble.c:1095 (set (reg:DI 2 r2 [375])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 685 684 686 71 arch/arm/vfp/vfpdouble.c:1095 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])
        (reg:DI 2 r2 [375])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 686 685 904 71 arch/arm/vfp/vfpdouble.c:1008 (set (reg/v:SI 4 r4 [orig:185 exceptions ] [185])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 904 686 905 71 arch/arm/vfp/vfpdouble.c:1096 (set (pc)
        (label_ref 639)) 242 {*arm_jump} (nil))
;; End of basic block 71 -> ( 69)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  69 [100.0%] 

(barrier 905 904 692)

;; Start of basic block ( 23 25) -> 73
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  23 [50.0%] 
;; Pred edge  25 [100.0%] 
(code_label 692 905 693 73 176 ("infinity") [2 uses])

(note 693 692 694 73 [bb 73] NOTE_INSN_BASIC_BLOCK)

(insn 694 693 696 73 arch/arm/vfp/vfpdouble.c:1101 (set (reg:SI 3 r3 [377])
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -63489 [0xffffffffffff07ff])
        (nil)))

(insn 696 694 697 73 arch/arm/vfp/vfpdouble.c:1101 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 vdd.exponent+0 S2 A64])
        (reg:HI 3 r3 [377])) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
        (nil)))

(insn 697 696 698 73 arch/arm/vfp/vfpdouble.c:1102 (set (reg:DI 2 r2 [378])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 698 697 906 73 arch/arm/vfp/vfpdouble.c:1102 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 vdd.significand+0 S8 A64])
        (reg:DI 2 r2 [378])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 906 698 907 73 arch/arm/vfp/vfpdouble.c:1103 (set (pc)
        (label_ref 639)) 242 {*arm_jump} (nil))
;; End of basic block 73 -> ( 69)
;; lr  out 	 4 [r4] 13 [sp]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  69 [100.0%] 

(barrier 907 906 701)

;; Start of basic block ( 22) -> 74
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(13){ }}
;; lr  in  	 12 [ip] 13 [sp]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 14 [lr]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  22 [29.0%] 
(code_label 701 907 702 74 173 "" [1 uses])

(note 702 701 712 74 [bb 74] NOTE_INSN_BASIC_BLOCK)

(note 712 702 719 74 NOTE_INSN_DELETED)

(note 719 712 725 74 NOTE_INSN_DELETED)

(note 725 719 703 74 NOTE_INSN_DELETED)

(insn 703 725 867 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg/f:SI 3 r3 [379])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 867 703 868 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:DI 8 r8 [383])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 868 867 869 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:DI 6 r6 [388])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 869 868 727 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:DI 0 r0 [393])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 727 869 729 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 %sfp+-80 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 729 727 720 74 arch/arm/vfp/vfpdouble.c:1107 (set (reg/v:SI 4 r4 [orig:185 exceptions ] [185])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 720 729 705 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 10 sl [orig:396 vfp_double_default_qnan.significand ] [396])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [379])
                (const_int 8 [0x8])) [0 vfp_double_default_qnan.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 8 [0x8]))) [0 vfp_double_default_qnan.significand+0 S4 A64])
        (nil)))

(insn 705 720 711 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 5 r5 [orig:381 vfp_double_default_qnan.sign ] [381])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 3 r3 [379])
                    (const_int 2 [0x2])) [0 vfp_double_default_qnan.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/s/j/c:HI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 2 [0x2]))) [0 vfp_double_default_qnan.sign+0 S2 A16]))
        (nil)))

(insn 711 705 718 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 14 lr [orig:386 vfp_double_default_qnan.exponent ] [386])
        (sign_extend:SI (mem/s/j/c:HI (reg/f:SI 3 r3 [379]) [0 vfp_double_default_qnan.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (expr_list:REG_EQUAL (sign_extend:SI (mem/s/j/c:HI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 vfp_double_default_qnan.exponent+0 S2 A64]))
        (nil)))

(insn 718 711 721 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 3 r3 [orig:395 vfp_double_default_qnan.significand+4 ] [395])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [379])
                (const_int 12 [0xc])) [0 vfp_double_default_qnan.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 vfp_double_default_qnan.significand+4 S4 A32])
        (nil)))

(insn 721 718 707 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 0 r0 [393])
        (lshiftrt:SI (reg:SI 10 sl [orig:396 vfp_double_default_qnan.significand ] [396])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (nil))

(insn 707 721 713 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 9 r9 [+4 ])
        (ashift:SI (reg:SI 5 r5 [orig:381 vfp_double_default_qnan.sign ] [381])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 713 707 708 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 7 r7 [+4 ])
        (ashift:SI (reg:SI 14 lr [orig:386 vfp_double_default_qnan.exponent ] [386])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 708 713 714 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 8 r8 [383])
        (reg:SI 12 ip [269])) 167 {*arm_movsi_insn} (nil))

(insn 714 708 722 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 6 r6 [388])
        (reg:SI 12 ip [269])) 167 {*arm_movsi_insn} (nil))

(insn 722 714 1023 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 0 r0 [393])
        (ior:SI (ashift:SI (reg:SI 3 r3 [orig:395 vfp_double_default_qnan.significand+4 ] [395])
                (const_int 22 [0x16]))
            (reg:SI 0 r0 [393]))) 270 {*arith_shiftsi} (nil))

(insn 1023 722 715 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:DI 10 sl [389])
        (reg:DI 8 r8 [383])) 163 {*arm_movdi} (nil))

(insn 715 1023 724 74 arch/arm/vfp/vfpdouble.c:1106 (parallel [
            (set (reg:DI 10 sl [389])
                (plus:DI (reg:DI 10 sl [389])
                    (reg:DI 6 r6 [388])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 724 715 726 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 1 r1 [+4 ])
        (lshiftrt:SI (reg:SI 3 r3 [orig:395 vfp_double_default_qnan.significand+4 ] [395])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (nil))

(insn 726 724 728 74 arch/arm/vfp/vfpdouble.c:1106 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (reg:DI 0 r0 [393])
                    (reg:DI 10 sl [389])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(call_insn 728 726 730 74 arch/arm/vfp/vfpdouble.c:1106 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))
;; End of basic block 74 -> ( 75)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp] 14 [lr]


;; Succ edge  75 [100.0%]  (fallthru)

;; Start of basic block ( 74 67 69) -> 75
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  74 [100.0%]  (fallthru)
;; Pred edge  67 [100.0%] 
;; Pred edge  69 [100.0%] 
(code_label 730 728 731 75 209 "" [2 uses])

(note 731 730 736 75 [bb 75] NOTE_INSN_BASIC_BLOCK)

(insn 736 731 742 75 arch/arm/vfp/vfpdouble.c:1108 (set (reg/i:SI 0 r0)
        (reg/v:SI 4 r4 [orig:185 exceptions ] [185])) 167 {*arm_movsi_insn} (nil))

(insn 742 736 917 75 arch/arm/vfp/vfpdouble.c:1108 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 75 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 917 742 945 NOTE_INSN_DELETED)

(note 945 917 0 NOTE_INSN_DELETED)


;; Function vfp_double_add (vfp_double_add)[0:172]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a17 (r218,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r217,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a5(r146,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a6(r206,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a7(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:160000
  a14(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:170000
  a15(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r140,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a24(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a28(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r176,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a32(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a34(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r168,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a36(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a38(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r218: preferred GENERAL_REGS, alternative NO_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a5(r146,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a6(r206,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a7(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:160000
  a14(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:170000
  a15(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a21(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r140,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a24(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a28(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r176,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a32(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a34(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r168,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a36(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a38(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a44(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 310(l0): point = 0
   Insn 304(l0): point = 2
   Insn 296(l0): point = 5
   Insn 297(l0): point = 7
   Insn 293(l0): point = 10
   Insn 378(l0): point = 17
   Insn 287(l0): point = 19
   Insn 354(l0): point = 21
   Insn 275(l0): point = 23
   Insn 376(l0): point = 26
   Insn 264(l0): point = 28
   Insn 263(l0): point = 30
   Insn 262(l0): point = 32
   Insn 265(l0): point = 34
   Insn 260(l0): point = 37
   Insn 374(l0): point = 40
   Insn 273(l0): point = 43
   Insn 272(l0): point = 45
   Insn 251(l0): point = 48
   Insn 250(l0): point = 50
   Insn 249(l0): point = 52
   Insn 246(l0): point = 61
   Insn 245(l0): point = 63
   Insn 345(l0): point = 65
   Insn 243(l0): point = 67
   Insn 244(l0): point = 69
   Insn 239(l0): point = 72
   Insn 238(l0): point = 75
   Insn 237(l0): point = 77
   Insn 235(l0): point = 79
   Insn 234(l0): point = 81
   Insn 233(l0): point = 83
   Insn 370(l0): point = 86
   Insn 228(l0): point = 88
   Insn 225(l0): point = 94
   Insn 224(l0): point = 97
   Insn 223(l0): point = 99
   Insn 221(l0): point = 101
   Insn 219(l0): point = 103
   Insn 387(l0): point = 105
   Insn 220(l0): point = 107
   Insn 386(l0): point = 109
   Insn 385(l0): point = 111
   Insn 384(l0): point = 113
   Insn 342(l0): point = 115
   Insn 341(l0): point = 117
   Insn 216(l0): point = 119
   Insn 214(l0): point = 121
   Insn 336(l0): point = 123
   Insn 335(l0): point = 125
   Insn 215(l0): point = 127
   Insn 334(l0): point = 129
   Insn 210(l0): point = 131
   Insn 208(l0): point = 133
   Insn 209(l0): point = 135
   Insn 206(l0): point = 138
   Insn 205(l0): point = 140
   Insn 203(l0): point = 143
   Insn 202(l0): point = 145
   Insn 201(l0): point = 147
   Insn 198(l0): point = 149
   Insn 197(l0): point = 151
   Insn 196(l0): point = 153
   Insn 195(l0): point = 155
   Insn 368(l0): point = 158
   Insn 188(l0): point = 160
   Insn 187(l0): point = 162
   Insn 182(l0): point = 165
   Insn 366(l0): point = 168
   Insn 176(l0): point = 170
   Insn 175(l0): point = 172
   Insn 170(l0): point = 175
   Insn 169(l0): point = 177
   Insn 168(l0): point = 179
   Insn 167(l0): point = 181
   Insn 166(l0): point = 183
   Insn 163(l0): point = 186
   Insn 162(l0): point = 188
   Insn 159(l0): point = 191
   Insn 158(l0): point = 193
   Insn 364(l0): point = 196
   Insn 152(l0): point = 199
   Insn 151(l0): point = 201
   Insn 149(l0): point = 203
   Insn 150(l0): point = 205
   Insn 147(l0): point = 208
   Insn 146(l0): point = 210
   Insn 144(l0): point = 212
   Insn 352(l0): point = 215
   Insn 351(l0): point = 217
   Insn 131(l0): point = 219
   Insn 130(l0): point = 221
   Insn 361(l0): point = 224
   Insn 125(l0): point = 226
   Insn 123(l0): point = 229
   Insn 122(l0): point = 231
   Insn 359(l0): point = 234
   Insn 350(l0): point = 236
   Insn 106(l0): point = 238
   Insn 105(l0): point = 243
   Insn 357(l0): point = 246
   Insn 100(l0): point = 248
   Insn 98(l0): point = 251
   Insn 97(l0): point = 253
   Insn 94(l0): point = 255
   Insn 92(l0): point = 258
   Insn 91(l0): point = 260
   Insn 90(l0): point = 262
   Insn 86(l0): point = 264
   Insn 348(l0): point = 267
   Insn 72(l0): point = 269
   Insn 71(l0): point = 274
   Insn 355(l0): point = 277
   Insn 66(l0): point = 279
   Insn 64(l0): point = 282
   Insn 63(l0): point = 284
   Insn 60(l0): point = 286
   Insn 58(l0): point = 289
   Insn 57(l0): point = 291
   Insn 56(l0): point = 293
   Insn 55(l0): point = 295
   Insn 50(l0): point = 298
   Insn 49(l0): point = 300
   Insn 48(l0): point = 302
   Insn 46(l0): point = 305
   Insn 45(l0): point = 307
   Insn 44(l0): point = 309
   Insn 43(l0): point = 311
   Insn 40(l0): point = 314
   Insn 39(l0): point = 316
   Insn 38(l0): point = 318
   Insn 24(l0): point = 321
   Insn 23(l0): point = 323
   Insn 22(l0): point = 325
   Insn 11(l0): point = 328
   Insn 10(l0): point = 330
   Insn 9(l0): point = 332
   Insn 5(l0): point = 334
   Insn 4(l0): point = 336
   Insn 2(l0): point = 338
   Insn 3(l0): point = 340
 a0(r138): [168..172] [158..165] [3..7]
 a1(r149): [184..338] [160..174] [6..157]
 a2(r144): [55..55] [17..53] [6..11]
 a3(r215): [54..65] [11..16]
 a4(r134): [122..147] [91..91] [75..89] [56..72] [53..54] [11..16]
 a5(r146): [20..21]
 a6(r206): [22..23]
 a7(r152): [208..334] [178..195] [40..157] [24..25]
 a8(r203): [29..30]
 a9(r204): [31..32]
 a10(r202): [31..37]
 a11(r199): [64..69]
 a12(r198): [64..67]
 a13(r150): [303..340] [182..300] [163..170] [66..157]
 a14(r151): [301..336] [206..298] [180..195] [70..157]
 a15(r213): [89..129]
 a16(r195): [97..105] [89..94]
 a17(r218): [106..113]
 a18(r217): [110..115]
 a19(r216): [112..117]
 a20(r147): [128..145]
 a21(r191): [146..149]
 a22(r190): [146..151]
 a23(r140): [246..248] [234..236] [224..226] [208..215] [189..195]
 a24(r137): [208..212] [194..195]
 a25(r183): [202..205]
 a26(r182): [202..203]
 a27(r139): [277..279] [213..267]
 a28(r180): [218..219]
 a29(r179): [218..221]
 a30(r143): [258..264] [232..233]
 a31(r176): [241..241] [237..239]
 a32(r177): [239..243]
 a33(r142): [251..255] [239..245]
 a34(r174): [261..262]
 a35(r168): [272..272] [268..270]
 a36(r169): [270..274]
 a37(r141): [282..286] [270..276]
 a38(r166): [292..293]
 a39(r165): [292..295]
 a40(r133): [299..302]
 a41(r162): [308..309]
 a42(r161): [308..311]
 a43(r156): [324..325]
 a44(r153): [331..332]
Compressing live ranges: from 343 to 125 - 36%
Ranges after the compression:
 a0(r138): [54..56] [50..53] [0..2]
 a1(r149): [61..123] [51..57] [1..49]
 a2(r144): [20..20] [5..18] [1..3]
 a3(r215): [19..23] [3..4]
 a4(r134): [41..46] [31..31] [29..30] [21..28] [18..19] [3..4]
 a5(r146): [6..7]
 a6(r206): [8..9]
 a7(r152): [69..121] [58..64] [17..49] [10..11]
 a8(r203): [12..13]
 a9(r204): [14..15]
 a10(r202): [14..16]
 a11(r199): [22..26]
 a12(r198): [22..25]
 a13(r150): [113..124] [60..110] [52..55] [24..49]
 a14(r151): [111..122] [68..108] [59..64] [27..49]
 a15(r213): [30..43]
 a16(r195): [33..34] [30..32]
 a17(r218): [35..38]
 a18(r217): [36..39]
 a19(r216): [37..40]
 a20(r147): [42..44]
 a21(r191): [45..47]
 a22(r190): [45..48]
 a23(r140): [87..88] [80..81] [76..77] [69..72] [62..64]
 a24(r137): [69..70] [63..64]
 a25(r183): [65..67]
 a26(r182): [65..66]
 a27(r139): [101..102] [71..95]
 a28(r180): [73..74]
 a29(r179): [73..75]
 a30(r143): [91..94] [78..79]
 a31(r176): [84..84] [82..83]
 a32(r177): [83..85]
 a33(r142): [89..90] [83..86]
 a34(r174): [92..93]
 a35(r168): [98..98] [96..97]
 a36(r169): [97..99]
 a37(r141): [103..104] [97..100]
 a38(r166): [105..106]
 a39(r165): [105..107]
 a40(r133): [109..112]
 a41(r162): [114..115]
 a42(r161): [114..116]
 a43(r156): [117..118]
 a44(r153): [119..120]
+++Allocating 360 bytes for conflict table (uncompressed size 360)
;; a0(r138,l0) conflicts: a2(r144,l0) a1(r149,l0) a13(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r149,l0) conflicts: a0(r138,l0) a2(r144,l0) a3(r215,l0) a4(r134,l0) a5(r146,l0) a6(r206,l0) a7(r152,l0) a8(r203,l0) a9(r204,l0) a10(r202,l0) a12(r198,l0) a11(r199,l0) a13(r150,l0) a14(r151,l0) a16(r195,l0) a15(r213,l0) a17(r218,l0) a18(r217,l0) a19(r216,l0) a20(r147,l0) a21(r191,l0) a22(r190,l0) a23(r140,l0) a24(r137,l0) a26(r182,l0) a25(r183,l0) a27(r139,l0) a28(r180,l0) a29(r179,l0) a30(r143,l0) a31(r176,l0) a32(r177,l0) a33(r142,l0) a34(r174,l0) a35(r168,l0) a36(r169,l0) a37(r141,l0) a38(r166,l0) a39(r165,l0) a40(r133,l0) a41(r162,l0) a42(r161,l0) a43(r156,l0) a44(r153,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r144,l0) conflicts: a0(r138,l0) a1(r149,l0) a3(r215,l0) a4(r134,l0) a5(r146,l0) a6(r206,l0) a7(r152,l0) a8(r203,l0) a9(r204,l0) a10(r202,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r215,l0) conflicts: a2(r144,l0) a1(r149,l0) a4(r134,l0) a7(r152,l0) a12(r198,l0) a11(r199,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r134,l0) conflicts: a2(r144,l0) a1(r149,l0) a3(r215,l0) a7(r152,l0) a12(r198,l0) a11(r199,l0) a13(r150,l0) a14(r151,l0) a16(r195,l0) a15(r213,l0) a20(r147,l0) a21(r191,l0) a22(r190,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r146,l0) conflicts: a2(r144,l0) a1(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r206,l0) conflicts: a2(r144,l0) a1(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r152,l0) conflicts: a2(r144,l0) a1(r149,l0) a3(r215,l0) a4(r134,l0) a12(r198,l0) a11(r199,l0) a13(r150,l0) a14(r151,l0) a16(r195,l0) a15(r213,l0) a17(r218,l0) a18(r217,l0) a19(r216,l0) a20(r147,l0) a21(r191,l0) a22(r190,l0) a23(r140,l0) a24(r137,l0) a27(r139,l0) a28(r180,l0) a29(r179,l0) a30(r143,l0) a31(r176,l0) a32(r177,l0) a33(r142,l0) a34(r174,l0) a35(r168,l0) a36(r169,l0) a37(r141,l0) a38(r166,l0) a39(r165,l0) a40(r133,l0) a41(r162,l0) a42(r161,l0) a43(r156,l0) a44(r153,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r203,l0) conflicts: a2(r144,l0) a1(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r204,l0) conflicts: a2(r144,l0) a1(r149,l0) a10(r202,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r202,l0) conflicts: a2(r144,l0) a1(r149,l0) a9(r204,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r199,l0) conflicts: a1(r149,l0) a3(r215,l0) a4(r134,l0) a7(r152,l0) a12(r198,l0) a13(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r198,l0) conflicts: a1(r149,l0) a3(r215,l0) a4(r134,l0) a7(r152,l0) a11(r199,l0) a13(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r150,l0) conflicts: a0(r138,l0) a1(r149,l0) a4(r134,l0) a7(r152,l0) a12(r198,l0) a11(r199,l0) a14(r151,l0) a16(r195,l0) a15(r213,l0) a17(r218,l0) a18(r217,l0) a19(r216,l0) a20(r147,l0) a21(r191,l0) a22(r190,l0) a23(r140,l0) a24(r137,l0) a26(r182,l0) a25(r183,l0) a27(r139,l0) a28(r180,l0) a29(r179,l0) a30(r143,l0) a31(r176,l0) a32(r177,l0) a33(r142,l0) a34(r174,l0) a35(r168,l0) a36(r169,l0) a37(r141,l0) a38(r166,l0) a39(r165,l0) a40(r133,l0) a41(r162,l0) a42(r161,l0) a43(r156,l0) a44(r153,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a14(r151,l0) conflicts: a1(r149,l0) a4(r134,l0) a7(r152,l0) a13(r150,l0) a16(r195,l0) a15(r213,l0) a17(r218,l0) a18(r217,l0) a19(r216,l0) a20(r147,l0) a21(r191,l0) a22(r190,l0) a23(r140,l0) a24(r137,l0) a27(r139,l0) a28(r180,l0) a29(r179,l0) a30(r143,l0) a31(r176,l0) a32(r177,l0) a33(r142,l0) a34(r174,l0) a35(r168,l0) a36(r169,l0) a37(r141,l0) a38(r166,l0) a39(r165,l0) a40(r133,l0) a41(r162,l0) a42(r161,l0) a43(r156,l0) a44(r153,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a15(r213,l0) conflicts: a1(r149,l0) a4(r134,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a16(r195,l0) a17(r218,l0) a18(r217,l0) a19(r216,l0) a20(r147,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a16(r195,l0) conflicts: a1(r149,l0) a4(r134,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a15(r213,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a17(r218,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a15(r213,l0) a18(r217,l0) a19(r216,l0)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a18(r217,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a15(r213,l0) a17(r218,l0) a19(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r216,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a15(r213,l0) a17(r218,l0) a18(r217,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a20(r147,l0) conflicts: a1(r149,l0) a4(r134,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a15(r213,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a21(r191,l0) conflicts: a1(r149,l0) a4(r134,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a22(r190,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r190,l0) conflicts: a1(r149,l0) a4(r134,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a21(r191,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r140,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a24(r137,l0) a27(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r137,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a23(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a25(r183,l0) conflicts: a1(r149,l0) a13(r150,l0) a26(r182,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a26(r182,l0) conflicts: a1(r149,l0) a13(r150,l0) a25(r183,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a27(r139,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a23(r140,l0) a28(r180,l0) a29(r179,l0) a30(r143,l0) a31(r176,l0) a32(r177,l0) a33(r142,l0) a34(r174,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a28(r180,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a27(r139,l0) a29(r179,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r179,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a27(r139,l0) a28(r180,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a30(r143,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a27(r139,l0) a34(r174,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a31(r176,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a27(r139,l0) a32(r177,l0) a33(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r177,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a27(r139,l0) a31(r176,l0) a33(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r142,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a27(r139,l0) a31(r176,l0) a32(r177,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a34(r174,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a27(r139,l0) a30(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a35(r168,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a36(r169,l0) a37(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a36(r169,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a35(r168,l0) a37(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a37(r141,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a35(r168,l0) a36(r169,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a38(r166,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a39(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a39(r165,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a38(r166,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a40(r133,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a41(r162,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a42(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a42(r161,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0) a41(r162,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a43(r156,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a44(r153,l0) conflicts: a1(r149,l0) a7(r152,l0) a13(r150,l0) a14(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a6(r206)<->a7(r152)@125:shuffle
  cp1:a5(r146)<->a6(r206)@125:shuffle
  cp2:a8(r203)<->a10(r202)@125:shuffle
  cp3:a8(r203)<->a9(r204)@125:shuffle
  cp4:a16(r195)<->a17(r218)@1000:move
  cp5:a20(r147)<->a22(r190)@125:shuffle
  cp6:a20(r147)<->a21(r191)@125:shuffle
  cp7:a24(r137)<->a27(r139)@125:shuffle
  regions=1, blocks=43, points=125
    allocnos=45, copies=8, conflicts=0, ranges=78

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r138 1r149 2r144 3r215 4r134 5r146 6r206 7r152 8r203 9r204 10r202 11r199 12r198 13r150 14r151 15r213 16r195 17r218 18r217 19r216 20r147 21r191 22r190 23r140 24r137 25r183 26r182 27r139 28r180 29r179 30r143 31r176 32r177 33r142 34r174 35r168 36r169 37r141 38r166 39r165 40r133 41r162 42r161 43r156 44r153
    modified regnos: 133 134 137 138 139 140 141 142 143 144 146 147 149 150 151 152 153 156 161 162 165 166 168 169 174 176 177 179 180 182 183 190 191 195 198 199 202 203 204 206 213 215 216 217 218
    border:
    Pressure: GENERAL_REGS=13
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 149 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 215 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 206 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 5 regs less
    Reg 203 of GENERAL_REGS has 1 regs less
    Reg 204 of GENERAL_REGS has 1 regs less
    Reg 202 of GENERAL_REGS has 1 regs less
    Reg 199 of GENERAL_REGS has 1 regs less
    Reg 198 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 5 regs less
    Reg 151 of GENERAL_REGS has 5 regs less
    Reg 213 of GENERAL_REGS has 5 regs less
    Reg 195 of GENERAL_REGS has 5 regs less
    Reg 218 of GENERAL_REGS has 2 regs less
    Reg 216 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 191 of GENERAL_REGS has 1 regs less
    Reg 190 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 183 of GENERAL_REGS has 1 regs less
    Reg 182 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 180 of GENERAL_REGS has 1 regs less
    Reg 179 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 174 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 169 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
      Pushing a18(r217,l0)
      Pushing a44(r153,l0)
      Pushing a43(r156,l0)
      Pushing a42(r161,l0)
      Pushing a41(r162,l0)
      Pushing a40(r133,l0)
      Pushing a39(r165,l0)
      Pushing a38(r166,l0)
      Pushing a36(r169,l0)
      Pushing a35(r168,l0)
      Pushing a34(r174,l0)
      Pushing a32(r177,l0)
      Pushing a31(r176,l0)
      Pushing a29(r179,l0)
      Pushing a28(r180,l0)
      Pushing a26(r182,l0)
      Pushing a25(r183,l0)
      Pushing a19(r216,l0)
      Pushing a12(r198,l0)
      Pushing a11(r199,l0)
      Pushing a10(r202,l0)
      Pushing a9(r204,l0)
      Pushing a8(r203,l0)
      Pushing a6(r206,l0)
      Pushing a5(r146,l0)
      Pushing a30(r143,l0)
      Pushing a27(r139,l0)
      Pushing a24(r137,l0)
      Pushing a22(r190,l0)
      Pushing a21(r191,l0)
      Pushing a3(r215,l0)
      Pushing a37(r141,l0)
      Pushing a33(r142,l0)
      Pushing a23(r140,l0)
      Pushing a2(r144,l0)
      Pushing a17(r218,l0)
      Pushing a0(r138,l0)
      Pushing a15(r213,l0)(potential spill: pri=1034, cost=30000)
      Pushing a16(r195,l0)(potential spill: pri=1739, cost=40000)
      Pushing a7(r152,l0)(potential spill: pri=2500, cost=30000)
      Pushing a20(r147,l0)
      Pushing a4(r134,l0)(potential spill: pri=4705, cost=80000)
      Pushing a14(r151,l0)
      Pushing a1(r149,l0)
      Pushing a13(r150,l0)
      Popping a13(r150,l0)  -- assign reg 4
      Popping a1(r149,l0)  -- assign reg 5
      Popping a14(r151,l0)  -- assign reg 6
      Popping a4(r134,l0)  -- assign reg 8
      Popping a20(r147,l0)  -- assign reg 7
      Popping a7(r152,l0)  -- assign reg 10
      Popping a16(r195,l0)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a15(r213,l0)  -- (memory is more profitable 30000 vs 2147483647) spill
      Popping a0(r138,l0)  -- assign reg 12
      Popping a17(r218,l0)  -- assign reg 8
      Popping a2(r144,l0)  -- assign reg 2
      Popping a23(r140,l0)  -- assign reg 3
      Popping a33(r142,l0)  -- assign reg 2
      Popping a37(r141,l0)  -- assign reg 2
      Popping a3(r215,l0)  -- assign reg 0
      Popping a21(r191,l0)  -- assign reg 3
      Popping a22(r190,l0)  -- assign reg 7
      Popping a24(r137,l0)  -- assign reg 2
      Popping a27(r139,l0)  -- assign reg 1
      Popping a30(r143,l0)  -- assign reg 3
      Popping a5(r146,l0)  -- assign reg 10
      Popping a6(r206,l0)  -- assign reg 10
      Popping a8(r203,l0)  -- assign reg 1
      Popping a9(r204,l0)  -- assign reg 1
      Popping a10(r202,l0)  -- assign reg 0
      Popping a11(r199,l0)  -- assign reg 3
      Popping a12(r198,l0)  -- assign reg 2
      Popping a19(r216,l0)  -- assign reg 0
      Popping a25(r183,l0)  -- assign reg 3
      Popping a26(r182,l0)  -- assign reg 2
      Popping a28(r180,l0)  -- assign reg 3
      Popping a29(r179,l0)  -- assign reg 2
      Popping a31(r176,l0)  -- assign reg 8
      Popping a32(r177,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a34(r174,l0)  -- assign reg 2
      Popping a35(r168,l0)  -- assign reg 0
      Popping a36(r169,l0)  -- assign reg 8
      Popping a38(r166,l0)  -- assign reg 3
      Popping a39(r165,l0)  -- assign reg 2
      Popping a40(r133,l0)  -- assign reg 3
      Popping a41(r162,l0)  -- assign reg 3
      Popping a42(r161,l0)  -- assign reg 2
      Popping a43(r156,l0)  -- assign reg 3
      Popping a44(r153,l0)  -- assign reg 3
      Popping a18(r217,l0)  -- assign reg 1
Disposition:
   40:r133 l0     3    4:r134 l0     8   24:r137 l0     2    0:r138 l0    12
   27:r139 l0     1   23:r140 l0     3   37:r141 l0     2   33:r142 l0     2
   30:r143 l0     3    2:r144 l0     2    5:r146 l0    10   20:r147 l0     7
    1:r149 l0     5   13:r150 l0     4   14:r151 l0     6    7:r152 l0    10
   44:r153 l0     3   43:r156 l0     3   42:r161 l0     2   41:r162 l0     3
   39:r165 l0     2   38:r166 l0     3   35:r168 l0     0   36:r169 l0     8
   34:r174 l0     2   31:r176 l0     8   32:r177 l0   mem   29:r179 l0     2
   28:r180 l0     3   26:r182 l0     2   25:r183 l0     3   22:r190 l0     7
   21:r191 l0     3   16:r195 l0   mem   12:r198 l0     2   11:r199 l0     3
   10:r202 l0     0    8:r203 l0     1    9:r204 l0     1    6:r206 l0    10
   15:r213 l0   mem    3:r215 l0     0   19:r216 l0     0   18:r217 l0     1
   17:r218 l0     8
New iteration of spill/restore move
+++Costs: overall 94000, reg 4000, mem 90000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 3, 13, 14, dead_or_set: 1, 150
insn=2, live_throughout: 2, 3, 13, 14, 150, dead_or_set: 0, 149
insn=4, live_throughout: 3, 13, 14, 149, 150, dead_or_set: 2, 151
insn=5, live_throughout: 13, 14, 149, 150, 151, dead_or_set: 3, 152
insn=9, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 153
insn=10, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 153
insn=11, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 
insn=22, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 156
insn=23, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 156
insn=24, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 
insn=34, live_throughout: 13, 149, 150, 151, 152, dead_or_set: 
insn=38, live_throughout: 13, 149, 150, 151, 152, dead_or_set: 0
insn=39, live_throughout: 0, 13, 149, 150, 151, 152, dead_or_set: 1
insn=40, live_throughout: 13, 149, 150, 151, 152, dead_or_set: 0, 1, 14
insn=41, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 
insn=43, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 161
insn=44, live_throughout: 13, 14, 149, 150, 151, 152, 161, dead_or_set: 162
insn=45, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 161, 162
insn=46, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 
insn=48, live_throughout: 13, 14, 149, 151, 152, dead_or_set: 133, 150
insn=49, live_throughout: 13, 14, 133, 149, 152, dead_or_set: 150, 151
insn=50, live_throughout: 13, 14, 149, 150, 152, dead_or_set: 133, 151
insn=51, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 
insn=55, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 165
insn=56, live_throughout: 13, 14, 149, 150, 151, 152, 165, dead_or_set: 166
insn=57, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 165, 166
insn=58, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 
insn=60, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 141
insn=63, live_throughout: 13, 14, 141, 149, 150, 151, 152, dead_or_set: 
insn=64, live_throughout: 13, 14, 141, 149, 150, 151, 152, dead_or_set: 
insn=66, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 139
insn=355, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 
insn=69, live_throughout: 13, 14, 141, 149, 150, 151, 152, dead_or_set: 
insn=71, live_throughout: 13, 14, 141, 149, 150, 151, 152, dead_or_set: 169
insn=72, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 141, 168, 169
insn=348, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 139, 168
insn=84, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 
insn=86, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 143
insn=90, live_throughout: 13, 14, 139, 143, 149, 150, 151, 152, dead_or_set: 174
insn=91, live_throughout: 13, 14, 139, 143, 149, 150, 151, 152, dead_or_set: 174
insn=92, live_throughout: 13, 14, 139, 143, 149, 150, 151, 152, dead_or_set: 
insn=94, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 142
insn=97, live_throughout: 13, 14, 139, 142, 149, 150, 151, 152, dead_or_set: 
insn=98, live_throughout: 13, 14, 139, 142, 149, 150, 151, 152, dead_or_set: 
insn=100, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 140
insn=357, live_throughout: 13, 14, 139, 140, 149, 150, 151, 152, dead_or_set: 
insn=103, live_throughout: 13, 14, 139, 142, 149, 150, 151, 152, dead_or_set: 
insn=105, live_throughout: 13, 14, 139, 142, 149, 150, 151, 152, dead_or_set: 177
insn=106, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 142, 176, 177
insn=350, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 140, 176
insn=359, live_throughout: 13, 14, 139, 140, 149, 150, 151, 152, dead_or_set: 
insn=120, live_throughout: 13, 14, 139, 143, 149, 150, 151, 152, dead_or_set: 
insn=122, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 143
insn=123, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 
insn=125, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 140
insn=361, live_throughout: 13, 14, 139, 140, 149, 150, 151, 152, dead_or_set: 
insn=128, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 
insn=130, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 179
insn=131, live_throughout: 13, 14, 139, 149, 150, 151, 152, 179, dead_or_set: 180
insn=351, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 179, 180
insn=352, live_throughout: 13, 14, 139, 149, 150, 151, 152, dead_or_set: 140
insn=142, live_throughout: 13, 14, 139, 140, 149, 150, 151, 152, dead_or_set: 
insn=144, live_throughout: 13, 14, 140, 149, 150, 151, 152, dead_or_set: 137, 139
insn=146, live_throughout: 13, 14, 137, 140, 149, 150, 151, 152, dead_or_set: 
insn=147, live_throughout: 13, 14, 137, 140, 149, 150, 151, 152, dead_or_set: 
insn=150, live_throughout: 13, 14, 149, 150, dead_or_set: 151, 183
insn=149, live_throughout: 13, 14, 149, 150, 183, dead_or_set: 182
insn=151, live_throughout: 13, 14, 149, 150, dead_or_set: 182, 183
insn=152, live_throughout: 13, 14, 149, 150, dead_or_set: 
insn=364, live_throughout: 13, 14, 149, 150, dead_or_set: 
insn=156, live_throughout: 13, 14, 137, 140, 149, 150, 151, 152, dead_or_set: 
insn=158, live_throughout: 13, 14, 140, 149, 150, 151, 152, dead_or_set: 137
insn=159, live_throughout: 13, 14, 140, 149, 150, 151, 152, dead_or_set: 
insn=162, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 140
insn=163, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 
insn=164, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 
insn=166, live_throughout: 13, 14, 150, 151, 152, dead_or_set: 0, 149
insn=167, live_throughout: 0, 13, 14, 151, 152, dead_or_set: 1, 150
insn=168, live_throughout: 0, 1, 13, 14, 152, dead_or_set: 2, 151
insn=169, live_throughout: 0, 1, 2, 13, 14, dead_or_set: 3, 152
insn=170, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3
insn=173, live_throughout: 13, 14, 149, dead_or_set: 
insn=175, live_throughout: 13, 14, 149, dead_or_set: 138
insn=176, live_throughout: 13, 14, 138, 149, dead_or_set: 150
insn=366, live_throughout: 13, 14, 138, 149, 150, dead_or_set: 
insn=180, live_throughout: 13, 14, 149, 150, dead_or_set: 
insn=182, live_throughout: 13, 14, 149, 150, dead_or_set: 138
insn=183, live_throughout: 13, 14, 138, 149, 150, dead_or_set: 
insn=187, live_throughout: 13, 14, 138, 149, dead_or_set: 0, 1, 2, 3, 150
insn=188, live_throughout: 13, 14, 138, dead_or_set: 0, 1, 2, 3, 149
insn=368, live_throughout: 13, 14, 138, dead_or_set: 
insn=191, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 
insn=195, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 0, 1, 2, 3
insn=196, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 0, 1, 2, 3
insn=197, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 190
insn=198, live_throughout: 13, 14, 149, 150, 151, 152, 190, dead_or_set: 191
insn=201, live_throughout: 13, 14, 149, 150, 151, 152, 190, 191, dead_or_set: 134
insn=202, live_throughout: 13, 14, 134, 149, 150, 151, 152, dead_or_set: 147, 190, 191
insn=203, live_throughout: 13, 14, 134, 147, 149, 150, 151, 152, dead_or_set: 
insn=205, live_throughout: 13, 134, 147, 149, 150, 151, 152, dead_or_set: 
insn=206, live_throughout: 13, 134, 147, 149, 150, 151, 152, dead_or_set: 
insn=209, live_throughout: 13, 134, 147, 149, 150, 151, 152, dead_or_set: 2
insn=208, live_throughout: 2, 13, 134, 147, 149, 150, 151, 152, dead_or_set: 0, 1
insn=210, live_throughout: 13, 134, 147, 149, 150, 151, 152, dead_or_set: 0, 1, 2, 14
insn=334, live_throughout: 0, 1, 13, 134, 147, 149, 150, 151, 152, dead_or_set: 213
insn=215, live_throughout: 0, 1, 13, 134, 149, 150, 151, 152, dead_or_set: 2, 147
insn=335, live_throughout: 1, 2, 13, 134, 149, 150, 151, 152, dead_or_set: 0, 213
insn=336, live_throughout: 2, 13, 134, 149, 150, 151, 152, 213, dead_or_set: 1, 213
insn=214, live_throughout: 2, 13, 149, 150, 151, 152, 213, dead_or_set: 0, 1, 134
insn=216, live_throughout: 13, 149, 150, 151, 152, 213, dead_or_set: 0, 1, 2, 14
insn=341, live_throughout: 1, 13, 149, 150, 151, 152, 213, dead_or_set: 0, 216
insn=342, live_throughout: 13, 149, 150, 151, 152, 213, 216, dead_or_set: 1, 217
insn=384, live_throughout: 13, 149, 150, 151, 152, 213, 216, 217, dead_or_set: 218
insn=385, live_throughout: 13, 149, 150, 151, 152, 213, 217, dead_or_set: 216, 218
insn=386, live_throughout: 13, 149, 150, 151, 152, 213, 218, dead_or_set: 217, 218
insn=220, live_throughout: 13, 149, 150, 151, 152, 213, 218, dead_or_set: 2, 3
insn=387, live_throughout: 2, 3, 13, 149, 150, 151, 152, 213, dead_or_set: 195, 218
insn=219, live_throughout: 2, 3, 13, 149, 150, 151, 152, 195, 213, dead_or_set: 0, 1
insn=221, live_throughout: 13, 149, 150, 151, 152, 195, 213, dead_or_set: 0, 1, 2, 3, 14
insn=223, live_throughout: 13, 14, 149, 150, 151, 152, 195, 213, dead_or_set: 0
insn=224, live_throughout: 13, 14, 149, 150, 151, 152, 195, 213, dead_or_set: 
insn=225, live_throughout: 13, 14, 149, 150, 151, 152, 213, dead_or_set: 195
insn=226, live_throughout: 13, 14, 149, 150, 151, 152, 195, 213, dead_or_set: 
insn=228, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 134, 195, 213
insn=370, live_throughout: 13, 14, 134, 149, 150, 151, 152, dead_or_set: 
insn=231, live_throughout: 13, 134, 149, 150, 151, 152, dead_or_set: 
insn=233, live_throughout: 13, 134, 149, 150, 151, 152, dead_or_set: 0, 1
insn=234, live_throughout: 0, 1, 13, 134, 149, 150, 151, 152, dead_or_set: 2, 3
insn=235, live_throughout: 13, 134, 149, 150, 151, 152, dead_or_set: 0, 1, 2, 3, 14
insn=237, live_throughout: 13, 14, 134, 149, 150, 151, 152, dead_or_set: 0
insn=238, live_throughout: 13, 14, 134, 149, 150, 151, 152, dead_or_set: 
insn=239, live_throughout: 13, 14, 149, 150, 151, 152, dead_or_set: 134
insn=241, live_throughout: 13, 14, 134, 149, 150, 151, 152, dead_or_set: 
insn=244, live_throughout: 13, 14, 134, 149, 150, 152, dead_or_set: 151, 199
insn=243, live_throughout: 13, 14, 134, 149, 150, 152, 199, dead_or_set: 198
insn=345, live_throughout: 13, 14, 134, 149, 152, 198, 199, dead_or_set: 150, 215
insn=245, live_throughout: 13, 14, 134, 149, 152, 215, dead_or_set: 198, 199
insn=246, live_throughout: 13, 14, 134, 149, 152, 215, dead_or_set: 
insn=249, live_throughout: 13, 14, 149, 152, dead_or_set: 134, 144, 215
insn=250, live_throughout: 13, 14, 144, 149, 152, dead_or_set: 
insn=251, live_throughout: 13, 14, 144, 149, 152, dead_or_set: 
insn=272, live_throughout: 13, 14, 144, 149, 152, dead_or_set: 
insn=273, live_throughout: 13, 14, 144, 149, 152, dead_or_set: 
insn=374, live_throughout: 13, 14, 144, 149, 152, dead_or_set: 
insn=331, live_throughout: 13, 14, 144, 149, dead_or_set: 
insn=260, live_throughout: 13, 14, 144, 149, dead_or_set: 202
insn=265, live_throughout: 13, 14, 149, 202, dead_or_set: 144
insn=262, live_throughout: 13, 14, 144, 149, 202, dead_or_set: 204
insn=263, live_throughout: 13, 14, 144, 149, dead_or_set: 202, 203, 204
insn=264, live_throughout: 13, 14, 144, 149, dead_or_set: 203
insn=376, live_throughout: 13, 14, 144, 149, dead_or_set: 
insn=373, live_throughout: 13, 14, 144, 149, 152, dead_or_set: 
insn=275, live_throughout: 13, 14, 144, 149, dead_or_set: 152, 206
insn=354, live_throughout: 13, 14, 144, 149, dead_or_set: 146, 206
insn=287, live_throughout: 13, 14, 144, 149, dead_or_set: 146
insn=378, live_throughout: 13, 14, 144, 149, dead_or_set: 
insn=290, live_throughout: 13, 14, 134, 149, 215, dead_or_set: 
insn=293, live_throughout: 13, 14, 149, dead_or_set: 134, 144, 215
insn=294, live_throughout: 13, 14, 144, 149, dead_or_set: 
insn=297, live_throughout: 13, 14, 144, 149, dead_or_set: 138
insn=296, live_throughout: 13, 14, 138, dead_or_set: 144, 149
insn=298, live_throughout: 13, 14, 138, dead_or_set: 
insn=304, live_throughout: 13, 14, dead_or_set: 0, 138
insn=310, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 153: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 22 (nil))
init_insns for 166: (insn_list:REG_DEP_TRUE 56 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 71 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 90 (nil))
init_insns for 177: (insn_list:REG_DEP_TRUE 105 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 130 (nil))
init_insns for 180: (insn_list:REG_DEP_TRUE 131 (nil))
init_insns for 204: (insn_list:REG_DEP_TRUE 262 (nil))
      Slot 1 (freq,size): a16r195(4000,8)
      Slot 2 (freq,size): a15r213(4000,8)
      Assigning 213(freq=6000) a new slot 1
      Assigning 195(freq=4000) a new slot 0
changing reg in insn 48
changing reg in insn 50
changing reg in insn 228
changing reg in insn 239
changing reg in insn 201
changing reg in insn 293
changing reg in insn 249
changing reg in insn 233
changing reg in insn 214
changing reg in insn 208
changing reg in insn 144
changing reg in insn 146
changing reg in insn 158
changing reg in insn 297
changing reg in insn 182
changing reg in insn 175
changing reg in insn 304
changing reg in insn 348
changing reg in insn 66
changing reg in insn 144
changing reg in insn 350
changing reg in insn 352
changing reg in insn 125
changing reg in insn 100
changing reg in insn 162
changing reg in insn 146
changing reg in insn 60
changing reg in insn 72
changing reg in insn 72
changing reg in insn 94
changing reg in insn 106
changing reg in insn 106
changing reg in insn 86
changing reg in insn 91
changing reg in insn 122
changing reg in insn 293
changing reg in insn 249
changing reg in insn 265
changing reg in insn 296
changing reg in insn 265
changing reg in insn 354
changing reg in insn 202
changing reg in insn 215
changing reg in insn 205
changing reg in insn 209
changing reg in insn 2
changing reg in insn 196
changing reg in insn 196
changing reg in insn 196
changing reg in insn 196
changing reg in insn 188
changing reg in insn 188
changing reg in insn 188
changing reg in insn 188
changing reg in insn 296
changing reg in insn 287
changing reg in insn 264
changing reg in insn 260
changing reg in insn 166
changing reg in insn 176
changing reg in insn 49
changing reg in insn 3
changing reg in insn 345
changing reg in insn 195
changing reg in insn 195
changing reg in insn 195
changing reg in insn 195
changing reg in insn 187
changing reg in insn 187
changing reg in insn 187
changing reg in insn 187
changing reg in insn 243
changing reg in insn 197
changing reg in insn 167
changing reg in insn 149
changing reg in insn 60
changing reg in insn 55
changing reg in insn 48
changing reg in insn 43
changing reg in insn 9
changing reg in insn 9
changing reg in insn 50
changing reg in insn 4
changing reg in insn 244
changing reg in insn 201
changing reg in insn 198
changing reg in insn 168
changing reg in insn 150
changing reg in insn 131
changing reg in insn 130
changing reg in insn 94
changing reg in insn 86
changing reg in insn 49
changing reg in insn 44
changing reg in insn 22
changing reg in insn 131
changing reg in insn 130
changing reg in insn 22
changing reg in insn 5
changing reg in insn 275
changing reg in insn 169
changing reg in insn 9
changing reg in insn 10
changing reg in insn 22
changing reg in insn 23
changing reg in insn 43
changing reg in insn 45
changing reg in insn 44
changing reg in insn 45
changing reg in insn 55
changing reg in insn 57
changing reg in insn 56
changing reg in insn 57
changing reg in insn 72
changing reg in insn 71
changing reg in insn 72
changing reg in insn 90
changing reg in insn 91
changing reg in insn 106
changing reg in insn 130
changing reg in insn 351
changing reg in insn 131
changing reg in insn 351
changing reg in insn 149
changing reg in insn 151
changing reg in insn 150
changing reg in insn 151
changing reg in insn 197
changing reg in insn 202
changing reg in insn 202
changing reg in insn 198
changing reg in insn 202
changing reg in insn 202
changing reg in insn 243
changing reg in insn 245
changing reg in insn 244
changing reg in insn 245
changing reg in insn 260
changing reg in insn 263
changing reg in insn 263
changing reg in insn 263
changing reg in insn 262
changing reg in insn 263
changing reg in insn 275
changing reg in insn 354
changing reg in insn 345
changing reg in insn 293
changing reg in insn 249
changing reg in insn 341
changing reg in insn 385
changing reg in insn 342
changing reg in insn 386
changing reg in insn 384
changing reg in insn 387
changing reg in insn 386
changing reg in insn 385
Spilling for insn 63.
Using reg 1 for reload 0
Spilling for insn 97.
Using reg 0 for reload 0
Spilling for insn 106.
Using reg 8 for reload 0
Spilling for insn 351.
Spilling for insn 335.
Spilling for insn 336.
Spilling for insn 387.
Spilling for insn 225.
Using reg 2 for reload 0
Spilling for insn 228.
Using reg 2 for reload 1
Spilling for insn 249.
Spilling for insn 272.
Using reg 1 for reload 0
Spilling for insn 264.
Spilling for insn 287.
Spilling for insn 293.
Spilling for insn 296.
      Spill 176(a31), cost=20000
      Spilled regs 176
        Try assign 177(a32), cost=20000
changing reg in insn 106
      Assigning 176(freq=2000) slot 0 of 195
 Register 176 now on stack.

Spilling for insn 63.
Using reg 1 for reload 0
Spilling for insn 97.
Using reg 0 for reload 0
Spilling for insn 106.
Using reg 8 for reload 0
Using reg 0 for reload 1
Spilling for insn 350.
Using reg 2 for reload 0
Spilling for insn 351.
Spilling for insn 335.
Spilling for insn 336.
Spilling for insn 387.
Spilling for insn 225.
Using reg 2 for reload 0
Spilling for insn 228.
Using reg 2 for reload 1
Spilling for insn 249.
Spilling for insn 272.
Using reg 1 for reload 0
Spilling for insn 264.
Spilling for insn 287.
Spilling for insn 293.
Spilling for insn 296.
      Spill 139(a27), cost=30000: reassign to 12
changing reg in insn 66
changing reg in insn 348
changing reg in insn 144
 Register 139 now in 12.

Spilling for insn 63.
Using reg 1 for reload 0
Spilling for insn 97.
Using reg 1 for reload 0
Spilling for insn 106.
Using reg 0 for reload 0
Using reg 8 for reload 1
Spilling for insn 350.
Using reg 2 for reload 0
Spilling for insn 351.
Spilling for insn 335.
Spilling for insn 336.
Spilling for insn 387.
Spilling for insn 225.
Using reg 2 for reload 0
Spilling for insn 228.
Using reg 2 for reload 1
Spilling for insn 249.
Spilling for insn 272.
Using reg 1 for reload 0
Spilling for insn 264.
Spilling for insn 287.
Spilling for insn 293.
Spilling for insn 296.
deleting insn with uid = 105.

Reloads for insn # 63
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 97
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 106
Reload 0: reload_out (DI) = (reg:DI 176)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 176)
	reload_reg_rtx: (reg:DI 8 r8)
Reload 1: reload_in (DI) = (const_int 2305843009213693952 [0x2000000000000000])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 177)
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 350
Reload 0: reload_in (SI) = (subreg:SI (reg:DI 176) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 3)
	reload_in_reg: (subreg:SI (reg:DI 176) 4)
	reload_reg_rtx: (reg:SI 9 r9)

Reloads for insn # 351
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 335
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 213 [ D.5921 ]) 0)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 213 [ D.5921 ]) 0)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 336
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 213 [ D.5921 ]) 4)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 213 [ D.5921 ]) 4)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 387
Reload 0: reload_out (DI) = (reg:DI 195 [+4 ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg:DI 195 [+4 ])

Reloads for insn # 225
Reload 0: reload_out (DI) = (reg:DI 195 [+4 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 195 [+4 ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 228
Reload 0: reload_in (DI) = (reg:DI 195 [+4 ])
	reload_out (DI) = (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 195 [+4 ])
	reload_out_reg: (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
	reload_reg_rtx: (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
Reload 1: reload_in (DI) = (reg:DI 213 [ D.5921 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 213 [ D.5921 ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 249
Reload 0: reload_in (DI) = (reg:DI 0 r0 [orig:215 <variable>.significand ] [215])
	reload_out (DI) = (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 0 r0 [orig:215 <variable>.significand ] [215])
	reload_out_reg: (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
	reload_reg_rtx: (reg/v:DI 2 r2 [orig:144 m_sig ] [144])

Reloads for insn # 272
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 264
Reload 0: reload_out (HI) = (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                                                        (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                                                        (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])

Reloads for insn # 287
Reload 0: reload_out (HI) = (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                                                        (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                                                        (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])

Reloads for insn # 293
Reload 0: reload_in (DI) = (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
	reload_out (DI) = (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
	reload_out_reg: (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
	reload_reg_rtx: (reg/v:DI 2 r2 [orig:144 m_sig ] [144])

Reloads for insn # 296
Reload 0: reload_out (DI) = (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                                                        (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
deleting insn with uid = 334.
deleting insn with uid = 335.
deleting insn with uid = 336.
deleting insn with uid = 341.
deleting insn with uid = 342.
deleting insn with uid = 384.
+++Overall after reload 118000


try_optimize_cfg iteration 1

Forwarding edge 19->20 to 25 failed.
Forwarding edge 36->37 to 39 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 170.
verify found no changes in insn with uid = 210.
verify found no changes in insn with uid = 216.
verify found no changes in insn with uid = 221.
verify found no changes in insn with uid = 235.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 43 n_edges 61 count 83 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 43 n_edges 61 count 84 (    2)


vfp_double_add

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={22d,20u,1d} r1={23d,18u} r2={29d,26u,2d} r3={35d,31u,2d} r4={3d,18u,1d} r5={1d,13u} r6={2d,12u,3d} r7={2d,5u} r8={7d,9u} r9={7d,10u} r10={3d,4u} r12={12d,2u} r13={1d,56u} r14={6d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={32d,20u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 1099{845d,245u,9e} in 143{137 regular + 6 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 3 2 NOTE_INSN_FUNCTION_BEG)

(insn 3 6 2 2 arch/arm/vfp/vfpdouble.c:727 (set (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
        (reg:SI 1 r1 [ vdn ])) 167 {*arm_movsi_insn} (nil))

(insn 2 3 4 2 arch/arm/vfp/vfpdouble.c:727 (set (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
        (reg:SI 0 r0 [ vdd ])) 167 {*arm_movsi_insn} (nil))

(insn 4 2 5 2 arch/arm/vfp/vfpdouble.c:727 (set (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
        (reg:SI 2 r2 [ vdm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 9 2 arch/arm/vfp/vfpdouble.c:727 (set (reg/v:SI 10 sl [orig:152 fpscr ] [152])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(insn 9 5 10 2 arch/arm/vfp/vfpdouble.c:731 (set (reg:SI 3 r3 [orig:153 <variable>.significand+4 ] [153])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])
        (nil)))

(insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:731 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:153 <variable>.significand+4 ] [153])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 11 10 312 2 arch/arm/vfp/vfpdouble.c:731 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2100 [0x834])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  4 [21.0%] 
;; Succ edge  3 [79.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [79.0%]  (fallthru)
(note 312 11 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 22 312 23 3 arch/arm/vfp/vfpdouble.c:732 (set (reg:SI 3 r3 [orig:156 <variable>.significand+4 ] [156])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])
        (nil)))

(insn 23 22 24 3 arch/arm/vfp/vfpdouble.c:732 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:156 <variable>.significand+4 ] [156])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 34 3 arch/arm/vfp/vfpdouble.c:732 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7900 [0x1edc])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  4 [21.0%]  (fallthru)
;; Succ edge  5 [79.0%] 

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [21.0%]  (fallthru)
;; Pred edge  2 [21.0%] 
(code_label 34 24 35 4 226 "" [1 uses])

(note 35 34 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 38 35 39 4 arch/arm/vfp/vfpdouble.c:733 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10c13140>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10c13140>)
        (nil)))

(insn 39 38 40 4 arch/arm/vfp/vfpdouble.c:733 (set (reg:SI 1 r1)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn 40 39 41 4 arch/arm/vfp/vfpdouble.c:733 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [79.0%] 
(code_label 41 40 42 5 228 "" [1 uses])

(note 42 41 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 5 arch/arm/vfp/vfpdouble.c:743 (set (reg:SI 2 r2 [orig:161 <variable>.exponent ] [161])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 44 43 45 5 arch/arm/vfp/vfpdouble.c:743 (set (reg:SI 3 r3 [orig:162 <variable>.exponent ] [162])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 45 44 46 5 arch/arm/vfp/vfpdouble.c:743 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:161 <variable>.exponent ] [161])
            (reg:SI 3 r3 [orig:162 <variable>.exponent ] [162]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 46 45 47 5 arch/arm/vfp/vfpdouble.c:743 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 6 [r6]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 6 arch/arm/vfp/vfpdouble.c:743 (set (reg/v/f:SI 3 r3 [orig:133 vdn.778 ] [133])
        (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 49 48 50 6 arch/arm/vfp/vfpdouble.c:745 (set (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
        (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])) 167 {*arm_movsi_insn} (nil))

(insn 50 49 51 6 arch/arm/vfp/vfpdouble.c:746 (set (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
        (reg/v/f:SI 3 r3 [orig:133 vdn.778 ] [133])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 51 50 52 7 230 "" [1 uses])

(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 53 52 54 7 NOTE_INSN_DELETED)

(note 54 53 55 7 NOTE_INSN_DELETED)

(insn 55 54 56 7 arch/arm/vfp/vfpdouble.c:753 (set (reg:SI 2 r2 [orig:165 <variable>.exponent ] [165])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 56 55 57 7 arch/arm/vfp/vfpdouble.c:753 (set (reg:SI 3 r3 [166])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 57 56 58 7 arch/arm/vfp/vfpdouble.c:753 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:165 <variable>.exponent ] [165])
            (reg:SI 3 r3 [166]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 58 57 59 7 arch/arm/vfp/vfpdouble.c:753 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 191)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 7 -> ( 8 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  8 [28.0%]  (fallthru)
;; Succ edge  27 [72.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 0 [r0]

;; Pred edge  7 [28.0%]  (fallthru)
(note 59 58 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 61 59 62 8 NOTE_INSN_DELETED)

(note 62 61 60 8 NOTE_INSN_DELETED)

(insn 60 62 63 8 arch/arm/vfp/vfp.h:331 (set (reg:DI 2 r2 [orig:141 D.5906 ] [141])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 63 60 64 8 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:141 D.5906 ] [141])
                        (reg:SI 3 r3 [ D.5906+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 0 r0))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 64 63 65 8 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 12 [ip]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 65 64 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 355 9 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 12 ip [orig:139 tn ] [139])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 355 66 356 9 (set (pc)
        (label_ref 84)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 356 355 69)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  8 [50.0%] 
(code_label 69 356 70 10 232 "" [1 uses])

(note 70 69 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 73 70 74 10 NOTE_INSN_DELETED)

(note 74 73 347 10 NOTE_INSN_DELETED)

(note 347 74 71 10 NOTE_INSN_DELETED)

(insn 71 347 72 10 arch/arm/vfp/vfp.h:333 (set (reg:DI 8 r8 [169])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 72 71 348 10 arch/arm/vfp/vfp.h:333 (set (reg:DI 0 r0 [168])
        (and:DI (reg:DI 2 r2 [orig:141 D.5906 ] [141])
            (reg:DI 8 r8 [169]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 2 r2 [orig:141 D.5906 ] [141])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 348 72 84 10 arch/arm/vfp/vfp.h:336 (parallel [
            (set (reg/v:SI 12 ip [orig:139 tn ] [139])
                (if_then_else:SI (ne (reg:SI 1 r1 [+4 ])
                        (const_int 0 [0x0]))
                    (const_int 16 [0x10])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 84 348 85 11 233 "" [1 uses])

(note 85 84 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 87 85 88 11 NOTE_INSN_DELETED)

(note 88 87 89 11 NOTE_INSN_DELETED)

(note 89 88 86 11 NOTE_INSN_DELETED)

(insn 86 89 90 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 3 r3 [orig:143 D.5902 ] [143])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 90 86 91 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 2 r2 [174])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 91 90 92 11 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:143 D.5902 ] [143])
            (reg:SI 2 r2 [174]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 92 91 93 11 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 11 -> ( 12 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  12 [28.0%]  (fallthru)
;; Succ edge  15 [72.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  11 [28.0%]  (fallthru)
(note 93 92 95 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 95 93 96 12 NOTE_INSN_DELETED)

(note 96 95 94 12 NOTE_INSN_DELETED)

(insn 94 96 97 12 arch/arm/vfp/vfp.h:331 (set (reg:DI 2 r2 [orig:142 D.5903 ] [142])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 97 94 98 12 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:142 D.5903 ] [142])
                        (reg:SI 3 r3 [ D.5903+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 98 97 99 12 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  13 [50.0%]  (fallthru)
;; Succ edge  14 [50.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 99 98 100 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 100 99 357 13 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 3 r3 [orig:140 tm ] [140])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 357 100 358 13 (set (pc)
        (label_ref 142)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 18)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 358 357 103)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 9 [r9]
;; live  kill	 24 [cc]

;; Pred edge  12 [50.0%] 
(code_label 103 358 104 14 236 "" [1 uses])

(note 104 103 107 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 107 104 108 14 NOTE_INSN_DELETED)

(note 108 107 349 14 NOTE_INSN_DELETED)

(note 349 108 105 14 NOTE_INSN_DELETED)

(note 105 349 391 14 NOTE_INSN_DELETED)

(insn 391 105 106 14 arch/arm/vfp/vfp.h:333 (set (reg:DI 0 r0)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 106 391 390 14 arch/arm/vfp/vfp.h:333 (set (reg:DI 8 r8)
        (and:DI (reg:DI 2 r2 [orig:142 D.5903 ] [142])
            (reg:DI 0 r0))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 2 r2 [orig:142 D.5903 ] [142])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 390 106 350 14 arch/arm/vfp/vfp.h:333 (set (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-16 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 350 390 359 14 arch/arm/vfp/vfp.h:336 (parallel [
            (set (reg/v:SI 3 r3 [orig:140 tm ] [140])
                (if_then_else:SI (ne (reg:SI 9 r9)
                        (const_int 0 [0x0]))
                    (const_int 16 [0x10])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(jump_insn 359 350 360 14 (set (pc)
        (label_ref 142)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 18)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 360 359 120)

;; Start of basic block ( 11) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [72.0%] 
(code_label 120 360 121 15 235 "" [1 uses])

(note 121 120 122 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 122 121 123 15 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:143 D.5902 ] [143])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 123 122 124 15 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 15 -> ( 17 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  17 [50.0%] 
;; Succ edge  16 [50.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  15 [50.0%]  (fallthru)
(note 124 123 125 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 125 124 361 16 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 3 r3 [orig:140 tm ] [140])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 361 125 362 16 (set (pc)
        (label_ref 142)) 242 {*arm_jump} (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%] 

(barrier 362 361 128)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 3 [r3]

;; Pred edge  15 [50.0%] 
(code_label 128 362 129 17 239 "" [1 uses])

(note 129 128 132 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 132 129 130 17 NOTE_INSN_DELETED)

(insn 130 132 131 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 2 r2 [orig:179 <variable>.significand ] [179])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])
        (nil)))

(insn 131 130 351 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 3 r3 [orig:180 <variable>.significand+4 ] [180])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])
        (nil)))

(insn 351 131 352 17 arch/arm/vfp/vfp.h:341 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:179 <variable>.significand ] [179])
                        (reg:SI 3 r3 [orig:180 <variable>.significand+4 ] [180]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 3 r3))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 352 351 142 17 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 3 r3 [orig:140 tm ] [140])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 17 14 13 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  16 [100.0%] 
(code_label 142 352 143 18 237 "" [3 uses])

(note 143 142 145 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 145 143 144 18 NOTE_INSN_DELETED)

(insn 144 145 146 18 arch/arm/vfp/vfpdouble.c:693 (set (reg:SI 2 r2 [orig:137 D.5913 ] [137])
        (and:SI (reg/v:SI 12 ip [orig:139 tn ] [139])
            (const_int 8 [0x8]))) 67 {*arm_andsi3_insn} (nil))

(insn 146 144 147 18 arch/arm/vfp/vfpdouble.c:693 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 3 r3 [orig:140 tm ] [140])
                        (reg:SI 2 r2 [orig:137 D.5913 ] [137]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 147 146 148 18 arch/arm/vfp/vfpdouble.c:693 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 156)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18 -> ( 19 21)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  18 [50.0%]  (fallthru)
(note 148 147 150 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 150 148 149 19 arch/arm/vfp/vfpdouble.c:697 (set (reg:SI 3 r3 [orig:183 <variable>.sign ] [183])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 149 150 151 19 arch/arm/vfp/vfpdouble.c:697 (set (reg:SI 2 r2 [orig:182 <variable>.sign ] [182])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 151 149 152 19 arch/arm/vfp/vfpdouble.c:697 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:182 <variable>.sign ] [182])
            (reg:SI 3 r3 [orig:183 <variable>.sign ] [183]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 152 151 363 19 arch/arm/vfp/vfpdouble.c:697 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 173)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 19 -> ( 24 20)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  24 [72.0%] 
;; Succ edge  20 [28.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  19 [28.0%]  (fallthru)
(note 363 152 364 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(jump_insn 364 363 365 20 (set (pc)
        (label_ref 180)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 25)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  25 [100.0%] 

(barrier 365 364 156)

;; Start of basic block ( 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [50.0%] 
(code_label 156 365 157 21 241 "" [1 uses])

(note 157 156 158 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 158 157 159 21 arch/arm/vfp/vfpdouble.c:709 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:137 D.5913 ] [137])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 159 158 160 21 arch/arm/vfp/vfpdouble.c:709 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 164)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  22 [71.0%]  (fallthru)
;; Succ edge  23 [29.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  21 [71.0%]  (fallthru)
(note 160 159 161 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 161 160 162 22 NOTE_INSN_DELETED)

(insn 162 161 163 22 arch/arm/vfp/vfpdouble.c:709 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:140 tm ] [140])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 163 162 164 22 arch/arm/vfp/vfpdouble.c:709 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 180)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 22 -> ( 25 23)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  25 [50.0%] 
;; Succ edge  23 [50.0%]  (fallthru)

;; Start of basic block ( 21 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  21 [29.0%] 
;; Pred edge  22 [50.0%]  (fallthru)
(code_label 164 163 165 23 244 "" [1 uses])

(note 165 164 166 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 166 165 167 23 arch/arm/vfp/vfpdouble.c:718 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])) 167 {*arm_movsi_insn} (nil))

(insn 167 166 168 23 arch/arm/vfp/vfpdouble.c:718 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 168 167 169 23 arch/arm/vfp/vfpdouble.c:718 (set (reg:SI 2 r2)
        (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])) 167 {*arm_movsi_insn} (nil))

(insn 169 168 170 23 arch/arm/vfp/vfpdouble.c:718 (set (reg:SI 3 r3)
        (reg/v:SI 10 sl [orig:152 fpscr ] [152])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 170 169 171 23 arch/arm/vfp/vfpdouble.c:718 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 23 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 171 170 173)

;; Start of basic block ( 19) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 12 [ip]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 12 [ip]
;; live  kill	

;; Pred edge  19 [72.0%] 
(code_label 173 171 174 24 242 "" [1 uses])

(note 174 173 175 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 175 174 176 24 arch/arm/vfp/vfpdouble.c:701 (set (reg/v:SI 12 ip [orig:138 exceptions ] [138])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 176 175 366 24 arch/arm/vfp/vfpdouble.c:702 (set (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(jump_insn 366 176 367 24 (set (pc)
        (label_ref 183)) 242 {*arm_jump} (nil))
;; End of basic block 24 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  26 [100.0%] 

(barrier 367 366 180)

;; Start of basic block ( 22 20) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 12 [ip]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip]
;; live  kill	

;; Pred edge  22 [50.0%] 
;; Pred edge  20 [100.0%] 
(code_label 180 367 181 25 243 "" [2 uses])

(note 181 180 182 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 182 181 183 25 arch/arm/vfp/vfpdouble.c:687 (set (reg/v:SI 12 ip [orig:138 exceptions ] [138])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 25 -> ( 26)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  26 [100.0%]  (fallthru)

;; Start of basic block ( 25 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  25 [100.0%]  (fallthru)
;; Pred edge  24 [100.0%] 
(code_label 183 182 184 26 245 "" [1 uses])

(note 184 183 187 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 187 184 188 26 arch/arm/vfp/vfpdouble.c:720 (parallel [
            (set (reg:SI 0 r0)
                (mem/s:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150]) [0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                        (const_int 4 [0x4])) [0 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                        (const_int 8 [0x8])) [0 S4 A64]))
            (set (reg:SI 3 r3)
                (mem/s:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                        (const_int 12 [0xc])) [0 S4 A32]))
        ]) 188 {*ldmsi4} (nil))

(insn 188 187 368 26 arch/arm/vfp/vfpdouble.c:720 (parallel [
            (set (mem/s:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149]) [0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                        (const_int 4 [0x4])) [0 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                        (const_int 8 [0x8])) [0 S4 A64])
                (reg:SI 2 r2))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                        (const_int 12 [0xc])) [0 S4 A32])
                (reg:SI 3 r3))
        ]) 195 {*stmsi4} (nil))

(jump_insn 368 188 369 26 (set (pc)
        (label_ref 298)) 242 {*arm_jump} (nil))
;; End of basic block 26 -> ( 42)
;; lr  out 	 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  42 [100.0%] 

(barrier 369 368 191)

;; Start of basic block ( 7) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  7 [72.0%] 
(code_label 191 369 192 27 231 "" [1 uses])

(note 192 191 199 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(note 199 192 195 27 NOTE_INSN_DELETED)

(insn 195 199 196 27 arch/arm/vfp/vfpdouble.c:761 (parallel [
            (set (reg:SI 0 r0)
                (mem/s:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150]) [0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                        (const_int 4 [0x4])) [0 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                        (const_int 8 [0x8])) [0 S4 A64]))
            (set (reg:SI 3 r3)
                (mem/s:SI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                        (const_int 12 [0xc])) [0 S4 A32]))
        ]) 188 {*ldmsi4} (nil))

(insn 196 195 197 27 arch/arm/vfp/vfpdouble.c:761 (parallel [
            (set (mem/s:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149]) [0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                        (const_int 4 [0x4])) [0 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                        (const_int 8 [0x8])) [0 S4 A64])
                (reg:SI 2 r2))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                        (const_int 12 [0xc])) [0 S4 A32])
                (reg:SI 3 r3))
        ]) 195 {*stmsi4} (nil))

(insn 197 196 198 27 arch/arm/vfp/vfpdouble.c:766 (set (reg:SI 7 r7 [orig:190 <variable>.exponent ] [190])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 198 197 201 27 arch/arm/vfp/vfpdouble.c:766 (set (reg:SI 3 r3 [orig:191 <variable>.exponent ] [191])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 201 198 202 27 arch/arm/vfp/vfpdouble.c:767 (set (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 202 201 203 27 arch/arm/vfp/vfp.h:25 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg:SI 7 r7 [orig:190 <variable>.exponent ] [190])
                        (reg:SI 3 r3 [orig:191 <variable>.exponent ] [191]))
                    (const_int 0 [0x0])))
            (set (reg:SI 7 r7 [orig:147 D.4751 ] [147])
                (minus:SI (reg:SI 7 r7 [orig:190 <variable>.exponent ] [190])
                    (reg:SI 3 r3 [orig:191 <variable>.exponent ] [191])))
        ]) 29 {*subsi3_compare0} (nil))

(jump_insn 203 202 204 27 arch/arm/vfp/vfp.h:25 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 241)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 27 -> ( 28 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  28 [50.0%]  (fallthru)
;; Succ edge  34 [50.0%] 

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  27 [50.0%]  (fallthru)
(note 204 203 205 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 205 204 206 28 arch/arm/vfp/vfp.h:26 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [orig:147 D.4751 ] [147])
            (const_int 63 [0x3f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 206 205 207 28 arch/arm/vfp/vfp.h:26 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 231)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 28 -> ( 29 32)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  29 [50.0%]  (fallthru)
;; Succ edge  32 [50.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  28 [50.0%]  (fallthru)
(note 207 206 332 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 332 207 333 29 NOTE_INSN_DELETED)

(note 333 332 213 29 NOTE_INSN_DELETED)

(note 213 333 338 29 NOTE_INSN_DELETED)

(note 338 213 339 29 NOTE_INSN_DELETED)

(note 339 338 222 29 NOTE_INSN_DELETED)

(note 222 339 209 29 NOTE_INSN_DELETED)

(insn 209 222 208 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 2 r2)
        (reg:SI 7 r7 [orig:147 D.4751 ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 208 209 210 29 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])) 163 {*arm_movdi} (nil))

(call_insn/u 210 208 215 29 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 215 210 392 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 2 r2)
        (minus:SI (const_int 64 [0x40])
            (reg:SI 7 r7 [orig:147 D.4751 ] [147]))) 28 {*arm_subsi3_insn} (nil))

(insn 392 215 393 29 arch/arm/vfp/vfp.h:27 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-8 S4 A64])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 393 392 214 29 arch/arm/vfp/vfp.h:27 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-4 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 214 393 216 29 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])) 163 {*arm_movdi} (nil))

(call_insn/u 216 214 385 29 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 385 216 386 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 8 r8 [orig:218+4 ] [218])
        (reg:SI 0 r0 [orig:216+4 ] [216])) 167 {*arm_movsi_insn} (nil))

(insn 386 385 220 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 9 r9 [+8 ])
        (reg:SI 1 r1 [orig:217+8 ] [217])) 167 {*arm_movsi_insn} (nil))

(insn 220 386 387 29 arch/arm/vfp/vfp.h:27 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 387 220 219 29 arch/arm/vfp/vfp.h:27 (set (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-16 S8 A64])
        (reg:DI 8 r8 [orig:218+4 ] [218])) 163 {*arm_movdi} (nil))

(insn 219 387 221 29 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-16 S8 A64])) 163 {*arm_movdi} (nil))

(call_insn/u 221 219 223 29 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_ulcmp") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 223 221 224 29 arch/arm/vfp/vfp.h:27 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 224 223 320 29 arch/arm/vfp/vfp.h:27 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 226)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 29 -> ( 31 30)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]


;; Succ edge  31 [29.0%] 
;; Succ edge  30 [71.0%]  (fallthru)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  29 [71.0%]  (fallthru)
(note 320 224 225 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 225 320 394 30 arch/arm/vfp/vfp.h:27 (set (reg:DI 2 r2)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 394 225 226 30 arch/arm/vfp/vfp.h:27 (set (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-16 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))
;; End of basic block 30 -> ( 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]


;; Succ edge  31 [100.0%]  (fallthru)

;; Start of basic block ( 29 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 8 [r8] 9 [r9]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  29 [29.0%] 
;; Pred edge  30 [100.0%]  (fallthru)
(code_label 226 394 321 31 249 "" [1 uses])

(note 321 226 395 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 395 321 396 31 arch/arm/vfp/vfp.h:27 (set (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
        (mem/c:DI (reg/f:SI 13 sp) [0 %sfp+-16 S8 A64])) 163 {*arm_movdi} (nil))

(insn 396 395 228 31 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-8 S8 A64])) 163 {*arm_movdi} (nil))

(insn 228 396 370 31 arch/arm/vfp/vfp.h:27 (set (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
        (ior:DI (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
            (reg:DI 0 r0))) 86 {iordi3} (nil))

(jump_insn 370 228 371 31 (set (pc)
        (label_ref 241)) 242 {*arm_jump} (nil))
;; End of basic block 31 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  34 [100.0%] 

(barrier 371 370 231)

;; Start of basic block ( 28) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  28 [50.0%] 
(code_label 231 371 232 32 248 "" [1 uses])

(note 232 231 236 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(note 236 232 233 32 NOTE_INSN_DELETED)

(insn 233 236 234 32 arch/arm/vfp/vfp.h:29 (set (reg:DI 0 r0)
        (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])) 163 {*arm_movdi} (nil))

(insn 234 233 235 32 arch/arm/vfp/vfp.h:29 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(call_insn/u 235 234 237 32 arch/arm/vfp/vfp.h:29 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_ulcmp") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 237 235 238 32 arch/arm/vfp/vfp.h:29 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 238 237 322 32 arch/arm/vfp/vfp.h:29 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 241)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 32 -> ( 34 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  34 [29.0%] 
;; Succ edge  33 [71.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8] 9 [r9]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  32 [71.0%]  (fallthru)
(note 322 238 239 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 239 322 241 33 arch/arm/vfp/vfp.h:29 (set (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  34 [100.0%]  (fallthru)

;; Start of basic block ( 27 32 33 31) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  27 [50.0%] 
;; Pred edge  32 [29.0%] 
;; Pred edge  33 [100.0%]  (fallthru)
;; Pred edge  31 [100.0%] 
(code_label 241 239 242 34 247 "" [3 uses])

(note 242 241 244 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 244 242 243 34 arch/arm/vfp/vfpdouble.c:772 (set (reg:SI 3 r3 [orig:199 <variable>.sign ] [199])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 6 r6 [orig:151 vdm ] [151])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 243 244 345 34 arch/arm/vfp/vfpdouble.c:772 (set (reg:SI 2 r2 [orig:198 <variable>.sign ] [198])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 345 243 245 34 (set (reg:DI 0 r0 [orig:215 <variable>.significand ] [215])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 4 r4 [orig:150 vdn ] [150])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 245 345 246 34 arch/arm/vfp/vfpdouble.c:772 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:198 <variable>.sign ] [198])
            (reg:SI 3 r3 [orig:199 <variable>.sign ] [199]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 246 245 247 34 arch/arm/vfp/vfpdouble.c:772 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 290)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 34 -> ( 35 40)
;; lr  out 	 0 [r0] 1 [r1] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  35 [72.0%]  (fallthru)
;; Succ edge  40 [28.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  34 [72.0%]  (fallthru)
(note 247 246 397 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 397 247 249 35 arch/arm/vfp/vfpdouble.c:773 (set (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
        (reg:DI 0 r0 [orig:215 <variable>.significand ] [215])) 163 {*arm_movdi} (nil))

(insn 249 397 250 35 arch/arm/vfp/vfpdouble.c:773 (parallel [
            (set (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
                (minus:DI (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
                    (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])))
            (clobber (reg:CC 24 cc))
        ]) 20 {*arm_subdi3} (nil))

(insn 250 249 251 35 arch/arm/vfp/vfpdouble.c:774 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ m_sig+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 251 250 324 35 arch/arm/vfp/vfpdouble.c:774 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 331)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2100 [0x834])
        (nil)))
;; End of basic block 35 -> ( 38 36)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  38 [21.0%] 
;; Succ edge  36 [79.0%]  (fallthru)

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  35 [79.0%]  (fallthru)
(note 324 251 270 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(note 270 324 271 36 NOTE_INSN_DELETED)

(note 271 270 272 36 NOTE_INSN_DELETED)

(insn 272 271 273 36 arch/arm/vfp/vfpdouble.c:777 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:144 m_sig ] [144])
                        (reg:SI 3 r3 [ m_sig+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 273 272 372 36 arch/arm/vfp/vfpdouble.c:777 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 294)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 36 -> ( 37 41)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  37 [50.0%]  (fallthru)
;; Succ edge  41 [50.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  36 [50.0%]  (fallthru)
(note 372 273 374 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(jump_insn 374 372 375 37 (set (pc)
        (label_ref 373)) 242 {*arm_jump} (nil))
;; End of basic block 37 -> ( 39)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  39 [100.0%] 

(barrier 375 374 331)

;; Start of basic block ( 35) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  35 [21.0%] 
(code_label 331 375 259 38 259 "" [1 uses])

(note 259 331 260 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 260 259 265 38 arch/arm/vfp/vfpdouble.c:775 (set (reg:SI 0 r0 [orig:202 <variable>.sign ] [202])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 265 260 262 38 arch/arm/vfp/vfpdouble.c:776 (parallel [
            (set (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
                (neg:DI (reg/v:DI 2 r2 [orig:144 m_sig ] [144])))
            (clobber (reg:CC 24 cc))
        ]) 125 {*arm_negdi2} (nil))

(insn 262 265 263 38 arch/arm/vfp/vfpdouble.c:775 (set (reg:SI 1 r1 [204])
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -32768 [0xffffffffffff8000])
        (nil)))

(insn 263 262 264 38 arch/arm/vfp/vfpdouble.c:775 (set (reg:SI 1 r1 [203])
        (xor:SI (reg:SI 0 r0 [orig:202 <variable>.sign ] [202])
            (reg:SI 1 r1 [204]))) 96 {*arm_xorsi3} (expr_list:REG_EQUAL (xor:SI (reg:SI 0 r0 [orig:202 <variable>.sign ] [202])
            (const_int -32768 [0xffffffffffff8000]))
        (nil)))

(insn 264 263 376 38 arch/arm/vfp/vfpdouble.c:775 (set (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])
        (reg:HI 1 r1 [203])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 376 264 377 38 (set (pc)
        (label_ref 294)) 242 {*arm_jump} (nil))
;; End of basic block 38 -> ( 41)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  41 [100.0%] 

(barrier 377 376 373)

;; Start of basic block ( 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 10 [sl]
;; live  kill	 24 [cc]

;; Pred edge  37 [100.0%] 
(code_label 373 377 274 39 260 "" [1 uses])

(note 274 373 353 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(note 353 274 275 39 NOTE_INSN_DELETED)

(insn 275 353 354 39 arch/arm/vfp/vfpdouble.c:778 (set (reg:SI 10 sl [206])
        (and:SI (reg/v:SI 10 sl [orig:152 fpscr ] [152])
            (const_int 12582912 [0xc00000]))) 67 {*arm_andsi3_insn} (nil))

(insn 354 275 287 39 arch/arm/vfp/vfpdouble.c:778 discrim 2 (parallel [
            (set (reg:SI 10 sl [orig:146 iftmp.149 ] [146])
                (if_then_else:SI (eq (reg:SI 10 sl [206])
                        (const_int 8388608 [0x800000]))
                    (const_int 32768 [0x8000])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(insn 287 354 378 39 arch/arm/vfp/vfpdouble.c:778 discrim 3 (set (mem/s/j:HI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])
        (reg:HI 10 sl [orig:146 iftmp.149 ] [146])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 378 287 379 39 (set (pc)
        (label_ref 294)) 242 {*arm_jump} (nil))
;; End of basic block 39 -> ( 41)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  41 [100.0%] 

(barrier 379 378 290)

;; Start of basic block ( 34) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 5 [r5] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 5 [r5] 8 [r8] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  34 [28.0%] 
(code_label 290 379 291 40 251 "" [1 uses])

(note 291 290 398 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 398 291 293 40 arch/arm/vfp/vfpdouble.c:782 (set (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
        (reg/v:DI 8 r8 [orig:134 m_sig.774 ] [134])) 163 {*arm_movdi} (nil))

(insn 293 398 294 40 arch/arm/vfp/vfpdouble.c:782 (parallel [
            (set (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
                (plus:DI (reg/v:DI 2 r2 [orig:144 m_sig ] [144])
                    (reg:DI 0 r0 [orig:215 <variable>.significand ] [215])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))
;; End of basic block 40 -> ( 41)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  41 [100.0%]  (fallthru)

;; Start of basic block ( 36 40 38 39) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 12 [ip]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 12 [ip]
;; live  kill	

;; Pred edge  36 [50.0%] 
;; Pred edge  40 [100.0%]  (fallthru)
;; Pred edge  38 [100.0%] 
;; Pred edge  39 [100.0%] 
(code_label 294 293 295 41 254 "" [3 uses])

(note 295 294 297 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 297 295 296 41 arch/arm/vfp/vfpdouble.c:786 (set (reg/v:SI 12 ip [orig:138 exceptions ] [138])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 296 297 298 41 arch/arm/vfp/vfpdouble.c:784 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 5 r5 [orig:149 vdd ] [149])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:144 m_sig ] [144])) 163 {*arm_movdi} (nil))
;; End of basic block 41 -> ( 42)
;; lr  out 	 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  42 [100.0%]  (fallthru)

;; Start of basic block ( 41 26) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  41 [100.0%]  (fallthru)
;; Pred edge  26 [100.0%] 
(code_label 298 296 299 42 246 "" [1 uses])

(note 299 298 304 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 304 299 310 42 arch/arm/vfp/vfpdouble.c:787 (set (reg/i:SI 0 r0)
        (reg/v:SI 12 ip [orig:138 exceptions ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 310 304 388 42 arch/arm/vfp/vfpdouble.c:787 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 42 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 388 310 389 NOTE_INSN_DELETED)

(note 389 388 0 NOTE_INSN_DELETED)


;; Function vfp_double_fsub (vfp_double_fsub)[0:182]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 166.
verify found no changes in insn with uid = 166.
deleting insn with uid = 138.
scanning new insn with uid = 167.
verify found no changes in insn with uid = 167.
deleting insn with uid = 125.
scanning new insn with uid = 168.
verify found no changes in insn with uid = 168.
deleting insn with uid = 91.
scanning new insn with uid = 169.
verify found no changes in insn with uid = 169.
deleting insn with uid = 69.
scanning new insn with uid = 170.
verify found no changes in insn with uid = 170.
deleting insn with uid = 34.
scanning new insn with uid = 171.
verify found no changes in insn with uid = 171.
deleting insn with uid = 12.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)

Pass 0 for finding allocno costs

    a11 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a10(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a18(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a20(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a21(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a23(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000


Pass 1 for finding allocno costs

    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r202,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r203,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a10(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a18(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a20(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a21(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a23(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000

   Insn 156(l0): point = 0
   Insn 144(l0): point = 2
   Insn 139(l0): point = 4
   Insn 166(l0): point = 6
   Insn 143(l0): point = 8
   Insn 142(l0): point = 10
   Insn 141(l0): point = 12
   Insn 140(l0): point = 14
   Insn 136(l0): point = 16
   Insn 135(l0): point = 18
   Insn 127(l0): point = 20
   Insn 126(l0): point = 22
   Insn 167(l0): point = 24
   Insn 131(l0): point = 26
   Insn 134(l0): point = 28
   Insn 133(l0): point = 30
   Insn 132(l0): point = 32
   Insn 128(l0): point = 34
   Insn 123(l0): point = 36
   Insn 120(l0): point = 39
   Insn 119(l0): point = 41
   Insn 116(l0): point = 44
   Insn 115(l0): point = 46
   Insn 111(l0): point = 49
   Insn 109(l0): point = 51
   Insn 110(l0): point = 53
   Insn 106(l0): point = 56
   Insn 105(l0): point = 61
   Insn 103(l0): point = 64
   Insn 79(l0): point = 66
   Insn 87(l0): point = 68
   Insn 73(l0): point = 70
   Insn 71(l0): point = 72
   Insn 86(l0): point = 74
   Insn 85(l0): point = 76
   Insn 102(l0): point = 78
   Insn 168(l0): point = 80
   Insn 70(l0): point = 82
   Insn 169(l0): point = 87
   Insn 161(l0): point = 89
   Insn 82(l0): point = 91
   Insn 81(l0): point = 93
   Insn 83(l0): point = 95
   Insn 78(l0): point = 97
   Insn 68(l0): point = 99
   Insn 67(l0): point = 101
   Insn 66(l0): point = 103
   Insn 63(l0): point = 106
   Insn 62(l0): point = 108
   Insn 59(l0): point = 111
   Insn 58(l0): point = 113
   Insn 54(l0): point = 116
   Insn 52(l0): point = 118
   Insn 53(l0): point = 120
   Insn 49(l0): point = 123
   Insn 48(l0): point = 128
   Insn 46(l0): point = 131
   Insn 22(l0): point = 133
   Insn 30(l0): point = 135
   Insn 16(l0): point = 137
   Insn 14(l0): point = 139
   Insn 29(l0): point = 141
   Insn 28(l0): point = 143
   Insn 45(l0): point = 145
   Insn 170(l0): point = 147
   Insn 13(l0): point = 149
   Insn 171(l0): point = 154
   Insn 160(l0): point = 156
   Insn 25(l0): point = 158
   Insn 24(l0): point = 160
   Insn 26(l0): point = 162
   Insn 21(l0): point = 164
   Insn 11(l0): point = 166
   Insn 10(l0): point = 168
   Insn 5(l0): point = 170
   Insn 4(l0): point = 172
   Insn 9(l0): point = 174
   Insn 2(l0): point = 176
 a0(r208): [5..6]
 a1(r137): [9..16]
 a2(r145): [11..170]
 a3(r204): [13..34]
 a4(r142): [15..176]
 a5(r202): [21..22]
 a6(r203): [23..24]
 a7(r201): [23..36]
 a8(r134): [47..89]
 a9(r133): [54..97]
 a10(r197): [57..61]
 a11(r221): [69..93]
 a12(r216): [71..72]
 a13(r173): [85..85] [73..83]
 a14(r220): [77..95]
 a15(r189): [79..80]
 a16(r174): [83..87]
 a17(r139): [83..99]
 a18(r144): [104..172]
 a19(r136): [114..156]
 a20(r135): [121..164]
 a21(r170): [124..128]
 a22(r215): [136..160]
 a23(r210): [138..139]
 a24(r146): [152..152] [140..150]
 a25(r214): [144..162]
 a26(r162): [146..147]
 a27(r147): [150..154]
 a28(r140): [150..166]
Compressing live ranges: from 179 to 55 - 30%
Ranges after the compression:
 a0(r208): [0..1]
 a1(r137): [2..6]
 a2(r145): [3..52]
 a3(r204): [4..11]
 a4(r142): [5..54]
 a5(r202): [7..8]
 a6(r203): [9..10]
 a7(r201): [9..12]
 a8(r134): [13..27]
 a9(r133): [14..30]
 a10(r197): [15..16]
 a11(r221): [17..28]
 a12(r216): [18..19]
 a13(r173): [25..25] [20..24]
 a14(r220): [21..29]
 a15(r189): [22..23]
 a16(r174): [24..26]
 a17(r139): [24..31]
 a18(r144): [32..53]
 a19(r136): [33..47]
 a20(r135): [34..50]
 a21(r170): [35..36]
 a22(r215): [37..48]
 a23(r210): [38..39]
 a24(r146): [45..45] [40..44]
 a25(r214): [41..49]
 a26(r162): [42..43]
 a27(r147): [44..46]
 a28(r140): [44..51]
+++Allocating 224 bytes for conflict table (uncompressed size 232)
;; a0(r208,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r137,l0) conflicts: a2(r145,l0) a3(r204,l0) a4(r142,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a2(r145,l0) conflicts: a1(r137,l0) a3(r204,l0) a4(r142,l0) a5(r202,l0) a6(r203,l0) a7(r201,l0) a8(r134,l0) a9(r133,l0) a10(r197,l0) a11(r221,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r204,l0) conflicts: a1(r137,l0) a2(r145,l0) a4(r142,l0) a5(r202,l0) a6(r203,l0) a7(r201,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r142,l0) conflicts: a1(r137,l0) a2(r145,l0) a3(r204,l0) a5(r202,l0) a6(r203,l0) a7(r201,l0) a8(r134,l0) a9(r133,l0) a10(r197,l0) a11(r221,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r202,l0) conflicts: a2(r145,l0) a3(r204,l0) a4(r142,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a6(r203,l0) conflicts: a2(r145,l0) a3(r204,l0) a4(r142,l0) a7(r201,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a7(r201,l0) conflicts: a2(r145,l0) a3(r204,l0) a4(r142,l0) a6(r203,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a8(r134,l0) conflicts: a2(r145,l0) a4(r142,l0) a9(r133,l0) a10(r197,l0) a11(r221,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r133,l0) conflicts: a2(r145,l0) a4(r142,l0) a8(r134,l0) a10(r197,l0) a11(r221,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r197,l0) conflicts: a2(r145,l0) a4(r142,l0) a8(r134,l0) a9(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r221,l0) conflicts: a2(r145,l0) a4(r142,l0) a8(r134,l0) a9(r133,l0) a12(r216,l0) a13(r173,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r216,l0) conflicts: a2(r145,l0) a4(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r173,l0) conflicts: a2(r145,l0) a4(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a14(r220,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r220,l0) conflicts: a2(r145,l0) a4(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a13(r173,l0) a15(r189,l0) a16(r174,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r189,l0) conflicts: a2(r145,l0) a4(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a13(r173,l0) a14(r220,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r174,l0) conflicts: a2(r145,l0) a4(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a13(r173,l0) a14(r220,l0) a17(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r139,l0) conflicts: a2(r145,l0) a4(r142,l0) a8(r134,l0) a9(r133,l0) a11(r221,l0) a13(r173,l0) a14(r220,l0) a16(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r144,l0) conflicts: a2(r145,l0) a4(r142,l0) a19(r136,l0) a20(r135,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a19(r136,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a20(r135,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r135,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a19(r136,l0) a21(r170,l0) a22(r215,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r170,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r215,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a23(r210,l0) a24(r146,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r210,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r146,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a25(r214,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r214,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a24(r146,l0) a26(r162,l0) a27(r147,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r162,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a24(r146,l0) a25(r214,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r147,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a24(r146,l0) a25(r214,l0) a28(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r140,l0) conflicts: a2(r145,l0) a4(r142,l0) a18(r144,l0) a19(r136,l0) a20(r135,l0) a22(r215,l0) a24(r146,l0) a25(r214,l0) a27(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a5(r202)<->a7(r201)@125:shuffle
  cp1:a5(r202)<->a6(r203)@125:shuffle
  regions=1, blocks=13, points=55
    allocnos=29, copies=2, conflicts=0, ranges=31

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 12 11 10 9 8 7 6 5 4 3 2
    all: 0r208 1r137 2r145 3r204 4r142 5r202 6r203 7r201 8r134 9r133 10r197 11r221 12r216 13r173 14r220 15r189 16r174 17r139 18r144 19r136 20r135 21r170 22r215 23r210 24r146 25r214 26r162 27r147 28r140
    modified regnos: 133 134 135 136 137 139 140 142 144 145 146 147 162 170 173 174 189 197 201 202 203 204 208 210 214 215 216 220 221
    border:
    Pressure: GENERAL_REGS=12
    Reg 208 of GENERAL_REGS has 4 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 204 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 202 of GENERAL_REGS has 4 regs less
    Reg 203 of GENERAL_REGS has 4 regs less
    Reg 201 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
      Pushing a27(r147,l0)
      Pushing a26(r162,l0)
      Pushing a25(r214,l0)
      Pushing a24(r146,l0)
      Pushing a23(r210,l0)
      Pushing a21(r170,l0)
      Pushing a16(r174,l0)
      Pushing a15(r189,l0)
      Pushing a14(r220,l0)
      Pushing a13(r173,l0)
      Pushing a12(r216,l0)
      Pushing a10(r197,l0)
      Pushing a22(r215,l0)
      Pushing a20(r135,l0)
      Pushing a11(r221,l0)
      Pushing a9(r133,l0)
      Pushing a28(r140,l0)
      Pushing a17(r139,l0)
      Pushing a19(r136,l0)
      Pushing a8(r134,l0)
      Pushing a1(r137,l0)
      Pushing a18(r144,l0)
      Pushing a7(r201,l0)
      Pushing a6(r203,l0)
      Pushing a5(r202,l0)
      Pushing a0(r208,l0)
      Pushing a4(r142,l0)
      Pushing a3(r204,l0)
      Pushing a2(r145,l0)
      Popping a2(r145,l0)  -- assign reg 4
      Popping a3(r204,l0)  -- assign reg 5
      Popping a4(r142,l0)  -- assign reg 6
      Popping a0(r208,l0)  -- assign reg 12
      Popping a5(r202,l0)  -- assign reg 12
      Popping a6(r203,l0)  -- assign reg 12
      Popping a7(r201,l0)  -- assign reg 14
      Popping a18(r144,l0)  -- assign reg 5
      Popping a1(r137,l0)  -- assign reg 3
      Popping a8(r134,l0)  -- assign reg 2
      Popping a19(r136,l0)  -- assign reg 2
      Popping a17(r139,l0)  -- assign reg 0
      Popping a28(r140,l0)  -- assign reg 0
      Popping a9(r133,l0)  -- assign reg 12
      Popping a11(r221,l0)  -- assign reg 14
      Popping a20(r135,l0)  -- assign reg 12
      Popping a22(r215,l0)  -- assign reg 14
      Popping a10(r197,l0)  -- assign reg 0
      Popping a12(r216,l0)  -- assign reg 1
      Popping a13(r173,l0)  -- assign reg 8
      Popping a14(r220,l0)  -- assign reg 5
      Popping a15(r189,l0)  -- assign reg 1
      Popping a16(r174,l0)  -- assign reg 10
      Popping a21(r170,l0)  -- assign reg 0
      Popping a23(r210,l0)  -- assign reg 1
      Popping a24(r146,l0)  -- assign reg 8
      Popping a25(r214,l0)  -- assign reg 7
      Popping a26(r162,l0)  -- assign reg 1
      Popping a27(r147,l0)  -- assign reg 10
Disposition:
    9:r133 l0    12    8:r134 l0     2   20:r135 l0    12   19:r136 l0     2
    1:r137 l0     3   17:r139 l0     0   28:r140 l0     0    4:r142 l0     6
   18:r144 l0     5    2:r145 l0     4   24:r146 l0     8   27:r147 l0    10
   26:r162 l0     1   21:r170 l0     0   13:r173 l0     8   16:r174 l0    10
   15:r189 l0     1   10:r197 l0     0    7:r201 l0    14    5:r202 l0    12
    6:r203 l0    12    3:r204 l0     5    0:r208 l0    12   23:r210 l0     1
   25:r214 l0     7   22:r215 l0    14   12:r216 l0     1   14:r220 l0     5
   11:r221 l0    14
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 142
insn=9, live_throughout: 2, 3, 13, 142, dead_or_set: 0, 1
insn=4, live_throughout: 0, 3, 13, 142, dead_or_set: 2, 144
insn=5, live_throughout: 0, 13, 142, 144, dead_or_set: 3, 145
insn=10, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 1, 14
insn=11, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 1, 140
insn=21, live_throughout: 13, 140, 142, 144, 145, dead_or_set: 135
insn=26, live_throughout: 13, 135, 140, 142, 144, 145, dead_or_set: 214
insn=24, live_throughout: 13, 135, 140, 142, 144, 145, 214, dead_or_set: 215
insn=25, live_throughout: 13, 135, 140, 142, 144, 145, 214, dead_or_set: 215
insn=160, live_throughout: 13, 135, 140, 142, 144, 145, 214, 215, dead_or_set: 136
insn=171, live_throughout: 13, 135, 140, 142, 144, 145, 214, 215, dead_or_set: 147
insn=13, live_throughout: 13, 135, 142, 144, 145, 214, 215, dead_or_set: 140, 146, 147
insn=170, live_throughout: 13, 135, 142, 144, 145, 146, 214, 215, dead_or_set: 162
insn=45, live_throughout: 13, 135, 142, 144, 145, 146, 214, 215, dead_or_set: 162
insn=28, live_throughout: 13, 24, 135, 142, 144, 145, 146, 215, dead_or_set: 136, 214
insn=29, live_throughout: 13, 24, 135, 142, 144, 145, 146, 215, dead_or_set: 136
insn=14, live_throughout: 13, 24, 135, 136, 142, 144, 145, 215, dead_or_set: 146, 210
insn=16, live_throughout: 13, 24, 135, 136, 142, 144, 145, 215, dead_or_set: 210
insn=30, live_throughout: 13, 24, 135, 136, 142, 144, 145, dead_or_set: 136, 215
insn=22, live_throughout: 13, 24, 135, 136, 142, 144, 145, dead_or_set: 
insn=46, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 
insn=48, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 170
insn=49, live_throughout: 13, 135, 142, 144, 145, dead_or_set: 136, 170
insn=50, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 
insn=53, live_throughout: 13, 136, 142, 144, 145, dead_or_set: 135
insn=52, live_throughout: 13, 24, 136, 142, 144, 145, dead_or_set: 
insn=54, live_throughout: 13, 136, 142, 144, 145, dead_or_set: 
insn=58, live_throughout: 13, 142, 144, 145, dead_or_set: 136
insn=59, live_throughout: 13, 142, 144, 145, dead_or_set: 
insn=62, live_throughout: 13, 142, 144, 145, dead_or_set: 0
insn=63, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 14
insn=64, live_throughout: 13, 142, 144, 145, dead_or_set: 
insn=66, live_throughout: 13, 142, 145, dead_or_set: 0, 144
insn=67, live_throughout: 13, 142, 145, dead_or_set: 0, 1, 14
insn=68, live_throughout: 13, 142, 145, dead_or_set: 0, 1, 139
insn=78, live_throughout: 13, 139, 142, 145, dead_or_set: 133
insn=83, live_throughout: 13, 133, 139, 142, 145, dead_or_set: 220
insn=81, live_throughout: 13, 133, 139, 142, 145, 220, dead_or_set: 221
insn=82, live_throughout: 13, 133, 139, 142, 145, 220, dead_or_set: 221
insn=161, live_throughout: 13, 133, 139, 142, 145, 220, 221, dead_or_set: 134
insn=169, live_throughout: 13, 133, 139, 142, 145, 220, 221, dead_or_set: 174
insn=70, live_throughout: 13, 133, 142, 145, 220, 221, dead_or_set: 139, 173, 174
insn=168, live_throughout: 13, 133, 142, 145, 173, 220, 221, dead_or_set: 189
insn=102, live_throughout: 13, 133, 142, 145, 173, 220, 221, dead_or_set: 189
insn=85, live_throughout: 13, 24, 133, 142, 145, 173, 221, dead_or_set: 134, 220
insn=86, live_throughout: 13, 24, 133, 142, 145, 173, 221, dead_or_set: 134
insn=71, live_throughout: 13, 24, 133, 134, 142, 145, 221, dead_or_set: 173, 216
insn=73, live_throughout: 13, 24, 133, 134, 142, 145, 221, dead_or_set: 216
insn=87, live_throughout: 13, 24, 133, 134, 142, 145, dead_or_set: 134, 221
insn=79, live_throughout: 13, 24, 133, 134, 142, 145, dead_or_set: 
insn=103, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 
insn=105, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 197
insn=106, live_throughout: 13, 133, 142, 145, dead_or_set: 134, 197
insn=107, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 
insn=110, live_throughout: 13, 134, 142, 145, dead_or_set: 133
insn=109, live_throughout: 13, 24, 134, 142, 145, dead_or_set: 
insn=111, live_throughout: 13, 134, 142, 145, dead_or_set: 
insn=115, live_throughout: 13, 142, 145, dead_or_set: 134
insn=116, live_throughout: 13, 142, 145, dead_or_set: 
insn=119, live_throughout: 13, 142, 145, dead_or_set: 0
insn=120, live_throughout: 13, 142, 145, dead_or_set: 0, 14
insn=121, live_throughout: 13, 142, 145, dead_or_set: 
insn=123, live_throughout: 13, 142, 145, dead_or_set: 201
insn=128, live_throughout: 13, 142, 145, 201, dead_or_set: 204
insn=132, live_throughout: 13, 142, 145, 201, 204, dead_or_set: 1
insn=133, live_throughout: 1, 13, 142, 145, 201, 204, dead_or_set: 2
insn=134, live_throughout: 1, 2, 13, 142, 145, 201, 204, dead_or_set: 3
insn=131, live_throughout: 1, 2, 3, 13, 142, 145, 201, 204, dead_or_set: 0
insn=167, live_throughout: 0, 1, 2, 3, 13, 142, 145, 201, 204, dead_or_set: 203
insn=126, live_throughout: 0, 1, 2, 3, 13, 142, 145, 204, dead_or_set: 201, 202, 203
insn=127, live_throughout: 0, 1, 2, 3, 13, 142, 145, 204, dead_or_set: 202
insn=135, live_throughout: 13, 142, 145, 204, dead_or_set: 0, 1, 2, 3, 14
insn=136, live_throughout: 13, 142, 145, 204, dead_or_set: 0, 137
insn=140, live_throughout: 13, 137, 145, 204, dead_or_set: 0, 142
insn=141, live_throughout: 0, 13, 137, 145, dead_or_set: 1, 204
insn=142, live_throughout: 0, 1, 13, 137, dead_or_set: 2, 145
insn=143, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 137
insn=166, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 208
insn=139, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 208
insn=144, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=156, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 147: (insn_list:REG_DEP_TRUE 171 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 170 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 48 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 169 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 168 (nil))
init_insns for 197: (insn_list:REG_DEP_TRUE 105 (nil))
init_insns for 203: (insn_list:REG_DEP_TRUE 167 (nil))
init_insns for 204: (insn_list:REG_DEP_TRUE 128 (nil))
init_insns for 208: (insn_list:REG_DEP_TRUE 166 (nil))
changing reg in insn 78
changing reg in insn 102
changing reg in insn 102
changing reg in insn 110
changing reg in insn 161
changing reg in insn 106
changing reg in insn 86
changing reg in insn 109
changing reg in insn 106
changing reg in insn 87
changing reg in insn 85
changing reg in insn 106
changing reg in insn 21
changing reg in insn 45
changing reg in insn 45
changing reg in insn 53
changing reg in insn 160
changing reg in insn 49
changing reg in insn 29
changing reg in insn 52
changing reg in insn 49
changing reg in insn 30
changing reg in insn 28
changing reg in insn 49
changing reg in insn 136
changing reg in insn 143
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 2
changing reg in insn 140
changing reg in insn 4
changing reg in insn 66
changing reg in insn 5
changing reg in insn 142
changing reg in insn 134
changing reg in insn 13
changing reg in insn 171
changing reg in insn 13
changing reg in insn 170
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 70
changing reg in insn 169
changing reg in insn 70
changing reg in insn 168
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 123
changing reg in insn 126
changing reg in insn 126
changing reg in insn 126
changing reg in insn 167
changing reg in insn 126
changing reg in insn 128
changing reg in insn 141
changing reg in insn 131
changing reg in insn 166
changing reg in insn 139
changing reg in insn 14
changing reg in insn 26
changing reg in insn 28
changing reg in insn 25
changing reg in insn 24
changing reg in insn 29
changing reg in insn 25
changing reg in insn 30
changing reg in insn 71
changing reg in insn 83
changing reg in insn 85
changing reg in insn 82
changing reg in insn 81
changing reg in insn 86
changing reg in insn 82
changing reg in insn 87
Spilling for insn 16.
Spilling for insn 22.
Spilling for insn 52.
Spilling for insn 58.
Using reg 1 for reload 0
Spilling for insn 73.
Spilling for insn 79.
Spilling for insn 109.
Spilling for insn 115.
Using reg 1 for reload 0
Spilling for insn 127.
Spilling for insn 139.

Reloads for insn # 16
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])

Reloads for insn # 22
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])

Reloads for insn # 52
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])

Reloads for insn # 58
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 73
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 79
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 109
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 115
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 127
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 139
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
deleting insn with uid = 11.
deleting insn with uid = 68.
deleting insn with uid = 143.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 144.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)


vfp_double_fsub

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,18u,2d} r1={17d,15u,2d} r2={17d,11u,2d} r3={15d,9u,2d} r4={1d,2u} r5={3d,4u} r6={1d,1u} r7={1d,1u} r8={2d} r9={2d,2u} r10={2d,2u} r11={2d,2u} r12={12d,11u} r13={1d,32u,1d} r14={12d,8u,1d} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={12d,6u} r25={2d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 911{775d,124u,12e} in 75{69 regular + 6 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 17 2 NOTE_INSN_FUNCTION_BEG)

(note 17 6 19 2 NOTE_INSN_DELETED)

(note 19 17 20 2 NOTE_INSN_DELETED)

(note 20 19 23 2 NOTE_INSN_DELETED)

(note 23 20 27 2 NOTE_INSN_DELETED)

(note 27 23 31 2 NOTE_INSN_DELETED)

(note 31 27 32 2 NOTE_INSN_DELETED)

(note 32 31 33 2 NOTE_INSN_DELETED)

(note 33 32 35 2 NOTE_INSN_DELETED)

(note 35 33 36 2 NOTE_INSN_DELETED)

(note 36 35 39 2 NOTE_INSN_DELETED)

(note 39 36 40 2 NOTE_INSN_DELETED)

(note 40 39 42 2 NOTE_INSN_DELETED)

(note 42 40 43 2 NOTE_INSN_DELETED)

(note 43 42 44 2 NOTE_INSN_DELETED)

(note 44 43 2 2 NOTE_INSN_DELETED)

(insn 2 44 9 2 arch/arm/vfp/vfpdouble.c:980 (set (reg/v:SI 6 r6 [orig:142 dd ] [142])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 4 2 arch/arm/vfp/vfpdouble.c:984 (set (reg:SI 0 r0)
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (nil))

(insn 4 9 5 2 arch/arm/vfp/vfpdouble.c:980 (set (reg/v:SI 5 r5 [orig:144 dm ] [144])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 10 2 arch/arm/vfp/vfpdouble.c:980 (set (reg/v:SI 4 r4 [orig:145 fpscr ] [145])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 21 2 arch/arm/vfp/vfpdouble.c:984 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 21 10 26 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:135 D.5931 ] [135])
        (zero_extract:SI (reg:SI 1 r1 [ D.4995+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 26 21 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 7 r7 [214])
        (ashift:SI (reg:SI 0 r0 [orig:140 D.4995 ] [140])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 24 26 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:215+4 ] [215])
        (ashift:SI (reg:SI 1 r1 [ D.4995+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 160 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:215+4 ] [215])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:140 D.4995 ] [140])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:215+4 ] [215]))) 270 {*arith_shiftsi} (nil))

(insn 160 25 171 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:136 significand ] [136])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 171 160 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [147])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 13 171 170 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [146])
        (and:DI (reg:DI 0 r0 [orig:140 D.4995 ] [140])
            (reg:DI 10 sl [147]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:140 D.4995 ] [140])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 170 13 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [162])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 45 170 28 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:135 D.5931 ] [135])
                    (reg:SI 1 r1 [162]))
                (ne:SI (reg:SI 12 ip [orig:135 D.5931 ] [135])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 28 45 29 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:136 significand ] [136])
        (lshiftrt:SI (reg:SI 7 r7 [214])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 29 28 14 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:136 significand ] [136])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:215+4 ] [215])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:136 significand ] [136]))) 270 {*arith_shiftsi} (nil))

(insn 14 29 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [210])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 16 14 30 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
        (reg:HI 1 r1 [210])) 176 {*movhi_insn_arch4} (nil))

(insn 30 16 22 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:215+4 ] [215])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 22 30 46 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:135 D.5931 ] [135])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 46 22 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [170])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:136 significand ] [136])
        (ior:DI (reg/v:DI 2 r2 [orig:136 significand ] [136])
            (reg:DI 0 r0 [170]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:136 significand ] [136])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 266 "" [1 uses])

(note 51 50 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 53 51 52 4 arch/arm/vfp/vfpdouble.c:985 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:135 D.5931 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 52 53 54 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:136 significand ] [136])) 163 {*arm_movdi} (nil))

(jump_insn 54 52 55 4 arch/arm/vfp/vfpdouble.c:985 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  4 [50.0%]  (fallthru)
(note 55 54 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 56 55 57 5 NOTE_INSN_DELETED)

(note 57 56 58 5 NOTE_INSN_DELETED)

(insn 58 57 59 5 arch/arm/vfp/vfpdouble.c:985 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:136 significand ] [136])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 59 58 60 5 arch/arm/vfp/vfpdouble.c:985 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 6 NOTE_INSN_DELETED)

(insn 62 61 63 6 arch/arm/vfp/vfpdouble.c:986 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(call_insn 63 62 64 6 arch/arm/vfp/vfpdouble.c:986 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 64 63 65 7 267 "" [2 uses])

(note 65 64 74 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 74 65 76 7 NOTE_INSN_DELETED)

(note 76 74 77 7 NOTE_INSN_DELETED)

(note 77 76 80 7 NOTE_INSN_DELETED)

(note 80 77 84 7 NOTE_INSN_DELETED)

(note 84 80 88 7 NOTE_INSN_DELETED)

(note 88 84 89 7 NOTE_INSN_DELETED)

(note 89 88 90 7 NOTE_INSN_DELETED)

(note 90 89 92 7 NOTE_INSN_DELETED)

(note 92 90 93 7 NOTE_INSN_DELETED)

(note 93 92 96 7 NOTE_INSN_DELETED)

(note 96 93 97 7 NOTE_INSN_DELETED)

(note 97 96 99 7 NOTE_INSN_DELETED)

(note 99 97 100 7 NOTE_INSN_DELETED)

(note 100 99 101 7 NOTE_INSN_DELETED)

(note 101 100 66 7 NOTE_INSN_DELETED)

(insn 66 101 67 7 arch/arm/vfp/vfpdouble.c:988 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:144 dm ] [144])) 167 {*arm_movsi_insn} (nil))

(call_insn 67 66 78 7 arch/arm/vfp/vfpdouble.c:988 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 78 67 83 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:133 D.5946 ] [133])
        (zero_extract:SI (reg:SI 1 r1 [ D.5004+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 83 78 81 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 5 r5 [220])
        (ashift:SI (reg:SI 0 r0 [orig:139 D.5004 ] [139])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 81 83 82 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:221+4 ] [221])
        (ashift:SI (reg:SI 1 r1 [ D.5004+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 82 81 161 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:221+4 ] [221])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:139 D.5004 ] [139])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:221+4 ] [221]))) 270 {*arith_shiftsi} (nil))

(insn 161 82 169 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:134 significand ] [134])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 169 161 70 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [174])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 70 169 168 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [173])
        (and:DI (reg:DI 0 r0 [orig:139 D.5004 ] [139])
            (reg:DI 10 sl [174]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:139 D.5004 ] [139])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 168 70 102 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [189])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 102 168 85 7 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:133 D.5946 ] [133])
                    (reg:SI 1 r1 [189]))
                (ne:SI (reg:SI 12 ip [orig:133 D.5946 ] [133])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 85 102 86 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:134 significand ] [134])
        (lshiftrt:SI (reg:SI 5 r5 [220])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 86 85 71 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:134 significand ] [134])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:221+4 ] [221])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:134 significand ] [134]))) 270 {*arith_shiftsi} (nil))

(insn 71 86 73 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [216])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 73 71 87 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
        (reg:HI 1 r1 [216])) 176 {*movhi_insn_arch4} (nil))

(insn 87 73 79 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:221+4 ] [221])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 79 87 103 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:133 D.5946 ] [133])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 103 79 104 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 104 103 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 105 104 106 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [197])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 106 105 107 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:134 significand ] [134])
        (ior:DI (reg/v:DI 2 r2 [orig:134 significand ] [134])
            (reg:DI 0 r0 [197]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:134 significand ] [134])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 107 106 108 9 268 "" [1 uses])

(note 108 107 110 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 110 108 109 9 arch/arm/vfp/vfpdouble.c:989 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:133 D.5946 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 109 110 111 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:134 significand ] [134])) 163 {*arm_movdi} (nil))

(jump_insn 111 109 112 9 arch/arm/vfp/vfpdouble.c:989 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  10 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  9 [61.0%]  (fallthru)
(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 113 112 114 10 NOTE_INSN_DELETED)

(note 114 113 115 10 NOTE_INSN_DELETED)

(insn 115 114 116 10 arch/arm/vfp/vfpdouble.c:989 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:134 significand ] [134])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 116 115 117 10 arch/arm/vfp/vfpdouble.c:989 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  11 [39.0%]  (fallthru)
;; Succ edge  12 [61.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  10 [39.0%]  (fallthru)
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 118 117 119 11 NOTE_INSN_DELETED)

(insn 119 118 120 11 arch/arm/vfp/vfpdouble.c:990 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(call_insn 120 119 121 11 arch/arm/vfp/vfpdouble.c:990 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  9 [39.0%] 
;; Pred edge  10 [61.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 121 120 122 12 269 "" [2 uses])

(note 122 121 129 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 129 122 130 12 NOTE_INSN_DELETED)

(note 130 129 123 12 NOTE_INSN_DELETED)

(insn 123 130 128 12 arch/arm/vfp/vfpdouble.c:995 (set (reg:SI 14 lr [orig:201 vdm.sign ] [201])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 128 123 132 12 arch/arm/vfp/vfpdouble.c:997 (set (reg/f:SI 5 r5 [204])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))
        (nil)))

(insn 132 128 133 12 arch/arm/vfp/vfpdouble.c:997 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(insn 133 132 134 12 arch/arm/vfp/vfpdouble.c:997 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 134 133 131 12 arch/arm/vfp/vfpdouble.c:997 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:145 fpscr ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 131 134 167 12 arch/arm/vfp/vfpdouble.c:997 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [204])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 167 131 126 12 arch/arm/vfp/vfpdouble.c:995 (set (reg:SI 12 ip [203])
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -32768 [0xffffffffffff8000])
        (nil)))

(insn 126 167 127 12 arch/arm/vfp/vfpdouble.c:995 (set (reg:SI 12 ip [202])
        (xor:SI (reg:SI 14 lr [orig:201 vdm.sign ] [201])
            (reg:SI 12 ip [203]))) 96 {*arm_xorsi3} (expr_list:REG_EQUAL (xor:SI (reg:SI 14 lr [orig:201 vdm.sign ] [201])
            (const_int -32768 [0xffffffffffff8000]))
        (nil)))

(insn 127 126 135 12 arch/arm/vfp/vfpdouble.c:995 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
        (reg:HI 12 ip [202])) 176 {*movhi_insn_arch4} (nil))

(call_insn 135 127 136 12 arch/arm/vfp/vfpdouble.c:997 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_add") [flags 0x3] <function_decl 0x10b08080 vfp_double_add>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 136 135 140 12 arch/arm/vfp/vfpdouble.c:997 (set (reg/v:SI 3 r3 [orig:137 exceptions ] [137])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 140 136 141 12 arch/arm/vfp/vfpdouble.c:999 (set (reg:SI 0 r0)
        (reg/v:SI 6 r6 [orig:142 dd ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 141 140 142 12 arch/arm/vfp/vfpdouble.c:999 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [204])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 142 141 166 12 arch/arm/vfp/vfpdouble.c:999 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 fpscr ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 166 142 139 12 arch/arm/vfp/vfpdouble.c:999 (set (reg/f:SI 12 ip [208])
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10e08c40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10e08c40>)
        (nil)))

(insn 139 166 144 12 arch/arm/vfp/vfpdouble.c:999 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [208])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10e08c40>)
        (nil)))

(call_insn 144 139 156 12 arch/arm/vfp/vfpdouble.c:999 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 156 144 165 12 arch/arm/vfp/vfpdouble.c:1000 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 165 156 172 NOTE_INSN_DELETED)

(note 172 165 0 NOTE_INSN_DELETED)


;; Function vfp_double_multiply_accumulate (vfp_double_multiply_accumulate)[0:174]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 240.
rescanning insn with uid = 240.
deleting insn with uid = 240.
deleting insn with uid = 7.
scanning new insn with uid = 241.
verify found no changes in insn with uid = 241.
deleting insn with uid = 148.
scanning new insn with uid = 242.
verify found no changes in insn with uid = 242.
deleting insn with uid = 93.
scanning new insn with uid = 243.
verify found no changes in insn with uid = 243.
deleting insn with uid = 71.
scanning new insn with uid = 244.
verify found no changes in insn with uid = 244.
deleting insn with uid = 14.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 34 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 36 (  1.9)

Pass 0 for finding allocno costs

    a12 (r266,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r265,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r261,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r260,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r259,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r255,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r253,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r249,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r247,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r243,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r242,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r241,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r239,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r247,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r243,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r241,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r242,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a10(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r239,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a13(r261,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a15(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a19(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a24(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a25(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a27(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a33(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a35(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a36(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a38(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r253,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a43(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r266: preferred GENERAL_REGS, alternative NO_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r247,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r243,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r241,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r242,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a10(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r239,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r266,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a13(r261,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a15(r265,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a19(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a24(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a25(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a27(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a33(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a35(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a36(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a38(r249,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r253,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a43(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 227(l0): point = 0
   Insn 215(l0): point = 2
   Insn 214(l0): point = 4
   Insn 211(l0): point = 6
   Insn 209(l0): point = 8
   Insn 210(l0): point = 10
   Insn 240(l0): point = 12
   Insn 213(l0): point = 14
   Insn 212(l0): point = 16
   Insn 206(l0): point = 18
   Insn 202(l0): point = 20
   Insn 205(l0): point = 22
   Insn 204(l0): point = 24
   Insn 203(l0): point = 26
   Insn 199(l0): point = 28
   Insn 196(l0): point = 31
   Insn 195(l0): point = 33
   Insn 194(l0): point = 35
   Insn 192(l0): point = 38
   Insn 189(l0): point = 40
   Insn 191(l0): point = 42
   Insn 186(l0): point = 45
   Insn 185(l0): point = 50
   Insn 183(l0): point = 53
   Insn 153(l0): point = 55
   Insn 167(l0): point = 57
   Insn 152(l0): point = 59
   Insn 166(l0): point = 61
   Insn 159(l0): point = 63
   Insn 165(l0): point = 65
   Insn 150(l0): point = 67
   Insn 182(l0): point = 69
   Insn 171(l0): point = 71
   Insn 162(l0): point = 73
   Insn 233(l0): point = 75
   Insn 161(l0): point = 77
   Insn 163(l0): point = 79
   Insn 149(l0): point = 81
   Insn 241(l0): point = 86
   Insn 158(l0): point = 88
   Insn 147(l0): point = 90
   Insn 146(l0): point = 92
   Insn 145(l0): point = 94
   Insn 142(l0): point = 97
   Insn 141(l0): point = 99
   Insn 140(l0): point = 101
   Insn 138(l0): point = 103
   Insn 136(l0): point = 106
   Insn 135(l0): point = 108
   Insn 133(l0): point = 110
   Insn 132(l0): point = 112
   Insn 131(l0): point = 114
   Insn 130(l0): point = 116
   Insn 129(l0): point = 118
   Insn 128(l0): point = 120
   Insn 122(l0): point = 123
   Insn 121(l0): point = 125
   Insn 118(l0): point = 128
   Insn 117(l0): point = 130
   Insn 113(l0): point = 133
   Insn 111(l0): point = 135
   Insn 112(l0): point = 137
   Insn 108(l0): point = 140
   Insn 107(l0): point = 145
   Insn 105(l0): point = 148
   Insn 81(l0): point = 150
   Insn 89(l0): point = 152
   Insn 75(l0): point = 154
   Insn 73(l0): point = 156
   Insn 88(l0): point = 158
   Insn 87(l0): point = 160
   Insn 104(l0): point = 162
   Insn 242(l0): point = 164
   Insn 72(l0): point = 166
   Insn 243(l0): point = 171
   Insn 232(l0): point = 173
   Insn 84(l0): point = 175
   Insn 83(l0): point = 177
   Insn 85(l0): point = 179
   Insn 80(l0): point = 181
   Insn 70(l0): point = 183
   Insn 69(l0): point = 185
   Insn 68(l0): point = 187
   Insn 65(l0): point = 190
   Insn 64(l0): point = 192
   Insn 61(l0): point = 195
   Insn 60(l0): point = 197
   Insn 56(l0): point = 200
   Insn 54(l0): point = 202
   Insn 55(l0): point = 204
   Insn 51(l0): point = 207
   Insn 50(l0): point = 212
   Insn 48(l0): point = 215
   Insn 32(l0): point = 217
   Insn 18(l0): point = 219
   Insn 16(l0): point = 221
   Insn 31(l0): point = 223
   Insn 24(l0): point = 225
   Insn 30(l0): point = 227
   Insn 15(l0): point = 229
   Insn 244(l0): point = 234
   Insn 47(l0): point = 236
   Insn 36(l0): point = 238
   Insn 27(l0): point = 240
   Insn 26(l0): point = 242
   Insn 28(l0): point = 244
   Insn 231(l0): point = 246
   Insn 23(l0): point = 248
   Insn 13(l0): point = 250
   Insn 12(l0): point = 252
   Insn 6(l0): point = 254
   Insn 5(l0): point = 256
   Insn 4(l0): point = 258
   Insn 11(l0): point = 260
   Insn 2(l0): point = 262
 a0(r247): [5..8]
 a1(r147): [7..262]
 a2(r140): [9..110]
 a3(r152): [11..12]
 a4(r150): [15..256]
 a5(r243): [17..28]
 a6(r241): [32..33]
 a7(r242): [34..35]
 a8(r133): [34..59]
 a9(r135): [41..75]
 a10(r151): [43..254]
 a11(r239): [46..50]
 a12(r266): [58..77]
 a13(r261): [60..67]
 a14(r134): [64..88]
 a15(r265): [66..79]
 a16(r215): [84..84] [68..82]
 a17(r231): [70..71]
 a18(r143): [74..90]
 a19(r216): [82..86]
 a20(r213): [98..99]
 a21(r214): [100..101]
 a22(r212): [100..103]
 a23(r137): [131..173]
 a24(r136): [138..181]
 a25(r204): [141..145]
 a26(r260): [153..177]
 a27(r255): [155..156]
 a28(r180): [169..169] [157..167]
 a29(r259): [161..179]
 a30(r196): [163..164]
 a31(r181): [167..171]
 a32(r144): [167..183]
 a33(r149): [188..258]
 a34(r139): [198..246]
 a35(r138): [205..248]
 a36(r177): [208..212]
 a37(r254): [218..242]
 a38(r249): [220..221]
 a39(r153): [232..232] [222..230]
 a40(r253): [228..244]
 a41(r154): [230..234]
 a42(r145): [230..250]
 a43(r169): [237..238]
Compressing live ranges: from 265 to 84 - 31%
Ranges after the compression:
 a0(r247): [0..2]
 a1(r147): [1..83]
 a2(r140): [3..40]
 a3(r152): [4..5]
 a4(r150): [6..81]
 a5(r243): [7..8]
 a6(r241): [9..10]
 a7(r242): [11..12]
 a8(r133): [11..18]
 a9(r135): [13..27]
 a10(r151): [14..80]
 a11(r239): [15..16]
 a12(r266): [17..28]
 a13(r261): [19..22]
 a14(r134): [20..33]
 a15(r265): [21..29]
 a16(r215): [31..31] [23..30]
 a17(r231): [24..25]
 a18(r143): [26..34]
 a19(r216): [30..32]
 a20(r213): [35..36]
 a21(r214): [37..38]
 a22(r212): [37..39]
 a23(r137): [41..55]
 a24(r136): [42..58]
 a25(r204): [43..44]
 a26(r260): [45..56]
 a27(r255): [46..47]
 a28(r180): [53..53] [48..52]
 a29(r259): [49..57]
 a30(r196): [50..51]
 a31(r181): [52..54]
 a32(r144): [52..59]
 a33(r149): [60..82]
 a34(r139): [61..77]
 a35(r138): [62..78]
 a36(r177): [63..64]
 a37(r254): [65..75]
 a38(r249): [66..67]
 a39(r153): [71..71] [68..70]
 a40(r253): [69..76]
 a41(r154): [70..72]
 a42(r145): [70..79]
 a43(r169): [73..74]
+++Allocating 352 bytes for conflict table (uncompressed size 352)
;; a0(r247,l0) conflicts: a1(r147,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a1(r147,l0) conflicts: a0(r247,l0) a2(r140,l0) a3(r152,l0) a4(r150,l0) a5(r243,l0) a6(r241,l0) a7(r242,l0) a8(r133,l0) a9(r135,l0) a10(r151,l0) a11(r239,l0) a12(r266,l0) a13(r261,l0) a14(r134,l0) a15(r265,l0) a16(r215,l0) a17(r231,l0) a18(r143,l0) a19(r216,l0) a20(r213,l0) a21(r214,l0) a22(r212,l0) a23(r137,l0) a24(r136,l0) a25(r204,l0) a26(r260,l0) a27(r255,l0) a28(r180,l0) a29(r259,l0) a30(r196,l0) a31(r181,l0) a32(r144,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a36(r177,l0) a37(r254,l0) a38(r249,l0) a39(r153,l0) a40(r253,l0) a41(r154,l0) a42(r145,l0) a43(r169,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r140,l0) conflicts: a1(r147,l0) a3(r152,l0) a4(r150,l0) a5(r243,l0) a6(r241,l0) a7(r242,l0) a8(r133,l0) a9(r135,l0) a10(r151,l0) a11(r239,l0) a12(r266,l0) a13(r261,l0) a14(r134,l0) a15(r265,l0) a16(r215,l0) a17(r231,l0) a18(r143,l0) a19(r216,l0) a20(r213,l0) a21(r214,l0) a22(r212,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r152,l0) conflicts: a1(r147,l0) a2(r140,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a4(r150,l0) conflicts: a1(r147,l0) a2(r140,l0) a5(r243,l0) a6(r241,l0) a7(r242,l0) a8(r133,l0) a9(r135,l0) a10(r151,l0) a11(r239,l0) a12(r266,l0) a13(r261,l0) a14(r134,l0) a15(r265,l0) a16(r215,l0) a17(r231,l0) a18(r143,l0) a19(r216,l0) a20(r213,l0) a21(r214,l0) a22(r212,l0) a23(r137,l0) a24(r136,l0) a25(r204,l0) a26(r260,l0) a27(r255,l0) a28(r180,l0) a29(r259,l0) a30(r196,l0) a31(r181,l0) a32(r144,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a36(r177,l0) a37(r254,l0) a38(r249,l0) a39(r153,l0) a40(r253,l0) a41(r154,l0) a42(r145,l0) a43(r169,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r243,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r241,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r242,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a8(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r133,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a7(r242,l0) a9(r135,l0) a10(r151,l0) a11(r239,l0) a12(r266,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r135,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a8(r133,l0) a10(r151,l0) a11(r239,l0) a12(r266,l0) a13(r261,l0) a14(r134,l0) a15(r265,l0) a16(r215,l0) a17(r231,l0) a18(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r151,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a8(r133,l0) a9(r135,l0) a11(r239,l0) a12(r266,l0) a13(r261,l0) a14(r134,l0) a15(r265,l0) a16(r215,l0) a17(r231,l0) a18(r143,l0) a19(r216,l0) a20(r213,l0) a21(r214,l0) a22(r212,l0) a23(r137,l0) a24(r136,l0) a25(r204,l0) a26(r260,l0) a27(r255,l0) a28(r180,l0) a29(r259,l0) a30(r196,l0) a31(r181,l0) a32(r144,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a36(r177,l0) a37(r254,l0) a38(r249,l0) a39(r153,l0) a40(r253,l0) a41(r154,l0) a42(r145,l0) a43(r169,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a11(r239,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a8(r133,l0) a9(r135,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r266,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a8(r133,l0) a9(r135,l0) a10(r151,l0) a13(r261,l0) a14(r134,l0) a15(r265,l0) a16(r215,l0) a17(r231,l0) a18(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r261,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a9(r135,l0) a10(r151,l0) a12(r266,l0) a14(r134,l0) a15(r265,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r134,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a9(r135,l0) a10(r151,l0) a12(r266,l0) a13(r261,l0) a15(r265,l0) a16(r215,l0) a17(r231,l0) a18(r143,l0) a19(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r265,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a9(r135,l0) a10(r151,l0) a12(r266,l0) a13(r261,l0) a14(r134,l0) a16(r215,l0) a17(r231,l0) a18(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r215,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a9(r135,l0) a10(r151,l0) a12(r266,l0) a14(r134,l0) a15(r265,l0) a17(r231,l0) a18(r143,l0) a19(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r231,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a9(r135,l0) a10(r151,l0) a12(r266,l0) a14(r134,l0) a15(r265,l0) a16(r215,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r143,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a9(r135,l0) a10(r151,l0) a12(r266,l0) a14(r134,l0) a15(r265,l0) a16(r215,l0) a19(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r216,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a10(r151,l0) a14(r134,l0) a16(r215,l0) a18(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r213,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a10(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r214,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a10(r151,l0) a22(r212,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r212,l0) conflicts: a1(r147,l0) a2(r140,l0) a4(r150,l0) a10(r151,l0) a21(r214,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r137,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a24(r136,l0) a25(r204,l0) a26(r260,l0) a27(r255,l0) a28(r180,l0) a29(r259,l0) a30(r196,l0) a31(r181,l0) a32(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r136,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a23(r137,l0) a25(r204,l0) a26(r260,l0) a27(r255,l0) a28(r180,l0) a29(r259,l0) a30(r196,l0) a31(r181,l0) a32(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r204,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a23(r137,l0) a24(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r260,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a23(r137,l0) a24(r136,l0) a27(r255,l0) a28(r180,l0) a29(r259,l0) a30(r196,l0) a31(r181,l0) a32(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r255,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a23(r137,l0) a24(r136,l0) a26(r260,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r180,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a23(r137,l0) a24(r136,l0) a26(r260,l0) a29(r259,l0) a30(r196,l0) a31(r181,l0) a32(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r259,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a23(r137,l0) a24(r136,l0) a26(r260,l0) a28(r180,l0) a30(r196,l0) a31(r181,l0) a32(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r196,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a23(r137,l0) a24(r136,l0) a26(r260,l0) a28(r180,l0) a29(r259,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r181,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a23(r137,l0) a24(r136,l0) a26(r260,l0) a28(r180,l0) a29(r259,l0) a32(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r144,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a23(r137,l0) a24(r136,l0) a26(r260,l0) a28(r180,l0) a29(r259,l0) a31(r181,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r149,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a34(r139,l0) a35(r138,l0) a36(r177,l0) a37(r254,l0) a38(r249,l0) a39(r153,l0) a40(r253,l0) a41(r154,l0) a42(r145,l0) a43(r169,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a34(r139,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a35(r138,l0) a36(r177,l0) a37(r254,l0) a38(r249,l0) a39(r153,l0) a40(r253,l0) a41(r154,l0) a42(r145,l0) a43(r169,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r138,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a34(r139,l0) a36(r177,l0) a37(r254,l0) a38(r249,l0) a39(r153,l0) a40(r253,l0) a41(r154,l0) a42(r145,l0) a43(r169,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r177,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r254,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a38(r249,l0) a39(r153,l0) a40(r253,l0) a41(r154,l0) a42(r145,l0) a43(r169,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r249,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a37(r254,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r153,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a37(r254,l0) a40(r253,l0) a41(r154,l0) a42(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r253,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a37(r254,l0) a39(r153,l0) a41(r154,l0) a42(r145,l0) a43(r169,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r154,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a37(r254,l0) a39(r153,l0) a40(r253,l0) a42(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r145,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a37(r254,l0) a39(r153,l0) a40(r253,l0) a41(r154,l0) a43(r169,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r169,l0) conflicts: a1(r147,l0) a4(r150,l0) a10(r151,l0) a33(r149,l0) a34(r139,l0) a35(r138,l0) a37(r254,l0) a40(r253,l0) a42(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a0(r247)<->a2(r140)@125:shuffle
  cp1:a6(r241)<->a8(r133)@125:shuffle
  cp2:a6(r241)<->a7(r242)@125:shuffle
  cp3:a8(r133)<->a13(r261)@125:shuffle
  cp4:a20(r213)<->a22(r212)@125:shuffle
  cp5:a20(r213)<->a21(r214)@125:shuffle
  regions=1, blocks=19, points=84
    allocnos=44, copies=6, conflicts=1, ranges=47

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r247 1r147 2r140 3r152 4r150 5r243 6r241 7r242 8r133 9r135 10r151 11r239 12r266 13r261 14r134 15r265 16r215 17r231 18r143 19r216 20r213 21r214 22r212 23r137 24r136 25r204 26r260 27r255 28r180 29r259 30r196 31r181 32r144 33r149 34r139 35r138 36r177 37r254 38r249 39r153 40r253 41r154 42r145 43r169
    modified regnos: 133 134 135 136 137 138 139 140 143 144 145 147 149 150 151 152 153 154 169 177 180 181 196 204 212 213 214 215 216 231 239 241 242 243 247 249 253 254 255 259 260 261 265 266
    border:
    Pressure: GENERAL_REGS=13
    Reg 247 of GENERAL_REGS has 3 regs less
    Reg 147 of GENERAL_REGS has 5 regs less
    Reg 140 of GENERAL_REGS has 5 regs less
    Reg 152 of GENERAL_REGS has 3 regs less
    Reg 150 of GENERAL_REGS has 5 regs less
    Reg 243 of GENERAL_REGS has 5 regs less
    Reg 151 of GENERAL_REGS has 5 regs less
    Reg 149 of GENERAL_REGS has 4 regs less
      Pushing a43(r169,l0)
      Pushing a38(r249,l0)
      Pushing a36(r177,l0)
      Pushing a31(r181,l0)
      Pushing a30(r196,l0)
      Pushing a29(r259,l0)
      Pushing a28(r180,l0)
      Pushing a27(r255,l0)
      Pushing a25(r204,l0)
      Pushing a22(r212,l0)
      Pushing a21(r214,l0)
      Pushing a20(r213,l0)
      Pushing a19(r216,l0)
      Pushing a17(r231,l0)
      Pushing a16(r215,l0)
      Pushing a15(r265,l0)
      Pushing a13(r261,l0)
      Pushing a11(r239,l0)
      Pushing a7(r242,l0)
      Pushing a6(r241,l0)
      Pushing a8(r133,l0)
      Pushing a14(r134,l0)
      Pushing a26(r260,l0)
      Pushing a24(r136,l0)
      Pushing a12(r266,l0)
      Pushing a32(r144,l0)
      Pushing a18(r143,l0)
      Pushing a9(r135,l0)
      Pushing a23(r137,l0)
      Pushing a3(r152,l0)
      Pushing a0(r247,l0)
      Pushing a5(r243,l0)
      Pushing a2(r140,l0)
      Pushing a41(r154,l0)(potential spill: pri=740, cost=20000)
      Pushing a40(r253,l0)
      Pushing a39(r153,l0)
      Pushing a37(r254,l0)
      Pushing a35(r138,l0)
      Pushing a42(r145,l0)
      Pushing a34(r139,l0)
      Pushing a33(r149,l0)
      Pushing a10(r151,l0)
      Pushing a1(r147,l0)
      Pushing a4(r150,l0)
      Popping a4(r150,l0)  -- assign reg 4
      Popping a1(r147,l0)  -- assign reg 5
      Popping a10(r151,l0)  -- assign reg 6
      Popping a33(r149,l0)  -- assign reg 7
      Popping a34(r139,l0)  -- assign reg 2
      Popping a42(r145,l0)  -- assign reg 0
      Popping a35(r138,l0)  -- assign reg 12
      Popping a37(r254,l0)  -- assign reg 14
      Popping a39(r153,l0)  -- assign reg 8
      Popping a40(r253,l0)  -- assign reg 10
      Popping a41(r154,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a2(r140,l0)  -- assign reg 7
      Popping a5(r243,l0)  -- assign reg 6
      Popping a0(r247,l0)  -- assign reg 3
      Popping a3(r152,l0)  -- assign reg 3
      Popping a23(r137,l0)  -- assign reg 2
      Popping a9(r135,l0)  -- assign reg 2
      Popping a18(r143,l0)  -- assign reg 0
      Popping a32(r144,l0)  -- assign reg 0
      Popping a12(r266,l0)  -- assign reg 12
      Popping a24(r136,l0)  -- assign reg 12
      Popping a26(r260,l0)  -- assign reg 14
      Popping a14(r134,l0)  -- assign reg 14
      Popping a8(r133,l0)  -- assign reg 1
      Popping a6(r241,l0)  -- assign reg 1
      Popping a7(r242,l0)  -- assign reg 3
      Popping a11(r239,l0)  -- assign reg 8
      Popping a13(r261,l0)  -- assign reg 1
      Popping a15(r265,l0)  -- assign reg 8
      Popping a16(r215,l0)  -- assign reg 10
      Popping a17(r231,l0)  -- assign reg 1
      Popping a19(r216,l0)  -- assign reg 2
      Popping a20(r213,l0)  -- assign reg 3
      Popping a21(r214,l0)  -- assign reg 3
      Popping a22(r212,l0)  -- assign reg 2
      Popping a25(r204,l0)  -- assign reg 0
      Popping a27(r255,l0)  -- assign reg 1
      Popping a28(r180,l0)  -- assign reg 8
      Popping a29(r259,l0)  -- assign reg 7
      Popping a30(r196,l0)  -- assign reg 1
      Popping a31(r181,l0)  -- assign reg 10
      Popping a36(r177,l0)  -- assign reg 0
      Popping a38(r249,l0)  -- assign reg 1
      Popping a43(r169,l0)  -- assign reg 8
Disposition:
    8:r133 l0     1   14:r134 l0    14    9:r135 l0     2   24:r136 l0    12
   23:r137 l0     2   35:r138 l0    12   34:r139 l0     2    2:r140 l0     7
   18:r143 l0     0   32:r144 l0     0   42:r145 l0     0    1:r147 l0     5
   33:r149 l0     7    4:r150 l0     4   10:r151 l0     6    3:r152 l0     3
   39:r153 l0     8   41:r154 l0   mem   43:r169 l0     8   36:r177 l0     0
   28:r180 l0     8   31:r181 l0    10   30:r196 l0     1   25:r204 l0     0
   22:r212 l0     2   20:r213 l0     3   21:r214 l0     3   16:r215 l0    10
   19:r216 l0     2   17:r231 l0     1   11:r239 l0     8    6:r241 l0     1
    7:r242 l0     3    5:r243 l0     6    0:r247 l0     3   38:r249 l0     1
   40:r253 l0    10   37:r254 l0    14   27:r255 l0     1   29:r259 l0     7
   26:r260 l0    14   13:r261 l0     1   15:r265 l0     8   12:r266 l0    12
New iteration of spill/restore move
+++Costs: overall 10000, reg -10000, mem 20000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 147
insn=11, live_throughout: 2, 3, 13, 147, dead_or_set: 0, 1
insn=4, live_throughout: 0, 3, 13, 147, dead_or_set: 2, 149
insn=5, live_throughout: 0, 13, 147, 149, dead_or_set: 3, 150
insn=6, live_throughout: 0, 13, 147, 149, 150, dead_or_set: 151
insn=12, live_throughout: 13, 147, 149, 150, 151, dead_or_set: 0, 1, 14
insn=13, live_throughout: 13, 147, 149, 150, 151, dead_or_set: 0, 1, 145
insn=23, live_throughout: 13, 145, 147, 149, 150, 151, dead_or_set: 138
insn=231, live_throughout: 13, 138, 145, 147, 149, 150, 151, dead_or_set: 139
insn=28, live_throughout: 13, 138, 145, 147, 149, 150, 151, dead_or_set: 253
insn=26, live_throughout: 13, 138, 145, 147, 149, 150, 151, 253, dead_or_set: 254
insn=27, live_throughout: 13, 138, 145, 147, 149, 150, 151, 253, dead_or_set: 254
insn=36, live_throughout: 13, 138, 145, 147, 149, 150, 151, 253, 254, dead_or_set: 169
insn=47, live_throughout: 13, 138, 145, 147, 149, 150, 151, 253, 254, dead_or_set: 169
insn=244, live_throughout: 13, 24, 138, 145, 147, 149, 150, 151, 253, 254, dead_or_set: 154
insn=15, live_throughout: 13, 24, 138, 147, 149, 150, 151, 253, 254, dead_or_set: 145, 153, 154
insn=30, live_throughout: 13, 24, 138, 147, 149, 150, 151, 153, 254, dead_or_set: 139, 253
insn=24, live_throughout: 13, 24, 138, 139, 147, 149, 150, 151, 153, 254, dead_or_set: 
insn=31, live_throughout: 13, 24, 138, 147, 149, 150, 151, 153, 254, dead_or_set: 139
insn=16, live_throughout: 13, 24, 138, 139, 147, 149, 150, 151, 254, dead_or_set: 153, 249
insn=18, live_throughout: 13, 24, 138, 139, 147, 149, 150, 151, 254, dead_or_set: 249
insn=32, live_throughout: 13, 24, 138, 139, 147, 149, 150, 151, dead_or_set: 139, 254
insn=48, live_throughout: 13, 138, 139, 147, 149, 150, 151, dead_or_set: 
insn=50, live_throughout: 13, 138, 139, 147, 149, 150, 151, dead_or_set: 177
insn=51, live_throughout: 13, 138, 147, 149, 150, 151, dead_or_set: 139, 177
insn=52, live_throughout: 13, 138, 139, 147, 149, 150, 151, dead_or_set: 
insn=55, live_throughout: 13, 139, 147, 149, 150, 151, dead_or_set: 138
insn=54, live_throughout: 13, 24, 139, 147, 149, 150, 151, dead_or_set: 
insn=56, live_throughout: 13, 139, 147, 149, 150, 151, dead_or_set: 
insn=60, live_throughout: 13, 147, 149, 150, 151, dead_or_set: 139
insn=61, live_throughout: 13, 147, 149, 150, 151, dead_or_set: 
insn=64, live_throughout: 13, 147, 149, 150, 151, dead_or_set: 0
insn=65, live_throughout: 13, 147, 149, 150, 151, dead_or_set: 0, 14
insn=66, live_throughout: 13, 147, 149, 150, 151, dead_or_set: 
insn=68, live_throughout: 13, 147, 150, 151, dead_or_set: 0, 149
insn=69, live_throughout: 13, 147, 150, 151, dead_or_set: 0, 1, 14
insn=70, live_throughout: 13, 147, 150, 151, dead_or_set: 0, 1, 144
insn=80, live_throughout: 13, 144, 147, 150, 151, dead_or_set: 136
insn=85, live_throughout: 13, 136, 144, 147, 150, 151, dead_or_set: 259
insn=83, live_throughout: 13, 136, 144, 147, 150, 151, 259, dead_or_set: 260
insn=84, live_throughout: 13, 136, 144, 147, 150, 151, 259, dead_or_set: 260
insn=232, live_throughout: 13, 136, 144, 147, 150, 151, 259, 260, dead_or_set: 137
insn=243, live_throughout: 13, 136, 144, 147, 150, 151, 259, 260, dead_or_set: 181
insn=72, live_throughout: 13, 136, 147, 150, 151, 259, 260, dead_or_set: 144, 180, 181
insn=242, live_throughout: 13, 136, 147, 150, 151, 180, 259, 260, dead_or_set: 196
insn=104, live_throughout: 13, 136, 147, 150, 151, 180, 259, 260, dead_or_set: 196
insn=87, live_throughout: 13, 24, 136, 147, 150, 151, 180, 260, dead_or_set: 137, 259
insn=88, live_throughout: 13, 24, 136, 147, 150, 151, 180, 260, dead_or_set: 137
insn=73, live_throughout: 13, 24, 136, 137, 147, 150, 151, 260, dead_or_set: 180, 255
insn=75, live_throughout: 13, 24, 136, 137, 147, 150, 151, 260, dead_or_set: 255
insn=89, live_throughout: 13, 24, 136, 137, 147, 150, 151, dead_or_set: 137, 260
insn=81, live_throughout: 13, 24, 136, 137, 147, 150, 151, dead_or_set: 
insn=105, live_throughout: 13, 136, 137, 147, 150, 151, dead_or_set: 
insn=107, live_throughout: 13, 136, 137, 147, 150, 151, dead_or_set: 204
insn=108, live_throughout: 13, 136, 147, 150, 151, dead_or_set: 137, 204
insn=109, live_throughout: 13, 136, 137, 147, 150, 151, dead_or_set: 
insn=112, live_throughout: 13, 137, 147, 150, 151, dead_or_set: 136
insn=111, live_throughout: 13, 24, 137, 147, 150, 151, dead_or_set: 
insn=113, live_throughout: 13, 137, 147, 150, 151, dead_or_set: 
insn=117, live_throughout: 13, 147, 150, 151, dead_or_set: 137
insn=118, live_throughout: 13, 147, 150, 151, dead_or_set: 
insn=121, live_throughout: 13, 147, 150, 151, dead_or_set: 0
insn=122, live_throughout: 13, 147, 150, 151, dead_or_set: 0, 14
insn=123, live_throughout: 13, 147, 150, 151, dead_or_set: 
insn=128, live_throughout: 13, 147, 150, 151, dead_or_set: 0
insn=129, live_throughout: 0, 13, 147, 150, 151, dead_or_set: 1
insn=130, live_throughout: 0, 1, 13, 147, 150, 151, dead_or_set: 2
insn=131, live_throughout: 0, 1, 2, 13, 147, 150, 151, dead_or_set: 3
insn=132, live_throughout: 13, 147, 150, 151, dead_or_set: 0, 1, 2, 3, 14
insn=133, live_throughout: 13, 147, 150, 151, dead_or_set: 0, 140
insn=135, live_throughout: 13, 140, 147, 150, 151, dead_or_set: 
insn=136, live_throughout: 13, 140, 147, 150, 151, dead_or_set: 
insn=138, live_throughout: 13, 140, 147, 150, 151, dead_or_set: 212
insn=140, live_throughout: 13, 140, 147, 150, 151, 212, dead_or_set: 214
insn=141, live_throughout: 13, 140, 147, 150, 151, dead_or_set: 212, 213, 214
insn=142, live_throughout: 13, 140, 147, 150, 151, dead_or_set: 213
insn=143, live_throughout: 13, 140, 147, 150, 151, dead_or_set: 
insn=145, live_throughout: 13, 140, 147, 150, 151, dead_or_set: 0
insn=146, live_throughout: 13, 140, 147, 150, 151, dead_or_set: 0, 1, 14
insn=147, live_throughout: 13, 140, 147, 150, 151, dead_or_set: 0, 1, 143
insn=158, live_throughout: 13, 140, 143, 147, 150, 151, dead_or_set: 134
insn=241, live_throughout: 13, 134, 140, 143, 147, 150, 151, dead_or_set: 216
insn=149, live_throughout: 13, 134, 140, 143, 147, 150, 151, dead_or_set: 215, 216
insn=163, live_throughout: 13, 134, 140, 143, 147, 150, 151, 215, dead_or_set: 265
insn=161, live_throughout: 13, 134, 140, 143, 147, 150, 151, 215, 265, dead_or_set: 266
insn=233, live_throughout: 13, 134, 140, 143, 147, 150, 151, 215, 265, 266, dead_or_set: 135
insn=162, live_throughout: 13, 134, 140, 147, 150, 151, 215, 265, dead_or_set: 143, 266
insn=171, live_throughout: 13, 134, 140, 147, 150, 151, 215, 265, 266, dead_or_set: 231
insn=182, live_throughout: 13, 134, 140, 147, 150, 151, 215, 265, 266, dead_or_set: 231
insn=150, live_throughout: 13, 24, 134, 140, 147, 150, 151, 265, 266, dead_or_set: 215, 261
insn=165, live_throughout: 13, 24, 134, 140, 147, 150, 151, 261, 266, dead_or_set: 135, 265
insn=159, live_throughout: 13, 24, 135, 140, 147, 150, 151, 261, 266, dead_or_set: 134
insn=166, live_throughout: 13, 24, 140, 147, 150, 151, 261, 266, dead_or_set: 135
insn=152, live_throughout: 13, 24, 135, 140, 147, 150, 151, 266, dead_or_set: 133, 261
insn=167, live_throughout: 13, 24, 133, 135, 140, 147, 150, 151, dead_or_set: 135, 266
insn=153, live_throughout: 13, 24, 133, 135, 140, 147, 150, 151, dead_or_set: 
insn=183, live_throughout: 13, 133, 135, 140, 147, 150, 151, dead_or_set: 
insn=185, live_throughout: 13, 133, 135, 140, 147, 150, 151, dead_or_set: 239
insn=186, live_throughout: 13, 133, 140, 147, 150, 151, dead_or_set: 135, 239
insn=187, live_throughout: 13, 133, 135, 140, 147, 150, 151, dead_or_set: 
insn=191, live_throughout: 13, 133, 135, 140, 147, 150, dead_or_set: 151
insn=189, live_throughout: 13, 24, 133, 140, 147, 150, dead_or_set: 135
insn=192, live_throughout: 13, 133, 140, 147, 150, dead_or_set: 
insn=194, live_throughout: 13, 133, 140, 147, 150, dead_or_set: 242
insn=195, live_throughout: 13, 140, 147, 150, dead_or_set: 133, 241, 242
insn=196, live_throughout: 13, 140, 147, 150, dead_or_set: 241
insn=197, live_throughout: 13, 140, 147, 150, dead_or_set: 
insn=199, live_throughout: 13, 140, 147, 150, dead_or_set: 243
insn=203, live_throughout: 13, 140, 147, 150, 243, dead_or_set: 1
insn=204, live_throughout: 1, 13, 140, 147, 150, 243, dead_or_set: 2
insn=205, live_throughout: 1, 2, 13, 140, 147, 150, 243, dead_or_set: 3
insn=202, live_throughout: 1, 2, 3, 13, 140, 147, 150, 243, dead_or_set: 0
insn=206, live_throughout: 13, 140, 147, 150, 243, dead_or_set: 0, 1, 2, 3, 14
insn=212, live_throughout: 0, 13, 140, 147, 150, dead_or_set: 1, 243
insn=213, live_throughout: 0, 1, 13, 140, 147, dead_or_set: 2, 150
insn=240, live_throughout: 0, 1, 2, 13, 140, 147, dead_or_set: 152
insn=210, live_throughout: 0, 1, 2, 13, 140, 147, dead_or_set: 152
insn=209, live_throughout: 1, 2, 13, 147, dead_or_set: 0, 140, 247
insn=211, live_throughout: 1, 2, 13, 247, dead_or_set: 0, 147
insn=214, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 247
insn=215, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=227, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 151: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 240 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 244 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 36 (nil))
init_insns for 177: (insn_list:REG_DEP_TRUE 50 (nil))
init_insns for 181: (insn_list:REG_DEP_TRUE 243 (nil))
init_insns for 196: (insn_list:REG_DEP_TRUE 242 (nil))
init_insns for 204: (insn_list:REG_DEP_TRUE 107 (nil))
init_insns for 214: (insn_list:REG_DEP_TRUE 140 (nil))
init_insns for 216: (insn_list:REG_DEP_TRUE 241 (nil))
init_insns for 231: (insn_list:REG_DEP_TRUE 171 (nil))
init_insns for 239: (insn_list:REG_DEP_TRUE 185 (nil))
init_insns for 242: (insn_list:REG_DEP_TRUE 194 (nil))
init_insns for 243: (insn_list:REG_DEP_TRUE 199 (nil))
changing reg in insn 152
changing reg in insn 195
changing reg in insn 195
changing reg in insn 158
changing reg in insn 182
changing reg in insn 182
changing reg in insn 233
changing reg in insn 186
changing reg in insn 166
changing reg in insn 189
changing reg in insn 186
changing reg in insn 167
changing reg in insn 165
changing reg in insn 186
changing reg in insn 80
changing reg in insn 104
changing reg in insn 104
changing reg in insn 112
changing reg in insn 232
changing reg in insn 108
changing reg in insn 88
changing reg in insn 111
changing reg in insn 108
changing reg in insn 89
changing reg in insn 87
changing reg in insn 108
changing reg in insn 23
changing reg in insn 47
changing reg in insn 47
changing reg in insn 55
changing reg in insn 231
changing reg in insn 51
changing reg in insn 31
changing reg in insn 54
changing reg in insn 51
changing reg in insn 32
changing reg in insn 30
changing reg in insn 51
changing reg in insn 133
changing reg in insn 209
changing reg in insn 147
changing reg in insn 149
changing reg in insn 149
changing reg in insn 70
changing reg in insn 72
changing reg in insn 72
changing reg in insn 13
changing reg in insn 15
changing reg in insn 15
changing reg in insn 2
changing reg in insn 211
changing reg in insn 145
changing reg in insn 4
changing reg in insn 68
changing reg in insn 5
changing reg in insn 213
changing reg in insn 205
changing reg in insn 131
changing reg in insn 6
changing reg in insn 191
changing reg in insn 135
changing reg in insn 240
changing reg in insn 210
changing reg in insn 15
changing reg in insn 36
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 72
changing reg in insn 243
changing reg in insn 72
changing reg in insn 242
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 138
changing reg in insn 141
changing reg in insn 141
changing reg in insn 141
changing reg in insn 140
changing reg in insn 141
changing reg in insn 149
changing reg in insn 241
changing reg in insn 149
changing reg in insn 171
changing reg in insn 182
changing reg in insn 185
changing reg in insn 186
changing reg in insn 195
changing reg in insn 194
changing reg in insn 195
changing reg in insn 199
changing reg in insn 212
changing reg in insn 202
changing reg in insn 209
changing reg in insn 214
changing reg in insn 16
changing reg in insn 28
changing reg in insn 30
changing reg in insn 27
changing reg in insn 26
changing reg in insn 31
changing reg in insn 27
changing reg in insn 32
changing reg in insn 73
changing reg in insn 85
changing reg in insn 87
changing reg in insn 84
changing reg in insn 83
changing reg in insn 88
changing reg in insn 84
changing reg in insn 89
changing reg in insn 150
changing reg in insn 163
changing reg in insn 165
changing reg in insn 162
changing reg in insn 161
changing reg in insn 166
changing reg in insn 162
changing reg in insn 167
Spilling for insn 15.
Using reg 2 for reload 0
Spilling for insn 24.
Spilling for insn 18.
Spilling for insn 54.
Spilling for insn 60.
Using reg 1 for reload 0
Spilling for insn 75.
Spilling for insn 81.
Spilling for insn 111.
Spilling for insn 117.
Using reg 1 for reload 0
Spilling for insn 142.
Spilling for insn 159.
Spilling for insn 153.
Spilling for insn 189.
Spilling for insn 196.
Spilling for insn 210.
deleting insn with uid = 244.

Reloads for insn # 15
Reload 0: reload_in (DI) = (const_int -9223372036854775808 [0x8000000000000000])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 154)
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 24
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])

Reloads for insn # 18
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])

Reloads for insn # 54
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])

Reloads for insn # 60
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 75
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 81
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 111
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 117
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 142
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 42 [0x2a])) [0 vdp.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 42 [0x2a])) [0 vdp.sign+0 S2 A16])

Reloads for insn # 159
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])

Reloads for insn # 153
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])

Reloads for insn # 189
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])

Reloads for insn # 196
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])

Reloads for insn # 210
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
deleting insn with uid = 13.
deleting insn with uid = 70.
deleting insn with uid = 147.
deleting insn with uid = 214.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 132.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 206.
verify found no changes in insn with uid = 215.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 34 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 36 (  1.9)


vfp_double_multiply_accumulate

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={19d,24u,3d} r1={23d,23u,4d} r2={27d,18u,4d} r3={27d,18u,3d} r4={1d,3u} r5={1d,2u} r6={2d,4u} r7={3d,3u} r8={5d,3u} r9={3d,3u} r10={3d,2u} r11={2d,2u} r12={13d,11u} r13={1d,49u,3d} r14={14d,10u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={17d,9u} r25={2d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} 
;;    total ref usage 1244{1041d,184u,19e} in 111{103 regular + 8 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 9 8 2 NOTE_INSN_DELETED)

(note 8 3 19 2 NOTE_INSN_FUNCTION_BEG)

(note 19 8 21 2 NOTE_INSN_DELETED)

(note 21 19 22 2 NOTE_INSN_DELETED)

(note 22 21 25 2 NOTE_INSN_DELETED)

(note 25 22 29 2 NOTE_INSN_DELETED)

(note 29 25 33 2 NOTE_INSN_DELETED)

(note 33 29 34 2 NOTE_INSN_DELETED)

(note 34 33 35 2 NOTE_INSN_DELETED)

(note 35 34 37 2 NOTE_INSN_DELETED)

(note 37 35 38 2 NOTE_INSN_DELETED)

(note 38 37 41 2 NOTE_INSN_DELETED)

(note 41 38 42 2 NOTE_INSN_DELETED)

(note 42 41 44 2 NOTE_INSN_DELETED)

(note 44 42 45 2 NOTE_INSN_DELETED)

(note 45 44 46 2 NOTE_INSN_DELETED)

(note 46 45 2 2 NOTE_INSN_DELETED)

(insn 2 46 11 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v:SI 5 r5 [orig:147 dd ] [147])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 11 2 4 2 arch/arm/vfp/vfpdouble.c:856 (set (reg:SI 0 r0)
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (nil))

(insn 4 11 5 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v:SI 7 r7 [orig:149 dm ] [149])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v:SI 4 r4 [orig:150 fpscr ] [150])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(insn 6 5 12 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v:SI 6 r6 [orig:151 negate ] [151])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 negate+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 negate+0 S4 A32])
        (nil)))

(call_insn 12 6 23 2 arch/arm/vfp/vfpdouble.c:856 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 23 12 231 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:138 D.5961 ] [138])
        (zero_extract:SI (reg:SI 1 r1 [ D.4821+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 231 23 28 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:139 significand ] [139])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 28 231 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 10 sl [253])
        (ashift:SI (reg:SI 0 r0 [orig:145 D.4821 ] [145])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 26 28 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:254+4 ] [254])
        (ashift:SI (reg:SI 1 r1 [ D.4821+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 27 26 36 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:254+4 ] [254])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:145 D.4821 ] [145])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:254+4 ] [254]))) 270 {*arith_shiftsi} (nil))

(insn 36 27 47 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 8 r8 [169])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 47 36 244 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:138 D.5961 ] [138])
                    (reg:SI 8 r8 [169]))
                (ne:SI (reg:SI 12 ip [orig:138 D.5961 ] [138])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(note 244 47 246 2 NOTE_INSN_DELETED)

(insn 246 244 15 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 2 r2)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 15 246 30 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [153])
        (and:DI (reg:DI 0 r0 [orig:145 D.4821 ] [145])
            (reg:DI 2 r2))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:145 D.4821 ] [145])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 30 15 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:139 significand ] [139])
        (lshiftrt:SI (reg:SI 10 sl [253])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 24 30 31 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:138 D.5961 ] [138])) 176 {*movhi_insn_arch4} (nil))

(insn 31 24 16 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:139 significand ] [139])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:254+4 ] [254])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:139 significand ] [139]))) 270 {*arith_shiftsi} (nil))

(insn 16 31 18 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [249])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 18 16 32 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
        (reg:HI 1 r1 [249])) 176 {*movhi_insn_arch4} (nil))

(insn 32 18 48 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:254+4 ] [254])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 48 32 49 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 49 48 50 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 51 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [177])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 51 50 52 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:139 significand ] [139])
        (ior:DI (reg/v:DI 2 r2 [orig:139 significand ] [139])
            (reg:DI 0 r0 [177]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:139 significand ] [139])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 52 51 53 4 274 "" [1 uses])

(note 53 52 55 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 55 53 54 4 arch/arm/vfp/vfpdouble.c:857 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:138 D.5961 ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 54 55 56 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:139 significand ] [139])) 163 {*arm_movdi} (nil))

(jump_insn 56 54 57 4 arch/arm/vfp/vfpdouble.c:857 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  4 [50.0%]  (fallthru)
(note 57 56 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 58 57 59 5 NOTE_INSN_DELETED)

(note 59 58 60 5 NOTE_INSN_DELETED)

(insn 60 59 61 5 arch/arm/vfp/vfpdouble.c:857 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:139 significand ] [139])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 61 60 62 5 arch/arm/vfp/vfpdouble.c:857 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 63 62 64 6 NOTE_INSN_DELETED)

(insn 64 63 65 6 arch/arm/vfp/vfpdouble.c:858 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(call_insn 65 64 66 6 arch/arm/vfp/vfpdouble.c:858 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 66 65 67 7 275 "" [2 uses])

(note 67 66 76 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 76 67 78 7 NOTE_INSN_DELETED)

(note 78 76 79 7 NOTE_INSN_DELETED)

(note 79 78 82 7 NOTE_INSN_DELETED)

(note 82 79 86 7 NOTE_INSN_DELETED)

(note 86 82 90 7 NOTE_INSN_DELETED)

(note 90 86 91 7 NOTE_INSN_DELETED)

(note 91 90 92 7 NOTE_INSN_DELETED)

(note 92 91 94 7 NOTE_INSN_DELETED)

(note 94 92 95 7 NOTE_INSN_DELETED)

(note 95 94 98 7 NOTE_INSN_DELETED)

(note 98 95 99 7 NOTE_INSN_DELETED)

(note 99 98 101 7 NOTE_INSN_DELETED)

(note 101 99 102 7 NOTE_INSN_DELETED)

(note 102 101 103 7 NOTE_INSN_DELETED)

(note 103 102 68 7 NOTE_INSN_DELETED)

(insn 68 103 69 7 arch/arm/vfp/vfpdouble.c:860 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:149 dm ] [149])) 167 {*arm_movsi_insn} (nil))

(call_insn 69 68 80 7 arch/arm/vfp/vfpdouble.c:860 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 80 69 85 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:136 D.5976 ] [136])
        (zero_extract:SI (reg:SI 1 r1 [ D.4830+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 85 80 83 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 7 r7 [259])
        (ashift:SI (reg:SI 0 r0 [orig:144 D.4830 ] [144])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 83 85 84 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:260+4 ] [260])
        (ashift:SI (reg:SI 1 r1 [ D.4830+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 84 83 232 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:260+4 ] [260])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:144 D.4830 ] [144])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:260+4 ] [260]))) 270 {*arith_shiftsi} (nil))

(insn 232 84 243 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:137 significand ] [137])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 243 232 72 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [181])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 72 243 242 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [180])
        (and:DI (reg:DI 0 r0 [orig:144 D.4830 ] [144])
            (reg:DI 10 sl [181]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:144 D.4830 ] [144])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 242 72 104 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [196])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 104 242 87 7 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:136 D.5976 ] [136])
                    (reg:SI 1 r1 [196]))
                (ne:SI (reg:SI 12 ip [orig:136 D.5976 ] [136])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 87 104 88 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:137 significand ] [137])
        (lshiftrt:SI (reg:SI 7 r7 [259])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 88 87 73 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:137 significand ] [137])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:260+4 ] [260])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:137 significand ] [137]))) 270 {*arith_shiftsi} (nil))

(insn 73 88 75 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [255])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 75 73 89 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
        (reg:HI 1 r1 [255])) 176 {*movhi_insn_arch4} (nil))

(insn 89 75 81 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:260+4 ] [260])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 81 89 105 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:136 D.5976 ] [136])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 105 81 106 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 106 105 107 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 107 106 108 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [204])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 108 107 109 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:137 significand ] [137])
        (ior:DI (reg/v:DI 2 r2 [orig:137 significand ] [137])
            (reg:DI 0 r0 [204]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:137 significand ] [137])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 109 108 110 9 276 "" [1 uses])

(note 110 109 112 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 112 110 111 9 arch/arm/vfp/vfpdouble.c:861 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:136 D.5976 ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 111 112 113 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:137 significand ] [137])) 163 {*arm_movdi} (nil))

(jump_insn 113 111 114 9 arch/arm/vfp/vfpdouble.c:861 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  9 [50.0%]  (fallthru)
(note 114 113 115 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 115 114 116 10 NOTE_INSN_DELETED)

(note 116 115 117 10 NOTE_INSN_DELETED)

(insn 117 116 118 10 arch/arm/vfp/vfpdouble.c:861 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:137 significand ] [137])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 118 117 119 10 arch/arm/vfp/vfpdouble.c:861 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  12 [71.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  10 [29.0%]  (fallthru)
(note 119 118 120 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 120 119 121 11 NOTE_INSN_DELETED)

(insn 121 120 122 11 arch/arm/vfp/vfpdouble.c:862 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(call_insn 122 121 123 11 arch/arm/vfp/vfpdouble.c:862 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  9 [50.0%] 
;; Pred edge  10 [71.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 123 122 124 12 277 "" [2 uses])

(note 124 123 125 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 125 124 126 12 NOTE_INSN_DELETED)

(note 126 125 127 12 NOTE_INSN_DELETED)

(note 127 126 134 12 NOTE_INSN_DELETED)

(note 134 127 128 12 NOTE_INSN_DELETED)

(insn 128 134 129 12 arch/arm/vfp/vfpdouble.c:864 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))) 4 {*arm_addsi3} (nil))

(insn 129 128 130 12 arch/arm/vfp/vfpdouble.c:864 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(insn 130 129 131 12 arch/arm/vfp/vfpdouble.c:864 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 131 130 132 12 arch/arm/vfp/vfpdouble.c:864 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:150 fpscr ] [150])) 167 {*arm_movsi_insn} (nil))

(call_insn 132 131 133 12 arch/arm/vfp/vfpdouble.c:864 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply") [flags 0x3] <function_decl 0x10b08180 vfp_double_multiply>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 133 132 135 12 arch/arm/vfp/vfpdouble.c:864 (set (reg/v:SI 7 r7 [orig:140 exceptions ] [140])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 135 133 136 12 arch/arm/vfp/vfpdouble.c:865 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:151 negate ] [151])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 136 135 137 12 arch/arm/vfp/vfpdouble.c:865 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 143)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  13 [50.0%]  (fallthru)
;; Succ edge  14 [50.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  12 [50.0%]  (fallthru)
(note 137 136 138 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 138 137 140 13 arch/arm/vfp/vfpdouble.c:866 (set (reg:SI 2 r2 [orig:212 vdp.sign ] [212])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 42 [0x2a])) [0 vdp.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 140 138 141 13 arch/arm/vfp/vfpdouble.c:866 (set (reg:SI 3 r3 [214])
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -32768 [0xffffffffffff8000])
        (nil)))

(insn 141 140 142 13 arch/arm/vfp/vfpdouble.c:866 (set (reg:SI 3 r3 [213])
        (xor:SI (reg:SI 2 r2 [orig:212 vdp.sign ] [212])
            (reg:SI 3 r3 [214]))) 96 {*arm_xorsi3} (expr_list:REG_EQUAL (xor:SI (reg:SI 2 r2 [orig:212 vdp.sign ] [212])
            (const_int -32768 [0xffffffffffff8000]))
        (nil)))

(insn 142 141 143 13 arch/arm/vfp/vfpdouble.c:866 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 42 [0x2a])) [0 vdp.sign+0 S2 A16])
        (reg:HI 3 r3 [213])) 176 {*movhi_insn_arch4} (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 12 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [50.0%] 
;; Pred edge  13 [100.0%]  (fallthru)
(code_label 143 142 144 14 278 "" [1 uses])

(note 144 143 154 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 154 144 156 14 NOTE_INSN_DELETED)

(note 156 154 157 14 NOTE_INSN_DELETED)

(note 157 156 160 14 NOTE_INSN_DELETED)

(note 160 157 164 14 NOTE_INSN_DELETED)

(note 164 160 168 14 NOTE_INSN_DELETED)

(note 168 164 169 14 NOTE_INSN_DELETED)

(note 169 168 170 14 NOTE_INSN_DELETED)

(note 170 169 172 14 NOTE_INSN_DELETED)

(note 172 170 173 14 NOTE_INSN_DELETED)

(note 173 172 176 14 NOTE_INSN_DELETED)

(note 176 173 177 14 NOTE_INSN_DELETED)

(note 177 176 179 14 NOTE_INSN_DELETED)

(note 179 177 180 14 NOTE_INSN_DELETED)

(note 180 179 181 14 NOTE_INSN_DELETED)

(note 181 180 145 14 NOTE_INSN_DELETED)

(insn 145 181 146 14 arch/arm/vfp/vfpdouble.c:868 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:147 dd ] [147])) 167 {*arm_movsi_insn} (nil))

(call_insn 146 145 158 14 arch/arm/vfp/vfpdouble.c:868 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 158 146 241 14 arch/arm/vfp/vfp.h:305 (set (reg:SI 14 lr [orig:134 D.5991 ] [134])
        (zero_extract:SI (reg:SI 1 r1 [ D.4847+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 241 158 149 14 arch/arm/vfp/vfp.h:304 (set (reg:DI 2 r2 [216])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 149 241 163 14 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [215])
        (and:DI (reg:DI 0 r0 [orig:143 D.4847 ] [143])
            (reg:DI 2 r2 [216]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:143 D.4847 ] [143])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 163 149 161 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 8 r8 [265])
        (ashift:SI (reg:SI 0 r0 [orig:143 D.4847 ] [143])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 161 163 233 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 12 ip [orig:266+4 ] [266])
        (ashift:SI (reg:SI 1 r1 [ D.4847+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 233 161 162 14 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:135 significand ] [135])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 162 233 171 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 12 ip [orig:266+4 ] [266])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:143 D.4847 ] [143])
                (const_int 20 [0x14]))
            (reg:SI 12 ip [orig:266+4 ] [266]))) 270 {*arith_shiftsi} (nil))

(insn 171 162 182 14 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [231])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 182 171 150 14 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 14 lr [orig:134 D.5991 ] [134])
                    (reg:SI 1 r1 [231]))
                (ne:SI (reg:SI 14 lr [orig:134 D.5991 ] [134])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 150 182 165 14 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [261])
        (lshiftrt:SI (reg:SI 11 fp [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 165 150 159 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:135 significand ] [135])
        (lshiftrt:SI (reg:SI 8 r8 [265])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 159 165 166 14 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
        (reg:HI 14 lr [orig:134 D.5991 ] [134])) 176 {*movhi_insn_arch4} (nil))

(insn 166 159 152 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:135 significand ] [135])
        (ior:SI (ashift:SI (reg:SI 12 ip [orig:266+4 ] [266])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:135 significand ] [135]))) 270 {*arith_shiftsi} (nil))

(insn 152 166 167 14 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [orig:133 D.5994 ] [133])
        (zero_extend:SI (reg:HI 1 r1 [261]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 167 152 153 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 12 ip [orig:266+4 ] [266])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 153 167 183 14 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
        (reg:HI 1 r1 [orig:133 D.5994 ] [133])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 183 153 184 14 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 187)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 8 [r8] 9 [r9]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  14 [50.0%]  (fallthru)
(note 184 183 185 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 185 184 186 15 arch/arm/vfp/vfp.h:310 (set (reg:DI 8 r8 [239])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 186 185 187 15 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:135 significand ] [135])
        (ior:DI (reg/v:DI 2 r2 [orig:135 significand ] [135])
            (reg:DI 8 r8 [239]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:135 significand ] [135])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 14 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [50.0%] 
;; Pred edge  15 [100.0%]  (fallthru)
(code_label 187 186 188 16 279 "" [1 uses])

(note 188 187 190 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 190 188 191 16 NOTE_INSN_DELETED)

(insn 191 190 189 16 arch/arm/vfp/vfpdouble.c:869 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:151 negate ] [151])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 189 191 192 16 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:135 significand ] [135])) 163 {*arm_movdi} (nil))

(jump_insn 192 189 193 16 arch/arm/vfp/vfpdouble.c:869 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 197)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 7 [r7] 13 [sp]


;; Succ edge  17 [61.0%]  (fallthru)
;; Succ edge  18 [39.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  16 [61.0%]  (fallthru)
(note 193 192 194 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 194 193 195 17 arch/arm/vfp/vfpdouble.c:870 (set (reg:SI 3 r3 [242])
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -32768 [0xffffffffffff8000])
        (nil)))

(insn 195 194 196 17 arch/arm/vfp/vfpdouble.c:870 (set (reg:SI 1 r1 [241])
        (xor:SI (reg:SI 1 r1 [orig:133 D.5994 ] [133])
            (reg:SI 3 r3 [242]))) 96 {*arm_xorsi3} (expr_list:REG_EQUAL (xor:SI (reg:SI 1 r1 [orig:133 D.5994 ] [133])
            (const_int -32768 [0xffffffffffff8000]))
        (nil)))

(insn 196 195 197 17 arch/arm/vfp/vfpdouble.c:870 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
        (reg:HI 1 r1 [241])) 176 {*movhi_insn_arch4} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  16 [39.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
(code_label 197 196 198 18 280 "" [1 uses])

(note 198 197 200 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 200 198 201 18 NOTE_INSN_DELETED)

(note 201 200 207 18 NOTE_INSN_DELETED)

(note 207 201 199 18 NOTE_INSN_DELETED)

(insn 199 207 203 18 arch/arm/vfp/vfpdouble.c:872 (set (reg/f:SI 6 r6 [243])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 56 [0x38]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 56 [0x38]))
        (nil)))

(insn 203 199 204 18 arch/arm/vfp/vfpdouble.c:872 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(insn 204 203 205 18 arch/arm/vfp/vfpdouble.c:872 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))) 4 {*arm_addsi3} (nil))

(insn 205 204 202 18 arch/arm/vfp/vfpdouble.c:872 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:150 fpscr ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 202 205 206 18 arch/arm/vfp/vfpdouble.c:872 (set (reg:SI 0 r0)
        (reg/f:SI 6 r6 [243])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(call_insn 206 202 212 18 arch/arm/vfp/vfpdouble.c:872 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_add") [flags 0x3] <function_decl 0x10b08080 vfp_double_add>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 212 206 213 18 arch/arm/vfp/vfpdouble.c:874 (set (reg:SI 1 r1)
        (reg/f:SI 6 r6 [243])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 213 212 240 18 arch/arm/vfp/vfpdouble.c:874 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:150 fpscr ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 240 213 210 18 arch/arm/vfp/vfpdouble.c:874 (set (reg/v/f:SI 3 r3 [orig:152 func ] [152])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 116 [0x74])) [0 func+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 116 [0x74])) [0 func+0 S4 A32])
        (nil)))

(insn 210 240 209 18 arch/arm/vfp/vfpdouble.c:874 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v/f:SI 3 r3 [orig:152 func ] [152])) 167 {*arm_movsi_insn} (nil))

(insn 209 210 211 18 arch/arm/vfp/vfpdouble.c:874 (set (reg:SI 3 r3 [247])
        (ior:SI (reg:SI 0 r0)
            (reg/v:SI 7 r7 [orig:140 exceptions ] [140]))) 89 {*arm_iorsi3} (nil))

(insn 211 209 215 18 arch/arm/vfp/vfpdouble.c:874 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:147 dd ] [147])) 167 {*arm_movsi_insn} (nil))

(call_insn 215 211 227 18 arch/arm/vfp/vfpdouble.c:874 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 227 215 239 18 arch/arm/vfp/vfpdouble.c:875 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 18 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 239 227 245 NOTE_INSN_DELETED)

(note 245 239 0 NOTE_INSN_DELETED)


;; Function vfp_double_fnmsc (vfp_double_fnmsc)[0:178]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 34.
verify found no changes in insn with uid = 34.
deleting insn with uid = 11.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a0 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 29(l0): point = 0
   Insn 17(l0): point = 2
   Insn 12(l0): point = 4
   Insn 34(l0): point = 6
   Insn 10(l0): point = 8
   Insn 9(l0): point = 10
 a0(r140): [5..6]
 a1(r139): [9..10]
Compressing live ranges: from 13 to 4 - 30%
Ranges after the compression:
 a0(r140): [0..1]
 a1(r139): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r140,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r139,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3

  regions=1, blocks=3, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r140 1r139
    modified regnos: 139 140
    border:
    Pressure: GENERAL_REGS=5
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
      Pushing a1(r139,l0)
      Pushing a0(r140,l0)
      Popping a0(r140,l0)  -- assign reg 12
      Popping a1(r139,l0)  -- assign reg 12
Disposition:
    1:r139 l0    12    0:r140 l0    12
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=9, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=10, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=34, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140
insn=12, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140
insn=17, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=29, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 139: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 34 (nil))
changing reg in insn 9
changing reg in insn 10
changing reg in insn 34
changing reg in insn 12
Spilling for insn 10.
Spilling for insn 12.

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fnmsc

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r12={4d,2u} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 140{126d,14u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:910 (set (reg:SI 12 ip [139])
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 3 [0x3])
        (nil)))

(insn 10 9 34 2 arch/arm/vfp/vfpdouble.c:910 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 3 [0x3])
        (nil)))

(insn 34 10 12 2 arch/arm/vfp/vfpdouble.c:910 (set (reg/f:SI 12 ip [140])
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10e32ea0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10e32ea0>)
        (nil)))

(insn 12 34 17 2 arch/arm/vfp/vfpdouble.c:910 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 12 ip [140])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10e32ea0>)
        (nil)))

(call_insn 17 12 29 2 arch/arm/vfp/vfpdouble.c:910 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply_accumulate") [flags 0x3] <function_decl 0x10b08280 vfp_double_multiply_accumulate>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 29 17 33 2 arch/arm/vfp/vfpdouble.c:911 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 33 29 35 NOTE_INSN_DELETED)

(note 35 33 0 NOTE_INSN_DELETED)


;; Function vfp_double_fnmac (vfp_double_fnmac)[0:176]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 34.
verify found no changes in insn with uid = 34.
deleting insn with uid = 11.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a0 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 29(l0): point = 0
   Insn 17(l0): point = 2
   Insn 12(l0): point = 4
   Insn 34(l0): point = 6
   Insn 10(l0): point = 8
   Insn 9(l0): point = 10
 a0(r140): [5..6]
 a1(r139): [9..10]
Compressing live ranges: from 13 to 4 - 30%
Ranges after the compression:
 a0(r140): [0..1]
 a1(r139): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r140,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r139,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3

  regions=1, blocks=3, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r140 1r139
    modified regnos: 139 140
    border:
    Pressure: GENERAL_REGS=5
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
      Pushing a1(r139,l0)
      Pushing a0(r140,l0)
      Popping a0(r140,l0)  -- assign reg 12
      Popping a1(r139,l0)  -- assign reg 12
Disposition:
    1:r139 l0    12    0:r140 l0    12
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=9, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=10, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=34, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140
insn=12, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140
insn=17, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=29, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 139: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 34 (nil))
changing reg in insn 9
changing reg in insn 10
changing reg in insn 34
changing reg in insn 12
Spilling for insn 10.
Spilling for insn 12.

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fnmac

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r12={4d,2u} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 140{126d,14u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:894 (set (reg:SI 12 ip [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 10 9 34 2 arch/arm/vfp/vfpdouble.c:894 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 34 10 12 2 arch/arm/vfp/vfpdouble.c:894 (set (reg/f:SI 12 ip [140])
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x10e374a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x10e374a0>)
        (nil)))

(insn 12 34 17 2 arch/arm/vfp/vfpdouble.c:894 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 12 ip [140])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x10e374a0>)
        (nil)))

(call_insn 17 12 29 2 arch/arm/vfp/vfpdouble.c:894 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply_accumulate") [flags 0x3] <function_decl 0x10b08280 vfp_double_multiply_accumulate>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 29 17 33 2 arch/arm/vfp/vfpdouble.c:895 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 33 29 35 NOTE_INSN_DELETED)

(note 35 33 0 NOTE_INSN_DELETED)


;; Function vfp_double_fmsc (vfp_double_fmsc)[0:177]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 34.
verify found no changes in insn with uid = 34.
deleting insn with uid = 11.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a0 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 29(l0): point = 0
   Insn 17(l0): point = 2
   Insn 12(l0): point = 4
   Insn 34(l0): point = 6
   Insn 10(l0): point = 8
   Insn 9(l0): point = 10
 a0(r140): [5..6]
 a1(r139): [9..10]
Compressing live ranges: from 13 to 4 - 30%
Ranges after the compression:
 a0(r140): [0..1]
 a1(r139): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r140,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r139,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3

  regions=1, blocks=3, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r140 1r139
    modified regnos: 139 140
    border:
    Pressure: GENERAL_REGS=5
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
      Pushing a1(r139,l0)
      Pushing a0(r140,l0)
      Popping a0(r140,l0)  -- assign reg 12
      Popping a1(r139,l0)  -- assign reg 12
Disposition:
    1:r139 l0    12    0:r140 l0    12
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=9, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=10, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=34, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140
insn=12, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140
insn=17, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=29, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 139: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 34 (nil))
changing reg in insn 9
changing reg in insn 10
changing reg in insn 34
changing reg in insn 12
Spilling for insn 10.
Spilling for insn 12.

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fmsc

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r12={4d,2u} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 140{126d,14u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:902 (set (reg:SI 12 ip [139])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 10 9 34 2 arch/arm/vfp/vfpdouble.c:902 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(insn 34 10 12 2 arch/arm/vfp/vfpdouble.c:902 (set (reg/f:SI 12 ip [140])
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x10e37f00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x10e37f00>)
        (nil)))

(insn 12 34 17 2 arch/arm/vfp/vfpdouble.c:902 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 12 ip [140])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x10e37f00>)
        (nil)))

(call_insn 17 12 29 2 arch/arm/vfp/vfpdouble.c:902 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply_accumulate") [flags 0x3] <function_decl 0x10b08280 vfp_double_multiply_accumulate>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 29 17 33 2 arch/arm/vfp/vfpdouble.c:903 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 33 29 35 NOTE_INSN_DELETED)

(note 35 33 0 NOTE_INSN_DELETED)


;; Function vfp_double_fmac (vfp_double_fmac)[0:175]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 34.
verify found no changes in insn with uid = 34.
deleting insn with uid = 11.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a0 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 29(l0): point = 0
   Insn 17(l0): point = 2
   Insn 12(l0): point = 4
   Insn 34(l0): point = 6
   Insn 10(l0): point = 8
   Insn 9(l0): point = 10
 a0(r140): [5..6]
 a1(r139): [9..10]
Compressing live ranges: from 13 to 4 - 30%
Ranges after the compression:
 a0(r140): [0..1]
 a1(r139): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r140,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r139,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3

  regions=1, blocks=3, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r140 1r139
    modified regnos: 139 140
    border:
    Pressure: GENERAL_REGS=5
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
      Pushing a1(r139,l0)
      Pushing a0(r140,l0)
      Popping a0(r140,l0)  -- assign reg 12
      Popping a1(r139,l0)  -- assign reg 12
Disposition:
    1:r139 l0    12    0:r140 l0    12
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=9, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=10, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=34, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140
insn=12, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140
insn=17, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=29, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 139: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 34 (nil))
changing reg in insn 9
changing reg in insn 10
changing reg in insn 34
changing reg in insn 12
Spilling for insn 10.
Spilling for insn 12.

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fmac

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r12={4d,2u} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 140{126d,14u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:886 (set (reg:SI 12 ip [139])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 10 9 34 2 arch/arm/vfp/vfpdouble.c:886 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [139])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 34 10 12 2 arch/arm/vfp/vfpdouble.c:886 (set (reg/f:SI 12 ip [140])
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x10e3d4e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x10e3d4e0>)
        (nil)))

(insn 12 34 17 2 arch/arm/vfp/vfpdouble.c:886 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 12 ip [140])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x10e3d4e0>)
        (nil)))

(call_insn 17 12 29 2 arch/arm/vfp/vfpdouble.c:886 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply_accumulate") [flags 0x3] <function_decl 0x10b08280 vfp_double_multiply_accumulate>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 29 17 33 2 arch/arm/vfp/vfpdouble.c:887 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 33 29 35 NOTE_INSN_DELETED)

(note 35 33 0 NOTE_INSN_DELETED)


;; Function vfp_double_fadd (vfp_double_fadd)[0:181]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 160.
verify found no changes in insn with uid = 160.
deleting insn with uid = 133.
scanning new insn with uid = 161.
verify found no changes in insn with uid = 161.
deleting insn with uid = 91.
scanning new insn with uid = 162.
verify found no changes in insn with uid = 162.
deleting insn with uid = 69.
scanning new insn with uid = 163.
verify found no changes in insn with uid = 163.
deleting insn with uid = 34.
scanning new insn with uid = 164.
verify found no changes in insn with uid = 164.
deleting insn with uid = 12.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)

Pass 0 for finding allocno costs

    a8 (r217,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a9(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a15(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a17(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a18(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000


Pass 1 for finding allocno costs

    r217: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r217,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a9(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a15(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a17(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a18(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a20(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000

   Insn 151(l0): point = 0
   Insn 139(l0): point = 2
   Insn 134(l0): point = 4
   Insn 160(l0): point = 6
   Insn 138(l0): point = 8
   Insn 137(l0): point = 10
   Insn 136(l0): point = 12
   Insn 135(l0): point = 14
   Insn 131(l0): point = 16
   Insn 130(l0): point = 18
   Insn 126(l0): point = 20
   Insn 129(l0): point = 22
   Insn 128(l0): point = 24
   Insn 127(l0): point = 26
   Insn 123(l0): point = 28
   Insn 120(l0): point = 31
   Insn 119(l0): point = 33
   Insn 116(l0): point = 36
   Insn 115(l0): point = 38
   Insn 111(l0): point = 41
   Insn 109(l0): point = 43
   Insn 110(l0): point = 45
   Insn 106(l0): point = 48
   Insn 105(l0): point = 53
   Insn 103(l0): point = 56
   Insn 79(l0): point = 58
   Insn 87(l0): point = 60
   Insn 73(l0): point = 62
   Insn 71(l0): point = 64
   Insn 86(l0): point = 66
   Insn 85(l0): point = 68
   Insn 102(l0): point = 70
   Insn 161(l0): point = 72
   Insn 70(l0): point = 74
   Insn 162(l0): point = 79
   Insn 156(l0): point = 81
   Insn 82(l0): point = 83
   Insn 81(l0): point = 85
   Insn 83(l0): point = 87
   Insn 78(l0): point = 89
   Insn 68(l0): point = 91
   Insn 67(l0): point = 93
   Insn 66(l0): point = 95
   Insn 63(l0): point = 98
   Insn 62(l0): point = 100
   Insn 59(l0): point = 103
   Insn 58(l0): point = 105
   Insn 54(l0): point = 108
   Insn 52(l0): point = 110
   Insn 53(l0): point = 112
   Insn 49(l0): point = 115
   Insn 48(l0): point = 120
   Insn 46(l0): point = 123
   Insn 22(l0): point = 125
   Insn 30(l0): point = 127
   Insn 16(l0): point = 129
   Insn 14(l0): point = 131
   Insn 29(l0): point = 133
   Insn 28(l0): point = 135
   Insn 45(l0): point = 137
   Insn 163(l0): point = 139
   Insn 13(l0): point = 141
   Insn 164(l0): point = 146
   Insn 155(l0): point = 148
   Insn 25(l0): point = 150
   Insn 24(l0): point = 152
   Insn 26(l0): point = 154
   Insn 21(l0): point = 156
   Insn 11(l0): point = 158
   Insn 10(l0): point = 160
   Insn 5(l0): point = 162
   Insn 4(l0): point = 164
   Insn 9(l0): point = 166
   Insn 2(l0): point = 168
 a0(r204): [5..6]
 a1(r137): [9..16]
 a2(r145): [11..162]
 a3(r200): [13..28]
 a4(r142): [15..168]
 a5(r134): [39..81]
 a6(r133): [46..89]
 a7(r197): [49..53]
 a8(r217): [61..85]
 a9(r212): [63..64]
 a10(r173): [77..77] [65..75]
 a11(r216): [69..87]
 a12(r189): [71..72]
 a13(r174): [75..79]
 a14(r139): [75..91]
 a15(r144): [96..164]
 a16(r136): [106..148]
 a17(r135): [113..156]
 a18(r170): [116..120]
 a19(r211): [128..152]
 a20(r206): [130..131]
 a21(r146): [144..144] [132..142]
 a22(r210): [136..154]
 a23(r162): [138..139]
 a24(r147): [142..146]
 a25(r140): [142..158]
Compressing live ranges: from 171 to 50 - 29%
Ranges after the compression:
 a0(r204): [0..1]
 a1(r137): [2..6]
 a2(r145): [3..47]
 a3(r200): [4..7]
 a4(r142): [5..49]
 a5(r134): [8..22]
 a6(r133): [9..25]
 a7(r197): [10..11]
 a8(r217): [12..23]
 a9(r212): [13..14]
 a10(r173): [20..20] [15..19]
 a11(r216): [16..24]
 a12(r189): [17..18]
 a13(r174): [19..21]
 a14(r139): [19..26]
 a15(r144): [27..48]
 a16(r136): [28..42]
 a17(r135): [29..45]
 a18(r170): [30..31]
 a19(r211): [32..43]
 a20(r206): [33..34]
 a21(r146): [40..40] [35..39]
 a22(r210): [36..44]
 a23(r162): [37..38]
 a24(r147): [39..41]
 a25(r140): [39..46]
+++Allocating 200 bytes for conflict table (uncompressed size 208)
;; a0(r204,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r137,l0) conflicts: a2(r145,l0) a3(r200,l0) a4(r142,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a2(r145,l0) conflicts: a1(r137,l0) a3(r200,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a7(r197,l0) a8(r217,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r200,l0) conflicts: a1(r137,l0) a2(r145,l0) a4(r142,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r142,l0) conflicts: a1(r137,l0) a2(r145,l0) a3(r200,l0) a5(r134,l0) a6(r133,l0) a7(r197,l0) a8(r217,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r134,l0) conflicts: a2(r145,l0) a4(r142,l0) a6(r133,l0) a7(r197,l0) a8(r217,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r133,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a7(r197,l0) a8(r217,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r197,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r217,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a9(r212,l0) a10(r173,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r212,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r173,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a11(r216,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r216,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a10(r173,l0) a12(r189,l0) a13(r174,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r189,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a10(r173,l0) a11(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r174,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a10(r173,l0) a11(r216,l0) a14(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r139,l0) conflicts: a2(r145,l0) a4(r142,l0) a5(r134,l0) a6(r133,l0) a8(r217,l0) a10(r173,l0) a11(r216,l0) a13(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r144,l0) conflicts: a2(r145,l0) a4(r142,l0) a16(r136,l0) a17(r135,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a16(r136,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a17(r135,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r135,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a18(r170,l0) a19(r211,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r170,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r211,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a20(r206,l0) a21(r146,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r206,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r146,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a22(r210,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r210,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a21(r146,l0) a23(r162,l0) a24(r147,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r162,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a21(r146,l0) a22(r210,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r147,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a21(r146,l0) a22(r210,l0) a25(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r140,l0) conflicts: a2(r145,l0) a4(r142,l0) a15(r144,l0) a16(r136,l0) a17(r135,l0) a19(r211,l0) a21(r146,l0) a22(r210,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=13, points=50
    allocnos=26, copies=0, conflicts=0, ranges=28

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 12 11 10 9 8 7 6 5 4 3 2
    all: 0r204 1r137 2r145 3r200 4r142 5r134 6r133 7r197 8r217 9r212 10r173 11r216 12r189 13r174 14r139 15r144 16r136 17r135 18r170 19r211 20r206 21r146 22r210 23r162 24r147 25r140
    modified regnos: 133 134 135 136 137 139 140 142 144 145 146 147 162 170 173 174 189 197 200 204 206 210 211 212 216 217
    border:
    Pressure: GENERAL_REGS=12
    Reg 204 of GENERAL_REGS has 4 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 200 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
      Pushing a24(r147,l0)
      Pushing a23(r162,l0)
      Pushing a22(r210,l0)
      Pushing a21(r146,l0)
      Pushing a20(r206,l0)
      Pushing a18(r170,l0)
      Pushing a13(r174,l0)
      Pushing a12(r189,l0)
      Pushing a11(r216,l0)
      Pushing a10(r173,l0)
      Pushing a9(r212,l0)
      Pushing a7(r197,l0)
      Pushing a19(r211,l0)
      Pushing a17(r135,l0)
      Pushing a8(r217,l0)
      Pushing a6(r133,l0)
      Pushing a25(r140,l0)
      Pushing a14(r139,l0)
      Pushing a16(r136,l0)
      Pushing a5(r134,l0)
      Pushing a1(r137,l0)
      Pushing a15(r144,l0)
      Pushing a0(r204,l0)
      Pushing a4(r142,l0)
      Pushing a3(r200,l0)
      Pushing a2(r145,l0)
      Popping a2(r145,l0)  -- assign reg 4
      Popping a3(r200,l0)  -- assign reg 5
      Popping a4(r142,l0)  -- assign reg 6
      Popping a0(r204,l0)  -- assign reg 12
      Popping a15(r144,l0)  -- assign reg 5
      Popping a1(r137,l0)  -- assign reg 3
      Popping a5(r134,l0)  -- assign reg 2
      Popping a16(r136,l0)  -- assign reg 2
      Popping a14(r139,l0)  -- assign reg 0
      Popping a25(r140,l0)  -- assign reg 0
      Popping a6(r133,l0)  -- assign reg 12
      Popping a8(r217,l0)  -- assign reg 14
      Popping a17(r135,l0)  -- assign reg 12
      Popping a19(r211,l0)  -- assign reg 14
      Popping a7(r197,l0)  -- assign reg 0
      Popping a9(r212,l0)  -- assign reg 1
      Popping a10(r173,l0)  -- assign reg 8
      Popping a11(r216,l0)  -- assign reg 5
      Popping a12(r189,l0)  -- assign reg 1
      Popping a13(r174,l0)  -- assign reg 10
      Popping a18(r170,l0)  -- assign reg 0
      Popping a20(r206,l0)  -- assign reg 1
      Popping a21(r146,l0)  -- assign reg 8
      Popping a22(r210,l0)  -- assign reg 7
      Popping a23(r162,l0)  -- assign reg 1
      Popping a24(r147,l0)  -- assign reg 10
Disposition:
    6:r133 l0    12    5:r134 l0     2   17:r135 l0    12   16:r136 l0     2
    1:r137 l0     3   14:r139 l0     0   25:r140 l0     0    4:r142 l0     6
   15:r144 l0     5    2:r145 l0     4   21:r146 l0     8   24:r147 l0    10
   23:r162 l0     1   18:r170 l0     0   10:r173 l0     8   13:r174 l0    10
   12:r189 l0     1    7:r197 l0     0    3:r200 l0     5    0:r204 l0    12
   20:r206 l0     1   22:r210 l0     7   19:r211 l0    14    9:r212 l0     1
   11:r216 l0     5    8:r217 l0    14
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 142
insn=9, live_throughout: 2, 3, 13, 142, dead_or_set: 0, 1
insn=4, live_throughout: 0, 3, 13, 142, dead_or_set: 2, 144
insn=5, live_throughout: 0, 13, 142, 144, dead_or_set: 3, 145
insn=10, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 1, 14
insn=11, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 1, 140
insn=21, live_throughout: 13, 140, 142, 144, 145, dead_or_set: 135
insn=26, live_throughout: 13, 135, 140, 142, 144, 145, dead_or_set: 210
insn=24, live_throughout: 13, 135, 140, 142, 144, 145, 210, dead_or_set: 211
insn=25, live_throughout: 13, 135, 140, 142, 144, 145, 210, dead_or_set: 211
insn=155, live_throughout: 13, 135, 140, 142, 144, 145, 210, 211, dead_or_set: 136
insn=164, live_throughout: 13, 135, 140, 142, 144, 145, 210, 211, dead_or_set: 147
insn=13, live_throughout: 13, 135, 142, 144, 145, 210, 211, dead_or_set: 140, 146, 147
insn=163, live_throughout: 13, 135, 142, 144, 145, 146, 210, 211, dead_or_set: 162
insn=45, live_throughout: 13, 135, 142, 144, 145, 146, 210, 211, dead_or_set: 162
insn=28, live_throughout: 13, 24, 135, 142, 144, 145, 146, 211, dead_or_set: 136, 210
insn=29, live_throughout: 13, 24, 135, 142, 144, 145, 146, 211, dead_or_set: 136
insn=14, live_throughout: 13, 24, 135, 136, 142, 144, 145, 211, dead_or_set: 146, 206
insn=16, live_throughout: 13, 24, 135, 136, 142, 144, 145, 211, dead_or_set: 206
insn=30, live_throughout: 13, 24, 135, 136, 142, 144, 145, dead_or_set: 136, 211
insn=22, live_throughout: 13, 24, 135, 136, 142, 144, 145, dead_or_set: 
insn=46, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 
insn=48, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 170
insn=49, live_throughout: 13, 135, 142, 144, 145, dead_or_set: 136, 170
insn=50, live_throughout: 13, 135, 136, 142, 144, 145, dead_or_set: 
insn=53, live_throughout: 13, 136, 142, 144, 145, dead_or_set: 135
insn=52, live_throughout: 13, 24, 136, 142, 144, 145, dead_or_set: 
insn=54, live_throughout: 13, 136, 142, 144, 145, dead_or_set: 
insn=58, live_throughout: 13, 142, 144, 145, dead_or_set: 136
insn=59, live_throughout: 13, 142, 144, 145, dead_or_set: 
insn=62, live_throughout: 13, 142, 144, 145, dead_or_set: 0
insn=63, live_throughout: 13, 142, 144, 145, dead_or_set: 0, 14
insn=64, live_throughout: 13, 142, 144, 145, dead_or_set: 
insn=66, live_throughout: 13, 142, 145, dead_or_set: 0, 144
insn=67, live_throughout: 13, 142, 145, dead_or_set: 0, 1, 14
insn=68, live_throughout: 13, 142, 145, dead_or_set: 0, 1, 139
insn=78, live_throughout: 13, 139, 142, 145, dead_or_set: 133
insn=83, live_throughout: 13, 133, 139, 142, 145, dead_or_set: 216
insn=81, live_throughout: 13, 133, 139, 142, 145, 216, dead_or_set: 217
insn=82, live_throughout: 13, 133, 139, 142, 145, 216, dead_or_set: 217
insn=156, live_throughout: 13, 133, 139, 142, 145, 216, 217, dead_or_set: 134
insn=162, live_throughout: 13, 133, 139, 142, 145, 216, 217, dead_or_set: 174
insn=70, live_throughout: 13, 133, 142, 145, 216, 217, dead_or_set: 139, 173, 174
insn=161, live_throughout: 13, 133, 142, 145, 173, 216, 217, dead_or_set: 189
insn=102, live_throughout: 13, 133, 142, 145, 173, 216, 217, dead_or_set: 189
insn=85, live_throughout: 13, 24, 133, 142, 145, 173, 217, dead_or_set: 134, 216
insn=86, live_throughout: 13, 24, 133, 142, 145, 173, 217, dead_or_set: 134
insn=71, live_throughout: 13, 24, 133, 134, 142, 145, 217, dead_or_set: 173, 212
insn=73, live_throughout: 13, 24, 133, 134, 142, 145, 217, dead_or_set: 212
insn=87, live_throughout: 13, 24, 133, 134, 142, 145, dead_or_set: 134, 217
insn=79, live_throughout: 13, 24, 133, 134, 142, 145, dead_or_set: 
insn=103, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 
insn=105, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 197
insn=106, live_throughout: 13, 133, 142, 145, dead_or_set: 134, 197
insn=107, live_throughout: 13, 133, 134, 142, 145, dead_or_set: 
insn=110, live_throughout: 13, 134, 142, 145, dead_or_set: 133
insn=109, live_throughout: 13, 24, 134, 142, 145, dead_or_set: 
insn=111, live_throughout: 13, 134, 142, 145, dead_or_set: 
insn=115, live_throughout: 13, 142, 145, dead_or_set: 134
insn=116, live_throughout: 13, 142, 145, dead_or_set: 
insn=119, live_throughout: 13, 142, 145, dead_or_set: 0
insn=120, live_throughout: 13, 142, 145, dead_or_set: 0, 14
insn=121, live_throughout: 13, 142, 145, dead_or_set: 
insn=123, live_throughout: 13, 142, 145, dead_or_set: 200
insn=127, live_throughout: 13, 142, 145, 200, dead_or_set: 1
insn=128, live_throughout: 1, 13, 142, 145, 200, dead_or_set: 2
insn=129, live_throughout: 1, 2, 13, 142, 145, 200, dead_or_set: 3
insn=126, live_throughout: 1, 2, 3, 13, 142, 145, 200, dead_or_set: 0
insn=130, live_throughout: 13, 142, 145, 200, dead_or_set: 0, 1, 2, 3, 14
insn=131, live_throughout: 13, 142, 145, 200, dead_or_set: 0, 137
insn=135, live_throughout: 13, 137, 145, 200, dead_or_set: 0, 142
insn=136, live_throughout: 0, 13, 137, 145, dead_or_set: 1, 200
insn=137, live_throughout: 0, 1, 13, 137, dead_or_set: 2, 145
insn=138, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 137
insn=160, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 204
insn=134, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 204
insn=139, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=151, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 147: (insn_list:REG_DEP_TRUE 164 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 163 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 48 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 162 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 161 (nil))
init_insns for 197: (insn_list:REG_DEP_TRUE 105 (nil))
init_insns for 200: (insn_list:REG_DEP_TRUE 123 (nil))
init_insns for 204: (insn_list:REG_DEP_TRUE 160 (nil))
changing reg in insn 78
changing reg in insn 102
changing reg in insn 102
changing reg in insn 110
changing reg in insn 156
changing reg in insn 106
changing reg in insn 86
changing reg in insn 109
changing reg in insn 106
changing reg in insn 87
changing reg in insn 85
changing reg in insn 106
changing reg in insn 21
changing reg in insn 45
changing reg in insn 45
changing reg in insn 53
changing reg in insn 155
changing reg in insn 49
changing reg in insn 29
changing reg in insn 52
changing reg in insn 49
changing reg in insn 30
changing reg in insn 28
changing reg in insn 49
changing reg in insn 131
changing reg in insn 138
changing reg in insn 68
changing reg in insn 70
changing reg in insn 70
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 2
changing reg in insn 135
changing reg in insn 4
changing reg in insn 66
changing reg in insn 5
changing reg in insn 137
changing reg in insn 129
changing reg in insn 13
changing reg in insn 164
changing reg in insn 13
changing reg in insn 163
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 70
changing reg in insn 162
changing reg in insn 70
changing reg in insn 161
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 123
changing reg in insn 136
changing reg in insn 126
changing reg in insn 160
changing reg in insn 134
changing reg in insn 14
changing reg in insn 26
changing reg in insn 28
changing reg in insn 25
changing reg in insn 24
changing reg in insn 29
changing reg in insn 25
changing reg in insn 30
changing reg in insn 71
changing reg in insn 83
changing reg in insn 85
changing reg in insn 82
changing reg in insn 81
changing reg in insn 86
changing reg in insn 82
changing reg in insn 87
Spilling for insn 16.
Spilling for insn 22.
Spilling for insn 52.
Spilling for insn 58.
Using reg 1 for reload 0
Spilling for insn 73.
Spilling for insn 79.
Spilling for insn 109.
Spilling for insn 115.
Using reg 1 for reload 0
Spilling for insn 134.

Reloads for insn # 16
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])

Reloads for insn # 22
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])

Reloads for insn # 52
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])

Reloads for insn # 58
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 73
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 79
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 109
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 115
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 134
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
deleting insn with uid = 11.
deleting insn with uid = 68.
deleting insn with uid = 138.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 139.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)


vfp_double_fadd

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,18u,2d} r1={17d,15u,2d} r2={17d,11u,2d} r3={15d,9u,2d} r4={1d,2u} r5={3d,4u} r6={1d,1u} r7={1d,1u} r8={2d} r9={2d,2u} r10={2d,2u} r11={2d,2u} r12={10d,9u} r13={1d,30u,1d} r14={11d,7u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={12d,6u} r25={2d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 902{772d,119u,11e} in 71{65 regular + 6 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 17 2 NOTE_INSN_FUNCTION_BEG)

(note 17 6 19 2 NOTE_INSN_DELETED)

(note 19 17 20 2 NOTE_INSN_DELETED)

(note 20 19 23 2 NOTE_INSN_DELETED)

(note 23 20 27 2 NOTE_INSN_DELETED)

(note 27 23 31 2 NOTE_INSN_DELETED)

(note 31 27 32 2 NOTE_INSN_DELETED)

(note 32 31 33 2 NOTE_INSN_DELETED)

(note 33 32 35 2 NOTE_INSN_DELETED)

(note 35 33 36 2 NOTE_INSN_DELETED)

(note 36 35 39 2 NOTE_INSN_DELETED)

(note 39 36 40 2 NOTE_INSN_DELETED)

(note 40 39 42 2 NOTE_INSN_DELETED)

(note 42 40 43 2 NOTE_INSN_DELETED)

(note 43 42 44 2 NOTE_INSN_DELETED)

(note 44 43 2 2 NOTE_INSN_DELETED)

(insn 2 44 9 2 arch/arm/vfp/vfpdouble.c:959 (set (reg/v:SI 6 r6 [orig:142 dd ] [142])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 4 2 arch/arm/vfp/vfpdouble.c:963 (set (reg:SI 0 r0)
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (nil))

(insn 4 9 5 2 arch/arm/vfp/vfpdouble.c:959 (set (reg/v:SI 5 r5 [orig:144 dm ] [144])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 10 2 arch/arm/vfp/vfpdouble.c:959 (set (reg/v:SI 4 r4 [orig:145 fpscr ] [145])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 21 2 arch/arm/vfp/vfpdouble.c:963 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 21 10 26 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:135 D.6006 ] [135])
        (zero_extract:SI (reg:SI 1 r1 [ D.4964+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 26 21 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 7 r7 [210])
        (ashift:SI (reg:SI 0 r0 [orig:140 D.4964 ] [140])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 24 26 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:211+4 ] [211])
        (ashift:SI (reg:SI 1 r1 [ D.4964+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 155 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:211+4 ] [211])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:140 D.4964 ] [140])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:211+4 ] [211]))) 270 {*arith_shiftsi} (nil))

(insn 155 25 164 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:136 significand ] [136])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 164 155 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [147])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 13 164 163 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [146])
        (and:DI (reg:DI 0 r0 [orig:140 D.4964 ] [140])
            (reg:DI 10 sl [147]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:140 D.4964 ] [140])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 163 13 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [162])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 45 163 28 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:135 D.6006 ] [135])
                    (reg:SI 1 r1 [162]))
                (ne:SI (reg:SI 12 ip [orig:135 D.6006 ] [135])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 28 45 29 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:136 significand ] [136])
        (lshiftrt:SI (reg:SI 7 r7 [210])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 29 28 14 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:136 significand ] [136])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:211+4 ] [211])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:136 significand ] [136]))) 270 {*arith_shiftsi} (nil))

(insn 14 29 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [206])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 16 14 30 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 26 [0x1a])) [0 vdn.sign+0 S2 A16])
        (reg:HI 1 r1 [206])) 176 {*movhi_insn_arch4} (nil))

(insn 30 16 22 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:211+4 ] [211])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 22 30 46 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 vdn.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:135 D.6006 ] [135])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 46 22 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [170])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:136 significand ] [136])
        (ior:DI (reg/v:DI 2 r2 [orig:136 significand ] [136])
            (reg:DI 0 r0 [170]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:136 significand ] [136])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 301 "" [1 uses])

(note 51 50 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 53 51 52 4 arch/arm/vfp/vfpdouble.c:964 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:135 D.6006 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 52 53 54 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:136 significand ] [136])) 163 {*arm_movdi} (nil))

(jump_insn 54 52 55 4 arch/arm/vfp/vfpdouble.c:964 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  4 [50.0%]  (fallthru)
(note 55 54 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 56 55 57 5 NOTE_INSN_DELETED)

(note 57 56 58 5 NOTE_INSN_DELETED)

(insn 58 57 59 5 arch/arm/vfp/vfpdouble.c:964 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:136 significand ] [136])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 59 58 60 5 arch/arm/vfp/vfpdouble.c:964 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 6 NOTE_INSN_DELETED)

(insn 62 61 63 6 arch/arm/vfp/vfpdouble.c:965 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(call_insn 63 62 64 6 arch/arm/vfp/vfpdouble.c:965 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 64 63 65 7 302 "" [2 uses])

(note 65 64 74 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 74 65 76 7 NOTE_INSN_DELETED)

(note 76 74 77 7 NOTE_INSN_DELETED)

(note 77 76 80 7 NOTE_INSN_DELETED)

(note 80 77 84 7 NOTE_INSN_DELETED)

(note 84 80 88 7 NOTE_INSN_DELETED)

(note 88 84 89 7 NOTE_INSN_DELETED)

(note 89 88 90 7 NOTE_INSN_DELETED)

(note 90 89 92 7 NOTE_INSN_DELETED)

(note 92 90 93 7 NOTE_INSN_DELETED)

(note 93 92 96 7 NOTE_INSN_DELETED)

(note 96 93 97 7 NOTE_INSN_DELETED)

(note 97 96 99 7 NOTE_INSN_DELETED)

(note 99 97 100 7 NOTE_INSN_DELETED)

(note 100 99 101 7 NOTE_INSN_DELETED)

(note 101 100 66 7 NOTE_INSN_DELETED)

(insn 66 101 67 7 arch/arm/vfp/vfpdouble.c:967 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:144 dm ] [144])) 167 {*arm_movsi_insn} (nil))

(call_insn 67 66 78 7 arch/arm/vfp/vfpdouble.c:967 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 78 67 83 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 12 ip [orig:133 D.6021 ] [133])
        (zero_extract:SI (reg:SI 1 r1 [ D.4973+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 83 78 81 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 5 r5 [216])
        (ashift:SI (reg:SI 0 r0 [orig:139 D.4973 ] [139])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 81 83 82 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:217+4 ] [217])
        (ashift:SI (reg:SI 1 r1 [ D.4973+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 82 81 156 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [orig:217+4 ] [217])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:139 D.4973 ] [139])
                (const_int 20 [0x14]))
            (reg:SI 14 lr [orig:217+4 ] [217]))) 270 {*arith_shiftsi} (nil))

(insn 156 82 162 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:134 significand ] [134])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 162 156 70 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [174])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 70 162 161 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 8 r8 [173])
        (and:DI (reg:DI 0 r0 [orig:139 D.4973 ] [139])
            (reg:DI 10 sl [174]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:139 D.4973 ] [139])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 161 70 102 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 1 r1 [189])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 102 161 85 7 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 12 ip [orig:133 D.6021 ] [133])
                    (reg:SI 1 r1 [189]))
                (ne:SI (reg:SI 12 ip [orig:133 D.6021 ] [133])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 85 102 86 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:134 significand ] [134])
        (lshiftrt:SI (reg:SI 5 r5 [216])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 86 85 71 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:134 significand ] [134])
        (ior:SI (ashift:SI (reg:SI 14 lr [orig:217+4 ] [217])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:134 significand ] [134]))) 270 {*arith_shiftsi} (nil))

(insn 71 86 73 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 1 r1 [212])
        (lshiftrt:SI (reg:SI 9 r9 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 73 71 87 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
        (reg:HI 1 r1 [212])) 176 {*movhi_insn_arch4} (nil))

(insn 87 73 79 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 14 lr [orig:217+4 ] [217])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 79 87 103 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
        (reg:HI 12 ip [orig:133 D.6021 ] [133])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 103 79 104 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 104 103 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 105 104 106 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 0 r0 [197])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 106 105 107 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:134 significand ] [134])
        (ior:DI (reg/v:DI 2 r2 [orig:134 significand ] [134])
            (reg:DI 0 r0 [197]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:134 significand ] [134])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 107 106 108 9 303 "" [1 uses])

(note 108 107 110 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 110 108 109 9 arch/arm/vfp/vfpdouble.c:968 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:133 D.6021 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 109 110 111 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:134 significand ] [134])) 163 {*arm_movdi} (nil))

(jump_insn 111 109 112 9 arch/arm/vfp/vfpdouble.c:968 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  10 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  9 [61.0%]  (fallthru)
(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 113 112 114 10 NOTE_INSN_DELETED)

(note 114 113 115 10 NOTE_INSN_DELETED)

(insn 115 114 116 10 arch/arm/vfp/vfpdouble.c:968 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:134 significand ] [134])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 116 115 117 10 arch/arm/vfp/vfpdouble.c:968 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  11 [39.0%]  (fallthru)
;; Succ edge  12 [61.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  10 [39.0%]  (fallthru)
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 118 117 119 11 NOTE_INSN_DELETED)

(insn 119 118 120 11 arch/arm/vfp/vfpdouble.c:969 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(call_insn 120 119 121 11 arch/arm/vfp/vfpdouble.c:969 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  9 [39.0%] 
;; Pred edge  10 [61.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 121 120 122 12 304 "" [2 uses])

(note 122 121 124 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 124 122 125 12 NOTE_INSN_DELETED)

(note 125 124 123 12 NOTE_INSN_DELETED)

(insn 123 125 127 12 arch/arm/vfp/vfpdouble.c:971 (set (reg/f:SI 5 r5 [200])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 40 [0x28]))
        (nil)))

(insn 127 123 128 12 arch/arm/vfp/vfpdouble.c:971 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 24 [0x18]))) 4 {*arm_addsi3} (nil))

(insn 128 127 129 12 arch/arm/vfp/vfpdouble.c:971 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 129 128 126 12 arch/arm/vfp/vfpdouble.c:971 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:145 fpscr ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 126 129 130 12 arch/arm/vfp/vfpdouble.c:971 (set (reg:SI 0 r0)
        (reg/f:SI 5 r5 [200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(call_insn 130 126 131 12 arch/arm/vfp/vfpdouble.c:971 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_add") [flags 0x3] <function_decl 0x10b08080 vfp_double_add>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 131 130 135 12 arch/arm/vfp/vfpdouble.c:971 (set (reg/v:SI 3 r3 [orig:137 exceptions ] [137])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 135 131 136 12 arch/arm/vfp/vfpdouble.c:973 (set (reg:SI 0 r0)
        (reg/v:SI 6 r6 [orig:142 dd ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 136 135 137 12 arch/arm/vfp/vfpdouble.c:973 (set (reg:SI 1 r1)
        (reg/f:SI 5 r5 [200])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 137 136 160 12 arch/arm/vfp/vfpdouble.c:973 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:145 fpscr ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 160 137 134 12 arch/arm/vfp/vfpdouble.c:973 (set (reg/f:SI 12 ip [204])
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x10e47b20>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x10e47b20>)
        (nil)))

(insn 134 160 139 12 arch/arm/vfp/vfpdouble.c:973 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [204])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x10e47b20>)
        (nil)))

(call_insn 139 134 151 12 arch/arm/vfp/vfpdouble.c:973 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 151 139 159 12 arch/arm/vfp/vfpdouble.c:974 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 159 151 165 NOTE_INSN_DELETED)

(note 165 159 0 NOTE_INSN_DELETED)


;; Function vfp_double_ftosi (vfp_double_ftosi)[0:169]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 400.
verify found no changes in insn with uid = 400.
deleting insn with uid = 154.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 81 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 88 (    2)

Pass 0 for finding allocno costs

    a8 (r236,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:150000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:164000
  a7(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r236,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a9(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a14(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a25(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a26(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a27(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r176,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a29(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a34(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r236: preferred GENERAL_REGS, alternative NO_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a1(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:150000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:164000
  a7(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r236,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a9(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a14(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r230,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a25(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a26(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a27(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r176,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a29(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a34(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 339(l0): point = 0
   Insn 333(l0): point = 2
   Insn 328(l0): point = 4
   Insn 327(l0): point = 6
   Insn 326(l0): point = 8
   Insn 323(l0): point = 11
   Insn 394(l0): point = 14
   Insn 318(l0): point = 16
   Insn 316(l0): point = 19
   Insn 315(l0): point = 21
   Insn 313(l0): point = 24
   Insn 312(l0): point = 26
   Insn 392(l0): point = 29
   Insn 307(l0): point = 31
   Insn 305(l0): point = 34
   Insn 304(l0): point = 36
   Insn 302(l0): point = 39
   Insn 300(l0): point = 41
   Insn 301(l0): point = 43
   Insn 298(l0): point = 46
   Insn 297(l0): point = 48
   Insn 294(l0): point = 50
   Insn 390(l0): point = 56
   Insn 286(l0): point = 58
   Insn 284(l0): point = 61
   Insn 283(l0): point = 63
   Insn 280(l0): point = 66
   Insn 278(l0): point = 69
   Insn 277(l0): point = 71
   Insn 388(l0): point = 74
   Insn 368(l0): point = 76
   Insn 270(l0): point = 78
   Insn 259(l0): point = 80
   Insn 257(l0): point = 83
   Insn 256(l0): point = 85
   Insn 366(l0): point = 87
   Insn 245(l0): point = 89
   Insn 242(l0): point = 92
   Insn 240(l0): point = 95
   Insn 239(l0): point = 97
   Insn 234(l0): point = 99
   Insn 231(l0): point = 102
   Insn 224(l0): point = 105
   Insn 223(l0): point = 107
   Insn 222(l0): point = 110
   Insn 220(l0): point = 113
   Insn 219(l0): point = 115
   Insn 217(l0): point = 117
   Insn 218(l0): point = 119
   Insn 213(l0): point = 126
   Insn 386(l0): point = 129
   Insn 208(l0): point = 131
   Insn 206(l0): point = 134
   Insn 205(l0): point = 136
   Insn 204(l0): point = 138
   Insn 200(l0): point = 140
   Insn 194(l0): point = 143
   Insn 193(l0): point = 145
   Insn 384(l0): point = 148
   Insn 188(l0): point = 150
   Insn 382(l0): point = 153
   Insn 183(l0): point = 155
   Insn 181(l0): point = 158
   Insn 180(l0): point = 160
   Insn 177(l0): point = 163
   Insn 355(l0): point = 165
   Insn 354(l0): point = 167
   Insn 353(l0): point = 169
   Insn 176(l0): point = 171
   Insn 173(l0): point = 173
   Insn 172(l0): point = 175
   Insn 171(l0): point = 177
   Insn 349(l0): point = 179
   Insn 167(l0): point = 181
   Insn 166(l0): point = 183
   Insn 163(l0): point = 185
   Insn 165(l0): point = 187
   Insn 162(l0): point = 192
   Insn 159(l0): point = 195
   Insn 158(l0): point = 197
   Insn 400(l0): point = 199
   Insn 153(l0): point = 201
   Insn 380(l0): point = 204
   Insn 364(l0): point = 206
   Insn 148(l0): point = 208
   Insn 137(l0): point = 210
   Insn 135(l0): point = 213
   Insn 129(l0): point = 215
   Insn 127(l0): point = 217
   Insn 134(l0): point = 219
   Insn 130(l0): point = 221
   Insn 126(l0): point = 223
   Insn 132(l0): point = 228
   Insn 125(l0): point = 230
   Insn 378(l0): point = 233
   Insn 120(l0): point = 235
   Insn 119(l0): point = 237
   Insn 117(l0): point = 240
   Insn 116(l0): point = 242
   Insn 362(l0): point = 244
   Insn 104(l0): point = 246
   Insn 360(l0): point = 249
   Insn 92(l0): point = 251
   Insn 376(l0): point = 254
   Insn 85(l0): point = 256
   Insn 83(l0): point = 259
   Insn 82(l0): point = 261
   Insn 374(l0): point = 264
   Insn 358(l0): point = 266
   Insn 66(l0): point = 268
   Insn 65(l0): point = 273
   Insn 372(l0): point = 276
   Insn 60(l0): point = 278
   Insn 58(l0): point = 281
   Insn 57(l0): point = 283
   Insn 53(l0): point = 286
   Insn 52(l0): point = 288
   Insn 370(l0): point = 291
   Insn 43(l0): point = 293
   Insn 42(l0): point = 298
   Insn 40(l0): point = 301
   Insn 24(l0): point = 303
   Insn 23(l0): point = 305
   Insn 39(l0): point = 307
   Insn 22(l0): point = 309
   Insn 27(l0): point = 311
   Insn 19(l0): point = 313
   Insn 20(l0): point = 315
   Insn 18(l0): point = 317
   Insn 28(l0): point = 319
   Insn 16(l0): point = 321
   Insn 369(l0): point = 323
   Insn 11(l0): point = 325
   Insn 10(l0): point = 327
   Insn 5(l0): point = 329
   Insn 9(l0): point = 331
   Insn 2(l0): point = 333
 a0(r141): [3..244]
 a1(r146): [7..333]
 a2(r142): [233..235] [204..206] [83..179] [56..76] [29..31] [14..16] [9..11]
 a3(r133): [211..215] [64..203] [37..55] [22..28]
 a4(r140): [163..201] [141..147] [39..55] [27..28]
 a5(r223): [49..52]
 a6(r135): [240..323] [213..232] [178..203] [53..55] [51..51]
 a7(r188): [213..228] [193..203] [51..55]
 a8(r236): [83..169] [72..73]
 a9(r143): [86..87]
 a10(r211): [105..117] [98..102]
 a11(r216): [98..99]
 a12(r213): [108..120]
 a13(r136): [153..155] [148..150] [129..131] [120..126]
 a14(r210): [137..138]
 a15(r207): [139..140]
 a16(r183): [213..230] [158..203] [151..152]
 a17(r138): [176..185]
 a18(r195): [186..192]
 a19(r191): [198..199]
 a20(r149): [240..329] [213..232] [202..203]
 a21(r230): [216..217]
 a22(r182): [226..226] [218..224]
 a23(r187): [220..221]
 a24(r144): [240..325] [224..232]
 a25(r134): [240..321] [229..232]
 a26(r139): [276..278] [264..266] [254..256] [243..249]
 a27(r180): [245..246]
 a28(r176): [271..271] [267..269]
 a29(r177): [269..273]
 a30(r162): [301..319] [289..290]
 a31(r161): [301..311] [289..290]
 a32(r170): [294..298]
 a33(r229): [304..317]
 a34(r228): [310..315]
Compressing live ranges: from 336 to 113 - 33%
Ranges after the compression:
 a0(r141): [0..83]
 a1(r146): [1..112]
 a2(r142): [79..80] [63..64] [23..53] [18..22] [9..10] [4..5] [2..3]
 a3(r133): [65..67] [19..62] [11..17] [6..8]
 a4(r140): [49..60] [40..41] [12..17] [7..8]
 a5(r223): [13..15]
 a6(r135): [81..109] [66..78] [52..62] [16..17] [14..14]
 a7(r188): [66..75] [57..62] [14..17]
 a8(r236): [23..50] [20..21]
 a9(r143): [24..25]
 a10(r211): [29..31] [26..28]
 a11(r216): [26..27]
 a12(r213): [30..32]
 a13(r136): [46..47] [42..43] [34..35] [32..33]
 a14(r210): [36..37]
 a15(r207): [38..39]
 a16(r183): [66..77] [48..62] [44..45]
 a17(r138): [51..54]
 a18(r195): [55..56]
 a19(r191): [58..59]
 a20(r149): [81..111] [66..78] [61..62]
 a21(r230): [68..69]
 a22(r182): [74..74] [70..73]
 a23(r187): [71..72]
 a24(r144): [81..110] [73..78]
 a25(r134): [81..108] [76..78]
 a26(r139): [95..96] [89..90] [87..88] [82..86]
 a27(r180): [84..85]
 a28(r176): [93..93] [91..92]
 a29(r177): [92..94]
 a30(r162): [101..107] [97..98]
 a31(r161): [101..104] [97..98]
 a32(r170): [99..100]
 a33(r229): [102..106]
 a34(r228): [103..105]
+++Allocating 280 bytes for conflict table (uncompressed size 280)
;; a0(r141,l0) conflicts: a1(r146,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a5(r223,l0) a7(r188,l0) a6(r135,l0) a8(r236,l0) a9(r143,l0) a11(r216,l0) a10(r211,l0) a12(r213,l0) a13(r136,l0) a14(r210,l0) a15(r207,l0) a16(r183,l0) a17(r138,l0) a18(r195,l0) a19(r191,l0) a20(r149,l0) a21(r230,l0) a22(r182,l0) a23(r187,l0) a24(r144,l0) a25(r134,l0) a26(r139,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r146,l0) conflicts: a0(r141,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a5(r223,l0) a7(r188,l0) a6(r135,l0) a8(r236,l0) a9(r143,l0) a11(r216,l0) a10(r211,l0) a12(r213,l0) a13(r136,l0) a14(r210,l0) a15(r207,l0) a16(r183,l0) a17(r138,l0) a18(r195,l0) a19(r191,l0) a20(r149,l0) a21(r230,l0) a22(r182,l0) a23(r187,l0) a24(r144,l0) a25(r134,l0) a26(r139,l0) a27(r180,l0) a28(r176,l0) a29(r177,l0) a31(r161,l0) a30(r162,l0) a32(r170,l0) a33(r229,l0) a34(r228,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r142,l0) conflicts: a0(r141,l0) a1(r146,l0) a3(r133,l0) a4(r140,l0) a6(r135,l0) a8(r236,l0) a9(r143,l0) a11(r216,l0) a10(r211,l0) a12(r213,l0) a13(r136,l0) a14(r210,l0) a15(r207,l0) a16(r183,l0) a17(r138,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r133,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a4(r140,l0) a5(r223,l0) a7(r188,l0) a6(r135,l0) a8(r236,l0) a9(r143,l0) a11(r216,l0) a10(r211,l0) a12(r213,l0) a13(r136,l0) a14(r210,l0) a15(r207,l0) a16(r183,l0) a17(r138,l0) a18(r195,l0) a19(r191,l0) a20(r149,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r140,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a5(r223,l0) a7(r188,l0) a6(r135,l0) a8(r236,l0) a16(r183,l0) a17(r138,l0) a18(r195,l0) a19(r191,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r223,l0) conflicts: a0(r141,l0) a1(r146,l0) a3(r133,l0) a4(r140,l0) a7(r188,l0) a6(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r135,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a5(r223,l0) a7(r188,l0) a16(r183,l0) a17(r138,l0) a18(r195,l0) a19(r191,l0) a20(r149,l0) a21(r230,l0) a22(r182,l0) a23(r187,l0) a24(r144,l0) a25(r134,l0) a26(r139,l0) a27(r180,l0) a28(r176,l0) a29(r177,l0) a31(r161,l0) a30(r162,l0) a32(r170,l0) a33(r229,l0) a34(r228,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a7(r188,l0) conflicts: a0(r141,l0) a1(r146,l0) a3(r133,l0) a4(r140,l0) a5(r223,l0) a6(r135,l0) a16(r183,l0) a19(r191,l0) a20(r149,l0) a21(r230,l0) a22(r182,l0) a23(r187,l0) a24(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r236,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a9(r143,l0) a11(r216,l0) a10(r211,l0) a12(r213,l0) a13(r136,l0) a14(r210,l0) a15(r207,l0) a16(r183,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a9(r143,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a8(r236,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r211,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a8(r236,l0) a11(r216,l0) a12(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r216,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a8(r236,l0) a10(r211,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r213,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a8(r236,l0) a10(r211,l0) a13(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r136,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a8(r236,l0) a12(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r210,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a8(r236,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r207,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a8(r236,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r183,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a7(r188,l0) a6(r135,l0) a8(r236,l0) a17(r138,l0) a18(r195,l0) a19(r191,l0) a20(r149,l0) a21(r230,l0) a22(r182,l0) a23(r187,l0) a24(r144,l0) a25(r134,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a17(r138,l0) conflicts: a0(r141,l0) a1(r146,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a6(r135,l0) a16(r183,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a18(r195,l0) conflicts: a0(r141,l0) a1(r146,l0) a3(r133,l0) a4(r140,l0) a6(r135,l0) a16(r183,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a19(r191,l0) conflicts: a0(r141,l0) a1(r146,l0) a3(r133,l0) a4(r140,l0) a7(r188,l0) a6(r135,l0) a16(r183,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r149,l0) conflicts: a0(r141,l0) a1(r146,l0) a3(r133,l0) a7(r188,l0) a6(r135,l0) a16(r183,l0) a21(r230,l0) a22(r182,l0) a23(r187,l0) a24(r144,l0) a25(r134,l0) a26(r139,l0) a27(r180,l0) a28(r176,l0) a29(r177,l0) a31(r161,l0) a30(r162,l0) a32(r170,l0) a33(r229,l0) a34(r228,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a21(r230,l0) conflicts: a0(r141,l0) a1(r146,l0) a7(r188,l0) a6(r135,l0) a16(r183,l0) a20(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r182,l0) conflicts: a0(r141,l0) a1(r146,l0) a7(r188,l0) a6(r135,l0) a16(r183,l0) a20(r149,l0) a23(r187,l0) a24(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r187,l0) conflicts: a0(r141,l0) a1(r146,l0) a7(r188,l0) a6(r135,l0) a16(r183,l0) a20(r149,l0) a22(r182,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r144,l0) conflicts: a0(r141,l0) a1(r146,l0) a7(r188,l0) a6(r135,l0) a16(r183,l0) a20(r149,l0) a22(r182,l0) a25(r134,l0) a26(r139,l0) a27(r180,l0) a28(r176,l0) a29(r177,l0) a31(r161,l0) a30(r162,l0) a32(r170,l0) a33(r229,l0) a34(r228,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r134,l0) conflicts: a0(r141,l0) a1(r146,l0) a6(r135,l0) a16(r183,l0) a20(r149,l0) a24(r144,l0) a26(r139,l0) a27(r180,l0) a28(r176,l0) a29(r177,l0) a31(r161,l0) a30(r162,l0) a32(r170,l0) a33(r229,l0) a34(r228,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r139,l0) conflicts: a0(r141,l0) a1(r146,l0) a6(r135,l0) a20(r149,l0) a24(r144,l0) a25(r134,l0) a27(r180,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r180,l0) conflicts: a1(r146,l0) a6(r135,l0) a20(r149,l0) a24(r144,l0) a25(r134,l0) a26(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r176,l0) conflicts: a1(r146,l0) a6(r135,l0) a20(r149,l0) a24(r144,l0) a25(r134,l0) a29(r177,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r177,l0) conflicts: a1(r146,l0) a6(r135,l0) a20(r149,l0) a24(r144,l0) a25(r134,l0) a28(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r162,l0) conflicts: a1(r146,l0) a6(r135,l0) a20(r149,l0) a24(r144,l0) a25(r134,l0) a31(r161,l0) a33(r229,l0) a34(r228,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r161,l0) conflicts: a1(r146,l0) a6(r135,l0) a20(r149,l0) a24(r144,l0) a25(r134,l0) a30(r162,l0) a33(r229,l0) a34(r228,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r170,l0) conflicts: a1(r146,l0) a6(r135,l0) a20(r149,l0) a24(r144,l0) a25(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r229,l0) conflicts: a1(r146,l0) a6(r135,l0) a20(r149,l0) a24(r144,l0) a25(r134,l0) a31(r161,l0) a30(r162,l0) a34(r228,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r228,l0) conflicts: a1(r146,l0) a6(r135,l0) a20(r149,l0) a24(r144,l0) a25(r134,l0) a31(r161,l0) a30(r162,l0) a33(r229,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a4(r140)<->a15(r207)@125:shuffle
  cp1:a14(r210)<->a15(r207)@125:shuffle
  cp2:a13(r136)<->a16(r183)@1000:move
  cp3:a7(r188)<->a18(r195)@125:shuffle
  cp4:a17(r138)<->a18(r195)@125:shuffle
  cp5:a4(r140)<->a20(r149)@125:shuffle
  cp6:a7(r188)<->a25(r134)@125:shuffle
  cp7:a3(r133)<->a21(r230)@125:shuffle
  cp8:a0(r141)<->a27(r180)@125:shuffle
  regions=1, blocks=45, points=113
    allocnos=35, copies=9, conflicts=0, ranges=71

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r141 1r146 2r142 3r133 4r140 5r223 6r135 7r188 8r236 9r143 10r211 11r216 12r213 13r136 14r210 15r207 16r183 17r138 18r195 19r191 20r149 21r230 22r182 23r187 24r144 25r134 26r139 27r180 28r176 29r177 30r162 31r161 32r170 33r229 34r228
    modified regnos: 133 134 135 136 138 139 140 141 142 143 144 146 149 161 162 170 176 177 180 182 183 187 188 191 195 207 210 211 213 216 223 228 229 230 236
    border:
    Pressure: GENERAL_REGS=13
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 4 regs less
    Reg 236 of GENERAL_REGS has 2 regs less
    Reg 183 of GENERAL_REGS has 4 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 195 of GENERAL_REGS has 2 regs less
    Reg 149 of GENERAL_REGS has 3 regs less
      Pushing a34(r228,l0)
      Pushing a32(r170,l0)
      Pushing a29(r177,l0)
      Pushing a28(r176,l0)
      Pushing a27(r180,l0)
      Pushing a23(r187,l0)
      Pushing a22(r182,l0)
      Pushing a21(r230,l0)
      Pushing a19(r191,l0)
      Pushing a15(r207,l0)
      Pushing a14(r210,l0)
      Pushing a11(r216,l0)
      Pushing a9(r143,l0)
      Pushing a30(r162,l0)
      Pushing a12(r213,l0)
      Pushing a10(r211,l0)
      Pushing a5(r223,l0)
      Pushing a31(r161,l0)
      Pushing a25(r134,l0)
      Pushing a33(r229,l0)
      Pushing a13(r136,l0)
      Pushing a7(r188,l0)
      Pushing a24(r144,l0)
      Pushing a26(r139,l0)
      Pushing a18(r195,l0)
      Pushing a8(r236,l0)
      Pushing a20(r149,l0)
      Pushing a16(r183,l0)(potential spill: pri=1200, cost=30000)
      Pushing a1(r146,l0)(potential spill: pri=1538, cost=20000)
      Pushing a17(r138,l0)(potential spill: pri=2727, cost=30000)
      Pushing a4(r140,l0)
      Pushing a3(r133,l0)
      Pushing a0(r141,l0)
      Pushing a2(r142,l0)
      Pushing a6(r135,l0)
      Popping a6(r135,l0)  -- assign reg 4
      Popping a2(r142,l0)  -- assign reg 6
      Popping a0(r141,l0)  -- assign reg 7
      Popping a3(r133,l0)  -- assign reg 8
      Popping a4(r140,l0)  -- assign reg 10
      Popping a17(r138,l0)  -- assign reg 9
      Popping a1(r146,l0)  -- assign reg 11
      Popping a16(r183,l0)  -- (memory is more profitable 30000 vs 2147483647) spill
      Popping a20(r149,l0)  -- assign reg 10
      Popping a8(r236,l0)  -- assign reg 2
      Popping a18(r195,l0)  -- assign reg 9
      Popping a26(r139,l0)  -- assign reg 3
      Popping a24(r144,l0)  -- assign reg 0
      Popping a7(r188,l0)  -- assign reg 9
      Popping a13(r136,l0)  -- assign reg 0
      Popping a33(r229,l0)  -- assign reg 3
      Popping a25(r134,l0)  -- assign reg 9
      Popping a31(r161,l0)  -- assign reg 2
      Popping a5(r223,l0)  -- assign reg 2
      Popping a10(r211,l0)  -- assign reg 1
      Popping a12(r213,l0)  -- assign reg 4
      Popping a30(r162,l0)  -- assign reg 12
      Popping a9(r143,l0)  -- assign reg 1
      Popping a11(r216,l0)  -- assign reg 0
      Popping a14(r210,l0)  -- assign reg 10
      Popping a15(r207,l0)  -- assign reg 10
      Popping a19(r191,l0)  -- assign reg 3
      Popping a21(r230,l0)  -- assign reg 8
      Popping a22(r182,l0)  -- assign reg 2
      Popping a23(r187,l0)  -- assign reg 1
      Popping a27(r180,l0)  -- assign reg 7
      Popping a28(r176,l0)  -- assign reg 2
      Popping a29(r177,l0)  -- assign reg 6
      Popping a32(r170,l0)  -- assign reg 2
      Popping a34(r228,l0)  -- assign reg 14
Disposition:
    3:r133 l0     8   25:r134 l0     9    6:r135 l0     4   13:r136 l0     0
   17:r138 l0     9   26:r139 l0     3    4:r140 l0    10    0:r141 l0     7
    2:r142 l0     6    9:r143 l0     1   24:r144 l0     0    1:r146 l0    11
   20:r149 l0    10   31:r161 l0     2   30:r162 l0    12   32:r170 l0     2
   28:r176 l0     2   29:r177 l0     6   27:r180 l0     7   22:r182 l0     2
   16:r183 l0   mem   23:r187 l0     1    7:r188 l0     9   19:r191 l0     3
   18:r195 l0     9   15:r207 l0    10   14:r210 l0    10   10:r211 l0     1
   12:r213 l0     4   11:r216 l0     0    5:r223 l0     2   34:r228 l0    14
   33:r229 l0     3   21:r230 l0     8    8:r236 l0     2
New iteration of spill/restore move
+++Costs: overall 36000, reg 6000, mem 30000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 2, 3, 13, dead_or_set: 0, 146
insn=9, live_throughout: 3, 13, 146, dead_or_set: 0, 2
insn=5, live_throughout: 0, 13, 146, dead_or_set: 3, 149
insn=10, live_throughout: 13, 146, 149, dead_or_set: 0, 1, 14
insn=11, live_throughout: 13, 146, 149, dead_or_set: 0, 1, 144
insn=369, live_throughout: 13, 144, 146, 149, dead_or_set: 135
insn=16, live_throughout: 13, 144, 146, 149, dead_or_set: 134
insn=28, live_throughout: 13, 134, 144, 146, 149, dead_or_set: 162
insn=18, live_throughout: 13, 134, 144, 146, 149, 162, dead_or_set: 229
insn=20, live_throughout: 13, 134, 144, 146, 149, 162, 229, dead_or_set: 228
insn=19, live_throughout: 13, 134, 144, 146, 149, 162, 228, dead_or_set: 229
insn=27, live_throughout: 13, 134, 144, 146, 149, 162, 228, 229, dead_or_set: 161
insn=22, live_throughout: 13, 134, 144, 146, 149, 161, 162, 229, dead_or_set: 135, 228
insn=39, live_throughout: 13, 134, 135, 144, 146, 149, 161, 162, 229, dead_or_set: 
insn=23, live_throughout: 13, 24, 134, 144, 146, 149, 161, 162, 229, dead_or_set: 135
insn=24, live_throughout: 13, 24, 134, 135, 144, 146, 149, 161, 162, dead_or_set: 135, 229
insn=40, live_throughout: 13, 134, 135, 144, 146, 149, 161, 162, dead_or_set: 
insn=42, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 170
insn=43, live_throughout: 13, 134, 144, 146, 149, dead_or_set: 135, 170
insn=370, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=46, live_throughout: 13, 134, 135, 144, 146, 149, 161, 162, dead_or_set: 
insn=52, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 161, 162
insn=53, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=57, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=58, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=60, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 139
insn=372, live_throughout: 13, 134, 135, 139, 144, 146, 149, dead_or_set: 
insn=63, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=65, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 177
insn=66, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 176, 177
insn=358, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 139, 176
insn=374, live_throughout: 13, 134, 135, 139, 144, 146, 149, dead_or_set: 
insn=80, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=82, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=83, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=85, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 139
insn=376, live_throughout: 13, 134, 135, 139, 144, 146, 149, dead_or_set: 
insn=88, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=92, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 
insn=360, live_throughout: 13, 134, 135, 144, 146, 149, dead_or_set: 139
insn=101, live_throughout: 13, 134, 135, 139, 144, 146, 149, dead_or_set: 
insn=104, live_throughout: 13, 134, 135, 139, 144, 146, 149, dead_or_set: 180
insn=362, live_throughout: 13, 134, 135, 139, 144, 146, 149, dead_or_set: 141, 180
insn=116, live_throughout: 13, 134, 135, 141, 144, 146, 149, dead_or_set: 139
insn=117, live_throughout: 13, 134, 135, 141, 144, 146, 149, dead_or_set: 
insn=119, live_throughout: 13, 146, dead_or_set: 141
insn=120, live_throughout: 13, 141, 146, dead_or_set: 142
insn=378, live_throughout: 13, 141, 142, 146, dead_or_set: 
insn=123, live_throughout: 13, 134, 135, 141, 144, 146, 149, dead_or_set: 
insn=125, live_throughout: 13, 134, 135, 141, 144, 146, 149, dead_or_set: 183
insn=132, live_throughout: 13, 135, 141, 144, 146, 149, 183, dead_or_set: 134, 188
insn=126, live_throughout: 13, 135, 141, 146, 149, 183, 188, dead_or_set: 144, 182
insn=130, live_throughout: 13, 135, 141, 146, 149, 182, 183, 188, dead_or_set: 187
insn=134, live_throughout: 13, 135, 141, 146, 149, 182, 183, 188, dead_or_set: 187
insn=127, live_throughout: 13, 24, 135, 141, 146, 149, 183, 188, dead_or_set: 182, 230
insn=129, live_throughout: 13, 24, 135, 141, 146, 149, 183, 188, dead_or_set: 133, 230
insn=135, live_throughout: 13, 133, 135, 141, 146, 149, 183, 188, dead_or_set: 
insn=137, live_throughout: 13, 141, 146, dead_or_set: 133
insn=148, live_throughout: 13, 24, 146, dead_or_set: 141
insn=364, live_throughout: 13, 141, 146, dead_or_set: 142
insn=380, live_throughout: 13, 141, 142, 146, dead_or_set: 
insn=151, live_throughout: 13, 133, 135, 141, 146, 149, 183, 188, dead_or_set: 
insn=153, live_throughout: 13, 133, 135, 141, 146, 183, 188, dead_or_set: 140, 149
insn=400, live_throughout: 13, 133, 135, 140, 141, 146, 183, 188, dead_or_set: 191
insn=158, live_throughout: 13, 133, 135, 140, 141, 146, 183, 188, dead_or_set: 191
insn=159, live_throughout: 13, 133, 135, 140, 141, 146, 183, 188, dead_or_set: 
insn=162, live_throughout: 13, 133, 135, 140, 141, 146, 183, dead_or_set: 188, 195
insn=165, live_throughout: 13, 133, 135, 140, 141, 146, 183, 195, dead_or_set: 0, 1
insn=163, live_throughout: 0, 1, 13, 133, 135, 140, 141, 146, 183, dead_or_set: 138, 195
insn=166, live_throughout: 0, 1, 13, 133, 135, 138, 140, 141, 146, 183, dead_or_set: 2
insn=167, live_throughout: 13, 133, 135, 138, 140, 141, 146, 183, dead_or_set: 0, 1, 2, 14
insn=349, live_throughout: 13, 133, 135, 138, 140, 141, 146, 183, dead_or_set: 0, 142
insn=171, live_throughout: 13, 133, 138, 140, 141, 142, 146, 183, dead_or_set: 0, 1, 135
insn=172, live_throughout: 0, 1, 13, 133, 140, 141, 142, 146, 183, dead_or_set: 2, 138
insn=173, live_throughout: 13, 133, 140, 141, 142, 146, 183, dead_or_set: 0, 1, 2, 14
insn=176, live_throughout: 0, 1, 13, 133, 140, 141, 142, 146, 183, dead_or_set: 
insn=353, live_throughout: 0, 1, 13, 24, 133, 140, 141, 142, 146, 183, dead_or_set: 236
insn=354, live_throughout: 1, 13, 24, 133, 140, 141, 142, 146, 183, dead_or_set: 0, 236
insn=355, live_throughout: 13, 24, 133, 140, 141, 142, 146, 183, 236, dead_or_set: 1, 236
insn=177, live_throughout: 13, 133, 140, 141, 142, 146, 183, 236, dead_or_set: 
insn=180, live_throughout: 13, 133, 141, 142, 146, 183, 236, dead_or_set: 
insn=181, live_throughout: 13, 133, 141, 142, 146, 183, 236, dead_or_set: 
insn=183, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 136
insn=382, live_throughout: 13, 133, 136, 141, 142, 146, 236, dead_or_set: 
insn=186, live_throughout: 13, 133, 141, 142, 146, 183, 236, dead_or_set: 
insn=188, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 136, 183
insn=384, live_throughout: 13, 133, 136, 141, 142, 146, 236, dead_or_set: 
insn=191, live_throughout: 13, 133, 140, 141, 142, 146, 236, dead_or_set: 
insn=193, live_throughout: 13, 133, 140, 141, 142, 146, 236, dead_or_set: 
insn=194, live_throughout: 13, 133, 140, 141, 142, 146, 236, dead_or_set: 
insn=200, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 140, 207
insn=204, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 207, 210
insn=205, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 210
insn=206, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 
insn=208, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 136
insn=386, live_throughout: 13, 133, 136, 141, 142, 146, 236, dead_or_set: 
insn=211, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 
insn=213, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 136
insn=214, live_throughout: 13, 133, 136, 141, 142, 146, 236, dead_or_set: 
insn=218, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 136, 213
insn=217, live_throughout: 13, 133, 141, 142, 146, 213, 236, dead_or_set: 211
insn=219, live_throughout: 13, 133, 141, 142, 146, 211, 213, 236, dead_or_set: 
insn=220, live_throughout: 13, 24, 133, 141, 142, 146, 211, 213, 236, dead_or_set: 
insn=222, live_throughout: 13, 133, 141, 142, 146, 211, 213, 236, dead_or_set: 
insn=223, live_throughout: 13, 133, 141, 142, 146, 211, 236, dead_or_set: 213
insn=224, live_throughout: 13, 133, 141, 142, 146, 211, 236, dead_or_set: 
insn=229, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 
insn=231, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 211
insn=232, live_throughout: 13, 133, 141, 142, 146, 211, 236, dead_or_set: 
insn=234, live_throughout: 13, 133, 141, 142, 146, 211, 236, dead_or_set: 216
insn=239, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 211, 216
insn=240, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 
insn=242, live_throughout: 13, 133, 141, 146, 236, dead_or_set: 142
insn=243, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 
insn=245, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 
insn=366, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 143
insn=256, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 143
insn=257, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 
insn=259, live_throughout: 13, 133, 141, 146, dead_or_set: 
insn=270, live_throughout: 13, 24, 133, 146, dead_or_set: 141
insn=368, live_throughout: 13, 133, 141, 146, dead_or_set: 142
insn=388, live_throughout: 13, 133, 141, 142, 146, dead_or_set: 
insn=273, live_throughout: 13, 133, 141, 142, 146, 236, dead_or_set: 
insn=277, live_throughout: 13, 133, 141, 142, 146, dead_or_set: 236
insn=278, live_throughout: 13, 133, 141, 142, 146, dead_or_set: 
insn=280, live_throughout: 13, 133, 142, 146, dead_or_set: 141
insn=281, live_throughout: 13, 133, 141, 142, 146, dead_or_set: 
insn=283, live_throughout: 13, 141, 142, 146, dead_or_set: 133
insn=284, live_throughout: 13, 141, 142, 146, dead_or_set: 
insn=286, live_throughout: 13, 141, 146, dead_or_set: 142
insn=390, live_throughout: 13, 141, 142, 146, dead_or_set: 
insn=289, live_throughout: 13, 133, 135, 140, 141, 146, 188, dead_or_set: 
insn=294, live_throughout: 13, 133, 140, 141, 146, dead_or_set: 135, 188, 223
insn=297, live_throughout: 13, 133, 140, 141, 146, dead_or_set: 223
insn=298, live_throughout: 13, 133, 140, 141, 146, dead_or_set: 
insn=301, live_throughout: 13, 133, 140, 141, 146, dead_or_set: 
insn=300, live_throughout: 13, 24, 133, 140, 146, dead_or_set: 141
insn=302, live_throughout: 13, 133, 140, 141, 146, dead_or_set: 
insn=304, live_throughout: 13, 141, 146, dead_or_set: 133
insn=305, live_throughout: 13, 141, 146, dead_or_set: 
insn=307, live_throughout: 13, 141, 146, dead_or_set: 142
insn=392, live_throughout: 13, 141, 142, 146, dead_or_set: 
insn=310, live_throughout: 13, 133, 140, 141, 146, dead_or_set: 
insn=312, live_throughout: 13, 133, 141, 146, dead_or_set: 140
insn=313, live_throughout: 13, 133, 141, 146, dead_or_set: 
insn=315, live_throughout: 13, 141, 146, dead_or_set: 133
insn=316, live_throughout: 13, 141, 146, dead_or_set: 
insn=318, live_throughout: 13, 141, 146, dead_or_set: 142
insn=394, live_throughout: 13, 141, 142, 146, dead_or_set: 
insn=321, live_throughout: 13, 141, 146, dead_or_set: 
insn=323, live_throughout: 13, 141, 146, dead_or_set: 142
insn=324, live_throughout: 13, 141, 142, 146, dead_or_set: 
insn=326, live_throughout: 13, 141, 146, dead_or_set: 0, 142
insn=327, live_throughout: 0, 13, 141, dead_or_set: 1, 146
insn=328, live_throughout: 13, 141, dead_or_set: 0, 1, 14
insn=333, live_throughout: 13, 14, dead_or_set: 0, 141
insn=339, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 162: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 42 (nil))
init_insns for 177: (insn_list:REG_DEP_TRUE 65 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 125 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 130 (nil))
init_insns for 191: (insn_list:REG_DEP_TRUE 400 (nil))
changing reg in insn 129
changing reg in insn 204
changing reg in insn 315
changing reg in insn 304
changing reg in insn 283
changing reg in insn 259
changing reg in insn 245
changing reg in insn 137
changing reg in insn 16
changing reg in insn 82
changing reg in insn 369
changing reg in insn 43
changing reg in insn 294
changing reg in insn 165
changing reg in insn 165
changing reg in insn 23
changing reg in insn 171
changing reg in insn 66
changing reg in insn 43
changing reg in insn 24
changing reg in insn 22
changing reg in insn 66
changing reg in insn 43
changing reg in insn 188
changing reg in insn 213
changing reg in insn 208
changing reg in insn 183
changing reg in insn 218
changing reg in insn 163
changing reg in insn 172
changing reg in insn 166
changing reg in insn 358
changing reg in insn 360
changing reg in insn 85
changing reg in insn 60
changing reg in insn 116
changing reg in insn 104
changing reg in insn 104
changing reg in insn 153
changing reg in insn 200
changing reg in insn 312
changing reg in insn 301
changing reg in insn 193
changing reg in insn 176
changing reg in insn 362
changing reg in insn 300
changing reg in insn 280
changing reg in insn 270
changing reg in insn 148
changing reg in insn 119
changing reg in insn 333
changing reg in insn 300
changing reg in insn 280
changing reg in insn 270
changing reg in insn 148
changing reg in insn 119
changing reg in insn 368
changing reg in insn 364
changing reg in insn 349
changing reg in insn 323
changing reg in insn 318
changing reg in insn 307
changing reg in insn 286
changing reg in insn 242
changing reg in insn 120
changing reg in insn 234
changing reg in insn 180
changing reg in insn 326
changing reg in insn 286
changing reg in insn 256
changing reg in insn 242
changing reg in insn 366
changing reg in insn 256
changing reg in insn 11
changing reg in insn 126
changing reg in insn 126
changing reg in insn 2
changing reg in insn 327
changing reg in insn 5
changing reg in insn 153
changing reg in insn 27
changing reg in insn 39
changing reg in insn 39
changing reg in insn 52
changing reg in insn 52
changing reg in insn 28
changing reg in insn 39
changing reg in insn 52
changing reg in insn 42
changing reg in insn 43
changing reg in insn 66
changing reg in insn 65
changing reg in insn 66
changing reg in insn 104
changing reg in insn 362
changing reg in insn 126
changing reg in insn 130
changing reg in insn 134
changing reg in insn 132
changing reg in insn 294
changing reg in insn 162
changing reg in insn 158
changing reg in insn 134
changing reg in insn 163
changing reg in insn 158
changing reg in insn 134
changing reg in insn 400
changing reg in insn 158
changing reg in insn 162
changing reg in insn 163
changing reg in insn 200
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 231
changing reg in insn 217
changing reg in insn 218
changing reg in insn 234
changing reg in insn 239
changing reg in insn 294
changing reg in insn 20
changing reg in insn 22
changing reg in insn 19
changing reg in insn 18
changing reg in insn 23
changing reg in insn 19
changing reg in insn 24
changing reg in insn 127
changing reg in insn 353
changing reg in insn 355
changing reg in insn 354
changing reg in insn 218
Spilling for insn 57.
Using reg 3 for reload 0
Spilling for insn 92.
Using reg 3 for reload 0
Spilling for insn 126.
Using reg 2 for reload 0
Spilling for insn 165.
Spilling for insn 218.
Spilling for insn 277.
Using reg 1 for reload 0
Spilling for insn 297.
Using reg 1 for reload 0
      Spill 182(a22), cost=20000
      Spilled regs 182
        Try assign 183(a16), cost=30000
changing reg in insn 126
      Assigning 182(freq=2000) a new slot 0
 Register 182 now on stack.

Spilling for insn 57.
Using reg 3 for reload 0
Spilling for insn 92.
Using reg 3 for reload 0
Spilling for insn 126.
Using reg 2 for reload 0
Using reg 10 for reload 1
Spilling for insn 127.
Using reg 3 for reload 0
Spilling for insn 165.
Spilling for insn 218.
Spilling for insn 277.
Using reg 1 for reload 0
Spilling for insn 297.
Using reg 1 for reload 0
      Spill 146(a1), cost=20000
      Spill 149(a20), cost=20000
      Spilled regs 146 149
        Try assign 182(a22), cost=20000
        Try assign 146(a1), cost=20000
        Try assign 149(a20), cost=20000
changing reg in insn 2
changing reg in insn 327
      Assigning 146(freq=2000) a new slot 1
 Register 146 now on stack.

changing reg in insn 5
changing reg in insn 153
      Assigning 149(freq=2000) a new slot 2
 Register 149 now on stack.

Spilling for insn 2.
Spilling for insn 5.
Spilling for insn 57.
Using reg 3 for reload 0
Spilling for insn 92.
Using reg 3 for reload 0
Spilling for insn 126.
Using reg 2 for reload 0
Using reg 10 for reload 1
Spilling for insn 127.
Using reg 3 for reload 0
Spilling for insn 153.
Using reg 3 for reload 0
Spilling for insn 165.
Spilling for insn 218.
Spilling for insn 277.
Using reg 1 for reload 0
Spilling for insn 297.
Using reg 1 for reload 0
deleting insn with uid = 125.

Reloads for insn # 2
Reload 0: reload_out (SI) = (reg/v:SI 146 [ sd ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 146 [ sd ])

Reloads for insn # 5
Reload 0: reload_out (SI) = (reg/v:SI 149 [ fpscr ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 149 [ fpscr ])

Reloads for insn # 57
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 92
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 126
Reload 0: reload_out (DI) = (reg:DI 182)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 182)
	reload_reg_rtx: (reg:DI 10 sl)
Reload 1: reload_in (DI) = (const_int -9223372036854775808 [0x8000000000000000])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 183)
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 127
Reload 0: reload_in (SI) = (subreg:SI (reg:DI 182) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg:DI 182) 4)
	reload_reg_rtx: (reg:SI 11 fp)

Reloads for insn # 153
Reload 0: reload_in (SI) = (reg/v:SI 149 [ fpscr ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/v:SI 149 [ fpscr ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 165
Reload 0: reload_in (DI) = (reg/v:DI 4 r4 [orig:135 significand ] [135])
	reload_out (DI) = (reg:DI 0 r0)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 4 r4 [orig:135 significand ] [135])
	reload_out_reg: (reg:DI 0 r0)
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 218
Reload 0: reload_in (DI) = (reg/v:DI 0 r0 [orig:136 incr ] [136])
	reload_out (DI) = (reg:DI 4 r4 [213])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 0 r0 [orig:136 incr ] [136])
	reload_out_reg: (reg:DI 4 r4 [213])
	reload_reg_rtx: (reg:DI 4 r4 [213])

Reloads for insn # 277
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 10 sl)

Reloads for insn # 297
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 11 fp)
deleting insn with uid = 11.
deleting insn with uid = 353.
+++Overall after reload 96000


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 167.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 328.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 81 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 88 (    2)


vfp_double_ftosi

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,15u,1d} r1={17d,12u,1d} r2={14d,12u,1d} r3={19d,16u} r4={6d,11u,2d} r5={5d,10u,2d} r6={10d,7u} r7={8d,8u} r8={2d,8u} r9={4d,10u,3d} r10={5d,8u} r11={2d,2u} r12={6d,2u} r13={1d,53u} r14={6d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={37d,28u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 812{598d,204u,10e} in 139{135 regular + 4 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 6 14 2 NOTE_INSN_DELETED)

(note 14 12 15 2 NOTE_INSN_DELETED)

(note 15 14 17 2 NOTE_INSN_DELETED)

(note 17 15 21 2 NOTE_INSN_DELETED)

(note 21 17 25 2 NOTE_INSN_DELETED)

(note 25 21 26 2 NOTE_INSN_DELETED)

(note 26 25 29 2 NOTE_INSN_DELETED)

(note 29 26 30 2 NOTE_INSN_DELETED)

(note 30 29 33 2 NOTE_INSN_DELETED)

(note 33 30 34 2 NOTE_INSN_DELETED)

(note 34 33 36 2 NOTE_INSN_DELETED)

(note 36 34 37 2 NOTE_INSN_DELETED)

(note 37 36 38 2 NOTE_INSN_DELETED)

(note 38 37 2 2 NOTE_INSN_DELETED)

(insn 2 38 9 2 arch/arm/vfp/vfpdouble.c:586 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-12 S4 A32])
        (reg:SI 0 r0 [ sd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 5 2 arch/arm/vfp/vfpdouble.c:592 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 9 10 2 arch/arm/vfp/vfpdouble.c:586 (set (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-16 S4 A32])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 369 2 arch/arm/vfp/vfpdouble.c:592 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 369 10 16 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 4 r4 [orig:135 significand ] [135])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 16 369 28 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 9 r9 [orig:134 D.6036 ] [134])
        (zero_extract:SI (reg:SI 1 r1 [ D.4609+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 28 16 18 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 12 ip [162])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 18 28 20 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [orig:229+4 ] [229])
        (ashift:SI (reg:SI 1 r1 [ D.4609+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 20 18 19 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [228])
        (ashift:SI (reg:SI 0 r0 [orig:144 D.4609 ] [144])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 19 20 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [orig:229+4 ] [229])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:144 D.4609 ] [144])
                (const_int 20 [0x14]))
            (reg:SI 3 r3 [orig:229+4 ] [229]))) 270 {*arith_shiftsi} (nil))

(insn 27 19 22 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 2 r2 [orig:161 D.6036 ] [161])
        (sign_extend:SI (reg:HI 9 r9 [orig:134 D.6036 ] [134]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 22 27 39 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 4 r4 [orig:135 significand ] [135])
        (lshiftrt:SI (reg:SI 14 lr [228])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 39 22 23 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 2 r2 [orig:161 D.6036 ] [161])
                    (reg:SI 12 ip [162]))
                (ne:SI (reg:SI 2 r2 [orig:161 D.6036 ] [161])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 23 39 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 4 r4 [orig:135 significand ] [135])
        (ior:SI (ashift:SI (reg:SI 3 r3 [orig:229+4 ] [229])
                (const_int 30 [0x1e]))
            (reg:SI 4 r4 [orig:135 significand ] [135]))) 270 {*arith_shiftsi} (nil))

(insn 24 23 40 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 5 r5 [ significand+4 ])
        (lshiftrt:SI (reg:SI 3 r3 [orig:229+4 ] [229])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 40 24 41 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 41 40 42 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 2 r2 [170])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 43 42 370 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 4 r4 [orig:135 significand ] [135])
        (ior:DI (reg/v:DI 4 r4 [orig:135 significand ] [135])
            (reg:DI 2 r2 [170]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 4 r4 [orig:135 significand ] [135])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))

(jump_insn 370 43 371 3 (set (pc)
        (label_ref 80)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 371 370 46)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
(code_label 46 371 47 4 309 "" [1 uses])

(note 47 46 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 47 53 4 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:161 D.6036 ] [161])
            (reg:SI 12 ip [162]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 2 r2 [orig:161 D.6036 ] [161])
            (const_int 2047 [0x7ff]))
        (nil)))

(jump_insn 53 52 54 4 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4400 [0x1130])
        (nil)))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  5 [56.0%]  (fallthru)
;; Succ edge  8 [44.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 2 [r2]

;; Pred edge  4 [56.0%]  (fallthru)
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 55 54 56 5 NOTE_INSN_DELETED)

(note 56 55 57 5 NOTE_INSN_DELETED)

(insn 57 56 58 5 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 4 r4 [orig:135 significand ] [135])
                        (reg:SI 5 r5 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 2 r2))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 58 57 59 5 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 372 6 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 3 r3 [orig:139 tm ] [139])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 372 60 373 6 (set (pc)
        (label_ref 101)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 373 372 63)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  5 [50.0%] 
(code_label 63 373 64 7 311 "" [1 uses])

(note 64 63 67 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 67 64 68 7 NOTE_INSN_DELETED)

(note 68 67 69 7 NOTE_INSN_DELETED)

(note 69 68 65 7 NOTE_INSN_DELETED)

(insn 65 69 66 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 6 r6 [177])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 66 65 358 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 2 r2 [176])
        (and:DI (reg/v:DI 4 r4 [orig:135 significand ] [135])
            (reg:DI 6 r6 [177]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 4 r4 [orig:135 significand ] [135])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 358 66 374 7 arch/arm/vfp/vfp.h:336 (parallel [
            (set (reg/v:SI 3 r3 [orig:139 tm ] [139])
                (if_then_else:SI (ne (reg:SI 3 r3 [+4 ])
                        (const_int 0 [0x0]))
                    (const_int 16 [0x10])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(jump_insn 374 358 375 7 (set (pc)
        (label_ref 101)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 375 374 80)

;; Start of basic block ( 4 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [44.0%] 
;; Pred edge  3 [100.0%] 
(code_label 80 375 81 8 310 "" [2 uses])

(note 81 80 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 82 81 83 8 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:134 D.6036 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 83 82 84 8 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 84 83 85 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 376 9 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 3 r3 [orig:139 tm ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 376 85 377 9 (set (pc)
        (label_ref 101)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 377 376 88)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 3 [r3]

;; Pred edge  8 [50.0%] 
(code_label 88 377 89 10 314 "" [1 uses])

(note 89 88 90 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 90 89 91 10 NOTE_INSN_DELETED)

(note 91 90 92 10 NOTE_INSN_DELETED)

(insn 92 91 360 10 arch/arm/vfp/vfp.h:338 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 4 r4 [orig:135 significand ] [135])
                        (reg:SI 5 r5 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 3 r3))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 360 92 101 10 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 3 r3 [orig:139 tm ] [139])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 7 6 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 101 360 102 11 312 "" [3 uses])

(note 102 101 103 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 103 102 115 11 NOTE_INSN_DELETED)

(note 115 103 104 11 NOTE_INSN_DELETED)

(insn 104 115 362 11 arch/arm/vfp/vfpdouble.c:599 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 3 r3 [orig:139 tm ] [139])
                        (const_int 4 [0x4]))
                    (const_int 0 [0x0])))
            (set (reg:SI 7 r7 [180])
                (and:SI (reg/v:SI 3 r3 [orig:139 tm ] [139])
                    (const_int 4 [0x4])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 362 104 116 11 arch/arm/vfp/vfpdouble.c:588 (set (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 7 r7 [180])
            (const_int 128 [0x80]))) 240 {*movsicc_insn} (nil))

(insn 116 362 117 11 arch/arm/vfp/vfpdouble.c:602 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:139 tm ] [139])
                (const_int 1 [0x1])
                (const_int 4 [0x4]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 117 116 118 11 arch/arm/vfp/vfpdouble.c:602 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 7 [r7] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 7 [r7] 9 [r9] 13 [sp]


;; Succ edge  12 [39.0%]  (fallthru)
;; Succ edge  13 [61.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  11 [39.0%]  (fallthru)
(note 118 117 119 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 119 118 120 12 arch/arm/vfp/vfpdouble.c:604 (set (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 120 119 378 12 arch/arm/vfp/vfpdouble.c:603 (set (reg/v:SI 6 r6 [orig:142 d ] [142])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 378 120 379 12 (set (pc)
        (label_ref 324)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 379 378 123)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 7 [r7] 9 [r9] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 9 [r9] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 7 [r7] 9 [r9] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	

;; Pred edge  11 [61.0%] 
(code_label 123 379 124 13 318 "" [1 uses])

(note 124 123 125 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 125 124 132 13 NOTE_INSN_DELETED)

(insn 132 125 403 13 arch/arm/vfp/vfpdouble.c:605 (set (reg:SI 9 r9 [orig:188 D.6036 ] [188])
        (sign_extend:SI (reg:HI 9 r9 [orig:134 D.6036 ] [134]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 403 132 126 13 arch/arm/vfp/vfp.h:304 (set (reg:DI 2 r2)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 126 403 402 13 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl)
        (and:DI (reg:DI 0 r0 [orig:144 D.4609 ] [144])
            (reg:DI 2 r2))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:144 D.4609 ] [144])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 402 126 130 13 arch/arm/vfp/vfp.h:304 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-8 S8 A64])
        (reg:DI 10 sl)) 163 {*arm_movdi} (nil))

(insn 130 402 134 13 arch/arm/vfp/vfpdouble.c:605 (set (reg:SI 1 r1 [187])
        (const_int 1054 [0x41e])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1054 [0x41e])
        (nil)))

(insn 134 130 127 13 arch/arm/vfp/vfpdouble.c:605 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:188 D.6036 ] [188])
            (reg:SI 1 r1 [187]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 9 r9 [orig:188 D.6036 ] [188])
            (const_int 1054 [0x41e]))
        (nil)))

(insn 127 134 129 13 arch/arm/vfp/vfp.h:304 (set (reg:SI 8 r8 [230])
        (lshiftrt:SI (reg:SI 11 fp)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 129 127 135 13 arch/arm/vfp/vfp.h:304 (set (reg:SI 8 r8 [orig:133 D.6039 ] [133])
        (zero_extend:SI (reg:HI 8 r8 [230]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(jump_insn 135 129 136 13 arch/arm/vfp/vfpdouble.c:605 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 151)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  13 [50.0%]  (fallthru)
(note 136 135 137 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 137 136 148 14 arch/arm/vfp/vfpdouble.c:607 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 D.6039 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 148 137 364 14 arch/arm/vfp/vfpdouble.c:609 (set (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 364 148 380 14 arch/arm/vfp/vfpdouble.c:608 (set (reg/v:SI 6 r6 [orig:142 d ] [142])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 2147483647 [0x7fffffff])
            (const_int -2147483648 [0xffffffff80000000]))) 240 {*movsicc_insn} (nil))

(jump_insn 380 364 381 14 (set (pc)
        (label_ref 324)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 381 380 151)

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  13 [50.0%] 
(code_label 151 381 152 15 320 "" [1 uses])

(note 152 151 404 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 404 152 153 15 arch/arm/vfp/vfpdouble.c:589 (set (reg:SI 3 r3)
        (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-16 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 153 404 400 15 arch/arm/vfp/vfpdouble.c:589 (set (reg/v:SI 10 sl [orig:140 rmode ] [140])
        (and:SI (reg:SI 3 r3)
            (const_int 12582912 [0xc00000]))) 67 {*arm_andsi3_insn} (nil))

(insn 400 153 158 15 arch/arm/vfp/vfpdouble.c:610 (set (reg:SI 3 r3 [191])
        (const_int 1021 [0x3fd])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1021 [0x3fd])
        (nil)))

(insn 158 400 159 15 arch/arm/vfp/vfpdouble.c:610 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:188 D.6036 ] [188])
            (reg:SI 3 r3 [191]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 9 r9 [orig:188 D.6036 ] [188])
            (const_int 1021 [0x3fd]))
        (nil)))

(jump_insn 159 158 160 15 arch/arm/vfp/vfpdouble.c:610 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 289)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 15 -> ( 16 36)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  16 [50.0%]  (fallthru)
;; Succ edge  36 [50.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 9 [r9] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  15 [50.0%]  (fallthru)
(note 160 159 164 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 164 160 170 16 NOTE_INSN_DELETED)

(note 170 164 351 16 NOTE_INSN_DELETED)

(note 351 170 352 16 NOTE_INSN_DELETED)

(note 352 351 162 16 NOTE_INSN_DELETED)

(insn 162 352 405 16 arch/arm/vfp/vfpdouble.c:611 (set (reg:SI 9 r9 [195])
        (minus:SI (const_int 1072 [0x430])
            (reg:SI 9 r9 [orig:188 D.6036 ] [188]))) 28 {*arm_subsi3_insn} (nil))

(insn 405 162 165 16 arch/arm/vfp/vfpdouble.c:614 (set (reg:DI 0 r0)
        (reg/v:DI 4 r4 [orig:135 significand ] [135])) 163 {*arm_movdi} (nil))

(insn 165 405 163 16 arch/arm/vfp/vfpdouble.c:614 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (reg:DI 0 r0)
                    (reg/v:DI 4 r4 [orig:135 significand ] [135])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 163 165 166 16 arch/arm/vfp/vfpdouble.c:611 (set (reg/v:SI 9 r9 [orig:138 shift ] [138])
        (plus:SI (reg:SI 9 r9 [195])
            (const_int 14 [0xe]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (minus:SI (const_int 1086 [0x43e])
            (reg:SI 9 r9 [orig:188 D.6036 ] [188]))
        (nil)))

(insn 166 163 167 16 arch/arm/vfp/vfpdouble.c:614 (set (reg:SI 2 r2)
        (reg/v:SI 9 r9 [orig:138 shift ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 167 166 349 16 arch/arm/vfp/vfpdouble.c:614 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 349 167 171 16 arch/arm/vfp/vfpdouble.c:614 (set (reg/v:SI 6 r6 [orig:142 d ] [142])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 171 349 172 16 arch/arm/vfp/vfpdouble.c:615 (set (reg:DI 0 r0)
        (reg/v:DI 4 r4 [orig:135 significand ] [135])) 163 {*arm_movdi} (nil))

(insn 172 171 173 16 arch/arm/vfp/vfpdouble.c:615 (set (reg:SI 2 r2)
        (minus:SI (const_int 65 [0x41])
            (reg/v:SI 9 r9 [orig:138 shift ] [138]))) 28 {*arm_subsi3_insn} (nil))

(call_insn/u 173 172 176 16 arch/arm/vfp/vfpdouble.c:615 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 176 173 354 16 arch/arm/vfp/vfpdouble.c:617 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:140 rmode ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 354 176 355 16 arch/arm/vfp/vfpdouble.c:615 (set (reg:SI 2 r2 [orig:236 rem ] [236])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 355 354 177 16 arch/arm/vfp/vfpdouble.c:615 (set (reg:SI 3 r3 [ rem+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 177 355 178 16 arch/arm/vfp/vfpdouble.c:617 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 191)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16 -> ( 17 20)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  20 [50.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  16 [50.0%]  (fallthru)
(note 178 177 179 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 179 178 180 17 NOTE_INSN_DELETED)

(insn 180 179 181 17 arch/arm/vfp/vfpdouble.c:619 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 6 r6 [orig:142 d ] [142])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 181 180 182 17 arch/arm/vfp/vfpdouble.c:619 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 186)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  18 [50.0%]  (fallthru)
;; Succ edge  19 [50.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  17 [50.0%]  (fallthru)
(note 182 181 183 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 183 182 382 18 arch/arm/vfp/vfpdouble.c:620 (set (reg/v:DI 0 r0 [orig:136 incr ] [136])
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 9223372036854775807 [0x7fffffffffffffff])
        (nil)))

(jump_insn 382 183 383 18 (set (pc)
        (label_ref 214)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 24)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 383 382 186)

;; Start of basic block ( 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  17 [50.0%] 
(code_label 186 383 187 19 325 "" [1 uses])

(note 187 186 188 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 188 187 384 19 arch/arm/vfp/vfpdouble.c:618 (set (reg/v:DI 0 r0 [orig:136 incr ] [136])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(jump_insn 384 188 385 19 (set (pc)
        (label_ref 214)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 24)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 385 384 191)

;; Start of basic block ( 16) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  16 [50.0%] 
(code_label 191 385 192 20 324 "" [1 uses])

(note 192 191 193 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 193 192 194 20 arch/arm/vfp/vfpdouble.c:621 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:140 rmode ] [140])
            (const_int 12582912 [0xc00000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 194 193 195 20 arch/arm/vfp/vfpdouble.c:621 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 20 -> ( 23 21)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  23 [28.0%] 
;; Succ edge  21 [72.0%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  20 [72.0%]  (fallthru)
(note 195 194 196 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 196 195 197 21 NOTE_INSN_DELETED)

(note 197 196 199 21 NOTE_INSN_DELETED)

(note 199 197 202 21 NOTE_INSN_DELETED)

(note 202 199 203 21 NOTE_INSN_DELETED)

(note 203 202 200 21 NOTE_INSN_DELETED)

(insn 200 203 204 21 arch/arm/vfp/vfpdouble.c:623 (parallel [
            (set (reg:SI 10 sl [207])
                (eq:SI (reg/v:SI 10 sl [orig:140 rmode ] [140])
                    (const_int 4194304 [0x400000])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 204 200 205 21 arch/arm/vfp/vfpdouble.c:623 (parallel [
            (set (reg:SI 10 sl [210])
                (xor:SI (ne:SI (reg:SI 8 r8 [orig:133 D.6039 ] [133])
                        (const_int 0 [0x0]))
                    (reg:SI 10 sl [207])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 205 204 206 21 arch/arm/vfp/vfpdouble.c:623 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 10 sl [210])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 206 205 207 21 arch/arm/vfp/vfpdouble.c:623 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  22 [50.0%]  (fallthru)
;; Succ edge  23 [50.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  21 [50.0%]  (fallthru)
(note 207 206 208 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 208 207 386 22 arch/arm/vfp/vfpdouble.c:624 (set (reg/v:DI 0 r0 [orig:136 incr ] [136])
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(jump_insn 386 208 387 22 (set (pc)
        (label_ref 214)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 24)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 387 386 211)

;; Start of basic block ( 21 20) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  21 [50.0%] 
;; Pred edge  20 [28.0%] 
(code_label 211 387 212 23 327 "" [2 uses])

(note 212 211 213 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 213 212 214 23 arch/arm/vfp/vfpdouble.c:622 (set (reg/v:DI 0 r0 [orig:136 incr ] [136])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 23 -> ( 24)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 23 19 18 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  19 [100.0%] 
;; Pred edge  18 [100.0%] 
;; Pred edge  22 [100.0%] 
(code_label 214 213 215 24 326 "" [3 uses])

(note 215 214 406 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 406 215 218 24 arch/arm/vfp/vfpdouble.c:627 (set (reg:DI 4 r4 [213])
        (reg/v:DI 0 r0 [orig:136 incr ] [136])) 163 {*arm_movdi} (nil))

(insn 218 406 217 24 arch/arm/vfp/vfpdouble.c:627 (parallel [
            (set (reg:DI 4 r4 [213])
                (plus:DI (reg:DI 4 r4 [213])
                    (reg:DI 2 r2 [orig:236 rem ] [236])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 217 218 219 24 arch/arm/vfp/vfpdouble.c:627 (set (reg:QI 1 r1 [211])
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 219 217 220 24 arch/arm/vfp/vfpdouble.c:627 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ rem+4 ])
            (reg:SI 5 r5 [+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 220 219 341 24 arch/arm/vfp/vfpdouble.c:627 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 229)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 24 -> ( 27 25)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  27 [50.0%] 
;; Succ edge  25 [50.0%]  (fallthru)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  24 [50.0%]  (fallthru)
(note 341 220 222 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(jump_insn 222 341 342 25 arch/arm/vfp/vfpdouble.c:627 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 232)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 25 -> ( 28 26)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  28 [71.0%] 
;; Succ edge  26 [29.0%]  (fallthru)

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  25 [29.0%]  (fallthru)
(note 342 222 223 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 223 342 224 26 arch/arm/vfp/vfpdouble.c:627 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:236 rem ] [236])
            (reg:SI 4 r4 [213]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 224 223 229 26 arch/arm/vfp/vfpdouble.c:627 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 232)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 26 -> ( 27 28)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  27 [50.0%]  (fallthru)
;; Succ edge  28 [50.0%] 

;; Start of basic block ( 24 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  24 [50.0%] 
;; Pred edge  26 [50.0%]  (fallthru)
(code_label 229 224 345 27 330 "" [1 uses])

(note 345 229 231 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 231 345 232 27 arch/arm/vfp/vfpdouble.c:627 (set (reg:QI 1 r1 [211])
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 27 -> ( 28)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 25 26 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  25 [71.0%] 
;; Pred edge  26 [50.0%] 
;; Pred edge  27 [100.0%]  (fallthru)
(code_label 232 231 346 28 329 "" [2 uses])

(note 346 232 233 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 233 346 236 28 NOTE_INSN_DELETED)

(note 236 233 237 28 NOTE_INSN_DELETED)

(note 237 236 238 28 NOTE_INSN_DELETED)

(note 238 237 234 28 NOTE_INSN_DELETED)

(insn 234 238 239 28 arch/arm/vfp/vfpdouble.c:627 (parallel [
            (set (reg:SI 0 r0 [216])
                (ne:SI (reg/v:SI 6 r6 [orig:142 d ] [142])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 239 234 240 28 arch/arm/vfp/vfpdouble.c:627 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 0 r0 [216])
                        (reg:SI 1 r1 [211]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 240 239 241 28 arch/arm/vfp/vfpdouble.c:627 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 243)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  29 [50.0%]  (fallthru)
;; Succ edge  30 [50.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  28 [50.0%]  (fallthru)
(note 241 240 242 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 242 241 243 29 arch/arm/vfp/vfpdouble.c:628 (set (reg/v:SI 6 r6 [orig:142 d ] [142])
        (plus:SI (reg/v:SI 6 r6 [orig:142 d ] [142])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 29 -> ( 30)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  30 [100.0%]  (fallthru)

;; Start of basic block ( 28 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  28 [50.0%] 
;; Pred edge  29 [100.0%]  (fallthru)
(code_label 243 242 244 30 328 "" [1 uses])

(note 244 243 245 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 245 244 366 30 arch/arm/vfp/vfpdouble.c:629 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 D.6039 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 366 245 256 30 arch/arm/vfp/vfpdouble.c:629 discrim 2 (set (reg:SI 1 r1 [orig:143 iftmp.141 ] [143])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int -2147483648 [0xffffffff80000000])
            (const_int 2147483647 [0x7fffffff]))) 240 {*movsicc_insn} (nil))

(insn 256 366 257 30 arch/arm/vfp/vfpdouble.c:629 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:142 d ] [142])
            (reg:SI 1 r1 [orig:143 iftmp.141 ] [143]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 257 256 258 30 arch/arm/vfp/vfpdouble.c:629 discrim 3 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 273)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 30 -> ( 31 32)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  31 [50.0%]  (fallthru)
;; Succ edge  32 [50.0%] 

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  30 [50.0%]  (fallthru)
(note 258 257 259 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 259 258 270 31 arch/arm/vfp/vfpdouble.c:630 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 D.6039 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 270 259 368 31 arch/arm/vfp/vfpdouble.c:631 (set (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 368 270 388 31 arch/arm/vfp/vfpdouble.c:630 discrim 2 (set (reg/v:SI 6 r6 [orig:142 d ] [142])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int -2147483648 [0xffffffff80000000])
            (const_int 2147483647 [0x7fffffff]))) 240 {*movsicc_insn} (nil))

(jump_insn 388 368 389 31 (set (pc)
        (label_ref 281)) 242 {*arm_jump} (nil))
;; End of basic block 31 -> ( 34)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  34 [100.0%] 

(barrier 389 388 273)

;; Start of basic block ( 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 10 [sl]

;; Pred edge  30 [50.0%] 
(code_label 273 389 274 32 333 "" [1 uses])

(note 274 273 275 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(note 275 274 276 32 NOTE_INSN_DELETED)

(note 276 275 277 32 NOTE_INSN_DELETED)

(insn 277 276 278 32 arch/arm/vfp/vfpdouble.c:632 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:236 rem ] [236])
                        (reg:SI 3 r3 [ rem+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 10 sl))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 278 277 279 32 arch/arm/vfp/vfpdouble.c:632 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 281)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 32 -> ( 33 34)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  33 [50.0%]  (fallthru)
;; Succ edge  34 [50.0%] 

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  32 [50.0%]  (fallthru)
(note 279 278 280 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 280 279 281 33 arch/arm/vfp/vfpdouble.c:633 (set (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  34 [100.0%]  (fallthru)

;; Start of basic block ( 33 32 31) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  33 [100.0%]  (fallthru)
;; Pred edge  32 [50.0%] 
;; Pred edge  31 [100.0%] 
(code_label 281 280 282 34 336 "" [2 uses])

(note 282 281 283 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 283 282 284 34 arch/arm/vfp/vfpdouble.c:635 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 D.6039 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 284 283 285 34 arch/arm/vfp/vfpdouble.c:635 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 324)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 34 -> ( 35 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  35 [50.0%]  (fallthru)
;; Succ edge  44 [50.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  34 [50.0%]  (fallthru)
(note 285 284 286 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 286 285 390 35 arch/arm/vfp/vfpdouble.c:636 (set (reg/v:SI 6 r6 [orig:142 d ] [142])
        (neg:SI (reg/v:SI 6 r6 [orig:142 d ] [142]))) 127 {*arm_negsi2} (nil))

(jump_insn 390 286 391 35 (set (pc)
        (label_ref 324)) 242 {*arm_jump} (nil))
;; End of basic block 35 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 391 390 289)

;; Start of basic block ( 15) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 11 [fp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 11 [fp]

;; Pred edge  15 [50.0%] 
(code_label 289 391 290 36 323 "" [1 uses])

(note 290 289 293 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(note 293 290 295 36 NOTE_INSN_DELETED)

(note 295 293 296 36 NOTE_INSN_DELETED)

(note 296 295 294 36 NOTE_INSN_DELETED)

(insn 294 296 297 36 arch/arm/vfp/vfpdouble.c:639 (set (reg:DI 2 r2 [223])
        (ior:DI (sign_extend:DI (reg:SI 9 r9 [orig:188 D.6036 ] [188]))
            (reg/v:DI 4 r4 [orig:135 significand ] [135]))) 88 {*iordi_sesidi_di} (nil))

(insn 297 294 298 36 arch/arm/vfp/vfpdouble.c:639 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [223])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 11 fp))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 298 297 299 36 arch/arm/vfp/vfpdouble.c:639 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 321)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 36 -> ( 37 43)
;; lr  out 	 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  37 [61.0%]  (fallthru)
;; Succ edge  43 [39.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  36 [61.0%]  (fallthru)
(note 299 298 301 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 301 299 300 37 arch/arm/vfp/vfpdouble.c:641 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:140 rmode ] [140])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 300 301 302 37 arch/arm/vfp/vfpdouble.c:640 (set (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 7 r7 [orig:141 exceptions ] [141])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))

(jump_insn 302 300 303 37 arch/arm/vfp/vfpdouble.c:641 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 310)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 37 -> ( 38 40)
;; lr  out 	 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  38 [28.0%]  (fallthru)
;; Succ edge  40 [72.0%] 

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  37 [28.0%]  (fallthru)
(note 303 302 304 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 304 303 305 38 arch/arm/vfp/vfpdouble.c:641 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 D.6039 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 305 304 306 38 arch/arm/vfp/vfpdouble.c:641 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 321)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 38 -> ( 39 43)
;; lr  out 	 7 [r7] 13 [sp]
;; live  out 	 7 [r7] 13 [sp]


;; Succ edge  39 [39.0%]  (fallthru)
;; Succ edge  43 [61.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  38 [39.0%]  (fallthru)
(note 306 305 307 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 307 306 392 39 arch/arm/vfp/vfpdouble.c:642 (set (reg/v:SI 6 r6 [orig:142 d ] [142])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 392 307 393 39 (set (pc)
        (label_ref 324)) 242 {*arm_jump} (nil))
;; End of basic block 39 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 393 392 310)

;; Start of basic block ( 37) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  37 [72.0%] 
(code_label 310 393 311 40 338 "" [1 uses])

(note 311 310 312 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 312 311 313 40 arch/arm/vfp/vfpdouble.c:643 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:140 rmode ] [140])
            (const_int 8388608 [0x800000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 313 312 314 40 arch/arm/vfp/vfpdouble.c:643 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 321)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5321 [0x14c9])
        (nil)))
;; End of basic block 40 -> ( 41 43)
;; lr  out 	 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  41 [46.8%]  (fallthru)
;; Succ edge  43 [53.2%] 

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  40 [46.8%]  (fallthru)
(note 314 313 315 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 315 314 316 41 arch/arm/vfp/vfpdouble.c:643 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 D.6039 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 316 315 317 41 arch/arm/vfp/vfpdouble.c:643 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 321)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 41 -> ( 42 43)
;; lr  out 	 7 [r7] 13 [sp]
;; live  out 	 7 [r7] 13 [sp]


;; Succ edge  42 [61.0%]  (fallthru)
;; Succ edge  43 [39.0%] 

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  41 [61.0%]  (fallthru)
(note 317 316 318 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 318 317 394 42 arch/arm/vfp/vfpdouble.c:644 (set (reg/v:SI 6 r6 [orig:142 d ] [142])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(jump_insn 394 318 395 42 (set (pc)
        (label_ref 324)) 242 {*arm_jump} (nil))
;; End of basic block 42 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 395 394 321)

;; Start of basic block ( 38 41 40 36) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  38 [61.0%] 
;; Pred edge  41 [39.0%] 
;; Pred edge  40 [53.2%] 
;; Pred edge  36 [39.0%] 
(code_label 321 395 322 43 337 "" [4 uses])

(note 322 321 323 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 323 322 324 43 arch/arm/vfp/vfpdouble.c:638 (set (reg/v:SI 6 r6 [orig:142 d ] [142])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 43 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%]  (fallthru)

;; Start of basic block ( 43 35 12 34 39 14 42) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  43 [100.0%]  (fallthru)
;; Pred edge  35 [100.0%] 
;; Pred edge  12 [100.0%] 
;; Pred edge  34 [50.0%] 
;; Pred edge  39 [100.0%] 
;; Pred edge  14 [100.0%] 
;; Pred edge  42 [100.0%] 
(code_label 324 323 325 44 319 "" [6 uses])

(note 325 324 326 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 326 325 327 44 arch/arm/vfp/vfpdouble.c:650 (set (reg:SI 0 r0)
        (reg/v:SI 6 r6 [orig:142 d ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 327 326 328 44 arch/arm/vfp/vfpdouble.c:650 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-12 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 328 327 333 44 arch/arm/vfp/vfpdouble.c:650 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_float") [flags 0x41] <function_decl 0x10a9d180 vfp_put_float>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 333 328 339 44 arch/arm/vfp/vfpdouble.c:653 (set (reg/i:SI 0 r0)
        (reg/v:SI 7 r7 [orig:141 exceptions ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 339 333 399 44 arch/arm/vfp/vfpdouble.c:653 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 44 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 399 339 401 NOTE_INSN_DELETED)

(note 401 399 0 NOTE_INSN_DELETED)


;; Function vfp_double_ftosiz (vfp_double_ftosiz)[0:170]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 13(l0): point = 0
   Insn 12(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=5
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=12, live_throughout: 0, 1, 2, 13, 14, dead_or_set: 3
insn=13, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_ftosiz

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,1u} r2={2d,1u} r3={3d,1u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 133{124d,9u,0e} in 2{1 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 12 2 NOTE_INSN_FUNCTION_BEG)

(insn 12 6 13 2 arch/arm/vfp/vfpdouble.c:657 (set (reg:SI 3 r3)
        (const_int 12582912 [0xc00000])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 12 14 2 arch/arm/vfp/vfpdouble.c:657 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_ftosi") [flags 0x3] <function_decl 0x10ad5d80 vfp_double_ftosi>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 27)

(note 27 14 0 NOTE_INSN_DELETED)


;; Function vfp_double_ftoui (vfp_double_ftoui)[0:167]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 377.
verify found no changes in insn with uid = 377.
deleting insn with uid = 154.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 81 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 88 (    2)

Pass 0 for finding allocno costs

    a8 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r219,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r209,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a1(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:164000
  a7(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a9(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a11(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a19(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a23(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a24(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r175,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a26(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a28(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a29(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a31(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r227: preferred GENERAL_REGS, alternative NO_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a1(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:120000
  a3(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r214,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:164000
  a7(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r227,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a9(r210,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a11(r209,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a19(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a23(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a24(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r175,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a26(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a28(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a29(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a31(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 314(l0): point = 0
   Insn 308(l0): point = 2
   Insn 303(l0): point = 4
   Insn 302(l0): point = 6
   Insn 301(l0): point = 8
   Insn 298(l0): point = 11
   Insn 371(l0): point = 14
   Insn 293(l0): point = 16
   Insn 292(l0): point = 18
   Insn 290(l0): point = 21
   Insn 289(l0): point = 23
   Insn 287(l0): point = 26
   Insn 286(l0): point = 28
   Insn 369(l0): point = 31
   Insn 281(l0): point = 33
   Insn 279(l0): point = 36
   Insn 278(l0): point = 38
   Insn 276(l0): point = 41
   Insn 274(l0): point = 43
   Insn 275(l0): point = 45
   Insn 272(l0): point = 48
   Insn 271(l0): point = 50
   Insn 268(l0): point = 52
   Insn 367(l0): point = 58
   Insn 260(l0): point = 60
   Insn 258(l0): point = 63
   Insn 257(l0): point = 65
   Insn 365(l0): point = 68
   Insn 250(l0): point = 70
   Insn 249(l0): point = 72
   Insn 247(l0): point = 75
   Insn 246(l0): point = 77
   Insn 243(l0): point = 80
   Insn 242(l0): point = 82
   Insn 363(l0): point = 85
   Insn 237(l0): point = 87
   Insn 361(l0): point = 90
   Insn 232(l0): point = 92
   Insn 230(l0): point = 95
   Insn 229(l0): point = 97
   Insn 222(l0): point = 100
   Insn 221(l0): point = 102
   Insn 220(l0): point = 105
   Insn 218(l0): point = 108
   Insn 217(l0): point = 110
   Insn 216(l0): point = 112
   Insn 213(l0): point = 119
   Insn 359(l0): point = 122
   Insn 208(l0): point = 124
   Insn 206(l0): point = 127
   Insn 205(l0): point = 129
   Insn 204(l0): point = 131
   Insn 200(l0): point = 133
   Insn 194(l0): point = 136
   Insn 193(l0): point = 138
   Insn 357(l0): point = 141
   Insn 188(l0): point = 143
   Insn 355(l0): point = 146
   Insn 183(l0): point = 148
   Insn 181(l0): point = 151
   Insn 180(l0): point = 153
   Insn 177(l0): point = 156
   Insn 330(l0): point = 158
   Insn 329(l0): point = 160
   Insn 328(l0): point = 162
   Insn 176(l0): point = 164
   Insn 173(l0): point = 166
   Insn 172(l0): point = 168
   Insn 171(l0): point = 170
   Insn 324(l0): point = 172
   Insn 167(l0): point = 174
   Insn 166(l0): point = 176
   Insn 163(l0): point = 178
   Insn 165(l0): point = 180
   Insn 162(l0): point = 185
   Insn 159(l0): point = 188
   Insn 158(l0): point = 190
   Insn 377(l0): point = 192
   Insn 153(l0): point = 194
   Insn 353(l0): point = 197
   Insn 341(l0): point = 199
   Insn 339(l0): point = 201
   Insn 138(l0): point = 203
   Insn 136(l0): point = 206
   Insn 135(l0): point = 208
   Insn 131(l0): point = 210
   Insn 133(l0): point = 212
   Insn 128(l0): point = 215
   Insn 126(l0): point = 217
   Insn 125(l0): point = 219
   Insn 124(l0): point = 224
   Insn 351(l0): point = 227
   Insn 119(l0): point = 229
   Insn 117(l0): point = 232
   Insn 116(l0): point = 234
   Insn 337(l0): point = 236
   Insn 104(l0): point = 238
   Insn 335(l0): point = 241
   Insn 92(l0): point = 243
   Insn 349(l0): point = 246
   Insn 85(l0): point = 248
   Insn 83(l0): point = 251
   Insn 82(l0): point = 253
   Insn 347(l0): point = 256
   Insn 333(l0): point = 258
   Insn 66(l0): point = 260
   Insn 65(l0): point = 265
   Insn 345(l0): point = 268
   Insn 60(l0): point = 270
   Insn 58(l0): point = 273
   Insn 57(l0): point = 275
   Insn 53(l0): point = 278
   Insn 52(l0): point = 280
   Insn 343(l0): point = 283
   Insn 43(l0): point = 285
   Insn 42(l0): point = 290
   Insn 40(l0): point = 293
   Insn 24(l0): point = 295
   Insn 23(l0): point = 297
   Insn 39(l0): point = 299
   Insn 22(l0): point = 301
   Insn 27(l0): point = 303
   Insn 19(l0): point = 305
   Insn 20(l0): point = 307
   Insn 18(l0): point = 309
   Insn 28(l0): point = 311
   Insn 16(l0): point = 313
   Insn 342(l0): point = 315
   Insn 11(l0): point = 317
   Insn 10(l0): point = 319
   Insn 5(l0): point = 321
   Insn 9(l0): point = 323
   Insn 2(l0): point = 325
 a0(r141): [206..236] [3..201]
 a1(r145): [7..325]
 a2(r142): [197..199] [75..172] [58..70] [31..33] [14..16] [9..11]
 a3(r133): [227..229] [204..215] [78..196] [39..57] [24..30]
 a4(r140): [156..194] [134..140] [41..57] [29..30]
 a5(r214): [51..54]
 a6(r135): [206..315] [171..196] [55..57] [53..53]
 a7(r187): [206..212] [186..196] [53..57]
 a8(r227): [75..162] [66..67]
 a9(r210): [103..113]
 a10(r136): [146..148] [141..143] [122..124] [113..119]
 a11(r209): [130..131]
 a12(r206): [132..133]
 a13(r138): [169..178]
 a14(r194): [179..185]
 a15(r190): [191..192]
 a16(r148): [206..321] [195..196]
 a17(r186): [209..210]
 a18(r134): [213..313]
 a19(r221): [216..217]
 a20(r181): [222..222] [218..220]
 a21(r182): [220..224]
 a22(r143): [232..317] [220..226]
 a23(r139): [268..270] [256..258] [246..248] [235..241]
 a24(r179): [237..238]
 a25(r175): [263..263] [259..261]
 a26(r176): [261..265]
 a27(r161): [293..311] [281..282]
 a28(r160): [293..303] [281..282]
 a29(r169): [286..290]
 a30(r220): [296..309]
 a31(r219): [302..307]
Compressing live ranges: from 328 to 104 - 31%
Ranges after the compression:
 a0(r141): [57..74] [0..55]
 a1(r145): [1..103]
 a2(r142): [53..54] [22..43] [18..21] [9..10] [4..5] [2..3]
 a3(r133): [70..71] [56..62] [23..52] [11..17] [6..8]
 a4(r140): [39..50] [33..34] [12..17] [7..8]
 a5(r214): [13..15]
 a6(r135): [57..100] [42..52] [16..17] [14..14]
 a7(r187): [57..60] [47..52] [14..17]
 a8(r227): [22..40] [19..20]
 a9(r210): [24..25]
 a10(r136): [37..38] [35..36] [27..28] [25..26]
 a11(r209): [29..30]
 a12(r206): [31..32]
 a13(r138): [41..44]
 a14(r194): [45..46]
 a15(r190): [48..49]
 a16(r148): [57..102] [51..52]
 a17(r186): [58..59]
 a18(r134): [61..99]
 a19(r221): [63..64]
 a20(r181): [67..67] [65..66]
 a21(r182): [66..68]
 a22(r143): [72..101] [66..69]
 a23(r139): [86..87] [80..81] [78..79] [73..77]
 a24(r179): [75..76]
 a25(r175): [84..84] [82..83]
 a26(r176): [83..85]
 a27(r161): [92..98] [88..89]
 a28(r160): [92..95] [88..89]
 a29(r169): [90..91]
 a30(r220): [93..97]
 a31(r219): [94..96]
+++Allocating 256 bytes for conflict table (uncompressed size 256)
;; a0(r141,l0) conflicts: a1(r145,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a5(r214,l0) a7(r187,l0) a6(r135,l0) a8(r227,l0) a9(r210,l0) a10(r136,l0) a11(r209,l0) a12(r206,l0) a13(r138,l0) a14(r194,l0) a15(r190,l0) a16(r148,l0) a17(r186,l0) a18(r134,l0) a19(r221,l0) a20(r181,l0) a21(r182,l0) a22(r143,l0) a23(r139,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r145,l0) conflicts: a0(r141,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a5(r214,l0) a7(r187,l0) a6(r135,l0) a8(r227,l0) a9(r210,l0) a10(r136,l0) a11(r209,l0) a12(r206,l0) a13(r138,l0) a14(r194,l0) a15(r190,l0) a16(r148,l0) a17(r186,l0) a18(r134,l0) a19(r221,l0) a20(r181,l0) a21(r182,l0) a22(r143,l0) a23(r139,l0) a24(r179,l0) a25(r175,l0) a26(r176,l0) a28(r160,l0) a27(r161,l0) a29(r169,l0) a30(r220,l0) a31(r219,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r142,l0) conflicts: a0(r141,l0) a1(r145,l0) a3(r133,l0) a4(r140,l0) a6(r135,l0) a8(r227,l0) a9(r210,l0) a10(r136,l0) a11(r209,l0) a12(r206,l0) a13(r138,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r133,l0) conflicts: a0(r141,l0) a1(r145,l0) a2(r142,l0) a4(r140,l0) a5(r214,l0) a7(r187,l0) a6(r135,l0) a8(r227,l0) a9(r210,l0) a10(r136,l0) a11(r209,l0) a12(r206,l0) a13(r138,l0) a14(r194,l0) a15(r190,l0) a16(r148,l0) a17(r186,l0) a18(r134,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r140,l0) conflicts: a0(r141,l0) a1(r145,l0) a2(r142,l0) a3(r133,l0) a5(r214,l0) a7(r187,l0) a6(r135,l0) a8(r227,l0) a13(r138,l0) a14(r194,l0) a15(r190,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r214,l0) conflicts: a0(r141,l0) a1(r145,l0) a3(r133,l0) a4(r140,l0) a7(r187,l0) a6(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r135,l0) conflicts: a0(r141,l0) a1(r145,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a5(r214,l0) a7(r187,l0) a13(r138,l0) a14(r194,l0) a15(r190,l0) a16(r148,l0) a17(r186,l0) a18(r134,l0) a19(r221,l0) a20(r181,l0) a21(r182,l0) a22(r143,l0) a23(r139,l0) a24(r179,l0) a25(r175,l0) a26(r176,l0) a28(r160,l0) a27(r161,l0) a29(r169,l0) a30(r220,l0) a31(r219,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a7(r187,l0) conflicts: a0(r141,l0) a1(r145,l0) a3(r133,l0) a4(r140,l0) a5(r214,l0) a6(r135,l0) a15(r190,l0) a16(r148,l0) a17(r186,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r227,l0) conflicts: a0(r141,l0) a1(r145,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a9(r210,l0) a10(r136,l0) a11(r209,l0) a12(r206,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a9(r210,l0) conflicts: a0(r141,l0) a1(r145,l0) a2(r142,l0) a3(r133,l0) a8(r227,l0) a10(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r136,l0) conflicts: a0(r141,l0) a1(r145,l0) a2(r142,l0) a3(r133,l0) a8(r227,l0) a9(r210,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r209,l0) conflicts: a0(r141,l0) a1(r145,l0) a2(r142,l0) a3(r133,l0) a8(r227,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r206,l0) conflicts: a0(r141,l0) a1(r145,l0) a2(r142,l0) a3(r133,l0) a8(r227,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r138,l0) conflicts: a0(r141,l0) a1(r145,l0) a2(r142,l0) a3(r133,l0) a4(r140,l0) a6(r135,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a14(r194,l0) conflicts: a0(r141,l0) a1(r145,l0) a3(r133,l0) a4(r140,l0) a6(r135,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a15(r190,l0) conflicts: a0(r141,l0) a1(r145,l0) a3(r133,l0) a4(r140,l0) a7(r187,l0) a6(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r148,l0) conflicts: a0(r141,l0) a1(r145,l0) a3(r133,l0) a7(r187,l0) a6(r135,l0) a17(r186,l0) a18(r134,l0) a19(r221,l0) a20(r181,l0) a21(r182,l0) a22(r143,l0) a23(r139,l0) a24(r179,l0) a25(r175,l0) a26(r176,l0) a28(r160,l0) a27(r161,l0) a29(r169,l0) a30(r220,l0) a31(r219,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a17(r186,l0) conflicts: a0(r141,l0) a1(r145,l0) a3(r133,l0) a7(r187,l0) a6(r135,l0) a16(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r134,l0) conflicts: a0(r141,l0) a1(r145,l0) a3(r133,l0) a6(r135,l0) a16(r148,l0) a19(r221,l0) a20(r181,l0) a21(r182,l0) a22(r143,l0) a23(r139,l0) a24(r179,l0) a25(r175,l0) a26(r176,l0) a28(r160,l0) a27(r161,l0) a29(r169,l0) a30(r220,l0) a31(r219,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r221,l0) conflicts: a0(r141,l0) a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r181,l0) conflicts: a0(r141,l0) a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a21(r182,l0) a22(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r182,l0) conflicts: a0(r141,l0) a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a20(r181,l0) a22(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r143,l0) conflicts: a0(r141,l0) a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a20(r181,l0) a21(r182,l0) a23(r139,l0) a24(r179,l0) a25(r175,l0) a26(r176,l0) a28(r160,l0) a27(r161,l0) a29(r169,l0) a30(r220,l0) a31(r219,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r139,l0) conflicts: a0(r141,l0) a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a22(r143,l0) a24(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r179,l0) conflicts: a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a22(r143,l0) a23(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r175,l0) conflicts: a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a22(r143,l0) a26(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r176,l0) conflicts: a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a22(r143,l0) a25(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r161,l0) conflicts: a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a22(r143,l0) a28(r160,l0) a30(r220,l0) a31(r219,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r160,l0) conflicts: a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a22(r143,l0) a27(r161,l0) a30(r220,l0) a31(r219,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r169,l0) conflicts: a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a22(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r220,l0) conflicts: a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a22(r143,l0) a28(r160,l0) a27(r161,l0) a31(r219,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r219,l0) conflicts: a1(r145,l0) a6(r135,l0) a16(r148,l0) a18(r134,l0) a22(r143,l0) a28(r160,l0) a27(r161,l0) a30(r220,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a4(r140)<->a12(r206)@125:shuffle
  cp1:a11(r209)<->a12(r206)@125:shuffle
  cp2:a7(r187)<->a14(r194)@125:shuffle
  cp3:a13(r138)<->a14(r194)@125:shuffle
  cp4:a4(r140)<->a16(r148)@125:shuffle
  cp5:a7(r187)<->a18(r134)@125:shuffle
  cp6:a3(r133)<->a19(r221)@125:shuffle
  cp7:a0(r141)<->a24(r179)@125:shuffle
  regions=1, blocks=45, points=104
    allocnos=32, copies=8, conflicts=0, ranges=63

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r141 1r145 2r142 3r133 4r140 5r214 6r135 7r187 8r227 9r210 10r136 11r209 12r206 13r138 14r194 15r190 16r148 17r186 18r134 19r221 20r181 21r182 22r143 23r139 24r179 25r175 26r176 27r161 28r160 29r169 30r220 31r219
    modified regnos: 133 134 135 136 138 139 140 141 142 143 145 148 160 161 169 175 176 179 181 182 186 187 190 194 206 209 210 214 219 220 221 227
    border:
    Pressure: GENERAL_REGS=11
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 4 regs less
    Reg 227 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 194 of GENERAL_REGS has 2 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
      Pushing a31(r219,l0)
      Pushing a29(r169,l0)
      Pushing a26(r176,l0)
      Pushing a25(r175,l0)
      Pushing a24(r179,l0)
      Pushing a21(r182,l0)
      Pushing a20(r181,l0)
      Pushing a19(r221,l0)
      Pushing a17(r186,l0)
      Pushing a15(r190,l0)
      Pushing a12(r206,l0)
      Pushing a11(r209,l0)
      Pushing a27(r161,l0)
      Pushing a9(r210,l0)
      Pushing a5(r214,l0)
      Pushing a28(r160,l0)
      Pushing a18(r134,l0)
      Pushing a30(r220,l0)
      Pushing a10(r136,l0)
      Pushing a7(r187,l0)
      Pushing a22(r143,l0)
      Pushing a23(r139,l0)
      Pushing a14(r194,l0)
      Pushing a8(r227,l0)
      Pushing a16(r148,l0)
      Pushing a1(r145,l0)(potential spill: pri=1538, cost=20000)
      Pushing a13(r138,l0)(potential spill: pri=2727, cost=30000)
      Pushing a4(r140,l0)
      Pushing a3(r133,l0)
      Pushing a2(r142,l0)
      Pushing a0(r141,l0)
      Pushing a6(r135,l0)
      Popping a6(r135,l0)  -- assign reg 4
      Popping a0(r141,l0)  -- assign reg 6
      Popping a2(r142,l0)  -- assign reg 7
      Popping a3(r133,l0)  -- assign reg 8
      Popping a4(r140,l0)  -- assign reg 10
      Popping a13(r138,l0)  -- assign reg 9
      Popping a1(r145,l0)  -- assign reg 11
      Popping a16(r148,l0)  -- assign reg 10
      Popping a8(r227,l0)  -- assign reg 2
      Popping a14(r194,l0)  -- assign reg 9
      Popping a23(r139,l0)  -- assign reg 3
      Popping a22(r143,l0)  -- assign reg 0
      Popping a7(r187,l0)  -- assign reg 9
      Popping a10(r136,l0)  -- assign reg 0
      Popping a30(r220,l0)  -- assign reg 3
      Popping a18(r134,l0)  -- assign reg 9
      Popping a28(r160,l0)  -- assign reg 2
      Popping a5(r214,l0)  -- assign reg 2
      Popping a9(r210,l0)  -- assign reg 4
      Popping a27(r161,l0)  -- assign reg 12
      Popping a11(r209,l0)  -- assign reg 10
      Popping a12(r206,l0)  -- assign reg 10
      Popping a15(r190,l0)  -- assign reg 3
      Popping a17(r186,l0)  -- assign reg 3
      Popping a19(r221,l0)  -- assign reg 8
      Popping a20(r181,l0)  -- assign reg 2
      Popping a21(r182,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a24(r179,l0)  -- assign reg 6
      Popping a25(r175,l0)  -- assign reg 2
      Popping a26(r176,l0)  -- assign reg 6
      Popping a29(r169,l0)  -- assign reg 2
      Popping a31(r219,l0)  -- assign reg 14
Disposition:
    3:r133 l0     8   18:r134 l0     9    6:r135 l0     4   10:r136 l0     0
   13:r138 l0     9   23:r139 l0     3    4:r140 l0    10    0:r141 l0     6
    2:r142 l0     7   22:r143 l0     0    1:r145 l0    11   16:r148 l0    10
   28:r160 l0     2   27:r161 l0    12   29:r169 l0     2   25:r175 l0     2
   26:r176 l0     6   24:r179 l0     6   20:r181 l0     2   21:r182 l0   mem
   17:r186 l0     3    7:r187 l0     9   15:r190 l0     3   14:r194 l0     9
   12:r206 l0    10   11:r209 l0    10    9:r210 l0     4    5:r214 l0     2
   31:r219 l0    14   30:r220 l0     3   19:r221 l0     8    8:r227 l0     2
New iteration of spill/restore move
+++Costs: overall 26000, reg 6000, mem 20000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 2, 3, 13, dead_or_set: 0, 145
insn=9, live_throughout: 3, 13, 145, dead_or_set: 0, 2
insn=5, live_throughout: 0, 13, 145, dead_or_set: 3, 148
insn=10, live_throughout: 13, 145, 148, dead_or_set: 0, 1, 14
insn=11, live_throughout: 13, 145, 148, dead_or_set: 0, 1, 143
insn=342, live_throughout: 13, 143, 145, 148, dead_or_set: 135
insn=16, live_throughout: 13, 143, 145, 148, dead_or_set: 134
insn=28, live_throughout: 13, 134, 143, 145, 148, dead_or_set: 161
insn=18, live_throughout: 13, 134, 143, 145, 148, 161, dead_or_set: 220
insn=20, live_throughout: 13, 134, 143, 145, 148, 161, 220, dead_or_set: 219
insn=19, live_throughout: 13, 134, 143, 145, 148, 161, 219, dead_or_set: 220
insn=27, live_throughout: 13, 134, 143, 145, 148, 161, 219, 220, dead_or_set: 160
insn=22, live_throughout: 13, 134, 143, 145, 148, 160, 161, 220, dead_or_set: 135, 219
insn=39, live_throughout: 13, 134, 135, 143, 145, 148, 160, 161, 220, dead_or_set: 
insn=23, live_throughout: 13, 24, 134, 143, 145, 148, 160, 161, 220, dead_or_set: 135
insn=24, live_throughout: 13, 24, 134, 135, 143, 145, 148, 160, 161, dead_or_set: 135, 220
insn=40, live_throughout: 13, 134, 135, 143, 145, 148, 160, 161, dead_or_set: 
insn=42, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 169
insn=43, live_throughout: 13, 134, 143, 145, 148, dead_or_set: 135, 169
insn=343, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=46, live_throughout: 13, 134, 135, 143, 145, 148, 160, 161, dead_or_set: 
insn=52, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 160, 161
insn=53, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=57, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=58, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=60, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 139
insn=345, live_throughout: 13, 134, 135, 139, 143, 145, 148, dead_or_set: 
insn=63, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=65, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 176
insn=66, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 175, 176
insn=333, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 139, 175
insn=347, live_throughout: 13, 134, 135, 139, 143, 145, 148, dead_or_set: 
insn=80, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=82, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=83, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=85, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 139
insn=349, live_throughout: 13, 134, 135, 139, 143, 145, 148, dead_or_set: 
insn=88, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=92, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 
insn=335, live_throughout: 13, 134, 135, 143, 145, 148, dead_or_set: 139
insn=101, live_throughout: 13, 134, 135, 139, 143, 145, 148, dead_or_set: 
insn=104, live_throughout: 13, 134, 135, 139, 143, 145, 148, dead_or_set: 179
insn=337, live_throughout: 13, 134, 135, 139, 143, 145, 148, dead_or_set: 141, 179
insn=116, live_throughout: 13, 134, 135, 141, 143, 145, 148, dead_or_set: 139
insn=117, live_throughout: 13, 134, 135, 141, 143, 145, 148, dead_or_set: 
insn=119, live_throughout: 13, 134, 135, 141, 145, 148, dead_or_set: 133
insn=351, live_throughout: 13, 133, 134, 135, 141, 145, 148, dead_or_set: 
insn=122, live_throughout: 13, 134, 135, 141, 143, 145, 148, dead_or_set: 
insn=124, live_throughout: 13, 134, 135, 141, 143, 145, 148, dead_or_set: 182
insn=125, live_throughout: 13, 134, 135, 141, 145, 148, dead_or_set: 143, 181, 182
insn=126, live_throughout: 13, 134, 135, 141, 145, 148, dead_or_set: 181, 221
insn=128, live_throughout: 13, 134, 135, 141, 145, 148, dead_or_set: 133, 221
insn=129, live_throughout: 13, 133, 134, 135, 141, 145, 148, dead_or_set: 
insn=133, live_throughout: 13, 133, 135, 141, 145, 148, dead_or_set: 134, 187
insn=131, live_throughout: 13, 133, 135, 141, 145, 148, 187, dead_or_set: 186
insn=135, live_throughout: 13, 133, 135, 141, 145, 148, 187, dead_or_set: 186
insn=136, live_throughout: 13, 133, 135, 141, 145, 148, 187, dead_or_set: 
insn=138, live_throughout: 13, 145, dead_or_set: 133
insn=339, live_throughout: 13, 24, 145, dead_or_set: 141
insn=341, live_throughout: 13, 141, 145, dead_or_set: 142
insn=353, live_throughout: 13, 141, 142, 145, dead_or_set: 
insn=151, live_throughout: 13, 133, 135, 141, 145, 148, 187, dead_or_set: 
insn=153, live_throughout: 13, 133, 135, 141, 145, 187, dead_or_set: 140, 148
insn=377, live_throughout: 13, 133, 135, 140, 141, 145, 187, dead_or_set: 190
insn=158, live_throughout: 13, 133, 135, 140, 141, 145, 187, dead_or_set: 190
insn=159, live_throughout: 13, 133, 135, 140, 141, 145, 187, dead_or_set: 
insn=162, live_throughout: 13, 133, 135, 140, 141, 145, dead_or_set: 187, 194
insn=165, live_throughout: 13, 133, 135, 140, 141, 145, 194, dead_or_set: 0, 1
insn=163, live_throughout: 0, 1, 13, 133, 135, 140, 141, 145, dead_or_set: 138, 194
insn=166, live_throughout: 0, 1, 13, 133, 135, 138, 140, 141, 145, dead_or_set: 2
insn=167, live_throughout: 13, 133, 135, 138, 140, 141, 145, dead_or_set: 0, 1, 2, 14
insn=324, live_throughout: 13, 133, 135, 138, 140, 141, 145, dead_or_set: 0, 142
insn=171, live_throughout: 13, 133, 138, 140, 141, 142, 145, dead_or_set: 0, 1, 135
insn=172, live_throughout: 0, 1, 13, 133, 140, 141, 142, 145, dead_or_set: 2, 138
insn=173, live_throughout: 13, 133, 140, 141, 142, 145, dead_or_set: 0, 1, 2, 14
insn=176, live_throughout: 0, 1, 13, 133, 140, 141, 142, 145, dead_or_set: 
insn=328, live_throughout: 0, 1, 13, 24, 133, 140, 141, 142, 145, dead_or_set: 227
insn=329, live_throughout: 1, 13, 24, 133, 140, 141, 142, 145, dead_or_set: 0, 227
insn=330, live_throughout: 13, 24, 133, 140, 141, 142, 145, 227, dead_or_set: 1, 227
insn=177, live_throughout: 13, 133, 140, 141, 142, 145, 227, dead_or_set: 
insn=180, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=181, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=183, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 136
insn=355, live_throughout: 13, 133, 136, 141, 142, 145, 227, dead_or_set: 
insn=186, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=188, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 136
insn=357, live_throughout: 13, 133, 136, 141, 142, 145, 227, dead_or_set: 
insn=191, live_throughout: 13, 133, 140, 141, 142, 145, 227, dead_or_set: 
insn=193, live_throughout: 13, 133, 140, 141, 142, 145, 227, dead_or_set: 
insn=194, live_throughout: 13, 133, 140, 141, 142, 145, 227, dead_or_set: 
insn=200, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 140, 206
insn=204, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 206, 209
insn=205, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 209
insn=206, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=208, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 136
insn=359, live_throughout: 13, 133, 136, 141, 142, 145, 227, dead_or_set: 
insn=211, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=213, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 136
insn=214, live_throughout: 13, 133, 136, 141, 142, 145, 227, dead_or_set: 
insn=216, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 136, 210
insn=217, live_throughout: 13, 133, 141, 142, 145, 210, 227, dead_or_set: 
insn=218, live_throughout: 13, 24, 133, 141, 142, 145, 210, 227, dead_or_set: 
insn=220, live_throughout: 13, 133, 141, 142, 145, 210, 227, dead_or_set: 
insn=221, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 210
insn=222, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=323, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=229, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=230, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=232, live_throughout: 13, 133, 141, 145, 227, dead_or_set: 142
insn=361, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=235, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=237, live_throughout: 13, 133, 142, 145, 227, dead_or_set: 141
insn=363, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=240, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=242, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=243, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=244, live_throughout: 13, 133, 141, 142, 145, 227, dead_or_set: 
insn=246, live_throughout: 13, 141, 142, 145, 227, dead_or_set: 133
insn=247, live_throughout: 13, 141, 142, 145, 227, dead_or_set: 
insn=249, live_throughout: 13, 145, dead_or_set: 141
insn=250, live_throughout: 13, 141, 145, dead_or_set: 142
insn=365, live_throughout: 13, 141, 142, 145, dead_or_set: 
insn=253, live_throughout: 13, 141, 142, 145, 227, dead_or_set: 
insn=257, live_throughout: 13, 141, 142, 145, dead_or_set: 227
insn=258, live_throughout: 13, 141, 142, 145, dead_or_set: 
insn=260, live_throughout: 13, 142, 145, dead_or_set: 141
insn=367, live_throughout: 13, 141, 142, 145, dead_or_set: 
insn=263, live_throughout: 13, 133, 135, 140, 141, 145, 187, dead_or_set: 
insn=268, live_throughout: 13, 133, 140, 141, 145, dead_or_set: 135, 187, 214
insn=271, live_throughout: 13, 133, 140, 141, 145, dead_or_set: 214
insn=272, live_throughout: 13, 133, 140, 141, 145, dead_or_set: 
insn=275, live_throughout: 13, 133, 140, 141, 145, dead_or_set: 
insn=274, live_throughout: 13, 24, 133, 140, 145, dead_or_set: 141
insn=276, live_throughout: 13, 133, 140, 141, 145, dead_or_set: 
insn=278, live_throughout: 13, 141, 145, dead_or_set: 133
insn=279, live_throughout: 13, 141, 145, dead_or_set: 
insn=281, live_throughout: 13, 141, 145, dead_or_set: 142
insn=369, live_throughout: 13, 141, 142, 145, dead_or_set: 
insn=284, live_throughout: 13, 133, 140, 141, 145, dead_or_set: 
insn=286, live_throughout: 13, 133, 141, 145, dead_or_set: 140
insn=287, live_throughout: 13, 133, 141, 145, dead_or_set: 
insn=289, live_throughout: 13, 141, 145, dead_or_set: 133
insn=290, live_throughout: 13, 141, 145, dead_or_set: 
insn=292, live_throughout: 13, 145, dead_or_set: 141
insn=293, live_throughout: 13, 141, 145, dead_or_set: 142
insn=371, live_throughout: 13, 141, 142, 145, dead_or_set: 
insn=296, live_throughout: 13, 141, 145, dead_or_set: 
insn=298, live_throughout: 13, 141, 145, dead_or_set: 142
insn=299, live_throughout: 13, 141, 142, 145, dead_or_set: 
insn=301, live_throughout: 13, 141, 145, dead_or_set: 0, 142
insn=302, live_throughout: 0, 13, 141, dead_or_set: 1, 145
insn=303, live_throughout: 13, 141, dead_or_set: 0, 1, 14
insn=308, live_throughout: 13, 14, dead_or_set: 0, 141
insn=314, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 161: (insn_list:REG_DEP_TRUE 28 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 42 (nil))
init_insns for 176: (insn_list:REG_DEP_TRUE 65 (nil))
init_insns for 182: (insn_list:REG_DEP_TRUE 124 (nil))
init_insns for 186: (insn_list:REG_DEP_TRUE 131 (nil))
init_insns for 190: (insn_list:REG_DEP_TRUE 377 (nil))
changing reg in insn 128
changing reg in insn 119
changing reg in insn 204
changing reg in insn 289
changing reg in insn 278
changing reg in insn 246
changing reg in insn 138
changing reg in insn 16
changing reg in insn 82
changing reg in insn 342
changing reg in insn 43
changing reg in insn 268
changing reg in insn 165
changing reg in insn 165
changing reg in insn 23
changing reg in insn 171
changing reg in insn 66
changing reg in insn 43
changing reg in insn 24
changing reg in insn 22
changing reg in insn 66
changing reg in insn 43
changing reg in insn 213
changing reg in insn 208
changing reg in insn 188
changing reg in insn 183
changing reg in insn 216
changing reg in insn 163
changing reg in insn 172
changing reg in insn 166
changing reg in insn 333
changing reg in insn 335
changing reg in insn 85
changing reg in insn 60
changing reg in insn 116
changing reg in insn 104
changing reg in insn 104
changing reg in insn 153
changing reg in insn 200
changing reg in insn 286
changing reg in insn 275
changing reg in insn 193
changing reg in insn 176
changing reg in insn 339
changing reg in insn 337
changing reg in insn 292
changing reg in insn 274
changing reg in insn 260
changing reg in insn 249
changing reg in insn 237
changing reg in insn 308
changing reg in insn 292
changing reg in insn 274
changing reg in insn 260
changing reg in insn 249
changing reg in insn 237
changing reg in insn 341
changing reg in insn 324
changing reg in insn 298
changing reg in insn 293
changing reg in insn 281
changing reg in insn 250
changing reg in insn 232
changing reg in insn 180
changing reg in insn 301
changing reg in insn 242
changing reg in insn 232
changing reg in insn 229
changing reg in insn 11
changing reg in insn 125
changing reg in insn 125
changing reg in insn 2
changing reg in insn 302
changing reg in insn 5
changing reg in insn 153
changing reg in insn 27
changing reg in insn 39
changing reg in insn 39
changing reg in insn 52
changing reg in insn 52
changing reg in insn 28
changing reg in insn 39
changing reg in insn 52
changing reg in insn 42
changing reg in insn 43
changing reg in insn 66
changing reg in insn 65
changing reg in insn 66
changing reg in insn 104
changing reg in insn 337
changing reg in insn 125
changing reg in insn 131
changing reg in insn 135
changing reg in insn 133
changing reg in insn 268
changing reg in insn 162
changing reg in insn 158
changing reg in insn 135
changing reg in insn 163
changing reg in insn 158
changing reg in insn 135
changing reg in insn 377
changing reg in insn 158
changing reg in insn 162
changing reg in insn 163
changing reg in insn 200
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 216
changing reg in insn 268
changing reg in insn 20
changing reg in insn 22
changing reg in insn 19
changing reg in insn 18
changing reg in insn 23
changing reg in insn 19
changing reg in insn 24
changing reg in insn 126
changing reg in insn 328
changing reg in insn 330
changing reg in insn 329
changing reg in insn 216
Spilling for insn 57.
Using reg 3 for reload 0
Spilling for insn 92.
Using reg 3 for reload 0
Spilling for insn 125.
Using reg 2 for reload 0
Spilling for insn 165.
Spilling for insn 216.
Spilling for insn 257.
Using reg 1 for reload 0
Spilling for insn 271.
Using reg 1 for reload 0
      Spill 181(a20), cost=20000
      Spilled regs 181
        Try assign 182(a21), cost=20000
changing reg in insn 125
      Assigning 181(freq=2000) a new slot 0
 Register 181 now on stack.

Spilling for insn 57.
Using reg 3 for reload 0
Spilling for insn 92.
Using reg 3 for reload 0
Spilling for insn 125.
Using reg 2 for reload 0
Using reg 10 for reload 1
Spilling for insn 126.
Using reg 3 for reload 0
Spilling for insn 165.
Spilling for insn 216.
Spilling for insn 257.
Using reg 1 for reload 0
Spilling for insn 271.
Using reg 1 for reload 0
      Spill 145(a1), cost=20000
      Spill 148(a16), cost=20000
      Spilled regs 145 148
        Try assign 181(a20), cost=20000
        Try assign 145(a1), cost=20000
        Try assign 148(a16), cost=20000
changing reg in insn 2
changing reg in insn 302
      Assigning 145(freq=2000) a new slot 1
 Register 145 now on stack.

changing reg in insn 5
changing reg in insn 153
      Assigning 148(freq=2000) a new slot 2
 Register 148 now on stack.

Spilling for insn 2.
Spilling for insn 5.
Spilling for insn 57.
Using reg 3 for reload 0
Spilling for insn 92.
Using reg 3 for reload 0
Spilling for insn 125.
Using reg 2 for reload 0
Using reg 10 for reload 1
Spilling for insn 126.
Using reg 3 for reload 0
Spilling for insn 153.
Using reg 3 for reload 0
Spilling for insn 165.
Spilling for insn 216.
Spilling for insn 257.
Using reg 1 for reload 0
Spilling for insn 271.
Using reg 1 for reload 0
deleting insn with uid = 124.

Reloads for insn # 2
Reload 0: reload_out (SI) = (reg/v:SI 145 [ sd ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 145 [ sd ])

Reloads for insn # 5
Reload 0: reload_out (SI) = (reg/v:SI 148 [ fpscr ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 148 [ fpscr ])

Reloads for insn # 57
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 92
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 125
Reload 0: reload_out (DI) = (reg:DI 181)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 181)
	reload_reg_rtx: (reg:DI 10 sl)
Reload 1: reload_in (DI) = (const_int -9223372036854775808 [0x8000000000000000])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 182)
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 126
Reload 0: reload_in (SI) = (subreg:SI (reg:DI 181) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg:DI 181) 4)
	reload_reg_rtx: (reg:SI 11 fp)

Reloads for insn # 153
Reload 0: reload_in (SI) = (reg/v:SI 148 [ fpscr ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/v:SI 148 [ fpscr ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 165
Reload 0: reload_in (DI) = (reg/v:DI 4 r4 [orig:135 significand ] [135])
	reload_out (DI) = (reg:DI 0 r0)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 4 r4 [orig:135 significand ] [135])
	reload_out_reg: (reg:DI 0 r0)
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 216
Reload 0: reload_in (DI) = (reg/v:DI 0 r0 [orig:136 incr ] [136])
	reload_out (DI) = (reg:DI 4 r4 [210])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 0 r0 [orig:136 incr ] [136])
	reload_out_reg: (reg:DI 4 r4 [210])
	reload_reg_rtx: (reg:DI 4 r4 [210])

Reloads for insn # 257
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 10 sl)

Reloads for insn # 271
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 11 fp)
deleting insn with uid = 11.
deleting insn with uid = 328.
+++Overall after reload 86000


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 167.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 303.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 81 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 88 (    2)


vfp_double_ftoui

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,14u,1d} r1={13d,9u,1d} r2={14d,12u,1d} r3={20d,17u} r4={6d,11u,2d} r5={5d,10u,2d} r6={9d,8u} r7={8d,6u} r8={3d,6u} r9={4d,10u,3d} r10={5d,8u} r11={2d,2u} r12={6d,2u} r13={1d,53u} r14={6d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={34d,26u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 797{591d,196u,10e} in 135{131 regular + 4 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 6 14 2 NOTE_INSN_DELETED)

(note 14 12 15 2 NOTE_INSN_DELETED)

(note 15 14 17 2 NOTE_INSN_DELETED)

(note 17 15 21 2 NOTE_INSN_DELETED)

(note 21 17 25 2 NOTE_INSN_DELETED)

(note 25 21 26 2 NOTE_INSN_DELETED)

(note 26 25 29 2 NOTE_INSN_DELETED)

(note 29 26 30 2 NOTE_INSN_DELETED)

(note 30 29 33 2 NOTE_INSN_DELETED)

(note 33 30 34 2 NOTE_INSN_DELETED)

(note 34 33 36 2 NOTE_INSN_DELETED)

(note 36 34 37 2 NOTE_INSN_DELETED)

(note 37 36 38 2 NOTE_INSN_DELETED)

(note 38 37 2 2 NOTE_INSN_DELETED)

(insn 2 38 9 2 arch/arm/vfp/vfpdouble.c:507 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-12 S4 A32])
        (reg:SI 0 r0 [ sd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 5 2 arch/arm/vfp/vfpdouble.c:513 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 9 10 2 arch/arm/vfp/vfpdouble.c:507 (set (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-16 S4 A32])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 342 2 arch/arm/vfp/vfpdouble.c:513 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 342 10 16 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 4 r4 [orig:135 significand ] [135])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 16 342 28 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 9 r9 [orig:134 D.6071 ] [134])
        (zero_extract:SI (reg:SI 1 r1 [ D.4518+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 28 16 18 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 12 ip [161])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 18 28 20 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [orig:220+4 ] [220])
        (ashift:SI (reg:SI 1 r1 [ D.4518+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 20 18 19 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [219])
        (ashift:SI (reg:SI 0 r0 [orig:143 D.4518 ] [143])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 19 20 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [orig:220+4 ] [220])
        (ior:SI (lshiftrt:SI (reg:SI 0 r0 [orig:143 D.4518 ] [143])
                (const_int 20 [0x14]))
            (reg:SI 3 r3 [orig:220+4 ] [220]))) 270 {*arith_shiftsi} (nil))

(insn 27 19 22 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 2 r2 [orig:160 D.6071 ] [160])
        (sign_extend:SI (reg:HI 9 r9 [orig:134 D.6071 ] [134]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 22 27 39 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 4 r4 [orig:135 significand ] [135])
        (lshiftrt:SI (reg:SI 14 lr [219])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 39 22 23 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 2 r2 [orig:160 D.6071 ] [160])
                    (reg:SI 12 ip [161]))
                (ne:SI (reg:SI 2 r2 [orig:160 D.6071 ] [160])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 23 39 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 4 r4 [orig:135 significand ] [135])
        (ior:SI (ashift:SI (reg:SI 3 r3 [orig:220+4 ] [220])
                (const_int 30 [0x1e]))
            (reg:SI 4 r4 [orig:135 significand ] [135]))) 270 {*arith_shiftsi} (nil))

(insn 24 23 40 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 5 r5 [ significand+4 ])
        (lshiftrt:SI (reg:SI 3 r3 [orig:220+4 ] [220])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 40 24 41 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 41 40 42 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 2 r2 [169])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 43 42 343 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 4 r4 [orig:135 significand ] [135])
        (ior:DI (reg/v:DI 4 r4 [orig:135 significand ] [135])
            (reg:DI 2 r2 [169]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 4 r4 [orig:135 significand ] [135])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))

(jump_insn 343 43 344 3 (set (pc)
        (label_ref 80)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  8 [100.0%] 

(barrier 344 343 46)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 9 [r9] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
(code_label 46 344 47 4 343 "" [1 uses])

(note 47 46 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 47 53 4 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:160 D.6071 ] [160])
            (reg:SI 12 ip [161]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 2 r2 [orig:160 D.6071 ] [160])
            (const_int 2047 [0x7ff]))
        (nil)))

(jump_insn 53 52 54 4 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4400 [0x1130])
        (nil)))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  5 [56.0%]  (fallthru)
;; Succ edge  8 [44.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 2 [r2]

;; Pred edge  4 [56.0%]  (fallthru)
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 55 54 56 5 NOTE_INSN_DELETED)

(note 56 55 57 5 NOTE_INSN_DELETED)

(insn 57 56 58 5 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 4 r4 [orig:135 significand ] [135])
                        (reg:SI 5 r5 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 2 r2))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 58 57 59 5 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 345 6 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 3 r3 [orig:139 tm ] [139])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 345 60 346 6 (set (pc)
        (label_ref 101)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 346 345 63)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 6 [r6] 7 [r7]
;; live  kill	 24 [cc]

;; Pred edge  5 [50.0%] 
(code_label 63 346 64 7 345 "" [1 uses])

(note 64 63 67 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 67 64 68 7 NOTE_INSN_DELETED)

(note 68 67 69 7 NOTE_INSN_DELETED)

(note 69 68 65 7 NOTE_INSN_DELETED)

(insn 65 69 66 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 6 r6 [176])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 66 65 333 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 2 r2 [175])
        (and:DI (reg/v:DI 4 r4 [orig:135 significand ] [135])
            (reg:DI 6 r6 [176]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 4 r4 [orig:135 significand ] [135])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 333 66 347 7 arch/arm/vfp/vfp.h:336 (parallel [
            (set (reg/v:SI 3 r3 [orig:139 tm ] [139])
                (if_then_else:SI (ne (reg:SI 3 r3 [+4 ])
                        (const_int 0 [0x0]))
                    (const_int 16 [0x10])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(jump_insn 347 333 348 7 (set (pc)
        (label_ref 101)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 348 347 80)

;; Start of basic block ( 4 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [44.0%] 
;; Pred edge  3 [100.0%] 
(code_label 80 348 81 8 344 "" [2 uses])

(note 81 80 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 82 81 83 8 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:134 D.6071 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 83 82 84 8 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 84 83 85 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 349 9 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 3 r3 [orig:139 tm ] [139])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 349 85 350 9 (set (pc)
        (label_ref 101)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 350 349 88)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 3 [r3]

;; Pred edge  8 [50.0%] 
(code_label 88 350 89 10 348 "" [1 uses])

(note 89 88 90 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 90 89 91 10 NOTE_INSN_DELETED)

(note 91 90 92 10 NOTE_INSN_DELETED)

(insn 92 91 335 10 arch/arm/vfp/vfp.h:338 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 4 r4 [orig:135 significand ] [135])
                        (reg:SI 5 r5 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 3 r3))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 335 92 101 10 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 3 r3 [orig:139 tm ] [139])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 7 6 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 101 335 102 11 346 "" [3 uses])

(note 102 101 103 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 103 102 115 11 NOTE_INSN_DELETED)

(note 115 103 104 11 NOTE_INSN_DELETED)

(insn 104 115 337 11 arch/arm/vfp/vfpdouble.c:519 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 3 r3 [orig:139 tm ] [139])
                        (const_int 4 [0x4]))
                    (const_int 0 [0x0])))
            (set (reg:SI 6 r6 [179])
                (and:SI (reg/v:SI 3 r3 [orig:139 tm ] [139])
                    (const_int 4 [0x4])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 337 104 116 11 arch/arm/vfp/vfpdouble.c:509 (set (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 6 r6 [179])
            (const_int 128 [0x80]))) 240 {*movsicc_insn} (nil))

(insn 116 337 117 11 arch/arm/vfp/vfpdouble.c:522 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:139 tm ] [139])
                (const_int 1 [0x1])
                (const_int 4 [0x4]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 117 116 118 11 arch/arm/vfp/vfpdouble.c:522 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 122)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]


;; Succ edge  12 [50.0%]  (fallthru)
;; Succ edge  13 [50.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; live  gen 	 8 [r8]
;; live  kill	

;; Pred edge  11 [50.0%]  (fallthru)
(note 118 117 119 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 119 118 351 12 arch/arm/vfp/vfpdouble.c:523 (set (reg:SI 8 r8 [orig:133 vdm$sign ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 351 119 352 12 (set (pc)
        (label_ref 129)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 352 351 122)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 8 [r8] 10 [sl] 11 [fp]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 8 [r8] 10 [sl] 11 [fp]
;; live  kill	

;; Pred edge  11 [50.0%] 
(code_label 122 352 123 13 352 "" [1 uses])

(note 123 122 124 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 124 123 380 13 NOTE_INSN_DELETED)

(insn 380 124 125 13 arch/arm/vfp/vfp.h:304 (set (reg:DI 2 r2)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 125 380 379 13 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl)
        (and:DI (reg:DI 0 r0 [orig:143 D.4518 ] [143])
            (reg:DI 2 r2))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 0 r0 [orig:143 D.4518 ] [143])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 379 125 126 13 arch/arm/vfp/vfp.h:304 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 %sfp+-8 S8 A64])
        (reg:DI 10 sl)) 163 {*arm_movdi} (nil))

(insn 126 379 128 13 arch/arm/vfp/vfp.h:304 (set (reg:SI 8 r8 [221])
        (lshiftrt:SI (reg:SI 11 fp)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 128 126 129 13 arch/arm/vfp/vfp.h:304 (set (reg:SI 8 r8 [orig:133 vdm$sign ] [133])
        (zero_extend:SI (reg:HI 8 r8 [221]))) 144 {*arm_zero_extendhisi2_v6} (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 9 [r9] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 129 128 130 14 353 "" [1 uses])

(note 130 129 133 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 133 130 131 14 arch/arm/vfp/vfpdouble.c:525 (set (reg:SI 9 r9 [orig:187 D.6071 ] [187])
        (sign_extend:SI (reg:HI 9 r9 [orig:134 D.6071 ] [134]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 131 133 135 14 arch/arm/vfp/vfpdouble.c:525 (set (reg:SI 3 r3 [186])
        (const_int 1054 [0x41e])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1054 [0x41e])
        (nil)))

(insn 135 131 136 14 arch/arm/vfp/vfpdouble.c:525 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:187 D.6071 ] [187])
            (reg:SI 3 r3 [186]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 9 r9 [orig:187 D.6071 ] [187])
            (const_int 1054 [0x41e]))
        (nil)))

(jump_insn 136 135 137 14 arch/arm/vfp/vfpdouble.c:525 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 151)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 8 [r8] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  14 [50.0%]  (fallthru)
(note 137 136 138 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 138 137 339 15 arch/arm/vfp/vfpdouble.c:526 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 vdm$sign ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 339 138 341 15 arch/arm/vfp/vfpdouble.c:527 (set (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 341 339 353 15 arch/arm/vfp/vfpdouble.c:527 (set (reg/v:SI 7 r7 [orig:142 d ] [142])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 0 [0x0])
            (const_int -1 [0xffffffffffffffff]))) 240 {*movsicc_insn} (nil))

(jump_insn 353 341 354 15 (set (pc)
        (label_ref 299)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 354 353 151)

;; Start of basic block ( 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  14 [50.0%] 
(code_label 151 354 152 16 354 "" [1 uses])

(note 152 151 381 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 381 152 153 16 arch/arm/vfp/vfpdouble.c:510 (set (reg:SI 3 r3)
        (mem/c:SI (reg/f:SI 13 sp) [0 %sfp+-16 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 153 381 377 16 arch/arm/vfp/vfpdouble.c:510 (set (reg/v:SI 10 sl [orig:140 rmode ] [140])
        (and:SI (reg:SI 3 r3)
            (const_int 12582912 [0xc00000]))) 67 {*arm_andsi3_insn} (nil))

(insn 377 153 158 16 arch/arm/vfp/vfpdouble.c:528 (set (reg:SI 3 r3 [190])
        (const_int 1021 [0x3fd])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1021 [0x3fd])
        (nil)))

(insn 158 377 159 16 arch/arm/vfp/vfpdouble.c:528 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 9 r9 [orig:187 D.6071 ] [187])
            (reg:SI 3 r3 [190]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 9 r9 [orig:187 D.6071 ] [187])
            (const_int 1021 [0x3fd]))
        (nil)))

(jump_insn 159 158 160 16 arch/arm/vfp/vfpdouble.c:528 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 263)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16 -> ( 17 36)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  36 [50.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 9 [r9] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  16 [50.0%]  (fallthru)
(note 160 159 164 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 164 160 170 17 NOTE_INSN_DELETED)

(note 170 164 326 17 NOTE_INSN_DELETED)

(note 326 170 327 17 NOTE_INSN_DELETED)

(note 327 326 162 17 NOTE_INSN_DELETED)

(insn 162 327 382 17 arch/arm/vfp/vfpdouble.c:529 (set (reg:SI 9 r9 [194])
        (minus:SI (const_int 1072 [0x430])
            (reg:SI 9 r9 [orig:187 D.6071 ] [187]))) 28 {*arm_subsi3_insn} (nil))

(insn 382 162 165 17 arch/arm/vfp/vfpdouble.c:535 (set (reg:DI 0 r0)
        (reg/v:DI 4 r4 [orig:135 significand ] [135])) 163 {*arm_movdi} (nil))

(insn 165 382 163 17 arch/arm/vfp/vfpdouble.c:535 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (reg:DI 0 r0)
                    (reg/v:DI 4 r4 [orig:135 significand ] [135])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 163 165 166 17 arch/arm/vfp/vfpdouble.c:529 (set (reg/v:SI 9 r9 [orig:138 shift ] [138])
        (plus:SI (reg:SI 9 r9 [194])
            (const_int 14 [0xe]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (minus:SI (const_int 1086 [0x43e])
            (reg:SI 9 r9 [orig:187 D.6071 ] [187]))
        (nil)))

(insn 166 163 167 17 arch/arm/vfp/vfpdouble.c:535 (set (reg:SI 2 r2)
        (reg/v:SI 9 r9 [orig:138 shift ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 167 166 324 17 arch/arm/vfp/vfpdouble.c:535 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 324 167 171 17 arch/arm/vfp/vfpdouble.c:535 (set (reg/v:SI 7 r7 [orig:142 d ] [142])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 171 324 172 17 arch/arm/vfp/vfpdouble.c:536 (set (reg:DI 0 r0)
        (reg/v:DI 4 r4 [orig:135 significand ] [135])) 163 {*arm_movdi} (nil))

(insn 172 171 173 17 arch/arm/vfp/vfpdouble.c:536 (set (reg:SI 2 r2)
        (minus:SI (const_int 65 [0x41])
            (reg/v:SI 9 r9 [orig:138 shift ] [138]))) 28 {*arm_subsi3_insn} (nil))

(call_insn/u 173 172 176 17 arch/arm/vfp/vfpdouble.c:536 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 176 173 329 17 arch/arm/vfp/vfpdouble.c:538 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:140 rmode ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 329 176 330 17 arch/arm/vfp/vfpdouble.c:536 (set (reg:SI 2 r2 [orig:227 rem ] [227])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 330 329 177 17 arch/arm/vfp/vfpdouble.c:536 (set (reg:SI 3 r3 [ rem+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 177 330 178 17 arch/arm/vfp/vfpdouble.c:538 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 191)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 17 -> ( 18 21)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  18 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  17 [50.0%]  (fallthru)
(note 178 177 179 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 179 178 180 18 NOTE_INSN_DELETED)

(insn 180 179 181 18 arch/arm/vfp/vfpdouble.c:540 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 7 r7 [orig:142 d ] [142])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 181 180 182 18 arch/arm/vfp/vfpdouble.c:540 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 186)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  20 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  18 [50.0%]  (fallthru)
(note 182 181 183 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 183 182 355 19 arch/arm/vfp/vfpdouble.c:541 (set (reg/v:DI 0 r0 [orig:136 incr ] [136])
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 9223372036854775807 [0x7fffffffffffffff])
        (nil)))

(jump_insn 355 183 356 19 (set (pc)
        (label_ref 214)) 242 {*arm_jump} (nil))
;; End of basic block 19 -> ( 25)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  25 [100.0%] 

(barrier 356 355 186)

;; Start of basic block ( 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  18 [50.0%] 
(code_label 186 356 187 20 359 "" [1 uses])

(note 187 186 188 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 188 187 357 20 arch/arm/vfp/vfpdouble.c:539 (set (reg/v:DI 0 r0 [orig:136 incr ] [136])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(jump_insn 357 188 358 20 (set (pc)
        (label_ref 214)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 25)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  25 [100.0%] 

(barrier 358 357 191)

;; Start of basic block ( 17) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  17 [50.0%] 
(code_label 191 358 192 21 358 "" [1 uses])

(note 192 191 193 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 193 192 194 21 arch/arm/vfp/vfpdouble.c:542 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:140 rmode ] [140])
            (const_int 12582912 [0xc00000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 194 193 195 21 arch/arm/vfp/vfpdouble.c:542 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 21 -> ( 24 22)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  24 [28.0%] 
;; Succ edge  22 [72.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 10 [sl] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  21 [72.0%]  (fallthru)
(note 195 194 196 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 196 195 197 22 NOTE_INSN_DELETED)

(note 197 196 199 22 NOTE_INSN_DELETED)

(note 199 197 202 22 NOTE_INSN_DELETED)

(note 202 199 203 22 NOTE_INSN_DELETED)

(note 203 202 200 22 NOTE_INSN_DELETED)

(insn 200 203 204 22 arch/arm/vfp/vfpdouble.c:544 (parallel [
            (set (reg:SI 10 sl [206])
                (eq:SI (reg/v:SI 10 sl [orig:140 rmode ] [140])
                    (const_int 4194304 [0x400000])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 204 200 205 22 arch/arm/vfp/vfpdouble.c:544 (parallel [
            (set (reg:SI 10 sl [209])
                (xor:SI (ne:SI (reg:SI 8 r8 [orig:133 vdm$sign ] [133])
                        (const_int 0 [0x0]))
                    (reg:SI 10 sl [206])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 205 204 206 22 arch/arm/vfp/vfpdouble.c:544 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 10 sl [209])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 206 205 207 22 arch/arm/vfp/vfpdouble.c:544 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 22 -> ( 23 24)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  23 [50.0%]  (fallthru)
;; Succ edge  24 [50.0%] 

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  22 [50.0%]  (fallthru)
(note 207 206 208 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 208 207 359 23 arch/arm/vfp/vfpdouble.c:545 (set (reg/v:DI 0 r0 [orig:136 incr ] [136])
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(jump_insn 359 208 360 23 (set (pc)
        (label_ref 214)) 242 {*arm_jump} (nil))
;; End of basic block 23 -> ( 25)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  25 [100.0%] 

(barrier 360 359 211)

;; Start of basic block ( 22 21) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  22 [50.0%] 
;; Pred edge  21 [28.0%] 
(code_label 211 360 212 24 361 "" [2 uses])

(note 212 211 213 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 213 212 214 24 arch/arm/vfp/vfpdouble.c:543 (set (reg/v:DI 0 r0 [orig:136 incr ] [136])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 24 -> ( 25)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  25 [100.0%]  (fallthru)

;; Start of basic block ( 24 20 19 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  24 [100.0%]  (fallthru)
;; Pred edge  20 [100.0%] 
;; Pred edge  19 [100.0%] 
;; Pred edge  23 [100.0%] 
(code_label 214 213 215 25 360 "" [3 uses])

(note 215 214 383 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 383 215 216 25 arch/arm/vfp/vfpdouble.c:548 (set (reg:DI 4 r4 [210])
        (reg/v:DI 0 r0 [orig:136 incr ] [136])) 163 {*arm_movdi} (nil))

(insn 216 383 217 25 arch/arm/vfp/vfpdouble.c:548 (parallel [
            (set (reg:DI 4 r4 [210])
                (plus:DI (reg:DI 4 r4 [210])
                    (reg:DI 2 r2 [orig:227 rem ] [227])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 217 216 218 25 arch/arm/vfp/vfpdouble.c:548 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ rem+4 ])
            (reg:SI 5 r5 [+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 218 217 316 25 arch/arm/vfp/vfpdouble.c:548 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 323)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 25 -> ( 28 26)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]


;; Succ edge  28 [50.0%] 
;; Succ edge  26 [50.0%]  (fallthru)

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  25 [50.0%]  (fallthru)
(note 316 218 220 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(jump_insn 220 316 317 26 arch/arm/vfp/vfpdouble.c:548 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 240)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 26 -> ( 31 27)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  31 [71.0%] 
;; Succ edge  27 [29.0%]  (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [29.0%]  (fallthru)
(note 317 220 221 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 221 317 222 27 arch/arm/vfp/vfpdouble.c:548 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:227 rem ] [227])
            (reg:SI 4 r4 [210]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 222 221 323 27 arch/arm/vfp/vfpdouble.c:548 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 240)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 27 -> ( 28 31)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  28 [50.0%]  (fallthru)
;; Succ edge  31 [50.0%] 

;; Start of basic block ( 27 25) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  27 [50.0%]  (fallthru)
;; Pred edge  25 [50.0%] 
(code_label 323 222 228 28 370 "" [1 uses])

(note 228 323 229 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 229 228 230 28 arch/arm/vfp/vfpdouble.c:549 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:142 d ] [142])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 230 229 231 28 arch/arm/vfp/vfpdouble.c:549 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 235)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  29 [72.0%]  (fallthru)
;; Succ edge  30 [28.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  28 [72.0%]  (fallthru)
(note 231 230 232 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 232 231 361 29 arch/arm/vfp/vfpdouble.c:550 (set (reg/v:SI 7 r7 [orig:142 d ] [142])
        (plus:SI (reg/v:SI 7 r7 [orig:142 d ] [142])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 361 232 362 29 (set (pc)
        (label_ref 244)) 242 {*arm_jump} (nil))
;; End of basic block 29 -> ( 32)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  32 [100.0%] 

(barrier 362 361 235)

;; Start of basic block ( 28) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  28 [28.0%] 
(code_label 235 362 236 30 364 "" [1 uses])

(note 236 235 237 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 237 236 363 30 arch/arm/vfp/vfpdouble.c:552 (set (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(jump_insn 363 237 364 30 (set (pc)
        (label_ref 244)) 242 {*arm_jump} (nil))
;; End of basic block 30 -> ( 32)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  32 [100.0%] 

(barrier 364 363 240)

;; Start of basic block ( 26 27) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [71.0%] 
;; Pred edge  27 [50.0%] 
(code_label 240 364 241 31 362 "" [2 uses])

(note 241 240 242 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 242 241 243 31 arch/arm/vfp/vfpdouble.c:555 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:142 d ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 243 242 244 31 arch/arm/vfp/vfpdouble.c:555 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 253)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
        (nil)))
;; End of basic block 31 -> ( 32 34)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  32 (fallthru)
;; Succ edge  34 [100.0%] 

;; Start of basic block ( 31 29 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  31 (fallthru)
;; Pred edge  29 [100.0%] 
;; Pred edge  30 [100.0%] 
(code_label 244 243 245 32 365 "" [2 uses])

(note 245 244 246 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 246 245 247 32 arch/arm/vfp/vfpdouble.c:555 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 vdm$sign ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 247 246 248 32 arch/arm/vfp/vfpdouble.c:555 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 253)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 32 -> ( 33 34)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  33 [39.0%]  (fallthru)
;; Succ edge  34 [61.0%] 

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  32 [39.0%]  (fallthru)
(note 248 247 249 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 249 248 250 33 arch/arm/vfp/vfpdouble.c:557 (set (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 250 249 365 33 arch/arm/vfp/vfpdouble.c:556 (set (reg/v:SI 7 r7 [orig:142 d ] [142])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 365 250 366 33 arch/arm/vfp/vfpdouble.c:555 discrim 2 (set (pc)
        (label_ref 299)) 242 {*arm_jump} (nil))
;; End of basic block 33 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 366 365 253)

;; Start of basic block ( 31 32) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 10 [sl]

;; Pred edge  31 [100.0%] 
;; Pred edge  32 [61.0%] 
(code_label 253 366 254 34 366 "" [2 uses])

(note 254 253 255 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(note 255 254 256 34 NOTE_INSN_DELETED)

(note 256 255 257 34 NOTE_INSN_DELETED)

(insn 257 256 258 34 arch/arm/vfp/vfpdouble.c:558 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:227 rem ] [227])
                        (reg:SI 3 r3 [ rem+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 10 sl))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 258 257 259 34 arch/arm/vfp/vfpdouble.c:558 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 299)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 34 -> ( 35 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  35 [50.0%]  (fallthru)
;; Succ edge  44 [50.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  34 [50.0%]  (fallthru)
(note 259 258 260 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 260 259 367 35 arch/arm/vfp/vfpdouble.c:559 (set (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))

(jump_insn 367 260 368 35 (set (pc)
        (label_ref 299)) 242 {*arm_jump} (nil))
;; End of basic block 35 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 368 367 263)

;; Start of basic block ( 16) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 9 [r9] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 11 [fp] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 11 [fp]

;; Pred edge  16 [50.0%] 
(code_label 263 368 264 36 357 "" [1 uses])

(note 264 263 267 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(note 267 264 269 36 NOTE_INSN_DELETED)

(note 269 267 270 36 NOTE_INSN_DELETED)

(note 270 269 268 36 NOTE_INSN_DELETED)

(insn 268 270 271 36 arch/arm/vfp/vfpdouble.c:562 (set (reg:DI 2 r2 [214])
        (ior:DI (sign_extend:DI (reg:SI 9 r9 [orig:187 D.6071 ] [187]))
            (reg/v:DI 4 r4 [orig:135 significand ] [135]))) 88 {*iordi_sesidi_di} (nil))

(insn 271 268 272 36 arch/arm/vfp/vfpdouble.c:562 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [214])
                        (reg:SI 3 r3 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 11 fp))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 272 271 273 36 arch/arm/vfp/vfpdouble.c:562 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 296)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 36 -> ( 37 43)
;; lr  out 	 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  37 [61.0%]  (fallthru)
;; Succ edge  43 [39.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  36 [61.0%]  (fallthru)
(note 273 272 275 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 275 273 274 37 arch/arm/vfp/vfpdouble.c:564 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:140 rmode ] [140])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 274 275 276 37 arch/arm/vfp/vfpdouble.c:563 (set (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))

(jump_insn 276 274 277 37 arch/arm/vfp/vfpdouble.c:564 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 284)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 37 -> ( 38 40)
;; lr  out 	 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  38 [28.0%]  (fallthru)
;; Succ edge  40 [72.0%] 

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  37 [28.0%]  (fallthru)
(note 277 276 278 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 278 277 279 38 arch/arm/vfp/vfpdouble.c:564 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 vdm$sign ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 279 278 280 38 arch/arm/vfp/vfpdouble.c:564 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 296)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 38 -> ( 39 43)
;; lr  out 	 6 [r6] 13 [sp]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  39 [39.0%]  (fallthru)
;; Succ edge  43 [61.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  38 [39.0%]  (fallthru)
(note 280 279 281 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 281 280 369 39 arch/arm/vfp/vfpdouble.c:565 (set (reg/v:SI 7 r7 [orig:142 d ] [142])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 369 281 370 39 (set (pc)
        (label_ref 299)) 242 {*arm_jump} (nil))
;; End of basic block 39 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 370 369 284)

;; Start of basic block ( 37) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  37 [72.0%] 
(code_label 284 370 285 40 368 "" [1 uses])

(note 285 284 286 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 286 285 287 40 arch/arm/vfp/vfpdouble.c:566 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 10 sl [orig:140 rmode ] [140])
            (const_int 8388608 [0x800000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 287 286 288 40 arch/arm/vfp/vfpdouble.c:566 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 296)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5323 [0x14cb])
        (nil)))
;; End of basic block 40 -> ( 41 43)
;; lr  out 	 6 [r6] 8 [r8] 13 [sp]
;; live  out 	 6 [r6] 8 [r8] 13 [sp]


;; Succ edge  41 [46.8%]  (fallthru)
;; Succ edge  43 [53.2%] 

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 6 [r6] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  40 [46.8%]  (fallthru)
(note 288 287 289 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 289 288 290 41 arch/arm/vfp/vfpdouble.c:566 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:133 vdm$sign ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 290 289 291 41 arch/arm/vfp/vfpdouble.c:566 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 296)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 41 -> ( 42 43)
;; lr  out 	 6 [r6] 13 [sp]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  42 [61.0%]  (fallthru)
;; Succ edge  43 [39.0%] 

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  41 [61.0%]  (fallthru)
(note 291 290 292 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 292 291 293 42 arch/arm/vfp/vfpdouble.c:568 (set (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
        (ior:SI (reg/v:SI 6 r6 [orig:141 exceptions ] [141])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 293 292 371 42 arch/arm/vfp/vfpdouble.c:567 (set (reg/v:SI 7 r7 [orig:142 d ] [142])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 371 293 372 42 (set (pc)
        (label_ref 299)) 242 {*arm_jump} (nil))
;; End of basic block 42 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%] 

(barrier 372 371 296)

;; Start of basic block ( 38 41 36 40) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 6 [r6] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  38 [61.0%] 
;; Pred edge  41 [39.0%] 
;; Pred edge  36 [39.0%] 
;; Pred edge  40 [53.2%] 
(code_label 296 372 297 43 367 "" [4 uses])

(note 297 296 298 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 298 297 299 43 arch/arm/vfp/vfpdouble.c:561 (set (reg/v:SI 7 r7 [orig:142 d ] [142])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 43 -> ( 44)
;; lr  out 	 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  44 [100.0%]  (fallthru)

;; Start of basic block ( 43 39 34 35 33 15 42) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  43 [100.0%]  (fallthru)
;; Pred edge  39 [100.0%] 
;; Pred edge  34 [50.0%] 
;; Pred edge  35 [100.0%] 
;; Pred edge  33 [100.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  42 [100.0%] 
(code_label 299 298 300 44 356 "" [6 uses])

(note 300 299 301 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 301 300 302 44 arch/arm/vfp/vfpdouble.c:575 (set (reg:SI 0 r0)
        (reg/v:SI 7 r7 [orig:142 d ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 302 301 303 44 arch/arm/vfp/vfpdouble.c:575 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-12 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 303 302 308 44 arch/arm/vfp/vfpdouble.c:575 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_float") [flags 0x41] <function_decl 0x10a9d180 vfp_put_float>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 308 303 314 44 arch/arm/vfp/vfpdouble.c:578 (set (reg/i:SI 0 r0)
        (reg/v:SI 6 r6 [orig:141 exceptions ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 314 308 376 44 arch/arm/vfp/vfpdouble.c:578 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 44 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 376 314 378 NOTE_INSN_DELETED)

(note 378 376 0 NOTE_INSN_DELETED)


;; Function vfp_double_ftouiz (vfp_double_ftouiz)[0:168]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 13(l0): point = 0
   Insn 12(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=5
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=12, live_throughout: 0, 1, 2, 13, 14, dead_or_set: 3
insn=13, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_ftouiz

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,1u} r2={2d,1u} r3={3d,1u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 133{124d,9u,0e} in 2{1 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 12 2 NOTE_INSN_FUNCTION_BEG)

(insn 12 6 13 2 arch/arm/vfp/vfpdouble.c:582 (set (reg:SI 3 r3)
        (const_int 12582912 [0xc00000])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 12 14 2 arch/arm/vfp/vfpdouble.c:582 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_ftoui") [flags 0x3] <function_decl 0x10ad5b80 vfp_double_ftoui>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 27)

(note 27 14 0 NOTE_INSN_DELETED)


;; Function vfp_double_fsito (vfp_double_fsito)[0:166]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 57.
verify found no changes in insn with uid = 57.
deleting insn with uid = 29.
scanning new insn with uid = 58.
verify found no changes in insn with uid = 58.
deleting insn with uid = 17.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 6 (  1.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)

Pass 0 for finding allocno costs

    a0 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r135,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a6(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r151: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r135,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a6(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 47(l0): point = 0
   Insn 35(l0): point = 2
   Insn 54(l0): point = 4
   Insn 30(l0): point = 6
   Insn 57(l0): point = 8
   Insn 53(l0): point = 10
   Insn 32(l0): point = 12
   Insn 34(l0): point = 14
   Insn 33(l0): point = 16
   Insn 31(l0): point = 18
   Insn 52(l0): point = 20
   Insn 23(l0): point = 23
   Insn 21(l0): point = 26
   Insn 16(l0): point = 28
   Insn 20(l0): point = 30
   Insn 19(l0): point = 32
   Insn 58(l0): point = 34
   Insn 15(l0): point = 36
   Insn 11(l0): point = 38
   Insn 10(l0): point = 40
   Insn 5(l0): point = 42
   Insn 9(l0): point = 44
   Insn 2(l0): point = 46
 a0(r151): [5..20]
 a1(r148): [7..8]
 a2(r133): [11..38]
 a3(r141): [17..42]
 a4(r138): [19..46]
 a5(r135): [29..36]
 a6(r145): [33..34]
Compressing live ranges: from 49 to 14 - 28%
Ranges after the compression:
 a0(r151): [0..6]
 a1(r148): [1..2]
 a2(r133): [3..11]
 a3(r141): [4..12]
 a4(r138): [5..13]
 a5(r135): [7..10]
 a6(r145): [8..9]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r151,l0) conflicts: a1(r148,l0) a2(r133,l0) a3(r141,l0) a4(r138,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r148,l0) conflicts: a0(r151,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a2(r133,l0) conflicts: a0(r151,l0) a3(r141,l0) a4(r138,l0) a5(r135,l0) a6(r145,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r141,l0) conflicts: a0(r151,l0) a2(r133,l0) a4(r138,l0) a5(r135,l0) a6(r145,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a4(r138,l0) conflicts: a0(r151,l0) a2(r133,l0) a3(r141,l0) a5(r135,l0) a6(r145,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a5(r135,l0) conflicts: a2(r133,l0) a3(r141,l0) a4(r138,l0) a6(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r145,l0) conflicts: a2(r133,l0) a3(r141,l0) a4(r138,l0) a5(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=1, blocks=5, points=14
    allocnos=7, copies=0, conflicts=1, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r151 1r148 2r133 3r141 4r138 5r135 6r145
    modified regnos: 133 135 138 141 145 148 151
    border:
    Pressure: GENERAL_REGS=6
    Reg 151 of GENERAL_REGS has 4 regs less
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
      Pushing a6(r145,l0)
      Pushing a5(r135,l0)
      Pushing a3(r141,l0)
      Pushing a4(r138,l0)
      Pushing a1(r148,l0)
      Pushing a0(r151,l0)
      Pushing a2(r133,l0)
      Popping a2(r133,l0)  -- assign reg 12
      Popping a0(r151,l0)  -- assign reg 14
      Popping a1(r148,l0)  -- assign reg 12
      Popping a4(r138,l0)  -- assign reg 4
      Popping a3(r141,l0)  -- assign reg 5
      Popping a5(r135,l0)  -- assign reg 3
      Popping a6(r145,l0)  -- assign reg 2
Disposition:
    2:r133 l0    12    5:r135 l0     3    4:r138 l0     4    3:r141 l0     5
    6:r145 l0     2    1:r148 l0    12    0:r151 l0    14
New iteration of spill/restore move
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 2, 3, 13, dead_or_set: 0, 138
insn=9, live_throughout: 3, 13, 138, dead_or_set: 0, 2
insn=5, live_throughout: 0, 13, 138, dead_or_set: 3, 141
insn=10, live_throughout: 13, 138, 141, dead_or_set: 0, 14
insn=11, live_throughout: 13, 138, 141, dead_or_set: 0, 133
insn=15, live_throughout: 13, 133, 138, 141, dead_or_set: 135
insn=58, live_throughout: 13, 133, 135, 138, 141, dead_or_set: 145
insn=19, live_throughout: 13, 133, 135, 138, 141, dead_or_set: 145
insn=20, live_throughout: 13, 133, 135, 138, 141, dead_or_set: 
insn=16, live_throughout: 13, 24, 133, 138, 141, dead_or_set: 135
insn=21, live_throughout: 13, 133, 138, 141, dead_or_set: 
insn=23, live_throughout: 13, 138, 141, dead_or_set: 133
insn=24, live_throughout: 13, 133, 138, 141, dead_or_set: 
insn=52, live_throughout: 13, 133, 138, 141, dead_or_set: 151
insn=31, live_throughout: 13, 133, 141, 151, dead_or_set: 0, 138
insn=33, live_throughout: 0, 13, 133, 151, dead_or_set: 2, 141
insn=34, live_throughout: 0, 2, 13, 133, 151, dead_or_set: 3
insn=32, live_throughout: 0, 2, 3, 13, 133, 151, dead_or_set: 1
insn=53, live_throughout: 0, 1, 2, 3, 13, 151, dead_or_set: 133
insn=57, live_throughout: 0, 1, 2, 3, 13, 151, dead_or_set: 148
insn=30, live_throughout: 0, 1, 2, 3, 13, 151, dead_or_set: 148
insn=54, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 151
insn=35, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=47, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 145: (insn_list:REG_DEP_TRUE 58 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 57 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 52 (nil))
changing reg in insn 11
changing reg in insn 23
changing reg in insn 15
changing reg in insn 53
changing reg in insn 23
changing reg in insn 15
changing reg in insn 20
changing reg in insn 2
changing reg in insn 31
changing reg in insn 5
changing reg in insn 33
changing reg in insn 58
changing reg in insn 57
changing reg in insn 30
changing reg in insn 52
changing reg in insn 34
changing reg in insn 54
Spilling for insn 19.
Spilling for insn 16.
Spilling for insn 53.
Spilling for insn 30.
Spilling for insn 54.

Reloads for insn # 19
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 16
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 53
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S4 A64])

Reloads for insn # 30
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 54
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 vdm.significand+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 vdm.significand+4 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 35.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 6 (  1.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


vfp_double_fsito

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,6u} r1={4d,1u} r2={5d,3u} r3={5d,4u} r4={1d,1u} r5={1d,1u} r12={6d,4u} r13={1d,12u} r14={4d,3u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={4d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 292{256d,36u,0e} in 23{21 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 13 2 NOTE_INSN_FUNCTION_BEG)

(note 13 6 14 2 NOTE_INSN_DELETED)

(note 14 13 2 2 NOTE_INSN_DELETED)

(insn 2 14 9 2 arch/arm/vfp/vfpdouble.c:495 (set (reg/v:SI 4 r4 [orig:138 dd ] [138])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 5 2 arch/arm/vfp/vfpdouble.c:497 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 9 10 2 arch/arm/vfp/vfpdouble.c:495 (set (reg/v:SI 5 r5 [orig:141 fpscr ] [141])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 11 2 arch/arm/vfp/vfpdouble.c:497 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_float") [flags 0x41] <function_decl 0x10a9d100 vfp_get_float>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 15 2 arch/arm/vfp/vfpdouble.c:497 (set (reg/v:SI 12 ip [orig:133 m ] [133])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 15 11 58 2 arch/arm/vfp/vfpdouble.c:499 (parallel [
            (set (reg:SI 3 r3 [orig:135 D.4493 ] [135])
                (if_then_else:SI (lt:SI (reg/v:SI 12 ip [orig:133 m ] [133])
                        (const_int 0 [0x0]))
                    (const_int 32768 [0x8000])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(insn 58 15 19 2 arch/arm/vfp/vfpdouble.c:500 (set (reg:SI 2 r2 [145])
        (const_int 1085 [0x43d])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1085 [0x43d])
        (nil)))

(insn 19 58 20 2 arch/arm/vfp/vfpdouble.c:500 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
        (reg:HI 2 r2 [145])) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 1085 [0x43d])
        (nil)))

(insn 20 19 16 2 arch/arm/vfp/vfpdouble.c:501 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:135 D.4493 ] [135])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 16 20 21 2 arch/arm/vfp/vfpdouble.c:499 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
        (reg:HI 3 r3 [orig:135 D.4493 ] [135])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 21 16 22 2 arch/arm/vfp/vfpdouble.c:501 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  4 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 12 [ip]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 12 [ip]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 3 arch/arm/vfp/vfpdouble.c:501 discrim 1 (set (reg/v:SI 12 ip [orig:133 m ] [133])
        (neg:SI (reg/v:SI 12 ip [orig:133 m ] [133]))) 127 {*arm_negsi2} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
(code_label 24 23 25 4 375 "" [1 uses])

(note 25 24 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 28 25 52 4 NOTE_INSN_DELETED)

(insn 52 28 31 4 arch/arm/vfp/vfpdouble.c:501 discrim 3 (set (reg:SI 14 lr [orig:151+4 ] [151])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 31 52 33 4 arch/arm/vfp/vfpdouble.c:503 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:138 dd ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 33 31 34 4 arch/arm/vfp/vfpdouble.c:503 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:141 fpscr ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 34 33 32 4 arch/arm/vfp/vfpdouble.c:503 (set (reg:SI 3 r3)
        (reg:SI 14 lr [orig:151+4 ] [151])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 32 34 53 4 arch/arm/vfp/vfpdouble.c:503 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 53 32 57 4 arch/arm/vfp/vfpdouble.c:501 discrim 3 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vdm.significand+0 S4 A64])
        (reg/v:SI 12 ip [orig:133 m ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 57 53 30 4 arch/arm/vfp/vfpdouble.c:503 (set (reg/f:SI 12 ip [148])
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x10ea85e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x10ea85e0>)
        (nil)))

(insn 30 57 54 4 arch/arm/vfp/vfpdouble.c:503 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [148])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x10ea85e0>)
        (nil)))

(insn 54 30 35 4 arch/arm/vfp/vfpdouble.c:501 discrim 3 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 vdm.significand+4 S4 A32])
        (reg:SI 14 lr [orig:151+4 ] [151])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 35 54 47 4 arch/arm/vfp/vfpdouble.c:503 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 47 35 56 4 arch/arm/vfp/vfpdouble.c:504 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 56 47 59 NOTE_INSN_DELETED)

(note 59 56 0 NOTE_INSN_DELETED)


;; Function vfp_double_fuito (vfp_double_fuito)[0:165]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 49.
verify found no changes in insn with uid = 49.
deleting insn with uid = 21.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a3 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r146: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 39(l0): point = 0
   Insn 27(l0): point = 2
   Insn 23(l0): point = 4
   Insn 45(l0): point = 6
   Insn 46(l0): point = 8
   Insn 17(l0): point = 10
   Insn 15(l0): point = 12
   Insn 22(l0): point = 14
   Insn 49(l0): point = 16
   Insn 14(l0): point = 18
   Insn 24(l0): point = 20
   Insn 26(l0): point = 22
   Insn 25(l0): point = 24
   Insn 12(l0): point = 26
   Insn 10(l0): point = 28
   Insn 5(l0): point = 30
   Insn 9(l0): point = 32
   Insn 2(l0): point = 34
 a0(r136): [5..34]
 a1(r141): [9..26]
 a2(r143): [11..12]
 a3(r146): [15..16]
 a4(r139): [25..30]
Compressing live ranges: from 37 to 10 - 27%
Ranges after the compression:
 a0(r136): [0..9]
 a1(r141): [1..7]
 a2(r143): [2..3]
 a3(r146): [4..5]
 a4(r139): [6..8]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r136,l0) conflicts: a1(r141,l0) a2(r143,l0) a3(r146,l0) a4(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r141,l0) conflicts: a0(r136,l0) a2(r143,l0) a3(r146,l0) a4(r139,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a2(r143,l0) conflicts: a0(r136,l0) a1(r141,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r146,l0) conflicts: a0(r136,l0) a1(r141,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a4(r139,l0) conflicts: a0(r136,l0) a1(r141,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  regions=1, blocks=3, points=10
    allocnos=5, copies=0, conflicts=0, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r136 1r141 2r143 3r146 4r139
    modified regnos: 136 139 141 143 146
    border:
    Pressure: GENERAL_REGS=7
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 4 regs less
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 2 regs less
      Pushing a4(r139,l0)
      Pushing a3(r146,l0)
      Pushing a2(r143,l0)
      Pushing a1(r141,l0)
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 4
      Popping a1(r141,l0)  -- assign reg 12
      Popping a2(r143,l0)  -- assign reg 14
      Popping a3(r146,l0)  -- assign reg 14
      Popping a4(r139,l0)  -- assign reg 5
Disposition:
    0:r136 l0     4    4:r139 l0     5    1:r141 l0    12    2:r143 l0    14
    3:r146 l0    14
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 2, 3, 13, dead_or_set: 0, 136
insn=9, live_throughout: 3, 13, 136, dead_or_set: 0, 2
insn=5, live_throughout: 0, 13, 136, dead_or_set: 3, 139
insn=10, live_throughout: 13, 136, 139, dead_or_set: 0, 14
insn=12, live_throughout: 0, 13, 136, 139, dead_or_set: 141
insn=25, live_throughout: 0, 13, 136, 141, dead_or_set: 2, 139
insn=26, live_throughout: 0, 2, 13, 136, 141, dead_or_set: 3
insn=24, live_throughout: 0, 2, 3, 13, 136, 141, dead_or_set: 1
insn=14, live_throughout: 0, 1, 2, 3, 13, 136, 141, dead_or_set: 
insn=49, live_throughout: 0, 1, 2, 3, 13, 136, 141, dead_or_set: 146
insn=22, live_throughout: 0, 1, 2, 3, 13, 136, 141, dead_or_set: 146
insn=15, live_throughout: 0, 1, 2, 3, 13, 136, 141, dead_or_set: 143
insn=17, live_throughout: 0, 1, 2, 3, 13, 136, 141, dead_or_set: 143
insn=46, live_throughout: 0, 1, 2, 3, 13, 136, dead_or_set: 141
insn=45, live_throughout: 1, 2, 3, 13, 136, dead_or_set: 0
insn=23, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 136
insn=27, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=39, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 141: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 143: (insn_list:REG_DEP_TRUE 15 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 49 (nil))
changing reg in insn 2
changing reg in insn 23
changing reg in insn 5
changing reg in insn 25
changing reg in insn 12
changing reg in insn 46
changing reg in insn 26
changing reg in insn 15
changing reg in insn 49
changing reg in insn 22
Spilling for insn 14.
Spilling for insn 22.
Spilling for insn 17.
Spilling for insn 46.
Spilling for insn 45.

Reloads for insn # 14
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 22
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 17
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 46
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 vdm.significand+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 vdm.significand+4 S4 A32])

Reloads for insn # 45
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vdm.significand+0 S4 A64])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fuito

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={5d,6u} r1={4d,1u} r2={4d,2u} r3={4d,2u} r4={1d,1u} r5={1d,1u} r12={4d,3u} r13={1d,10u} r14={5d,3u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 280{251d,29u,0e} in 18{16 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 6 20 2 NOTE_INSN_DELETED)

(note 20 11 2 2 NOTE_INSN_DELETED)

(insn 2 20 9 2 arch/arm/vfp/vfpdouble.c:483 (set (reg/v:SI 4 r4 [orig:136 dd ] [136])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 5 2 arch/arm/vfp/vfpdouble.c:485 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 9 10 2 arch/arm/vfp/vfpdouble.c:483 (set (reg/v:SI 5 r5 [orig:139 fpscr ] [139])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 12 2 arch/arm/vfp/vfpdouble.c:485 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_float") [flags 0x41] <function_decl 0x10a9d100 vfp_get_float>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 12 10 25 2 arch/arm/vfp/vfpdouble.c:487 (set (reg:SI 12 ip [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 25 12 26 2 arch/arm/vfp/vfpdouble.c:491 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:139 fpscr ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 26 25 24 2 arch/arm/vfp/vfpdouble.c:491 (set (reg:SI 3 r3)
        (reg:SI 12 ip [141])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 24 26 14 2 arch/arm/vfp/vfpdouble.c:491 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 14 24 49 2 arch/arm/vfp/vfpdouble.c:487 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 10 [0xa])) [0 vdm.sign+0 S2 A16])
        (reg:HI 12 ip [141])) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 49 14 22 2 arch/arm/vfp/vfpdouble.c:491 (set (reg/f:SI 14 lr [146])
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x10ea8640>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x10ea8640>)
        (nil)))

(insn 22 49 15 2 arch/arm/vfp/vfpdouble.c:491 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 14 lr [146])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x10ea8640>)
        (nil)))

(insn 15 22 17 2 arch/arm/vfp/vfpdouble.c:488 (set (reg:SI 14 lr [143])
        (const_int 1085 [0x43d])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1085 [0x43d])
        (nil)))

(insn 17 15 46 2 arch/arm/vfp/vfpdouble.c:488 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.exponent+0 S2 A64])
        (reg:HI 14 lr [143])) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 1085 [0x43d])
        (nil)))

(insn 46 17 45 2 arch/arm/vfp/vfpdouble.c:489 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 vdm.significand+4 S4 A32])
        (reg:SI 12 ip [141])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 45 46 23 2 arch/arm/vfp/vfpdouble.c:489 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vdm.significand+0 S4 A64])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 23 45 27 2 arch/arm/vfp/vfpdouble.c:491 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:136 dd ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn 27 23 39 2 arch/arm/vfp/vfpdouble.c:491 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 39 27 48 2 arch/arm/vfp/vfpdouble.c:492 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 48 39 50 NOTE_INSN_DELETED)

(note 50 48 0 NOTE_INSN_DELETED)


;; Function vfp_double_fcvts (vfp_double_fcvts)[0:164]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 215.
rescanning insn with uid = 215.
deleting insn with uid = 215.
deleting insn with uid = 173.
scanning new insn with uid = 216.
verify found no changes in insn with uid = 216.
deleting insn with uid = 56.
scanning new insn with uid = 217.
verify found no changes in insn with uid = 217.
deleting insn with uid = 12.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 33 count 45 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 33 count 48 (  1.9)

Pass 0 for finding allocno costs

    a21 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a12(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a16(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a17(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a22(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a27(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r205: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a12(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a16(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a17(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a22(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a27(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 191(l0): point = 0
   Insn 185(l0): point = 2
   Insn 178(l0): point = 5
   Insn 176(l0): point = 7
   Insn 215(l0): point = 9
   Insn 172(l0): point = 11
   Insn 177(l0): point = 13
   Insn 171(l0): point = 15
   Insn 170(l0): point = 17
   Insn 210(l0): point = 20
   Insn 165(l0): point = 22
   Insn 164(l0): point = 24
   Insn 161(l0): point = 26
   Insn 163(l0): point = 28
   Insn 162(l0): point = 30
   Insn 160(l0): point = 32
   Insn 156(l0): point = 35
   Insn 155(l0): point = 37
   Insn 153(l0): point = 39
   Insn 208(l0): point = 42
   Insn 148(l0): point = 44
   Insn 144(l0): point = 47
   Insn 143(l0): point = 49
   Insn 206(l0): point = 52
   Insn 137(l0): point = 54
   Insn 136(l0): point = 56
   Insn 134(l0): point = 59
   Insn 132(l0): point = 61
   Insn 133(l0): point = 63
   Insn 128(l0): point = 66
   Insn 125(l0): point = 68
   Insn 122(l0): point = 70
   Insn 127(l0): point = 72
   Insn 124(l0): point = 74
   Insn 123(l0): point = 76
   Insn 121(l0): point = 78
   Insn 118(l0): point = 81
   Insn 117(l0): point = 83
   Insn 114(l0): point = 86
   Insn 113(l0): point = 88
   Insn 109(l0): point = 91
   Insn 196(l0): point = 94
   Insn 98(l0): point = 96
   Insn 204(l0): point = 99
   Insn 91(l0): point = 101
   Insn 89(l0): point = 104
   Insn 88(l0): point = 106
   Insn 202(l0): point = 109
   Insn 83(l0): point = 111
   Insn 200(l0): point = 114
   Insn 78(l0): point = 116
   Insn 77(l0): point = 118
   Insn 75(l0): point = 121
   Insn 74(l0): point = 123
   Insn 71(l0): point = 125
   Insn 70(l0): point = 130
   Insn 198(l0): point = 133
   Insn 65(l0): point = 135
   Insn 63(l0): point = 138
   Insn 62(l0): point = 140
   Insn 58(l0): point = 143
   Insn 57(l0): point = 145
   Insn 216(l0): point = 147
   Insn 52(l0): point = 149
   Insn 49(l0): point = 152
   Insn 48(l0): point = 157
   Insn 46(l0): point = 160
   Insn 30(l0): point = 162
   Insn 16(l0): point = 164
   Insn 14(l0): point = 166
   Insn 29(l0): point = 168
   Insn 22(l0): point = 170
   Insn 28(l0): point = 172
   Insn 13(l0): point = 174
   Insn 217(l0): point = 179
   Insn 45(l0): point = 181
   Insn 34(l0): point = 183
   Insn 25(l0): point = 185
   Insn 24(l0): point = 187
   Insn 26(l0): point = 189
   Insn 197(l0): point = 191
   Insn 21(l0): point = 193
   Insn 11(l0): point = 195
   Insn 10(l0): point = 197
   Insn 5(l0): point = 199
   Insn 9(l0): point = 201
   Insn 2(l0): point = 203
 a0(r136): [114..116] [29..91] [3..22]
 a1(r194): [8..11]
 a2(r197): [8..9]
 a3(r195): [12..15]
 a4(r141): [33..203] [14..19]
 a5(r193): [16..17]
 a6(r138): [52..78] [18..19]
 a7(r144): [66..199] [31..51]
 a8(r191): [36..37]
 a9(r190): [38..39]
 a10(r182): [66..72] [45..51]
 a11(r137): [133..135] [114..118] [109..111] [99..101] [64..94] [50..51]
 a12(r185): [55..56]
 a13(r133): [57..74]
 a14(r181): [75..76]
 a15(r135): [138..191] [126..132] [104..108] [97..98]
 a16(r134): [143..193] [107..108]
 a17(r175): [128..128] [124..126]
 a18(r176): [126..130]
 a19(r173): [146..147]
 a20(r169): [153..157]
 a21(r205): [163..187]
 a22(r200): [165..166]
 a23(r145): [177..177] [167..175]
 a24(r204): [173..189]
 a25(r146): [175..179]
 a26(r139): [175..195]
 a27(r161): [182..183]
Compressing live ranges: from 206 to 77 - 37%
Ranges after the compression:
 a0(r136): [44..45] [12..33] [0..11]
 a1(r194): [1..3]
 a2(r197): [1..2]
 a3(r195): [4..6]
 a4(r141): [14..76] [5..10]
 a5(r193): [7..8]
 a6(r138): [22..32] [9..10]
 a7(r144): [27..75] [13..21]
 a8(r191): [15..16]
 a9(r190): [17..18]
 a10(r182): [27..28] [19..21]
 a11(r137): [52..53] [44..46] [42..43] [37..38] [26..34] [20..21]
 a12(r185): [23..24]
 a13(r133): [25..29]
 a14(r181): [30..31]
 a15(r135): [54..72] [48..51] [39..41] [35..36]
 a16(r134): [55..73] [40..41]
 a17(r175): [49..49] [47..48]
 a18(r176): [48..50]
 a19(r173): [56..57]
 a20(r169): [58..59]
 a21(r205): [60..70]
 a22(r200): [61..62]
 a23(r145): [66..66] [63..65]
 a24(r204): [64..71]
 a25(r146): [65..67]
 a26(r139): [65..74]
 a27(r161): [68..69]
+++Allocating 224 bytes for conflict table (uncompressed size 224)
;; a0(r136,l0) conflicts: a2(r197,l0) a1(r194,l0) a3(r195,l0) a4(r141,l0) a5(r193,l0) a6(r138,l0) a7(r144,l0) a8(r191,l0) a9(r190,l0) a10(r182,l0) a11(r137,l0) a12(r185,l0) a13(r133,l0) a14(r181,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r194,l0) conflicts: a0(r136,l0) a2(r197,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a2(r197,l0) conflicts: a0(r136,l0) a1(r194,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a3(r195,l0) conflicts: a0(r136,l0) a4(r141,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a4(r141,l0) conflicts: a0(r136,l0) a3(r195,l0) a5(r193,l0) a6(r138,l0) a7(r144,l0) a8(r191,l0) a9(r190,l0) a10(r182,l0) a11(r137,l0) a12(r185,l0) a13(r133,l0) a14(r181,l0) a15(r135,l0) a16(r134,l0) a17(r175,l0) a18(r176,l0) a19(r173,l0) a20(r169,l0) a21(r205,l0) a22(r200,l0) a23(r145,l0) a24(r204,l0) a25(r146,l0) a26(r139,l0) a27(r161,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r193,l0) conflicts: a0(r136,l0) a4(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r138,l0) conflicts: a0(r136,l0) a4(r141,l0) a7(r144,l0) a10(r182,l0) a11(r137,l0) a12(r185,l0) a13(r133,l0) a14(r181,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r144,l0) conflicts: a0(r136,l0) a4(r141,l0) a6(r138,l0) a8(r191,l0) a9(r190,l0) a10(r182,l0) a11(r137,l0) a13(r133,l0) a14(r181,l0) a15(r135,l0) a16(r134,l0) a17(r175,l0) a18(r176,l0) a19(r173,l0) a20(r169,l0) a21(r205,l0) a22(r200,l0) a23(r145,l0) a24(r204,l0) a25(r146,l0) a26(r139,l0) a27(r161,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r191,l0) conflicts: a0(r136,l0) a4(r141,l0) a7(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r190,l0) conflicts: a0(r136,l0) a4(r141,l0) a7(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r182,l0) conflicts: a0(r136,l0) a4(r141,l0) a6(r138,l0) a7(r144,l0) a11(r137,l0) a13(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r137,l0) conflicts: a0(r136,l0) a4(r141,l0) a6(r138,l0) a7(r144,l0) a10(r182,l0) a13(r133,l0) a14(r181,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a12(r185,l0) conflicts: a0(r136,l0) a4(r141,l0) a6(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r133,l0) conflicts: a0(r136,l0) a4(r141,l0) a6(r138,l0) a7(r144,l0) a10(r182,l0) a11(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r181,l0) conflicts: a0(r136,l0) a4(r141,l0) a6(r138,l0) a7(r144,l0) a11(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r135,l0) conflicts: a4(r141,l0) a7(r144,l0) a16(r134,l0) a17(r175,l0) a18(r176,l0) a19(r173,l0) a20(r169,l0) a21(r205,l0) a22(r200,l0) a23(r145,l0) a24(r204,l0) a25(r146,l0) a26(r139,l0) a27(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r134,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a19(r173,l0) a20(r169,l0) a21(r205,l0) a22(r200,l0) a23(r145,l0) a24(r204,l0) a25(r146,l0) a26(r139,l0) a27(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r175,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a18(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r176,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a17(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r173,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a16(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r169,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a16(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r205,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a16(r134,l0) a22(r200,l0) a23(r145,l0) a24(r204,l0) a25(r146,l0) a26(r139,l0) a27(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r200,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a16(r134,l0) a21(r205,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r145,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a16(r134,l0) a21(r205,l0) a24(r204,l0) a25(r146,l0) a26(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r204,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a16(r134,l0) a21(r205,l0) a23(r145,l0) a25(r146,l0) a26(r139,l0) a27(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r146,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a16(r134,l0) a21(r205,l0) a23(r145,l0) a24(r204,l0) a26(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r139,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a16(r134,l0) a21(r205,l0) a23(r145,l0) a24(r204,l0) a25(r146,l0) a27(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r161,l0) conflicts: a4(r141,l0) a7(r144,l0) a15(r135,l0) a16(r134,l0) a21(r205,l0) a24(r204,l0) a26(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a5(r193)<->a6(r138)@125:shuffle
  cp1:a3(r195)<->a5(r193)@125:shuffle
  cp2:a1(r194)<->a3(r195)@125:shuffle
  cp3:a8(r191)<->a9(r190)@125:shuffle
  cp4:a12(r185)<->a13(r133)@125:shuffle
  cp5:a13(r133)<->a14(r181)@125:shuffle
  regions=1, blocks=25, points=77
    allocnos=28, copies=6, conflicts=0, ranges=45

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r136 1r194 2r197 3r195 4r141 5r193 6r138 7r144 8r191 9r190 10r182 11r137 12r185 13r133 14r181 15r135 16r134 17r175 18r176 19r173 20r169 21r205 22r200 23r145 24r204 25r146 26r139 27r161
    modified regnos: 133 134 135 136 137 138 139 141 144 145 146 161 169 173 175 176 181 182 185 190 191 193 194 195 197 200 204 205
    border:
    Pressure: GENERAL_REGS=11
    Reg 136 of GENERAL_REGS has 4 regs less
    Reg 194 of GENERAL_REGS has 1 regs less
    Reg 197 of GENERAL_REGS has 1 regs less
    Reg 195 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
      Pushing a27(r161,l0)
      Pushing a25(r146,l0)
      Pushing a24(r204,l0)
      Pushing a23(r145,l0)
      Pushing a22(r200,l0)
      Pushing a20(r169,l0)
      Pushing a19(r173,l0)
      Pushing a18(r176,l0)
      Pushing a17(r175,l0)
      Pushing a14(r181,l0)
      Pushing a12(r185,l0)
      Pushing a10(r182,l0)
      Pushing a9(r190,l0)
      Pushing a8(r191,l0)
      Pushing a5(r193,l0)
      Pushing a13(r133,l0)
      Pushing a6(r138,l0)
      Pushing a21(r205,l0)
      Pushing a26(r139,l0)
      Pushing a16(r134,l0)
      Pushing a15(r135,l0)
      Pushing a3(r195,l0)
      Pushing a2(r197,l0)
      Pushing a1(r194,l0)
      Pushing a11(r137,l0)
      Pushing a7(r144,l0)
      Pushing a0(r136,l0)
      Pushing a4(r141,l0)
      Popping a4(r141,l0)  -- assign reg 4
      Popping a0(r136,l0)  -- assign reg 5
      Popping a7(r144,l0)  -- assign reg 6
      Popping a11(r137,l0)  -- assign reg 7
      Popping a1(r194,l0)  -- assign reg 3
      Popping a2(r197,l0)  -- assign reg 0
      Popping a3(r195,l0)  -- assign reg 3
      Popping a15(r135,l0)  -- assign reg 2
      Popping a16(r134,l0)  -- assign reg 1
      Popping a26(r139,l0)  -- assign reg 8
      Popping a21(r205,l0)  -- assign reg 0
      Popping a6(r138,l0)  -- assign reg 3
      Popping a13(r133,l0)  -- assign reg 2
      Popping a5(r193,l0)  -- assign reg 3
      Popping a8(r191,l0)  -- assign reg 3
      Popping a9(r190,l0)  -- assign reg 3
      Popping a10(r182,l0)  -- assign reg 1
      Popping a12(r185,l0)  -- assign reg 2
      Popping a14(r181,l0)  -- assign reg 0
      Popping a17(r175,l0)  -- assign reg 0
      Popping a18(r176,l0)  -- assign reg 8
      Popping a19(r173,l0)  -- assign reg 0
      Popping a20(r169,l0)  -- assign reg 8
      Popping a22(r200,l0)  -- assign reg 12
      Popping a23(r145,l0)  -- assign reg 10
      Popping a24(r204,l0)  -- assign reg 12
      Popping a25(r146,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a27(r161,l0)  -- assign reg 14
Disposition:
   13:r133 l0     2   16:r134 l0     1   15:r135 l0     2    0:r136 l0     5
   11:r137 l0     7    6:r138 l0     3   26:r139 l0     8    4:r141 l0     4
    7:r144 l0     6   23:r145 l0    10   25:r146 l0   mem   27:r161 l0    14
   20:r169 l0     8   19:r173 l0     0   17:r175 l0     0   18:r176 l0     8
   14:r181 l0     0   10:r182 l0     1   12:r185 l0     2    9:r190 l0     3
    8:r191 l0     3    5:r193 l0     3    1:r194 l0     3    3:r195 l0     3
    2:r197 l0     0   22:r200 l0    12   24:r204 l0    12   21:r205 l0     0
New iteration of spill/restore move
+++Costs: overall 19750, reg -250, mem 20000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 2, 3, 13, dead_or_set: 0, 141
insn=9, live_throughout: 3, 13, 141, dead_or_set: 0, 2
insn=5, live_throughout: 0, 13, 141, dead_or_set: 3, 144
insn=10, live_throughout: 13, 141, 144, dead_or_set: 0, 1, 14
insn=11, live_throughout: 13, 141, 144, dead_or_set: 0, 1, 139
insn=21, live_throughout: 13, 139, 141, 144, dead_or_set: 134
insn=197, live_throughout: 13, 134, 139, 141, 144, dead_or_set: 135
insn=26, live_throughout: 13, 134, 139, 141, 144, dead_or_set: 204
insn=24, live_throughout: 13, 134, 139, 141, 144, 204, dead_or_set: 205
insn=25, live_throughout: 13, 134, 139, 141, 144, 204, dead_or_set: 205
insn=34, live_throughout: 13, 134, 139, 141, 144, 204, 205, dead_or_set: 161
insn=45, live_throughout: 13, 134, 139, 141, 144, 204, 205, dead_or_set: 161
insn=217, live_throughout: 13, 24, 134, 139, 141, 144, 204, 205, dead_or_set: 146
insn=13, live_throughout: 13, 24, 134, 141, 144, 204, 205, dead_or_set: 139, 145, 146
insn=28, live_throughout: 13, 24, 134, 141, 144, 145, 205, dead_or_set: 135, 204
insn=22, live_throughout: 13, 24, 134, 135, 141, 144, 145, 205, dead_or_set: 
insn=29, live_throughout: 13, 24, 134, 141, 144, 145, 205, dead_or_set: 135
insn=14, live_throughout: 13, 24, 134, 135, 141, 144, 205, dead_or_set: 145, 200
insn=16, live_throughout: 13, 24, 134, 135, 141, 144, 205, dead_or_set: 200
insn=30, live_throughout: 13, 24, 134, 135, 141, 144, dead_or_set: 135, 205
insn=46, live_throughout: 13, 134, 135, 141, 144, dead_or_set: 
insn=48, live_throughout: 13, 134, 135, 141, 144, dead_or_set: 169
insn=49, live_throughout: 13, 134, 141, 144, dead_or_set: 135, 169
insn=50, live_throughout: 13, 134, 135, 141, 144, dead_or_set: 
insn=52, live_throughout: 13, 134, 135, 141, 144, dead_or_set: 
insn=216, live_throughout: 13, 134, 135, 141, 144, dead_or_set: 173
insn=57, live_throughout: 13, 134, 135, 141, 144, dead_or_set: 173
insn=58, live_throughout: 13, 134, 135, 141, 144, dead_or_set: 
insn=62, live_throughout: 13, 135, 141, 144, dead_or_set: 
insn=63, live_throughout: 13, 135, 141, 144, dead_or_set: 
insn=65, live_throughout: 13, 141, 144, dead_or_set: 137
insn=198, live_throughout: 13, 137, 141, 144, dead_or_set: 
insn=68, live_throughout: 13, 135, 141, 144, dead_or_set: 
insn=70, live_throughout: 13, 135, 141, 144, dead_or_set: 176
insn=71, live_throughout: 13, 141, 144, dead_or_set: 135, 175, 176
insn=74, live_throughout: 13, 141, 144, dead_or_set: 175
insn=75, live_throughout: 13, 141, 144, dead_or_set: 
insn=77, live_throughout: 13, 141, 144, dead_or_set: 137
insn=78, live_throughout: 13, 137, 141, 144, dead_or_set: 136
insn=200, live_throughout: 13, 136, 137, 141, 144, dead_or_set: 
insn=81, live_throughout: 13, 141, 144, dead_or_set: 
insn=83, live_throughout: 13, 141, 144, dead_or_set: 137
insn=202, live_throughout: 13, 137, 141, 144, dead_or_set: 
insn=86, live_throughout: 13, 134, 135, 141, 144, dead_or_set: 
insn=88, live_throughout: 13, 135, 141, 144, dead_or_set: 134
insn=89, live_throughout: 13, 135, 141, 144, dead_or_set: 
insn=91, live_throughout: 13, 141, 144, dead_or_set: 137
insn=204, live_throughout: 13, 137, 141, 144, dead_or_set: 
insn=94, live_throughout: 13, 135, 141, 144, dead_or_set: 
insn=98, live_throughout: 13, 141, 144, dead_or_set: 135
insn=196, live_throughout: 13, 141, 144, dead_or_set: 137
insn=107, live_throughout: 13, 137, 141, 144, dead_or_set: 
insn=109, live_throughout: 13, 137, 141, 144, dead_or_set: 136
insn=110, live_throughout: 13, 136, 137, 141, 144, dead_or_set: 
insn=113, live_throughout: 13, 136, 137, 141, 144, dead_or_set: 
insn=114, live_throughout: 13, 136, 137, 141, 144, dead_or_set: 
insn=117, live_throughout: 13, 136, 137, 141, 144, dead_or_set: 0
insn=118, live_throughout: 13, 136, 137, 141, 144, dead_or_set: 0, 14
insn=119, live_throughout: 13, 136, 137, 141, 144, dead_or_set: 
insn=121, live_throughout: 13, 136, 137, 141, 144, dead_or_set: 138
insn=123, live_throughout: 13, 136, 137, 138, 141, 144, dead_or_set: 181
insn=124, live_throughout: 13, 136, 137, 138, 141, 144, dead_or_set: 133, 181
insn=127, live_throughout: 13, 133, 136, 137, 138, 141, 144, dead_or_set: 182
insn=122, live_throughout: 13, 24, 133, 136, 137, 138, 141, 144, 182, dead_or_set: 
insn=125, live_throughout: 13, 24, 133, 136, 137, 138, 141, 144, 182, dead_or_set: 
insn=128, live_throughout: 13, 133, 136, 137, 138, 141, 144, 182, dead_or_set: 
insn=133, live_throughout: 13, 133, 136, 138, 141, dead_or_set: 137
insn=132, live_throughout: 13, 24, 133, 136, 138, 141, dead_or_set: 
insn=134, live_throughout: 13, 133, 136, 138, 141, dead_or_set: 
insn=136, live_throughout: 13, 136, 138, 141, dead_or_set: 133, 185
insn=137, live_throughout: 13, 136, 138, 141, dead_or_set: 185
insn=206, live_throughout: 13, 136, 138, 141, dead_or_set: 
insn=140, live_throughout: 13, 136, 137, 141, 144, 182, dead_or_set: 
insn=143, live_throughout: 13, 136, 141, 144, 182, dead_or_set: 137
insn=144, live_throughout: 13, 136, 141, 144, 182, dead_or_set: 
insn=148, live_throughout: 13, 136, 141, 144, dead_or_set: 182
insn=208, live_throughout: 13, 136, 141, 144, dead_or_set: 
insn=151, live_throughout: 13, 136, 141, 144, dead_or_set: 
insn=153, live_throughout: 13, 136, 141, 144, dead_or_set: 190
insn=155, live_throughout: 13, 136, 141, 144, dead_or_set: 190, 191
insn=156, live_throughout: 13, 136, 141, 144, dead_or_set: 191
insn=157, live_throughout: 13, 136, 141, 144, dead_or_set: 
insn=160, live_throughout: 13, 136, 144, dead_or_set: 0, 141
insn=162, live_throughout: 0, 13, 136, dead_or_set: 2, 144
insn=163, live_throughout: 0, 2, 13, dead_or_set: 3, 136
insn=161, live_throughout: 0, 2, 3, 13, dead_or_set: 1
insn=164, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=165, live_throughout: 13, 14, dead_or_set: 0, 136
insn=210, live_throughout: 13, 14, 136, dead_or_set: 
insn=168, live_throughout: 13, 136, 138, 141, dead_or_set: 
insn=170, live_throughout: 13, 136, 141, dead_or_set: 138, 193
insn=171, live_throughout: 13, 136, 141, dead_or_set: 193, 195
insn=177, live_throughout: 13, 136, 195, dead_or_set: 1, 141
insn=172, live_throughout: 1, 13, 136, dead_or_set: 194, 195
insn=215, live_throughout: 1, 13, 136, 194, dead_or_set: 197
insn=176, live_throughout: 1, 13, 136, dead_or_set: 0, 194, 197
insn=178, live_throughout: 13, 136, dead_or_set: 0, 1, 14
insn=179, live_throughout: 13, 14, 136, dead_or_set: 
insn=185, live_throughout: 13, 14, dead_or_set: 0, 136
insn=191, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 146: (insn_list:REG_DEP_TRUE 217 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 34 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 48 (nil))
init_insns for 173: (insn_list:REG_DEP_TRUE 216 (nil))
init_insns for 176: (insn_list:REG_DEP_TRUE 70 (nil))
init_insns for 181: (insn_list:REG_DEP_TRUE 123 (nil))
init_insns for 185: (insn_list:REG_DEP_TRUE 137 (nil))
init_insns for 197: (insn_list:REG_DEP_TRUE 215 (nil))
changing reg in insn 124
changing reg in insn 136
changing reg in insn 125
changing reg in insn 21
changing reg in insn 57
changing reg in insn 45
changing reg in insn 45
changing reg in insn 88
changing reg in insn 197
changing reg in insn 49
changing reg in insn 29
changing reg in insn 71
changing reg in insn 52
changing reg in insn 49
changing reg in insn 30
changing reg in insn 28
changing reg in insn 71
changing reg in insn 49
changing reg in insn 165
changing reg in insn 109
changing reg in insn 78
changing reg in insn 185
changing reg in insn 163
changing reg in insn 196
changing reg in insn 91
changing reg in insn 83
changing reg in insn 77
changing reg in insn 65
changing reg in insn 143
changing reg in insn 127
changing reg in insn 127
changing reg in insn 113
changing reg in insn 133
changing reg in insn 121
changing reg in insn 170
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 2
changing reg in insn 177
changing reg in insn 160
changing reg in insn 5
changing reg in insn 162
changing reg in insn 13
changing reg in insn 34
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 216
changing reg in insn 57
changing reg in insn 71
changing reg in insn 70
changing reg in insn 71
changing reg in insn 123
changing reg in insn 124
changing reg in insn 127
changing reg in insn 136
changing reg in insn 137
changing reg in insn 153
changing reg in insn 155
changing reg in insn 155
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 176
changing reg in insn 171
changing reg in insn 172
changing reg in insn 215
changing reg in insn 176
changing reg in insn 14
changing reg in insn 26
changing reg in insn 28
changing reg in insn 25
changing reg in insn 24
changing reg in insn 29
changing reg in insn 25
changing reg in insn 30
Spilling for insn 13.
Using reg 2 for reload 0
Spilling for insn 22.
Spilling for insn 16.
Spilling for insn 52.
Spilling for insn 62.
Using reg 1 for reload 0
Spilling for insn 98.
Using reg 1 for reload 0
Spilling for insn 122.
Spilling for insn 125.
Spilling for insn 132.
Using reg 1 for reload 1
Spilling for insn 137.
Spilling for insn 148.
Spilling for insn 156.
deleting insn with uid = 217.

Reloads for insn # 13
Reload 0: reload_in (DI) = (const_int -9223372036854775808 [0x8000000000000000])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 146)
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 22
Reload 0: reload_out (HI) = (mem/s/j/c:HI (reg/f:SI 13 sp) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (reg/f:SI 13 sp) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 16
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 2 [0x2])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 2 [0x2])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 52
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 62
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 98
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 122
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 18 [0x12])) [0 vsd.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 18 [0x12])) [0 vsd.sign+0 S2 A16])

Reloads for insn # 125
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 vsd.significand+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 vsd.significand+0 S4 A32])

Reloads for insn # 132
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vsd.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vsd.exponent+0 S2 A64])
Reload 1: reload_in (HI) = (const_int 255 [0xff])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (const_int 255 [0xff])
	reload_reg_rtx: (reg:HI 1 r1)

Reloads for insn # 137
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 vsd.significand+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 vsd.significand+0 S4 A32])

Reloads for insn # 148
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vsd.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vsd.exponent+0 S2 A64])

Reloads for insn # 156
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vsd.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 vsd.exponent+0 S2 A64])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 178.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 33 count 45 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 33 count 48 (  1.9)


vfp_double_fcvts

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,15u} r1={14d,12u} r2={13d,12u,2d} r3={16d,15u,3d} r4={1d,2u} r5={3d,2u} r6={1d,1u} r7={5d,5u} r8={3d,5u,1d} r9={3d,5u,1d} r10={1d} r11={1d,1u} r12={7d,2u} r13={1d,43u,2d} r14={6d,2u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={15d,10u} r25={1d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 688{546d,132u,10e} in 88{84 regular + 4 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 17 2 NOTE_INSN_FUNCTION_BEG)

(note 17 6 19 2 NOTE_INSN_DELETED)

(note 19 17 20 2 NOTE_INSN_DELETED)

(note 20 19 23 2 NOTE_INSN_DELETED)

(note 23 20 27 2 NOTE_INSN_DELETED)

(note 27 23 31 2 NOTE_INSN_DELETED)

(note 31 27 32 2 NOTE_INSN_DELETED)

(note 32 31 33 2 NOTE_INSN_DELETED)

(note 33 32 35 2 NOTE_INSN_DELETED)

(note 35 33 36 2 NOTE_INSN_DELETED)

(note 36 35 39 2 NOTE_INSN_DELETED)

(note 39 36 40 2 NOTE_INSN_DELETED)

(note 40 39 42 2 NOTE_INSN_DELETED)

(note 42 40 43 2 NOTE_INSN_DELETED)

(note 43 42 44 2 NOTE_INSN_DELETED)

(note 44 43 2 2 NOTE_INSN_DELETED)

(insn 2 44 9 2 arch/arm/vfp/vfpdouble.c:440 (set (reg/v:SI 4 r4 [orig:141 sd ] [141])
        (reg:SI 0 r0 [ sd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 5 2 arch/arm/vfp/vfpdouble.c:446 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 9 10 2 arch/arm/vfp/vfpdouble.c:440 (set (reg/v:SI 6 r6 [orig:144 fpscr ] [144])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 11 2 arch/arm/vfp/vfpdouble.c:446 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 21 2 arch/arm/vfp/vfpdouble.c:446 (set (reg:DI 8 r8 [orig:139 D.4438 ] [139])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 21 11 197 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 1 r1 [orig:134 D.6097 ] [134])
        (zero_extract:SI (reg:SI 9 r9 [ D.4438+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 197 21 26 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:135 significand ] [135])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 26 197 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 12 ip [204])
        (ashift:SI (reg:SI 8 r8 [orig:139 D.4438 ] [139])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 24 26 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 0 r0 [orig:205+4 ] [205])
        (ashift:SI (reg:SI 9 r9 [ D.4438+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 34 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 0 r0 [orig:205+4 ] [205])
        (ior:SI (lshiftrt:SI (reg:SI 8 r8 [orig:139 D.4438 ] [139])
                (const_int 20 [0x14]))
            (reg:SI 0 r0 [orig:205+4 ] [205]))) 270 {*arith_shiftsi} (nil))

(insn 34 25 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 14 lr [161])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 45 34 217 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 1 r1 [orig:134 D.6097 ] [134])
                    (reg:SI 14 lr [161]))
                (ne:SI (reg:SI 1 r1 [orig:134 D.6097 ] [134])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(note 217 45 219 2 NOTE_INSN_DELETED)

(insn 219 217 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 2 r2)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 13 219 28 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 10 sl [145])
        (and:DI (reg:DI 8 r8 [orig:139 D.4438 ] [139])
            (reg:DI 2 r2))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 8 r8 [orig:139 D.4438 ] [139])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 28 13 22 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:135 significand ] [135])
        (lshiftrt:SI (reg:SI 12 ip [204])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 22 28 29 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (reg/f:SI 13 sp) [0 vdm.exponent+0 S2 A64])
        (reg:HI 1 r1 [orig:134 D.6097 ] [134])) 176 {*movhi_insn_arch4} (nil))

(insn 29 22 14 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:135 significand ] [135])
        (ior:SI (ashift:SI (reg:SI 0 r0 [orig:205+4 ] [205])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:135 significand ] [135]))) 270 {*arith_shiftsi} (nil))

(insn 14 29 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 12 ip [200])
        (lshiftrt:SI (reg:SI 11 fp [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 16 14 30 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 2 [0x2])) [0 vdm.sign+0 S2 A16])
        (reg:HI 12 ip [200])) 176 {*movhi_insn_arch4} (nil))

(insn 30 16 46 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 0 r0 [orig:205+4 ] [205])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 46 30 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 8 [r8] 9 [r9]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 8 r8 [169])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:135 significand ] [135])
        (ior:DI (reg/v:DI 2 r2 [orig:135 significand ] [135])
            (reg:DI 8 r8 [169]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:135 significand ] [135])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 384 "" [1 uses])

(note 51 50 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 53 51 54 4 NOTE_INSN_DELETED)

(note 54 53 55 4 NOTE_INSN_DELETED)

(note 55 54 52 4 NOTE_INSN_DELETED)

(insn 52 55 216 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:135 significand ] [135])) 163 {*arm_movdi} (nil))

(insn 216 52 57 4 arch/arm/vfp/vfp.h:330 (set (reg:SI 0 r0 [173])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 57 216 58 4 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:134 D.6097 ] [134])
            (reg:SI 0 r0 [173]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 58 57 59 4 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 86)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  5 [28.0%]  (fallthru)
;; Succ edge  10 [72.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  4 [28.0%]  (fallthru)
(note 59 58 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 60 59 61 5 NOTE_INSN_DELETED)

(note 61 60 62 5 NOTE_INSN_DELETED)

(insn 62 61 63 5 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:135 significand ] [135])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 63 62 64 5 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 64 63 65 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 65 64 198 6 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 7 r7 [orig:137 tm ] [137])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 198 65 199 6 (set (pc)
        (label_ref 107)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 13)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 199 198 68)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%] 
(code_label 68 199 69 7 386 "" [1 uses])

(note 69 68 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 72 69 73 7 NOTE_INSN_DELETED)

(note 73 72 70 7 NOTE_INSN_DELETED)

(insn 70 73 71 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 8 r8 [176])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 71 70 74 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 0 r0 [175])
        (and:DI (reg/v:DI 2 r2 [orig:135 significand ] [135])
            (reg:DI 8 r8 [176]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 2 r2 [orig:135 significand ] [135])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 74 71 75 7 arch/arm/vfp/vfp.h:333 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 75 74 76 7 arch/arm/vfp/vfp.h:333 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  9 [50.0%] 
;; Succ edge  8 [50.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5] 7 [r7]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 5 [r5] 7 [r7]
;; live  kill	

;; Pred edge  7 [50.0%]  (fallthru)
(note 76 75 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 77 76 78 8 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 7 r7 [orig:137 tm ] [137])
        (const_int 48 [0x30])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 48 [0x30])
        (nil)))

(insn 78 77 200 8 arch/arm/vfp/vfpdouble.c:454 (set (reg/v:SI 5 r5 [orig:136 exceptions ] [136])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(jump_insn 200 78 201 8 (set (pc)
        (label_ref 110)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 201 200 81)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  7 [50.0%] 
(code_label 81 201 82 9 388 "" [1 uses])

(note 82 81 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 83 82 202 9 arch/arm/vfp/vfp.h:334 (set (reg/v:SI 7 r7 [orig:137 tm ] [137])
        (const_int 16 [0x10])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 16 [0x10])
        (nil)))

(jump_insn 202 83 203 9 (set (pc)
        (label_ref 107)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 13)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 203 202 86)

;; Start of basic block ( 4) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [72.0%] 
(code_label 86 203 87 10 385 "" [1 uses])

(note 87 86 88 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 88 87 89 10 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:134 D.6097 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 89 88 90 10 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]


;; Succ edge  12 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  10 [50.0%]  (fallthru)
(note 90 89 91 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 204 11 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 7 r7 [orig:137 tm ] [137])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(jump_insn 204 91 205 11 (set (pc)
        (label_ref 107)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 205 204 94)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 7 [r7] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  10 [50.0%] 
(code_label 94 205 95 12 390 "" [1 uses])

(note 95 94 96 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 96 95 97 12 NOTE_INSN_DELETED)

(note 97 96 98 12 NOTE_INSN_DELETED)

(insn 98 97 196 12 arch/arm/vfp/vfp.h:338 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:135 significand ] [135])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 196 98 107 12 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 7 r7 [orig:137 tm ] [137])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 6 9 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  11 [100.0%] 
(code_label 107 196 108 13 387 "" [3 uses])

(note 108 107 109 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 13 arch/arm/vfp/vfpdouble.c:444 (set (reg/v:SI 5 r5 [orig:136 exceptions ] [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 8) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 110 109 111 14 389 "" [1 uses])

(note 111 110 112 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 112 111 113 14 NOTE_INSN_DELETED)

(insn 113 112 114 14 arch/arm/vfp/vfpdouble.c:456 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 7 r7 [orig:137 tm ] [137])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 114 113 115 14 arch/arm/vfp/vfpdouble.c:456 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 119)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  15 [29.0%]  (fallthru)
;; Succ edge  16 [71.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  14 [29.0%]  (fallthru)
(note 115 114 116 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 116 115 117 15 NOTE_INSN_DELETED)

(insn 117 116 118 15 arch/arm/vfp/vfpdouble.c:457 (set (reg:SI 0 r0)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(call_insn 118 117 119 15 arch/arm/vfp/vfpdouble.c:457 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 14 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  14 [71.0%] 
;; Pred edge  15 [100.0%]  (fallthru)
(code_label 119 118 120 16 392 "" [1 uses])

(note 120 119 126 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 126 120 121 16 NOTE_INSN_DELETED)

(insn 121 126 123 16 arch/arm/vfp/vfpdouble.c:459 (set (reg:SI 3 r3 [orig:138 D.4446 ] [138])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 2 [0x2])) [0 vdm.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 123 121 124 16 arch/arm/vfp/vfp.h:38 (set (reg:DI 0 r0 [orig:181 vdm.significand ] [181])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.significand+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_EQUIV (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 vdm.significand+0 S8 A64])
        (nil)))

(insn 124 123 127 16 arch/arm/vfp/vfp.h:38 (parallel [
            (set (reg/v:SI 2 r2 [orig:133 v ] [133])
                (asm_operands:SI ("cmp	%Q1, #1		@ vfp_hi64to32jamming
	movcc	%0, %R1
	orrcs	%0, %R1, #1") ("=r") 0 [
                        (reg:DI 0 r0 [orig:181 vdm.significand ] [181])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                    ] 1586691))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 127 124 122 16 arch/arm/vfp/vfpdouble.c:465 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 7 r7 [orig:137 tm ] [137])
                        (const_int 24 [0x18]))
                    (const_int 0 [0x0])))
            (set (reg:SI 1 r1 [182])
                (and:SI (reg/v:SI 7 r7 [orig:137 tm ] [137])
                    (const_int 24 [0x18])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 122 127 125 16 arch/arm/vfp/vfpdouble.c:459 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 18 [0x12])) [0 vsd.sign+0 S2 A16])
        (reg:HI 3 r3 [orig:138 D.4446 ] [138])) 176 {*movhi_insn_arch4} (nil))

(insn 125 122 128 16 arch/arm/vfp/vfpdouble.c:460 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 vsd.significand+0 S4 A32])
        (reg/v:SI 2 r2 [orig:133 v ] [133])) 167 {*arm_movsi_insn} (nil))

(jump_insn 128 125 129 16 arch/arm/vfp/vfpdouble.c:465 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 140)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16 -> ( 17 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  19 [50.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  16 [50.0%]  (fallthru)
(note 129 128 133 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 133 129 220 17 arch/arm/vfp/vfpdouble.c:467 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:137 tm ] [137])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(insn 220 133 132 17 arch/arm/vfp/vfpdouble.c:466 (set (reg:HI 1 r1)
        (const_int 255 [0xff])) 176 {*movhi_insn_arch4} (nil))

(insn 132 220 134 17 arch/arm/vfp/vfpdouble.c:466 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vsd.exponent+0 S2 A64])
        (reg:HI 1 r1)) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 255 [0xff])
        (nil)))

(jump_insn 134 132 135 17 arch/arm/vfp/vfpdouble.c:467 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 168)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 17 -> ( 18 23)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  18 [28.0%]  (fallthru)
;; Succ edge  23 [72.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 2 [r2]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2]
;; live  kill	

;; Pred edge  17 [28.0%]  (fallthru)
(note 135 134 136 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 136 135 137 18 arch/arm/vfp/vfpdouble.c:468 (set (reg:SI 2 r2 [185])
        (ior:SI (reg/v:SI 2 r2 [orig:133 v ] [133])
            (const_int 536870912 [0x20000000]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 vsd.significand+0 S4 A32])
        (nil)))

(insn 137 136 206 18 arch/arm/vfp/vfpdouble.c:468 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 vsd.significand+0 S4 A32])
        (reg:SI 2 r2 [185])) 167 {*arm_movsi_insn} (nil))

(jump_insn 206 137 207 18 (set (pc)
        (label_ref 168)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 23)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 207 206 140)

;; Start of basic block ( 16) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  16 [50.0%] 
(code_label 140 207 141 19 393 "" [1 uses])

(note 141 140 142 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 142 141 143 19 NOTE_INSN_DELETED)

(insn 143 142 144 19 arch/arm/vfp/vfpdouble.c:470 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 7 r7 [orig:137 tm ] [137])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 144 143 145 19 arch/arm/vfp/vfpdouble.c:470 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 151)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 19 -> ( 20 21)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  20 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  19 [50.0%]  (fallthru)
(note 145 144 148 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 148 145 208 20 arch/arm/vfp/vfpdouble.c:471 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vsd.exponent+0 S2 A64])
        (reg:HI 1 r1 [182])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 208 148 209 20 (set (pc)
        (label_ref 157)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  22 [100.0%] 

(barrier 209 208 151)

;; Start of basic block ( 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  19 [50.0%] 
(code_label 151 209 152 21 395 "" [1 uses])

(note 152 151 153 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 153 152 155 21 arch/arm/vfp/vfpdouble.c:473 (set (reg:SI 3 r3 [orig:190 vdm.exponent ] [190])
        (zero_extend:SI (mem/s/j/c:HI (reg/f:SI 13 sp) [0 vdm.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 155 153 156 21 arch/arm/vfp/vfpdouble.c:473 (set (reg:SI 3 r3 [191])
        (plus:SI (reg:SI 3 r3 [orig:190 vdm.exponent ] [190])
            (const_int -896 [0xfffffffffffffc80]))) 4 {*arm_addsi3} (nil))

(insn 156 155 157 21 arch/arm/vfp/vfpdouble.c:473 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 vsd.exponent+0 S2 A64])
        (reg:HI 3 r3 [191])) 176 {*movhi_insn_arch4} (nil))
;; End of basic block 21 -> ( 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21 20) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  21 [100.0%]  (fallthru)
;; Pred edge  20 [100.0%] 
(code_label 157 156 158 22 396 "" [1 uses])

(note 158 157 159 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 159 158 160 22 NOTE_INSN_DELETED)

(insn 160 159 162 22 arch/arm/vfp/vfpdouble.c:475 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:141 sd ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 162 160 163 22 arch/arm/vfp/vfpdouble.c:475 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:144 fpscr ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 163 162 161 22 arch/arm/vfp/vfpdouble.c:475 (set (reg:SI 3 r3)
        (reg/v:SI 5 r5 [orig:136 exceptions ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 161 163 164 22 arch/arm/vfp/vfpdouble.c:475 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (nil))

(call_insn 164 161 165 22 arch/arm/vfp/vfpdouble.c:475 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__vfp_single_normaliseround") [flags 0x41] <function_decl 0x10a9d580 __vfp_single_normaliseround>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 165 164 210 22 arch/arm/vfp/vfpdouble.c:475 (set (reg/v:SI 5 r5 [orig:136 exceptions ] [136])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 210 165 211 22 arch/arm/vfp/vfpdouble.c:475 (set (pc)
        (label_ref 179)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 24)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 211 210 168)

;; Start of basic block ( 17 18) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  17 [72.0%] 
;; Pred edge  18 [100.0%] 
(code_label 168 211 169 23 394 "" [2 uses])

(note 169 168 174 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 174 169 175 23 NOTE_INSN_DELETED)

(note 175 174 170 23 NOTE_INSN_DELETED)

(insn 170 175 171 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 3 r3 [193])
        (ashift:SI (reg:SI 3 r3 [orig:138 D.4446 ] [138])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 171 170 177 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 3 r3 [195])
        (plus:SI (reg:SI 3 r3 [193])
            (const_int 2130706432 [0x7f000000]))) 4 {*arm_addsi3} (nil))

(insn 177 171 172 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:141 sd ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 172 177 215 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 3 r3 [194])
        (plus:SI (reg:SI 3 r3 [195])
            (const_int 8388608 [0x800000]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 3 r3 [193])
            (const_int 2139095040 [0x7f800000]))
        (nil)))

(insn 215 172 176 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 0 r0 [orig:197 vsd.significand ] [197])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 vsd.significand+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 vsd.significand+0 S4 A32])
        (nil)))

(insn 176 215 178 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 0 r0)
        (plus:SI (lshiftrt:SI (reg:SI 0 r0 [orig:197 vsd.significand ] [197])
                (const_int 7 [0x7]))
            (reg:SI 3 r3 [194]))) 270 {*arith_shiftsi} (nil))

(call_insn 178 176 179 23 arch/arm/vfp/vfpdouble.c:478 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_float") [flags 0x41] <function_decl 0x10a9d180 vfp_put_float>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 23 -> ( 24)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 23 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  22 [100.0%] 
(code_label 179 178 180 24 397 "" [1 uses])

(note 180 179 185 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 185 180 191 24 arch/arm/vfp/vfpdouble.c:480 (set (reg/i:SI 0 r0)
        (reg/v:SI 5 r5 [orig:136 exceptions ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 191 185 214 24 arch/arm/vfp/vfpdouble.c:480 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 24 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 214 191 218 NOTE_INSN_DELETED)

(note 218 214 0 NOTE_INSN_DELETED)


;; Function vfp_double_fsqrt (vfp_double_fsqrt)[0:158]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 756.
verify found no changes in insn with uid = 756.
deleting insn with uid = 574.
rescanning insn with uid = 753.
deleting insn with uid = 753.
deleting insn with uid = 519.
scanning new insn with uid = 757.
verify found no changes in insn with uid = 757.
deleting insn with uid = 413.
rescanning insn with uid = 751.
deleting insn with uid = 751.
deleting insn with uid = 355.
scanning new insn with uid = 758.
verify found no changes in insn with uid = 758.
deleting insn with uid = 57.
scanning new insn with uid = 759.
verify found no changes in insn with uid = 759.
deleting insn with uid = 35.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 60 n_edges 88 count 116 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 60 n_edges 88 count 120 (    2)

Pass 0 for finding allocno costs

    a122 (r382,l1) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r382,l0) best GENERAL_REGS, cover GENERAL_REGS
    a107 (r381,l2) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r381,l0) best GENERAL_REGS, cover GENERAL_REGS
    a106 (r380,l2) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r380,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r379,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r378,l0) best GENERAL_REGS, cover GENERAL_REGS
    a121 (r377,l1) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r377,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r376,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r373,l0) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r371,l0) best GENERAL_REGS, cover GENERAL_REGS
    a93 (r362,l0) best GENERAL_REGS, cover GENERAL_REGS
    a95 (r361,l0) best GENERAL_REGS, cover GENERAL_REGS
    a94 (r357,l0) best GENERAL_REGS, cover GENERAL_REGS
    a120 (r346,l1) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r346,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r339,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r337,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r336,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r332,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r331,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r329,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r327,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r326,l0) best GENERAL_REGS, cover GENERAL_REGS
    a119 (r324,l1) best GENERAL_REGS, cover GENERAL_REGS
    a105 (r324,l2) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r324,l0) best GENERAL_REGS, cover GENERAL_REGS
    a108 (r321,l2) best GENERAL_REGS, cover GENERAL_REGS
    a109 (r320,l2) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r319,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r316,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r305,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r303,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r302,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r301,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r298,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r297,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r295,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r292,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r289,l0) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r276,l0) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r275,l0) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r269,l0) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r268,l0) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r260,l0) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r259,l0) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r255,l0) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r251,l0) best GENERAL_REGS, cover GENERAL_REGS
    a82 (r245,l0) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r244,l0) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r242,l0) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r239,l0) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r238,l0) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r236,l0) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r234,l0) best GENERAL_REGS, cover GENERAL_REGS
    a83 (r232,l0) best GENERAL_REGS, cover GENERAL_REGS
    a86 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a90 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    a89 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a91 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    a92 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a96 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a99 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a97 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a118 (r191,l1) best GENERAL_REGS, cover GENERAL_REGS
    a104 (r191,l2) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a117 (r188,l1) best GENERAL_REGS, cover GENERAL_REGS
    a103 (r188,l2) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a98 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a116 (r181,l1) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a84 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a102 (r175,l2) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a101 (r174,l2) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a87 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a88 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a85 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a115 (r160,l1) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a114 (r156,l1) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a113 (r155,l1) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a112 (r154,l1) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a111 (r153,l1) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a100 (r144,l2) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a110 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r337,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r339,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r336,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r332,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r376,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r331,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r329,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r326,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r144,l0) costs: LO_REGS:0,4000 BASE_REGS:0,4000 HI_REGS:0,4000 GENERAL_REGS:0,4000 MEM:120000
  a13(r327,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a15(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a16(r381,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r380,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r319,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a20(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a21(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r379,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a25(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r316,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a27(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a29(r324,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a30(r150,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:54000
  a31(r305,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r373,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a33(r377,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a34(r303,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r301,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r302,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a38(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a39(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a40(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r160,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a42(r298,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r346,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a44(r297,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a45(r295,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a46(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a47(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a48(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a49(r292,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a50(r382,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a51(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a52(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a53(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a54(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r378,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r289,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a58(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a60(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a61(r162,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a62(r276,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a63(r275,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a64(r371,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a65(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a67(r268,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a68(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a71(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a72(r251,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a74(r177,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:82000
  a75(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a76(r242,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a77(r239,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a78(r244,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a79(r238,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a80(r234,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a81(r236,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a82(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a84(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a85(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a86(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a87(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a88(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a89(r222,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a90(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a92(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a93(r362,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a94(r357,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r361,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a96(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a97(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a98(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a99(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a100(r144,l2) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:54000
  a101(r174,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a102(r175,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a103(r188,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a104(r191,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a105(r324,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a106(r380,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a107(r381,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a108(r321,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a109(r320,l2) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a110(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a111(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a112(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a113(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a114(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a115(r160,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a116(r181,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a117(r188,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a118(r191,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a119(r324,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a120(r346,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a121(r377,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a122(r382,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r382: preferred GENERAL_REGS, alternative NO_REGS
    r381: preferred GENERAL_REGS, alternative NO_REGS
    r380: preferred GENERAL_REGS, alternative NO_REGS
    r379: preferred GENERAL_REGS, alternative NO_REGS
    r378: preferred GENERAL_REGS, alternative NO_REGS
    r377: preferred GENERAL_REGS, alternative NO_REGS
    r376: preferred GENERAL_REGS, alternative NO_REGS
    r373: preferred GENERAL_REGS, alternative NO_REGS
    r371: preferred GENERAL_REGS, alternative NO_REGS
    r362: preferred GENERAL_REGS, alternative NO_REGS
    r361: preferred GENERAL_REGS, alternative NO_REGS
    r357: preferred GENERAL_REGS, alternative NO_REGS
    r346: preferred GENERAL_REGS, alternative NO_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS
    r331: preferred GENERAL_REGS, alternative NO_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS
    r297: preferred GENERAL_REGS, alternative NO_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r337,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r339,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r336,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r332,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r376,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r331,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r329,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r326,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r144,l0) costs: LO_REGS:0,4000 BASE_REGS:0,4000 HI_REGS:0,4000 GENERAL_REGS:0,4000 MEM:120000
  a13(r327,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a15(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a16(r381,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r380,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r319,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a20(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a21(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r379,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a25(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r316,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a27(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a29(r324,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a30(r150,l0) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:54000
  a31(r305,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r373,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a33(r377,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a34(r303,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r301,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r302,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a38(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a39(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a40(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r160,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a42(r298,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r346,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a44(r297,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a45(r295,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a46(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a47(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a48(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a49(r292,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a50(r382,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a51(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a52(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a53(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a54(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r378,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r289,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a58(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a59(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:52000
  a60(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a61(r162,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a62(r276,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:32000
  a63(r275,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a64(r371,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a65(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a67(r268,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a68(r259,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r260,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a70(r257,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a71(r255,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a72(r251,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r254,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a74(r177,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:82000
  a75(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a76(r242,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:62000
  a77(r239,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a78(r244,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a79(r238,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a80(r234,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a81(r236,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a82(r245,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a84(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a85(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a86(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a87(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:130000
  a88(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a89(r222,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a90(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r220,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a92(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a93(r362,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a94(r357,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r361,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a96(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a97(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a98(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a99(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a100(r144,l2) costs: LO_REGS:4000,4000 BASE_REGS:4000,4000 HI_REGS:4000,4000 GENERAL_REGS:4000,4000 MEM:54000
  a101(r174,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a102(r175,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a103(r188,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a104(r191,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a105(r324,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a106(r380,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a107(r381,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a108(r321,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a109(r320,l2) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a110(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a111(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a112(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a113(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a114(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a115(r160,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a116(r181,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a117(r188,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a118(r191,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a119(r324,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a120(r346,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a121(r377,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a122(r382,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 594(l0): point = 0
   Insn 588(l0): point = 2
   Insn 581(l0): point = 5
   Insn 580(l0): point = 7
   Insn 572(l0): point = 9
   Insn 575(l0): point = 11
   Insn 756(l0): point = 13
   Insn 571(l0): point = 15
   Insn 579(l0): point = 20
   Insn 577(l0): point = 22
   Insn 578(l0): point = 24
   Insn 576(l0): point = 26
   Insn 570(l0): point = 28
   Insn 568(l0): point = 32
   Insn 567(l0): point = 35
   Insn 566(l0): point = 37
   Insn 562(l0): point = 39
   Insn 561(l0): point = 41
   Insn 560(l0): point = 43
   Insn 557(l0): point = 46
   Insn 556(l0): point = 48
   Insn 555(l0): point = 53
   Insn 554(l0): point = 59
   Insn 552(l0): point = 62
   Insn 551(l0): point = 65
   Insn 550(l0): point = 67
   Insn 546(l0): point = 69
   Insn 547(l0): point = 71
   Insn 745(l0): point = 77
   Insn 526(l0): point = 79
   Insn 533(l0): point = 81
   Insn 521(l0): point = 83
   Insn 754(l0): point = 85
   Insn 520(l0): point = 87
   Insn 753(l0): point = 93
   Insn 518(l0): point = 95
   Insn 699(l0): point = 100
   Insn 503(l0): point = 102
   Insn 502(l0): point = 108
   Insn 500(l0): point = 110
   Insn 499(l0): point = 116
   Insn 501(l0): point = 118
   Insn 498(l0): point = 120
   Insn 718(l0): point = 122
   Insn 717(l0): point = 124
   Insn 495(l0): point = 127
   Insn 743(l0): point = 130
   Insn 490(l0): point = 132
   Insn 483(l0): point = 135
   Insn 482(l0): point = 137
   Insn 481(l0): point = 140
   Insn 479(l0): point = 143
   Insn 455(l0): point = 145
   Insn 474(l0): point = 147
   Insn 449(l0): point = 149
   Insn 478(l0): point = 151
   Insn 448(l0): point = 153
   Insn 470(l0): point = 155
   Insn 447(l0): point = 161
   Insn 446(l0): point = 163
   Insn 466(l0): point = 165
   Insn 716(l0): point = 167
   Insn 459(l0): point = 169
   Insn 450(l0): point = 171
   Insn 741(l0): point = 174
   Insn 440(l0): point = 176
   Insn 439(l0): point = 178
   Insn 432(l0): point = 181
   Insn 431(l0): point = 183
   Insn 428(l0): point = 186
   Insn 427(l0): point = 188
   Insn 420(l0): point = 191
   Insn 419(l0): point = 193
   Insn 416(l0): point = 196
   Insn 415(l0): point = 198
   Insn 414(l0): point = 200
   Insn 757(l0): point = 205
   Insn 412(l0): point = 207
   Insn 411(l0): point = 209
   Insn 410(l0): point = 215
   Insn 409(l0): point = 221
   Insn 406(l0): point = 224
   Insn 404(l0): point = 228
   Insn 403(l0): point = 230
   Insn 402(l0): point = 232
   Insn 739(l0): point = 235
   Insn 397(l0): point = 237
   Insn 396(l0): point = 242
   Insn 385(l0): point = 245
   Insn 384(l0): point = 247
   Insn 383(l0): point = 249
   Insn 382(l0): point = 254
   Insn 380(l0): point = 256
   Insn 381(l0): point = 258
   Insn 379(l0): point = 260
   Insn 715(l0): point = 262
   Insn 714(l0): point = 264
   Insn 737(l0): point = 267
   Insn 357(l0): point = 269
   Insn 363(l0): point = 271
   Insn 752(l0): point = 273
   Insn 359(l0): point = 275
   Insn 751(l0): point = 277
   Insn 356(l0): point = 279
   Insn 358(l0): point = 285
   Insn 354(l0): point = 287
   Insn 696(l0): point = 292
   Insn 339(l0): point = 294
   Insn 338(l0): point = 300
   Insn 336(l0): point = 302
   Insn 713(l0): point = 308
   Insn 335(l0): point = 310
   Insn 337(l0): point = 312
   Insn 334(l0): point = 314
   Insn 712(l0): point = 316
   Insn 711(l0): point = 318
   Insn 331(l0): point = 321
   Insn 735(l0): point = 324
   Insn 326(l0): point = 326
   Insn 319(l0): point = 329
   Insn 318(l0): point = 331
   Insn 317(l0): point = 334
   Insn 315(l0): point = 337
   Insn 314(l0): point = 339
   Insn 306(l0): point = 341
   Insn 282(l0): point = 343
   Insn 310(l0): point = 345
   Insn 302(l0): point = 347
   Insn 286(l0): point = 349
   Insn 277(l0): point = 351
   Insn 295(l0): point = 353
   Insn 275(l0): point = 355
   Insn 272(l0): point = 358
   Insn 271(l0): point = 360
   Insn 269(l0): point = 362
   Insn 268(l0): point = 364
   Insn 267(l0): point = 366
   Insn 710(l0): point = 368
   Insn 733(l0): point = 371
   Insn 262(l0): point = 373
   Insn 251(l0): point = 376
   Insn 250(l0): point = 378
   Insn 248(l0): point = 380
   Insn 247(l0): point = 382
   Insn 246(l0): point = 384
   Insn 709(l0): point = 386
   Insn 731(l0): point = 389
   Insn 241(l0): point = 391
   Insn 234(l0): point = 394
   Insn 233(l0): point = 396
   Insn 232(l0): point = 399
   Insn 230(l0): point = 402
   Insn 229(l0): point = 404
   Insn 228(l0): point = 406
   Insn 675(l0): point = 408
   Insn 674(l0): point = 410
   Insn 673(l0): point = 412
   Insn 225(l0): point = 414
   Insn 224(l0): point = 416
   Insn 216(l0): point = 418
   Insn 218(l0): point = 420
   Insn 223(l0): point = 422
   Insn 215(l0): point = 424
   Insn 217(l0): point = 426
   Insn 211(l0): point = 428
   Insn 210(l0): point = 430
   Insn 202(l0): point = 432
   Insn 201(l0): point = 434
   Insn 200(l0): point = 436
   Insn 198(l0): point = 438
   Insn 193(l0): point = 440
   Insn 748(l0): point = 442
   Insn 208(l0): point = 444
   Insn 747(l0): point = 446
   Insn 214(l0): point = 448
   Insn 209(l0): point = 450
   Insn 708(l0): point = 452
   Insn 195(l0): point = 454
   Insn 189(l0): point = 457
   Insn 188(l0): point = 459
   Insn 187(l0): point = 461
   Insn 184(l0): point = 464
   Insn 183(l0): point = 466
   Insn 180(l0): point = 469
   Insn 179(l0): point = 471
   Insn 176(l0): point = 474
   Insn 175(l0): point = 476
   Insn 729(l0): point = 479
   Insn 168(l0): point = 481
   Insn 167(l0): point = 483
   Insn 165(l0): point = 485
   Insn 163(l0): point = 490
   Insn 155(l0): point = 492
   Insn 161(l0): point = 498
   Insn 154(l0): point = 500
   Insn 166(l0): point = 502
   Insn 153(l0): point = 504
   Insn 149(l0): point = 506
   Insn 160(l0): point = 508
   Insn 148(l0): point = 510
   Insn 157(l0): point = 512
   Insn 707(l0): point = 514
   Insn 151(l0): point = 516
   Insn 706(l0): point = 518
   Insn 159(l0): point = 520
   Insn 705(l0): point = 522
   Insn 146(l0): point = 524
   Insn 142(l0): point = 527
   Insn 140(l0): point = 529
   Insn 727(l0): point = 532
   Insn 135(l0): point = 534
   Insn 134(l0): point = 536
   Insn 132(l0): point = 539
   Insn 131(l0): point = 541
   Insn 725(l0): point = 544
   Insn 126(l0): point = 546
   Insn 124(l0): point = 548
   Insn 123(l0): point = 550
   Insn 121(l0): point = 552
   Insn 120(l0): point = 554
   Insn 119(l0): point = 556
   Insn 122(l0): point = 558
   Insn 117(l0): point = 560
   Insn 115(l0): point = 563
   Insn 114(l0): point = 565
   Insn 111(l0): point = 568
   Insn 110(l0): point = 570
   Insn 694(l0): point = 573
   Insn 693(l0): point = 575
   Insn 723(l0): point = 578
   Insn 91(l0): point = 580
   Insn 89(l0): point = 583
   Insn 88(l0): point = 585
   Insn 721(l0): point = 588
   Insn 692(l0): point = 590
   Insn 72(l0): point = 592
   Insn 71(l0): point = 597
   Insn 719(l0): point = 600
   Insn 66(l0): point = 602
   Insn 64(l0): point = 605
   Insn 63(l0): point = 607
   Insn 59(l0): point = 610
   Insn 58(l0): point = 612
   Insn 758(l0): point = 614
   Insn 53(l0): point = 616
   Insn 50(l0): point = 619
   Insn 49(l0): point = 624
   Insn 47(l0): point = 627
   Insn 17(l0): point = 629
   Insn 31(l0): point = 631
   Insn 23(l0): point = 633
   Insn 16(l0): point = 635
   Insn 30(l0): point = 637
   Insn 29(l0): point = 639
   Insn 46(l0): point = 641
   Insn 759(l0): point = 643
   Insn 14(l0): point = 645
   Insn 704(l0): point = 647
   Insn 26(l0): point = 649
   Insn 25(l0): point = 651
   Insn 27(l0): point = 653
   Insn 22(l0): point = 655
   Insn 13(l0): point = 657
   Insn 12(l0): point = 662
   Insn 11(l0): point = 664
   Insn 10(l0): point = 666
   Insn 5(l0): point = 668
   Insn 9(l0): point = 670
   Insn 2(l0): point = 672
   Insn 537(l2): point = 675
   Insn 536(l2): point = 677
   Insn 534(l2): point = 679
   Insn 530(l2): point = 686
   Insn 529(l2): point = 688
   Insn 527(l2): point = 690
   Insn 528(l2): point = 695
   Insn 525(l2): point = 697
   Insn 370(l1): point = 704
   Insn 369(l1): point = 706
   Insn 365(l1): point = 709
   Insn 364(l1): point = 711
 a0(r184): [479..481] [3..5]
 a1(r337): [18..18] [10..16]
 a2(r339): [12..13]
 a3(r336): [16..29]
 a4(r332): [35..41] [16..32]
 a5(r191): [559..668] [25..478]
 a6(r188): [503..672] [27..478]
 a7(r180): [29..43]
 a8(r376): [38..39]
 a9(r331): [51..51] [47..49]
 a10(r329): [49..59]
 a11(r326): [65..69] [49..62]
 a12(r144): [181..221] [54..173]
 a13(r327): [74..74] [68..72]
 a14(r174): [72..93]
 a15(r175): [72..85]
 a16(r381): [77..79]
 a17(r380): [77..81]
 a18(r133): [84..111]
 a19(r319): [84..97]
 a20(r179): [86..167]
 a21(r147): [130..132] [88..127]
 a22(r148): [98..103] [96..96]
 a23(r379): [96..100]
 a24(r134): [101..124]
 a25(r149): [103..147]
 a26(r316): [103..122]
 a27(r151): [111..145]
 a28(r136): [119..156]
 a29(r324): [568..674] [181..478] [77..173]
 a30(r150): [138..165]
 a31(r305): [146..171]
 a32(r373): [148..169]
 a33(r377): [181..412] [154..173]
 a34(r303): [177..178]
 a35(r301): [203..203] [194..201]
 a36(r302): [201..205]
 a37(r137): [389..391] [240..240] [235..238] [210..226]
 a38(r181): [216..452]
 a39(r143): [371..373] [238..368] [225..234]
 a40(r159): [252..252] [245..250] [231..234]
 a41(r160): [245..349] [233..234]
 a42(r298): [238..242]
 a43(r346): [248..380]
 a44(r297): [250..262]
 a45(r295): [250..264]
 a46(r155): [259..273]
 a47(r156): [261..277]
 a48(r139): [270..303]
 a49(r292): [270..289]
 a50(r382): [267..271]
 a51(r154): [267..308]
 a52(r140): [276..318]
 a53(r166): [324..326] [280..321]
 a54(r165): [290..295] [288..288]
 a55(r378): [288..292]
 a56(r164): [295..345]
 a57(r289): [295..316]
 a58(r161): [303..343]
 a59(r142): [313..341]
 a60(r153): [267..386]
 a61(r162): [332..347]
 a62(r276): [342..351]
 a63(r275): [344..355]
 a64(r371): [346..353]
 a65(r269): [417..420]
 a66(r182): [419..428]
 a67(r268): [421..426]
 a68(r259): [433..434]
 a69(r260): [435..436]
 a70(r257): [437..438]
 a71(r255): [439..446]
 a72(r251): [441..461]
 a73(r254): [445..454]
 a74(r177): [600..602] [588..590] [578..580] [566..573] [472..478]
 a75(r178): [544..548] [532..534] [482..527]
 a76(r242): [486..514]
 a77(r239): [486..493]
 a78(r244): [491..512]
 a79(r238): [493..518]
 a80(r234): [493..522]
 a81(r236): [505..516]
 a82(r245): [509..520]
 a83(r232): [511..524]
 a84(r176): [544..546] [532..536] [513..529]
 a85(r171): [563..635] [542..543]
 a86(r228): [547..560]
 a87(r173): [605..647] [593..599] [583..587] [576..577]
 a88(r172): [610..655] [586..587]
 a89(r222): [595..595] [591..593]
 a90(r223): [593..597]
 a91(r220): [613..614]
 a92(r216): [620..624]
 a93(r362): [632..651]
 a94(r357): [636..645]
 a95(r361): [640..653]
 a96(r208): [642..643]
 a97(r192): [660..660] [646..658]
 a98(r186): [650..664]
 a99(r193): [658..662]
 a100(r144): [675..703]
 a101(r174): [675..703]
 a102(r175): [675..703]
 a103(r188): [675..703]
 a104(r191): [675..703]
 a105(r324): [675..703]
 a106(r380): [675..703]
 a107(r381): [675..703]
 a108(r321): [693..693] [687..691]
 a109(r320): [691..698]
 a110(r143): [704..717]
 a111(r153): [704..717]
 a112(r154): [704..717]
 a113(r155): [704..717]
 a114(r156): [704..717]
 a115(r160): [704..717]
 a116(r181): [704..717]
 a117(r188): [704..717]
 a118(r191): [704..717]
 a119(r324): [704..717]
 a120(r346): [704..717]
 a121(r377): [704..717]
 a122(r382): [704..717]
Compressing live ranges: from 718 to 233 - 32%
Ranges after the compression:
 a0(r184): [148..149] [0..1]
 a1(r337): [6..6] [2..5]
 a2(r339): [3..4]
 a3(r336): [5..9]
 a4(r332): [11..14] [5..10]
 a5(r191): [177..222] [7..147]
 a6(r188): [154..223] [8..147]
 a7(r180): [9..15]
 a8(r376): [12..13]
 a9(r331): [18..18] [16..17]
 a10(r329): [17..20]
 a11(r326): [22..24] [17..21]
 a12(r144): [62..69] [19..59]
 a13(r327): [26..26] [23..25]
 a14(r174): [25..34]
 a15(r175): [25..31]
 a16(r381): [27..28]
 a17(r380): [27..29]
 a18(r133): [30..41]
 a19(r319): [30..36]
 a20(r179): [32..56]
 a21(r147): [46..47] [33..45]
 a22(r148): [37..40] [35..35]
 a23(r379): [35..38]
 a24(r134): [39..44]
 a25(r149): [40..51]
 a26(r316): [40..43]
 a27(r151): [41..49]
 a28(r136): [42..54]
 a29(r324): [181..224] [62..147] [27..59]
 a30(r150): [48..55]
 a31(r305): [50..58]
 a32(r373): [52..57]
 a33(r377): [62..126] [53..59]
 a34(r303): [60..61]
 a35(r301): [65..65] [63..64]
 a36(r302): [64..66]
 a37(r137): [124..125] [77..77] [75..76] [67..71]
 a38(r181): [68..143]
 a39(r143): [120..121] [76..119] [70..74]
 a40(r159): [82..82] [79..81] [72..74]
 a41(r160): [79..115] [73..74]
 a42(r298): [76..78]
 a43(r346): [80..122]
 a44(r297): [81..85]
 a45(r295): [81..86]
 a46(r155): [83..90]
 a47(r156): [84..92]
 a48(r139): [88..99]
 a49(r292): [88..95]
 a50(r382): [87..89]
 a51(r154): [87..100]
 a52(r140): [91..103]
 a53(r166): [105..106] [93..104]
 a54(r165): [96..98] [94..94]
 a55(r378): [94..97]
 a56(r164): [98..112]
 a57(r289): [98..102]
 a58(r161): [99..110]
 a59(r142): [101..108]
 a60(r153): [87..123]
 a61(r162): [107..114]
 a62(r276): [109..116]
 a63(r275): [111..118]
 a64(r371): [113..117]
 a65(r269): [127..129]
 a66(r182): [128..132]
 a67(r268): [130..131]
 a68(r259): [133..134]
 a69(r260): [135..136]
 a70(r257): [137..138]
 a71(r255): [139..142]
 a72(r251): [140..145]
 a73(r254): [141..144]
 a74(r177): [197..198] [190..191] [185..186] [180..182] [146..147]
 a75(r178): [173..176] [168..169] [150..166]
 a76(r242): [151..160]
 a77(r239): [151..153]
 a78(r244): [152..158]
 a79(r238): [153..162]
 a80(r234): [153..164]
 a81(r236): [155..161]
 a82(r245): [156..163]
 a83(r232): [157..165]
 a84(r176): [173..174] [168..170] [159..167]
 a85(r171): [179..206] [171..172]
 a86(r228): [175..178]
 a87(r173): [199..213] [193..196] [187..189] [183..184]
 a88(r172): [200..217] [188..189]
 a89(r222): [194..194] [192..193]
 a90(r223): [193..195]
 a91(r220): [201..202]
 a92(r216): [203..204]
 a93(r362): [205..215]
 a94(r357): [207..211]
 a95(r361): [208..216]
 a96(r208): [209..210]
 a97(r192): [219..219] [212..218]
 a98(r186): [214..221]
 a99(r193): [218..220]
 a100(r144): [225..230]
 a101(r174): [225..230]
 a102(r175): [225..230]
 a103(r188): [225..230]
 a104(r191): [225..230]
 a105(r324): [225..230]
 a106(r380): [225..230]
 a107(r381): [225..230]
 a108(r321): [228..228] [226..227]
 a109(r320): [227..229]
 a110(r143): [231..232]
 a111(r153): [231..232]
 a112(r154): [231..232]
 a113(r155): [231..232]
 a114(r156): [231..232]
 a115(r160): [231..232]
 a116(r181): [231..232]
 a117(r188): [231..232]
 a118(r191): [231..232]
 a119(r324): [231..232]
 a120(r346): [231..232]
 a121(r377): [231..232]
 a122(r382): [231..232]
    Creating cap  a123(r321,l0: a108(r321,l2))
    Creating cap  a124(r320,l0: a109(r320,l2))
+++Allocating 1664 bytes for conflict table (uncompressed size 2000)
;; a0(r184,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r337,l0) conflicts: a2(r339,l0) a3(r336,l0) a4(r332,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a2(r339,l0) conflicts: a1(r337,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r336,l0) conflicts: a1(r337,l0) a4(r332,l0) a5(r191,l0) a6(r188,l0) a7(r180,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a4(r332,l0) conflicts: a1(r337,l0) a3(r336,l0) a5(r191,l0) a6(r188,l0) a7(r180,l0) a8(r376,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a5(r191,l0) conflicts: a3(r336,l0) a4(r332,l0) a6(r188,l0) a7(r180,l0) a8(r376,l0) a9(r331,l0) a10(r329,l0) a11(r326,l0) a12(r144,l0) a13(r327,l0) a14(r174,l0) a15(r175,l0) a16(r381,l0) a17(r380,l0) a29(r324,l0) a19(r319,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a23(r379,l0) a22(r148,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0) a27(r151,l0) a28(r136,l0) a30(r150,l0) a31(r305,l0) a32(r373,l0) a33(r377,l0) a34(r303,l0) a35(r301,l0) a36(r302,l0) a37(r137,l0) a38(r181,l0) a39(r143,l0) a40(r159,l0) a41(r160,l0) a42(r298,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0) a65(r269,l0) a66(r182,l0) a67(r268,l0) a68(r259,l0) a69(r260,l0) a70(r257,l0) a71(r255,l0) a72(r251,l0) a73(r254,l0) a74(r177,l0) a85(r171,l0) a86(r228,l0) a87(r173,l0) a88(r172,l0) a89(r222,l0) a90(r223,l0) a91(r220,l0) a92(r216,l0) a93(r362,l0) a94(r357,l0) a95(r361,l0) a96(r208,l0) a97(r192,l0) a98(r186,l0) a99(r193,l0) a123(r321,l0) a124(r320,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a6(r188,l0) conflicts: a3(r336,l0) a4(r332,l0) a5(r191,l0) a7(r180,l0) a8(r376,l0) a9(r331,l0) a10(r329,l0) a11(r326,l0) a12(r144,l0) a13(r327,l0) a14(r174,l0) a15(r175,l0) a16(r381,l0) a17(r380,l0) a29(r324,l0) a19(r319,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a23(r379,l0) a22(r148,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0) a27(r151,l0) a28(r136,l0) a30(r150,l0) a31(r305,l0) a32(r373,l0) a33(r377,l0) a34(r303,l0) a35(r301,l0) a36(r302,l0) a37(r137,l0) a38(r181,l0) a39(r143,l0) a40(r159,l0) a41(r160,l0) a42(r298,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0) a65(r269,l0) a66(r182,l0) a67(r268,l0) a68(r259,l0) a69(r260,l0) a70(r257,l0) a71(r255,l0) a72(r251,l0) a73(r254,l0) a74(r177,l0) a75(r178,l0) a76(r242,l0) a78(r244,l0) a79(r238,l0) a80(r234,l0) a81(r236,l0) a82(r245,l0) a83(r232,l0) a84(r176,l0) a85(r171,l0) a86(r228,l0) a87(r173,l0) a88(r172,l0) a89(r222,l0) a90(r223,l0) a91(r220,l0) a92(r216,l0) a93(r362,l0) a94(r357,l0) a95(r361,l0) a96(r208,l0) a97(r192,l0) a98(r186,l0) a99(r193,l0) a123(r321,l0) a124(r320,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a7(r180,l0) conflicts: a3(r336,l0) a4(r332,l0) a5(r191,l0) a6(r188,l0) a8(r376,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r376,l0) conflicts: a4(r332,l0) a5(r191,l0) a6(r188,l0) a7(r180,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r331,l0) conflicts: a5(r191,l0) a6(r188,l0) a10(r329,l0) a11(r326,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r329,l0) conflicts: a5(r191,l0) a6(r188,l0) a9(r331,l0) a11(r326,l0) a12(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r326,l0) conflicts: a5(r191,l0) a6(r188,l0) a9(r331,l0) a10(r329,l0) a12(r144,l0) a13(r327,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r144,l0) conflicts: a5(r191,l0) a6(r188,l0) a10(r329,l0) a11(r326,l0) a13(r327,l0) a14(r174,l0) a15(r175,l0) a16(r381,l0) a17(r380,l0) a29(r324,l0) a19(r319,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a23(r379,l0) a22(r148,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0) a27(r151,l0) a28(r136,l0) a30(r150,l0) a31(r305,l0) a32(r373,l0) a33(r377,l0) a35(r301,l0) a36(r302,l0) a37(r137,l0) a38(r181,l0) a123(r321,l0) a124(r320,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r327,l0) conflicts: a5(r191,l0) a6(r188,l0) a11(r326,l0) a12(r144,l0) a14(r174,l0) a15(r175,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r174,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a13(r327,l0) a15(r175,l0) a16(r381,l0) a17(r380,l0) a29(r324,l0) a19(r319,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a123(r321,l0) a124(r320,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r175,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a13(r327,l0) a14(r174,l0) a16(r381,l0) a17(r380,l0) a29(r324,l0) a19(r319,l0) a18(r133,l0) a123(r321,l0) a124(r320,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r381,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a14(r174,l0) a15(r175,l0) a17(r380,l0) a29(r324,l0) a123(r321,l0) a124(r320,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a17(r380,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a14(r174,l0) a15(r175,l0) a16(r381,l0) a29(r324,l0) a123(r321,l0) a124(r320,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r133,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a14(r174,l0) a15(r175,l0) a29(r324,l0) a19(r319,l0) a20(r179,l0) a21(r147,l0) a23(r379,l0) a22(r148,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0) a27(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r319,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a14(r174,l0) a15(r175,l0) a29(r324,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a23(r379,l0) a22(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r179,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a14(r174,l0) a29(r324,l0) a19(r319,l0) a18(r133,l0) a21(r147,l0) a23(r379,l0) a22(r148,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0) a27(r151,l0) a28(r136,l0) a30(r150,l0) a31(r305,l0) a32(r373,l0) a33(r377,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r147,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a14(r174,l0) a29(r324,l0) a19(r319,l0) a18(r133,l0) a20(r179,l0) a23(r379,l0) a22(r148,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0) a27(r151,l0) a28(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r148,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a19(r319,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a23(r379,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r379,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a19(r319,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a22(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r134,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a22(r148,l0) a26(r316,l0) a25(r149,l0) a27(r151,l0) a28(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r149,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a22(r148,l0) a24(r134,l0) a26(r316,l0) a27(r151,l0) a28(r136,l0) a30(r150,l0) a31(r305,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r316,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a22(r148,l0) a24(r134,l0) a25(r149,l0) a27(r151,l0) a28(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r151,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0) a28(r136,l0) a30(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r136,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a20(r179,l0) a21(r147,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0) a27(r151,l0) a30(r150,l0) a31(r305,l0) a32(r373,l0) a33(r377,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r324,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a14(r174,l0) a15(r175,l0) a16(r381,l0) a17(r380,l0) a19(r319,l0) a18(r133,l0) a20(r179,l0) a21(r147,l0) a23(r379,l0) a22(r148,l0) a24(r134,l0) a26(r316,l0) a25(r149,l0) a27(r151,l0) a28(r136,l0) a30(r150,l0) a31(r305,l0) a32(r373,l0) a33(r377,l0) a35(r301,l0) a36(r302,l0) a37(r137,l0) a38(r181,l0) a39(r143,l0) a40(r159,l0) a41(r160,l0) a42(r298,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0) a65(r269,l0) a66(r182,l0) a67(r268,l0) a68(r259,l0) a69(r260,l0) a70(r257,l0) a71(r255,l0) a72(r251,l0) a73(r254,l0) a74(r177,l0) a85(r171,l0) a87(r173,l0) a88(r172,l0) a89(r222,l0) a90(r223,l0) a91(r220,l0) a92(r216,l0) a93(r362,l0) a94(r357,l0) a95(r361,l0) a96(r208,l0) a97(r192,l0) a98(r186,l0) a99(r193,l0) a123(r321,l0) a124(r320,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a30(r150,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a20(r179,l0) a25(r149,l0) a27(r151,l0) a28(r136,l0) a31(r305,l0) a32(r373,l0) a33(r377,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r305,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a20(r179,l0) a25(r149,l0) a28(r136,l0) a30(r150,l0) a32(r373,l0) a33(r377,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a32(r373,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a20(r179,l0) a28(r136,l0) a30(r150,l0) a31(r305,l0) a33(r377,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r377,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a20(r179,l0) a28(r136,l0) a30(r150,l0) a31(r305,l0) a32(r373,l0) a35(r301,l0) a36(r302,l0) a37(r137,l0) a38(r181,l0) a39(r143,l0) a40(r159,l0) a41(r160,l0) a42(r298,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a34(r303,l0) conflicts: a5(r191,l0) a6(r188,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r301,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a33(r377,l0) a36(r302,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r302,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a33(r377,l0) a35(r301,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r137,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a42(r298,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r181,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a29(r324,l0) a33(r377,l0) a37(r137,l0) a39(r143,l0) a40(r159,l0) a41(r160,l0) a42(r298,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0) a65(r269,l0) a66(r182,l0) a67(r268,l0) a68(r259,l0) a69(r260,l0) a70(r257,l0) a71(r255,l0) a72(r251,l0) a73(r254,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a39(r143,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a37(r137,l0) a38(r181,l0) a40(r159,l0) a41(r160,l0) a42(r298,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a40(r159,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0)
;;     total conflict hard regs: 4
;;     conflict hard regs: 4
;; a41(r160,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a40(r159,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r298,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a37(r137,l0) a38(r181,l0) a39(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r346,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a40(r159,l0) a41(r160,l0) a44(r297,l0) a45(r295,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a44(r297,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a40(r159,l0) a41(r160,l0) a43(r346,l0) a45(r295,l0) a46(r155,l0) a47(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a45(r295,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a40(r159,l0) a41(r160,l0) a43(r346,l0) a44(r297,l0) a46(r155,l0) a47(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a46(r155,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a47(r156,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a44(r297,l0) a45(r295,l0) a46(r155,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a48(r139,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a49(r292,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a60(r153,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a50(r382,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a46(r155,l0) a47(r156,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a51(r154,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a52(r140,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a47(r156,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a53(r166,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a54(r165,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a57(r289,l0) a56(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a55(r378,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a51(r154,l0) a60(r153,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a54(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a56(r164,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a51(r154,l0) a60(r153,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a54(r165,l0) a57(r289,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a57(r289,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a51(r154,l0) a60(r153,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a54(r165,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a58(r161,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a51(r154,l0) a60(r153,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a57(r289,l0) a56(r164,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a59(r142,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a60(r153,l0) a52(r140,l0) a53(r166,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a61(r162,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a60(r153,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a46(r155,l0) a47(r156,l0) a50(r382,l0) a51(r154,l0) a49(r292,l0) a48(r139,l0) a52(r140,l0) a53(r166,l0) a55(r378,l0) a54(r165,l0) a57(r289,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0)
;;     total conflict hard regs: 0-4 12 14
;;     conflict hard regs: 0-4 12 14
;; a61(r162,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a60(r153,l0) a56(r164,l0) a58(r161,l0) a59(r142,l0) a62(r276,l0) a63(r275,l0) a64(r371,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a62(r276,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a60(r153,l0) a56(r164,l0) a58(r161,l0) a61(r162,l0) a63(r275,l0) a64(r371,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a63(r275,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a60(r153,l0) a56(r164,l0) a61(r162,l0) a62(r276,l0) a64(r371,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a64(r371,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a33(r377,l0) a38(r181,l0) a39(r143,l0) a41(r160,l0) a43(r346,l0) a60(r153,l0) a61(r162,l0) a62(r276,l0) a63(r275,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a65(r269,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a38(r181,l0) a66(r182,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a66(r182,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a38(r181,l0) a65(r269,l0) a67(r268,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a67(r268,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a38(r181,l0) a66(r182,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a68(r259,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a38(r181,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a69(r260,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a38(r181,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a70(r257,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a38(r181,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a71(r255,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a38(r181,l0) a72(r251,l0) a73(r254,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a72(r251,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a38(r181,l0) a71(r255,l0) a73(r254,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a73(r254,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a38(r181,l0) a71(r255,l0) a72(r251,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a74(r177,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a85(r171,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a75(r178,l0) conflicts: a6(r188,l0) a77(r239,l0) a76(r242,l0) a78(r244,l0) a79(r238,l0) a80(r234,l0) a81(r236,l0) a82(r245,l0) a83(r232,l0) a84(r176,l0) a86(r228,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a76(r242,l0) conflicts: a6(r188,l0) a75(r178,l0) a77(r239,l0) a78(r244,l0) a79(r238,l0) a80(r234,l0) a81(r236,l0) a82(r245,l0) a83(r232,l0) a84(r176,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a77(r239,l0) conflicts: a75(r178,l0) a76(r242,l0) a78(r244,l0) a79(r238,l0) a80(r234,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a78(r244,l0) conflicts: a6(r188,l0) a75(r178,l0) a77(r239,l0) a76(r242,l0) a79(r238,l0) a80(r234,l0) a81(r236,l0) a82(r245,l0) a83(r232,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a79(r238,l0) conflicts: a6(r188,l0) a75(r178,l0) a77(r239,l0) a76(r242,l0) a78(r244,l0) a80(r234,l0) a81(r236,l0) a82(r245,l0) a83(r232,l0) a84(r176,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a80(r234,l0) conflicts: a6(r188,l0) a75(r178,l0) a77(r239,l0) a76(r242,l0) a78(r244,l0) a79(r238,l0) a81(r236,l0) a82(r245,l0) a83(r232,l0) a84(r176,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a81(r236,l0) conflicts: a6(r188,l0) a75(r178,l0) a76(r242,l0) a78(r244,l0) a79(r238,l0) a80(r234,l0) a82(r245,l0) a83(r232,l0) a84(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a82(r245,l0) conflicts: a6(r188,l0) a75(r178,l0) a76(r242,l0) a78(r244,l0) a79(r238,l0) a80(r234,l0) a81(r236,l0) a83(r232,l0) a84(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a83(r232,l0) conflicts: a6(r188,l0) a75(r178,l0) a76(r242,l0) a78(r244,l0) a79(r238,l0) a80(r234,l0) a81(r236,l0) a82(r245,l0) a84(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a84(r176,l0) conflicts: a6(r188,l0) a75(r178,l0) a76(r242,l0) a79(r238,l0) a80(r234,l0) a81(r236,l0) a82(r245,l0) a83(r232,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a85(r171,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a74(r177,l0) a87(r173,l0) a88(r172,l0) a89(r222,l0) a90(r223,l0) a91(r220,l0) a92(r216,l0) a93(r362,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a86(r228,l0) conflicts: a5(r191,l0) a6(r188,l0) a75(r178,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a87(r173,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a85(r171,l0) a88(r172,l0) a89(r222,l0) a90(r223,l0) a91(r220,l0) a92(r216,l0) a93(r362,l0) a94(r357,l0) a95(r361,l0) a96(r208,l0) a97(r192,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a88(r172,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a85(r171,l0) a87(r173,l0) a91(r220,l0) a92(r216,l0) a93(r362,l0) a94(r357,l0) a95(r361,l0) a96(r208,l0) a97(r192,l0) a98(r186,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a89(r222,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a85(r171,l0) a87(r173,l0) a90(r223,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a90(r223,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a85(r171,l0) a87(r173,l0) a89(r222,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a91(r220,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a85(r171,l0) a87(r173,l0) a88(r172,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a92(r216,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a85(r171,l0) a87(r173,l0) a88(r172,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a93(r362,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a85(r171,l0) a87(r173,l0) a88(r172,l0) a94(r357,l0) a95(r361,l0) a96(r208,l0) a97(r192,l0) a98(r186,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a94(r357,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a87(r173,l0) a88(r172,l0) a93(r362,l0) a95(r361,l0) a96(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a95(r361,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a87(r173,l0) a88(r172,l0) a93(r362,l0) a94(r357,l0) a96(r208,l0) a97(r192,l0) a98(r186,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a96(r208,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a87(r173,l0) a88(r172,l0) a93(r362,l0) a94(r357,l0) a95(r361,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a97(r192,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a87(r173,l0) a88(r172,l0) a93(r362,l0) a95(r361,l0) a98(r186,l0) a99(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a98(r186,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a88(r172,l0) a93(r362,l0) a95(r361,l0) a97(r192,l0) a99(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a99(r193,l0) conflicts: a5(r191,l0) a6(r188,l0) a29(r324,l0) a97(r192,l0) a98(r186,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a100(r144,l2) conflicts: a101(r174,l2) a102(r175,l2) a103(r188,l2) a104(r191,l2) a105(r324,l2) a106(r380,l2) a107(r381,l2) a108(r321,l2) a109(r320,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a101(r174,l2) conflicts: a100(r144,l2) a102(r175,l2) a103(r188,l2) a104(r191,l2) a105(r324,l2) a106(r380,l2) a107(r381,l2) a108(r321,l2) a109(r320,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a102(r175,l2) conflicts: a100(r144,l2) a101(r174,l2) a103(r188,l2) a104(r191,l2) a105(r324,l2) a106(r380,l2) a107(r381,l2) a108(r321,l2) a109(r320,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a103(r188,l2) conflicts: a100(r144,l2) a101(r174,l2) a102(r175,l2) a104(r191,l2) a105(r324,l2) a106(r380,l2) a107(r381,l2) a108(r321,l2) a109(r320,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a104(r191,l2) conflicts: a100(r144,l2) a101(r174,l2) a102(r175,l2) a103(r188,l2) a105(r324,l2) a106(r380,l2) a107(r381,l2) a108(r321,l2) a109(r320,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a105(r324,l2) conflicts: a100(r144,l2) a101(r174,l2) a102(r175,l2) a103(r188,l2) a104(r191,l2) a106(r380,l2) a107(r381,l2) a108(r321,l2) a109(r320,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a106(r380,l2) conflicts: a100(r144,l2) a101(r174,l2) a102(r175,l2) a103(r188,l2) a104(r191,l2) a105(r324,l2) a107(r381,l2) a108(r321,l2) a109(r320,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a107(r381,l2) conflicts: a100(r144,l2) a101(r174,l2) a102(r175,l2) a103(r188,l2) a104(r191,l2) a105(r324,l2) a106(r380,l2) a108(r321,l2) a109(r320,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a108(r321,l2) conflicts: a100(r144,l2) a101(r174,l2) a102(r175,l2) a103(r188,l2) a104(r191,l2) a105(r324,l2) a106(r380,l2) a107(r381,l2) a109(r320,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a109(r320,l2) conflicts: a100(r144,l2) a101(r174,l2) a102(r175,l2) a103(r188,l2) a104(r191,l2) a105(r324,l2) a106(r380,l2) a107(r381,l2) a108(r321,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a110(r143,l1) conflicts: a111(r153,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a111(r153,l1) conflicts: a110(r143,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a112(r154,l1) conflicts: a110(r143,l1) a111(r153,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a113(r155,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a114(r156,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a113(r155,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a115(r160,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a116(r181,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a117(r188,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a118(r191,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a119(r324,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a120(r346,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a120(r346,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a121(r377,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a121(r377,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a122(r382,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a122(r382,l1) conflicts: a110(r143,l1) a111(r153,l1) a112(r154,l1) a113(r155,l1) a114(r156,l1) a115(r160,l1) a116(r181,l1) a117(r188,l1) a118(r191,l1) a119(r324,l1) a120(r346,l1) a121(r377,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a123(r321,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a14(r174,l0) a15(r175,l0) a16(r381,l0) a17(r380,l0) a29(r324,l0) a124(r320,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a124(r320,l0) conflicts: a5(r191,l0) a6(r188,l0) a12(r144,l0) a14(r174,l0) a15(r175,l0) a16(r381,l0) a17(r380,l0) a29(r324,l0) a123(r321,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a15(r175)<->a20(r179)@1000:move
  cp1:a25(r149)<->a32(r373)@250:shuffle
  cp2:a27(r151)<->a31(r305)@250:shuffle
  cp3:a56(r164)<->a64(r371)@125:shuffle
  cp4:a58(r161)<->a63(r275)@125:shuffle
  cp5:a59(r142)<->a62(r276)@125:shuffle
  cp6:a70(r257)<->a71(r255)@125:shuffle
  cp7:a69(r260)<->a70(r257)@125:shuffle
  cp8:a68(r259)<->a69(r260)@125:shuffle
  cp9:a65(r269)<->a67(r268)@125:shuffle
  cp10:a0(r184)<->a75(r178)@1000:move
  cp11:a84(r176)<->a86(r228)@1000:move
  cp12:a85(r171)<->a94(r357)@125:shuffle
  regions=3, blocks=60, points=233
    allocnos=125, copies=13, conflicts=20, ranges=164

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 59 58 57 56 55 54 53 50(->52:l2) 49 48 47 46 45 44 43 42 41 40 39 38 37 34(->36:l1) 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r184 1r337 2r339 3r336 4r332 5r191 6r188 7r180 8r376 9r331 10r329 11r326 12r144 13r327 14r174 15r175 16r381 17r380 18r133 19r319 20r179 21r147 22r148 23r379 24r134 25r149 26r316 27r151 28r136 29r324 30r150 31r305 32r373 33r377 34r303 35r301 36r302 37r137 38r181 39r143 40r159 41r160 42r298 43r346 44r297 45r295 46r155 47r156 48r139 49r292 50r382 51r154 52r140 53r166 54r165 55r378 56r164 57r289 58r161 59r142 60r153 61r162 62r276 63r275 64r371 65r269 66r182 67r268 68r259 69r260 70r257 71r255 72r251 73r254 74r177 75r178 76r242 77r239 78r244 79r238 80r234 81r236 82r245 83r232 84r176 85r171 86r228 87r173 88r172 89r222 90r223 91r220 92r216 93r362 94r357 95r361 96r208 97r192 98r186 99r193 123r321 124r320
    modified regnos: 133 134 136 137 139 140 142 143 144 147 148 149 150 151 153 154 155 156 159 160 161 162 164 165 166 171 172 173 174 175 176 177 178 179 180 181 182 184 186 188 191 192 193 208 216 220 222 223 228 232 234 236 238 239 242 244 245 251 254 255 257 259 260 268 269 275 276 289 292 295 297 298 301 302 303 305 316 319 320 321 324 326 327 329 331 332 336 337 339 346 357 361 362 371 373 376 377 378 379 380 381 382
    border:
    Pressure: GENERAL_REGS=28
    Reg 184 of GENERAL_REGS has 1 regs less
    Reg 337 of GENERAL_REGS has 4 regs less
    Reg 339 of GENERAL_REGS has 4 regs less
    Reg 336 of GENERAL_REGS has 4 regs less
    Reg 332 of GENERAL_REGS has 4 regs less
    Reg 191 of GENERAL_REGS has 7 regs less
    Reg 188 of GENERAL_REGS has 7 regs less
    Reg 324 of GENERAL_REGS has 7 regs less
    Reg 377 of GENERAL_REGS has 7 regs less
    Reg 181 of GENERAL_REGS has 7 regs less
    Reg 143 of GENERAL_REGS has 7 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 346 of GENERAL_REGS has 7 regs less
    Reg 153 of GENERAL_REGS has 7 regs less
    Reg 269 of GENERAL_REGS has 2 regs less
    Reg 182 of GENERAL_REGS has 2 regs less
    Reg 268 of GENERAL_REGS has 2 regs less
    Reg 259 of GENERAL_REGS has 2 regs less
    Reg 260 of GENERAL_REGS has 2 regs less
    Reg 257 of GENERAL_REGS has 2 regs less
    Reg 255 of GENERAL_REGS has 2 regs less
    Reg 251 of GENERAL_REGS has 2 regs less
    Reg 254 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 4 regs less
    Reg 242 of GENERAL_REGS has 1 regs less
    Reg 239 of GENERAL_REGS has 1 regs less
    Reg 244 of GENERAL_REGS has 1 regs less
    Reg 238 of GENERAL_REGS has 1 regs less
    Reg 234 of GENERAL_REGS has 1 regs less
    Reg 228 of GENERAL_REGS has 5 regs less
      Pushing a99(r193,l0)
      Pushing a97(r192,l0)
      Pushing a96(r208,l0)
      Pushing a95(r361,l0)
      Pushing a94(r357,l0)
      Pushing a92(r216,l0)
      Pushing a91(r220,l0)
      Pushing a90(r223,l0)
      Pushing a89(r222,l0)
      Pushing a83(r232,l0)
      Pushing a82(r245,l0)
      Pushing a81(r236,l0)
      Pushing a42(r298,l0)
      Pushing a36(r302,l0)
      Pushing a34(r303,l0)
      Pushing a9(r331,l0)
      Pushing a8(r376,l0)
      Pushing a85(r171,l0)
      Pushing a35(r301,l0)
      Pushing a13(r327,l0)
      Pushing a11(r326,l0)
      Pushing a7(r180,l0)
      Pushing a37(r137,l0)
      Pushing a10(r329,l0)
      Pushing a93(r362,l0)
      Pushing a98(r186,l0)
      Pushing a88(r172,l0)
      Pushing a84(r176,l0)
      Pushing a74(r177,l0)
      Pushing a87(r173,l0)
      Pushing a77(r239,l0)
      Pushing a78(r244,l0)
      Pushing a73(r254,l0)
      Pushing a0(r184,l0)
      Pushing a79(r238,l0)
      Pushing a80(r234,l0)
      Pushing a76(r242,l0)
      Pushing a70(r257,l0)
      Pushing a69(r260,l0)
      Pushing a68(r259,l0)
      Pushing a67(r268,l0)
      Pushing a65(r269,l0)
      Pushing a66(r182,l0)
      Pushing a72(r251,l0)
      Pushing a71(r255,l0)
      Pushing a2(r339,l0)
      Pushing a1(r337,l0)
      Pushing a3(r336,l0)
      Pushing a4(r332,l0)
      Pushing a75(r178,l0)
      Pushing a86(r228,l0)
      Pushing a29(r324,l0)(potential spill: pri=155, cost=30000)
      Pushing a32(r373,l0)
      Pushing a56(r164,l0)(potential spill: pri=307, cost=20000)
      Pushing a5(r191,l0)(potential spill: pri=322, cost=30000)
      Pushing a23(r379,l0)
      Pushing a31(r305,l0)
      Pushing a6(r188,l0)(potential spill: pri=333, cost=30000)
      Pushing a124(r320,l0: a109(r320,l2))
      Pushing a17(r380,l0)
      Pushing a16(r381,l0)
      Pushing a123(r321,l0: a108(r321,l2))
      Pushing a30(r150,l0)
      Pushing a14(r174,l0)
      Pushing a19(r319,l0)
      Pushing a15(r175,l0)
      Pushing a58(r161,l0)(potential spill: pri=392, cost=20000)
      Pushing a54(r165,l0)(potential spill: pri=425, cost=20000)
      Pushing a50(r382,l0)(potential spill: pri=487, cost=20000)
      Pushing a25(r149,l0)(potential spill: pri=540, cost=20000)
      Pushing a22(r148,l0)
      Pushing a18(r133,l0)
      Pushing a27(r151,l0)
      Pushing a21(r147,l0)
      Pushing a26(r316,l0)
      Pushing a28(r136,l0)
      Pushing a24(r134,l0)
      Pushing a20(r179,l0)
      Pushing a12(r144,l0)
      Pushing a48(r139,l0)(potential spill: pri=588, cost=30000)
      Pushing a43(r346,l0)(potential spill: pri=666, cost=30000)
      Pushing a64(r371,l0)
      Pushing a63(r275,l0)
      Pushing a62(r276,l0)
      Pushing a61(r162,l0)
      Pushing a53(r166,l0)(potential spill: pri=731, cost=30000)
      Pushing a51(r154,l0)(potential spill: pri=975, cost=40000)
      Pushing a55(r378,l0)
      Pushing a44(r297,l0)(potential spill: pri=1290, cost=40000)
      Pushing a40(r159,l0)
      Pushing a45(r295,l0)
      Pushing a49(r292,l0)(potential spill: pri=1290, cost=40000)
      Pushing a46(r155,l0)
      Pushing a47(r156,l0)
      Pushing a57(r289,l0)(potential spill: pri=1481, cost=40000)
      Pushing a41(r160,l0)
      Pushing a59(r142,l0)
      Pushing a52(r140,l0)
      Pushing a60(r153,l0)(potential spill: pri=2962, cost=80000)
      Pushing a38(r181,l0)(potential spill: pri=4347, cost=100000)
      Pushing a39(r143,l0)(potential spill: pri=5368, cost=102000)
      Pushing a33(r377,l0)(potential spill: pri=7733, cost=116000)
      Popping a33(r377,l0)  -- assign reg 6
      Popping a39(r143,l0)  -- assign reg 8
      Popping a38(r181,l0)  -- assign reg 10
      Popping a60(r153,l0)  -- (memory is more profitable 80000 vs 2147483647) spill
      Popping a52(r140,l0)  -- assign reg 2
      Popping a59(r142,l0)  -- assign reg 0
      Popping a41(r160,l0)  -- assign reg 4
      Popping a57(r289,l0)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a47(r156,l0)  -- assign reg 0
      Popping a46(r155,l0)  -- assign reg 2
      Popping a49(r292,l0)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a45(r295,l0)  -- (memory is more profitable 50000 vs 2147483647) spill
      Popping a40(r159,l0)  -- assign reg 0
      Popping a44(r297,l0)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a55(r378,l0)  -- assign reg 1
      Popping a51(r154,l0)  -- (memory is more profitable 40000 vs 2147483647) spill
      Popping a53(r166,l0)  -- (memory is more profitable 30000 vs 2147483647) spill
      Popping a61(r162,l0)  -- assign reg 2
      Popping a62(r276,l0)  -- assign reg 0
      Popping a63(r275,l0)  -- assign reg 1
      Popping a64(r371,l0)  -- assign reg 12
      Popping a43(r346,l0)  -- assign reg 5
      Popping a48(r139,l0)  -- (memory is more profitable 30000 vs 2147483647) spill
      Popping a12(r144,l0)  -- assign reg 2
      Popping a20(r179,l0)  -- assign reg 0
      Popping a24(r134,l0)  -- assign reg 4
      Popping a28(r136,l0)  -- assign reg 8
      Popping a26(r316,l0)  -- assign reg 6
      Popping a21(r147,l0)  -- assign reg 10
      Popping a27(r151,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a18(r133,l0)  -- assign reg 8
      Popping a22(r148,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a25(r149,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a50(r382,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a54(r165,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a58(r161,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a15(r175,l0)  -- assign reg 0
      Popping a19(r319,l0)  -- assign reg 4
      Popping a14(r174,l0)  -- assign reg 6
      Popping a30(r150,l0)  -- assign reg 4
      Popping a123(r321,l0: a108(r321,l2))  -- assign reg 4
      Popping a16(r381,l0)  -- assign reg 8
      Popping a17(r380,l0)  -- assign reg 10
      Popping a124(r320,l0: a109(r320,l2))  -- (memory is more profitable 22000 vs 2147483647) spill
      Popping a6(r188,l0)  -- spill
      Popping a31(r305,l0)  -- assign reg 12
      Popping a23(r379,l0)  -- assign reg 12
      Popping a5(r191,l0)  -- spill
      Popping a56(r164,l0)  -- (memory is more profitable 20000 vs 2147483647) spill
      Popping a32(r373,l0)  -- assign reg 14
      Popping a29(r324,l0)  -- spill
      Popping a86(r228,l0)  -- assign reg 4
      Popping a75(r178,l0)  -- assign reg 5
      Popping a4(r332,l0)  -- assign reg 4
      Popping a3(r336,l0)  -- assign reg 6
      Popping a1(r337,l0)  -- assign reg 8
      Popping a2(r339,l0)  -- assign reg 12
      Popping a71(r255,l0)  -- assign reg 3
      Popping a72(r251,l0)  -- assign reg 2
      Popping a66(r182,l0)  -- assign reg 3
      Popping a65(r269,l0)  -- assign reg 2
      Popping a67(r268,l0)  -- assign reg 2
      Popping a68(r259,l0)  -- assign reg 3
      Popping a69(r260,l0)  -- assign reg 3
      Popping a70(r257,l0)  -- assign reg 3
      Popping a76(r242,l0)  -- assign reg 0
      Popping a80(r234,l0)  -- assign reg 6
      Popping a79(r238,l0)  -- assign reg 8
      Popping a0(r184,l0)  -- assign reg 0
      Popping a73(r254,l0)  -- assign reg 0
      Popping a78(r244,l0)  -- assign reg 3
      Popping a77(r239,l0)  -- assign reg 10
      Popping a87(r173,l0)  -- assign reg 2
      Popping a74(r177,l0)  -- assign reg 3
      Popping a84(r176,l0)  -- assign reg 4
      Popping a88(r172,l0)  -- assign reg 1
      Popping a98(r186,l0)  -- assign reg 2
      Popping a93(r362,l0)  -- assign reg 0
      Popping a10(r329,l0)  -- assign reg 0
      Popping a37(r137,l0)  -- assign reg 0
      Popping a7(r180,l0)  -- assign reg 2
      Popping a11(r326,l0)  -- assign reg 4
      Popping a13(r327,l0)  -- assign reg 8
      Popping a35(r301,l0)  -- assign reg 0
      Popping a85(r171,l0)  -- assign reg 12
      Popping a8(r376,l0)  -- assign reg 1
      Popping a9(r331,l0)  -- assign reg 2
      Popping a34(r303,l0)  -- assign reg 2
      Popping a36(r302,l0)  -- assign reg 4
      Popping a42(r298,l0)  -- assign reg 2
      Popping a81(r236,l0)  -- assign reg 2
      Popping a82(r245,l0)  -- assign reg 12
      Popping a83(r232,l0)  -- assign reg 14
      Popping a89(r222,l0)  -- assign reg 0
      Popping a90(r223,l0)  -- assign reg 4
      Popping a91(r220,l0)  -- assign reg 0
      Popping a92(r216,l0)  -- assign reg 4
      Popping a94(r357,l0)  -- assign reg 12
      Popping a95(r361,l0)  -- assign reg 14
      Popping a96(r208,l0)  -- assign reg 4
      Popping a97(r192,l0)  -- assign reg 4
      Popping a99(r193,l0)  -- assign reg 0

  Loop 2 (parent 0, header bb52, depth 1)
    bbs: 52(->53:l0) 51
    all: 100r144 101r174 102r175 103r188 104r191 105r324 106r380 107r381 108r321 109r320
    modified regnos: 144 174 175 320 321 324
    border: 100r144 101r174 102r175 103r188 104r191 105r324 106r380 107r381
    Pressure: GENERAL_REGS=16
      Pushing a103(r188,l2)(potential spill: pri=-2222, cost=-40000)
      Pushing a104(r191,l2)(potential spill: pri=-2352, cost=-40000)
      Pushing a105(r324,l2)(potential spill: pri=-344, cost=-10000)
      Pushing a109(r320,l2)
      Pushing a108(r321,l2)
      Pushing a101(r174,l2)
      Pushing a102(r175,l2)
      Pushing a100(r144,l2)
      Popping a100(r144,l2)  -- assign reg 2
      Popping a102(r175,l2)  -- assign reg 0
      Popping a101(r174,l2)  -- assign reg 6
      Popping a108(r321,l2)  -- assign reg 4
      Popping a109(r320,l2)  -- (memory is more profitable 22000 vs 2147483647) spill
      Popping a105(r324,l2)  -- (memory is more profitable 10000 vs 2147483647) spill
      Popping a104(r191,l2)  -- (memory is more profitable -20000 vs 0) spill
      Popping a103(r188,l2)  -- (memory is more profitable -20000 vs 0) spill

  Loop 1 (parent 0, header bb36, depth 1)
    bbs: 36(->37:l0) 35
    all: 110r143 111r153 112r154 113r155 114r156 115r160 116r181 117r188 118r191 119r324 120r346 121r377 122r382
    modified regnos: 143 155 156
    border: 110r143 111r153 112r154 113r155 114r156 115r160 116r181 117r188 118r191 119r324 120r346 121r377 122r382
    Pressure: GENERAL_REGS=22
      Pushing a117(r188,l1)(potential spill: pri=-2000, cost=-40000)
      Pushing a118(r191,l1)(potential spill: pri=-2105, cost=-40000)
      Pushing a119(r324,l1)(potential spill: pri=-1212, cost=-40000)
      Pushing a116(r181,l1)(potential spill: pri=1379, cost=40000)
      Pushing a121(r377,l1)
      Pushing a120(r346,l1)
      Pushing a115(r160,l1)
      Pushing a112(r154,l1)
      Pushing a111(r153,l1)
      Pushing a110(r143,l1)
      Pushing a114(r156,l1)
      Pushing a113(r155,l1)
      Popping a113(r155,l1)  -- assign reg 2
      Popping a114(r156,l1)  -- assign reg 0
      Popping a110(r143,l1)  -- assign reg 8
      Popping a111(r153,l1)  -- (memory is more profitable -10000 vs 0) spill
      Popping a112(r154,l1)  -- (memory is more profitable -10000 vs 0) spill
      Popping a115(r160,l1)  -- assign reg 4
      Popping a120(r346,l1)  -- assign reg 5
      Popping a121(r377,l1)  -- assign reg 6
      Popping a116(r181,l1)  -- assign reg 10
      Popping a119(r324,l1)  -- (memory is more profitable -20000 vs 2147483647) spill
      Popping a118(r191,l1)  -- (memory is more profitable -20000 vs 0) spill
      Popping a117(r188,l1)  -- (memory is more profitable -20000 vs 0) spill
Disposition:
   18:r133 l0     8   24:r134 l0     4   28:r136 l0     8   37:r137 l0     0
   48:r139 l0   mem   52:r140 l0     2   59:r142 l0     0  110:r143 l1     8
   39:r143 l0     8  100:r144 l2     2   12:r144 l0     2   21:r147 l0    10
   22:r148 l0   mem   25:r149 l0   mem   30:r150 l0     4   27:r151 l0   mem
  111:r153 l1   mem   60:r153 l0   mem  112:r154 l1   mem   51:r154 l0   mem
  113:r155 l1     2   46:r155 l0     2  114:r156 l1     0   47:r156 l0     0
   40:r159 l0     0  115:r160 l1     4   41:r160 l0     4   58:r161 l0   mem
   61:r162 l0     2   56:r164 l0   mem   54:r165 l0   mem   53:r166 l0   mem
   85:r171 l0    12   88:r172 l0     1   87:r173 l0     2  101:r174 l2     6
   14:r174 l0     6  102:r175 l2     0   15:r175 l0     0   84:r176 l0     4
   74:r177 l0     3   75:r178 l0     5   20:r179 l0     0    7:r180 l0     2
  116:r181 l1    10   38:r181 l0    10   66:r182 l0     3    0:r184 l0     0
   98:r186 l0     2  117:r188 l1   mem  103:r188 l2   mem    6:r188 l0   mem
  118:r191 l1   mem  104:r191 l2   mem    5:r191 l0   mem   97:r192 l0     4
   99:r193 l0     0   96:r208 l0     4   92:r216 l0     4   91:r220 l0     0
   89:r222 l0     0   90:r223 l0     4   86:r228 l0     4   83:r232 l0    14
   80:r234 l0     6   81:r236 l0     2   79:r238 l0     8   77:r239 l0    10
   76:r242 l0     0   78:r244 l0     3   82:r245 l0    12   72:r251 l0     2
   73:r254 l0     0   71:r255 l0     3   70:r257 l0     3   68:r259 l0     3
   69:r260 l0     3   67:r268 l0     2   65:r269 l0     2   63:r275 l0     1
   62:r276 l0     0   57:r289 l0   mem   49:r292 l0   mem   45:r295 l0   mem
   44:r297 l0   mem   42:r298 l0     2   35:r301 l0     0   36:r302 l0     4
   34:r303 l0     2   31:r305 l0    12   26:r316 l0     6   19:r319 l0     4
  109:r320 l2   mem  108:r321 l2     4  119:r324 l1   mem  105:r324 l2   mem
   29:r324 l0   mem   11:r326 l0     4   13:r327 l0     8   10:r329 l0     0
    9:r331 l0     2    4:r332 l0     4    3:r336 l0     6    1:r337 l0     8
    2:r339 l0    12  120:r346 l1     5   43:r346 l0     5   94:r357 l0    12
   95:r361 l0    14   93:r362 l0     0   64:r371 l0    12   32:r373 l0    14
    8:r376 l0     1  121:r377 l1     6   33:r377 l0     6   55:r378 l0     1
   23:r379 l0    12  106:r380 l2    10   17:r380 l0    10  107:r381 l2     8
   16:r381 l0     8  122:r382 l1   mem   50:r382 l0   mem
New iteration of spill/restore move
      Changing RTL for loop 2 (header bb52)
  2 vs parent 2:      Creating newreg=383 from oldreg=144
  6 vs parent 6:      Creating newreg=384 from oldreg=174
  0 vs parent 0:      Creating newreg=385 from oldreg=175
rescanning insn with uid = 534.
deleting insn with uid = 534.
rescanning insn with uid = 536.
deleting insn with uid = 536.
rescanning insn with uid = 525.
deleting insn with uid = 525.
rescanning insn with uid = 528.
deleting insn with uid = 528.
rescanning insn with uid = 530.
deleting insn with uid = 530.
      Changing RTL for loop 1 (header bb36)
  8 vs parent 8:      Creating newreg=386 from oldreg=143
  2 vs parent 2:      Creating newreg=387 from oldreg=155
  0 vs parent 0:      Creating newreg=388 from oldreg=156
  4 vs parent 4:      Creating newreg=389 from oldreg=160
  10 vs parent 10:      Creating newreg=390 from oldreg=181
  5 vs parent 5:      Creating newreg=391 from oldreg=346
  6 vs parent 6:      Creating newreg=392 from oldreg=377
rescanning insn with uid = 369.
deleting insn with uid = 369.
rescanning insn with uid = 364.
deleting insn with uid = 364.
rescanning insn with uid = 365.
deleting insn with uid = 365.
scanning new insn with uid = 767.
scanning new insn with uid = 768.
scanning new insn with uid = 769.
scanning new insn with uid = 770.
scanning new insn with uid = 771.
scanning new insn with uid = 772.
scanning new insn with uid = 773.
scanning new insn with uid = 777.
scanning new insn with uid = 778.
scanning new insn with uid = 779.
    Adding cp13:a39r143-a110r386
    Adding range [234..234] to allocno a39r143
    Adding cp14:a46r155-a113r387
    Adding range [234..236] to allocno a46r155
    Adding cp15:a47r156-a114r388
    Adding range [234..238] to allocno a47r156
    Adding cp16:a41r160-a115r389
    Adding range [234..240] to allocno a41r160
    Adding cp17:a38r181-a116r390
    Adding range [234..242] to allocno a38r181
    Adding cp18:a43r346-a120r391
    Adding range [234..244] to allocno a43r346
    Adding cp19:a33r377-a121r392
    Adding range [234..246] to allocno a33r377
    Adding range [235..247] to allocno a110r386
    Adding range [237..247] to allocno a113r387
    Adding range [239..247] to allocno a114r388
    Adding range [241..247] to allocno a115r389
    Adding range [243..247] to allocno a116r390
    Adding range [245..247] to allocno a120r391
    Adding range [247..247] to allocno a121r392
    Adding range [234..247] to live through  allocno a60r153
    Adding range [234..247] to live through  allocno a51r154
    Adding range [234..247] to live through  allocno a6r188
    Adding range [234..247] to live through  allocno a5r191
    Adding range [234..247] to live through  allocno a29r324
    Adding range [234..247] to live through  allocno a50r382
    Adding cp20:a39r143-a110r386
    Adding range [249..249] to allocno a110r386
    Adding cp21:a46r155-a113r387
    Adding range [249..251] to allocno a113r387
    Adding cp22:a47r156-a114r388
    Adding range [249..253] to allocno a114r388
    Adding cp23:a41r160-a115r389
    Adding range [249..255] to allocno a115r389
    Adding cp24:a38r181-a116r390
    Adding range [249..257] to allocno a116r390
    Adding cp25:a43r346-a120r391
    Adding range [249..259] to allocno a120r391
    Adding cp26:a33r377-a121r392
    Adding range [249..261] to allocno a121r392
    Adding range [250..262] to allocno a39r143
    Adding range [252..262] to allocno a46r155
    Adding range [254..262] to allocno a47r156
    Adding range [256..262] to allocno a41r160
    Adding range [258..262] to allocno a38r181
    Adding range [260..262] to allocno a43r346
    Adding range [262..262] to allocno a33r377
    Adding range [249..262] to live through  allocno a6r188
    Adding range [249..262] to live through  allocno a5r191
    Adding range [249..262] to live through  allocno a29r324
    Adding cp27:a12r144-a100r383
    Adding range [264..264] to allocno a12r144
    Adding cp28:a14r174-a101r384
    Adding range [264..266] to allocno a14r174
    Adding cp29:a15r175-a102r385
    Adding range [264..268] to allocno a15r175
    Adding range [265..269] to allocno a100r383
    Adding range [267..269] to allocno a101r384
    Adding range [269..269] to allocno a102r385
    Adding range [264..269] to live through  allocno a6r188
    Adding range [264..269] to live through  allocno a5r191
    Adding range [264..269] to live through  allocno a29r324
    Adding range [264..269] to live through  allocno a17r380
    Adding range [264..269] to live through  allocno a16r381
    Adding cp30:a12r144-a100r383
    Adding range [271..271] to allocno a100r383
    Adding cp31:a14r174-a101r384
    Adding range [271..273] to allocno a101r384
    Adding cp32:a15r175-a102r385
    Adding range [271..275] to allocno a102r385
    Adding range [272..276] to allocno a12r144
    Adding range [274..276] to allocno a14r174
    Adding range [276..276] to allocno a15r175
    Adding range [271..276] to live through  allocno a6r188
    Adding range [271..276] to live through  allocno a5r191
scanning new insn with uid = 760.
scanning new insn with uid = 761.
scanning new insn with uid = 762.
scanning new insn with uid = 763.
scanning new insn with uid = 764.
scanning new insn with uid = 765.
scanning new insn with uid = 766.
scanning new insn with uid = 774.
scanning new insn with uid = 775.
scanning new insn with uid = 776.
    New r383: setting preferred GENERAL_REGS, alternative NO_REGS
    New r384: setting preferred GENERAL_REGS, alternative NO_REGS
    New r385: setting preferred GENERAL_REGS, alternative NO_REGS
    New r386: setting preferred GENERAL_REGS, alternative NO_REGS
    New r387: setting preferred GENERAL_REGS, alternative NO_REGS
    New r388: setting preferred GENERAL_REGS, alternative NO_REGS
    New r389: setting preferred GENERAL_REGS, alternative NO_REGS
    New r390: setting preferred GENERAL_REGS, alternative NO_REGS
    New r391: setting preferred GENERAL_REGS, alternative NO_REGS
    New r392: setting preferred GENERAL_REGS, alternative NO_REGS
Flattening IR
      Moving ranges of a122r382 to a50r382:  [231..232]
      Moving ranges of a107r381 to a16r381:  [225..230]
      Moving ranges of a106r380 to a17r380:  [225..230]
      Moving ranges of a119r324 to a29r324:  [231..232]
      Moving ranges of a105r324 to a29r324:  [225..230]
      Moving ranges of a118r191 to a5r191:  [231..232]
      Moving ranges of a104r191 to a5r191:  [225..230]
      Moving ranges of a117r188 to a6r188:  [231..232]
      Moving ranges of a103r188 to a6r188:  [225..230]
      Moving ranges of a112r154 to a51r154:  [231..232]
      Moving ranges of a111r153 to a60r153:  [231..232]
      Remove a103r188
      Remove a104r191
      Remove a105r324
      Remove a106r380
      Remove a107r381
      Remove a111r153
      Remove a112r154
      Remove a117r188
      Remove a118r191
      Remove a119r324
      Remove a122r382
      Remove a123r321
      Remove a124r320
Compressing live ranges: from 277 to 272 - 98%
Ranges after the compression:
 a0(r184): [148..149] [0..1]
 a1(r337): [6..6] [2..5]
 a2(r339): [3..4]
 a3(r336): [5..9]
 a4(r332): [11..14] [5..10]
 a5(r191): [266..271] [260..265] [246..259] [232..245] [224..231] [177..222] [7..147]
 a6(r188): [266..271] [260..265] [246..259] [232..245] [224..231] [154..223] [8..147]
 a7(r180): [9..15]
 a8(r376): [12..13]
 a9(r331): [18..18] [16..17]
 a10(r329): [17..20]
 a11(r326): [22..24] [17..21]
 a12(r144): [267..271] [260..260] [62..69] [19..59]
 a13(r327): [26..26] [23..25]
 a14(r174): [269..271] [260..262] [25..34]
 a15(r175): [271..271] [260..264] [25..31]
 a16(r381): [260..265] [224..229] [27..28]
 a17(r380): [260..265] [224..229] [27..29]
 a18(r133): [30..41]
 a19(r319): [30..36]
 a20(r179): [32..56]
 a21(r147): [46..47] [33..45]
 a22(r148): [37..40] [35..35]
 a23(r379): [35..38]
 a24(r134): [39..44]
 a25(r149): [40..51]
 a26(r316): [40..43]
 a27(r151): [41..49]
 a28(r136): [42..54]
 a29(r324): [260..265] [246..259] [232..245] [181..231] [62..147] [27..59]
 a30(r150): [48..55]
 a31(r305): [50..58]
 a32(r373): [52..57]
 a33(r377): [259..259] [232..244] [62..126] [53..59]
 a34(r303): [60..61]
 a35(r301): [65..65] [63..64]
 a36(r302): [64..66]
 a37(r137): [124..125] [77..77] [75..76] [67..71]
 a38(r181): [255..259] [232..240] [68..143]
 a39(r143): [247..259] [232..232] [120..121] [76..119] [70..74]
 a40(r159): [82..82] [79..81] [72..74]
 a41(r160): [253..259] [232..238] [79..115] [73..74]
 a42(r298): [76..78]
 a43(r346): [257..259] [232..242] [80..122]
 a44(r297): [81..85]
 a45(r295): [81..86]
 a46(r155): [249..259] [232..234] [83..90]
 a47(r156): [251..259] [232..236] [84..92]
 a48(r139): [88..99]
 a49(r292): [88..95]
 a50(r382): [232..245] [230..231] [87..89]
 a51(r154): [232..245] [230..231] [87..100]
 a52(r140): [91..103]
 a53(r166): [105..106] [93..104]
 a54(r165): [96..98] [94..94]
 a55(r378): [94..97]
 a56(r164): [98..112]
 a57(r289): [98..102]
 a58(r161): [99..110]
 a59(r142): [101..108]
 a60(r153): [232..245] [230..231] [87..123]
 a61(r162): [107..114]
 a62(r276): [109..116]
 a63(r275): [111..118]
 a64(r371): [113..117]
 a65(r269): [127..129]
 a66(r182): [128..132]
 a67(r268): [130..131]
 a68(r259): [133..134]
 a69(r260): [135..136]
 a70(r257): [137..138]
 a71(r255): [139..142]
 a72(r251): [140..145]
 a73(r254): [141..144]
 a74(r177): [197..198] [190..191] [185..186] [180..182] [146..147]
 a75(r178): [173..176] [168..169] [150..166]
 a76(r242): [151..160]
 a77(r239): [151..153]
 a78(r244): [152..158]
 a79(r238): [153..162]
 a80(r234): [153..164]
 a81(r236): [155..161]
 a82(r245): [156..163]
 a83(r232): [157..165]
 a84(r176): [173..174] [168..170] [159..167]
 a85(r171): [179..206] [171..172]
 a86(r228): [175..178]
 a87(r173): [199..213] [193..196] [187..189] [183..184]
 a88(r172): [200..217] [188..189]
 a89(r222): [194..194] [192..193]
 a90(r223): [193..195]
 a91(r220): [201..202]
 a92(r216): [203..204]
 a93(r362): [205..215]
 a94(r357): [207..211]
 a95(r361): [208..216]
 a96(r208): [209..210]
 a97(r192): [219..219] [212..218]
 a98(r186): [214..221]
 a99(r193): [218..220]
 a100(r383): [266..266] [261..265] [224..229]
 a101(r384): [266..268] [263..265] [224..229]
 a102(r385): [266..270] [265..265] [224..229]
 a108(r321): [227..227] [225..226]
 a109(r320): [226..228]
 a110(r386): [246..246] [233..245] [230..231]
 a113(r387): [246..248] [235..245] [230..231]
 a114(r388): [246..250] [237..245] [230..231]
 a115(r389): [246..252] [239..245] [230..231]
 a116(r390): [246..254] [241..245] [230..231]
 a120(r391): [246..256] [243..245] [230..231]
 a121(r392): [246..258] [245..245] [230..231]
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 60 n_edges 88 count 116 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 60 n_edges 88 count 120 (    2)
+++Costs: overall 605750, reg 3750, mem 602000, ld 0, st 0, move 40000
+++       move loops 0, new jumps 2
insn=2, live_throughout: 2, 3, 13, 324, dead_or_set: 0, 188
insn=9, live_throughout: 3, 13, 188, 324, dead_or_set: 0, 2
insn=5, live_throughout: 0, 13, 188, 324, dead_or_set: 3, 191
insn=10, live_throughout: 13, 188, 191, 324, dead_or_set: 0, 1, 14
insn=11, live_throughout: 13, 188, 191, 324, dead_or_set: 0, 1, 186
insn=12, live_throughout: 13, 186, 188, 191, 324, dead_or_set: 193
insn=13, live_throughout: 13, 186, 188, 191, 324, dead_or_set: 192, 193
insn=22, live_throughout: 13, 186, 188, 191, 192, 324, dead_or_set: 172
insn=27, live_throughout: 13, 172, 186, 188, 191, 192, 324, dead_or_set: 361
insn=25, live_throughout: 13, 172, 186, 188, 191, 192, 324, 361, dead_or_set: 362
insn=26, live_throughout: 13, 172, 188, 191, 192, 324, 361, dead_or_set: 186, 362
insn=704, live_throughout: 13, 172, 188, 191, 192, 324, 361, 362, dead_or_set: 173
insn=14, live_throughout: 13, 172, 188, 191, 324, 361, 362, dead_or_set: 192, 357
insn=759, live_throughout: 13, 172, 188, 191, 324, 357, 361, 362, dead_or_set: 208
insn=46, live_throughout: 13, 172, 188, 191, 324, 357, 361, 362, dead_or_set: 208
insn=29, live_throughout: 13, 24, 172, 188, 191, 324, 357, 362, dead_or_set: 173, 361
insn=30, live_throughout: 13, 24, 172, 188, 191, 324, 357, 362, dead_or_set: 173
insn=16, live_throughout: 13, 24, 172, 173, 188, 191, 324, 362, dead_or_set: 171, 357
insn=23, live_throughout: 13, 24, 171, 172, 173, 188, 191, 324, 362, dead_or_set: 
insn=31, live_throughout: 13, 24, 171, 172, 173, 188, 191, 324, dead_or_set: 173, 362
insn=17, live_throughout: 13, 24, 171, 172, 173, 188, 191, 324, dead_or_set: 
insn=47, live_throughout: 13, 171, 172, 173, 188, 191, 324, dead_or_set: 
insn=49, live_throughout: 13, 171, 172, 173, 188, 191, 324, dead_or_set: 216
insn=50, live_throughout: 13, 171, 172, 188, 191, 324, dead_or_set: 173, 216
insn=51, live_throughout: 13, 171, 172, 173, 188, 191, 324, dead_or_set: 
insn=53, live_throughout: 13, 171, 172, 173, 188, 191, 324, dead_or_set: 
insn=758, live_throughout: 13, 171, 172, 173, 188, 191, 324, dead_or_set: 220
insn=58, live_throughout: 13, 171, 172, 173, 188, 191, 324, dead_or_set: 220
insn=59, live_throughout: 13, 171, 172, 173, 188, 191, 324, dead_or_set: 
insn=63, live_throughout: 13, 171, 173, 188, 191, 324, dead_or_set: 
insn=64, live_throughout: 13, 171, 173, 188, 191, 324, dead_or_set: 
insn=66, live_throughout: 13, 171, 188, 191, 324, dead_or_set: 177
insn=719, live_throughout: 13, 171, 177, 188, 191, 324, dead_or_set: 
insn=69, live_throughout: 13, 171, 173, 188, 191, 324, dead_or_set: 
insn=71, live_throughout: 13, 171, 173, 188, 191, 324, dead_or_set: 223
insn=72, live_throughout: 13, 171, 188, 191, 324, dead_or_set: 173, 222, 223
insn=692, live_throughout: 13, 171, 188, 191, 324, dead_or_set: 177, 222
insn=721, live_throughout: 13, 171, 177, 188, 191, 324, dead_or_set: 
insn=86, live_throughout: 13, 171, 172, 173, 188, 191, 324, dead_or_set: 
insn=88, live_throughout: 13, 171, 173, 188, 191, 324, dead_or_set: 172
insn=89, live_throughout: 13, 171, 173, 188, 191, 324, dead_or_set: 
insn=91, live_throughout: 13, 171, 188, 191, 324, dead_or_set: 177
insn=723, live_throughout: 13, 171, 177, 188, 191, 324, dead_or_set: 
insn=94, live_throughout: 13, 171, 173, 188, 191, 324, dead_or_set: 
insn=693, live_throughout: 13, 171, 188, 191, 324, dead_or_set: 173
insn=694, live_throughout: 13, 171, 188, 191, 324, dead_or_set: 177
insn=107, live_throughout: 13, 171, 177, 188, 191, 324, dead_or_set: 
insn=110, live_throughout: 13, 171, 177, 188, 191, 324, dead_or_set: 
insn=111, live_throughout: 13, 171, 177, 188, 191, 324, dead_or_set: 
insn=114, live_throughout: 13, 171, 188, 191, dead_or_set: 177
insn=115, live_throughout: 13, 171, 188, 191, dead_or_set: 
insn=117, live_throughout: 13, 188, 191, dead_or_set: 228
insn=122, live_throughout: 13, 188, 228, dead_or_set: 3, 191
insn=119, live_throughout: 3, 13, 188, 228, dead_or_set: 0
insn=120, live_throughout: 0, 3, 13, 188, 228, dead_or_set: 1
insn=121, live_throughout: 0, 1, 3, 13, 188, 228, dead_or_set: 2
insn=123, live_throughout: 13, 188, 228, dead_or_set: 0, 1, 2, 3, 14
insn=124, live_throughout: 13, 188, 228, dead_or_set: 0, 178
insn=126, live_throughout: 13, 178, 188, dead_or_set: 176, 228
insn=725, live_throughout: 13, 176, 178, 188, dead_or_set: 
insn=129, live_throughout: 13, 171, 188, dead_or_set: 
insn=131, live_throughout: 13, 188, dead_or_set: 171
insn=132, live_throughout: 13, 188, dead_or_set: 
insn=173, live_throughout: 13, 188, dead_or_set: 
insn=134, live_throughout: 13, 188, dead_or_set: 176
insn=135, live_throughout: 13, 176, 188, dead_or_set: 178
insn=727, live_throughout: 13, 176, 178, 188, dead_or_set: 
insn=138, live_throughout: 13, 188, dead_or_set: 
insn=140, live_throughout: 13, 188, dead_or_set: 176
insn=142, live_throughout: 13, 176, 188, dead_or_set: 178
insn=143, live_throughout: 13, 176, 178, 188, dead_or_set: 
insn=146, live_throughout: 13, 176, 178, 188, dead_or_set: 232
insn=705, live_throughout: 13, 176, 178, 188, 232, dead_or_set: 234
insn=159, live_throughout: 13, 176, 178, 188, 232, dead_or_set: 245
insn=706, live_throughout: 13, 176, 178, 188, 232, 245, dead_or_set: 238
insn=151, live_throughout: 13, 176, 178, 188, 232, 245, dead_or_set: 236
insn=707, live_throughout: 13, 176, 178, 188, 232, 236, 245, dead_or_set: 242
insn=157, live_throughout: 13, 178, 188, 232, 236, 245, dead_or_set: 176, 244
insn=148, live_throughout: 13, 178, 188, 236, 244, 245, dead_or_set: 232, 234
insn=160, live_throughout: 13, 178, 188, 234, 236, 244, dead_or_set: 242, 245
insn=149, live_throughout: 13, 178, 188, 234, 236, 242, 244, dead_or_set: 234
insn=153, live_throughout: 13, 178, 188, 234, 242, 244, dead_or_set: 236, 238
insn=166, live_throughout: 13, 178, 234, 238, 242, 244, dead_or_set: 2, 188
insn=154, live_throughout: 2, 13, 178, 234, 238, 242, 244, dead_or_set: 238
insn=161, live_throughout: 2, 13, 178, 234, 238, 244, dead_or_set: 242
insn=155, live_throughout: 2, 13, 178, 242, 244, dead_or_set: 234, 238, 239
insn=163, live_throughout: 2, 13, 178, 239, 242, dead_or_set: 242, 244
insn=165, live_throughout: 2, 13, 178, dead_or_set: 0, 1, 239, 242
insn=167, live_throughout: 13, 178, dead_or_set: 0, 1, 2, 14
insn=168, live_throughout: 13, 14, dead_or_set: 178, 184
insn=729, live_throughout: 13, 14, 184, dead_or_set: 
insn=171, live_throughout: 13, 177, 188, 191, 324, dead_or_set: 
insn=175, live_throughout: 13, 177, 188, 191, 324, dead_or_set: 
insn=176, live_throughout: 13, 177, 188, 191, 324, dead_or_set: 
insn=179, live_throughout: 13, 188, 191, 324, dead_or_set: 177
insn=180, live_throughout: 13, 188, 191, 324, dead_or_set: 
insn=183, live_throughout: 13, 188, 191, 324, dead_or_set: 0
insn=184, live_throughout: 13, 188, 191, 324, dead_or_set: 0, 14
insn=185, live_throughout: 13, 188, 191, 324, dead_or_set: 
insn=187, live_throughout: 13, 188, 191, 324, dead_or_set: 251
insn=188, live_throughout: 13, 188, 191, 251, 324, dead_or_set: 
insn=189, live_throughout: 13, 188, 191, 251, 324, dead_or_set: 
insn=195, live_throughout: 13, 188, 191, 251, 324, dead_or_set: 254
insn=708, live_throughout: 13, 188, 191, 251, 254, 324, dead_or_set: 181
insn=209, live_throughout: 13, 188, 191, 251, 254, 324, dead_or_set: 1
insn=214, live_throughout: 1, 13, 188, 191, 251, 254, 324, dead_or_set: 181
insn=747, live_throughout: 1, 13, 188, 191, 251, 254, 324, dead_or_set: 255
insn=208, live_throughout: 1, 13, 188, 191, 251, 255, 324, dead_or_set: 0, 254
insn=748, live_throughout: 0, 1, 13, 188, 191, 251, 324, dead_or_set: 255
insn=193, live_throughout: 0, 1, 13, 188, 191, 255, 324, dead_or_set: 251
insn=198, live_throughout: 0, 1, 13, 188, 191, 324, dead_or_set: 255, 257
insn=200, live_throughout: 0, 1, 13, 188, 191, 324, dead_or_set: 257, 260
insn=201, live_throughout: 0, 1, 13, 188, 191, 324, dead_or_set: 259, 260
insn=202, live_throughout: 0, 1, 13, 188, 191, 324, dead_or_set: 259
insn=210, live_throughout: 13, 188, 191, 324, dead_or_set: 0, 1, 14
insn=211, live_throughout: 13, 188, 191, 324, dead_or_set: 0, 182
insn=217, live_throughout: 13, 182, 188, 191, 324, dead_or_set: 268
insn=215, live_throughout: 13, 182, 188, 191, 268, 324, dead_or_set: 181
insn=223, live_throughout: 13, 181, 182, 188, 191, 268, 324, dead_or_set: 0, 1
insn=218, live_throughout: 0, 1, 13, 181, 182, 188, 191, 324, dead_or_set: 268, 269
insn=216, live_throughout: 0, 1, 13, 181, 188, 191, 269, 324, dead_or_set: 181, 182
insn=224, live_throughout: 0, 1, 13, 181, 188, 191, 324, dead_or_set: 2, 269
insn=225, live_throughout: 13, 181, 188, 191, 324, dead_or_set: 0, 1, 2, 14
insn=673, live_throughout: 0, 1, 13, 181, 188, 191, 324, dead_or_set: 377
insn=674, live_throughout: 1, 13, 181, 188, 191, 324, dead_or_set: 0, 377
insn=675, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 1, 377
insn=228, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 
insn=229, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 
insn=230, live_throughout: 13, 24, 181, 188, 191, 324, 377, dead_or_set: 
insn=232, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 
insn=233, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 
insn=234, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 
insn=657, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 
insn=241, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 137
insn=731, live_throughout: 13, 137, 181, 188, 191, 324, 377, dead_or_set: 
insn=244, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 
insn=709, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 153
insn=246, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 153
insn=247, live_throughout: 13, 153, 181, 188, 191, 324, 377, dead_or_set: 153
insn=248, live_throughout: 13, 153, 181, 188, 191, 324, 377, dead_or_set: 346
insn=250, live_throughout: 13, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=251, live_throughout: 13, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=262, live_throughout: 13, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 143
insn=733, live_throughout: 13, 143, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=265, live_throughout: 13, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=710, live_throughout: 13, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 143
insn=267, live_throughout: 13, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 4
insn=268, live_throughout: 4, 13, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 0, 1
insn=269, live_throughout: 13, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 0, 1, 2, 3, 4, 12, 14
insn=271, live_throughout: 13, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 2, 143
insn=272, live_throughout: 13, 143, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 143
insn=273, live_throughout: 13, 143, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=275, live_throughout: 13, 143, 153, 181, 188, 191, 324, 346, 377, dead_or_set: 275
insn=295, live_throughout: 13, 143, 153, 181, 188, 191, 275, 324, 346, 377, dead_or_set: 371
insn=277, live_throughout: 13, 143, 153, 181, 188, 191, 275, 324, 346, 371, 377, dead_or_set: 276
insn=286, live_throughout: 13, 143, 153, 181, 188, 191, 275, 276, 324, 346, 371, 377, dead_or_set: 160
insn=302, live_throughout: 13, 143, 153, 160, 181, 188, 191, 275, 276, 324, 346, 371, 377, dead_or_set: 162
insn=310, live_throughout: 13, 143, 153, 160, 162, 181, 188, 191, 275, 276, 324, 346, 377, dead_or_set: 164, 371
insn=282, live_throughout: 13, 143, 153, 160, 162, 164, 181, 188, 191, 276, 324, 346, 377, dead_or_set: 161, 275
insn=306, live_throughout: 13, 143, 153, 160, 161, 162, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 142, 276
insn=314, live_throughout: 13, 142, 143, 153, 160, 161, 162, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=315, live_throughout: 13, 24, 142, 143, 153, 160, 161, 162, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=317, live_throughout: 13, 142, 143, 153, 160, 161, 162, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=318, live_throughout: 13, 142, 143, 153, 160, 161, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 162
insn=319, live_throughout: 13, 142, 143, 153, 160, 161, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=659, live_throughout: 13, 142, 143, 153, 160, 161, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=326, live_throughout: 13, 142, 143, 153, 160, 161, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 166
insn=735, live_throughout: 13, 142, 143, 153, 160, 161, 164, 166, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=329, live_throughout: 13, 142, 143, 153, 160, 161, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=331, live_throughout: 13, 142, 143, 153, 160, 161, 164, 181, 188, 191, 324, 346, 377, dead_or_set: 166
insn=332, live_throughout: 13, 142, 143, 153, 160, 161, 164, 166, 181, 188, 191, 324, 346, 377, dead_or_set: 
insn=711, live_throughout: 13, 142, 143, 153, 160, 161, 164, 166, 181, 188, 191, 324, 346, 377, dead_or_set: 140
insn=712, live_throughout: 13, 142, 143, 153, 160, 161, 164, 166, 181, 188, 191, 324, 346, 377, dead_or_set: 289
insn=334, live_throughout: 13, 142, 143, 153, 160, 161, 164, 166, 181, 188, 191, 324, 346, 377, dead_or_set: 140
insn=337, live_throughout: 13, 140, 143, 153, 160, 161, 164, 166, 181, 188, 191, 324, 346, 377, dead_or_set: 142, 289
insn=335, live_throughout: 13, 140, 143, 153, 160, 161, 164, 166, 181, 188, 191, 289, 324, 346, 377, dead_or_set: 140
insn=713, live_throughout: 13, 140, 143, 153, 160, 161, 164, 166, 181, 188, 191, 289, 324, 346, 377, dead_or_set: 154
insn=336, live_throughout: 13, 140, 143, 153, 160, 164, 166, 181, 188, 191, 289, 324, 346, 377, dead_or_set: 139, 161
insn=338, live_throughout: 13, 139, 140, 143, 153, 160, 164, 166, 181, 188, 191, 289, 324, 346, 377, dead_or_set: 289
insn=339, live_throughout: 13, 139, 140, 143, 153, 160, 166, 181, 188, 191, 324, 346, 377, dead_or_set: 164, 165, 289
insn=696, live_throughout: 13, 139, 140, 143, 153, 160, 165, 166, 181, 188, 191, 324, 346, 377, dead_or_set: 378
insn=354, live_throughout: 13, 139, 140, 143, 153, 160, 166, 181, 188, 191, 324, 346, 377, dead_or_set: 165, 292, 378
insn=358, live_throughout: 13, 139, 140, 143, 153, 160, 166, 181, 188, 191, 292, 324, 346, 377, dead_or_set: 154
insn=356, live_throughout: 13, 139, 140, 143, 153, 154, 160, 181, 188, 191, 324, 346, 377, dead_or_set: 166, 292
insn=751, live_throughout: 13, 139, 140, 143, 153, 154, 160, 181, 188, 191, 292, 324, 346, 377, dead_or_set: 156
insn=359, live_throughout: 13, 139, 143, 153, 154, 156, 160, 181, 188, 191, 292, 324, 346, 377, dead_or_set: 140, 154
insn=752, live_throughout: 13, 139, 143, 153, 154, 156, 160, 181, 188, 191, 292, 324, 346, 377, dead_or_set: 155
insn=363, live_throughout: 13, 139, 143, 153, 154, 155, 156, 160, 181, 188, 191, 292, 324, 346, 377, dead_or_set: 382
insn=357, live_throughout: 13, 143, 153, 154, 160, 181, 188, 191, 324, 346, 377, 382, dead_or_set: 139, 155, 156, 292
insn=760, live_throughout: 13, 153, 154, 155, 156, 160, 181, 188, 191, 324, 346, 377, 382, dead_or_set: 143, 386
insn=761, live_throughout: 13, 153, 154, 156, 160, 181, 188, 191, 324, 346, 377, 382, 386, dead_or_set: 155, 387
insn=762, live_throughout: 13, 153, 154, 160, 181, 188, 191, 324, 346, 377, 382, 386, 387, dead_or_set: 156, 388
insn=763, live_throughout: 13, 153, 154, 181, 188, 191, 324, 346, 377, 382, 386, 387, 388, dead_or_set: 160, 389
insn=764, live_throughout: 13, 153, 154, 188, 191, 324, 346, 377, 382, 386, 387, 388, 389, dead_or_set: 181, 390
insn=765, live_throughout: 13, 153, 154, 188, 191, 324, 377, 382, 386, 387, 388, 389, 390, dead_or_set: 346, 391
insn=766, live_throughout: 13, 153, 154, 188, 191, 324, 382, 386, 387, 388, 389, 390, 391, dead_or_set: 377, 392
insn=737, live_throughout: 13, 153, 154, 188, 191, 324, 382, 386, 387, 388, 389, 390, 391, 392, dead_or_set: 
insn=368, live_throughout: 13, 153, 154, 188, 191, 324, 382, 386, 387, 388, 389, 390, 391, 392, dead_or_set: 
insn=364, live_throughout: 13, 153, 154, 188, 191, 324, 382, 387, 388, 389, 390, 391, 392, dead_or_set: 386
insn=365, live_throughout: 13, 153, 154, 188, 191, 324, 382, 386, 389, 390, 391, 392, dead_or_set: 387, 388
insn=366, live_throughout: 13, 153, 154, 188, 191, 324, 382, 386, 387, 388, 389, 390, 391, 392, dead_or_set: 
insn=369, live_throughout: 13, 153, 154, 188, 191, 324, 382, 386, 387, 388, 389, 390, 391, 392, dead_or_set: 
insn=370, live_throughout: 13, 153, 154, 188, 191, 324, 382, 386, 387, 388, 389, 390, 391, 392, dead_or_set: 
insn=767, live_throughout: 13, 188, 191, 324, 387, 388, 389, 390, 391, 392, dead_or_set: 143, 386
insn=768, live_throughout: 13, 143, 188, 191, 324, 388, 389, 390, 391, 392, dead_or_set: 155, 387
insn=769, live_throughout: 13, 143, 155, 188, 191, 324, 389, 390, 391, 392, dead_or_set: 156, 388
insn=770, live_throughout: 13, 143, 155, 156, 188, 191, 324, 390, 391, 392, dead_or_set: 160, 389
insn=771, live_throughout: 13, 143, 155, 156, 160, 188, 191, 324, 391, 392, dead_or_set: 181, 390
insn=772, live_throughout: 13, 143, 155, 156, 160, 181, 188, 191, 324, 392, dead_or_set: 346, 391
insn=773, live_throughout: 13, 143, 155, 156, 160, 181, 188, 191, 324, 346, dead_or_set: 377, 392
insn=714, live_throughout: 13, 143, 155, 156, 160, 181, 188, 191, 324, 346, 377, dead_or_set: 295
insn=715, live_throughout: 13, 143, 155, 156, 160, 181, 188, 191, 324, 346, 377, dead_or_set: 297
insn=379, live_throughout: 13, 143, 155, 160, 181, 188, 191, 324, 346, 377, dead_or_set: 156, 295
insn=381, live_throughout: 13, 143, 160, 181, 188, 191, 295, 324, 346, 377, dead_or_set: 155, 297
insn=380, live_throughout: 13, 143, 160, 181, 188, 191, 295, 297, 324, 346, 377, dead_or_set: 295
insn=382, live_throughout: 13, 143, 160, 181, 188, 191, 295, 297, 324, 346, 377, dead_or_set: 297
insn=383, live_throughout: 13, 143, 160, 181, 188, 191, 324, 346, 377, dead_or_set: 159, 295, 297
insn=384, live_throughout: 13, 143, 159, 160, 181, 188, 191, 324, 377, dead_or_set: 346
insn=385, live_throughout: 13, 143, 159, 160, 181, 188, 191, 324, 377, dead_or_set: 
insn=396, live_throughout: 13, 143, 181, 188, 191, 324, 377, dead_or_set: 298
insn=397, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 137, 143, 298
insn=739, live_throughout: 13, 137, 181, 188, 191, 324, 377, dead_or_set: 
insn=400, live_throughout: 13, 143, 159, 160, 181, 188, 191, 324, 377, dead_or_set: 
insn=402, live_throughout: 13, 143, 159, 181, 188, 191, 324, 377, dead_or_set: 4, 160
insn=403, live_throughout: 4, 13, 143, 181, 188, 191, 324, 377, dead_or_set: 0, 1, 159
insn=404, live_throughout: 13, 143, 181, 188, 191, 324, 377, dead_or_set: 0, 1, 2, 3, 4, 12, 14
insn=406, live_throughout: 13, 181, 188, 191, 324, 377, dead_or_set: 2, 3, 137, 143
insn=407, live_throughout: 13, 137, 181, 188, 191, 324, 377, dead_or_set: 
insn=409, live_throughout: 13, 137, 181, 188, 191, 324, 377, dead_or_set: 144
insn=410, live_throughout: 13, 137, 188, 191, 324, 377, dead_or_set: 144, 181
insn=411, live_throughout: 13, 188, 191, 324, 377, dead_or_set: 137, 144
insn=412, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 
insn=757, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 302
insn=414, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 301, 302
insn=415, live_throughout: 13, 144, 188, 191, 301, 324, 377, dead_or_set: 
insn=416, live_throughout: 13, 144, 188, 191, 301, 324, 377, dead_or_set: 
insn=419, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 301
insn=420, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 
insn=427, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 
insn=428, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 
insn=431, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 
insn=432, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 
insn=439, live_throughout: 13, 188, 191, dead_or_set: 303
insn=440, live_throughout: 13, 188, 191, dead_or_set: 303
insn=741, live_throughout: 13, 188, 191, dead_or_set: 
insn=443, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 
insn=450, live_throughout: 13, 144, 188, 191, 324, 377, dead_or_set: 305
insn=459, live_throughout: 13, 144, 188, 191, 305, 324, 377, dead_or_set: 373
insn=716, live_throughout: 13, 144, 188, 191, 305, 324, 373, 377, dead_or_set: 179
insn=466, live_throughout: 13, 144, 188, 191, 305, 324, 373, 377, dead_or_set: 150
insn=446, live_throughout: 13, 144, 150, 188, 191, 305, 324, 373, 377, dead_or_set: 179
insn=447, live_throughout: 13, 144, 150, 188, 191, 305, 324, 373, 377, dead_or_set: 179
insn=470, live_throughout: 13, 144, 150, 179, 188, 191, 305, 324, 373, 377, dead_or_set: 136
insn=448, live_throughout: 13, 136, 144, 150, 179, 188, 191, 305, 324, 373, dead_or_set: 179, 377
insn=478, live_throughout: 13, 136, 144, 150, 179, 188, 191, 305, 324, 373, dead_or_set: 
insn=449, live_throughout: 13, 24, 136, 144, 150, 179, 188, 191, 305, 324, 373, dead_or_set: 
insn=474, live_throughout: 13, 24, 136, 144, 150, 179, 188, 191, 305, 324, dead_or_set: 149, 373
insn=455, live_throughout: 13, 24, 136, 144, 149, 150, 179, 188, 191, 324, dead_or_set: 151, 305
insn=479, live_throughout: 13, 24, 136, 144, 149, 150, 151, 179, 188, 191, 324, dead_or_set: 
insn=481, live_throughout: 13, 136, 144, 149, 150, 151, 179, 188, 191, 324, dead_or_set: 
insn=482, live_throughout: 13, 136, 144, 149, 151, 179, 188, 191, 324, dead_or_set: 150
insn=483, live_throughout: 13, 136, 144, 149, 151, 179, 188, 191, 324, dead_or_set: 
insn=664, live_throughout: 13, 136, 144, 149, 151, 179, 188, 191, 324, dead_or_set: 
insn=490, live_throughout: 13, 136, 144, 149, 151, 179, 188, 191, 324, dead_or_set: 147
insn=743, live_throughout: 13, 136, 144, 147, 149, 151, 179, 188, 191, 324, dead_or_set: 
insn=493, live_throughout: 13, 136, 144, 149, 151, 179, 188, 191, 324, dead_or_set: 
insn=495, live_throughout: 13, 136, 144, 149, 151, 179, 188, 191, 324, dead_or_set: 147
insn=496, live_throughout: 13, 136, 144, 147, 149, 151, 179, 188, 191, 324, dead_or_set: 
insn=717, live_throughout: 13, 136, 144, 147, 149, 151, 179, 188, 191, 324, dead_or_set: 134
insn=718, live_throughout: 13, 136, 144, 147, 149, 151, 179, 188, 191, 324, dead_or_set: 316
insn=498, live_throughout: 13, 136, 144, 147, 149, 151, 179, 188, 191, 324, dead_or_set: 134
insn=501, live_throughout: 13, 134, 144, 147, 149, 151, 179, 188, 191, 324, dead_or_set: 136, 316
insn=499, live_throughout: 13, 134, 144, 147, 149, 151, 179, 188, 191, 316, 324, dead_or_set: 134
insn=500, live_throughout: 13, 134, 144, 147, 149, 179, 188, 191, 316, 324, dead_or_set: 133, 151
insn=502, live_throughout: 13, 133, 134, 144, 147, 149, 179, 188, 191, 316, 324, dead_or_set: 316
insn=503, live_throughout: 13, 133, 134, 144, 147, 179, 188, 191, 324, dead_or_set: 148, 149, 316
insn=699, live_throughout: 13, 133, 144, 147, 148, 179, 188, 191, 324, dead_or_set: 134, 379
insn=518, live_throughout: 13, 133, 144, 147, 179, 188, 191, 324, dead_or_set: 148, 319, 379
insn=753, live_throughout: 13, 133, 144, 147, 179, 188, 191, 319, 324, dead_or_set: 174
insn=520, live_throughout: 13, 133, 144, 174, 179, 188, 191, 324, dead_or_set: 147, 319
insn=754, live_throughout: 13, 133, 144, 174, 188, 191, 319, 324, dead_or_set: 175, 179
insn=521, live_throughout: 13, 144, 188, 191, 324, dead_or_set: 133, 174, 175, 319
insn=533, live_throughout: 13, 144, 174, 175, 188, 191, 324, dead_or_set: 380
insn=526, live_throughout: 13, 144, 174, 175, 188, 191, 324, 380, dead_or_set: 381
insn=774, live_throughout: 13, 174, 175, 188, 191, 324, 380, 381, dead_or_set: 144, 383
insn=775, live_throughout: 13, 175, 188, 191, 324, 380, 381, 383, dead_or_set: 174, 384
insn=776, live_throughout: 13, 188, 191, 324, 380, 381, 383, 384, dead_or_set: 175, 385
insn=745, live_throughout: 13, 188, 191, 324, 380, 381, 383, 384, 385, dead_or_set: 
insn=535, live_throughout: 13, 188, 191, 380, 381, 383, 384, 385, dead_or_set: 
insn=525, live_throughout: 13, 188, 191, 380, 381, 383, 384, 385, dead_or_set: 320
insn=528, live_throughout: 13, 188, 191, 320, 380, 381, 383, 384, 385, dead_or_set: 324
insn=527, live_throughout: 13, 188, 191, 324, 380, 381, 383, 384, 385, dead_or_set: 320, 321
insn=529, live_throughout: 13, 188, 191, 321, 324, 380, 381, 383, 384, 385, dead_or_set: 324
insn=530, live_throughout: 13, 188, 191, 324, 380, 381, 383, dead_or_set: 321, 384, 385
insn=531, live_throughout: 13, 188, 191, 324, 380, 381, 383, 384, 385, dead_or_set: 
insn=534, live_throughout: 13, 188, 191, 324, 380, 381, 384, 385, dead_or_set: 383
insn=536, live_throughout: 13, 188, 191, 324, 380, 381, 383, 384, 385, dead_or_set: 
insn=537, live_throughout: 13, 188, 191, 324, 380, 381, 383, 384, 385, dead_or_set: 
insn=777, live_throughout: 13, 188, 191, 384, 385, dead_or_set: 144, 383
insn=778, live_throughout: 13, 144, 188, 191, 385, dead_or_set: 174, 384
insn=779, live_throughout: 13, 144, 174, 188, 191, dead_or_set: 175, 385
insn=547, live_throughout: 13, 144, 188, 191, dead_or_set: 174, 175, 327
insn=546, live_throughout: 13, 144, 188, 191, 327, dead_or_set: 326
insn=550, live_throughout: 13, 144, 188, 191, 326, dead_or_set: 327
insn=551, live_throughout: 13, 144, 188, 191, 326, dead_or_set: 
insn=552, live_throughout: 13, 144, 188, 191, dead_or_set: 326
insn=553, live_throughout: 13, 144, 188, 191, 326, dead_or_set: 
insn=554, live_throughout: 13, 144, 188, 191, 326, dead_or_set: 329
insn=555, live_throughout: 13, 188, 191, 326, dead_or_set: 144, 329
insn=556, live_throughout: 13, 188, 191, dead_or_set: 326, 329, 331
insn=557, live_throughout: 13, 188, 191, dead_or_set: 331
insn=558, live_throughout: 13, 188, 191, dead_or_set: 
insn=560, live_throughout: 13, 188, 191, dead_or_set: 180
insn=561, live_throughout: 13, 180, 188, 191, dead_or_set: 332
insn=562, live_throughout: 13, 180, 188, 191, 332, dead_or_set: 376
insn=566, live_throughout: 13, 180, 188, 191, 332, dead_or_set: 376
insn=567, live_throughout: 13, 180, 188, 191, 332, dead_or_set: 
insn=568, live_throughout: 13, 180, 188, 191, dead_or_set: 332
insn=569, live_throughout: 13, 180, 188, 191, 332, dead_or_set: 
insn=570, live_throughout: 13, 188, 191, 332, dead_or_set: 180, 336
insn=576, live_throughout: 13, 191, 332, 336, dead_or_set: 0, 188
insn=578, live_throughout: 0, 13, 332, 336, dead_or_set: 2, 191
insn=577, live_throughout: 0, 2, 13, 332, 336, dead_or_set: 1
insn=579, live_throughout: 0, 1, 2, 13, 332, 336, dead_or_set: 3
insn=571, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 332, 336, 337
insn=756, live_throughout: 0, 1, 2, 3, 13, 337, dead_or_set: 339
insn=575, live_throughout: 0, 1, 2, 3, 13, 337, dead_or_set: 339
insn=572, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 337
insn=580, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=581, live_throughout: 13, 14, dead_or_set: 0, 184
insn=582, live_throughout: 13, 14, 184, dead_or_set: 
insn=588, live_throughout: 13, 14, dead_or_set: 0, 184
insn=594, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 193: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 208: (insn_list:REG_DEP_TRUE 759 (nil))
init_insns for 216: (insn_list:REG_DEP_TRUE 49 (nil))
init_insns for 220: (insn_list:REG_DEP_TRUE 758 (nil))
init_insns for 223: (insn_list:REG_DEP_TRUE 71 (nil))
init_insns for 228: (insn_list:REG_DEP_TRUE 117 (nil))
init_insns for 298: (insn_list:REG_DEP_TRUE 396 (nil))
init_insns for 302: (insn_list:REG_DEP_TRUE 757 (nil))
init_insns for 303: (insn_list:REG_DEP_TRUE 439 (nil))
init_insns for 331: (insn_list:REG_DEP_TRUE 557 (nil))
init_insns for 337: (insn_list:REG_DEP_TRUE 572 (nil))
init_insns for 339: (insn_list:REG_DEP_TRUE 756 (nil))
init_insns for 380: (insn_list:REG_DEP_TRUE 533 (nil))
init_insns for 381: (insn_list:REG_DEP_TRUE 526 (nil))
init_insns for 382: (insn_list:REG_DEP_TRUE 363 (nil))
      Coalescing spilled allocnos a45r295->a60r153
      Coalescing spilled allocnos a57r289->a49r292
      Coalescing spilled allocnos a44r297->a51r154
      Coalescing spilled allocnos a22r148->a60r153
      Coalescing spilled allocnos a25r149->a51r154
      Coalescing spilled allocnos a27r151->a60r153
      Coalescing spilled allocnos a54r165->a58r161
      Coalescing spilled allocnos a109r320->a60r153
      Slot 1 (freq,size): a109r320(2000,8) a27r151(2000,8) a22r148(2000,8) a45r295(5000,8) a60r153(9000,8)
      Slot 2 (freq,size): a25r149(2000,8) a44r297(4000,8) a51r154(5000,8)
      Slot 3 (freq,size): a57r289(4000,8) a49r292(5000,8)
      Slot 4 (freq,size): a48r139(4000,8)
      Slot 5 (freq,size): a29r324(4000,8)
      Slot 6 (freq,size): a54r165(2000,8) a58r161(2000,8)
      Slot 7 (freq,size): a53r166(3000,8)
      Slot 8 (freq,size): a6r188(3000,4)
      Slot 9 (freq,size): a5r191(3000,4)
      Slot 10 (freq,size): a56r164(2000,8)
      Assigning 164(freq=2000) a new slot 9
      Assigning 191(freq=3000) a new slot 8
      Assigning 188(freq=3000) a new slot 7
      Assigning 166(freq=3000) a new slot 6
      Assigning 161(freq=2000) a new slot 5
      Assigning 165(freq=2000) slot 5 of 161
      Assigning 324(freq=5000) a new slot 4
      Assigning 139(freq=3000) a new slot 3
      Assigning 289(freq=6000) a new slot 2
      Assigning 292(freq=4000) slot 2 of 289
      Assigning 149(freq=2000) a new slot 1
      Assigning 154(freq=6000) slot 1 of 149
      Assigning 297(freq=6000) slot 1 of 149 154
      Assigning 148(freq=2000) a new slot 0
      Assigning 151(freq=2000) slot 0 of 148
      Assigning 153(freq=10000) slot 0 of 148 151
      Assigning 295(freq=7000) slot 0 of 148 151 153
      Assigning 320(freq=2000) slot 0 of 148 151 153 295
changing reg in insn 500
changing reg in insn 521
changing reg in insn 717
changing reg in insn 498
changing reg in insn 500
changing reg in insn 499
changing reg in insn 470
changing reg in insn 406
changing reg in insn 397
changing reg in insn 241
changing reg in insn 411
changing reg in insn 711
changing reg in insn 334
changing reg in insn 336
changing reg in insn 335
changing reg in insn 306
changing reg in insn 767
changing reg in insn 710
changing reg in insn 262
changing reg in insn 760
changing reg in insn 406
changing reg in insn 271
changing reg in insn 272
changing reg in insn 397
changing reg in insn 397
changing reg in insn 777
changing reg in insn 409
changing reg in insn 410
changing reg in insn 411
changing reg in insn 774
changing reg in insn 410
changing reg in insn 411
changing reg in insn 555
changing reg in insn 414
changing reg in insn 412
changing reg in insn 555
changing reg in insn 414
changing reg in insn 495
changing reg in insn 490
changing reg in insn 520
changing reg in insn 466
changing reg in insn 470
changing reg in insn 470
changing reg in insn 768
changing reg in insn 752
changing reg in insn 357
changing reg in insn 761
changing reg in insn 357
changing reg in insn 769
changing reg in insn 751
changing reg in insn 357
changing reg in insn 762
changing reg in insn 357
changing reg in insn 383
changing reg in insn 403
changing reg in insn 770
changing reg in insn 286
changing reg in insn 763
changing reg in insn 306
changing reg in insn 310
changing reg in insn 402
changing reg in insn 302
changing reg in insn 306
changing reg in insn 16
changing reg in insn 131
changing reg in insn 22
changing reg in insn 58
changing reg in insn 46
changing reg in insn 46
changing reg in insn 88
changing reg in insn 704
changing reg in insn 50
changing reg in insn 30
changing reg in insn 72
changing reg in insn 53
changing reg in insn 50
changing reg in insn 31
changing reg in insn 29
changing reg in insn 72
changing reg in insn 50
changing reg in insn 778
changing reg in insn 753
changing reg in insn 521
changing reg in insn 775
changing reg in insn 521
changing reg in insn 547
changing reg in insn 779
changing reg in insn 754
changing reg in insn 521
changing reg in insn 776
changing reg in insn 521
changing reg in insn 547
changing reg in insn 140
changing reg in insn 126
changing reg in insn 134
changing reg in insn 159
changing reg in insn 157
changing reg in insn 151
changing reg in insn 146
changing reg in insn 692
changing reg in insn 694
changing reg in insn 91
changing reg in insn 66
changing reg in insn 179
changing reg in insn 175
changing reg in insn 114
changing reg in insn 110
changing reg in insn 124
changing reg in insn 142
changing reg in insn 135
changing reg in insn 168
changing reg in insn 716
changing reg in insn 754
changing reg in insn 447
changing reg in insn 448
changing reg in insn 446
changing reg in insn 449
changing reg in insn 560
changing reg in insn 570
changing reg in insn 771
changing reg in insn 708
changing reg in insn 764
changing reg in insn 410
changing reg in insn 215
changing reg in insn 216
changing reg in insn 214
changing reg in insn 410
changing reg in insn 211
changing reg in insn 215
changing reg in insn 216
changing reg in insn 581
changing reg in insn 168
changing reg in insn 588
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 759
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 758
changing reg in insn 58
changing reg in insn 72
changing reg in insn 71
changing reg in insn 72
changing reg in insn 117
changing reg in insn 126
changing reg in insn 119
changing reg in insn 146
changing reg in insn 148
changing reg in insn 705
changing reg in insn 148
changing reg in insn 155
changing reg in insn 149
changing reg in insn 151
changing reg in insn 153
changing reg in insn 706
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 165
changing reg in insn 707
changing reg in insn 165
changing reg in insn 161
changing reg in insn 163
changing reg in insn 160
changing reg in insn 157
changing reg in insn 161
changing reg in insn 163
changing reg in insn 159
changing reg in insn 160
changing reg in insn 187
changing reg in insn 214
changing reg in insn 188
changing reg in insn 195
changing reg in insn 747
changing reg in insn 208
changing reg in insn 748
changing reg in insn 747
changing reg in insn 748
changing reg in insn 198
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 200
changing reg in insn 201
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 224
changing reg in insn 275
changing reg in insn 302
changing reg in insn 282
changing reg in insn 277
changing reg in insn 306
changing reg in insn 282
changing reg in insn 396
changing reg in insn 397
changing reg in insn 414
changing reg in insn 757
changing reg in insn 414
changing reg in insn 439
changing reg in insn 440
changing reg in insn 450
changing reg in insn 466
changing reg in insn 455
changing reg in insn 455
changing reg in insn 718
changing reg in insn 502
changing reg in insn 501
changing reg in insn 503
changing reg in insn 518
changing reg in insn 520
changing reg in insn 521
changing reg in insn 520
changing reg in insn 527
changing reg in insn 530
changing reg in insn 552
changing reg in insn 546
changing reg in insn 556
changing reg in insn 547
changing reg in insn 554
changing reg in insn 555
changing reg in insn 555
changing reg in insn 556
changing reg in insn 556
changing reg in insn 557
changing reg in insn 568
changing reg in insn 561
changing reg in insn 571
changing reg in insn 570
changing reg in insn 571
changing reg in insn 571
changing reg in insn 572
changing reg in insn 756
changing reg in insn 575
changing reg in insn 772
changing reg in insn 248
changing reg in insn 765
changing reg in insn 250
changing reg in insn 384
changing reg in insn 14
changing reg in insn 27
changing reg in insn 29
changing reg in insn 26
changing reg in insn 25
changing reg in insn 30
changing reg in insn 26
changing reg in insn 31
changing reg in insn 295
changing reg in insn 310
changing reg in insn 302
changing reg in insn 459
changing reg in insn 474
changing reg in insn 474
changing reg in insn 466
changing reg in insn 562
changing reg in insn 566
changing reg in insn 773
changing reg in insn 673
changing reg in insn 766
changing reg in insn 752
changing reg in insn 675
changing reg in insn 674
changing reg in insn 268
changing reg in insn 228
changing reg in insn 696
changing reg in insn 354
changing reg in insn 699
changing reg in insn 518
changing reg in insn 533
changing reg in insn 534
changing reg in insn 526
changing reg in insn 527
changing reg in insn 774
changing reg in insn 534
changing reg in insn 777
changing reg in insn 525
changing reg in insn 525
changing reg in insn 534
changing reg in insn 534
changing reg in insn 775
changing reg in insn 530
changing reg in insn 778
changing reg in insn 530
changing reg in insn 776
changing reg in insn 530
changing reg in insn 779
changing reg in insn 530
changing reg in insn 760
changing reg in insn 364
changing reg in insn 767
changing reg in insn 364
changing reg in insn 364
changing reg in insn 761
changing reg in insn 365
changing reg in insn 768
changing reg in insn 365
changing reg in insn 762
changing reg in insn 365
changing reg in insn 769
changing reg in insn 365
changing reg in insn 763
changing reg in insn 770
changing reg in insn 764
changing reg in insn 771
changing reg in insn 765
changing reg in insn 772
changing reg in insn 766
changing reg in insn 773
Spilling for insn 2.
Spilling for insn 5.
Spilling for insn 23.
Spilling for insn 17.
Spilling for insn 53.
Spilling for insn 63.
Using reg 1 for reload 0
Spilling for insn 693.
Using reg 1 for reload 0
Spilling for insn 155.
Spilling for insn 193.
Spilling for insn 202.
Spilling for insn 228.
Spilling for insn 709.
Using reg 2 for reload 0
Spilling for insn 246.
Using reg 3 for reload 0
Spilling for insn 247.
Using reg 3 for reload 0
Spilling for insn 248.
Spilling for insn 267.
Spilling for insn 272.
Using reg 3 for reload 0
Spilling for insn 286.
Spilling for insn 310.
Using reg 2 for reload 0
Spilling for insn 282.
Using reg 2 for reload 0
Spilling for insn 306.
Using reg 2 for reload 0
Spilling for insn 326.
Using reg 2 for reload 0
Spilling for insn 331.
Using reg 2 for reload 0
Spilling for insn 712.
Using reg 2 for reload 0
Spilling for insn 337.
Using reg 12 for reload 0
Spilling for insn 713.
Using reg 0 for reload 0
Spilling for insn 336.
Using reg 0 for reload 0
Spilling for insn 338.
Using reg 1 for reload 0
Spilling for insn 339.
Using reg 0 for reload 0
Using reg 2 for reload 1
Spilling for insn 696.
Using reg 3 for reload 0
Spilling for insn 354.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 358.
Using reg 3 for reload 0
Spilling for insn 356.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 359.
Using reg 3 for reload 0
Spilling for insn 357.
Using reg 0 for reload 0
Using reg 2 for reload 1
Spilling for insn 364.
Using reg 6 for reload 0
Spilling for insn 365.
Using reg 6 for reload 0
Using reg 10 for reload 1
Spilling for insn 714.
Using reg 2 for reload 0
Spilling for insn 715.
Using reg 2 for reload 0
Spilling for insn 379.
Using reg 3 for reload 0
Spilling for insn 381.
Using reg 3 for reload 0
Spilling for insn 380.
Using reg 3 for reload 0
Spilling for insn 382.
Using reg 3 for reload 1
Spilling for insn 383.
Using reg 2 for reload 1
Spilling for insn 412.
Spilling for insn 440.
Spilling for insn 470.
Spilling for insn 449.
Spilling for insn 474.
Using reg 6 for reload 0
Spilling for insn 455.
Using reg 6 for reload 0
Spilling for insn 500.
Spilling for insn 503.
Using reg 10 for reload 0
Spilling for insn 518.
Using reg 6 for reload 0
Spilling for insn 525.
Using reg 4 for reload 0
Spilling for insn 528.
Using reg 12 for reload 0
Spilling for insn 527.
Spilling for insn 529.
Using reg 12 for reload 0
Spilling for insn 530.
Using reg 10 for reload 0
Spilling for insn 550.
Using reg 1 for reload 0
Spilling for insn 557.
Spilling for insn 575.
Spilling for insn 572.
      Spill 140(a52), cost=70000
      Spill 155(a46), cost=60000
      Spill 156(a47), cost=60000
      Spill 162(a61), cost=40000
      Spill 147(a21), cost=30000
      Spill 378(a55), cost=20000: reassign to 12
changing reg in insn 696
changing reg in insn 354
      Spill 380(a17), cost=20000
      Spill 390(a116), cost=20000
      Spill 392(a121), cost=20000
      Spilled regs 140 155 156 162 147 380 390 392
        Try assign 155(a46), cost=60000
        Try assign 295(a45), cost=50000
        Try assign 156(a47), cost=60000
        Try assign 297(a44), cost=40000
        Try assign 148(a22), cost=20000
        Try assign 320(a109), cost=20000: reassign to 10
changing reg in insn 525
changing reg in insn 527
changing reg in insn 527
        Try assign 289(a57), cost=40000
        Try assign 153(a60), cost=80000
        Try assign 390(a116), cost=20000
        Try assign 392(a121), cost=20000
        Try assign 154(a51), cost=40000
        Try assign 165(a54), cost=20000
        Try assign 151(a27), cost=20000: reassign to 10
changing reg in insn 455
        Try assign 166(a53), cost=30000
        Try assign 140(a52), cost=70000
        Try assign 149(a25), cost=20000
        Try assign 139(a48), cost=30000
        Try assign 382(a50), cost=20000
        Try assign 161(a58), cost=20000
        Try assign 292(a49), cost=40000
        Try assign 164(a56), cost=20000
        Try assign 324(a29), cost=30000
        Try assign 191(a5), cost=30000
        Try assign 188(a6), cost=30000
changing reg in insn 711
changing reg in insn 335
changing reg in insn 334
      Assigning 140(freq=9000) a new slot 10
 Register 140 now on stack.

changing reg in insn 490
changing reg in insn 495
changing reg in insn 520
      Assigning 147(freq=3000) slot 2 of 289 292
 Register 147 now on stack.

 Register 151 now in 10.

changing reg in insn 357
changing reg in insn 752
changing reg in insn 768
changing reg in insn 357
changing reg in insn 761
      Assigning 155(freq=6000) slot 5 of 161 165
 Register 155 now on stack.

changing reg in insn 357
changing reg in insn 751
changing reg in insn 769
changing reg in insn 357
changing reg in insn 762
      Assigning 156(freq=6000) slot 6 of 166
 Register 156 now on stack.

changing reg in insn 302
changing reg in insn 306
      Assigning 162(freq=4000) slot 1 of 149 154 297
 Register 162 now on stack.

 Register 320 now in 10.

 Register 378 now in 12.

changing reg in insn 533
changing reg in insn 534
 Register 380 now on stack.

changing reg in insn 764
changing reg in insn 771
      Assigning 390(freq=2000) slot 2 of 147 289 292
 Register 390 now on stack.

changing reg in insn 766
changing reg in insn 773
      Assigning 392(freq=2000) slot 3 of 139
 Register 392 now on stack.

Spilling for insn 2.
Spilling for insn 5.
Spilling for insn 23.
Spilling for insn 17.
Spilling for insn 53.
Spilling for insn 63.
Using reg 1 for reload 0
Spilling for insn 693.
Using reg 1 for reload 0
Spilling for insn 155.
Spilling for insn 193.
Spilling for insn 202.
Spilling for insn 228.
Spilling for insn 709.
Using reg 2 for reload 0
Spilling for insn 246.
Using reg 3 for reload 0
Spilling for insn 247.
Using reg 3 for reload 0
Spilling for insn 248.
Spilling for insn 267.
Spilling for insn 272.
Using reg 3 for reload 0
Spilling for insn 286.
Spilling for insn 302.
Using reg 2 for reload 0
Spilling for insn 310.
Using reg 2 for reload 0
Spilling for insn 282.
Using reg 2 for reload 0
Spilling for insn 306.
Using reg 2 for reload 0
Spilling for insn 314.
Using reg 3 for reload 0
Spilling for insn 318.
Using reg 3 for reload 0
Spilling for insn 326.
Using reg 2 for reload 0
Spilling for insn 331.
Using reg 2 for reload 0
Spilling for insn 711.
Using reg 2 for reload 0
Spilling for insn 712.
Using reg 2 for reload 0
Spilling for insn 334.
Using reg 3 for reload 0
Spilling for insn 337.
Using reg 3 for reload 0
Spilling for insn 335.
Using reg 3 for reload 0
Spilling for insn 713.
Using reg 2 for reload 0
Spilling for insn 336.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 338.
Using reg 3 for reload 1
Spilling for insn 339.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 696.
Using reg 3 for reload 0
Using reg 2 for reload 1
Spilling for insn 354.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 358.
Using reg 3 for reload 0
Spilling for insn 356.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 751.
Using reg 2 for reload 0
Spilling for insn 359.
Using reg 3 for reload 1
Spilling for insn 752.
Spilling for insn 357.
Using reg 2 for reload 0
Using reg 0 for reload 1
Using reg 8 for reload 2
Using reg 4 for reload 3
Spilling for insn 764.
Spilling for insn 766.
Spilling for insn 364.
Using reg 6 for reload 0
Spilling for insn 365.
Using reg 6 for reload 0
Using reg 10 for reload 1
Spilling for insn 768.
Spilling for insn 769.
Spilling for insn 714.
Using reg 2 for reload 0
Spilling for insn 715.
Using reg 2 for reload 0
Spilling for insn 379.
Using reg 3 for reload 1
Spilling for insn 381.
Using reg 3 for reload 1
Spilling for insn 380.
Using reg 3 for reload 0
Spilling for insn 382.
Using reg 3 for reload 1
Spilling for insn 383.
Using reg 2 for reload 1
Spilling for insn 412.
Spilling for insn 440.
Spilling for insn 470.
Spilling for insn 449.
Spilling for insn 474.
Using reg 6 for reload 0
Spilling for insn 490.
Using reg 4 for reload 0
Spilling for insn 495.
Using reg 4 for reload 0
Spilling for insn 500.
Spilling for insn 503.
Using reg 10 for reload 0
Spilling for insn 518.
Using reg 6 for reload 0
Spilling for insn 520.
Using reg 10 for reload 0
Spilling for insn 525.
Spilling for insn 528.
Using reg 12 for reload 0
Spilling for insn 529.
Using reg 12 for reload 0
Spilling for insn 530.
Using reg 10 for reload 0
Spilling for insn 534.
Using reg 4 for reload 0
Spilling for insn 550.
Using reg 1 for reload 0
Spilling for insn 557.
Spilling for insn 575.
Spilling for insn 572.
      Spill 143(a39), cost=102000
      Spill 160(a41), cost=64000: reassign to 14
changing reg in insn 286
changing reg in insn 770
changing reg in insn 402
changing reg in insn 310
changing reg in insn 306
changing reg in insn 763
      Spill 346(a43), cost=50000
      Spilled regs 143 346
        Try assign 162(a61), cost=40000: reassign to 4
changing reg in insn 302
changing reg in insn 306
        Try assign 143(a39), cost=102000
        Try assign 346(a43), cost=50000
changing reg in insn 262
changing reg in insn 710
changing reg in insn 767
changing reg in insn 397
changing reg in insn 272
changing reg in insn 271
changing reg in insn 406
changing reg in insn 760
changing reg in insn 397
      Assigning 143(freq=12000) a new slot 11
 Register 143 now on stack.

 Register 160 now in 14.

 Register 162 now in 4.

changing reg in insn 248
changing reg in insn 772
changing reg in insn 384
changing reg in insn 250
changing reg in insn 765
      Assigning 346(freq=5000) a new slot 12
 Register 346 now on stack.

Spilling for insn 2.
Spilling for insn 5.
Spilling for insn 23.
Spilling for insn 17.
Spilling for insn 53.
Spilling for insn 63.
Using reg 1 for reload 0
Spilling for insn 693.
Using reg 1 for reload 0
Spilling for insn 155.
Spilling for insn 193.
Spilling for insn 202.
Spilling for insn 228.
Spilling for insn 709.
Using reg 2 for reload 0
Spilling for insn 246.
Using reg 3 for reload 0
Spilling for insn 247.
Using reg 3 for reload 0
Spilling for insn 248.
Using reg 3 for reload 1
Spilling for insn 250.
Using reg 3 for reload 0
Spilling for insn 262.
Using reg 2 for reload 0
Spilling for insn 710.
Using reg 2 for reload 0
Spilling for insn 267.
Spilling for insn 271.
Spilling for insn 272.
Using reg 3 for reload 1
Spilling for insn 295.
Spilling for insn 277.
Spilling for insn 286.
Spilling for insn 310.
Using reg 2 for reload 0
Spilling for insn 282.
Using reg 2 for reload 0
Spilling for insn 306.
Using reg 2 for reload 0
Spilling for insn 326.
Using reg 2 for reload 0
Spilling for insn 331.
Using reg 2 for reload 0
Spilling for insn 711.
Using reg 2 for reload 0
Spilling for insn 712.
Using reg 2 for reload 0
Spilling for insn 334.
Using reg 3 for reload 0
Spilling for insn 337.
Using reg 3 for reload 0
Spilling for insn 335.
Using reg 3 for reload 0
Spilling for insn 713.
Using reg 2 for reload 0
Spilling for insn 336.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 338.
Using reg 3 for reload 1
Spilling for insn 339.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 696.
Using reg 3 for reload 0
Using reg 2 for reload 1
Spilling for insn 354.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 358.
Using reg 3 for reload 0
Spilling for insn 356.
Using reg 2 for reload 0
Using reg 0 for reload 1
Spilling for insn 751.
Using reg 2 for reload 0
Spilling for insn 359.
Using reg 3 for reload 1
Spilling for insn 752.
Spilling for insn 357.
Using reg 2 for reload 0
Using reg 0 for reload 1
Using reg 4 for reload 2
Using reg 8 for reload 3
Spilling for insn 764.
Spilling for insn 766.
Spilling for insn 364.
Using reg 6 for reload 0
Spilling for insn 365.
Using reg 6 for reload 0
Using reg 10 for reload 1
Spilling for insn 767.
Spilling for insn 768.
Spilling for insn 769.
Spilling for insn 772.
Spilling for insn 714.
Using reg 2 for reload 0
Spilling for insn 715.
Using reg 2 for reload 0
Spilling for insn 379.
Using reg 3 for reload 1
Spilling for insn 381.
Using reg 3 for reload 1
Spilling for insn 380.
Using reg 3 for reload 0
Spilling for insn 382.
Using reg 3 for reload 1
Spilling for insn 383.
Using reg 2 for reload 1
Spilling for insn 384.
Using reg 3 for reload 0
Spilling for insn 397.
Spilling for insn 406.
Using reg 4 for reload 0
Spilling for insn 412.
Spilling for insn 440.
Spilling for insn 470.
Spilling for insn 449.
Spilling for insn 474.
Using reg 6 for reload 0
Spilling for insn 490.
Using reg 4 for reload 0
Spilling for insn 495.
Using reg 4 for reload 0
Spilling for insn 500.
Spilling for insn 503.
Using reg 10 for reload 0
Spilling for insn 518.
Using reg 6 for reload 0
Spilling for insn 520.
Using reg 10 for reload 0
Spilling for insn 525.
Spilling for insn 528.
Using reg 12 for reload 0
Spilling for insn 529.
Using reg 12 for reload 0
Spilling for insn 530.
Using reg 10 for reload 0
Spilling for insn 534.
Using reg 4 for reload 0
Spilling for insn 550.
Using reg 1 for reload 0
Spilling for insn 557.
Spilling for insn 575.
Spilling for insn 572.
deleting insn with uid = 533.
deleting insn with uid = 363.

Reloads for insn # 2
Reload 0: reload_out (SI) = (reg/v:SI 188 [ dd ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 188 [ dd ])

Reloads for insn # 5
Reload 0: reload_out (SI) = (reg/v:SI 191 [ fpscr ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 191 [ fpscr ])

Reloads for insn # 23
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 120 [0x78])) [0 vdm.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 120 [0x78])) [0 vdm.exponent+0 S2 A64])

Reloads for insn # 17
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 122 [0x7a])) [0 vdm.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 122 [0x7a])) [0 vdm.sign+0 S2 A16])

Reloads for insn # 53
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 63
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 0 r0)

Reloads for insn # 693
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 155
Reload 0: reload_in (DI) = (reg:DI 6 r6 [234])
	reload_out (DI) = (reg:DI 10 sl [239])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 6 r6 [234])
	reload_out_reg: (reg:DI 10 sl [239])
	reload_reg_rtx: (reg:DI 10 sl [239])

Reloads for insn # 193
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 106 [0x6a])) [0 vdd.sign+0 S2 A16])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 106 [0x6a])) [0 vdd.sign+0 S2 A16])

Reloads for insn # 202
Reload 0: reload_out (HI) = (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 104 [0x68])) [0 vdd.exponent+0 S2 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 104 [0x68])) [0 vdd.exponent+0 S2 A64])

Reloads for insn # 228
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 709
Reload 0: reload_out (DI) = (reg/v:DI 153 [ mh ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 153 [ mh ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 246
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 153 [ mh ]) 0)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 153 [ mh ]) 0)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 247
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 153 [ mh ]) 4)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 153 [ mh ]) 4)
	reload_reg_rtx: (reg:SI 4 r4)

Reloads for insn # 248
Reload 0: reload_out (SI) = (reg:SI 346 [ D.6380+4 ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg:SI 346 [ D.6380+4 ])
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 153 [ mh ]) 0)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 153 [ mh ]) 0)
	reload_reg_rtx: (reg:SI 5 r5)

Reloads for insn # 250
Reload 0: reload_in (SI) = (reg:SI 346 [ D.6380+4 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 0)
	reload_in_reg: (reg:SI 346 [ D.6380+4 ])
	reload_reg_rtx: (reg:SI 5 r5)

Reloads for insn # 262
Reload 0: reload_out (DI) = (reg/v:DI 143 [ z.1250 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 143 [ z.1250 ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 710
Reload 0: reload_out (DI) = (reg/v:DI 143 [ z.1250 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 143 [ z.1250 ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 267
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 153 [ mh ]) 0)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 153 [ mh ]) 0)
	reload_reg_rtx: (reg/v:SI 4 r4 [ __base ])

Reloads for insn # 271
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 143 [ z.1250 ]) 4)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 143 [ z.1250 ]) 4)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 272
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 143 [ z.1250 ]) 0)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 153 [ mh ]) 4)
	reload_out (SI) = (subreg:SI (reg/v:DI 143 [ z.1250 ]) 0)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 153 [ mh ]) 4)
	reload_out_reg: (subreg:SI (reg/v:DI 143 [ z.1250 ]) 0)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 295
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 143 [ z.1250 ]) 4)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 143 [ z.1250 ]) 4)
	reload_reg_rtx: (reg:SI 12 ip [371])

Reloads for insn # 277
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 143 [ z.1250 ]) 0)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 143 [ z.1250 ]) 0)
	reload_reg_rtx: (reg:SI 0 r0 [orig:276 z.1250 ] [276])

Reloads for insn # 286
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 153 [ mh ]) 0)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 153 [ mh ]) 0)
	reload_reg_rtx: (reg/v:SI 14 lr [orig:160 __left ] [160])

Reloads for insn # 310
Reload 0: reload_out (DI) = (reg/v:DI 164 [ rh ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 164 [ rh ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 282
Reload 0: reload_out (DI) = (reg/v:DI 161 [ rl ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 161 [ rl ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 306
Reload 0: reload_in (DI) = (reg/v:DI 4 r4 [orig:162 rmb ] [162])
	reload_out (DI) = (reg/v:DI 0 r0 [orig:142 rma.1251 ] [142])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 4 r4 [orig:162 rmb ] [162])
	reload_out_reg: (reg/v:DI 0 r0 [orig:142 rma.1251 ] [142])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 326
Reload 0: reload_out (DI) = (reg:DI 166 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 166 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 331
Reload 0: reload_out (DI) = (reg:DI 166 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 166 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 711
Reload 0: reload_out (DI) = (reg/v:DI 140 [ rma.1253 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 140 [ rma.1253 ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 712
Reload 0: reload_out (DI) = (reg:DI 289 [ rma.1253 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 289 [ rma.1253 ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 334
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 4)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 4)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 337
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 289 [ rma.1253 ]) 0)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 289 [ rma.1253 ]) 0)
	reload_reg_rtx: (reg:SI 4 r4)

Reloads for insn # 335
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 0)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 0)
	reload_reg_rtx: (reg:SI 5 r5)

Reloads for insn # 713
Reload 0: reload_out (DI) = (reg/v:DI 154 [ ml ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 154 [ ml ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 336
Reload 0: reload_in (DI) = (reg/v:DI 161 [ rl ])
	reload_out (DI) = (reg/v:DI 139 [ rl.1254 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 161 [ rl ])
	reload_out_reg: (reg/v:DI 139 [ rl.1254 ])
	reload_reg_rtx: (reg:DI 0 r0)
Reload 1: reload_in (DI) = (reg/v:DI 140 [ rma.1253 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:DI 140 [ rma.1253 ])
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 338
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 289 [ rma.1253 ]) 4)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 0)
	reload_out (SI) = (subreg:SI (reg:DI 289 [ rma.1253 ]) 4)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 0)
	reload_out_reg: (subreg:SI (reg:DI 289 [ rma.1253 ]) 4)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 339
Reload 0: reload_in (DI) = (reg:DI 289 [ rma.1253 ])
	reload_out (DI) = (reg:DI 165 [ D.6250 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 289 [ rma.1253 ])
	reload_out_reg: (reg:DI 165 [ D.6250 ])
	reload_reg_rtx: (reg:DI 4 r4)
Reload 1: reload_in (DI) = (reg/v:DI 164 [ rh ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:DI 164 [ rh ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 696
Reload 0: reload_in (SI) = (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 4)
	reload_reg_rtx: (reg:SI 3 r3)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 139 [ rl.1254 ]) 4)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 3)
	reload_in_reg: (subreg:SI (reg/v:DI 139 [ rl.1254 ]) 4)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 354
Reload 0: reload_out (DI) = (reg:DI 292)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_out_reg: (reg:DI 292)
	reload_reg_rtx: (reg:DI 0 r0)
Reload 1: reload_in (DI) = (reg:DI 165 [ D.6250 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:DI 165 [ D.6250 ])
	reload_reg_rtx: (reg:DI 4 r4)
deleting insn with uid = 812.
changing reg in insn 354

Reloads for insn # 358
Reload 0: reload_out (SI) = (subreg:SI (reg/v:DI 154 [ ml ]) 4)
	CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 154 [ ml ]) 4)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 356
Reload 0: reload_in (DI) = (reg:DI 292)
	reload_out (DI) = (reg:DI 292)
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 292)
	reload_out_reg: (reg:DI 292)
	reload_reg_rtx: (reg:DI 2 r2)
Reload 1: reload_in (DI) = (reg:DI 166 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 166 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 751
Reload 0: reload_out (DI) = (reg/v:DI 156 [ reml ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 156 [ reml ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 359
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg/v:DI 154 [ ml ]) 0)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 0)
	reload_out (SI) = (subreg:SI (reg/v:DI 154 [ ml ]) 0)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 0)
	reload_out_reg: (subreg:SI (reg/v:DI 154 [ ml ]) 0)
	reload_reg_rtx: (reg:SI 9 r9)

Reloads for insn # 752
Reload 0: reload_out (DI) = (reg/v:DI 155 [ remh ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:DI 155 [ remh ])

Reloads for insn # 357
Reload 0: reload_in (DI) = (reg/v:DI 156 [ reml ])
	reload_out (DI) = (reg/v:DI 156 [ reml ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 156 [ reml ])
	reload_out_reg: (reg/v:DI 156 [ reml ])
	reload_reg_rtx: (reg:DI 0 r0)
Reload 1: reload_in (DI) = (reg/v:DI 155 [ remh ])
	reload_out (DI) = (reg/v:DI 155 [ remh ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg/v:DI 155 [ remh ])
	reload_out_reg: (reg/v:DI 155 [ remh ])
	reload_reg_rtx: (reg:DI 4 r4)
Reload 2: reload_in (DI) = (reg/v:DI 139 [ rl.1254 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 4)
	reload_in_reg: (reg/v:DI 139 [ rl.1254 ])
	reload_reg_rtx: (reg:DI 8 r8)
Reload 3: reload_in (DI) = (reg:DI 292)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 5)
	reload_in_reg: (reg:DI 292)
	reload_reg_rtx: (reg:DI 2 r2)

Reloads for insn # 764
Reload 0: reload_out (DI) = (reg:DI 390 [orig:181 D.4301 ] [181])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg:DI 390 [orig:181 D.4301 ] [181])

Reloads for insn # 766
Reload 0: reload_out (DI) = (reg:DI 392 [orig:377 __n ] [377])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg:DI 392 [orig:377 __n ] [377])

Reloads for insn # 364
Reload 0: reload_in (DI) = (const_int -4294967296 [0xffffffff00000000])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 382)
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 365
Reload 0: reload_in (DI) = (reg/v:DI 154 [ ml ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 4)
	reload_in_reg: (reg/v:DI 154 [ ml ])
	reload_reg_rtx: (reg:DI 6 r6)
Reload 1: reload_in (DI) = (reg/v:DI 153 [ mh ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 5)
	reload_in_reg: (reg/v:DI 153 [ mh ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 767
Reload 0: reload_out (DI) = (reg/v:DI 143 [ z.1250 ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:DI 143 [ z.1250 ])

Reloads for insn # 768
Reload 0: reload_out (DI) = (reg/v:DI 155 [ remh ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:DI 155 [ remh ])

Reloads for insn # 769
Reload 0: reload_out (DI) = (reg/v:DI 156 [ reml ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:DI 156 [ reml ])

Reloads for insn # 772
Reload 0: reload_out (SI) = (reg:SI 346 [ D.6380+4 ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg:SI 346 [ D.6380+4 ])

Reloads for insn # 714
Reload 0: reload_out (DI) = (reg:DI 295)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 295)
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 715
Reload 0: reload_out (DI) = (reg:DI 297 [ remh ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 297 [ remh ])
	reload_reg_rtx: (reg:DI 0 r0)

Reloads for insn # 379
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 295) 0)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 156 [ reml ]) 4)
	reload_out (SI) = (subreg:SI (reg:DI 295) 0)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 156 [ reml ]) 4)
	reload_out_reg: (subreg:SI (reg:DI 295) 0)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 381
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 297 [ remh ]) 4)
Reload 1: reload_in (SI) = (subreg:SI (reg/v:DI 155 [ remh ]) 0)
	reload_out (SI) = (subreg:SI (reg:DI 297 [ remh ]) 4)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg/v:DI 155 [ remh ]) 0)
	reload_out_reg: (subreg:SI (reg:DI 297 [ remh ]) 4)
	reload_reg_rtx: (reg:SI 2 r2)
deleting insn with uid = 768.

Reloads for insn # 380
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 295) 4)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 295) 4)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 382
Reload 0: CORE_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 297 [ remh ]) 0)
Reload 1: reload_in (SI) = (subreg:SI (reg:DI 295) 4)
	reload_out (SI) = (subreg:SI (reg:DI 297 [ remh ]) 0)
	CORE_REGS, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (subreg:SI (reg:DI 295) 4)
	reload_out_reg: (subreg:SI (reg:DI 297 [ remh ]) 0)
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 383
Reload 0: reload_in (DI) = (reg:DI 295)
	reload_out (DI) = (reg/v:DI 0 r0 [orig:159 __n ] [159])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 295)
	reload_out_reg: (reg/v:DI 0 r0 [orig:159 __n ] [159])
	reload_reg_rtx: (reg/v:DI 0 r0 [orig:159 __n ] [159])
Reload 1: reload_in (DI) = (reg:DI 297 [ remh ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 297 [ remh ])
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 384
Reload 0: reload_in (SI) = (reg:SI 346 [ D.6380+4 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 0)
	reload_in_reg: (reg:SI 346 [ D.6380+4 ])
	reload_reg_rtx: (reg:SI 5 r5)

Reloads for insn # 397
Reload 0: reload_in (DI) = (reg/v:DI 8 r8 [orig:143 z.1250 ] [143])
	reload_out (DI) = (reg/v:DI 0 r0 [orig:137 z.1257 ] [137])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 143 [ z.1250 ])
	reload_out_reg: (reg/v:DI 0 r0 [orig:137 z.1257 ] [137])
	reload_reg_rtx: (reg/v:DI 0 r0 [orig:137 z.1257 ] [137])

Reloads for insn # 406
Reload 0: reload_in (DI) = (reg/v:DI 143 [ z.1250 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:DI 143 [ z.1250 ])
	reload_reg_rtx: (reg:DI 8 r8)

Reloads for insn # 412
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])

Reloads for insn # 440
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])

Reloads for insn # 470
Reload 0: reload_in (DI) = (reg/v:DI 4 r4 [orig:150 rma ] [150])
	reload_out (DI) = (reg/v:DI 8 r8 [orig:136 rma.1258 ] [136])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 4 r4 [orig:150 rma ] [150])
	reload_out_reg: (reg/v:DI 8 r8 [orig:136 rma.1258 ] [136])
	reload_reg_rtx: (reg/v:DI 8 r8 [orig:136 rma.1258 ] [136])

Reloads for insn # 449
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])

Reloads for insn # 474
Reload 0: reload_out (DI) = (reg/v:DI 149 [ rh ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:DI 149 [ rh ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 490
Reload 0: reload_out (DI) = (reg:DI 147 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 147 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 495
Reload 0: reload_out (DI) = (reg:DI 147 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 147 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 6 r6)

Reloads for insn # 500
Reload 0: reload_in (DI) = (reg/v:DI 10 sl [orig:151 rl ] [151])
	reload_out (DI) = (reg/v:DI 8 r8 [orig:133 rl.1261 ] [133])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 10 sl [orig:151 rl ] [151])
	reload_out_reg: (reg/v:DI 8 r8 [orig:133 rl.1261 ] [133])
	reload_reg_rtx: (reg/v:DI 8 r8 [orig:133 rl.1261 ] [133])

Reloads for insn # 503
Reload 0: reload_in (DI) = (reg/v:DI 149 [ rh ])
	reload_out (DI) = (reg:DI 148 [ D.6403 ])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg/v:DI 149 [ rh ])
	reload_out_reg: (reg:DI 148 [ D.6403 ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 518
Reload 0: reload_in (DI) = (reg:DI 148 [ D.6403 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:DI 148 [ D.6403 ])
	reload_reg_rtx: (reg:DI 10 sl)
deleting insn with uid = 849.
changing reg in insn 518

Reloads for insn # 520
Reload 0: reload_in (DI) = (reg:DI 147 [ iftmp.83 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg:DI 147 [ iftmp.83 ])
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 525
Reload 0: reload_in (DI) = (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
	reload_out (DI) = (reg:DI 10 sl [320])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
	reload_out_reg: (reg:DI 10 sl [320])
	reload_reg_rtx: (reg:DI 10 sl [320])

Reloads for insn # 528
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 324) 0)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 324) 0)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 529
Reload 0: reload_out (SI) = (subreg:SI (reg:DI 324) 4)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (subreg:SI (reg:DI 324) 4)
	reload_reg_rtx: (reg:SI 10 sl)

Reloads for insn # 530
Reload 0: reload_in (DI) = (reg:DI 324)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 5)
	reload_in_reg: (reg:DI 324)
	reload_reg_rtx: (reg:DI 10 sl)

Reloads for insn # 534
Reload 0: reload_in (DI) = (const_int -1 [0xffffffffffffffff])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:DI 380)
	reload_reg_rtx: (reg:DI 4 r4)

Reloads for insn # 550
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 6 r6)

Reloads for insn # 557
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])

Reloads for insn # 575
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 572
Reload 0: reload_out (DI) = (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])
deleting insn with uid = 126.
deleting insn with uid = 208.
deleting insn with uid = 673.
deleting insn with uid = 267.
deleting insn with uid = 271.
deleting insn with uid = 272.
deleting insn with uid = 295.
deleting insn with uid = 277.
deleting insn with uid = 286.
deleting insn with uid = 338.
deleting insn with uid = 359.
deleting insn with uid = 379.
deleting insn with uid = 381.
deleting insn with uid = 382.
deleting insn with uid = 403.
deleting insn with uid = 754.
deleting insn with uid = 774.
deleting insn with uid = 775.
deleting insn with uid = 776.
deleting insn with uid = 777.
deleting insn with uid = 778.
deleting insn with uid = 779.
deleting insn with uid = 581.
deleting insn with uid = 588.
+++Overall after reload 999750


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 167.
verify found no changes in insn with uid = 184.
verify found no changes in insn with uid = 210.
verify found no changes in insn with uid = 225.
verify found no changes in insn with uid = 580.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 60 n_edges 88 count 101 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 60 n_edges 88 count 120 (    2)


vfp_double_fsqrt

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={51d,48u} r1={52d,49u} r2={43d,51u,6d} r3={49d,56u,7d} r4={33d,35u} r5={31d,31u} r6={13d,16u} r7={12d,15u} r8={19d,20u,1d} r9={20d,22u,1d} r10={16d,18u,2d} r11={16d,16u,2d} r12={19d,13u} r13={1d,172u,3d} r14={15d,10u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={61d,30u} r25={3d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 1848{1221d,602u,25e} in 347{340 regular + 7 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 7 6 2 NOTE_INSN_DELETED)

(note 6 4 18 2 NOTE_INSN_FUNCTION_BEG)

(note 18 6 20 2 NOTE_INSN_DELETED)

(note 20 18 21 2 NOTE_INSN_DELETED)

(note 21 20 24 2 NOTE_INSN_DELETED)

(note 24 21 28 2 NOTE_INSN_DELETED)

(note 28 24 32 2 NOTE_INSN_DELETED)

(note 32 28 33 2 NOTE_INSN_DELETED)

(note 33 32 34 2 NOTE_INSN_DELETED)

(note 34 33 36 2 NOTE_INSN_DELETED)

(note 36 34 37 2 NOTE_INSN_DELETED)

(note 37 36 40 2 NOTE_INSN_DELETED)

(note 40 37 41 2 NOTE_INSN_DELETED)

(note 41 40 43 2 NOTE_INSN_DELETED)

(note 43 41 44 2 NOTE_INSN_DELETED)

(note 44 43 45 2 NOTE_INSN_DELETED)

(note 45 44 2 2 NOTE_INSN_DELETED)

(insn 2 45 9 2 arch/arm/vfp/vfpdouble.c:269 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 88 [0x58])) [0 %sfp+-48 S4 A32])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 5 2 arch/arm/vfp/vfpdouble.c:273 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 5 9 10 2 arch/arm/vfp/vfpdouble.c:269 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 92 [0x5c])) [0 %sfp+-44 S4 A32])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 5 11 2 arch/arm/vfp/vfpdouble.c:273 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:273 (set (reg:DI 2 r2 [orig:186 D.4263 ] [186])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 0 r0 [193])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -9223372036854775808 [0x8000000000000000])
        (nil)))

(insn 13 12 22 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 4 r4 [192])
        (and:DI (reg:DI 2 r2 [orig:186 D.4263 ] [186])
            (reg:DI 0 r0 [193]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 2 r2 [orig:186 D.4263 ] [186])
            (const_int -9223372036854775808 [0x8000000000000000]))
        (nil)))

(insn 22 13 27 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 1 r1 [orig:172 D.6135 ] [172])
        (zero_extract:SI (reg:SI 3 r3 [ D.4263+4 ])
            (const_int 11 [0xb])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 27 22 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 14 lr [361])
        (ashift:SI (reg:SI 2 r2 [orig:186 D.4263 ] [186])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 27 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 0 r0 [orig:362+4 ] [362])
        (ashift:SI (reg:SI 3 r3 [ D.4263+4 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 26 25 704 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 0 r0 [orig:362+4 ] [362])
        (ior:SI (lshiftrt:SI (reg:SI 2 r2 [orig:186 D.4263 ] [186])
                (const_int 20 [0x14]))
            (reg:SI 0 r0 [orig:362+4 ] [362]))) 270 {*arith_shiftsi} (nil))

(insn 704 26 14 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 2 r2 [orig:173 significand ] [173])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 14 704 759 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 12 ip [357])
        (lshiftrt:SI (reg:SI 5 r5 [+4 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 759 14 46 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 4 r4 [208])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 46 759 29 2 arch/arm/vfp/vfp.h:309 (set (reg:CC_DNE 24 cc)
        (compare:CC_DNE (and:SI (ne:SI (reg:SI 1 r1 [orig:172 D.6135 ] [172])
                    (reg:SI 4 r4 [208]))
                (ne:SI (reg:SI 1 r1 [orig:172 D.6135 ] [172])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 29 46 30 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:173 significand ] [173])
        (lshiftrt:SI (reg:SI 14 lr [361])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 30 29 16 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 2 r2 [orig:173 significand ] [173])
        (ior:SI (ashift:SI (reg:SI 0 r0 [orig:362+4 ] [362])
                (const_int 30 [0x1e]))
            (reg:SI 2 r2 [orig:173 significand ] [173]))) 270 {*arith_shiftsi} (nil))

(insn 16 30 23 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 12 ip [orig:171 D.6138 ] [171])
        (zero_extend:SI (reg:HI 12 ip [357]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 23 16 31 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 120 [0x78])) [0 vdm.exponent+0 S2 A64])
        (reg:HI 1 r1 [orig:172 D.6135 ] [172])) 176 {*movhi_insn_arch4} (nil))

(insn 31 23 17 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 3 r3 [ significand+4 ])
        (lshiftrt:SI (reg:SI 0 r0 [orig:362+4 ] [362])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 17 31 47 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 122 [0x7a])) [0 vdm.sign+0 S2 A16])
        (reg:HI 12 ip [orig:171 D.6138 ] [171])) 176 {*movhi_insn_arch4} (nil))

(jump_insn 47 17 48 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC_DNE 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 48 47 49 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 4 r4 [216])
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4611686018427387904 [0x4000000000000000])
        (nil)))

(insn 50 49 51 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 2 r2 [orig:173 significand ] [173])
        (ior:DI (reg/v:DI 2 r2 [orig:173 significand ] [173])
            (reg:DI 4 r4 [216]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg/v:DI 2 r2 [orig:173 significand ] [173])
            (const_int 4611686018427387904 [0x4000000000000000]))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 51 50 52 4 400 "" [1 uses])

(note 52 51 54 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 54 52 55 4 NOTE_INSN_DELETED)

(note 55 54 56 4 NOTE_INSN_DELETED)

(note 56 55 53 4 NOTE_INSN_DELETED)

(insn 53 56 758 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 2 r2 [orig:173 significand ] [173])) 163 {*arm_movdi} (nil))

(insn 758 53 58 4 arch/arm/vfp/vfp.h:330 (set (reg:SI 0 r0 [220])
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2047 [0x7ff])
        (nil)))

(insn 58 758 59 4 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:172 D.6135 ] [172])
            (reg:SI 0 r0 [220]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 59 58 60 4 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 86)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  5 [28.0%]  (fallthru)
;; Succ edge  8 [72.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	 0 [r0]

;; Pred edge  4 [28.0%]  (fallthru)
(note 60 59 61 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 5 NOTE_INSN_DELETED)

(note 62 61 63 5 NOTE_INSN_DELETED)

(insn 63 62 64 5 arch/arm/vfp/vfp.h:331 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:173 significand ] [173])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 0 r0))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 64 63 65 5 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 12 [ip] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 65 64 66 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 719 6 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 3 r3 [orig:177 tm ] [177])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))

(jump_insn 719 66 720 6 (set (pc)
        (label_ref 107)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 11)
;; lr  out 	 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 720 719 69)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 24 [cc]

;; Pred edge  5 [50.0%] 
(code_label 69 720 70 7 402 "" [1 uses])

(note 70 69 73 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 73 70 74 7 NOTE_INSN_DELETED)

(note 74 73 691 7 NOTE_INSN_DELETED)

(note 691 74 71 7 NOTE_INSN_DELETED)

(insn 71 691 72 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 4 r4 [223])
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 2305843009213693952 [0x2000000000000000])
        (nil)))

(insn 72 71 692 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 0 r0 [222])
        (and:DI (reg/v:DI 2 r2 [orig:173 significand ] [173])
            (reg:DI 4 r4 [223]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg/v:DI 2 r2 [orig:173 significand ] [173])
            (const_int 2305843009213693952 [0x2000000000000000]))
        (nil)))

(insn 692 72 721 7 arch/arm/vfp/vfp.h:336 (parallel [
            (set (reg/v:SI 3 r3 [orig:177 tm ] [177])
                (if_then_else:SI (ne (reg:SI 1 r1 [+4 ])
                        (const_int 0 [0x0]))
                    (const_int 16 [0x10])
                    (const_int 48 [0x30])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(jump_insn 721 692 722 7 (set (pc)
        (label_ref 107)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 11)
;; lr  out 	 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 722 721 86)

;; Start of basic block ( 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [72.0%] 
(code_label 86 722 87 8 401 "" [1 uses])

(note 87 86 88 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 88 87 89 8 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:172 D.6135 ] [172])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 89 88 90 8 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 12 [ip] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 12 [ip] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  8 [50.0%]  (fallthru)
(note 90 89 91 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 723 9 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 3 r3 [orig:177 tm ] [177])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 723 91 724 9 (set (pc)
        (label_ref 107)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 724 723 94)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  8 [50.0%] 
(code_label 94 724 95 10 405 "" [1 uses])

(note 95 94 96 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 96 95 97 10 NOTE_INSN_DELETED)

(note 97 96 693 10 NOTE_INSN_DELETED)

(insn 693 97 694 10 arch/arm/vfp/vfp.h:341 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:173 significand ] [173])
                        (reg:SI 3 r3 [ significand+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(insn 694 693 107 10 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 3 r3 [orig:177 tm ] [177])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 7 6 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 107 694 108 11 403 "" [3 uses])

(note 108 107 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 109 108 110 11 NOTE_INSN_DELETED)

(insn 110 109 111 11 arch/arm/vfp/vfpdouble.c:275 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 3 r3 [orig:177 tm ] [177])
                        (const_int 24 [0x18]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 111 110 112 11 arch/arm/vfp/vfpdouble.c:275 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 171)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 12 18)
;; lr  out 	 3 [r3] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 12 [ip] 13 [sp]


;; Succ edge  12 [50.0%]  (fallthru)
;; Succ edge  18 [50.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [50.0%]  (fallthru)
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 113 112 114 12 NOTE_INSN_DELETED)

(insn 114 113 115 12 arch/arm/vfp/vfpdouble.c:278 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:177 tm ] [177])
                (const_int 1 [0x1])
                (const_int 4 [0x4]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 115 114 116 12 arch/arm/vfp/vfpdouble.c:278 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 129)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 12 [ip] 13 [sp]
;; live  out 	 12 [ip] 13 [sp]


;; Succ edge  13 [29.0%]  (fallthru)
;; Succ edge  14 [71.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  12 [29.0%]  (fallthru)
(note 116 115 118 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 118 116 117 13 NOTE_INSN_DELETED)

(insn 117 118 122 13 arch/arm/vfp/vfpdouble.c:279 (set (reg/f:SI 4 r4 [228])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 104 [0x68]))
        (nil)))

(insn 122 117 119 13 arch/arm/vfp/vfpdouble.c:279 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 92 [0x5c])) [0 %sfp+-44 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 119 122 120 13 arch/arm/vfp/vfpdouble.c:279 (set (reg:SI 0 r0)
        (reg/f:SI 4 r4 [228])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))
        (nil)))

(insn 120 119 121 13 arch/arm/vfp/vfpdouble.c:279 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 120 [0x78]))) 4 {*arm_addsi3} (nil))

(insn 121 120 123 13 arch/arm/vfp/vfpdouble.c:279 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 123 121 124 13 arch/arm/vfp/vfpdouble.c:279 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 124 123 725 13 arch/arm/vfp/vfpdouble.c:279 (set (reg/v:SI 5 r5 [orig:178 ret ] [178])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(jump_insn 725 124 726 13 (set (pc)
        (label_ref 143)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 17)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 726 725 129)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 12 [ip] 13 [sp]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [71.0%] 
(code_label 129 726 130 14 408 "" [1 uses])

(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 131 130 132 14 arch/arm/vfp/vfpdouble.c:280 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:171 D.6138 ] [171])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 132 131 173 14 arch/arm/vfp/vfpdouble.c:280 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 138)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  15 [39.0%]  (fallthru)
;; Succ edge  16 [61.0%] 

;; Start of basic block ( 14 18) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  14 [39.0%]  (fallthru)
;; Pred edge  18 [39.0%] 
(code_label 173 132 133 15 412 "" [1 uses])

(note 133 173 134 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 134 133 135 15 arch/arm/vfp/vfpdouble.c:282 (set (reg/v/f:SI 4 r4 [orig:176 vdp ] [176])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 120 [0x78]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 13 sp)
            (const_int 120 [0x78]))
        (nil)))

(insn 135 134 727 15 arch/arm/vfp/vfpdouble.c:283 (set (reg/v:SI 5 r5 [orig:178 ret ] [178])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 727 135 728 15 (set (pc)
        (label_ref 143)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 17)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 728 727 138)

;; Start of basic block ( 21 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  21 [71.0%] 
;; Pred edge  14 [61.0%] 
(code_label 138 728 139 16 410 "" [2 uses])

(note 139 138 140 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 140 139 142 16 arch/arm/vfp/vfpdouble.c:286 (set (reg/v/f:SI 4 r4 [orig:176 vdp ] [176])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 142 140 143 16 arch/arm/vfp/vfpdouble.c:287 (set (reg/v:SI 5 r5 [orig:178 ret ] [178])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 13 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  13 [100.0%] 
;; Pred edge  15 [100.0%] 
(code_label 143 142 144 17 409 "" [2 uses])

(note 144 143 152 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 152 144 158 17 NOTE_INSN_DELETED)

(note 158 152 164 17 NOTE_INSN_DELETED)

(note 164 158 146 17 NOTE_INSN_DELETED)

(insn 146 164 705 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 14 lr [orig:232 <variable>.sign ] [232])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 4 r4 [orig:176 vdp ] [176])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 705 146 159 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:DI 6 r6 [234])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 159 705 706 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 12 ip [orig:245 <variable>.significand ] [245])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:176 vdp ] [176])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 706 159 151 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:DI 8 r8 [238])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 151 706 707 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 2 r2 [orig:236 <variable>.exponent ] [236])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 4 r4 [orig:176 vdp ] [176]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 707 151 157 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:DI 0 r0 [242])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 157 707 148 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 3 r3 [orig:244 <variable>.significand+4 ] [244])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:176 vdp ] [176])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 148 157 160 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 7 r7 [+4 ])
        (ashift:SI (reg:SI 14 lr [orig:232 <variable>.sign ] [232])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (nil))

(insn 160 148 149 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 0 r0 [242])
        (lshiftrt:SI (reg:SI 12 ip [orig:245 <variable>.significand ] [245])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (nil))

(insn 149 160 153 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 6 r6 [234])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 153 149 166 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 9 r9 [+4 ])
        (ashift:SI (reg:SI 2 r2 [orig:236 <variable>.exponent ] [236])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 166 153 154 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 88 [0x58])) [0 %sfp+-48 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 154 166 161 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 8 r8 [238])
        (reg:SI 6 r6 [234])) 167 {*arm_movsi_insn} (nil))

(insn 161 154 781 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 0 r0 [242])
        (ior:SI (ashift:SI (reg:SI 3 r3 [orig:244 <variable>.significand+4 ] [244])
                (const_int 22 [0x16]))
            (reg:SI 0 r0 [242]))) 270 {*arith_shiftsi} (nil))

(insn 781 161 155 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:DI 10 sl [239])
        (reg:DI 6 r6 [234])) 163 {*arm_movdi} (nil))

(insn 155 781 163 17 arch/arm/vfp/vfpdouble.c:289 (parallel [
            (set (reg:DI 10 sl [239])
                (plus:DI (reg:DI 10 sl [239])
                    (reg:DI 8 r8 [238])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 163 155 165 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 1 r1 [+4 ])
        (lshiftrt:SI (reg:SI 3 r3 [orig:244 <variable>.significand+4 ] [244])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (nil))

(insn 165 163 167 17 arch/arm/vfp/vfpdouble.c:289 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (reg:DI 0 r0 [242])
                    (reg:DI 10 sl [239])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(call_insn 167 165 168 17 arch/arm/vfp/vfpdouble.c:289 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 168 167 729 17 arch/arm/vfp/vfpdouble.c:290 (set (reg:SI 0 r0 [orig:184 D.4281 ] [184])
        (reg/v:SI 5 r5 [orig:178 ret ] [178])) 167 {*arm_movsi_insn} (nil))

(jump_insn 729 168 730 17 arch/arm/vfp/vfpdouble.c:290 (set (pc)
        (label_ref 582)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 59)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  59 [100.0%] 

(barrier 730 729 171)

;; Start of basic block ( 11) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [50.0%] 
(code_label 171 730 172 18 407 "" [1 uses])

(note 172 171 174 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 174 172 175 18 NOTE_INSN_DELETED)

(insn 175 174 176 18 arch/arm/vfp/vfpdouble.c:296 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:177 tm ] [177])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 176 175 177 18 arch/arm/vfp/vfpdouble.c:296 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 173)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 18 -> ( 15 19)
;; lr  out 	 3 [r3] 13 [sp]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  15 [39.0%] 
;; Succ edge  19 [61.0%]  (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [61.0%]  (fallthru)
(note 177 176 178 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 178 177 179 19 NOTE_INSN_DELETED)

(insn 179 178 180 19 arch/arm/vfp/vfpdouble.c:302 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:177 tm ] [177])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 180 179 181 19 arch/arm/vfp/vfpdouble.c:302 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 185)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 19 -> ( 20 21)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  20 [29.0%]  (fallthru)
;; Succ edge  21 [71.0%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  19 [29.0%]  (fallthru)
(note 181 180 182 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 182 181 183 20 NOTE_INSN_DELETED)

(insn 183 182 184 20 arch/arm/vfp/vfpdouble.c:303 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 120 [0x78]))) 4 {*arm_addsi3} (nil))

(call_insn 184 183 185 20 arch/arm/vfp/vfpdouble.c:303 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 20 -> ( 21)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 19 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  19 [71.0%] 
;; Pred edge  20 [100.0%]  (fallthru)
(code_label 185 184 186 21 413 "" [1 uses])

(note 186 185 187 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 187 186 188 21 arch/arm/vfp/vfpdouble.c:308 (set (reg:SI 2 r2 [orig:251 vdm.sign ] [251])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 122 [0x7a])) [0 vdm.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 188 187 189 21 arch/arm/vfp/vfpdouble.c:308 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:251 vdm.sign ] [251])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 189 188 190 21 arch/arm/vfp/vfpdouble.c:308 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 138)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 21 -> ( 16 22)
;; lr  out 	 2 [r2] 13 [sp]
;; live  out 	 2 [r2] 13 [sp]


;; Succ edge  16 [71.0%] 
;; Succ edge  22 [29.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  21 [29.0%]  (fallthru)
(note 190 189 194 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 194 190 196 22 NOTE_INSN_DELETED)

(note 196 194 205 22 NOTE_INSN_DELETED)

(note 205 196 213 22 NOTE_INSN_DELETED)

(note 213 205 219 22 NOTE_INSN_DELETED)

(note 219 213 671 22 NOTE_INSN_DELETED)

(note 671 219 672 22 NOTE_INSN_DELETED)

(note 672 671 195 22 NOTE_INSN_DELETED)

(insn 195 672 708 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 0 r0 [orig:254 D.4288 ] [254])
        (sign_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 120 [0x78])) [0 vdm.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 708 195 209 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:DI 10 sl [orig:181 D.4301 ] [181])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 209 708 214 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 1 r1)
        (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 132 [0x84])) [0 vdm.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 214 209 747 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 11 fp [ D.4301+4 ])
        (reg:SI 2 r2 [orig:251 vdm.sign ] [251])) 167 {*arm_movsi_insn} (nil))

(insn 747 214 748 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 3 r3 [255])
        (plus:SI (reg:SI 0 r0 [orig:254 D.4288 ] [254])
            (const_int -1020 [0xfffffffffffffc04]))) 4 {*arm_addsi3} (nil))

(insn 748 747 193 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 3 r3 [255])
        (plus:SI (reg:SI 3 r3 [255])
            (const_int -3 [0xfffffffffffffffd]))) 4 {*arm_addsi3} (nil))

(insn 193 748 198 22 arch/arm/vfp/vfpdouble.c:316 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 106 [0x6a])) [0 vdd.sign+0 S2 A16])
        (reg:HI 2 r2 [orig:251 vdm.sign ] [251])) 176 {*movhi_insn_arch4} (nil))

(insn 198 193 200 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 3 r3 [257])
        (ashiftrt:SI (reg:SI 3 r3 [255])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn 200 198 201 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 3 r3 [260])
        (plus:SI (reg:SI 3 r3 [257])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn 201 200 202 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 3 r3 [259])
        (plus:SI (reg:SI 3 r3 [260])
            (const_int 3 [0x3]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 3 r3 [257])
            (const_int 1023 [0x3ff]))
        (nil)))

(insn 202 201 210 22 arch/arm/vfp/vfpdouble.c:317 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                (const_int 104 [0x68])) [0 vdd.exponent+0 S2 A64])
        (reg:HI 3 r3 [259])) 176 {*movhi_insn_arch4} (nil))

(call_insn 210 202 211 22 arch/arm/vfp/vfpdouble.c:318 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_estimate_sqrt_significand") [flags 0x41] <function_decl 0x10a9da80 vfp_estimate_sqrt_significand>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 211 210 217 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 3 r3 [orig:182 D.4299 ] [182])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 217 211 215 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 2 r2 [orig:268 vdm.exponent ] [268])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 13 sp)
                    (const_int 120 [0x78])) [0 vdm.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 215 217 223 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 11 fp [ D.4301+4 ])
        (lshiftrt:SI (reg:SI 3 r3 [orig:182 D.4299 ] [182])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn 223 215 218 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:DI 0 r0)
        (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 218 223 216 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 2 r2 [269])
        (and:SI (reg:SI 2 r2 [orig:268 vdm.exponent ] [268])
            (const_int 1 [0x1]))) 67 {*arm_andsi3_insn} (nil))

(insn 216 218 224 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 10 sl [orig:181 D.4301 ] [181])
        (ashift:SI (reg:SI 3 r3 [orig:182 D.4299 ] [182])
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 224 216 225 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 2 r2)
        (plus:SI (reg:SI 2 r2 [269])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(call_insn/u 225 224 674 22 arch/arm/vfp/vfpdouble.c:322 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 674 225 675 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 6 r6 [orig:377 __n ] [377])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 675 674 228 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 7 r7 [ __n+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 228 675 229 22 arch/arm/vfp/vfpdouble.c:322 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])
        (reg:DI 6 r6 [orig:377 __n ] [377])) 163 {*arm_movdi} (nil))

(insn 229 228 230 22 arch/arm/vfp/vfp.h:117 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 11 fp [ D.4301+4 ])
            (reg:SI 7 r7 [ __n+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 230 229 596 22 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 244)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 22 -> ( 26 23)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 24 [cc]


;; Succ edge  26 [50.0%] 
;; Succ edge  23 [50.0%]  (fallthru)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  22 [50.0%]  (fallthru)
(note 596 230 232 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(jump_insn 232 596 597 23 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 657)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 23 -> ( 25 24)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  25 [71.0%] 
;; Succ edge  24 [29.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  23 [29.0%]  (fallthru)
(note 597 232 233 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 233 597 234 24 arch/arm/vfp/vfp.h:117 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 10 sl [orig:181 D.4301 ] [181])
            (reg:SI 6 r6 [orig:377 __n ] [377]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 234 233 657 24 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 244)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 24 -> ( 26 25)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  26 [50.0%] 
;; Succ edge  25 [50.0%]  (fallthru)

;; Start of basic block ( 24 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  24 [50.0%]  (fallthru)
;; Pred edge  23 [71.0%] 
(code_label 657 234 240 25 445 "" [1 uses])

(note 240 657 241 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 241 240 731 25 arch/arm/vfp/vfp.h:118 (set (reg/v:DI 0 r0 [orig:137 z.1257 ] [137])
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(jump_insn 731 241 732 25 (set (pc)
        (label_ref 407)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 40)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  40 [100.0%] 

(barrier 732 731 244)

;; Start of basic block ( 22 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 7 [r7] 11 [fp] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  22 [50.0%] 
;; Pred edge  24 [50.0%] 
(code_label 244 732 245 26 414 "" [2 uses])

(note 245 244 709 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 709 245 782 26 arch/arm/vfp/vfp.h:119 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 782 709 246 26 arch/arm/vfp/vfp.h:119 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-104 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 246 782 783 26 arch/arm/vfp/vfp.h:119 (set (reg:SI 3 r3)
        (reg:SI 11 fp [ D.4301+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 783 246 247 26 arch/arm/vfp/vfp.h:119 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-104 S4 A64])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 247 783 784 26 arch/arm/vfp/vfp.h:119 (set (reg:SI 4 r4)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 784 247 785 26 arch/arm/vfp/vfp.h:119 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 %sfp+-100 S4 A32])
        (reg:SI 4 r4)) 167 {*arm_movsi_insn} (nil))

(insn 785 784 248 26 arch/arm/vfp/vfp.h:120 (set (reg:SI 5 r5)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-104 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 248 785 250 26 arch/arm/vfp/vfp.h:120 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-124 S4 A32])
        (reg:SI 5 r5)) 167 {*arm_movsi_insn} (nil))

(insn 250 248 251 26 arch/arm/vfp/vfp.h:120 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5)
            (reg:SI 7 r7 [ __n+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 251 250 601 26 arch/arm/vfp/vfp.h:120 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 265)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 26 -> ( 28 27)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  28 [50.0%] 
;; Succ edge  27 [50.0%]  (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8] 9 [r9]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  26 [50.0%]  (fallthru)
(note 601 251 262 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 262 601 786 27 arch/arm/vfp/vfp.h:121 (set (reg:DI 8 r8)
        (const_int -4294967296 [0xffffffff00000000])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int -4294967296 [0xffffffff00000000])
        (nil)))

(insn 786 262 733 27 arch/arm/vfp/vfp.h:121 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-120 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(jump_insn 733 786 734 27 (set (pc)
        (label_ref 273)) 242 {*arm_jump} (nil))
;; End of basic block 27 -> ( 29)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  29 [100.0%] 

(barrier 734 733 265)

;; Start of basic block ( 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  26 [50.0%] 
(code_label 265 734 266 28 417 "" [1 uses])

(note 266 265 677 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 677 266 710 28 NOTE_INSN_DELETED)

(insn 710 677 787 28 arch/arm/vfp/vfp.h:125 (set (reg:DI 0 r0)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 787 710 788 28 arch/arm/vfp/vfp.h:125 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-120 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 788 787 268 28 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg/v:SI 4 r4 [ __base ])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-104 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 268 788 269 28 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg/v:DI 0 r0 [ __n ])
        (reg:DI 6 r6 [orig:377 __n ] [377])) 163 {*arm_movdi} (nil))

(insn 269 268 789 28 arch/arm/vfp/vfp.h:124 discrim 1 (parallel [
            (set (reg/v:SI 1 r1 [ __rem ])
                (asm_operands:SI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 0 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779402))
            (set (reg/v:DI 2 r2 [ __res ])
                (asm_operands:DI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 1 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779402))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (nil))

(insn 789 269 790 28 arch/arm/vfp/vfp.h:125 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-116 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (nil))

(insn 790 789 791 28 arch/arm/vfp/vfp.h:125 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 %sfp+-100 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 791 790 273 28 arch/arm/vfp/vfp.h:125 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-120 S4 A64])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 28 -> ( 29)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  29 [100.0%]  (fallthru)

;; Start of basic block ( 28 27) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	

;; Pred edge  28 [100.0%]  (fallthru)
;; Pred edge  27 [100.0%] 
(code_label 273 791 274 29 419 "" [1 uses])

(note 274 273 291 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 291 274 275 29 NOTE_INSN_DELETED)

(insn 275 291 792 29 arch/arm/vfp/vfp.h:80 (set (reg:SI 1 r1 [orig:275 D.4301 ] [275])
        (reg:SI 10 sl [orig:181 D.4301 ] [181])) 167 {*arm_movsi_insn} (nil))

(insn 792 275 793 29 arch/arm/vfp/vfp.h:86 (set (reg:SI 12 ip [371])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-116 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 793 792 794 29 arch/arm/vfp/vfp.h:80 (set (reg:SI 0 r0 [orig:276 z.1250 ] [276])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-120 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 794 793 302 29 arch/arm/vfp/vfp.h:82 (set (reg/v:SI 14 lr [orig:160 __left ] [160])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-104 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 302 794 310 29 arch/arm/vfp/vfp.h:86 (set (reg/v:DI 4 r4 [orig:162 rmb ] [162])
        (mult:DI (zero_extend:DI (reg:SI 12 ip [371]))
            (zero_extend:DI (reg:SI 1 r1 [orig:275 D.4301 ] [275])))) 51 {*umulsidi3_v6} (nil))

(insn 310 302 795 29 arch/arm/vfp/vfp.h:89 (set (reg:DI 2 r2)
        (mult:DI (zero_extend:DI (reg:SI 12 ip [371]))
            (zero_extend:DI (reg/v:SI 14 lr [orig:160 __left ] [160])))) 51 {*umulsidi3_v6} (nil))

(insn 795 310 282 29 arch/arm/vfp/vfp.h:89 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 96 [0x60])) [0 %sfp+-40 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 282 795 796 29 arch/arm/vfp/vfp.h:80 (set (reg:DI 8 r8)
        (mult:DI (zero_extend:DI (reg:SI 0 r0 [orig:276 z.1250 ] [276]))
            (zero_extend:DI (reg:SI 1 r1 [orig:275 D.4301 ] [275])))) 51 {*umulsidi3_v6} (nil))

(insn 796 282 797 29 arch/arm/vfp/vfp.h:80 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-64 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 797 796 306 29 arch/arm/vfp/vfp.h:87 (set (reg:DI 2 r2)
        (reg/v:DI 4 r4 [orig:162 rmb ] [162])) 163 {*arm_movdi} (nil))

(insn 306 797 798 29 arch/arm/vfp/vfp.h:87 (set (reg:DI 2 r2)
        (plus:DI (mult:DI (zero_extend:DI (reg:SI 0 r0 [orig:276 z.1250 ] [276]))
                (zero_extend:DI (reg/v:SI 14 lr [orig:160 __left ] [160])))
            (reg:DI 2 r2))) 53 {*umulsidi3adddi_v6} (nil))

(insn 798 306 314 29 arch/arm/vfp/vfp.h:87 (set (reg/v:DI 0 r0 [orig:142 rma.1251 ] [142])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 314 798 315 29 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [ rmb+4 ])
            (reg:SI 1 r1 [ rma.1251+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 315 314 606 29 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 329)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 29 -> ( 33 30)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  33 [50.0%] 
;; Succ edge  30 [50.0%]  (fallthru)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  29 [50.0%]  (fallthru)
(note 606 315 317 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(jump_insn 317 606 607 30 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 659)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 30 -> ( 32 31)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  32 [71.0%] 
;; Succ edge  31 [29.0%]  (fallthru)

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  30 [29.0%]  (fallthru)
(note 607 317 318 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 318 607 319 31 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 4 r4 [orig:162 rmb ] [162])
            (reg:SI 0 r0 [orig:142 rma.1251 ] [142]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 319 318 659 31 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 329)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 31 -> ( 33 32)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  33 [50.0%] 
;; Succ edge  32 [50.0%]  (fallthru)

;; Start of basic block ( 31 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  31 [50.0%]  (fallthru)
;; Pred edge  30 [71.0%] 
(code_label 659 319 325 32 447 "" [1 uses])

(note 325 659 326 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 326 325 799 32 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 4 r4)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 799 326 735 32 arch/arm/vfp/vfp.h:90 discrim 2 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-56 S8 A64])
        (reg:DI 4 r4)) 163 {*arm_movdi} (nil))

(jump_insn 735 799 736 32 (set (pc)
        (label_ref 332)) 242 {*arm_jump} (nil))
;; End of basic block 32 -> ( 34)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  34 [100.0%] 

(barrier 736 735 329)

;; Start of basic block ( 29 31) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 8 [r8] 9 [r9]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 9 [r9]
;; live  kill	

;; Pred edge  29 [50.0%] 
;; Pred edge  31 [50.0%] 
(code_label 329 736 330 33 420 "" [2 uses])

(note 330 329 331 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 331 330 800 33 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 8 r8)
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4294967296 [0x100000000])
        (nil)))

(insn 800 331 332 33 arch/arm/vfp/vfp.h:90 discrim 1 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-56 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  34 [100.0%]  (fallthru)

;; Start of basic block ( 33 32) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  33 [100.0%]  (fallthru)
;; Pred edge  32 [100.0%] 
(code_label 332 800 333 34 422 "" [1 uses])

(note 333 332 695 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(note 695 333 697 34 NOTE_INSN_DELETED)

(note 697 695 711 34 NOTE_INSN_DELETED)

(insn 711 697 801 34 arch/arm/vfp/vfp.h:92 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 801 711 712 34 arch/arm/vfp/vfp.h:92 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 %sfp+-112 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 712 801 802 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 802 712 334 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 334 802 803 34 arch/arm/vfp/vfp.h:92 (set (reg:SI 3 r3)
        (reg:SI 0 r0 [orig:142 rma.1251 ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 803 334 337 34 arch/arm/vfp/vfp.h:92 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 %sfp+-108 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 337 803 804 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 4 r4)
        (reg:SI 1 r1 [ rma.1251+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 804 337 335 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S4 A64])
        (reg:SI 4 r4)) 167 {*arm_movsi_insn} (nil))

(insn 335 804 805 34 arch/arm/vfp/vfp.h:92 (set (reg:SI 5 r5)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 805 335 713 34 arch/arm/vfp/vfp.h:92 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 %sfp+-112 S4 A64])
        (reg:SI 5 r5)) 167 {*arm_movsi_insn} (nil))

(insn 713 805 806 34 arch/arm/vfp/vfp.h:129 (set (reg:DI 8 r8)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 806 713 807 34 arch/arm/vfp/vfp.h:129 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-96 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 807 806 809 34 arch/arm/vfp/vfp.h:93 (set (reg:DI 0 r0)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-64 S8 A64])) 163 {*arm_movdi} (nil))

(insn 809 807 336 34 arch/arm/vfp/vfp.h:93 (set (reg:DI 2 r2)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 %sfp+-112 S8 A64])) 163 {*arm_movdi} (nil))

(insn 336 809 808 34 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (reg:DI 0 r0)
                    (reg:DI 2 r2)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 808 336 810 34 arch/arm/vfp/vfp.h:93 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 %sfp+-80 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 810 808 811 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 52 [0x34])) [0 %sfp+-84 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (nil))

(insn 811 810 813 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 4 r4)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])) 163 {*arm_movdi} (nil))

(insn 813 811 339 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 8 r8)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 96 [0x60])) [0 %sfp+-40 S8 A64])) 163 {*arm_movdi} (nil))

(insn 339 813 696 34 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 4 r4)
                (plus:DI (reg:DI 4 r4)
                    (reg:DI 8 r8)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 696 339 354 34 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:SI 12 ip [378])
                (gtu:SI (reg:SI 3 r3)
                    (reg:SI 1 r1)))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 354 696 814 34 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 0 r0)
                (plus:DI (zero_extend:DI (reg:SI 12 ip [378]))
                    (reg:DI 4 r4)))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (nil))

(insn 814 354 358 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 358 814 815 34 arch/arm/vfp/vfp.h:129 (set (reg:SI 1 r1)
        (reg:SI 10 sl [orig:181 D.4301 ] [181])) 167 {*arm_movsi_insn} (nil))

(insn 815 358 816 34 arch/arm/vfp/vfp.h:129 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 %sfp+-92 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 816 815 818 34 arch/arm/vfp/vfp.h:62 (set (reg:DI 2 r2)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])) 163 {*arm_movdi} (nil))

(insn 818 816 356 34 arch/arm/vfp/vfp.h:62 (set (reg:DI 4 r4)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-56 S8 A64])) 163 {*arm_movdi} (nil))

(insn 356 818 817 34 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 2 r2)
                (plus:DI (reg:DI 2 r2)
                    (reg:DI 4 r4)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 817 356 751 34 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])
        (reg:DI 2 r2)) 163 {*arm_movdi} (nil))

(insn 751 817 819 34 arch/arm/vfp/vfp.h:62 (set (reg:DI 8 r8)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 819 751 820 34 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-56 S8 A64])
        (reg:DI 8 r8)) 163 {*arm_movdi} (nil))

(insn 820 819 821 34 arch/arm/vfp/vfp.h:129 (set (reg:SI 9 r9)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 %sfp+-112 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 821 820 752 34 arch/arm/vfp/vfp.h:129 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-96 S4 A64])
        (reg:SI 9 r9)) 167 {*arm_movsi_insn} (nil))

(insn 752 821 363 34 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-64 S8 A64])
        (reg:DI 6 r6 [orig:377 __n ] [377])) 163 {*arm_movdi} (nil))

(note 363 752 822 34 NOTE_INSN_DELETED)

(insn 822 363 824 34 arch/arm/vfp/vfp.h:62 (set (reg:DI 0 r0)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-56 S8 A64])) 163 {*arm_movdi} (nil))

(insn 824 822 826 34 arch/arm/vfp/vfp.h:62 (set (reg:DI 4 r4)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-64 S8 A64])) 163 {*arm_movdi} (nil))

(insn 826 824 357 34 arch/arm/vfp/vfp.h:62 (set (reg:DI 8 r8)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 %sfp+-80 S8 A64])) 163 {*arm_movdi} (nil))

(insn 357 826 825 34 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 0 r0)
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 0 [
                        (reg:DI 0 r0)
                        (reg:DI 4 r4)
                        (reg:DI 8 r8)
                        (reg:DI 2 r2)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (set (reg:DI 4 r4)
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 1 [
                        (reg:DI 0 r0)
                        (reg:DI 4 r4)
                        (reg:DI 8 r8)
                        (reg:DI 2 r2)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 825 357 823 34 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-64 S8 A64])
        (reg:DI 4 r4)) 163 {*arm_movdi} (nil))

(insn 823 825 760 34 arch/arm/vfp/vfp.h:62 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-56 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 760 823 761 34 (set (reg/v:DI 8 r8 [orig:143 z.1250 ] [143])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-120 S8 A64])) 163 {*arm_movdi} (nil))

(insn 761 760 762 34 (set (reg/v:DI 2 r2 [orig:155 remh ] [155])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 %sfp+-64 S8 A64])) 163 {*arm_movdi} (nil))

(insn 762 761 763 34 (set (reg/v:DI 0 r0 [orig:156 reml ] [156])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-56 S8 A64])) 163 {*arm_movdi} (nil))

(insn 763 762 764 34 (set (reg/v:SI 4 r4 [orig:160 __left ] [160])
        (reg/v:SI 14 lr [orig:160 __left ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 764 763 765 34 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])
        (reg:DI 10 sl [orig:181 D.4301 ] [181])) 163 {*arm_movdi} (nil))

(insn 765 764 766 34 (set (reg:SI 5 r5 [orig:346 D.6380+4 ] [346])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-124 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 766 765 737 34 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 %sfp+-80 S8 A64])
        (reg:DI 6 r6 [orig:377 __n ] [377])) 163 {*arm_movdi} (nil))

(jump_insn 737 766 738 34 (set (pc)
        (label_ref 366)) 242 {*arm_jump} (nil))
;; End of basic block 34 -> ( 36)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  36 [100.0%] 

(barrier 738 737 368)

;; Start of basic block ( 36) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	 24 [cc]

;; Pred edge  36 [21.0%] 
(code_label 368 738 362 35 426 "" [1 uses])

(note 362 368 827 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 827 362 364 35 arch/arm/vfp/vfp.h:131 (set (reg:DI 10 sl)
        (const_int -4294967296 [0xffffffff00000000])) 163 {*arm_movdi} (nil))

(insn 364 827 828 35 arch/arm/vfp/vfp.h:131 (parallel [
            (set (reg/v:DI 8 r8 [orig:143 z.1250 ] [143])
                (plus:DI (reg/v:DI 8 r8 [orig:143 z.1250 ] [143])
                    (reg:DI 10 sl)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg/v:DI 8 r8 [orig:143 z.1250 ] [143])
            (const_int -4294967296 [0xffffffff00000000]))
        (nil)))

(insn 828 364 829 35 arch/arm/vfp/vfp.h:49 (set (reg:DI 6 r6)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-96 S8 A64])) 163 {*arm_movdi} (nil))

(insn 829 828 365 35 arch/arm/vfp/vfp.h:49 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-104 S8 A64])) 163 {*arm_movdi} (nil))

(insn 365 829 366 35 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 0 r0 [orig:156 reml ] [156])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 0 [
                        (reg/v:DI 0 r0 [orig:156 reml ] [156])
                        (reg/v:DI 2 r2 [orig:155 remh ] [155])
                        (reg:DI 6 r6)
                        (reg:DI 10 sl)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (set (reg/v:DI 2 r2 [orig:155 remh ] [155])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 1 [
                        (reg/v:DI 0 r0 [orig:156 reml ] [156])
                        (reg/v:DI 2 r2 [orig:155 remh ] [155])
                        (reg:DI 6 r6)
                        (reg:DI 10 sl)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 35 -> ( 36)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  36 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 35 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  35 [100.0%]  (fallthru,dfs_back)
;; Pred edge  34 [100.0%] 
(code_label 366 365 367 36 425 "" [1 uses])

(note 367 366 369 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 369 367 370 36 arch/arm/vfp/vfp.h:130 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ remh+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 370 369 617 36 arch/arm/vfp/vfp.h:130 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 368)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2100 [0x834])
        (nil)))
;; End of basic block 36 -> ( 35 37)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  35 [21.0%] 
;; Succ edge  37 [79.0%]  (fallthru,loop_exit)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 14 [lr] 24 [cc]
;; live  kill	

;; Pred edge  36 [79.0%]  (fallthru,loop_exit)
(note 617 370 767 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 767 617 769 37 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-120 S8 A64])
        (reg/v:DI 8 r8 [orig:143 z.1250 ] [143])) 163 {*arm_movdi} (nil))

(insn 769 767 770 37 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 %sfp+-56 S8 A64])
        (reg/v:DI 0 r0 [orig:156 reml ] [156])) 163 {*arm_movdi} (nil))

(insn 770 769 771 37 (set (reg/v:SI 14 lr [orig:160 __left ] [160])
        (reg/v:SI 4 r4 [orig:160 __left ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 771 770 772 37 (set (reg:DI 10 sl [orig:181 D.4301 ] [181])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])) 163 {*arm_movdi} (nil))

(insn 772 771 773 37 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-124 S4 A32])
        (reg:SI 5 r5 [orig:346 D.6380+4 ] [346])) 167 {*arm_movsi_insn} (nil))

(insn 773 772 714 37 (set (reg:DI 6 r6 [orig:377 __n ] [377])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 %sfp+-80 S8 A64])) 163 {*arm_movdi} (nil))

(insn 714 773 830 37 arch/arm/vfp/vfp.h:134 (set (reg:DI 0 r0)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 830 714 715 37 arch/arm/vfp/vfp.h:134 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-104 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 715 830 831 37 arch/arm/vfp/vfp.h:134 (set (reg:DI 0 r0)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 831 715 832 37 arch/arm/vfp/vfp.h:134 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-96 S8 A64])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 832 831 833 37 arch/arm/vfp/vfp.h:134 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 %sfp+-52 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 833 832 834 37 arch/arm/vfp/vfp.h:134 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-104 S4 A64])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (nil))

(insn 834 833 380 37 arch/arm/vfp/vfp.h:134 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 %sfp+-92 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (nil))

(insn 380 834 835 37 arch/arm/vfp/vfp.h:134 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 835 380 836 37 arch/arm/vfp/vfp.h:134 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 %sfp+-100 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (nil))

(insn 836 835 837 37 arch/arm/vfp/vfp.h:134 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 %sfp+-100 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 837 836 838 37 arch/arm/vfp/vfp.h:134 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-96 S4 A64])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 838 837 839 37 arch/arm/vfp/vfp.h:134 (set (reg/v:DI 0 r0 [orig:159 __n ] [159])
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 %sfp+-104 S8 A64])) 163 {*arm_movdi} (nil))

(insn 839 838 383 37 arch/arm/vfp/vfp.h:134 (set (reg:DI 4 r4)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-96 S8 A64])) 163 {*arm_movdi} (nil))

(insn 383 839 840 37 arch/arm/vfp/vfp.h:134 (set (reg/v:DI 0 r0 [orig:159 __n ] [159])
        (ior:DI (reg/v:DI 0 r0 [orig:159 __n ] [159])
            (reg:DI 4 r4))) 86 {iordi3} (nil))

(insn 840 383 384 37 arch/arm/vfp/vfp.h:135 (set (reg:SI 5 r5)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 %sfp+-124 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 384 840 385 37 arch/arm/vfp/vfp.h:135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5)
            (reg:SI 1 r1 [ __n+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 385 384 621 37 arch/arm/vfp/vfp.h:135 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 400)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 37 -> ( 39 38)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  39 [50.0%] 
;; Succ edge  38 [50.0%]  (fallthru)

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  37 [50.0%]  (fallthru)
(note 621 385 396 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 396 621 841 38 arch/arm/vfp/vfp.h:136 (set (reg:DI 2 r2 [298])
        (const_int 4294967295 [0xffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4294967295 [0xffffffff])
        (nil)))

(insn 841 396 397 38 arch/arm/vfp/vfp.h:136 (set (reg/v:DI 0 r0 [orig:137 z.1257 ] [137])
        (reg/v:DI 8 r8 [orig:143 z.1250 ] [143])) 163 {*arm_movdi} (nil))

(insn 397 841 739 38 arch/arm/vfp/vfp.h:136 (set (reg/v:DI 0 r0 [orig:137 z.1257 ] [137])
        (ior:DI (reg/v:DI 0 r0 [orig:137 z.1257 ] [137])
            (reg:DI 2 r2 [298]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                    (const_int 16 [0x10])) [0 %sfp+-120 S8 A64])
            (const_int 4294967295 [0xffffffff]))
        (nil)))

(jump_insn 739 397 740 38 (set (pc)
        (label_ref 407)) 242 {*arm_jump} (nil))
;; End of basic block 38 -> ( 40)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  40 [100.0%] 

(barrier 740 739 400)

;; Start of basic block ( 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9]
;; live  kill	 12 [ip] 14 [lr] 24 [cc]

;; Pred edge  37 [50.0%] 
(code_label 400 740 401 39 428 "" [1 uses])

(note 401 400 405 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(note 405 401 402 39 NOTE_INSN_DELETED)

(insn 402 405 404 39 arch/arm/vfp/vfp.h:138 discrim 1 (set (reg/v:SI 4 r4 [ __base ])
        (reg/v:SI 14 lr [orig:160 __left ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 404 402 842 39 arch/arm/vfp/vfp.h:138 discrim 1 (parallel [
            (set (reg/v:SI 1 r1 [ __rem ])
                (asm_operands:SI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 0 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779457))
            (set (reg/v:DI 2 r2 [ __res ])
                (asm_operands:DI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 1 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779457))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (nil))

(insn 842 404 406 39 arch/arm/vfp/vfp.h:139 (set (reg:DI 8 r8)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-120 S8 A64])) 163 {*arm_movdi} (nil))

(insn 406 842 407 39 arch/arm/vfp/vfp.h:139 (set (reg/v:DI 0 r0 [orig:137 z.1257 ] [137])
        (ior:DI (reg/v:DI 2 r2 [ __res ])
            (reg:DI 8 r8))) 86 {iordi3} (nil))
;; End of basic block 39 -> ( 40)
;; lr  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  40 [100.0%]  (fallthru)

;; Start of basic block ( 25 39 38) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  25 [100.0%] 
;; Pred edge  39 [100.0%]  (fallthru)
;; Pred edge  38 [100.0%] 
(code_label 407 406 408 40 416 "" [2 uses])

(note 408 407 409 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 409 408 410 40 arch/arm/vfp/vfpdouble.c:323 (set (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
        (const_int 2 [0x2])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(insn 410 409 411 40 arch/arm/vfp/vfpdouble.c:323 (parallel [
            (set (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
                (plus:DI (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
                    (reg:DI 10 sl [orig:181 D.4301 ] [181])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg:DI 10 sl [orig:181 D.4301 ] [181])
            (const_int 2 [0x2]))
        (nil)))

(insn 411 410 412 40 arch/arm/vfp/vfpdouble.c:323 (parallel [
            (set (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
                (plus:DI (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
                    (reg/v:DI 0 r0 [orig:137 z.1257 ] [137])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 412 411 757 40 arch/arm/vfp/vfpdouble.c:323 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])
        (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])) 163 {*arm_movdi} (nil))

(insn 757 412 414 40 arch/arm/vfp/vfpdouble.c:330 (set (reg:DI 4 r4 [302])
        (const_int 1023 [0x3ff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 1023 [0x3ff])
        (nil)))

(insn 414 757 415 40 arch/arm/vfp/vfpdouble.c:330 (set (reg:DI 0 r0 [301])
        (and:DI (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
            (reg:DI 4 r4 [302]))) 64 {anddi3} (expr_list:REG_EQUAL (and:DI (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
            (const_int 1023 [0x3ff]))
        (nil)))

(insn 415 414 416 40 arch/arm/vfp/vfpdouble.c:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 416 415 627 40 arch/arm/vfp/vfpdouble.c:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 558)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 40 -> ( 56 41)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  56 [50.0%] 
;; Succ edge  41 [50.0%]  (fallthru)

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  40 [50.0%]  (fallthru)
(note 627 416 419 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 419 627 420 41 arch/arm/vfp/vfpdouble.c:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0 [301])
            (const_int 5 [0x5]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 420 419 628 41 arch/arm/vfp/vfpdouble.c:330 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 558)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 41 -> ( 56 42)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  56 [50.0%] 
;; Succ edge  42 [50.0%]  (fallthru)

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  41 [50.0%]  (fallthru)
(note 628 420 427 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 427 628 428 42 arch/arm/vfp/vfpdouble.c:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ ivtmp.1234+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 428 427 632 42 arch/arm/vfp/vfpdouble.c:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 443)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 42 -> ( 45 43)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  45 [50.0%] 
;; Succ edge  43 [50.0%]  (fallthru)

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  42 [50.0%]  (fallthru)
(note 632 428 431 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 431 632 432 43 arch/arm/vfp/vfpdouble.c:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:144 ivtmp.1234 ] [144])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 432 431 633 43 arch/arm/vfp/vfpdouble.c:331 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 443)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 43 -> ( 45 44)
;; lr  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  45 [50.0%] 
;; Succ edge  44 [50.0%]  (fallthru)

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 2 [r2] 3 [r3]
;; live  in  	 13 [sp]
;; live  gen 	 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  43 [50.0%]  (fallthru)
(note 633 432 439 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 439 633 440 44 arch/arm/vfp/vfpdouble.c:332 (set (reg:DI 2 r2 [303])
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 440 439 741 44 arch/arm/vfp/vfpdouble.c:332 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])
        (reg:DI 2 r2 [303])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(jump_insn 741 440 742 44 (set (pc)
        (label_ref 558)) 242 {*arm_jump} (nil))
;; End of basic block 44 -> ( 56)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  56 [100.0%] 

(barrier 742 741 443)

;; Start of basic block ( 42 43) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  42 [50.0%] 
;; Pred edge  43 [50.0%] 
(code_label 443 742 444 45 432 "" [2 uses])

(note 444 443 445 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(note 445 444 450 45 NOTE_INSN_DELETED)

(insn 450 445 459 45 arch/arm/vfp/vfp.h:80 (set (reg:SI 12 ip [orig:305 ivtmp.1234 ] [305])
        (reg:SI 2 r2 [orig:144 ivtmp.1234 ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 459 450 716 45 arch/arm/vfp/vfp.h:83 (set (reg:SI 14 lr [373])
        (reg:SI 3 r3 [ ivtmp.1234+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 716 459 466 45 arch/arm/vfp/vfpdouble.c:335 (set (reg:DI 0 r0 [orig:179 D.4317 ] [179])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 466 716 446 45 arch/arm/vfp/vfp.h:83 (set (reg/v:DI 4 r4 [orig:150 rma ] [150])
        (mult:DI (zero_extend:DI (reg:SI 14 lr [373]))
            (zero_extend:DI (reg:SI 12 ip [orig:305 ivtmp.1234 ] [305])))) 51 {*umulsidi3_v6} (nil))

(insn 446 466 447 45 arch/arm/vfp/vfpdouble.c:335 (set (reg:SI 1 r1 [ D.4317+4 ])
        (ashift:SI (reg:SI 7 r7 [ __n+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 447 446 843 45 arch/arm/vfp/vfpdouble.c:335 (set (reg:SI 1 r1 [ D.4317+4 ])
        (ior:SI (lshiftrt:SI (reg:SI 6 r6 [orig:377 __n ] [377])
                (const_int 30 [0x1e]))
            (reg:SI 1 r1 [ D.4317+4 ]))) 270 {*arith_shiftsi} (nil))

(insn 843 447 470 45 arch/arm/vfp/vfp.h:87 (set (reg/v:DI 8 r8 [orig:136 rma.1258 ] [136])
        (reg/v:DI 4 r4 [orig:150 rma ] [150])) 163 {*arm_movdi} (nil))

(insn 470 843 448 45 arch/arm/vfp/vfp.h:87 (parallel [
            (set (reg/v:DI 8 r8 [orig:136 rma.1258 ] [136])
                (plus:DI (reg/v:DI 8 r8 [orig:136 rma.1258 ] [136])
                    (reg/v:DI 4 r4 [orig:150 rma ] [150])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 448 470 478 45 arch/arm/vfp/vfpdouble.c:335 (set (reg:SI 0 r0 [orig:179 D.4317 ] [179])
        (ashift:SI (reg:SI 6 r6 [orig:377 __n ] [377])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 478 448 449 45 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [ rma+4 ])
            (reg:SI 9 r9 [ rma.1258+4 ]))) 219 {*arm_cmpsi_insn} (nil))

(insn 449 478 474 45 arch/arm/vfp/vfpdouble.c:335 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 vdm.significand+0 S8 A64])
        (reg:DI 0 r0 [orig:179 D.4317 ] [179])) 163 {*arm_movdi} (nil))

(insn 474 449 844 45 arch/arm/vfp/vfp.h:89 (set (reg:DI 10 sl)
        (mult:DI (zero_extend:DI (reg:SI 14 lr [373]))
            (zero_extend:DI (reg:SI 14 lr [373])))) 51 {*umulsidi3_v6} (nil))

(insn 844 474 455 45 arch/arm/vfp/vfp.h:89 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-96 S8 A64])
        (reg:DI 10 sl)) 163 {*arm_movdi} (nil))

(insn 455 844 479 45 arch/arm/vfp/vfp.h:80 (set (reg/v:DI 10 sl [orig:151 rl ] [151])
        (mult:DI (zero_extend:DI (reg:SI 12 ip [orig:305 ivtmp.1234 ] [305]))
            (zero_extend:DI (reg:SI 12 ip [orig:305 ivtmp.1234 ] [305])))) 51 {*umulsidi3_v6} (nil))

(jump_insn 479 455 636 45 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 493)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 45 -> ( 49 46)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]


;; Succ edge  49 [50.0%] 
;; Succ edge  46 [50.0%]  (fallthru)

;; Start of basic block ( 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 24 [cc]
;; live  gen 	
;; live  kill	

;; Pred edge  45 [50.0%]  (fallthru)
(note 636 479 481 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(jump_insn 481 636 637 46 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 664)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 46 -> ( 48 47)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  48 [71.0%] 
;; Succ edge  47 [29.0%]  (fallthru)

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  46 [29.0%]  (fallthru)
(note 637 481 482 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 482 637 483 47 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 4 r4 [orig:150 rma ] [150])
            (reg:SI 8 r8 [orig:136 rma.1258 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 483 482 664 47 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 493)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 47 -> ( 49 48)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  49 [50.0%] 
;; Succ edge  48 [50.0%]  (fallthru)

;; Start of basic block ( 47 46) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  47 [50.0%]  (fallthru)
;; Pred edge  46 [71.0%] 
(code_label 664 483 489 48 452 "" [1 uses])

(note 489 664 490 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 490 489 845 48 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 4 r4)
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 845 490 743 48 arch/arm/vfp/vfp.h:90 discrim 2 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])
        (reg:DI 4 r4)) 163 {*arm_movdi} (nil))

(jump_insn 743 845 744 48 (set (pc)
        (label_ref 496)) 242 {*arm_jump} (nil))
;; End of basic block 48 -> ( 50)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  50 [100.0%] 

(barrier 744 743 493)

;; Start of basic block ( 45 47) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7]
;; live  kill	

;; Pred edge  45 [50.0%] 
;; Pred edge  47 [50.0%] 
(code_label 493 744 494 49 434 "" [2 uses])

(note 494 493 495 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 495 494 846 49 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 6 r6)
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4294967296 [0x100000000])
        (nil)))

(insn 846 495 496 49 arch/arm/vfp/vfp.h:90 discrim 1 (set (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])
        (reg:DI 6 r6)) 163 {*arm_movdi} (nil))
;; End of basic block 49 -> ( 50)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  50 [100.0%]  (fallthru)

;; Start of basic block ( 49 48) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  49 [100.0%]  (fallthru)
;; Pred edge  48 [100.0%] 
(code_label 496 846 497 50 436 "" [1 uses])

(note 497 496 698 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(note 698 497 700 50 NOTE_INSN_DELETED)

(note 700 698 717 50 NOTE_INSN_DELETED)

(insn 717 700 718 50 arch/arm/vfp/vfp.h:92 (set (reg/v:DI 4 r4 [orig:134 rma.1260 ] [134])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 718 717 498 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 6 r6 [orig:316 rma.1260 ] [316])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 498 718 501 50 arch/arm/vfp/vfp.h:92 (set (reg:SI 5 r5 [ rma.1260+4 ])
        (reg:SI 8 r8 [orig:136 rma.1258 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 501 498 499 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 6 r6 [orig:316 rma.1260 ] [316])
        (reg:SI 9 r9 [ rma.1258+4 ])) 167 {*arm_movsi_insn} (nil))

(insn 499 501 847 50 arch/arm/vfp/vfp.h:92 (set (reg:SI 4 r4 [orig:134 rma.1260 ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 847 499 500 50 arch/arm/vfp/vfp.h:93 (set (reg/v:DI 8 r8 [orig:133 rl.1261 ] [133])
        (reg/v:DI 10 sl [orig:151 rl ] [151])) 163 {*arm_movdi} (nil))

(insn 500 847 502 50 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg/v:DI 8 r8 [orig:133 rl.1261 ] [133])
                (plus:DI (reg/v:DI 8 r8 [orig:133 rl.1261 ] [133])
                    (reg/v:DI 4 r4 [orig:134 rma.1260 ] [134])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 502 500 848 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 7 r7 [ rma.1260+4 ])
        (reg:SI 4 r4 [orig:134 rma.1260 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 848 502 503 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 %sfp+-96 S8 A64])) 163 {*arm_movdi} (nil))

(insn 503 848 699 50 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 10 sl)
                (plus:DI (reg:DI 10 sl)
                    (reg:DI 6 r6 [orig:316 rma.1260 ] [316])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 699 503 518 50 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:SI 12 ip [379])
                (gtu:SI (reg:SI 5 r5 [ rma.1260+4 ])
                    (reg:SI 9 r9 [ rl.1261+4 ])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 518 699 753 50 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 4 r4 [319])
                (plus:DI (zero_extend:DI (reg:SI 12 ip [379]))
                    (reg:DI 10 sl)))
            (clobber (reg:CC 24 cc))
        ]) 3 {*adddi_zesidi_di} (nil))

(insn 753 518 850 50 arch/arm/vfp/vfp.h:62 (set (reg/v:DI 6 r6 [orig:174 reml ] [174])
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 850 753 520 50 arch/arm/vfp/vfp.h:62 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 %sfp+-88 S8 A64])) 163 {*arm_movdi} (nil))

(insn 520 850 521 50 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 4 r4 [319])
                (plus:DI (reg:DI 4 r4 [319])
                    (reg:DI 10 sl)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 521 520 533 50 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg/v:DI 6 r6 [orig:174 reml ] [174])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 0 [
                        (reg/v:DI 6 r6 [orig:174 reml ] [174])
                        (reg/v:DI 0 r0 [orig:175 remh ] [175])
                        (reg/v:DI 8 r8 [orig:133 rl.1261 ] [133])
                        (reg:DI 4 r4 [319])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (set (reg/v:DI 0 r0 [orig:175 remh ] [175])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 1 [
                        (reg/v:DI 6 r6 [orig:174 reml ] [174])
                        (reg/v:DI 0 r0 [orig:175 remh ] [175])
                        (reg/v:DI 8 r8 [orig:133 rl.1261 ] [133])
                        (reg:DI 4 r4 [319])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(note 533 521 526 50 NOTE_INSN_DELETED)

(insn 526 533 745 50 arch/arm/vfp/vfp.h:49 (set (reg:DI 8 r8 [381])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(jump_insn 745 526 746 50 arch/arm/vfp/vfpdouble.c:338 (set (pc)
        (label_ref 531)) 242 {*arm_jump} (nil))
;; End of basic block 50 -> ( 52)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  52 [100.0%] 

(barrier 746 745 535)

;; Start of basic block ( 52) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  52 [21.0%] 
(code_label 535 746 524 51 440 "" [1 uses])

(note 524 535 851 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 851 524 525 51 arch/arm/vfp/vfp.h:49 (set (reg:DI 10 sl [320])
        (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])) 163 {*arm_movdi} (nil))

(insn 525 851 528 51 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg:DI 10 sl [320])
                (plus:DI (reg:DI 10 sl [320])
                    (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (nil))

(insn 528 525 852 51 arch/arm/vfp/vfp.h:49 (set (reg:SI 12 ip)
        (lshiftrt:SI (reg:SI 3 r3 [ ivtmp.1234+4 ])
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 852 528 527 51 arch/arm/vfp/vfp.h:49 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 %sfp+-72 S4 A64])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (nil))

(insn 527 852 529 51 arch/arm/vfp/vfp.h:49 (set (reg:DI 4 r4 [321])
        (ior:DI (reg:DI 10 sl [320])
            (reg:DI 8 r8 [381]))) 86 {iordi3} (expr_list:REG_EQUAL (ior:DI (reg:DI 10 sl [320])
            (const_int 1 [0x1]))
        (nil)))

(insn 529 527 853 51 arch/arm/vfp/vfp.h:49 (set (reg:SI 10 sl)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 853 529 854 51 arch/arm/vfp/vfp.h:49 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 %sfp+-68 S4 A32])
        (reg:SI 10 sl)) 167 {*arm_movsi_insn} (nil))

(insn 854 853 530 51 arch/arm/vfp/vfp.h:49 (set (reg:DI 10 sl)
        (mem/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 %sfp+-72 S8 A64])) 163 {*arm_movdi} (nil))

(insn 530 854 531 51 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 6 r6 [orig:174 reml ] [174])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 0 [
                        (reg/v:DI 6 r6 [orig:174 reml ] [174])
                        (reg/v:DI 0 r0 [orig:175 remh ] [175])
                        (reg:DI 4 r4 [321])
                        (reg:DI 10 sl)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (set (reg/v:DI 0 r0 [orig:175 remh ] [175])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 1 [
                        (reg/v:DI 6 r6 [orig:174 reml ] [174])
                        (reg/v:DI 0 r0 [orig:175 remh ] [175])
                        (reg:DI 4 r4 [321])
                        (reg:DI 10 sl)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))
;; End of basic block 51 -> ( 52)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  52 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 51 50) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  51 [100.0%]  (fallthru,dfs_back)
;; Pred edge  50 [100.0%] 
(code_label 531 530 532 52 439 "" [1 uses])

(note 532 531 855 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 855 532 534 52 arch/arm/vfp/vfp.h:49 (set (reg:DI 4 r4)
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(insn 534 855 536 52 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
                (plus:DI (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
                    (reg:DI 4 r4)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 536 534 537 52 arch/arm/vfp/vfpdouble.c:338 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [ remh+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 537 536 647 52 arch/arm/vfp/vfpdouble.c:338 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 535)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2100 [0x834])
        (nil)))
;; End of basic block 52 -> ( 51 53)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 13 [sp]


;; Succ edge  51 [21.0%] 
;; Succ edge  53 [79.0%]  (fallthru,loop_exit)

;; Start of basic block ( 52) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	 6 [r6]

;; Pred edge  52 [79.0%]  (fallthru,loop_exit)
(note 647 537 548 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(note 548 647 549 53 NOTE_INSN_DELETED)

(note 549 548 547 53 NOTE_INSN_DELETED)

(insn 547 549 546 53 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 8 r8 [327])
        (ior:DI (reg/v:DI 0 r0 [orig:175 remh ] [175])
            (reg/v:DI 6 r6 [orig:174 reml ] [174]))) 86 {iordi3} (nil))

(insn 546 547 550 53 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 4 r4 [326])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 550 546 551 53 arch/arm/vfp/vfpdouble.c:344 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 8 r8 [327])
                        (reg:SI 9 r9 [+4 ]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 6 r6))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 551 550 651 53 arch/arm/vfp/vfpdouble.c:344 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 553)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 53 -> ( 55 54)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  55 [50.0%] 
;; Succ edge  54 [50.0%]  (fallthru)

;; Start of basic block ( 53) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  53 [50.0%]  (fallthru)
(note 651 551 552 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn 552 651 553 54 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 4 r4 [326])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 54 -> ( 55)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  55 [100.0%]  (fallthru)

;; Start of basic block ( 53 54) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 24 [cc]

;; Pred edge  53 [50.0%] 
;; Pred edge  54 [100.0%]  (fallthru)
(code_label 553 552 652 55 442 "" [1 uses])

(note 652 553 554 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 554 652 555 55 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 0 r0 [329])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 555 554 556 55 arch/arm/vfp/vfpdouble.c:344 (parallel [
            (set (reg:DI 0 r0 [329])
                (plus:DI (reg:DI 0 r0 [329])
                    (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_EQUAL (plus:DI (reg:DI 2 r2 [orig:144 ivtmp.1234 ] [144])
            (const_int 1 [0x1]))
        (nil)))

(insn 556 555 557 55 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 2 r2 [331])
        (ior:DI (reg:DI 4 r4 [326])
            (reg:DI 0 r0 [329]))) 86 {iordi3} (expr_list:REG_EQUIV (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdd.significand+0 S8 A64])
        (nil)))

(insn 557 556 558 55 arch/arm/vfp/vfpdouble.c:344 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])
        (reg:DI 2 r2 [331])) 163 {*arm_movdi} (nil))
;; End of basic block 55 -> ( 56)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  56 [100.0%]  (fallthru)

;; Start of basic block ( 55 41 40 44) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  55 [100.0%]  (fallthru)
;; Pred edge  41 [50.0%] 
;; Pred edge  40 [50.0%] 
;; Pred edge  44 [100.0%] 
(code_label 558 557 559 56 430 "" [3 uses])

(note 559 558 560 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(insn 560 559 561 56 arch/arm/vfp/vfpdouble.c:347 (set (reg:DI 2 r2 [orig:180 D.4307 ] [180])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 561 560 562 56 arch/arm/vfp/vfpdouble.c:347 (set (reg:DI 4 r4 [332])
        (const_int 0 [0x0])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 562 561 566 56 arch/arm/vfp/vfpdouble.c:347 (set (reg:SI 1 r1 [orig:376+4 ] [376])
        (ashift:SI (reg:SI 2 r2 [orig:180 D.4307 ] [180])
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 566 562 567 56 arch/arm/vfp/vfpdouble.c:347 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:376+4 ] [376])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 567 566 653 56 arch/arm/vfp/vfpdouble.c:347 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 569)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 56 -> ( 58 57)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  58 [50.0%] 
;; Succ edge  57 [50.0%]  (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  56 [50.0%]  (fallthru)
(note 653 567 568 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn 568 653 569 57 arch/arm/vfp/vfpdouble.c:347 (set (reg:DI 4 r4 [332])
        (const_int 1 [0x1])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 57 -> ( 58)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  58 [100.0%]  (fallthru)

;; Start of basic block ( 56 57) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 12 [ip]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  56 [50.0%] 
;; Pred edge  57 [100.0%]  (fallthru)
(code_label 569 568 654 58 443 "" [1 uses])

(note 654 569 573 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(note 573 654 570 58 NOTE_INSN_DELETED)

(insn 570 573 576 58 arch/arm/vfp/vfpdouble.c:347 (parallel [
            (set (reg:DI 6 r6 [336])
                (lshiftrt:DI (reg:DI 2 r2 [orig:180 D.4307 ] [180])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (nil))

(insn 576 570 578 58 arch/arm/vfp/vfpdouble.c:349 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 88 [0x58])) [0 %sfp+-48 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 578 576 577 58 arch/arm/vfp/vfpdouble.c:349 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 92 [0x5c])) [0 %sfp+-44 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 577 578 579 58 arch/arm/vfp/vfpdouble.c:349 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 104 [0x68]))) 4 {*arm_addsi3} (nil))

(insn 579 577 571 58 arch/arm/vfp/vfpdouble.c:349 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 571 579 756 58 arch/arm/vfp/vfpdouble.c:347 (set (reg:DI 8 r8 [337])
        (ior:DI (reg:DI 4 r4 [332])
            (reg:DI 6 r6 [336]))) 86 {iordi3} (expr_list:REG_EQUIV (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdd.significand+0 S8 A64])
        (nil)))

(insn 756 571 575 58 arch/arm/vfp/vfpdouble.c:349 (set (reg/f:SI 12 ip [339])
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x10eedd20>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x10eedd20>)
        (nil)))

(insn 575 756 572 58 arch/arm/vfp/vfpdouble.c:349 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [339])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x10eedd20>)
        (nil)))

(insn 572 575 580 58 arch/arm/vfp/vfpdouble.c:347 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 vdd.significand+0 S8 A64])
        (reg:DI 8 r8 [337])) 163 {*arm_movdi} (nil))

(call_insn 580 572 582 58 arch/arm/vfp/vfpdouble.c:349 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 58 -> ( 59)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  59 [100.0%]  (fallthru)

;; Start of basic block ( 58 17) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  58 [100.0%]  (fallthru)
;; Pred edge  17 [100.0%] 
(code_label 582 580 583 59 411 "" [1 uses])

(note 583 582 594 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn 594 583 755 59 arch/arm/vfp/vfpdouble.c:350 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 59 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 755 594 780 NOTE_INSN_DELETED)

(note 780 755 0 NOTE_INSN_DELETED)

