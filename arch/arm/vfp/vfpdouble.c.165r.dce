
;; Function vfp_propagate_nan (vfp_propagate_nan)[0:154]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 26 n_edges 35 count 50 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 26 n_edges 35 count 50 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 26 n_edges 35 count 50 (  1.9)


vfp_propagate_nan

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,4u} r1={2d,2u} r2={2d,2u} r3={2d,2u} r11={1d,25u} r12={1d} r13={1d,25u} r14={1d,1u} r24={19d,19u} r25={1d,25u} r26={1d,24u} r133={1d,2u} r134={1d,3u,1d} r135={1d,2u} r136={1d,3u,1d} r137={5d,2u} r138={4d,3u} r139={3d,6u} r140={1d,1u} r142={1d,4u} r143={1d,5u} r144={1d,7u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={2d,2u} r151={1d,2u} r152={1d,1u} r153={2d,2u} r154={2d,2u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={2d,2u} r161={1d,2u} r162={1d,1u} r163={2d,2u} r164={2d,2u} r165={1d,1u} r166={1d,1u} r169={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u,1d} r176={1d,1u} r177={1d,1u} r181={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} 
;;    total ref usage 308{95d,210u,3e} in 104{104 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
0[0,3] 1[3,2] 2[5,2] 3[7,2] 11[9,1] 12[10,1] 13[11,1] 14[12,1] 24[13,19] 25[32,1] 26[33,1] 133[34,1] 134[35,1] 135[36,1] 136[37,1] 137[38,5] 138[43,4] 139[47,3] 140[50,1] 142[51,1] 143[52,1] 144[53,1] 145[54,1] 146[55,1] 147[56,1] 148[57,1] 149[58,1] 150[59,2] 151[61,1] 152[62,1] 153[63,2] 154[65,2] 155[67,1] 156[68,1] 157[69,1] 158[70,1] 159[71,1] 160[72,2] 161[74,1] 162[75,1] 163[76,2] 164[78,2] 165[80,1] 166[81,1] 169[82,1] 171[83,1] 172[84,1] 173[85,1] 174[86,1] 175[87,1] 176[88,1] 177[89,1] 181[90,1] 183[91,1] 184[92,1] 185[93,1] 186[94,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d2(0){ }d4(1){ }d6(2){ }d8(3){ }d9(11){ }d10(12){ }d11(13){ }d12(14){ }d32(25){ }d33(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
2, 4, 6, 8, 9, 10, 11, 12, 32, 33
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 32, 33
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
2, 4, 6, 8, 9, 10, 11, 12, 32, 33

( 0 )->[2]->( 3 6 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d9(bb 0 insn -1) }u1(13){ d11(bb 0 insn -1) }u2(25){ d32(bb 0 insn -1) }u3(26){ d33(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 135 142 143 144 145 146 147 148 149
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 135 142 143 144 145 146 147 148 149
;; live  kill	
;; rd  in  	(10)
2, 4, 6, 8, 9, 10, 11, 12, 32, 33
;; rd  gen 	(10)
31, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  kill	(28)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 142 143 144 145
;; rd  out 	(20)
2, 4, 6, 8, 9, 10, 11, 12, 31, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d2(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d4(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d6(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d8(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 9
;;      reg 143 { d52(bb 2 insn 3) }
;;   UD chains for insn luid 6 uid 11
;;      reg 147 { d56(bb 2 insn 10) }
;;   UD chains for insn luid 7 uid 12
;;      reg 135 { d36(bb 2 insn 9) }
;;   UD chains for insn luid 8 uid 13
;;      reg 146 { d55(bb 2 insn 11) }
;;   UD chains for insn luid 9 uid 14
;;      reg 148 { d57(bb 2 insn 12) }
;;      reg 149 { d58(bb 2 insn 13) }
;;   UD chains for insn luid 10 uid 15
;;      reg 24 { d31(bb 2 insn 14) }

( 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(11){ d9(bb 0 insn -1) }u16(13){ d11(bb 0 insn -1) }u17(25){ d32(bb 0 insn -1) }u18(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 136 150
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 24 [cc] 136 150
;; live  kill	
;; rd  in  	(20)
2, 4, 6, 8, 9, 10, 11, 12, 31, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  gen 	(3)
30, 37, 59
;; rd  kill	(22)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 59, 60
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 142 143 144 145
;; rd  out 	(22)
2, 4, 6, 8, 9, 10, 11, 12, 30, 32, 33, 36, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 17
;;      reg 143 { d52(bb 2 insn 3) }
;;   UD chains for insn luid 1 uid 18
;;      reg 136 { d37(bb 3 insn 17) }
;;   UD chains for insn luid 2 uid 19
;;      reg 136 { d37(bb 3 insn 17) }
;;      reg 150 { d60(bb 3 insn 18) }
;;   UD chains for insn luid 3 uid 20
;;      reg 150 { d59(bb 3 insn 19) }
;;   UD chains for insn luid 4 uid 21
;;      reg 24 { d30(bb 3 insn 20) }

( 3 )->[4]->( 9 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u25(11){ d9(bb 0 insn -1) }u26(13){ d11(bb 0 insn -1) }u27(25){ d32(bb 0 insn -1) }u28(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 138
;; live  kill	
;; rd  in  	(22)
2, 4, 6, 8, 9, 10, 11, 12, 30, 32, 33, 36, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59
;; rd  gen 	(1)
46
;; rd  kill	(4)
43, 44, 45, 46
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(23)
2, 4, 6, 8, 9, 10, 11, 12, 30, 32, 33, 36, 37, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }

( 3 )->[5]->( 9 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u29(11){ d9(bb 0 insn -1) }u30(13){ d11(bb 0 insn -1) }u31(25){ d32(bb 0 insn -1) }u32(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 138 151 152 153
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 142 143 144 145
;; live  gen 	 24 [cc] 138 151 152 153
;; live  kill	
;; rd  in  	(22)
2, 4, 6, 8, 9, 10, 11, 12, 30, 32, 33, 36, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59
;; rd  gen 	(5)
29, 44, 61, 62, 63
;; rd  kill	(27)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 43, 44, 45, 46, 61, 62, 63, 64
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(26)
2, 4, 6, 8, 9, 10, 11, 12, 29, 32, 33, 36, 37, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 29
;;      reg 136 { d37(bb 3 insn 17) }
;;      reg 152 { d62(bb 5 insn 28) }
;;   eq_note reg 136 { }
;;   UD chains for insn luid 2 uid 30
;;      reg 151 { d61(bb 5 insn 29) }
;;   UD chains for insn luid 3 uid 31
;;      reg 151 { d61(bb 5 insn 29) }
;;      reg 153 { d64(bb 5 insn 30) }
;;   UD chains for insn luid 4 uid 32
;;      reg 153 { d63(bb 5 insn 31) }
;;   UD chains for insn luid 5 uid 230
;;      reg 24 { d29(bb 5 insn 32) }

( 2 )->[6]->( 8 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u41(11){ d9(bb 0 insn -1) }u42(13){ d11(bb 0 insn -1) }u43(25){ d32(bb 0 insn -1) }u44(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 142 143 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(20)
2, 4, 6, 8, 9, 10, 11, 12, 31, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  gen 	(1)
28
;; rd  kill	(19)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; rd  out 	(20)
2, 4, 6, 8, 9, 10, 11, 12, 28, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 45
;;      reg 135 { d36(bb 2 insn 9) }
;;   UD chains for insn luid 1 uid 46
;;      reg 24 { d28(bb 6 insn 45) }

( 6 )->[7]->( 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u47(11){ d9(bb 0 insn -1) }u48(13){ d11(bb 0 insn -1) }u49(25){ d32(bb 0 insn -1) }u50(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 138
;; live  kill	
;; rd  in  	(20)
2, 4, 6, 8, 9, 10, 11, 12, 28, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  gen 	(1)
45
;; rd  kill	(4)
43, 44, 45, 46
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(21)
2, 4, 6, 8, 9, 10, 11, 12, 28, 32, 33, 36, 45, 51, 52, 53, 54, 55, 56, 57, 58
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }

( 6 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u51(11){ d9(bb 0 insn -1) }u52(13){ d11(bb 0 insn -1) }u53(25){ d32(bb 0 insn -1) }u54(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 138 154 155
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 24 [cc] 138 154 155
;; live  kill	
;; rd  in  	(20)
2, 4, 6, 8, 9, 10, 11, 12, 28, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  gen 	(4)
27, 43, 65, 67
;; rd  kill	(26)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 43, 44, 45, 46, 65, 66, 67
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(23)
2, 4, 6, 8, 9, 10, 11, 12, 27, 32, 33, 36, 43, 51, 52, 53, 54, 55, 56, 57, 58, 65, 67
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 53
;;      reg 143 { d52(bb 2 insn 3) }
;;   UD chains for insn luid 1 uid 54
;;      reg 143 { d52(bb 2 insn 3) }
;;   UD chains for insn luid 2 uid 55
;;      reg 154 { d66(bb 8 insn 53) }
;;      reg 155 { d67(bb 8 insn 54) }
;;   UD chains for insn luid 3 uid 56
;;      reg 154 { d65(bb 8 insn 55) }
;;   UD chains for insn luid 4 uid 232
;;      reg 24 { d27(bb 8 insn 56) }

( 8 5 4 7 )->[9]->( 11 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u61(11){ d9(bb 0 insn -1) }u62(13){ d11(bb 0 insn -1) }u63(25){ d32(bb 0 insn -1) }u64(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(34)
2, 4, 6, 8, 9, 10, 11, 12, 27, 28, 29, 30, 32, 33, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67
;; rd  gen 	(1)
26
;; rd  kill	(19)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(31)
2, 4, 6, 8, 9, 10, 11, 12, 26, 32, 33, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 67
;;      reg 144 { d53(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 68
;;      reg 24 { d26(bb 9 insn 67) }

( 9 )->[10]->( 18 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u67(11){ d9(bb 0 insn -1) }u68(13){ d11(bb 0 insn -1) }u69(25){ d32(bb 0 insn -1) }u70(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 137
;; live  kill	
;; rd  in  	(31)
2, 4, 6, 8, 9, 10, 11, 12, 26, 32, 33, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67
;; rd  gen 	(1)
40
;; rd  kill	(5)
38, 39, 40, 41, 42
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(32)
2, 4, 6, 8, 9, 10, 11, 12, 26, 32, 33, 36, 37, 40, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 70
;;      reg 144 { d53(bb 2 insn 4) }

( 9 )->[11]->( 12 15 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u72(11){ d9(bb 0 insn -1) }u73(13){ d11(bb 0 insn -1) }u74(25){ d32(bb 0 insn -1) }u75(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 133 156 157 158 159
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 24 [cc] 133 156 157 158 159
;; live  kill	
;; rd  in  	(31)
2, 4, 6, 8, 9, 10, 11, 12, 26, 32, 33, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67
;; rd  gen 	(6)
25, 34, 68, 69, 70, 71
;; rd  kill	(24)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 68, 69, 70, 71
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138 142 143 144 145
;; rd  out 	(36)
2, 4, 6, 8, 9, 10, 11, 12, 25, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 75
;;      reg 144 { d53(bb 2 insn 4) }
;;   UD chains for insn luid 2 uid 77
;;      reg 157 { d69(bb 11 insn 76) }
;;   UD chains for insn luid 3 uid 78
;;      reg 133 { d34(bb 11 insn 75) }
;;   UD chains for insn luid 4 uid 79
;;      reg 156 { d68(bb 11 insn 77) }
;;   UD chains for insn luid 5 uid 80
;;      reg 158 { d70(bb 11 insn 78) }
;;      reg 159 { d71(bb 11 insn 79) }
;;   UD chains for insn luid 6 uid 81
;;      reg 24 { d25(bb 11 insn 80) }

( 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u83(11){ d9(bb 0 insn -1) }u84(13){ d11(bb 0 insn -1) }u85(25){ d32(bb 0 insn -1) }u86(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 134 160
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 24 [cc] 134 160
;; live  kill	
;; rd  in  	(36)
2, 4, 6, 8, 9, 10, 11, 12, 25, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;; rd  gen 	(3)
24, 35, 72
;; rd  kill	(22)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 72, 73
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 142 143 144 145
;; rd  out 	(38)
2, 4, 6, 8, 9, 10, 11, 12, 24, 32, 33, 34, 35, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 83
;;      reg 144 { d53(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 84
;;      reg 134 { d35(bb 12 insn 83) }
;;   UD chains for insn luid 2 uid 85
;;      reg 134 { d35(bb 12 insn 83) }
;;      reg 160 { d73(bb 12 insn 84) }
;;   UD chains for insn luid 3 uid 86
;;      reg 160 { d72(bb 12 insn 85) }
;;   UD chains for insn luid 4 uid 87
;;      reg 24 { d24(bb 12 insn 86) }

( 12 )->[13]->( 18 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u93(11){ d9(bb 0 insn -1) }u94(13){ d11(bb 0 insn -1) }u95(25){ d32(bb 0 insn -1) }u96(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 137
;; live  kill	
;; rd  in  	(38)
2, 4, 6, 8, 9, 10, 11, 12, 24, 32, 33, 34, 35, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72
;; rd  gen 	(1)
42
;; rd  kill	(5)
38, 39, 40, 41, 42
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(39)
2, 4, 6, 8, 9, 10, 11, 12, 24, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }

( 12 )->[14]->( 18 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u97(11){ d9(bb 0 insn -1) }u98(13){ d11(bb 0 insn -1) }u99(25){ d32(bb 0 insn -1) }u100(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 137 161 162 163
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 142 143 144 145
;; live  gen 	 24 [cc] 137 161 162 163
;; live  kill	
;; rd  in  	(38)
2, 4, 6, 8, 9, 10, 11, 12, 24, 32, 33, 34, 35, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72
;; rd  gen 	(5)
23, 39, 74, 75, 76
;; rd  kill	(28)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 74, 75, 76, 77
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(42)
2, 4, 6, 8, 9, 10, 11, 12, 23, 32, 33, 34, 35, 36, 37, 39, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 95
;;      reg 134 { d35(bb 12 insn 83) }
;;      reg 162 { d75(bb 14 insn 94) }
;;   eq_note reg 134 { }
;;   UD chains for insn luid 2 uid 96
;;      reg 161 { d74(bb 14 insn 95) }
;;   UD chains for insn luid 3 uid 97
;;      reg 161 { d74(bb 14 insn 95) }
;;      reg 163 { d77(bb 14 insn 96) }
;;   UD chains for insn luid 4 uid 98
;;      reg 163 { d76(bb 14 insn 97) }
;;   UD chains for insn luid 5 uid 234
;;      reg 24 { d23(bb 14 insn 98) }

( 11 )->[15]->( 17 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u109(11){ d9(bb 0 insn -1) }u110(13){ d11(bb 0 insn -1) }u111(25){ d32(bb 0 insn -1) }u112(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138 142 143 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(36)
2, 4, 6, 8, 9, 10, 11, 12, 25, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;; rd  gen 	(1)
22
;; rd  kill	(19)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(36)
2, 4, 6, 8, 9, 10, 11, 12, 22, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 111
;;      reg 133 { d34(bb 11 insn 75) }
;;   UD chains for insn luid 1 uid 112
;;      reg 24 { d22(bb 15 insn 111) }

( 15 )->[16]->( 18 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u115(11){ d9(bb 0 insn -1) }u116(13){ d11(bb 0 insn -1) }u117(25){ d32(bb 0 insn -1) }u118(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 137
;; live  kill	
;; rd  in  	(36)
2, 4, 6, 8, 9, 10, 11, 12, 22, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;; rd  gen 	(1)
41
;; rd  kill	(5)
38, 39, 40, 41, 42
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(37)
2, 4, 6, 8, 9, 10, 11, 12, 22, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }

( 15 )->[17]->( 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u119(11){ d9(bb 0 insn -1) }u120(13){ d11(bb 0 insn -1) }u121(25){ d32(bb 0 insn -1) }u122(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 137 164 165
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 24 [cc] 137 164 165
;; live  kill	
;; rd  in  	(36)
2, 4, 6, 8, 9, 10, 11, 12, 22, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;; rd  gen 	(4)
21, 38, 78, 80
;; rd  kill	(27)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 78, 79, 80
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(39)
2, 4, 6, 8, 9, 10, 11, 12, 21, 32, 33, 34, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 78, 80
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 119
;;      reg 144 { d53(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 120
;;      reg 144 { d53(bb 2 insn 4) }
;;   UD chains for insn luid 2 uid 121
;;      reg 164 { d79(bb 17 insn 119) }
;;      reg 165 { d80(bb 17 insn 120) }
;;   UD chains for insn luid 3 uid 122
;;      reg 164 { d78(bb 17 insn 121) }
;;   UD chains for insn luid 4 uid 236
;;      reg 24 { d21(bb 17 insn 122) }

( 17 14 10 13 16 )->[18]->( 19 20 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u129(11){ d9(bb 0 insn -1) }u130(13){ d11(bb 0 insn -1) }u131(25){ d32(bb 0 insn -1) }u132(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 24 [cc] 166
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  gen 	 24 [cc] 166
;; live  kill	
;; rd  in  	(52)
2, 4, 6, 8, 9, 10, 11, 12, 21, 22, 23, 24, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80
;; rd  gen 	(2)
20, 81
;; rd  kill	(20)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 81
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; rd  out 	(49)
2, 4, 6, 8, 9, 10, 11, 12, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 133
;;      reg 145 { d54(bb 2 insn 5) }
;;   UD chains for insn luid 1 uid 134
;;      reg 166 { d81(bb 18 insn 133) }
;;   UD chains for insn luid 2 uid 135
;;      reg 24 { d20(bb 18 insn 134) }

( 18 )->[19]->( 25 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u136(11){ d9(bb 0 insn -1) }u137(13){ d11(bb 0 insn -1) }u138(25){ d32(bb 0 insn -1) }u139(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142
;; live  gen 	 139
;; live  kill	
;; rd  in  	(49)
2, 4, 6, 8, 9, 10, 11, 12, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81
;; rd  gen 	(1)
47
;; rd  kill	(3)
47, 48, 49
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; rd  out 	(50)
2, 4, 6, 8, 9, 10, 11, 12, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }

( 18 )->[20]->( 23 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u140(11){ d9(bb 0 insn -1) }u141(13){ d11(bb 0 insn -1) }u142(25){ d32(bb 0 insn -1) }u143(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(49)
2, 4, 6, 8, 9, 10, 11, 12, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81
;; rd  gen 	(1)
19
;; rd  kill	(19)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; rd  out 	(49)
2, 4, 6, 8, 9, 10, 11, 12, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 143
;;      reg 138 { d46(bb 4 insn 23) d45(bb 7 insn 48) d44(bb 5 insn 230) d43(bb 8 insn 232) }
;;   UD chains for insn luid 1 uid 144
;;      reg 24 { d19(bb 20 insn 143) }

( 20 )->[21]->( 23 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u146(11){ d9(bb 0 insn -1) }u147(13){ d11(bb 0 insn -1) }u148(25){ d32(bb 0 insn -1) }u149(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; lr  def 	 24 [cc] 169 171 172 173 174
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  gen 	 24 [cc] 169 171 172 173 174
;; live  kill	
;; rd  in  	(49)
2, 4, 6, 8, 9, 10, 11, 12, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81
;; rd  gen 	(6)
16, 82, 83, 84, 85, 86
;; rd  kill	(24)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 82, 83, 84, 85, 86
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; rd  out 	(54)
2, 4, 6, 8, 9, 10, 11, 12, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 146
;;      reg 137 { d42(bb 13 insn 89) d41(bb 16 insn 114) d40(bb 10 insn 70) d39(bb 14 insn 234) d38(bb 17 insn 236) }
;;   UD chains for insn luid 1 uid 147
;;      reg 24 { d18(bb 21 insn 146) }
;;   UD chains for insn luid 2 uid 149
;;      reg 138 { d46(bb 4 insn 23) d45(bb 7 insn 48) d44(bb 5 insn 230) d43(bb 8 insn 232) }
;;   UD chains for insn luid 3 uid 150
;;      reg 24 { d17(bb 21 insn 149) }
;;   UD chains for insn luid 4 uid 152
;;      reg 169 { d82(bb 21 insn 147) }
;;      reg 171 { d83(bb 21 insn 150) }
;;   UD chains for insn luid 5 uid 153
;;      reg 172 { d84(bb 21 insn 152) }
;;   UD chains for insn luid 6 uid 154
;;      reg 173 { d85(bb 21 insn 153) }
;;   UD chains for insn luid 7 uid 155
;;      reg 174 { d86(bb 21 insn 154) }
;;   UD chains for insn luid 8 uid 156
;;      reg 24 { d16(bb 21 insn 155) }

( 21 )->[22]->( 24 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u160(11){ d9(bb 0 insn -1) }u161(13){ d11(bb 0 insn -1) }u162(25){ d32(bb 0 insn -1) }u163(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 144
;; live  gen 	 139
;; live  kill	
;; rd  in  	(54)
2, 4, 6, 8, 9, 10, 11, 12, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86
;; rd  gen 	(1)
49
;; rd  kill	(3)
47, 48, 49
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; rd  out 	(55)
2, 4, 6, 8, 9, 10, 11, 12, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 158
;;      reg 144 { d53(bb 2 insn 4) }

( 21 20 )->[23]->( 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u165(11){ d9(bb 0 insn -1) }u166(13){ d11(bb 0 insn -1) }u167(25){ d32(bb 0 insn -1) }u168(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143
;; live  gen 	 139
;; live  kill	
;; rd  in  	(55)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86
;; rd  gen 	(1)
48
;; rd  kill	(3)
47, 48, 49
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; rd  out 	(56)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 163
;;      reg 143 { d52(bb 2 insn 3) }

( 23 22 )->[24]->( 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u170(11){ d9(bb 0 insn -1) }u171(13){ d11(bb 0 insn -1) }u172(25){ d32(bb 0 insn -1) }u173(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 175 176 177
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  gen 	 175 176 177
;; live  kill	
;; rd  in  	(57)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86
;; rd  gen 	(3)
87, 88, 89
;; rd  kill	(3)
87, 88, 89
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; rd  out 	(60)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 166
;;      reg 139 { d49(bb 22 insn 158) d48(bb 23 insn 163) }
;;   UD chains for insn luid 2 uid 168
;;      reg 175 { d87(bb 24 insn 166) }
;;      reg 176 { d88(bb 24 insn 167) }
;;   eq_note reg 175 { }
;;   UD chains for insn luid 3 uid 169
;;      reg 139 { d49(bb 22 insn 158) d48(bb 23 insn 163) }
;;      reg 177 { d89(bb 24 insn 168) }

( 24 19 )->[25]->( 1 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u180(11){ d9(bb 0 insn -1) }u181(13){ d11(bb 0 insn -1) }u182(25){ d32(bb 0 insn -1) }u183(26){ d33(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 142
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 140 181 183 184 185 186
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 140 181 183 184 185 186
;; live  kill	
;; rd  in  	(62)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89
;; rd  gen 	(11)
0, 3, 5, 7, 13, 50, 90, 91, 92, 93, 94
;; rd  kill	(34)
0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 50, 90, 91, 92, 93, 94
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(66)
0, 3, 5, 7, 9, 10, 11, 12, 13, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }
;;   reg 26 { d33(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 174
;;      reg 139 { d49(bb 22 insn 158) d48(bb 23 insn 163) d47(bb 19 insn 137) }
;;      reg 139 { d49(bb 22 insn 158) d48(bb 23 insn 163) d47(bb 19 insn 137) }
;;      reg 139 { d49(bb 22 insn 158) d48(bb 23 insn 163) d47(bb 19 insn 137) }
;;      reg 139 { d49(bb 22 insn 158) d48(bb 23 insn 163) d47(bb 19 insn 137) }
;;   UD chains for insn luid 1 uid 175
;;      reg 0 { d1(bb 25 insn 174) }
;;      reg 1 { d3(bb 25 insn 174) }
;;      reg 2 { d5(bb 25 insn 174) }
;;      reg 3 { d7(bb 25 insn 174) }
;;      reg 142 { d51(bb 2 insn 2) }
;;      reg 142 { d51(bb 2 insn 2) }
;;      reg 142 { d51(bb 2 insn 2) }
;;      reg 142 { d51(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 176
;;      reg 137 { d42(bb 13 insn 89) d41(bb 16 insn 114) d40(bb 10 insn 70) d39(bb 14 insn 234) d38(bb 17 insn 236) }
;;   UD chains for insn luid 3 uid 177
;;      reg 24 { d15(bb 25 insn 176) }
;;   UD chains for insn luid 4 uid 179
;;      reg 138 { d46(bb 4 insn 23) d45(bb 7 insn 48) d44(bb 5 insn 230) d43(bb 8 insn 232) }
;;   UD chains for insn luid 5 uid 180
;;      reg 24 { d14(bb 25 insn 179) }
;;   UD chains for insn luid 6 uid 182
;;      reg 181 { d90(bb 25 insn 177) }
;;      reg 183 { d91(bb 25 insn 180) }
;;   UD chains for insn luid 7 uid 183
;;      reg 184 { d92(bb 25 insn 182) }
;;   UD chains for insn luid 8 uid 184
;;      reg 185 { d93(bb 25 insn 183) }
;;   UD chains for insn luid 9 uid 185
;;      reg 186 { d94(bb 25 insn 184) }
;;   UD chains for insn luid 10 uid 238
;;      reg 24 { d13(bb 25 insn 185) }
;;   UD chains for insn luid 11 uid 200
;;      reg 140 { d50(bb 25 insn 238) }
;;   UD chains for insn luid 12 uid 206
;;      reg 0 { d0(bb 25 insn 200) }

( 25 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u208(0){ d0(bb 25 insn 200) }u209(11){ d9(bb 0 insn -1) }u210(13){ d11(bb 0 insn -1) }u211(14){ d12(bb 0 insn -1) }u212(25){ d32(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(66)
0, 3, 5, 7, 9, 10, 11, 12, 13, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(66)
0, 3, 5, 7, 9, 10, 11, 12, 13, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 25 insn 200) }
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 14 { d12(bb 0 insn -1) }
;;   reg 25 { d32(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 21 to worklist
  Adding insn 239 to worklist
  Adding insn 241 to worklist
  Adding insn 46 to worklist
  Adding insn 243 to worklist
  Adding insn 68 to worklist
  Adding insn 245 to worklist
  Adding insn 81 to worklist
  Adding insn 87 to worklist
  Adding insn 247 to worklist
  Adding insn 249 to worklist
  Adding insn 112 to worklist
  Adding insn 251 to worklist
  Adding insn 135 to worklist
  Adding insn 253 to worklist
  Adding insn 144 to worklist
  Adding insn 156 to worklist
  Adding insn 255 to worklist
  Adding insn 169 to worklist
  Adding insn 206 to worklist
  Adding insn 175 to worklist
Finished finding needed instructions:
  Adding insn 200 to worklist
Processing use of (reg 140 [ D.4202 ]) in insn 200:
  Adding insn 238 to worklist
Processing use of (reg 24 cc) in insn 238:
  Adding insn 185 to worklist
Processing use of (reg 186) in insn 185:
  Adding insn 184 to worklist
Processing use of (reg 185) in insn 184:
  Adding insn 183 to worklist
Processing use of (subreg (reg 184) 0) in insn 183:
  Adding insn 182 to worklist
Processing use of (reg 181) in insn 182:
  Adding insn 177 to worklist
Processing use of (reg 183) in insn 182:
  Adding insn 180 to worklist
Processing use of (reg 24 cc) in insn 180:
  Adding insn 179 to worklist
Processing use of (reg 138 [ tn ]) in insn 179:
  Adding insn 23 to worklist
  Adding insn 48 to worklist
  Adding insn 230 to worklist
  Adding insn 232 to worklist
Processing use of (reg 24 cc) in insn 232:
  Adding insn 56 to worklist
Processing use of (reg 154 [ <variable>.significand ]) in insn 56:
  Adding insn 55 to worklist
Processing use of (reg 154 [ <variable>.significand ]) in insn 55:
  Adding insn 53 to worklist
Processing use of (reg 155 [ <variable>.significand+4 ]) in insn 55:
  Adding insn 54 to worklist
Processing use of (reg 143 [ vdn ]) in insn 54:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 143 [ vdn ]) in insn 53:
Processing use of (reg 24 cc) in insn 230:
  Adding insn 32 to worklist
Processing use of (reg 153) in insn 32:
  Adding insn 31 to worklist
Processing use of (subreg (reg 151) 4) in insn 31:
  Adding insn 29 to worklist
Processing use of (reg 153) in insn 31:
  Adding insn 30 to worklist
Processing use of (subreg (reg 151) 0) in insn 30:
Processing use of (reg 136 [ D.5286 ]) in insn 29:
  Adding insn 17 to worklist
Processing use of (reg 152) in insn 29:
  Adding insn 28 to worklist
Processing use of (reg 143 [ vdn ]) in insn 17:
Processing use of (reg 24 cc) in insn 177:
  Adding insn 176 to worklist
Processing use of (reg 137 [ tm ]) in insn 176:
  Adding insn 89 to worklist
  Adding insn 114 to worklist
  Adding insn 70 to worklist
  Adding insn 234 to worklist
  Adding insn 236 to worklist
Processing use of (reg 24 cc) in insn 236:
  Adding insn 122 to worklist
Processing use of (reg 164 [ <variable>.significand ]) in insn 122:
  Adding insn 121 to worklist
Processing use of (reg 164 [ <variable>.significand ]) in insn 121:
  Adding insn 119 to worklist
Processing use of (reg 165 [ <variable>.significand+4 ]) in insn 121:
  Adding insn 120 to worklist
Processing use of (reg 144 [ vdm ]) in insn 120:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 144 [ vdm ]) in insn 119:
Processing use of (reg 24 cc) in insn 234:
  Adding insn 98 to worklist
Processing use of (reg 163) in insn 98:
  Adding insn 97 to worklist
Processing use of (subreg (reg 161) 4) in insn 97:
  Adding insn 95 to worklist
Processing use of (reg 163) in insn 97:
  Adding insn 96 to worklist
Processing use of (subreg (reg 161) 0) in insn 96:
Processing use of (reg 134 [ D.5292 ]) in insn 95:
  Adding insn 83 to worklist
Processing use of (reg 162) in insn 95:
  Adding insn 94 to worklist
Processing use of (reg 144 [ vdm ]) in insn 83:
Processing use of (reg 144 [ vdm ]) in insn 70:
Processing use of (reg 0 r0) in insn 175:
  Adding insn 174 to worklist
Processing use of (reg 1 r1) in insn 175:
Processing use of (reg 2 r2) in insn 175:
Processing use of (reg 3 r3) in insn 175:
Processing use of (reg 142 [ vdd ]) in insn 175:
  Adding insn 2 to worklist
Processing use of (reg 142 [ vdd ]) in insn 175:
Processing use of (reg 142 [ vdd ]) in insn 175:
Processing use of (reg 142 [ vdd ]) in insn 175:
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 139 [ nan ]) in insn 174:
  Adding insn 158 to worklist
  Adding insn 163 to worklist
  Adding insn 137 to worklist
Processing use of (reg 139 [ nan ]) in insn 174:
Processing use of (reg 139 [ nan ]) in insn 174:
Processing use of (reg 139 [ nan ]) in insn 174:
Processing use of (reg 143 [ vdn ]) in insn 163:
Processing use of (reg 144 [ vdm ]) in insn 158:
Processing use of (reg 0 r0) in insn 206:
Processing use of (reg 139 [ nan ]) in insn 169:
Processing use of (reg 177) in insn 169:
  Adding insn 168 to worklist
Processing use of (reg 175 [ <variable>.significand ]) in insn 168:
  Adding insn 166 to worklist
Processing use of (reg 176) in insn 168:
  Adding insn 167 to worklist
Processing use of (reg 139 [ nan ]) in insn 166:
Processing use of (reg 24 cc) in insn 156:
  Adding insn 155 to worklist
Processing use of (reg 174) in insn 155:
  Adding insn 154 to worklist
Processing use of (reg 173) in insn 154:
  Adding insn 153 to worklist
Processing use of (subreg (reg 172) 0) in insn 153:
  Adding insn 152 to worklist
Processing use of (reg 169) in insn 152:
  Adding insn 147 to worklist
Processing use of (reg 171) in insn 152:
  Adding insn 150 to worklist
Processing use of (reg 24 cc) in insn 150:
  Adding insn 149 to worklist
Processing use of (reg 138 [ tn ]) in insn 149:
Processing use of (reg 24 cc) in insn 147:
  Adding insn 146 to worklist
Processing use of (reg 137 [ tm ]) in insn 146:
Processing use of (reg 24 cc) in insn 144:
  Adding insn 143 to worklist
Processing use of (reg 138 [ tn ]) in insn 143:
Processing use of (reg 24 cc) in insn 135:
  Adding insn 134 to worklist
Processing use of (reg 166) in insn 134:
  Adding insn 133 to worklist
Processing use of (reg 145 [ fpscr ]) in insn 133:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 24 cc) in insn 112:
  Adding insn 111 to worklist
Processing use of (reg 133 [ D.5293 ]) in insn 111:
  Adding insn 75 to worklist
Processing use of (reg 144 [ vdm ]) in insn 75:
Processing use of (reg 24 cc) in insn 87:
  Adding insn 86 to worklist
Processing use of (reg 160 [ D.5292 ]) in insn 86:
  Adding insn 85 to worklist
Processing use of (subreg (reg 134 [ D.5292 ]) 4) in insn 85:
Processing use of (reg 160 [ D.5292 ]) in insn 85:
  Adding insn 84 to worklist
Processing use of (subreg (reg 134 [ D.5292 ]) 0) in insn 84:
Processing use of (reg 24 cc) in insn 81:
  Adding insn 80 to worklist
Processing use of (reg 158 [ D.5293 ]) in insn 80:
  Adding insn 78 to worklist
Processing use of (reg 159) in insn 80:
  Adding insn 79 to worklist
Processing use of (reg 156) in insn 79:
  Adding insn 77 to worklist
Processing use of (subreg (reg 157) 0) in insn 77:
  Adding insn 76 to worklist
Processing use of (subreg (reg 133 [ D.5293 ]) 0) in insn 78:
Processing use of (reg 24 cc) in insn 68:
  Adding insn 67 to worklist
Processing use of (reg 144 [ vdm ]) in insn 67:
Processing use of (reg 24 cc) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 135 [ D.5287 ]) in insn 45:
  Adding insn 9 to worklist
Processing use of (reg 143 [ vdn ]) in insn 9:
Processing use of (reg 24 cc) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 150 [ D.5286 ]) in insn 20:
  Adding insn 19 to worklist
Processing use of (subreg (reg 136 [ D.5286 ]) 4) in insn 19:
Processing use of (reg 150 [ D.5286 ]) in insn 19:
  Adding insn 18 to worklist
Processing use of (subreg (reg 136 [ D.5286 ]) 0) in insn 18:
Processing use of (reg 24 cc) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 148 [ D.5287 ]) in insn 14:
  Adding insn 12 to worklist
Processing use of (reg 149) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 146) in insn 13:
  Adding insn 11 to worklist
Processing use of (subreg (reg 147) 0) in insn 11:
  Adding insn 10 to worklist
Processing use of (subreg (reg 135 [ D.5287 ]) 0) in insn 12:


vfp_propagate_nan

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,4u} r1={2d,2u} r2={2d,2u} r3={2d,2u} r11={1d,25u} r12={1d} r13={1d,25u} r14={1d,1u} r24={19d,19u} r25={1d,25u} r26={1d,24u} r133={1d,2u} r134={1d,3u,1d} r135={1d,2u} r136={1d,3u,1d} r137={5d,2u} r138={4d,3u} r139={3d,6u} r140={1d,1u} r142={1d,4u} r143={1d,5u} r144={1d,7u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={2d,2u} r151={1d,2u} r152={1d,1u} r153={2d,2u} r154={2d,2u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={2d,2u} r161={1d,2u} r162={1d,1u} r163={2d,2u} r164={2d,2u} r165={1d,1u} r166={1d,1u} r169={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u,1d} r176={1d,1u} r177={1d,1u} r181={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} 
;;    total ref usage 308{95d,210u,3e} in 104{104 regular + 0 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
0[0,3] 1[3,2] 2[5,2] 3[7,2] 11[9,1] 12[10,1] 13[11,1] 14[12,1] 24[13,19] 25[32,1] 26[33,1] 133[34,1] 134[35,1] 135[36,1] 136[37,1] 137[38,5] 138[43,4] 139[47,3] 140[50,1] 142[51,1] 143[52,1] 144[53,1] 145[54,1] 146[55,1] 147[56,1] 148[57,1] 149[58,1] 150[59,2] 151[61,1] 152[62,1] 153[63,2] 154[65,2] 155[67,1] 156[68,1] 157[69,1] 158[70,1] 159[71,1] 160[72,2] 161[74,1] 162[75,1] 163[76,2] 164[78,2] 165[80,1] 166[81,1] 169[82,1] 171[83,1] 172[84,1] 173[85,1] 174[86,1] 175[87,1] 176[88,1] 177[89,1] 181[90,1] 183[91,1] 184[92,1] 185[93,1] 186[94,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 135 142 143 144 145 146 147 148 149
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 135 142 143 144 145 146 147 148 149
;; live  kill	
;; rd  in  	(10)
2, 4, 6, 8, 9, 10, 11, 12, 32, 33
;; rd  gen 	(10)
31, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  kill	(28)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 51, 52, 53, 54, 55, 56, 57, 58

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/vfp/vfpdouble.c:209 (set (reg/v/f:SI 142 [ vdd ])
        (reg:SI 0 r0 [ vdd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ vdd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:209 (set (reg/v/f:SI 143 [ vdn ])
        (reg:SI 1 r1 [ vdn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ vdn ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:209 (set (reg/v/f:SI 144 [ vdm ])
        (reg:SI 2 r2 [ vdm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ vdm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:209 (set (reg/v:SI 145 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfp.h:330 (set (reg:SI 135 [ D.5287 ])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 143 [ vdn ]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 10 9 11 2 arch/arm/vfp/vfp.h:330 (set (reg:SI 147)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 12 2 arch/arm/vfp/vfp.h:330 (set (reg:HI 146)
        (subreg:HI (reg:SI 147) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 147)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 12 11 13 2 arch/arm/vfp/vfp.h:330 (set (reg:SI 148 [ D.5287 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 135 [ D.5287 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfp.h:330 (set (reg:SI 149)
        (sign_extend:SI (reg:HI 146))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 146)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 14 13 15 2 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 148 [ D.5287 ])
            (reg:SI 149))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 149)
        (expr_list:REG_DEAD (reg:SI 148 [ D.5287 ])
            (nil))))

(jump_insn 15 14 16 2 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 142 143 144 145
;; rd  out 	(20)
2, 4, 6, 8, 9, 10, 11, 12, 31, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  6 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(11){ }u16(13){ }u17(25){ }u18(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 136 150
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 24 [cc] 136 150
;; live  kill	
;; rd  in  	(20)
2, 4, 6, 8, 9, 10, 11, 12, 31, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  gen 	(3)
30, 37, 59
;; rd  kill	(22)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 59, 60

;; Pred edge  2 [28.0%]  (fallthru)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 3 arch/arm/vfp/vfp.h:331 (set (reg:DI 136 [ D.5286 ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 143 [ vdn ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 18 17 19 3 arch/arm/vfp/vfp.h:331 (set (reg:SI 150 [ D.5286 ])
        (subreg:SI (reg:DI 136 [ D.5286 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 19 18 20 3 arch/arm/vfp/vfp.h:331 (set (reg:SI 150 [ D.5286 ])
        (ior:SI (reg:SI 150 [ D.5286 ])
            (subreg:SI (reg:DI 136 [ D.5286 ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 20 19 21 3 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 150 [ D.5286 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 150 [ D.5286 ])
        (nil)))

(jump_insn 21 20 22 3 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 142 143 144 145
;; rd  out 	(22)
2, 4, 6, 8, 9, 10, 11, 12, 30, 32, 33, 36, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u25(11){ }u26(13){ }u27(25){ }u28(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 138
;; live  kill	
;; rd  in  	(22)
2, 4, 6, 8, 9, 10, 11, 12, 30, 32, 33, 36, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59
;; rd  gen 	(1)
46
;; rd  kill	(4)
43, 44, 45, 46

;; Pred edge  3 [50.0%]  (fallthru)
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 239 4 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 138 [ tn ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 239 23 240 4 (set (pc)
        (label_ref 65)) -1 (nil))
;; End of basic block 4 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(23)
2, 4, 6, 8, 9, 10, 11, 12, 30, 32, 33, 36, 37, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59


;; Succ edge  9 [100.0%] 

(barrier 240 239 26)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u29(11){ }u30(13){ }u31(25){ }u32(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 138 151 152 153
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 142 143 144 145
;; live  gen 	 24 [cc] 138 151 152 153
;; live  kill	
;; rd  in  	(22)
2, 4, 6, 8, 9, 10, 11, 12, 30, 32, 33, 36, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59
;; rd  gen 	(5)
29, 44, 61, 62, 63
;; rd  kill	(27)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 43, 44, 45, 46, 61, 62, 63, 64

;; Pred edge  3 [50.0%] 
(code_label 26 240 27 5 3 "" [1 uses])

(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 5 arch/arm/vfp/vfp.h:333 (set (reg:DI 152)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 29 28 30 5 arch/arm/vfp/vfp.h:333 (set (reg:DI 151)
        (and:DI (reg:DI 136 [ D.5286 ])
            (reg:DI 152))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 152)
        (expr_list:REG_DEAD (reg:DI 136 [ D.5286 ])
            (expr_list:REG_EQUAL (and:DI (reg:DI 136 [ D.5286 ])
                    (const_int 2305843009213693952 [0x2000000000000000]))
                (nil)))))

(insn 30 29 31 5 arch/arm/vfp/vfp.h:333 (set (reg:SI 153)
        (subreg:SI (reg:DI 151) 0)) 167 {*arm_movsi_insn} (nil))

(insn 31 30 32 5 arch/arm/vfp/vfp.h:333 (set (reg:SI 153)
        (ior:SI (reg:SI 153)
            (subreg:SI (reg:DI 151) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 151)
        (nil)))

(insn 32 31 230 5 arch/arm/vfp/vfp.h:333 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 153)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 153)
        (nil)))

(insn 230 32 241 5 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 138 [ tn ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 16 [0x10])
            (const_int 48 [0x30]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 241 230 242 5 (set (pc)
        (label_ref 65)) -1 (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(26)
2, 4, 6, 8, 9, 10, 11, 12, 29, 32, 33, 36, 37, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63


;; Succ edge  9 [100.0%] 

(barrier 242 241 43)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u41(11){ }u42(13){ }u43(25){ }u44(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 142 143 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(20)
2, 4, 6, 8, 9, 10, 11, 12, 31, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  gen 	(1)
28
;; rd  kill	(19)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

;; Pred edge  2 [72.0%] 
(code_label 43 242 44 6 2 "" [1 uses])

(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 6 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.5287 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.5287 ])
        (nil)))

(jump_insn 46 45 47 6 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; rd  out 	(20)
2, 4, 6, 8, 9, 10, 11, 12, 28, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58


;; Succ edge  8 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u47(11){ }u48(13){ }u49(25){ }u50(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 138
;; live  kill	
;; rd  in  	(20)
2, 4, 6, 8, 9, 10, 11, 12, 28, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  gen 	(1)
45
;; rd  kill	(4)
43, 44, 45, 46

;; Pred edge  6 [50.0%]  (fallthru)
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 243 7 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 138 [ tn ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 243 48 244 7 (set (pc)
        (label_ref 65)) -1 (nil))
;; End of basic block 7 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(21)
2, 4, 6, 8, 9, 10, 11, 12, 28, 32, 33, 36, 45, 51, 52, 53, 54, 55, 56, 57, 58


;; Succ edge  9 [100.0%] 

(barrier 244 243 51)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u51(11){ }u52(13){ }u53(25){ }u54(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 138 154 155
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 143 144 145
;; live  gen 	 24 [cc] 138 154 155
;; live  kill	
;; rd  in  	(20)
2, 4, 6, 8, 9, 10, 11, 12, 28, 32, 33, 36, 51, 52, 53, 54, 55, 56, 57, 58
;; rd  gen 	(4)
27, 43, 65, 67
;; rd  kill	(26)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 43, 44, 45, 46, 65, 66, 67

;; Pred edge  6 [50.0%] 
(code_label 51 244 52 8 6 "" [1 uses])

(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 8 arch/arm/vfp/vfp.h:338 (set (reg:SI 154 [ <variable>.significand ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 143 [ vdn ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 54 53 55 8 arch/arm/vfp/vfp.h:338 (set (reg:SI 155 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 143 [ vdn ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 56 8 arch/arm/vfp/vfp.h:338 (set (reg:SI 154 [ <variable>.significand ])
        (ior:SI (reg:SI 154 [ <variable>.significand ])
            (reg:SI 155 [ <variable>.significand+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 155 [ <variable>.significand+4 ])
        (nil)))

(insn 56 55 232 8 arch/arm/vfp/vfp.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 154 [ <variable>.significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 154 [ <variable>.significand ])
        (nil)))

(insn 232 56 65 8 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 138 [ tn ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(23)
2, 4, 6, 8, 9, 10, 11, 12, 27, 32, 33, 36, 43, 51, 52, 53, 54, 55, 56, 57, 58, 65, 67


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5 4 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u61(11){ }u62(13){ }u63(25){ }u64(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(34)
2, 4, 6, 8, 9, 10, 11, 12, 27, 28, 29, 30, 32, 33, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67
;; rd  gen 	(1)
26
;; rd  kill	(19)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 65 232 66 9 4 "" [3 uses])

(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 67 66 68 9 arch/arm/vfp/vfpdouble.c:215 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 144 [ vdm ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 68 67 69 9 arch/arm/vfp/vfpdouble.c:215 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(31)
2, 4, 6, 8, 9, 10, 11, 12, 26, 32, 33, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67


;; Succ edge  11 [85.0%] 
;; Succ edge  10 [15.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u67(11){ }u68(13){ }u69(25){ }u70(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 137
;; live  kill	
;; rd  in  	(31)
2, 4, 6, 8, 9, 10, 11, 12, 26, 32, 33, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67
;; rd  gen 	(1)
40
;; rd  kill	(5)
38, 39, 40, 41, 42

;; Pred edge  9 [15.0%]  (fallthru)
(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 245 10 arch/arm/vfp/vfpdouble.c:211 (set (reg/v:SI 137 [ tm ])
        (reg/v/f:SI 144 [ vdm ])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 245 70 246 10 (set (pc)
        (label_ref 131)) -1 (nil))
;; End of basic block 10 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(32)
2, 4, 6, 8, 9, 10, 11, 12, 26, 32, 33, 36, 37, 40, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67


;; Succ edge  18 [100.0%] 

(barrier 246 245 73)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u72(11){ }u73(13){ }u74(25){ }u75(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 133 156 157 158 159
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 24 [cc] 133 156 157 158 159
;; live  kill	
;; rd  in  	(31)
2, 4, 6, 8, 9, 10, 11, 12, 26, 32, 33, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67
;; rd  gen 	(6)
25, 34, 68, 69, 70, 71
;; rd  kill	(24)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 68, 69, 70, 71

;; Pred edge  9 [85.0%] 
(code_label 73 246 74 11 8 "" [1 uses])

(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 75 74 76 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 133 [ D.5293 ])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 144 [ vdm ]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 76 75 77 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 157)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 77 76 78 11 arch/arm/vfp/vfp.h:330 (set (reg:HI 156)
        (subreg:HI (reg:SI 157) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 157)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 78 77 79 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 158 [ D.5293 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 133 [ D.5293 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 79 78 80 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 159)
        (sign_extend:SI (reg:HI 156))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 156)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 80 79 81 11 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 158 [ D.5293 ])
            (reg:SI 159))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 159)
        (expr_list:REG_DEAD (reg:SI 158 [ D.5293 ])
            (nil))))

(jump_insn 81 80 82 11 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 11 -> ( 12 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138 142 143 144 145
;; rd  out 	(36)
2, 4, 6, 8, 9, 10, 11, 12, 25, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71


;; Succ edge  12 [28.0%]  (fallthru)
;; Succ edge  15 [72.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u83(11){ }u84(13){ }u85(25){ }u86(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 134 160
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 24 [cc] 134 160
;; live  kill	
;; rd  in  	(36)
2, 4, 6, 8, 9, 10, 11, 12, 25, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;; rd  gen 	(3)
24, 35, 72
;; rd  kill	(22)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 72, 73

;; Pred edge  11 [28.0%]  (fallthru)
(note 82 81 83 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 83 82 84 12 arch/arm/vfp/vfp.h:331 (set (reg:DI 134 [ D.5292 ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 144 [ vdm ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 84 83 85 12 arch/arm/vfp/vfp.h:331 (set (reg:SI 160 [ D.5292 ])
        (subreg:SI (reg:DI 134 [ D.5292 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 85 84 86 12 arch/arm/vfp/vfp.h:331 (set (reg:SI 160 [ D.5292 ])
        (ior:SI (reg:SI 160 [ D.5292 ])
            (subreg:SI (reg:DI 134 [ D.5292 ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 86 85 87 12 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 160 [ D.5292 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 160 [ D.5292 ])
        (nil)))

(jump_insn 87 86 88 12 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 142 143 144 145
;; rd  out 	(38)
2, 4, 6, 8, 9, 10, 11, 12, 24, 32, 33, 34, 35, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72


;; Succ edge  13 [50.0%]  (fallthru)
;; Succ edge  14 [50.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u93(11){ }u94(13){ }u95(25){ }u96(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 137
;; live  kill	
;; rd  in  	(38)
2, 4, 6, 8, 9, 10, 11, 12, 24, 32, 33, 34, 35, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72
;; rd  gen 	(1)
42
;; rd  kill	(5)
38, 39, 40, 41, 42

;; Pred edge  12 [50.0%]  (fallthru)
(note 88 87 89 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 247 13 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 137 [ tm ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 247 89 248 13 (set (pc)
        (label_ref 131)) -1 (nil))
;; End of basic block 13 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(39)
2, 4, 6, 8, 9, 10, 11, 12, 24, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72


;; Succ edge  18 [100.0%] 

(barrier 248 247 92)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u97(11){ }u98(13){ }u99(25){ }u100(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 137 161 162 163
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 142 143 144 145
;; live  gen 	 24 [cc] 137 161 162 163
;; live  kill	
;; rd  in  	(38)
2, 4, 6, 8, 9, 10, 11, 12, 24, 32, 33, 34, 35, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72
;; rd  gen 	(5)
23, 39, 74, 75, 76
;; rd  kill	(28)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 74, 75, 76, 77

;; Pred edge  12 [50.0%] 
(code_label 92 248 93 14 11 "" [1 uses])

(note 93 92 94 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 14 arch/arm/vfp/vfp.h:333 (set (reg:DI 162)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 95 94 96 14 arch/arm/vfp/vfp.h:333 (set (reg:DI 161)
        (and:DI (reg:DI 134 [ D.5292 ])
            (reg:DI 162))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 162)
        (expr_list:REG_DEAD (reg:DI 134 [ D.5292 ])
            (expr_list:REG_EQUAL (and:DI (reg:DI 134 [ D.5292 ])
                    (const_int 2305843009213693952 [0x2000000000000000]))
                (nil)))))

(insn 96 95 97 14 arch/arm/vfp/vfp.h:333 (set (reg:SI 163)
        (subreg:SI (reg:DI 161) 0)) 167 {*arm_movsi_insn} (nil))

(insn 97 96 98 14 arch/arm/vfp/vfp.h:333 (set (reg:SI 163)
        (ior:SI (reg:SI 163)
            (subreg:SI (reg:DI 161) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 161)
        (nil)))

(insn 98 97 234 14 arch/arm/vfp/vfp.h:333 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 163)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 163)
        (nil)))

(insn 234 98 249 14 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 137 [ tm ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 16 [0x10])
            (const_int 48 [0x30]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 249 234 250 14 (set (pc)
        (label_ref 131)) -1 (nil))
;; End of basic block 14 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(42)
2, 4, 6, 8, 9, 10, 11, 12, 23, 32, 33, 34, 35, 36, 37, 39, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76


;; Succ edge  18 [100.0%] 

(barrier 250 249 109)

;; Start of basic block ( 11) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u109(11){ }u110(13){ }u111(25){ }u112(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 138 142 143 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(36)
2, 4, 6, 8, 9, 10, 11, 12, 25, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;; rd  gen 	(1)
22
;; rd  kill	(19)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

;; Pred edge  11 [72.0%] 
(code_label 109 250 110 15 10 "" [1 uses])

(note 110 109 111 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 112 15 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.5293 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.5293 ])
        (nil)))

(jump_insn 112 111 113 15 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 15 -> ( 17 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; rd  out 	(36)
2, 4, 6, 8, 9, 10, 11, 12, 22, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71


;; Succ edge  17 [50.0%] 
;; Succ edge  16 [50.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u115(11){ }u116(13){ }u117(25){ }u118(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 137
;; live  kill	
;; rd  in  	(36)
2, 4, 6, 8, 9, 10, 11, 12, 22, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;; rd  gen 	(1)
41
;; rd  kill	(5)
38, 39, 40, 41, 42

;; Pred edge  15 [50.0%]  (fallthru)
(note 113 112 114 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 114 113 251 16 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 137 [ tm ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 251 114 252 16 (set (pc)
        (label_ref 131)) -1 (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(37)
2, 4, 6, 8, 9, 10, 11, 12, 22, 32, 33, 34, 36, 37, 41, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71


;; Succ edge  18 [100.0%] 

(barrier 252 251 117)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u119(11){ }u120(13){ }u121(25){ }u122(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 137 164 165
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 142 143 144 145
;; live  gen 	 24 [cc] 137 164 165
;; live  kill	
;; rd  in  	(36)
2, 4, 6, 8, 9, 10, 11, 12, 22, 32, 33, 34, 36, 37, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71
;; rd  gen 	(4)
21, 38, 78, 80
;; rd  kill	(27)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 78, 79, 80

;; Pred edge  15 [50.0%] 
(code_label 117 252 118 17 13 "" [1 uses])

(note 118 117 119 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 119 118 120 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 164 [ <variable>.significand ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 144 [ vdm ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 120 119 121 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 165 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 144 [ vdm ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 121 120 122 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 164 [ <variable>.significand ])
        (ior:SI (reg:SI 164 [ <variable>.significand ])
            (reg:SI 165 [ <variable>.significand+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 165 [ <variable>.significand+4 ])
        (nil)))

(insn 122 121 236 17 arch/arm/vfp/vfp.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 164 [ <variable>.significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 164 [ <variable>.significand ])
        (nil)))

(insn 236 122 131 17 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 137 [ tm ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 17 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; rd  out 	(39)
2, 4, 6, 8, 9, 10, 11, 12, 21, 32, 33, 34, 36, 37, 38, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 78, 80


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 17 14 10 13 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u129(11){ }u130(13){ }u131(25){ }u132(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 24 [cc] 166
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144 145
;; live  gen 	 24 [cc] 166
;; live  kill	
;; rd  in  	(52)
2, 4, 6, 8, 9, 10, 11, 12, 21, 22, 23, 24, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80
;; rd  gen 	(2)
20, 81
;; rd  kill	(20)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 81

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
;; Pred edge  10 [100.0%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  16 [100.0%] 
(code_label 131 236 132 18 9 "" [4 uses])

(note 132 131 133 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 133 132 134 18 arch/arm/vfp/vfpdouble.c:218 (set (reg:SI 166)
        (and:SI (reg/v:SI 145 [ fpscr ])
            (const_int 33554432 [0x2000000]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ fpscr ])
        (nil)))

(insn 134 133 135 18 arch/arm/vfp/vfpdouble.c:218 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 166)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 166)
        (nil)))

(jump_insn 135 134 136 18 arch/arm/vfp/vfpdouble.c:218 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 141)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; rd  out 	(49)
2, 4, 6, 8, 9, 10, 11, 12, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  20 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u136(11){ }u137(13){ }u138(25){ }u139(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142
;; live  gen 	 139
;; live  kill	
;; rd  in  	(49)
2, 4, 6, 8, 9, 10, 11, 12, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81
;; rd  gen 	(1)
47
;; rd  kill	(3)
47, 48, 49

;; Pred edge  18 [50.0%]  (fallthru)
(note 136 135 137 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 137 136 253 19 arch/arm/vfp/vfpdouble.c:222 (set (reg/v/f:SI 139 [ nan ])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(jump_insn 253 137 254 19 (set (pc)
        (label_ref 170)) -1 (nil))
;; End of basic block 19 -> ( 25)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; rd  out 	(50)
2, 4, 6, 8, 9, 10, 11, 12, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81


;; Succ edge  25 [100.0%] 

(barrier 254 253 141)

;; Start of basic block ( 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u140(11){ }u141(13){ }u142(25){ }u143(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(49)
2, 4, 6, 8, 9, 10, 11, 12, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81
;; rd  gen 	(1)
19
;; rd  kill	(19)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31

;; Pred edge  18 [50.0%] 
(code_label 141 254 142 20 15 "" [1 uses])

(note 142 141 143 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 143 142 144 20 arch/arm/vfp/vfpdouble.c:229 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ tn ])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 144 143 145 20 arch/arm/vfp/vfpdouble.c:229 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 161)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 20 -> ( 23 21)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; rd  out 	(49)
2, 4, 6, 8, 9, 10, 11, 12, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81


;; Succ edge  23 [28.0%] 
;; Succ edge  21 [72.0%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u146(11){ }u147(13){ }u148(25){ }u149(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; lr  def 	 24 [cc] 169 171 172 173 174
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  gen 	 24 [cc] 169 171 172 173 174
;; live  kill	
;; rd  in  	(49)
2, 4, 6, 8, 9, 10, 11, 12, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81
;; rd  gen 	(6)
16, 82, 83, 84, 85, 86
;; rd  kill	(24)
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 82, 83, 84, 85, 86

;; Pred edge  20 [72.0%]  (fallthru)
(note 145 144 146 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 146 145 147 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 137 [ tm ])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (nil))

(insn 147 146 149 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg:SI 169)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 149 147 150 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ tn ])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (nil))

(insn 150 149 152 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg:SI 171)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 152 150 153 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg:SI 172)
        (and:SI (reg:SI 169)
            (reg:SI 171))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 171)
        (expr_list:REG_DEAD (reg:SI 169)
            (nil))))

(insn 153 152 154 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg:QI 173)
        (subreg:QI (reg:SI 172) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 172)
        (nil)))

(insn 154 153 155 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg:SI 174)
        (zero_extend:SI (reg:QI 173))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 173)
        (nil)))

(insn 155 154 156 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 174)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 174)
        (nil)))

(jump_insn 156 155 157 21 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 161)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 21 -> ( 23 22)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143 144
;; rd  out 	(54)
2, 4, 6, 8, 9, 10, 11, 12, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86


;; Succ edge  23 [50.0%] 
;; Succ edge  22 [50.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u160(11){ }u161(13){ }u162(25){ }u163(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 144
;; live  gen 	 139
;; live  kill	
;; rd  in  	(54)
2, 4, 6, 8, 9, 10, 11, 12, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86
;; rd  gen 	(1)
49
;; rd  kill	(3)
47, 48, 49

;; Pred edge  21 [50.0%]  (fallthru)
(note 157 156 158 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 158 157 255 22 arch/arm/vfp/vfpdouble.c:229 discrim 2 (set (reg/v/f:SI 139 [ nan ])
        (reg/v/f:SI 144 [ vdm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 144 [ vdm ])
        (nil)))

(jump_insn 255 158 256 22 (set (pc)
        (label_ref 164)) -1 (nil))
;; End of basic block 22 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; rd  out 	(55)
2, 4, 6, 8, 9, 10, 11, 12, 16, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86


;; Succ edge  24 [100.0%] 

(barrier 256 255 161)

;; Start of basic block ( 21 20) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u165(11){ }u166(13){ }u167(25){ }u168(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 142 143
;; live  gen 	 139
;; live  kill	
;; rd  in  	(55)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86
;; rd  gen 	(1)
48
;; rd  kill	(3)
47, 48, 49

;; Pred edge  21 [50.0%] 
;; Pred edge  20 [28.0%] 
(code_label 161 256 162 23 17 "" [2 uses])

(note 162 161 163 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 163 162 164 23 arch/arm/vfp/vfpdouble.c:230 (set (reg/v/f:SI 139 [ nan ])
        (reg/v/f:SI 143 [ vdn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 143 [ vdn ])
        (nil)))
;; End of basic block 23 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; rd  out 	(56)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 23 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u170(11){ }u171(13){ }u172(25){ }u173(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 175 176 177
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  gen 	 175 176 177
;; live  kill	
;; rd  in  	(57)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86
;; rd  gen 	(3)
87, 88, 89
;; rd  kill	(3)
87, 88, 89

;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  22 [100.0%] 
(code_label 164 163 165 24 18 "" [1 uses])

(note 165 164 166 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 166 165 167 24 arch/arm/vfp/vfpdouble.c:236 (set (reg:DI 175 [ <variable>.significand ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 139 [ nan ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 167 166 168 24 arch/arm/vfp/vfpdouble.c:236 (set (reg:DI 176)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 168 167 169 24 arch/arm/vfp/vfpdouble.c:236 (set (reg:DI 177)
        (ior:DI (reg:DI 175 [ <variable>.significand ])
            (reg:DI 176))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 176)
        (expr_list:REG_DEAD (reg:DI 175 [ <variable>.significand ])
            (expr_list:REG_EQUAL (ior:DI (reg:DI 175 [ <variable>.significand ])
                    (const_int 2305843009213693952 [0x2000000000000000]))
                (nil)))))

(insn 169 168 170 24 arch/arm/vfp/vfpdouble.c:236 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 139 [ nan ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 177)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 177)
        (nil)))
;; End of basic block 24 -> ( 25)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; rd  out 	(60)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89


;; Succ edge  25 [100.0%]  (fallthru)

;; Start of basic block ( 24 19) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u180(11){ }u181(13){ }u182(25){ }u183(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 142
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 140 181 183 184 185 186
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 142
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 140 181 183 184 185 186
;; live  kill	
;; rd  in  	(62)
2, 4, 6, 8, 9, 10, 11, 12, 16, 19, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89
;; rd  gen 	(11)
0, 3, 5, 7, 13, 50, 90, 91, 92, 93, 94
;; rd  kill	(34)
0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 50, 90, 91, 92, 93, 94

;; Pred edge  24 [100.0%]  (fallthru)
;; Pred edge  19 [100.0%] 
(code_label 170 169 171 25 16 "" [1 uses])

(note 171 170 174 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 174 171 175 25 arch/arm/vfp/vfpdouble.c:239 (parallel [
            (set (reg:SI 0 r0)
                (mem/s:SI (reg/v/f:SI 139 [ nan ]) [0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s:SI (plus:SI (reg/v/f:SI 139 [ nan ])
                        (const_int 4 [0x4])) [0 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s:SI (plus:SI (reg/v/f:SI 139 [ nan ])
                        (const_int 8 [0x8])) [0 S4 A64]))
            (set (reg:SI 3 r3)
                (mem/s:SI (plus:SI (reg/v/f:SI 139 [ nan ])
                        (const_int 12 [0xc])) [0 S4 A32]))
        ]) 188 {*ldmsi4} (expr_list:REG_DEAD (reg/v/f:SI 139 [ nan ])
        (nil)))

(insn 175 174 176 25 arch/arm/vfp/vfpdouble.c:239 (parallel [
            (set (mem/s:SI (reg/v/f:SI 142 [ vdd ]) [0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 142 [ vdd ])
                        (const_int 4 [0x4])) [0 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 142 [ vdd ])
                        (const_int 8 [0x8])) [0 S4 A64])
                (reg:SI 2 r2))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 142 [ vdd ])
                        (const_int 12 [0xc])) [0 S4 A32])
                (reg:SI 3 r3))
        ]) 195 {*stmsi4} (expr_list:REG_DEAD (reg/v/f:SI 142 [ vdd ])
        (expr_list:REG_DEAD (reg:SI 3 r3)
            (expr_list:REG_DEAD (reg:SI 2 r2)
                (expr_list:REG_DEAD (reg:SI 1 r1)
                    (expr_list:REG_DEAD (reg:SI 0 r0)
                        (nil)))))))

(insn 176 175 177 25 arch/arm/vfp/vfpdouble.c:244 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 137 [ tm ])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ tm ])
        (nil)))

(insn 177 176 179 25 arch/arm/vfp/vfpdouble.c:244 (set (reg:SI 181)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 179 177 180 25 arch/arm/vfp/vfpdouble.c:244 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ tn ])
            (const_int 48 [0x30]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ tn ])
        (nil)))

(insn 180 179 182 25 arch/arm/vfp/vfpdouble.c:244 (set (reg:SI 183)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 182 180 183 25 arch/arm/vfp/vfpdouble.c:244 (set (reg:SI 184)
        (ior:SI (reg:SI 181)
            (reg:SI 183))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 183)
        (expr_list:REG_DEAD (reg:SI 181)
            (nil))))

(insn 183 182 184 25 arch/arm/vfp/vfpdouble.c:244 (set (reg:QI 185)
        (subreg:QI (reg:SI 184) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 184)
        (nil)))

(insn 184 183 185 25 arch/arm/vfp/vfpdouble.c:244 (set (reg:SI 186)
        (zero_extend:SI (reg:QI 185))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 185)
        (nil)))

(insn 185 184 238 25 arch/arm/vfp/vfpdouble.c:244 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 186)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 186)
        (nil)))

(insn 238 185 200 25 arch/arm/vfp/vfpdouble.c:244 discrim 2 (set (reg:SI 140 [ D.4202 ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 1 [0x1])
            (const_int 256 [0x100]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 200 238 206 25 arch/arm/vfp/vfpdouble.c:245 (set (reg/i:SI 0 r0)
        (reg:SI 140 [ D.4202 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 140 [ D.4202 ])
        (nil)))

(insn 206 200 0 25 arch/arm/vfp/vfpdouble.c:245 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 25 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(66)
0, 3, 5, 7, 9, 10, 11, 12, 13, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_multiply (vfp_double_multiply)[0:173]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 39 count 51 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 39 count 52 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 39 count 52 (  1.9)


vfp_double_multiply

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 24[cc]
;;  ref usage 	r0={5d,5u} r1={4d,3u} r2={4d,3u} r3={4d,3u} r11={1d,26u} r12={2d} r13={1d,27u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={18d,13u} r25={1d,26u} r26={1d,25u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} r134={1d,4u} r135={3d,6u} r136={1d,1u} r137={1d,4u} r140={1d,2u} r141={1d,2u} r142={1d,2u} r143={1d,1u} r144={1d,3u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={2d,1u} r153={4d,1u} r155={1d,12u} r156={2d,9u} r157={2d,12u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r162={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,2u} r169={1d,1u} r170={2d,2u} r171={1d,1u} r174={1d,1u} r176={2d,2u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,2u} r181={1d,1u} r182={2d,2u} r183={1d,4u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,2u} r192={1d,1u} r193={2d,4u} r196={1d,1u} r199={1d,1u,1d} r201={1d,1u} r220={3d,3u} r221={2d,1u} r222={1d,1u} r223={2d,1u} r224={2d,2u} r225={1d,1u} r227={1d,2u} r228={1d,2u} r229={1d,2u} r230={1d,2u} 
;;    total ref usage 485{228d,256u,1e} in 122{121 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151
0[0,5] 1[5,4] 2[9,4] 3[13,4] 11[17,1] 12[18,2] 13[20,1] 14[21,1] 15[22,1] 16[23,1] 17[24,1] 18[25,1] 19[26,1] 20[27,1] 21[28,1] 22[29,1] 23[30,1] 24[31,18] 25[49,1] 26[50,1] 27[51,1] 28[52,1] 29[53,1] 30[54,1] 31[55,1] 32[56,1] 33[57,1] 34[58,1] 35[59,1] 36[60,1] 37[61,1] 38[62,1] 39[63,1] 40[64,1] 41[65,1] 42[66,1] 43[67,1] 44[68,1] 45[69,1] 46[70,1] 47[71,1] 48[72,1] 49[73,1] 50[74,1] 51[75,1] 52[76,1] 53[77,1] 54[78,1] 55[79,1] 56[80,1] 57[81,1] 58[82,1] 59[83,1] 60[84,1] 61[85,1] 62[86,1] 63[87,1] 64[88,1] 65[89,1] 66[90,1] 67[91,1] 68[92,1] 69[93,1] 70[94,1] 71[95,1] 72[96,1] 73[97,1] 74[98,1] 75[99,1] 76[100,1] 77[101,1] 78[102,1] 79[103,1] 80[104,1] 81[105,1] 82[106,1] 83[107,1] 84[108,1] 85[109,1] 86[110,1] 87[111,1] 88[112,1] 89[113,1] 90[114,1] 91[115,1] 92[116,1] 93[117,1] 94[118,1] 95[119,1] 96[120,1] 97[121,1] 98[122,1] 99[123,1] 100[124,1] 101[125,1] 102[126,1] 103[127,1] 104[128,1] 105[129,1] 106[130,1] 107[131,1] 108[132,1] 109[133,1] 110[134,1] 111[135,1] 112[136,1] 113[137,1] 114[138,1] 115[139,1] 116[140,1] 117[141,1] 118[142,1] 119[143,1] 120[144,1] 121[145,1] 122[146,1] 123[147,1] 124[148,1] 125[149,1] 126[150,1] 127[151,1] 133[152,1] 134[153,1] 135[154,3] 136[157,1] 137[158,1] 140[159,1] 141[160,1] 142[161,1] 143[162,1] 144[163,1] 145[164,1] 146[165,1] 147[166,1] 148[167,2] 153[169,4] 155[173,1] 156[174,2] 157[176,2] 158[178,1] 159[179,1] 160[180,1] 162[181,1] 164[182,1] 165[183,1] 166[184,1] 167[185,1] 168[186,1] 169[187,1] 170[188,2] 171[190,1] 174[191,1] 176[192,2] 177[194,1] 178[195,1] 179[196,1] 180[197,1] 181[198,1] 182[199,2] 183[201,1] 187[202,1] 188[203,1] 189[204,1] 190[205,1] 191[206,1] 192[207,1] 193[208,2] 196[210,1] 199[211,1] 201[212,1] 220[213,3] 221[216,2] 222[218,1] 223[219,2] 224[221,2] 225[223,1] 227[224,1] 228[225,1] 229[226,1] 230[227,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d4(0){ }d8(1){ }d12(2){ }d16(3){ }d17(11){ }d19(12){ }d20(13){ }d21(14){ }d49(25){ }d50(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
4, 8, 12, 16, 17, 19, 20, 21, 49, 50
;; rd  kill	(24)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
4, 8, 12, 16, 17, 19, 20, 21, 49, 50

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d17(bb 0 insn -1) }u1(13){ d20(bb 0 insn -1) }u2(25){ d49(bb 0 insn -1) }u3(26){ d50(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 155 156 157 158 159 160
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 155 156 157 158 159 160
;; live  kill	
;; rd  in  	(10)
4, 8, 12, 16, 17, 19, 20, 21, 49, 50
;; rd  gen 	(7)
48, 173, 175, 177, 178, 179, 180
;; rd  kill	(26)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 173, 174, 175, 176, 177, 178, 179, 180
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; rd  out 	(17)
4, 8, 12, 16, 17, 19, 20, 21, 48, 49, 50, 173, 175, 177, 178, 179, 180
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d4(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d8(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d12(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d16(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 9
;;      reg 156 { d175(bb 2 insn 3) }
;;   UD chains for insn luid 5 uid 10
;;      reg 157 { d177(bb 2 insn 4) }
;;   UD chains for insn luid 6 uid 11
;;      reg 159 { d179(bb 2 insn 9) }
;;      reg 160 { d180(bb 2 insn 10) }
;;   UD chains for insn luid 7 uid 12
;;      reg 24 { d48(bb 2 insn 11) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u13(11){ d17(bb 0 insn -1) }u14(13){ d20(bb 0 insn -1) }u15(25){ d49(bb 0 insn -1) }u16(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 157
;; lr  def 	 133 156 157
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  gen 	 133 156 157
;; live  kill	
;; rd  in  	(17)
4, 8, 12, 16, 17, 19, 20, 21, 48, 49, 50, 173, 175, 177, 178, 179, 180
;; rd  gen 	(3)
152, 174, 176
;; rd  kill	(5)
152, 174, 175, 176, 177
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; rd  out 	(18)
4, 8, 12, 16, 17, 19, 20, 21, 48, 49, 50, 152, 173, 174, 176, 178, 179, 180
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 14
;;      reg 156 { d175(bb 2 insn 3) }
;;   UD chains for insn luid 1 uid 15
;;      reg 157 { d177(bb 2 insn 4) }
;;   UD chains for insn luid 2 uid 16
;;      reg 133 { d152(bb 3 insn 14) }

( 2 3 )->[4]->( 5 12 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u20(11){ d17(bb 0 insn -1) }u21(13){ d20(bb 0 insn -1) }u22(25){ d49(bb 0 insn -1) }u23(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 156 157
;; lr  def 	 24 [cc] 142 162 164 165 166 167 168 169
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  gen 	 24 [cc] 142 162 164 165 166 167 168 169
;; live  kill	
;; rd  in  	(20)
4, 8, 12, 16, 17, 19, 20, 21, 48, 49, 50, 152, 173, 174, 175, 176, 177, 178, 179, 180
;; rd  gen 	(9)
47, 161, 181, 182, 183, 184, 185, 186, 187
;; rd  kill	(26)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 161, 181, 182, 183, 184, 185, 186, 187
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 155 156 157 158 168
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 155 156 157 158 168
;; rd  out 	(28)
4, 8, 12, 16, 17, 19, 20, 21, 47, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 19
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 1 uid 21
;;      reg 156 { d175(bb 2 insn 3) d174(bb 3 insn 15) }
;;   UD chains for insn luid 2 uid 23
;;      reg 162 { d181(bb 4 insn 19) }
;;      reg 164 { d182(bb 4 insn 21) }
;;   UD chains for insn luid 3 uid 24
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 165 { d183(bb 4 insn 23) }
;;   UD chains for insn luid 4 uid 25
;;      reg 156 { d175(bb 2 insn 3) d174(bb 3 insn 15) }
;;   UD chains for insn luid 6 uid 27
;;      reg 167 { d185(bb 4 insn 26) }
;;   UD chains for insn luid 7 uid 28
;;      reg 142 { d161(bb 4 insn 25) }
;;   UD chains for insn luid 8 uid 29
;;      reg 166 { d184(bb 4 insn 27) }
;;   UD chains for insn luid 9 uid 30
;;      reg 168 { d186(bb 4 insn 28) }
;;      reg 169 { d187(bb 4 insn 29) }
;;   UD chains for insn luid 10 uid 31
;;      reg 24 { d47(bb 4 insn 30) }

( 4 )->[5]->( 8 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u37(11){ d17(bb 0 insn -1) }u38(13){ d20(bb 0 insn -1) }u39(25){ d49(bb 0 insn -1) }u40(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156
;; lr  def 	 24 [cc] 170 171
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; live  gen 	 24 [cc] 170 171
;; live  kill	
;; rd  in  	(28)
4, 8, 12, 16, 17, 19, 20, 21, 47, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187
;; rd  gen 	(3)
46, 188, 190
;; rd  kill	(21)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 188, 189, 190
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; rd  out 	(30)
4, 8, 12, 16, 17, 19, 20, 21, 46, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 33
;;      reg 156 { d175(bb 2 insn 3) d174(bb 3 insn 15) }
;;   UD chains for insn luid 1 uid 34
;;      reg 156 { d175(bb 2 insn 3) d174(bb 3 insn 15) }
;;   UD chains for insn luid 2 uid 35
;;      reg 170 { d189(bb 5 insn 33) }
;;      reg 171 { d190(bb 5 insn 34) }
;;   UD chains for insn luid 3 uid 36
;;      reg 170 { d188(bb 5 insn 35) }
;;   UD chains for insn luid 4 uid 37
;;      reg 24 { d46(bb 5 insn 36) }

( 5 )->[6]->( 7 9 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u47(11){ d17(bb 0 insn -1) }u48(13){ d20(bb 0 insn -1) }u49(25){ d49(bb 0 insn -1) }u50(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157 168
;; lr  def 	 24 [cc] 141 174
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; live  gen 	 24 [cc] 141 174
;; live  kill	
;; rd  in  	(30)
4, 8, 12, 16, 17, 19, 20, 21, 46, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190
;; rd  gen 	(3)
31, 160, 191
;; rd  kill	(20)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 160, 191
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; rd  out 	(32)
4, 8, 12, 16, 17, 19, 20, 21, 31, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 39
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 1 uid 42
;;      reg 141 { d160(bb 6 insn 39) }
;;   UD chains for insn luid 2 uid 44
;;      reg 168 { d186(bb 4 insn 28) }
;;      reg 174 { d191(bb 6 insn 42) }
;;   UD chains for insn luid 3 uid 45
;;      reg 24 { d31(bb 6 insn 44) }

( 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u56(11){ d17(bb 0 insn -1) }u57(13){ d20(bb 0 insn -1) }u58(25){ d49(bb 0 insn -1) }u59(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157
;; lr  def 	 24 [cc] 176 177
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; live  gen 	 24 [cc] 176 177
;; live  kill	
;; rd  in  	(32)
4, 8, 12, 16, 17, 19, 20, 21, 31, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191
;; rd  gen 	(3)
45, 192, 194
;; rd  kill	(21)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 192, 193, 194
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; rd  out 	(34)
4, 8, 12, 16, 17, 19, 20, 21, 45, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 47
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 1 uid 48
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 2 uid 49
;;      reg 176 { d193(bb 7 insn 47) }
;;      reg 177 { d194(bb 7 insn 48) }
;;   UD chains for insn luid 3 uid 50
;;      reg 176 { d192(bb 7 insn 49) }
;;   UD chains for insn luid 4 uid 51
;;      reg 24 { d45(bb 7 insn 50) }

( 5 7 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u66(11){ d17(bb 0 insn -1) }u67(13){ d20(bb 0 insn -1) }u68(25){ d49(bb 0 insn -1) }u69(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 156 157 158
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; rd  in  	(35)
4, 8, 12, 16, 17, 19, 20, 21, 45, 46, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194
;; rd  gen 	(1)
2
;; rd  kill	(5)
0, 1, 2, 3, 4
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(35)
2, 8, 12, 16, 17, 19, 20, 21, 45, 46, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 54
;;      reg 155 { d173(bb 2 insn 2) }
;;   UD chains for insn luid 1 uid 55
;;      reg 156 { d175(bb 2 insn 3) d174(bb 3 insn 15) }
;;   UD chains for insn luid 2 uid 56
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 3 uid 57
;;      reg 158 { d178(bb 2 insn 5) }
;;   UD chains for insn luid 4 uid 58
;;      reg 13 { d20(bb 0 insn -1) }
;;      reg 0 { d3(bb 8 insn 54) }
;;      reg 1 { d7(bb 8 insn 55) }
;;      reg 2 { d11(bb 8 insn 56) }
;;      reg 3 { d15(bb 8 insn 57) }

( 6 7 )->[9]->( 10 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u79(11){ d17(bb 0 insn -1) }u80(13){ d20(bb 0 insn -1) }u81(25){ d49(bb 0 insn -1) }u82(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 157
;; lr  def 	 24 [cc] 178 179 180 181 182
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 157
;; live  gen 	 24 [cc] 178 179 180 181 182
;; live  kill	
;; rd  in  	(35)
4, 8, 12, 16, 17, 19, 20, 21, 31, 45, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194
;; rd  gen 	(6)
43, 195, 196, 197, 198, 199
;; rd  kill	(24)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 195, 196, 197, 198, 199, 200
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; rd  out 	(39)
4, 8, 12, 16, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 64
;;      reg 141 { d160(bb 6 insn 39) }
;;   UD chains for insn luid 1 uid 65
;;      reg 179 { d196(bb 9 insn 64) }
;;   UD chains for insn luid 2 uid 66
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 3 uid 67
;;      reg 178 { d195(bb 9 insn 65) }
;;      reg 181 { d198(bb 9 insn 66) }
;;   UD chains for insn luid 4 uid 68
;;      reg 180 { d197(bb 9 insn 67) }
;;   UD chains for insn luid 5 uid 69
;;      reg 180 { d197(bb 9 insn 67) }
;;      reg 182 { d200(bb 9 insn 68) }
;;   UD chains for insn luid 6 uid 70
;;      reg 182 { d199(bb 9 insn 69) }
;;   UD chains for insn luid 7 uid 71
;;      reg 24 { d43(bb 9 insn 70) }

( 9 )->[10]->( 26 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u93(11){ d17(bb 0 insn -1) }u94(13){ d20(bb 0 insn -1) }u95(25){ d49(bb 0 insn -1) }u96(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 153 183
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 153 183
;; live  kill	
;; rd  in  	(39)
4, 8, 12, 16, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199
;; rd  gen 	(6)
1, 5, 9, 13, 172, 201
;; rd  kill	(22)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 169, 170, 171, 172, 201
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; rd  out 	(41)
1, 5, 9, 13, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 76
;;      reg 183 { d201(bb 10 insn 73) }
;;      reg 183 { d201(bb 10 insn 73) }
;;      reg 183 { d201(bb 10 insn 73) }
;;      reg 183 { d201(bb 10 insn 73) }
;;   UD chains for insn luid 2 uid 77
;;      reg 0 { d1(bb 10 insn 76) }
;;      reg 1 { d5(bb 10 insn 76) }
;;      reg 2 { d9(bb 10 insn 76) }
;;      reg 3 { d13(bb 10 insn 76) }
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 155 { d173(bb 2 insn 2) }

( 9 )->[11]->( 26 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u109(11){ d17(bb 0 insn -1) }u110(13){ d20(bb 0 insn -1) }u111(25){ d49(bb 0 insn -1) }u112(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 153 187 188
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; live  gen 	 153 187 188
;; live  kill	
;; rd  in  	(39)
4, 8, 12, 16, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199
;; rd  gen 	(3)
171, 202, 203
;; rd  kill	(6)
169, 170, 171, 172, 202, 203
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; rd  out 	(42)
4, 8, 12, 16, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 202, 203
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 85
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 187 { d202(bb 11 insn 83) }
;;   UD chains for insn luid 3 uid 87
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 188 { d203(bb 11 insn 86) }

( 4 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u117(11){ d17(bb 0 insn -1) }u118(13){ d20(bb 0 insn -1) }u119(25){ d49(bb 0 insn -1) }u120(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 155 156 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157
;; lr  def 	 24 [cc] 140 189 190 191 192 193
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 155 156 157
;; live  gen 	 24 [cc] 140 189 190 191 192 193
;; live  kill	
;; rd  in  	(28)
4, 8, 12, 16, 17, 19, 20, 21, 47, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187
;; rd  gen 	(7)
42, 159, 204, 205, 206, 207, 208
;; rd  kill	(25)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 159, 204, 205, 206, 207, 208, 209
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 142 155 156 157 193
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 142 155 156 157 193
;; rd  out 	(34)
4, 8, 12, 16, 17, 19, 20, 21, 42, 49, 50, 152, 159, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 93
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 1 uid 95
;;      reg 140 { d159(bb 12 insn 93) }
;;   UD chains for insn luid 2 uid 96
;;      reg 190 { d205(bb 12 insn 95) }
;;   UD chains for insn luid 3 uid 97
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 4 uid 98
;;      reg 189 { d204(bb 12 insn 96) }
;;      reg 192 { d207(bb 12 insn 97) }
;;   UD chains for insn luid 5 uid 99
;;      reg 191 { d206(bb 12 insn 98) }
;;   UD chains for insn luid 6 uid 100
;;      reg 191 { d206(bb 12 insn 98) }
;;      reg 193 { d209(bb 12 insn 99) }
;;   UD chains for insn luid 7 uid 101
;;      reg 193 { d208(bb 12 insn 100) }
;;   UD chains for insn luid 8 uid 102
;;      reg 24 { d42(bb 12 insn 101) }

( 12 )->[13]->( 26 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u132(11){ d17(bb 0 insn -1) }u133(13){ d20(bb 0 insn -1) }u134(25){ d49(bb 0 insn -1) }u135(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 193
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 193
;; lr  def 	 153 196
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 193
;; live  gen 	 153 196
;; live  kill	
;; rd  in  	(34)
4, 8, 12, 16, 17, 19, 20, 21, 42, 49, 50, 152, 159, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208
;; rd  gen 	(2)
169, 210
;; rd  kill	(5)
169, 170, 171, 172, 210
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; rd  out 	(36)
4, 8, 12, 16, 17, 19, 20, 21, 42, 49, 50, 152, 159, 161, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 210
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 106
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 193 { d208(bb 12 insn 100) }
;;   UD chains for insn luid 2 uid 108
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 196 { d210(bb 13 insn 107) }
;;   UD chains for insn luid 3 uid 109
;;      reg 193 { d208(bb 12 insn 100) }

( 12 )->[14]->( 18 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u141(11){ d17(bb 0 insn -1) }u142(13){ d20(bb 0 insn -1) }u143(25){ d49(bb 0 insn -1) }u144(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 142 155 156 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 142 155 156 157
;; lr  def 	 24 [cc] 137 143 144 145 146 199 201 227 228 229 230
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 142 155 156 157
;; live  gen 	 24 [cc] 137 143 144 145 146 199 201 227 228 229 230
;; live  kill	 24 [cc]
;; rd  in  	(34)
4, 8, 12, 16, 17, 19, 20, 21, 42, 49, 50, 152, 159, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208
;; rd  gen 	(12)
40, 158, 162, 163, 164, 165, 211, 212, 224, 225, 226, 227
;; rd  kill	(29)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 158, 162, 163, 164, 165, 211, 212, 224, 225, 226, 227
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 137 143 144 146 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 137 143 144 146 155
;; rd  out 	(45)
4, 8, 12, 16, 17, 19, 20, 21, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 116
;;      reg 140 { d159(bb 12 insn 93) }
;;      reg 142 { d161(bb 4 insn 25) }
;;   UD chains for insn luid 1 uid 119
;;      reg 199 { d211(bb 14 insn 116) }
;;   eq_note reg 199 { }
;;   UD chains for insn luid 2 uid 120
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 201 { d212(bb 14 insn 119) }
;;   UD chains for insn luid 3 uid 246
;;      reg 156 { d175(bb 2 insn 3) d174(bb 3 insn 15) }
;;   UD chains for insn luid 4 uid 247
;;      reg 156 { d175(bb 2 insn 3) d174(bb 3 insn 15) }
;;   UD chains for insn luid 5 uid 248
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 6 uid 249
;;      reg 157 { d177(bb 2 insn 4) d176(bb 3 insn 16) }
;;   UD chains for insn luid 7 uid 130
;;      reg 227 { d224(bb 14 insn 248) }
;;      reg 229 { d226(bb 14 insn 246) }
;;   UD chains for insn luid 8 uid 141
;;      reg 227 { d224(bb 14 insn 248) }
;;      reg 230 { d227(bb 14 insn 247) }
;;   UD chains for insn luid 9 uid 152
;;      reg 228 { d225(bb 14 insn 249) }
;;      reg 229 { d226(bb 14 insn 246) }
;;   UD chains for insn luid 10 uid 156
;;      reg 144 { d163(bb 14 insn 152) }
;;      reg 145 { d164(bb 14 insn 141) }
;;   UD chains for insn luid 11 uid 160
;;      reg 228 { d225(bb 14 insn 249) }
;;      reg 230 { d227(bb 14 insn 247) }
;;   UD chains for insn luid 12 uid 164
;;      reg 137 { d158(bb 14 insn 156) }
;;      reg 144 { d163(bb 14 insn 152) }
;;   UD chains for insn luid 13 uid 165
;;      reg 24 { d40(bb 14 insn 164) }

( 14 )->[15]->( 17 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u168(11){ d17(bb 0 insn -1) }u169(13){ d20(bb 0 insn -1) }u170(25){ d49(bb 0 insn -1) }u171(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 137 143 144 146 155
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 137 143 144 146 155
;; live  gen 	
;; live  kill	
;; rd  in  	(45)
4, 8, 12, 16, 17, 19, 20, 21, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 146 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 146 155
;; rd  out 	(45)
4, 8, 12, 16, 17, 19, 20, 21, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 167
;;      reg 24 { d40(bb 14 insn 164) }

( 15 )->[16]->( 18 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u173(11){ d17(bb 0 insn -1) }u174(13){ d20(bb 0 insn -1) }u175(25){ d49(bb 0 insn -1) }u176(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 146 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 146 155
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(45)
4, 8, 12, 16, 17, 19, 20, 21, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(1)
39
;; rd  kill	(18)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; rd  out 	(45)
4, 8, 12, 16, 17, 19, 20, 21, 39, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 168
;;      reg 137 { d158(bb 14 insn 156) }
;;      reg 144 { d163(bb 14 insn 152) }
;;   UD chains for insn luid 1 uid 169
;;      reg 24 { d39(bb 16 insn 168) }

( 16 15 )->[17]->( 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u180(11){ d17(bb 0 insn -1) }u181(13){ d20(bb 0 insn -1) }u182(25){ d49(bb 0 insn -1) }u183(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 148
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; live  gen 	 148
;; live  kill	
;; rd  in  	(46)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(1)
168
;; rd  kill	(2)
167, 168
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; rd  out 	(47)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }

( 14 16 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u184(11){ d17(bb 0 insn -1) }u185(13){ d20(bb 0 insn -1) }u186(25){ d49(bb 0 insn -1) }u187(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 148
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; live  gen 	 148
;; live  kill	
;; rd  in  	(46)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(1)
167
;; rd  kill	(2)
167, 168
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; rd  out 	(47)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }

( 18 17 )->[19]->( 22 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u188(11){ d17(bb 0 insn -1) }u189(13){ d20(bb 0 insn -1) }u190(25){ d49(bb 0 insn -1) }u191(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 146
;; lr  def 	 24 [cc] 134 135 147 220 221
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; live  gen 	 24 [cc] 134 135 147 220 221
;; live  kill	 24 [cc]
;; rd  in  	(48)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(6)
36, 153, 156, 166, 214, 217
;; rd  kill	(22)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 153, 166, 216, 217
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; rd  out 	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 184
;;      reg 135 read/write { d154(bb 19 insn 258) }
;;      reg 137 { d158(bb 14 insn 156) }
;;   UD chains for insn luid 2 uid 185
;;      reg 135 read/write { d155(bb 19 insn 184) d154(bb 19 insn 258) }
;;   UD chains for insn luid 3 uid 186
;;      reg 135 { d156(bb 19 insn 185) d155(bb 19 insn 184) d154(bb 19 insn 258) }
;;      reg 143 { d162(bb 14 insn 130) }
;;   UD chains for insn luid 5 uid 187
;;      reg 137 { d158(bb 14 insn 156) }
;;      reg 220 read/write { d213(bb 19 insn 259) }
;;   UD chains for insn luid 6 uid 188
;;      reg 135 { d156(bb 19 insn 185) d155(bb 19 insn 184) d154(bb 19 insn 258) }
;;      reg 220 read/write { d215(bb 19 insn 187) d213(bb 19 insn 259) }
;;   UD chains for insn luid 7 uid 189
;;      reg 146 { d165(bb 14 insn 160) }
;;      reg 220 { d215(bb 19 insn 187) d214(bb 19 insn 188) d213(bb 19 insn 259) }
;;   UD chains for insn luid 9 uid 191
;;      reg 134 { d153(bb 19 insn 186) }
;;      reg 135 { d156(bb 19 insn 185) d155(bb 19 insn 184) d154(bb 19 insn 258) }
;;   UD chains for insn luid 10 uid 192
;;      reg 24 { d36(bb 19 insn 191) }

( 19 )->[20]->( 23 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u206(11){ d17(bb 0 insn -1) }u207(13){ d20(bb 0 insn -1) }u208(25){ d49(bb 0 insn -1) }u209(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; live  gen 	
;; live  kill	
;; rd  in  	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; rd  out 	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 194
;;      reg 24 { d36(bb 19 insn 191) }

( 20 )->[21]->( 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u211(11){ d17(bb 0 insn -1) }u212(13){ d20(bb 0 insn -1) }u213(25){ d49(bb 0 insn -1) }u214(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227
;; rd  gen 	(1)
35
;; rd  kill	(18)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; rd  out 	(52)
4, 8, 12, 16, 17, 19, 20, 21, 35, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 195
;;      reg 134 { d153(bb 19 insn 186) }
;;      reg 135 { d156(bb 19 insn 185) }

( 19 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u217(11){ d17(bb 0 insn -1) }u218(13){ d20(bb 0 insn -1) }u219(25){ d49(bb 0 insn -1) }u220(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 221
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155
;; live  gen 	 221
;; live  kill	
;; rd  in  	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227
;; rd  gen 	(1)
216
;; rd  kill	(2)
216, 217
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; rd  out 	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }

( 20 22 21 )->[23]->( 25 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u221(11){ d17(bb 0 insn -1) }u222(13){ d20(bb 0 insn -1) }u223(25){ d49(bb 0 insn -1) }u224(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 148 221
;; lr  def 	 24 [cc] 136 222 223 224
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; live  gen 	 24 [cc] 136 222 223 224
;; live  kill	 24 [cc]
;; rd  in  	(54)
4, 8, 12, 16, 17, 19, 20, 21, 35, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 224, 225, 226, 227
;; rd  gen 	(5)
32, 157, 218, 220, 221
;; rd  kill	(24)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 157, 218, 219, 220, 221, 222
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; rd  out 	(57)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 220, 221, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 204
;;      reg 147 { d166(bb 19 insn 189) }
;;      reg 221 { d217(bb 19 insn 190) d216(bb 22 insn 202) }
;;   UD chains for insn luid 1 uid 205
;;      reg 136 { d157(bb 23 insn 204) }
;;      reg 148 { d168(bb 17 insn 176) d167(bb 18 insn 181) }
;;   UD chains for insn luid 3 uid 207
;;      reg 134 { d153(bb 19 insn 186) }
;;   UD chains for insn luid 4 uid 208
;;      reg 134 { d153(bb 19 insn 186) }
;;      reg 224 { d222(bb 23 insn 207) }
;;   UD chains for insn luid 5 uid 209
;;      reg 224 { d221(bb 23 insn 208) }
;;   UD chains for insn luid 6 uid 210
;;      reg 24 { d32(bb 23 insn 209) }

( 23 )->[24]->( 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u234(11){ d17(bb 0 insn -1) }u235(13){ d20(bb 0 insn -1) }u236(25){ d49(bb 0 insn -1) }u237(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 223
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222
;; live  gen 	 223
;; live  kill	
;; rd  in  	(57)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 220, 221, 224, 225, 226, 227
;; rd  gen 	(1)
219
;; rd  kill	(2)
219, 220
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; rd  out 	(57)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 219, 221, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }

( 23 24 )->[25]->( 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u238(11){ d17(bb 0 insn -1) }u239(13){ d20(bb 0 insn -1) }u240(25){ d49(bb 0 insn -1) }u241(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 222 223
;; lr  def 	 153 225
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; live  gen 	 153 225
;; live  kill	
;; rd  in  	(58)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227
;; rd  gen 	(2)
170, 223
;; rd  kill	(5)
169, 170, 171, 172, 223
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; rd  out 	(60)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 213
;;      reg 222 { d218(bb 23 insn 205) }
;;      reg 223 { d220(bb 23 insn 206) d219(bb 24 insn 211) }
;;   UD chains for insn luid 1 uid 214
;;      reg 155 { d173(bb 2 insn 2) }
;;      reg 225 { d223(bb 25 insn 213) }

( 25 11 10 13 )->[26]->( 1 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u246(11){ d17(bb 0 insn -1) }u247(13){ d20(bb 0 insn -1) }u248(25){ d49(bb 0 insn -1) }u249(26){ d50(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(84)
1, 4, 5, 8, 9, 12, 13, 16, 17, 19, 20, 21, 32, 42, 43, 49, 50, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227
;; rd  gen 	(1)
0
;; rd  kill	(5)
0, 1, 2, 3, 4
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(83)
0, 5, 8, 9, 12, 13, 16, 17, 19, 20, 21, 32, 42, 43, 49, 50, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }
;;   reg 26 { d50(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 222
;;      reg 153 { d172(bb 10 insn 78) d171(bb 11 insn 88) d170(bb 25 insn 215) d169(bb 13 insn 109) }
;;   UD chains for insn luid 1 uid 228
;;      reg 0 { d0(bb 26 insn 222) }

( 8 26 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u252(0){ d2(bb 8 insn 58) d0(bb 26 insn 222) }u253(11){ d17(bb 0 insn -1) }u254(13){ d20(bb 0 insn -1) }u255(14){ d21(bb 0 insn -1) }u256(25){ d49(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(86)
0, 2, 5, 8, 9, 12, 13, 16, 17, 19, 20, 21, 32, 42, 43, 45, 46, 49, 50, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(86)
0, 2, 5, 8, 9, 12, 13, 16, 17, 19, 20, 21, 32, 42, 43, 45, 46, 49, 50, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227
;;  UD chains for artificial uses
;;   reg 0 { d2(bb 8 insn 58) d0(bb 26 insn 222) }
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d20(bb 0 insn -1) }
;;   reg 14 { d21(bb 0 insn -1) }
;;   reg 25 { d49(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 12 to worklist
  Adding insn 31 to worklist
  Adding insn 24 to worklist
  Adding insn 37 to worklist
  Adding insn 45 to worklist
  Adding insn 51 to worklist
  Adding insn 58 to worklist
  Adding insn 71 to worklist
  Adding insn 260 to worklist
  Adding insn 77 to worklist
  Adding insn 262 to worklist
  Adding insn 87 to worklist
  Adding insn 85 to worklist
  Adding insn 102 to worklist
  Adding insn 264 to worklist
  Adding insn 108 to worklist
  Adding insn 106 to worklist
  Adding insn 165 to worklist
  Adding insn 120 to worklist
  Adding insn 167 to worklist
  Adding insn 169 to worklist
  Adding insn 266 to worklist
  Adding insn 192 to worklist
  Adding insn 194 to worklist
  Adding insn 268 to worklist
  Adding insn 210 to worklist
  Adding insn 214 to worklist
  Adding insn 228 to worklist
Finished finding needed instructions:
  Adding insn 222 to worklist
Processing use of (reg 153 [ D.4793 ]) in insn 222:
  Adding insn 78 to worklist
  Adding insn 88 to worklist
  Adding insn 215 to worklist
  Adding insn 109 to worklist
Processing use of (reg 193) in insn 109:
  Adding insn 100 to worklist
Processing use of (subreg (reg 191) 4) in insn 100:
  Adding insn 98 to worklist
Processing use of (reg 193) in insn 100:
  Adding insn 99 to worklist
Processing use of (subreg (reg 191) 0) in insn 99:
Processing use of (reg 189 [ temp.247 ]) in insn 98:
  Adding insn 96 to worklist
Processing use of (reg 192 [ <variable>.significand ]) in insn 98:
  Adding insn 97 to worklist
Processing use of (reg 157 [ vdm ]) in insn 97:
  Adding insn 4 to worklist
  Adding insn 16 to worklist
Processing use of (reg 133 [ vdn.258 ]) in insn 16:
  Adding insn 14 to worklist
Processing use of (reg 156 [ vdn ]) in insn 14:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 190 [ temp.247 ]) in insn 96:
  Adding insn 95 to worklist
Processing use of (subreg (reg 140 [ temp.247 ]) 0) in insn 95:
  Adding insn 93 to worklist
Processing use of (reg 157 [ vdm ]) in insn 93:
Processing use of (reg 0 r0) in insn 228:
Processing use of (reg 155 [ vdd ]) in insn 214:
  Adding insn 2 to worklist
Processing use of (reg 225) in insn 214:
  Adding insn 213 to worklist
Processing use of (reg 222) in insn 213:
  Adding insn 205 to worklist
Processing use of (reg 223) in insn 213:
  Adding insn 206 to worklist
  Adding insn 211 to worklist
Processing use of (reg 136 [ rh.254 ]) in insn 205:
  Adding insn 204 to worklist
Processing use of (reg 148 [ iftmp.83 ]) in insn 205:
  Adding insn 176 to worklist
  Adding insn 181 to worklist
Processing use of (reg 147 [ D.5348 ]) in insn 204:
  Adding insn 189 to worklist
Processing use of (reg 221) in insn 204:
  Adding insn 190 to worklist
  Adding insn 202 to worklist
Processing use of (reg 146 [ rh ]) in insn 189:
  Adding insn 160 to worklist
Processing use of (reg 220 [ rma.255 ]) in insn 189:
  Adding insn 187 to worklist
  Adding insn 188 to worklist
  Adding insn 259 to worklist
Processing use of (subreg (reg 135 [ rma.255 ]) 0) in insn 188:
  Adding insn 185 to worklist
  Adding insn 184 to worklist
  Adding insn 258 to worklist
Processing use of (reg 220 [ rma.255 ]) in insn 188:
Processing use of (reg 135 [ rma.255 ]) in insn 184:
Processing use of (subreg (reg 137 [ rma.253 ]) 0) in insn 184:
  Adding insn 156 to worklist
Processing use of (reg 144 [ rmb ]) in insn 156:
  Adding insn 152 to worklist
Processing use of (reg 145 [ rma ]) in insn 156:
  Adding insn 141 to worklist
Processing use of (reg 227 [ temp.252 ]) in insn 141:
  Adding insn 248 to worklist
Processing use of (reg 230 [ temp.251+4 ]) in insn 141:
  Adding insn 247 to worklist
Processing use of (reg 156 [ vdn ]) in insn 247:
  Adding insn 15 to worklist
Processing use of (reg 157 [ vdm ]) in insn 15:
Processing use of (reg 157 [ vdm ]) in insn 248:
Processing use of (reg 228 [ temp.252+4 ]) in insn 152:
  Adding insn 249 to worklist
Processing use of (reg 229 [ temp.251 ]) in insn 152:
  Adding insn 246 to worklist
Processing use of (reg 156 [ vdn ]) in insn 246:
Processing use of (reg 157 [ vdm ]) in insn 249:
Processing use of (reg 135 [ rma.255 ]) in insn 185:
Processing use of (subreg (reg 137 [ rma.253 ]) 4) in insn 187:
Processing use of (reg 220 [ rma.255 ]) in insn 187:
Processing use of (reg 228 [ temp.252+4 ]) in insn 160:
Processing use of (reg 230 [ temp.251+4 ]) in insn 160:
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 24 cc) in insn 210:
  Adding insn 209 to worklist
Processing use of (reg 224 [ rl.256 ]) in insn 209:
  Adding insn 208 to worklist
Processing use of (subreg (reg 134 [ rl.256 ]) 4) in insn 208:
  Adding insn 186 to worklist
Processing use of (reg 224 [ rl.256 ]) in insn 208:
  Adding insn 207 to worklist
Processing use of (subreg (reg 134 [ rl.256 ]) 0) in insn 207:
Processing use of (reg 135 [ rma.255 ]) in insn 186:
Processing use of (reg 143 [ rl ]) in insn 186:
  Adding insn 130 to worklist
Processing use of (reg 227 [ temp.252 ]) in insn 130:
Processing use of (reg 229 [ temp.251 ]) in insn 130:
Processing use of (reg 24 cc) in insn 194:
  Adding insn 191 to worklist
Processing use of (subreg (reg 134 [ rl.256 ]) 4) in insn 191:
Processing use of (subreg (reg 135 [ rma.255 ]) 4) in insn 191:
Processing use of (reg 24 cc) in insn 192:
Processing use of (reg 24 cc) in insn 169:
  Adding insn 168 to worklist
Processing use of (subreg (reg 137 [ rma.253 ]) 0) in insn 168:
Processing use of (subreg (reg 144 [ rmb ]) 0) in insn 168:
Processing use of (reg 24 cc) in insn 167:
  Adding insn 164 to worklist
Processing use of (subreg (reg 137 [ rma.253 ]) 4) in insn 164:
Processing use of (subreg (reg 144 [ rmb ]) 4) in insn 164:
Processing use of (reg 155 [ vdd ]) in insn 120:
Processing use of (subreg (reg 201) 0) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 199) in insn 119:
  Adding insn 116 to worklist
Processing use of (reg 140 [ temp.247 ]) in insn 116:
Processing use of (reg 142 [ temp.244 ]) in insn 116:
  Adding insn 25 to worklist
Processing use of (reg 156 [ vdn ]) in insn 25:
Processing use of (reg 24 cc) in insn 165:
Processing use of (reg 155 [ vdd ]) in insn 106:
Processing use of (subreg (reg 193) 0) in insn 106:
Processing use of (reg 155 [ vdd ]) in insn 108:
Processing use of (reg 196) in insn 108:
  Adding insn 107 to worklist
Processing use of (reg 24 cc) in insn 102:
  Adding insn 101 to worklist
Processing use of (reg 193) in insn 101:
Processing use of (reg 155 [ vdd ]) in insn 85:
Processing use of (subreg (reg 187) 0) in insn 85:
  Adding insn 83 to worklist
Processing use of (reg 155 [ vdd ]) in insn 87:
Processing use of (reg 188) in insn 87:
  Adding insn 86 to worklist
Processing use of (reg 0 r0) in insn 77:
  Adding insn 76 to worklist
Processing use of (reg 1 r1) in insn 77:
Processing use of (reg 2 r2) in insn 77:
Processing use of (reg 3 r3) in insn 77:
Processing use of (reg 155 [ vdd ]) in insn 77:
Processing use of (reg 155 [ vdd ]) in insn 77:
Processing use of (reg 155 [ vdd ]) in insn 77:
Processing use of (reg 155 [ vdd ]) in insn 77:
Processing use of (reg 183) in insn 76:
  Adding insn 73 to worklist
Processing use of (reg 183) in insn 76:
Processing use of (reg 183) in insn 76:
Processing use of (reg 183) in insn 76:
Processing use of (reg 24 cc) in insn 71:
  Adding insn 70 to worklist
Processing use of (reg 182) in insn 70:
  Adding insn 69 to worklist
Processing use of (subreg (reg 180) 4) in insn 69:
  Adding insn 67 to worklist
Processing use of (reg 182) in insn 69:
  Adding insn 68 to worklist
Processing use of (subreg (reg 180) 0) in insn 68:
Processing use of (reg 178 [ temp.245 ]) in insn 67:
  Adding insn 65 to worklist
Processing use of (reg 181 [ <variable>.significand ]) in insn 67:
  Adding insn 66 to worklist
Processing use of (reg 157 [ vdm ]) in insn 66:
Processing use of (reg 179 [ temp.245 ]) in insn 65:
  Adding insn 64 to worklist
Processing use of (subreg (reg 141 [ temp.245 ]) 0) in insn 64:
  Adding insn 39 to worklist
Processing use of (reg 157 [ vdm ]) in insn 39:
Processing use of (reg 13 sp) in insn 58:
Processing use of (reg 0 r0) in insn 58:
  Adding insn 54 to worklist
Processing use of (reg 1 r1) in insn 58:
  Adding insn 55 to worklist
Processing use of (reg 2 r2) in insn 58:
  Adding insn 56 to worklist
Processing use of (reg 3 r3) in insn 58:
  Adding insn 57 to worklist
Processing use of (reg 158 [ fpscr ]) in insn 57:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 157 [ vdm ]) in insn 56:
Processing use of (reg 156 [ vdn ]) in insn 55:
Processing use of (reg 155 [ vdd ]) in insn 54:
Processing use of (reg 24 cc) in insn 51:
  Adding insn 50 to worklist
Processing use of (reg 176 [ <variable>.significand ]) in insn 50:
  Adding insn 49 to worklist
Processing use of (reg 176 [ <variable>.significand ]) in insn 49:
  Adding insn 47 to worklist
Processing use of (reg 177 [ <variable>.significand+4 ]) in insn 49:
  Adding insn 48 to worklist
Processing use of (reg 157 [ vdm ]) in insn 48:
Processing use of (reg 157 [ vdm ]) in insn 47:
Processing use of (reg 24 cc) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 168 [ temp.244 ]) in insn 44:
  Adding insn 28 to worklist
Processing use of (reg 174 [ temp.245 ]) in insn 44:
  Adding insn 42 to worklist
Processing use of (subreg (reg 141 [ temp.245 ]) 0) in insn 42:
Processing use of (subreg (reg 142 [ temp.244 ]) 0) in insn 28:
Processing use of (reg 24 cc) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 170 [ <variable>.significand ]) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 170 [ <variable>.significand ]) in insn 35:
  Adding insn 33 to worklist
Processing use of (reg 171 [ <variable>.significand+4 ]) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 156 [ vdn ]) in insn 34:
Processing use of (reg 156 [ vdn ]) in insn 33:
Processing use of (reg 155 [ vdd ]) in insn 24:
Processing use of (subreg (reg 165) 0) in insn 24:
  Adding insn 23 to worklist
Processing use of (reg 162 [ <variable>.sign ]) in insn 23:
  Adding insn 19 to worklist
Processing use of (reg 164 [ <variable>.sign ]) in insn 23:
  Adding insn 21 to worklist
Processing use of (reg 156 [ vdn ]) in insn 21:
Processing use of (reg 157 [ vdm ]) in insn 19:
Processing use of (reg 24 cc) in insn 31:
  Adding insn 30 to worklist
Processing use of (reg 168 [ temp.244 ]) in insn 30:
Processing use of (reg 169) in insn 30:
  Adding insn 29 to worklist
Processing use of (reg 166) in insn 29:
  Adding insn 27 to worklist
Processing use of (subreg (reg 167) 0) in insn 27:
  Adding insn 26 to worklist
Processing use of (reg 24 cc) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 159 [ <variable>.exponent ]) in insn 11:
  Adding insn 9 to worklist
Processing use of (reg 160 [ <variable>.exponent ]) in insn 11:
  Adding insn 10 to worklist
Processing use of (reg 157 [ vdm ]) in insn 10:
Processing use of (reg 156 [ vdn ]) in insn 9:
DCE: Deleting insn 195
deleting insn with uid = 195.


vfp_double_multiply

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 24[cc]
;;  ref usage 	r0={5d,5u} r1={4d,3u} r2={4d,3u} r3={4d,3u} r11={1d,26u} r12={2d} r13={1d,27u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={17d,13u} r25={1d,26u} r26={1d,25u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} r134={1d,3u} r135={3d,5u} r136={1d,1u} r137={1d,4u} r140={1d,2u} r141={1d,2u} r142={1d,2u} r143={1d,1u} r144={1d,3u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={2d,1u} r153={4d,1u} r155={1d,12u} r156={2d,9u} r157={2d,12u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r162={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,2u} r169={1d,1u} r170={2d,2u} r171={1d,1u} r174={1d,1u} r176={2d,2u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,2u} r181={1d,1u} r182={2d,2u} r183={1d,4u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,2u} r192={1d,1u} r193={2d,4u} r196={1d,1u} r199={1d,1u,1d} r201={1d,1u} r220={3d,3u} r221={2d,1u} r222={1d,1u} r223={2d,1u} r224={2d,2u} r225={1d,1u} r227={1d,2u} r228={1d,2u} r229={1d,2u} r230={1d,2u} 
;;    total ref usage 482{227d,254u,1e} in 121{120 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151
0[0,5] 1[5,4] 2[9,4] 3[13,4] 11[17,1] 12[18,2] 13[20,1] 14[21,1] 15[22,1] 16[23,1] 17[24,1] 18[25,1] 19[26,1] 20[27,1] 21[28,1] 22[29,1] 23[30,1] 24[31,18] 25[49,1] 26[50,1] 27[51,1] 28[52,1] 29[53,1] 30[54,1] 31[55,1] 32[56,1] 33[57,1] 34[58,1] 35[59,1] 36[60,1] 37[61,1] 38[62,1] 39[63,1] 40[64,1] 41[65,1] 42[66,1] 43[67,1] 44[68,1] 45[69,1] 46[70,1] 47[71,1] 48[72,1] 49[73,1] 50[74,1] 51[75,1] 52[76,1] 53[77,1] 54[78,1] 55[79,1] 56[80,1] 57[81,1] 58[82,1] 59[83,1] 60[84,1] 61[85,1] 62[86,1] 63[87,1] 64[88,1] 65[89,1] 66[90,1] 67[91,1] 68[92,1] 69[93,1] 70[94,1] 71[95,1] 72[96,1] 73[97,1] 74[98,1] 75[99,1] 76[100,1] 77[101,1] 78[102,1] 79[103,1] 80[104,1] 81[105,1] 82[106,1] 83[107,1] 84[108,1] 85[109,1] 86[110,1] 87[111,1] 88[112,1] 89[113,1] 90[114,1] 91[115,1] 92[116,1] 93[117,1] 94[118,1] 95[119,1] 96[120,1] 97[121,1] 98[122,1] 99[123,1] 100[124,1] 101[125,1] 102[126,1] 103[127,1] 104[128,1] 105[129,1] 106[130,1] 107[131,1] 108[132,1] 109[133,1] 110[134,1] 111[135,1] 112[136,1] 113[137,1] 114[138,1] 115[139,1] 116[140,1] 117[141,1] 118[142,1] 119[143,1] 120[144,1] 121[145,1] 122[146,1] 123[147,1] 124[148,1] 125[149,1] 126[150,1] 127[151,1] 133[152,1] 134[153,1] 135[154,3] 136[157,1] 137[158,1] 140[159,1] 141[160,1] 142[161,1] 143[162,1] 144[163,1] 145[164,1] 146[165,1] 147[166,1] 148[167,2] 153[169,4] 155[173,1] 156[174,2] 157[176,2] 158[178,1] 159[179,1] 160[180,1] 162[181,1] 164[182,1] 165[183,1] 166[184,1] 167[185,1] 168[186,1] 169[187,1] 170[188,2] 171[190,1] 174[191,1] 176[192,2] 177[194,1] 178[195,1] 179[196,1] 180[197,1] 181[198,1] 182[199,2] 183[201,1] 187[202,1] 188[203,1] 189[204,1] 190[205,1] 191[206,1] 192[207,1] 193[208,2] 196[210,1] 199[211,1] 201[212,1] 220[213,3] 221[216,2] 222[218,1] 223[219,2] 224[221,2] 225[223,1] 227[224,1] 228[225,1] 229[226,1] 230[227,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 155 156 157 158 159 160
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 155 156 157 158 159 160
;; live  kill	
;; rd  in  	(10)
4, 8, 12, 16, 17, 19, 20, 21, 49, 50
;; rd  gen 	(7)
48, 173, 175, 177, 178, 179, 180
;; rd  kill	(26)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 173, 174, 175, 176, 177, 178, 179, 180

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/vfp/vfpdouble.c:792 (set (reg/v/f:SI 155 [ vdd ])
        (reg:SI 0 r0 [ vdd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ vdd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:792 (set (reg/v/f:SI 156 [ vdn ])
        (reg:SI 1 r1 [ vdn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ vdn ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:792 (set (reg/v/f:SI 157 [ vdm ])
        (reg:SI 2 r2 [ vdm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ vdm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:792 (set (reg/v:SI 158 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:801 (set (reg:SI 159 [ <variable>.exponent ])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 156 [ vdn ]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:801 (set (reg:SI 160 [ <variable>.exponent ])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 157 [ vdm ]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:801 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 159 [ <variable>.exponent ])
            (reg:SI 160 [ <variable>.exponent ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 160 [ <variable>.exponent ])
        (expr_list:REG_DEAD (reg:SI 159 [ <variable>.exponent ])
            (nil))))

(jump_insn 12 11 13 2 arch/arm/vfp/vfpdouble.c:801 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 17)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; rd  out 	(17)
4, 8, 12, 16, 17, 19, 20, 21, 48, 49, 50, 173, 175, 177, 178, 179, 180


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u13(11){ }u14(13){ }u15(25){ }u16(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 157
;; lr  def 	 133 156 157
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  gen 	 133 156 157
;; live  kill	
;; rd  in  	(17)
4, 8, 12, 16, 17, 19, 20, 21, 48, 49, 50, 173, 175, 177, 178, 179, 180
;; rd  gen 	(3)
152, 174, 176
;; rd  kill	(5)
152, 174, 175, 176, 177

;; Pred edge  2 [50.0%]  (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 3 arch/arm/vfp/vfpdouble.c:801 (set (reg/v/f:SI 133 [ vdn.258 ])
        (reg/v/f:SI 156 [ vdn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 156 [ vdn ])
        (nil)))

(insn 15 14 16 3 arch/arm/vfp/vfpdouble.c:803 (set (reg/v/f:SI 156 [ vdn ])
        (reg/v/f:SI 157 [ vdm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 157 [ vdm ])
        (nil)))

(insn 16 15 17 3 arch/arm/vfp/vfpdouble.c:804 (set (reg/v/f:SI 157 [ vdm ])
        (reg/v/f:SI 133 [ vdn.258 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 133 [ vdn.258 ])
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; rd  out 	(18)
4, 8, 12, 16, 17, 19, 20, 21, 48, 49, 50, 152, 173, 174, 176, 178, 179, 180


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u20(11){ }u21(13){ }u22(25){ }u23(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 156 157
;; lr  def 	 24 [cc] 142 162 164 165 166 167 168 169
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  gen 	 24 [cc] 142 162 164 165 166 167 168 169
;; live  kill	
;; rd  in  	(20)
4, 8, 12, 16, 17, 19, 20, 21, 48, 49, 50, 152, 173, 174, 175, 176, 177, 178, 179, 180
;; rd  gen 	(9)
47, 161, 181, 182, 183, 184, 185, 186, 187
;; rd  kill	(26)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 161, 181, 182, 183, 184, 185, 186, 187

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 17 16 18 4 26 "" [1 uses])

(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 19 18 21 4 arch/arm/vfp/vfpdouble.c:808 (set (reg:SI 162 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 157 [ vdm ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 21 19 23 4 arch/arm/vfp/vfpdouble.c:808 (set (reg:SI 164 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 156 [ vdn ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 23 21 24 4 arch/arm/vfp/vfpdouble.c:808 (set (reg:SI 165)
        (xor:SI (reg:SI 162 [ <variable>.sign ])
            (reg:SI 164 [ <variable>.sign ]))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 164 [ <variable>.sign ])
        (expr_list:REG_DEAD (reg:SI 162 [ <variable>.sign ])
            (nil))))

(insn 24 23 25 4 arch/arm/vfp/vfpdouble.c:808 (set (mem/s/j:HI (plus:SI (reg/v/f:SI 155 [ vdd ])
                (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])
        (subreg:HI (reg:SI 165) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 165)
        (nil)))

(insn 25 24 26 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:SI 142 [ temp.244 ])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 156 [ vdn ]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 26 25 27 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:SI 167)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 27 26 28 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:HI 166)
        (subreg:HI (reg:SI 167) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 167)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 28 27 29 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:SI 168 [ temp.244 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 142 [ temp.244 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 29 28 30 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:SI 169)
        (sign_extend:SI (reg:HI 166))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 166)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 30 29 31 4 arch/arm/vfp/vfpdouble.c:813 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 168 [ temp.244 ])
            (reg:SI 169))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 169)
        (nil)))

(jump_insn 31 30 32 4 arch/arm/vfp/vfpdouble.c:813 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 4 -> ( 5 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 155 156 157 158 168
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 155 156 157 158 168
;; rd  out 	(28)
4, 8, 12, 16, 17, 19, 20, 21, 47, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187


;; Succ edge  5 [28.0%]  (fallthru)
;; Succ edge  12 [72.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u37(11){ }u38(13){ }u39(25){ }u40(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156
;; lr  def 	 24 [cc] 170 171
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; live  gen 	 24 [cc] 170 171
;; live  kill	
;; rd  in  	(28)
4, 8, 12, 16, 17, 19, 20, 21, 47, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187
;; rd  gen 	(3)
46, 188, 190
;; rd  kill	(21)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 188, 189, 190

;; Pred edge  4 [28.0%]  (fallthru)
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 33 32 34 5 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 170 [ <variable>.significand ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 156 [ vdn ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 34 33 35 5 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 171 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 156 [ vdn ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 35 34 36 5 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 170 [ <variable>.significand ])
        (ior:SI (reg:SI 170 [ <variable>.significand ])
            (reg:SI 171 [ <variable>.significand+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 171 [ <variable>.significand+4 ])
        (nil)))

(insn 36 35 37 5 arch/arm/vfp/vfpdouble.c:814 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 170 [ <variable>.significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 170 [ <variable>.significand ])
        (nil)))

(jump_insn 37 36 38 5 arch/arm/vfp/vfpdouble.c:814 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2071 [0x817])
            (nil))))
;; End of basic block 5 -> ( 8 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; rd  out 	(30)
4, 8, 12, 16, 17, 19, 20, 21, 46, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190


;; Succ edge  8 [20.7%] 
;; Succ edge  6 [79.3%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u47(11){ }u48(13){ }u49(25){ }u50(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157 168
;; lr  def 	 24 [cc] 141 174
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158 168
;; live  gen 	 24 [cc] 141 174
;; live  kill	
;; rd  in  	(30)
4, 8, 12, 16, 17, 19, 20, 21, 46, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190
;; rd  gen 	(3)
31, 160, 191
;; rd  kill	(20)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 160, 191

;; Pred edge  5 [79.3%]  (fallthru)
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 42 6 arch/arm/vfp/vfpdouble.c:814 discrim 1 (set (reg:SI 141 [ temp.245 ])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 157 [ vdm ]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 42 39 44 6 arch/arm/vfp/vfpdouble.c:814 discrim 1 (set (reg:SI 174 [ temp.245 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 141 [ temp.245 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 44 42 45 6 arch/arm/vfp/vfpdouble.c:814 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 174 [ temp.245 ])
            (reg:SI 168 [ temp.244 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 174 [ temp.245 ])
        (expr_list:REG_DEAD (reg:SI 168 [ temp.244 ])
            (nil))))

(jump_insn 45 44 46 6 arch/arm/vfp/vfpdouble.c:814 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 6 -> ( 7 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; rd  out 	(32)
4, 8, 12, 16, 17, 19, 20, 21, 31, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191


;; Succ edge  7 [28.0%]  (fallthru)
;; Succ edge  9 [72.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u56(11){ }u57(13){ }u58(25){ }u59(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157
;; lr  def 	 24 [cc] 176 177
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; live  gen 	 24 [cc] 176 177
;; live  kill	
;; rd  in  	(32)
4, 8, 12, 16, 17, 19, 20, 21, 31, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191
;; rd  gen 	(3)
45, 192, 194
;; rd  kill	(21)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 192, 193, 194

;; Pred edge  6 [28.0%]  (fallthru)
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 47 46 48 7 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 176 [ <variable>.significand ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 157 [ vdm ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 48 47 49 7 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 177 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 157 [ vdm ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 49 48 50 7 arch/arm/vfp/vfpdouble.c:814 (set (reg:SI 176 [ <variable>.significand ])
        (ior:SI (reg:SI 176 [ <variable>.significand ])
            (reg:SI 177 [ <variable>.significand+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 177 [ <variable>.significand+4 ])
        (nil)))

(insn 50 49 51 7 arch/arm/vfp/vfpdouble.c:814 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 176 [ <variable>.significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 176 [ <variable>.significand ])
        (nil)))

(jump_insn 51 50 52 7 arch/arm/vfp/vfpdouble.c:814 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 156 157 158
;; rd  out 	(34)
4, 8, 12, 16, 17, 19, 20, 21, 45, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194


;; Succ edge  8 [39.0%]  (fallthru)
;; Succ edge  9 [61.0%] 

;; Start of basic block ( 5 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u66(11){ }u67(13){ }u68(25){ }u69(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 156 157 158
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 156 157 158
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; rd  in  	(35)
4, 8, 12, 16, 17, 19, 20, 21, 45, 46, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194
;; rd  gen 	(1)
2
;; rd  kill	(5)
0, 1, 2, 3, 4

;; Pred edge  5 [20.7%] 
;; Pred edge  7 [39.0%]  (fallthru)
(code_label 52 51 53 8 28 "" [1 uses])

(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 8 arch/arm/vfp/vfpdouble.c:815 (set (reg:SI 0 r0)
        (reg/v/f:SI 155 [ vdd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 155 [ vdd ])
        (nil)))

(insn 55 54 56 8 arch/arm/vfp/vfpdouble.c:815 (set (reg:SI 1 r1)
        (reg/v/f:SI 156 [ vdn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 156 [ vdn ])
        (nil)))

(insn 56 55 57 8 arch/arm/vfp/vfpdouble.c:815 (set (reg:SI 2 r2)
        (reg/v/f:SI 157 [ vdm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 157 [ vdm ])
        (nil)))

(insn 57 56 58 8 arch/arm/vfp/vfpdouble.c:815 (set (reg:SI 3 r3)
        (reg/v:SI 158 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 158 [ fpscr ])
        (nil)))

(call_insn/j 58 57 59 8 arch/arm/vfp/vfpdouble.c:815 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(35)
2, 8, 12, 16, 17, 19, 20, 21, 45, 46, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 59 58 61)

;; Start of basic block ( 6 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u79(11){ }u80(13){ }u81(25){ }u82(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 157
;; lr  def 	 24 [cc] 178 179 180 181 182
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 155 157
;; live  gen 	 24 [cc] 178 179 180 181 182
;; live  kill	
;; rd  in  	(35)
4, 8, 12, 16, 17, 19, 20, 21, 31, 45, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194
;; rd  gen 	(6)
43, 195, 196, 197, 198, 199
;; rd  kill	(24)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 195, 196, 197, 198, 199, 200

;; Pred edge  6 [72.0%] 
;; Pred edge  7 [61.0%] 
(code_label 61 59 62 9 29 "" [2 uses])

(note 62 61 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 64 62 65 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:SI 179 [ temp.245 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 141 [ temp.245 ]) 0))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 141 [ temp.245 ])
        (nil)))

(insn 65 64 66 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:DI 178 [ temp.245 ])
        (sign_extend:DI (reg:SI 179 [ temp.245 ]))) 140 {*arm_extendsidi2} (expr_list:REG_DEAD (reg:SI 179 [ temp.245 ])
        (nil)))

(insn 66 65 67 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:DI 181 [ <variable>.significand ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 157 [ vdm ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v/f:SI 157 [ vdm ])
        (nil)))

(insn 67 66 68 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:DI 180)
        (ior:DI (reg:DI 178 [ temp.245 ])
            (reg:DI 181 [ <variable>.significand ]))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 181 [ <variable>.significand ])
        (expr_list:REG_DEAD (reg:DI 178 [ temp.245 ])
            (nil))))

(insn 68 67 69 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:SI 182)
        (subreg:SI (reg:DI 180) 0)) 167 {*arm_movsi_insn} (nil))

(insn 69 68 70 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:SI 182)
        (ior:SI (reg:SI 182)
            (subreg:SI (reg:DI 180) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 180)
        (nil)))

(insn 70 69 71 9 arch/arm/vfp/vfpdouble.c:816 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 182)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 182)
        (nil)))

(jump_insn 71 70 72 9 arch/arm/vfp/vfpdouble.c:816 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; rd  out 	(39)
4, 8, 12, 16, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  11 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u93(11){ }u94(13){ }u95(25){ }u96(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 153 183
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 153 183
;; live  kill	
;; rd  in  	(39)
4, 8, 12, 16, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199
;; rd  gen 	(6)
1, 5, 9, 13, 172, 201
;; rd  kill	(22)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 169, 170, 171, 172, 201

;; Pred edge  9 [50.0%]  (fallthru)
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 73 72 76 10 arch/arm/vfp/vfpdouble.c:817 (set (reg/f:SI 183)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 76 73 77 10 arch/arm/vfp/vfpdouble.c:817 (parallel [
            (set (reg:SI 0 r0)
                (mem/s/c:SI (reg/f:SI 183) [0 vfp_double_default_qnan+0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s/c:SI (plus:SI (reg/f:SI 183)
                        (const_int 4 [0x4])) [0 vfp_double_default_qnan+4 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s/c:SI (plus:SI (reg/f:SI 183)
                        (const_int 8 [0x8])) [0 vfp_double_default_qnan+8 S4 A64]))
            (set (reg:SI 3 r3)
                (mem/s/c:SI (plus:SI (reg/f:SI 183)
                        (const_int 12 [0xc])) [0 vfp_double_default_qnan+12 S4 A32]))
        ]) 188 {*ldmsi4} (expr_list:REG_DEAD (reg/f:SI 183)
        (nil)))

(insn 77 76 78 10 arch/arm/vfp/vfpdouble.c:817 (parallel [
            (set (mem/s:SI (reg/v/f:SI 155 [ vdd ]) [0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 155 [ vdd ])
                        (const_int 4 [0x4])) [0 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 155 [ vdd ])
                        (const_int 8 [0x8])) [0 S4 A64])
                (reg:SI 2 r2))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 155 [ vdd ])
                        (const_int 12 [0xc])) [0 S4 A32])
                (reg:SI 3 r3))
        ]) 195 {*stmsi4} (expr_list:REG_DEAD (reg/v/f:SI 155 [ vdd ])
        (expr_list:REG_DEAD (reg:SI 3 r3)
            (expr_list:REG_DEAD (reg:SI 2 r2)
                (expr_list:REG_DEAD (reg:SI 1 r1)
                    (expr_list:REG_DEAD (reg:SI 0 r0)
                        (nil)))))))

(insn 78 77 260 10 arch/arm/vfp/vfpdouble.c:818 (set (reg:SI 153 [ D.4793 ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 260 78 261 10 arch/arm/vfp/vfpdouble.c:818 (set (pc)
        (label_ref 216)) -1 (nil))
;; End of basic block 10 -> ( 26)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; rd  out 	(41)
1, 5, 9, 13, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201


;; Succ edge  26 [100.0%] 

(barrier 261 260 81)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u109(11){ }u110(13){ }u111(25){ }u112(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 153 187 188
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155
;; live  gen 	 153 187 188
;; live  kill	
;; rd  in  	(39)
4, 8, 12, 16, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199
;; rd  gen 	(3)
171, 202, 203
;; rd  kill	(6)
169, 170, 171, 172, 202, 203

;; Pred edge  9 [50.0%] 
(code_label 81 261 82 11 30 "" [1 uses])

(note 82 81 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 83 82 85 11 arch/arm/vfp/vfpdouble.c:820 (set (reg:SI 187)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 85 83 86 11 arch/arm/vfp/vfpdouble.c:820 (set (mem/s/j:HI (reg/v/f:SI 155 [ vdd ]) [0 <variable>.exponent+0 S2 A64])
        (subreg:HI (reg:SI 187) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 187)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 86 85 87 11 arch/arm/vfp/vfpdouble.c:821 (set (reg:DI 188)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 87 86 88 11 arch/arm/vfp/vfpdouble.c:821 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 155 [ vdd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 188)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 188)
        (expr_list:REG_DEAD (reg/v/f:SI 155 [ vdd ])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(insn 88 87 262 11 arch/arm/vfp/vfpdouble.c:822 (set (reg:SI 153 [ D.4793 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 262 88 263 11 arch/arm/vfp/vfpdouble.c:822 (set (pc)
        (label_ref 216)) -1 (nil))
;; End of basic block 11 -> ( 26)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; rd  out 	(42)
4, 8, 12, 16, 17, 19, 20, 21, 43, 49, 50, 152, 160, 161, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 202, 203


;; Succ edge  26 [100.0%] 

(barrier 263 262 91)

;; Start of basic block ( 4) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u117(11){ }u118(13){ }u119(25){ }u120(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 155 156 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157
;; lr  def 	 24 [cc] 140 189 190 191 192 193
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 142 155 156 157
;; live  gen 	 24 [cc] 140 189 190 191 192 193
;; live  kill	
;; rd  in  	(28)
4, 8, 12, 16, 17, 19, 20, 21, 47, 49, 50, 152, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187
;; rd  gen 	(7)
42, 159, 204, 205, 206, 207, 208
;; rd  kill	(25)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 159, 204, 205, 206, 207, 208, 209

;; Pred edge  4 [72.0%] 
(code_label 91 263 92 12 27 "" [1 uses])

(note 92 91 93 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 93 92 95 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:SI 140 [ temp.247 ])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 157 [ vdm ]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 95 93 96 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:SI 190 [ temp.247 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 140 [ temp.247 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 96 95 97 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:DI 189 [ temp.247 ])
        (sign_extend:DI (reg:SI 190 [ temp.247 ]))) 140 {*arm_extendsidi2} (expr_list:REG_DEAD (reg:SI 190 [ temp.247 ])
        (nil)))

(insn 97 96 98 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:DI 192 [ <variable>.significand ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 157 [ vdm ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 98 97 99 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:DI 191)
        (ior:DI (reg:DI 189 [ temp.247 ])
            (reg:DI 192 [ <variable>.significand ]))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 192 [ <variable>.significand ])
        (expr_list:REG_DEAD (reg:DI 189 [ temp.247 ])
            (nil))))

(insn 99 98 100 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:SI 193)
        (subreg:SI (reg:DI 191) 0)) 167 {*arm_movsi_insn} (nil))

(insn 100 99 101 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:SI 193)
        (ior:SI (reg:SI 193)
            (subreg:SI (reg:DI 191) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 191)
        (nil)))

(insn 101 100 102 12 arch/arm/vfp/vfpdouble.c:829 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 193)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 102 101 103 12 arch/arm/vfp/vfpdouble.c:829 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 142 155 156 157 193
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 142 155 156 157 193
;; rd  out 	(34)
4, 8, 12, 16, 17, 19, 20, 21, 42, 49, 50, 152, 159, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208


;; Succ edge  13 [39.0%]  (fallthru)
;; Succ edge  14 [61.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u132(11){ }u133(13){ }u134(25){ }u135(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 193
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 193
;; lr  def 	 153 196
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 193
;; live  gen 	 153 196
;; live  kill	
;; rd  in  	(34)
4, 8, 12, 16, 17, 19, 20, 21, 42, 49, 50, 152, 159, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208
;; rd  gen 	(2)
169, 210
;; rd  kill	(5)
169, 170, 171, 172, 210

;; Pred edge  12 [39.0%]  (fallthru)
(note 103 102 106 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 106 103 107 13 arch/arm/vfp/vfpdouble.c:830 (set (mem/s/j:HI (reg/v/f:SI 155 [ vdd ]) [0 <variable>.exponent+0 S2 A64])
        (subreg:HI (reg:SI 193) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 107 106 108 13 arch/arm/vfp/vfpdouble.c:831 (set (reg:DI 196)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 108 107 109 13 arch/arm/vfp/vfpdouble.c:831 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 155 [ vdd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 196)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 196)
        (expr_list:REG_DEAD (reg/v/f:SI 155 [ vdd ])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(insn 109 108 264 13 arch/arm/vfp/vfpdouble.c:832 (set (reg:SI 153 [ D.4793 ])
        (reg:SI 193)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 193)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 264 109 265 13 arch/arm/vfp/vfpdouble.c:832 (set (pc)
        (label_ref 216)) -1 (nil))
;; End of basic block 13 -> ( 26)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; rd  out 	(36)
4, 8, 12, 16, 17, 19, 20, 21, 42, 49, 50, 152, 159, 161, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 210


;; Succ edge  26 [100.0%] 

(barrier 265 264 112)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u141(11){ }u142(13){ }u143(25){ }u144(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 142 155 156 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 142 155 156 157
;; lr  def 	 24 [cc] 137 143 144 145 146 199 201 227 228 229 230
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 142 155 156 157
;; live  gen 	 24 [cc] 137 143 144 145 146 199 201 227 228 229 230
;; live  kill	 24 [cc]
;; rd  in  	(34)
4, 8, 12, 16, 17, 19, 20, 21, 42, 49, 50, 152, 159, 161, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208
;; rd  gen 	(12)
40, 158, 162, 163, 164, 165, 211, 212, 224, 225, 226, 227
;; rd  kill	(29)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 158, 162, 163, 164, 165, 211, 212, 224, 225, 226, 227

;; Pred edge  12 [61.0%] 
(code_label 112 265 113 14 32 "" [1 uses])

(note 113 112 116 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 116 113 119 14 arch/arm/vfp/vfpdouble.c:840 (set (reg:SI 199)
        (plus:SI (reg:SI 142 [ temp.244 ])
            (reg:SI 140 [ temp.247 ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 142 [ temp.244 ])
        (expr_list:REG_DEAD (reg:SI 140 [ temp.247 ])
            (nil))))

(insn 119 116 120 14 arch/arm/vfp/vfpdouble.c:840 (set (reg:SI 201)
        (plus:SI (reg:SI 199)
            (const_int -1021 [0xfffffffffffffc03]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 199)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 199)
                (const_int -1021 [0xfffffffffffffc03]))
            (nil))))

(insn 120 119 246 14 arch/arm/vfp/vfpdouble.c:840 (set (mem/s/j:HI (reg/v/f:SI 155 [ vdd ]) [0 <variable>.exponent+0 S2 A64])
        (subreg:HI (reg:SI 201) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 201)
        (nil)))

(insn 246 120 247 14 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 229 [ temp.251 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 156 [ vdn ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 247 246 248 14 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 230 [ temp.251+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 156 [ vdn ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 156 [ vdn ])
        (nil)))

(insn 248 247 249 14 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 227 [ temp.252 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 157 [ vdm ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 249 248 130 14 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 228 [ temp.252+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 157 [ vdm ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 157 [ vdm ])
        (nil)))

(insn 130 249 141 14 arch/arm/vfp/vfp.h:80 (set (reg/v:DI 143 [ rl ])
        (mult:DI (zero_extend:DI (reg:SI 227 [ temp.252 ]))
            (zero_extend:DI (reg:SI 229 [ temp.251 ])))) 51 {*umulsidi3_v6} (nil))

(insn 141 130 152 14 arch/arm/vfp/vfp.h:83 (set (reg/v:DI 145 [ rma ])
        (mult:DI (zero_extend:DI (reg:SI 230 [ temp.251+4 ]))
            (zero_extend:DI (reg:SI 227 [ temp.252 ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 227 [ temp.252 ])
        (nil)))

(insn 152 141 156 14 arch/arm/vfp/vfp.h:86 (set (reg/v:DI 144 [ rmb ])
        (mult:DI (zero_extend:DI (reg:SI 228 [ temp.252+4 ]))
            (zero_extend:DI (reg:SI 229 [ temp.251 ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 229 [ temp.251 ])
        (nil)))

(insn 156 152 160 14 arch/arm/vfp/vfp.h:87 (parallel [
            (set (reg/v:DI 137 [ rma.253 ])
                (plus:DI (reg/v:DI 144 [ rmb ])
                    (reg/v:DI 145 [ rma ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 145 [ rma ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 160 156 164 14 arch/arm/vfp/vfp.h:89 (set (reg/v:DI 146 [ rh ])
        (mult:DI (zero_extend:DI (reg:SI 228 [ temp.252+4 ]))
            (zero_extend:DI (reg:SI 230 [ temp.251+4 ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 230 [ temp.251+4 ])
        (expr_list:REG_DEAD (reg:SI 228 [ temp.252+4 ])
            (nil))))

(insn 164 160 165 14 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 144 [ rmb ]) 4)
            (subreg:SI (reg/v:DI 137 [ rma.253 ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 165 164 230 14 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14 -> ( 18 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 137 143 144 146 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 137 143 144 146 155
;; rd  out 	(45)
4, 8, 12, 16, 17, 19, 20, 21, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227


;; Succ edge  18 [50.0%] 
;; Succ edge  15 [50.0%]  (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u168(11){ }u169(13){ }u170(25){ }u171(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 137 143 144 146 155
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 137 143 144 146 155
;; live  gen 	
;; live  kill	
;; rd  in  	(45)
4, 8, 12, 16, 17, 19, 20, 21, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  14 [50.0%]  (fallthru)
(note 230 165 167 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(jump_insn 167 230 231 15 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 245)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 15 -> ( 17 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 146 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 146 155
;; rd  out 	(45)
4, 8, 12, 16, 17, 19, 20, 21, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227


;; Succ edge  17 [71.0%] 
;; Succ edge  16 [29.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u173(11){ }u174(13){ }u175(25){ }u176(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 146 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 144 146 155
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(45)
4, 8, 12, 16, 17, 19, 20, 21, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(1)
39
;; rd  kill	(18)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48

;; Pred edge  15 [29.0%]  (fallthru)
(note 231 167 168 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 168 231 169 16 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 144 [ rmb ]) 0)
            (subreg:SI (reg/v:DI 137 [ rma.253 ]) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:DI 144 [ rmb ])
        (nil)))

(jump_insn 169 168 245 16 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 16 -> ( 18 17)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; rd  out 	(45)
4, 8, 12, 16, 17, 19, 20, 21, 39, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227


;; Succ edge  18 [50.0%] 
;; Succ edge  17 [50.0%]  (fallthru)

;; Start of basic block ( 16 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u180(11){ }u181(13){ }u182(25){ }u183(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 148
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; live  gen 	 148
;; live  kill	
;; rd  in  	(46)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(1)
168
;; rd  kill	(2)
167, 168

;; Pred edge  16 [50.0%]  (fallthru)
;; Pred edge  15 [71.0%] 
(code_label 245 169 175 17 40 "" [1 uses])

(note 175 245 176 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 176 175 266 17 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 148 [ iftmp.83 ])
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(jump_insn 266 176 267 17 (set (pc)
        (label_ref 182)) -1 (nil))
;; End of basic block 17 -> ( 19)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; rd  out 	(47)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227


;; Succ edge  19 [100.0%] 

(barrier 267 266 179)

;; Start of basic block ( 14 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u184(11){ }u185(13){ }u186(25){ }u187(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 148
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 155
;; live  gen 	 148
;; live  kill	
;; rd  in  	(46)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(1)
167
;; rd  kill	(2)
167, 168

;; Pred edge  14 [50.0%] 
;; Pred edge  16 [50.0%] 
(code_label 179 267 180 18 33 "" [2 uses])

(note 180 179 181 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 181 180 182 18 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 148 [ iftmp.83 ])
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (nil))
;; End of basic block 18 -> ( 19)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; rd  out 	(47)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 18 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u188(11){ }u189(13){ }u190(25){ }u191(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 143 146
;; lr  def 	 24 [cc] 134 135 147 220 221
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 143 146 148 155
;; live  gen 	 24 [cc] 134 135 147 220 221
;; live  kill	 24 [cc]
;; rd  in  	(48)
4, 8, 12, 16, 17, 19, 20, 21, 39, 40, 49, 50, 152, 158, 159, 161, 162, 163, 164, 165, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 224, 225, 226, 227
;; rd  gen 	(6)
36, 153, 156, 166, 214, 217
;; rd  kill	(22)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 153, 166, 216, 217

;; Pred edge  18 [100.0%]  (fallthru)
;; Pred edge  17 [100.0%] 
(code_label 182 181 183 19 35 "" [1 uses])

(note 183 182 258 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 258 183 184 19 arch/arm/vfp/vfp.h:92 (set (reg/v:DI 135 [ rma.255 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 184 258 185 19 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 135 [ rma.255 ]) 4)
        (subreg:SI (reg/v:DI 137 [ rma.253 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 185 184 186 19 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 135 [ rma.255 ]) 0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 186 185 259 19 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg/v:DI 134 [ rl.256 ])
                (plus:DI (reg/v:DI 135 [ rma.255 ])
                    (reg/v:DI 143 [ rl ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 143 [ rl ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 259 186 187 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 220 [ rma.255 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 187 259 188 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 220 [ rma.255 ]) 0)
        (subreg:SI (reg/v:DI 137 [ rma.253 ]) 4)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 137 [ rma.253 ])
        (nil)))

(insn 188 187 189 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 220 [ rma.255 ]) 4)
        (subreg:SI (reg/v:DI 135 [ rma.255 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 189 188 190 19 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 147 [ D.5348 ])
                (plus:DI (reg:DI 220 [ rma.255 ])
                    (reg/v:DI 146 [ rh ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 220 [ rma.255 ])
        (expr_list:REG_DEAD (reg/v:DI 146 [ rh ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 190 189 191 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 221)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 191 190 192 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 135 [ rma.255 ]) 4)
            (subreg:SI (reg/v:DI 134 [ rl.256 ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 192 191 235 19 arch/arm/vfp/vfp.h:90 discrim 3 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 201)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 19 -> ( 22 20)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; rd  out 	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227


;; Succ edge  22 [50.0%] 
;; Succ edge  20 [50.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u206(11){ }u207(13){ }u208(25){ }u209(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; live  gen 	
;; live  kill	
;; rd  in  	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  19 [50.0%]  (fallthru)
(note 235 192 194 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(jump_insn 194 235 236 20 arch/arm/vfp/vfp.h:90 discrim 3 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 203)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 20 -> ( 23 21)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; rd  out 	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227


;; Succ edge  23 [71.0%] 
;; Succ edge  21 [29.0%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u211(11){ }u212(13){ }u213(25){ }u214(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 147 148 155 221
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227
;; rd  gen 	(1)
35
;; rd  kill	(18)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48

;; Pred edge  20 [29.0%]  (fallthru)
(note 236 194 268 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(jump_insn 268 236 269 21 (set (pc)
        (label_ref 203)) -1 (nil))
;; End of basic block 21 -> ( 23)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; rd  out 	(52)
4, 8, 12, 16, 17, 19, 20, 21, 35, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227


;; Succ edge  23 [100.0%] 

(barrier 269 268 201)

;; Start of basic block ( 19) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u217(11){ }u218(13){ }u219(25){ }u220(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 221
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155
;; live  gen 	 221
;; live  kill	
;; rd  in  	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 217, 224, 225, 226, 227
;; rd  gen 	(1)
216
;; rd  kill	(2)
216, 217

;; Pred edge  19 [50.0%] 
(code_label 201 269 239 22 37 "" [1 uses])

(note 239 201 202 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 202 239 203 22 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 221)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 22 -> ( 23)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; rd  out 	(52)
4, 8, 12, 16, 17, 19, 20, 21, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 224, 225, 226, 227


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 20 22 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u221(11){ }u222(13){ }u223(25){ }u224(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 148 221
;; lr  def 	 24 [cc] 136 222 223 224
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 148 155 221
;; live  gen 	 24 [cc] 136 222 223 224
;; live  kill	 24 [cc]
;; rd  in  	(54)
4, 8, 12, 16, 17, 19, 20, 21, 35, 36, 49, 50, 152, 153, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 224, 225, 226, 227
;; rd  gen 	(5)
32, 157, 218, 220, 221
;; rd  kill	(24)
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 157, 218, 219, 220, 221, 222

;; Pred edge  20 [71.0%] 
;; Pred edge  22 [100.0%]  (fallthru)
;; Pred edge  21 [100.0%] 
(code_label 203 202 240 23 36 "" [2 uses])

(note 240 203 204 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 204 240 205 23 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg/v:DI 136 [ rh.254 ])
                (plus:DI (reg:DI 147 [ D.5348 ])
                    (reg:DI 221)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 221)
        (expr_list:REG_DEAD (reg:DI 147 [ D.5348 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 205 204 206 23 arch/arm/vfp/vfpdouble.c:841 (parallel [
            (set (reg:DI 222)
                (plus:DI (reg/v:DI 136 [ rh.254 ])
                    (reg:DI 148 [ iftmp.83 ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 148 [ iftmp.83 ])
        (expr_list:REG_DEAD (reg/v:DI 136 [ rh.254 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 206 205 207 23 arch/arm/vfp/vfpdouble.c:841 (set (reg:DI 223)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 207 206 208 23 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 224 [ rl.256 ])
        (subreg:SI (reg/v:DI 134 [ rl.256 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 208 207 209 23 arch/arm/vfp/vfpdouble.c:841 (set (reg:SI 224 [ rl.256 ])
        (ior:SI (reg:SI 224 [ rl.256 ])
            (subreg:SI (reg/v:DI 134 [ rl.256 ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 134 [ rl.256 ])
        (nil)))

(insn 209 208 210 23 arch/arm/vfp/vfpdouble.c:841 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 224 [ rl.256 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 224 [ rl.256 ])
        (nil)))

(jump_insn 210 209 241 23 arch/arm/vfp/vfpdouble.c:841 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 212)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 23 -> ( 25 24)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; rd  out 	(57)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 220, 221, 224, 225, 226, 227


;; Succ edge  25 [50.0%] 
;; Succ edge  24 [50.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u234(11){ }u235(13){ }u236(25){ }u237(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 223
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222
;; live  gen 	 223
;; live  kill	
;; rd  in  	(57)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 220, 221, 224, 225, 226, 227
;; rd  gen 	(1)
219
;; rd  kill	(2)
219, 220

;; Pred edge  23 [50.0%]  (fallthru)
(note 241 210 211 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 211 241 212 24 arch/arm/vfp/vfpdouble.c:841 (set (reg:DI 223)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 24 -> ( 25)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; rd  out 	(57)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 219, 221, 224, 225, 226, 227


;; Succ edge  25 [100.0%]  (fallthru)

;; Start of basic block ( 23 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u238(11){ }u239(13){ }u240(25){ }u241(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 222 223
;; lr  def 	 153 225
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 155 222 223
;; live  gen 	 153 225
;; live  kill	
;; rd  in  	(58)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227
;; rd  gen 	(2)
170, 223
;; rd  kill	(5)
169, 170, 171, 172, 223

;; Pred edge  23 [50.0%] 
;; Pred edge  24 [100.0%]  (fallthru)
(code_label 212 211 242 25 38 "" [1 uses])

(note 242 212 213 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 213 242 214 25 arch/arm/vfp/vfpdouble.c:841 (set (reg:DI 225)
        (ior:DI (reg:DI 222)
            (reg:DI 223))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 223)
        (expr_list:REG_DEAD (reg:DI 222)
            (nil))))

(insn 214 213 215 25 arch/arm/vfp/vfpdouble.c:841 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 155 [ vdd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 225)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 225)
        (expr_list:REG_DEAD (reg/v/f:SI 155 [ vdd ])
            (nil))))

(insn 215 214 216 25 arch/arm/vfp/vfpdouble.c:844 (set (reg:SI 153 [ D.4793 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; rd  out 	(60)
4, 8, 12, 16, 17, 19, 20, 21, 32, 49, 50, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227


;; Succ edge  26 [100.0%]  (fallthru)

;; Start of basic block ( 25 11 10 13) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u246(11){ }u247(13){ }u248(25){ }u249(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 153
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(84)
1, 4, 5, 8, 9, 12, 13, 16, 17, 19, 20, 21, 32, 42, 43, 49, 50, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227
;; rd  gen 	(1)
0
;; rd  kill	(5)
0, 1, 2, 3, 4

;; Pred edge  25 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
;; Pred edge  10 [100.0%] 
;; Pred edge  13 [100.0%] 
(code_label 216 215 217 26 31 "" [3 uses])

(note 217 216 222 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 222 217 228 26 arch/arm/vfp/vfpdouble.c:845 (set (reg/i:SI 0 r0)
        (reg:SI 153 [ D.4793 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 153 [ D.4793 ])
        (nil)))

(insn 228 222 0 26 arch/arm/vfp/vfpdouble.c:845 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 26 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(83)
0, 5, 8, 9, 12, 13, 16, 17, 19, 20, 21, 32, 42, 43, 49, 50, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_cpdo (vfp_double_cpdo)[0:184]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 42 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 42 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 29 count 44 (    2)


vfp_double_cpdo

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,5u} r1={3d,2u} r2={3d,1u} r3={3d,1u} r11={1d,21u} r12={2d} r13={1d,22u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={10d,9u} r25={1d,21u} r26={1d,20u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r135={1d,1u} r136={1d,1u} r137={2d,3u} r138={1d,3u} r139={2d,1u} r140={2d,3u} r141={3d,3u} r142={2d,3u} r143={3d,4u} r144={3d,2u} r145={1d,1u,1d} r146={1d,1u} r147={1d,2u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,3u} r152={1d,2u} r153={1d,2u} r155={1d,9u,1d} r156={1d,3u} r158={1d,1u} r159={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u,1d} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u,1d} r174={1d,1u} r176={1d,1u} r178={1d,1u} r180={1d,1u} r182={1d,1u} r183={1d,1u} r185={1d,1u} r187={1d,1u} r189={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r205={1d,2u} r206={1d,2u} r207={1d,2u} r208={1d,2u} 
;;    total ref usage 411{211d,196u,4e} in 99{98 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140
0[0,4] 1[4,3] 2[7,3] 3[10,3] 11[13,1] 12[14,2] 13[16,1] 14[17,2] 15[19,1] 16[20,1] 17[21,1] 18[22,1] 19[23,1] 20[24,1] 21[25,1] 22[26,1] 23[27,1] 24[28,10] 25[38,1] 26[39,1] 27[40,1] 28[41,1] 29[42,1] 30[43,1] 31[44,1] 32[45,1] 33[46,1] 34[47,1] 35[48,1] 36[49,1] 37[50,1] 38[51,1] 39[52,1] 40[53,1] 41[54,1] 42[55,1] 43[56,1] 44[57,1] 45[58,1] 46[59,1] 47[60,1] 48[61,1] 49[62,1] 50[63,1] 51[64,1] 52[65,1] 53[66,1] 54[67,1] 55[68,1] 56[69,1] 57[70,1] 58[71,1] 59[72,1] 60[73,1] 61[74,1] 62[75,1] 63[76,1] 64[77,1] 65[78,1] 66[79,1] 67[80,1] 68[81,1] 69[82,1] 70[83,1] 71[84,1] 72[85,1] 73[86,1] 74[87,1] 75[88,1] 76[89,1] 77[90,1] 78[91,1] 79[92,1] 80[93,1] 81[94,1] 82[95,1] 83[96,1] 84[97,1] 85[98,1] 86[99,1] 87[100,1] 88[101,1] 89[102,1] 90[103,1] 91[104,1] 92[105,1] 93[106,1] 94[107,1] 95[108,1] 96[109,1] 97[110,1] 98[111,1] 99[112,1] 100[113,1] 101[114,1] 102[115,1] 103[116,1] 104[117,1] 105[118,1] 106[119,1] 107[120,1] 108[121,1] 109[122,1] 110[123,1] 111[124,1] 112[125,1] 113[126,1] 114[127,1] 115[128,1] 116[129,1] 117[130,1] 118[131,1] 119[132,1] 120[133,1] 121[134,1] 122[135,1] 123[136,1] 124[137,1] 125[138,1] 126[139,1] 127[140,1] 135[141,1] 136[142,1] 137[143,2] 138[145,1] 139[146,2] 140[148,2] 141[150,3] 142[153,2] 143[155,3] 144[158,3] 145[161,1] 146[162,1] 147[163,1] 148[164,1] 149[165,1] 150[166,1] 151[167,1] 152[168,1] 153[169,1] 155[170,1] 156[171,1] 158[172,1] 159[173,1] 161[174,1] 162[175,1] 163[176,1] 164[177,1] 165[178,1] 167[179,1] 168[180,1] 169[181,1] 170[182,1] 171[183,1] 172[184,1] 173[185,1] 174[186,1] 176[187,1] 178[188,1] 180[189,1] 182[190,1] 183[191,1] 185[192,1] 187[193,1] 189[194,1] 191[195,1] 192[196,1] 193[197,1] 194[198,1] 195[199,1] 196[200,1] 197[201,1] 198[202,1] 199[203,1] 200[204,1] 201[205,1] 202[206,1] 205[207,1] 206[208,1] 207[209,1] 208[210,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d3(0){ }d6(1){ }d9(2){ }d12(3){ }d13(11){ }d15(12){ }d16(13){ }d18(14){ }d38(25){ }d39(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
3, 6, 9, 12, 13, 15, 16, 18, 38, 39
;; rd  kill	(21)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 38, 39
;; lr  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
3, 6, 9, 12, 13, 15, 16, 18, 38, 39

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d13(bb 0 insn -1) }u1(13){ d16(bb 0 insn -1) }u2(25){ d38(bb 0 insn -1) }u3(26){ d39(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 138 145 152 153 155 156 158 159
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 138 145 152 153 155 156 158 159
;; live  kill	
;; rd  in  	(10)
3, 6, 9, 12, 13, 15, 16, 18, 38, 39
;; rd  gen 	(9)
37, 145, 161, 168, 169, 170, 171, 172, 173
;; rd  kill	(18)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 145, 161, 168, 169, 170, 171, 172, 173
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; rd  out 	(19)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 145, 161, 168, 169, 170, 171, 172, 173
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 4
;;      reg 0 { d3(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 5
;;      reg 1 { d6(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 10
;;      reg 155 { d170(bb 2 insn 4) }
;;   eq_note reg 155 { }
;;   UD chains for insn luid 3 uid 11
;;      reg 155 { d170(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 12
;;      reg 155 { d170(bb 2 insn 4) }
;;   UD chains for insn luid 5 uid 13
;;      reg 156 { d171(bb 2 insn 5) }
;;   UD chains for insn luid 6 uid 185
;;      reg 158 { d172(bb 2 insn 13) }
;;   UD chains for insn luid 7 uid 186
;;      reg 24 { d28(bb 2 insn 185) }
;;   UD chains for insn luid 9 uid 26
;;      reg 145 { d161(bb 2 insn 10) }
;;      reg 159 { d173(bb 2 insn 25) }
;;   eq_note reg 145 { }
;;   UD chains for insn luid 10 uid 27
;;      reg 24 { d37(bb 2 insn 26) }

( 2 )->[3]->( 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u17(11){ d13(bb 0 insn -1) }u18(13){ d16(bb 0 insn -1) }u19(25){ d38(bb 0 insn -1) }u20(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153
;; lr  def 	 137 161 162 163 164 165
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; live  gen 	 137 161 162 163 164 165
;; live  kill	
;; rd  in  	(19)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 145, 161, 168, 169, 170, 171, 172, 173
;; rd  gen 	(6)
144, 174, 175, 176, 177, 178
;; rd  kill	(7)
143, 144, 174, 175, 176, 177, 178
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; rd  out 	(25)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 144, 145, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 31
;;      reg 152 { d168(bb 2 insn 12) }
;;   UD chains for insn luid 2 uid 32
;;      reg 153 { d169(bb 2 insn 11) }
;;   UD chains for insn luid 3 uid 33
;;      reg 162 { d175(bb 3 insn 31) }
;;      reg 163 { d176(bb 3 insn 32) }
;;   UD chains for insn luid 4 uid 34
;;      reg 164 { d177(bb 3 insn 33) }
;;   UD chains for insn luid 5 uid 35
;;      reg 161 { d174(bb 3 insn 30) }
;;      reg 165 { d178(bb 3 insn 34) }
;;   eq_note reg 165 { }

( 2 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u29(11){ d13(bb 0 insn -1) }u30(13){ d16(bb 0 insn -1) }u31(25){ d38(bb 0 insn -1) }u32(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 137 167 168 169 170 171 172 173
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; live  gen 	 137 167 168 169 170 171 172 173
;; live  kill	
;; rd  in  	(19)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 145, 161, 168, 169, 170, 171, 172, 173
;; rd  gen 	(8)
143, 179, 180, 181, 182, 183, 184, 185
;; rd  kill	(9)
143, 144, 179, 180, 181, 182, 183, 184, 185
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; rd  out 	(27)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 143, 145, 161, 168, 169, 170, 171, 172, 173, 179, 180, 181, 182, 183, 184, 185
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 42
;;      reg 155 { d170(bb 2 insn 4) }
;;   UD chains for insn luid 2 uid 43
;;      reg 168 { d180(bb 4 insn 42) }
;;   UD chains for insn luid 3 uid 44
;;      reg 155 { d170(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 45
;;      reg 170 { d182(bb 4 insn 44) }
;;   UD chains for insn luid 5 uid 46
;;      reg 169 { d181(bb 4 insn 43) }
;;      reg 171 { d183(bb 4 insn 45) }
;;   UD chains for insn luid 6 uid 47
;;      reg 172 { d184(bb 4 insn 46) }
;;   UD chains for insn luid 7 uid 48
;;      reg 167 { d179(bb 4 insn 41) }
;;      reg 173 { d185(bb 4 insn 47) }
;;   eq_note reg 173 { }

( 4 3 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u43(11){ d13(bb 0 insn -1) }u44(13){ d16(bb 0 insn -1) }u45(25){ d38(bb 0 insn -1) }u46(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 155
;; lr  def 	 24 [cc] 151 174 205 206
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; live  gen 	 24 [cc] 151 174 205 206
;; live  kill	
;; rd  in  	(33)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 143, 144, 145, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185
;; rd  gen 	(5)
36, 167, 186, 207, 208
;; rd  kill	(14)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 167, 186, 207, 208
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; rd  out 	(37)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 207, 208
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 51
;;      reg 137 { d144(bb 3 insn 35) d143(bb 4 insn 48) }
;;   UD chains for insn luid 1 uid 52
;;      reg 151 { d167(bb 5 insn 51) }
;;   UD chains for insn luid 2 uid 53
;;      reg 174 { d186(bb 5 insn 52) }
;;   UD chains for insn luid 3 uid 174
;;      reg 155 { d170(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 177
;;      reg 155 { d170(bb 2 insn 4) }
;;   UD chains for insn luid 5 uid 54
;;      reg 24 { d36(bb 5 insn 53) }

( 5 )->[6]->( 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u53(11){ d13(bb 0 insn -1) }u54(13){ d16(bb 0 insn -1) }u55(25){ d38(bb 0 insn -1) }u56(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 205 206
;; lr  def 	 143 176 178
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; live  gen 	 143 176 178
;; live  kill	
;; rd  in  	(37)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 207, 208
;; rd  gen 	(3)
157, 187, 188
;; rd  kill	(5)
155, 156, 157, 187, 188
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; rd  out 	(40)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 207, 208
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 57
;;      reg 205 { d207(bb 5 insn 174) }
;;   UD chains for insn luid 1 uid 59
;;      reg 206 { d208(bb 5 insn 177) }
;;   UD chains for insn luid 2 uid 60
;;      reg 176 { d187(bb 6 insn 57) }
;;      reg 178 { d188(bb 6 insn 59) }

( 5 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u61(11){ d13(bb 0 insn -1) }u62(13){ d16(bb 0 insn -1) }u63(25){ d38(bb 0 insn -1) }u64(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 205 206
;; lr  def 	 143 180 182
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; live  gen 	 143 180 182
;; live  kill	
;; rd  in  	(37)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 207, 208
;; rd  gen 	(3)
156, 189, 190
;; rd  kill	(5)
155, 156, 157, 189, 190
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; rd  out 	(40)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 156, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 207, 208
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 66
;;      reg 205 { d207(bb 5 insn 174) }
;;   UD chains for insn luid 1 uid 68
;;      reg 206 { d208(bb 5 insn 177) }
;;   UD chains for insn luid 2 uid 69
;;      reg 180 { d189(bb 7 insn 66) }
;;      reg 182 { d190(bb 7 insn 68) }

( 7 6 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u69(11){ d13(bb 0 insn -1) }u70(13){ d16(bb 0 insn -1) }u71(25){ d38(bb 0 insn -1) }u72(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 155
;; lr  def 	 24 [cc] 183 207 208
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; live  gen 	 24 [cc] 183 207 208
;; live  kill	
;; rd  in  	(43)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 207, 208
;; rd  gen 	(4)
35, 191, 209, 210
;; rd  kill	(13)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 191, 209, 210
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; rd  out 	(46)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 72
;;      reg 151 { d167(bb 5 insn 51) }
;;   UD chains for insn luid 1 uid 73
;;      reg 183 { d191(bb 8 insn 72) }
;;   UD chains for insn luid 2 uid 180
;;      reg 155 { d170(bb 2 insn 4) }
;;   UD chains for insn luid 3 uid 183
;;      reg 155 { d170(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 74
;;      reg 24 { d35(bb 8 insn 73) }

( 8 )->[9]->( 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u78(11){ d13(bb 0 insn -1) }u79(13){ d16(bb 0 insn -1) }u80(25){ d38(bb 0 insn -1) }u81(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 207 208
;; lr  def 	 141 185 187
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; live  gen 	 141 185 187
;; live  kill	
;; rd  in  	(46)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 207, 208, 209, 210
;; rd  gen 	(3)
152, 192, 193
;; rd  kill	(5)
150, 151, 152, 192, 193
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; rd  out 	(49)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 77
;;      reg 207 { d209(bb 8 insn 180) }
;;   UD chains for insn luid 1 uid 79
;;      reg 208 { d210(bb 8 insn 183) }
;;   UD chains for insn luid 2 uid 80
;;      reg 185 { d192(bb 9 insn 77) }
;;      reg 187 { d193(bb 9 insn 79) }

( 8 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u86(11){ d13(bb 0 insn -1) }u87(13){ d16(bb 0 insn -1) }u88(25){ d38(bb 0 insn -1) }u89(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 207 208
;; lr  def 	 141 189
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; live  gen 	 141 189
;; live  kill	
;; rd  in  	(46)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 207, 208, 209, 210
;; rd  gen 	(2)
150, 194
;; rd  kill	(4)
150, 151, 152, 194
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; rd  out 	(48)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 150, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 86
;;      reg 207 { d209(bb 8 insn 180) }
;;   UD chains for insn luid 1 uid 88
;;      reg 189 { d194(bb 10 insn 86) }
;;      reg 208 { d210(bb 8 insn 183) }

( 10 9 )->[11]->( 14 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u93(11){ d13(bb 0 insn -1) }u94(13){ d16(bb 0 insn -1) }u95(25){ d38(bb 0 insn -1) }u96(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 191
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; live  gen 	 24 [cc] 191
;; live  kill	
;; rd  in  	(51)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 207, 208, 209, 210
;; rd  gen 	(2)
34, 195
;; rd  kill	(11)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 195
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; rd  out 	(52)
3, 6, 9, 12, 13, 15, 16, 18, 34, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 91
;;      reg 151 { d167(bb 5 insn 51) }
;;   UD chains for insn luid 1 uid 92
;;      reg 191 { d195(bb 11 insn 91) }
;;   UD chains for insn luid 2 uid 93
;;      reg 24 { d34(bb 11 insn 92) }

( 11 )->[12]->( 14 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u100(11){ d13(bb 0 insn -1) }u101(13){ d16(bb 0 insn -1) }u102(25){ d38(bb 0 insn -1) }u103(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 192
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  gen 	 24 [cc] 192
;; live  kill	
;; rd  in  	(52)
3, 6, 9, 12, 13, 15, 16, 18, 34, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 207, 208, 209, 210
;; rd  gen 	(2)
33, 196
;; rd  kill	(11)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 196
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; rd  out 	(53)
3, 6, 9, 12, 13, 15, 16, 18, 33, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 95
;;      reg 143 { d157(bb 6 insn 60) d156(bb 7 insn 69) }
;;   UD chains for insn luid 1 uid 96
;;      reg 192 { d196(bb 12 insn 95) }
;;   UD chains for insn luid 2 uid 97
;;      reg 24 { d33(bb 12 insn 96) }

( 12 )->[13]->( 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u107(11){ d13(bb 0 insn -1) }u108(13){ d16(bb 0 insn -1) }u109(25){ d38(bb 0 insn -1) }u110(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  gen 	 139
;; live  kill	
;; rd  in  	(53)
3, 6, 9, 12, 13, 15, 16, 18, 33, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210
;; rd  gen 	(1)
147
;; rd  kill	(2)
146, 147
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; rd  out 	(54)
3, 6, 9, 12, 13, 15, 16, 18, 33, 38, 39, 143, 144, 145, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 99
;;      reg 156 { d171(bb 2 insn 5) }

( 12 11 )->[14]->( 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u112(11){ d13(bb 0 insn -1) }u113(13){ d16(bb 0 insn -1) }u114(25){ d38(bb 0 insn -1) }u115(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  gen 	 139
;; live  kill	
;; rd  in  	(54)
3, 6, 9, 12, 13, 15, 16, 18, 33, 34, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210
;; rd  gen 	(1)
146
;; rd  kill	(2)
146, 147
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; rd  out 	(55)
3, 6, 9, 12, 13, 15, 16, 18, 33, 34, 38, 39, 143, 144, 145, 146, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }

( 14 13 )->[15]->( 16 17 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u116(11){ d13(bb 0 insn -1) }u117(13){ d16(bb 0 insn -1) }u118(25){ d38(bb 0 insn -1) }u119(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 193
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  gen 	 24 [cc] 193
;; live  kill	
;; rd  in  	(56)
3, 6, 9, 12, 13, 15, 16, 18, 33, 34, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210
;; rd  gen 	(2)
32, 197
;; rd  kill	(11)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 197
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; rd  out 	(56)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 107
;;      reg 137 { d144(bb 3 insn 35) d143(bb 4 insn 48) }
;;   UD chains for insn luid 1 uid 108
;;      reg 193 { d197(bb 15 insn 107) }
;;   UD chains for insn luid 2 uid 109
;;      reg 24 { d32(bb 15 insn 108) }

( 15 )->[16]->( 21 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u123(11){ d13(bb 0 insn -1) }u124(13){ d16(bb 0 insn -1) }u125(25){ d38(bb 0 insn -1) }u126(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 144
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 144
;; live  kill	
;; rd  in  	(56)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 207, 208, 209, 210
;; rd  gen 	(1)
160
;; rd  kill	(3)
158, 159, 160
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144
;; rd  out 	(57)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 160, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }

( 15 )->[17]->( 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u127(11){ d13(bb 0 insn -1) }u128(13){ d16(bb 0 insn -1) }u129(25){ d38(bb 0 insn -1) }u130(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153
;; lr  def 	 140 142 144 194 195
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  gen 	 140 142 144 194 195
;; live  kill	
;; rd  in  	(56)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 207, 208, 209, 210
;; rd  gen 	(5)
149, 154, 158, 198, 199
;; rd  kill	(9)
148, 149, 153, 154, 158, 159, 160, 198, 199
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; rd  out 	(61)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 149, 150, 152, 154, 156, 157, 158, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 116
;;      reg 152 { d168(bb 2 insn 12) }
;;   UD chains for insn luid 1 uid 117
;;      reg 153 { d169(bb 2 insn 11) }
;;   UD chains for insn luid 2 uid 118
;;      reg 194 { d198(bb 17 insn 116) }
;;      reg 195 { d199(bb 17 insn 117) }
;;   UD chains for insn luid 4 uid 120
;;      reg 140 { d149(bb 17 insn 119) }

( 17 20 )->[18]->( 19 20 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u136(11){ d13(bb 0 insn -1) }u137(13){ d16(bb 0 insn -1) }u138(25){ d38(bb 0 insn -1) }u139(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 142 143 144 156
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 142 143 144 147 148 149 150 196 197 198 199 200
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 135 136 142 143 144 147 148 149 150 196 197 198 199 200
;; live  kill	 14 [lr]
;; rd  in  	(82)
1, 3, 6, 9, 12, 13, 15, 16, 18, 29, 32, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;; rd  gen 	(16)
1, 30, 141, 142, 153, 155, 159, 163, 164, 165, 166, 200, 201, 202, 203, 204
;; rd  kill	(35)
0, 1, 2, 3, 17, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 141, 142, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 200, 201, 202, 203, 204
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 147 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 147 156
;; rd  out 	(75)
1, 6, 9, 12, 13, 15, 16, 30, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 122
;;      reg 137 { d144(bb 3 insn 35) d143(bb 4 insn 48) }
;;   UD chains for insn luid 1 uid 123
;;      reg 143 { d157(bb 6 insn 60) d156(bb 7 insn 69) d155(bb 18 insn 134) }
;;   UD chains for insn luid 2 uid 124
;;      reg 142 { d154(bb 17 insn 118) d153(bb 18 insn 139) }
;;   UD chains for insn luid 3 uid 125
;;      reg 141 { d152(bb 9 insn 80) d151(bb 19 insn 147) d150(bb 10 insn 88) }
;;   UD chains for insn luid 4 uid 126
;;      reg 156 { d171(bb 2 insn 5) }
;;   UD chains for insn luid 5 uid 127
;;      reg 13 { d16(bb 0 insn -1) }
;;      reg 0 { d2(bb 18 insn 123) }
;;      reg 1 { d5(bb 18 insn 124) }
;;      reg 2 { d8(bb 18 insn 125) }
;;      reg 3 { d11(bb 18 insn 126) }
;;      reg 196 { d200(bb 18 insn 122) }
;;   UD chains for insn luid 6 uid 128
;;      reg 0 { d1(bb 18 insn 127) }
;;   UD chains for insn luid 7 uid 129
;;      reg 136 { d142(bb 18 insn 128) }
;;      reg 144 { d159(bb 18 insn 129) d158(bb 17 insn 120) }
;;   UD chains for insn luid 8 uid 130
;;      reg 143 { d157(bb 6 insn 60) d156(bb 7 insn 69) d155(bb 18 insn 134) }
;;   UD chains for insn luid 9 uid 131
;;      reg 143 { d157(bb 6 insn 60) d156(bb 7 insn 69) d155(bb 18 insn 134) }
;;   UD chains for insn luid 10 uid 132
;;      reg 138 { d145(bb 2 insn 186) }
;;      reg 197 { d201(bb 18 insn 131) }
;;   UD chains for insn luid 11 uid 133
;;      reg 198 { d202(bb 18 insn 132) }
;;   UD chains for insn luid 12 uid 134
;;      reg 135 { d141(bb 18 insn 130) }
;;      reg 150 { d166(bb 18 insn 133) }
;;   UD chains for insn luid 13 uid 135
;;      reg 142 { d154(bb 17 insn 118) d153(bb 18 insn 139) }
;;   UD chains for insn luid 14 uid 136
;;      reg 142 { d154(bb 17 insn 118) d153(bb 18 insn 139) }
;;   UD chains for insn luid 15 uid 137
;;      reg 138 { d145(bb 2 insn 186) }
;;      reg 199 { d203(bb 18 insn 136) }
;;   UD chains for insn luid 16 uid 138
;;      reg 200 { d204(bb 18 insn 137) }
;;   UD chains for insn luid 17 uid 139
;;      reg 148 { d164(bb 18 insn 138) }
;;      reg 149 { d165(bb 18 insn 135) }
;;   UD chains for insn luid 18 uid 140
;;      reg 141 { d152(bb 9 insn 80) d151(bb 19 insn 147) d150(bb 10 insn 88) }
;;   UD chains for insn luid 19 uid 141
;;      reg 147 { d163(bb 18 insn 140) }
;;   UD chains for insn luid 20 uid 142
;;      reg 24 { d30(bb 18 insn 141) }

( 18 )->[19]->( 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u171(11){ d13(bb 0 insn -1) }u172(13){ d16(bb 0 insn -1) }u173(25){ d38(bb 0 insn -1) }u174(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 147 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141 147
;; lr  def 	 141 146 201 202
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 147 156
;; live  gen 	 141 146 201 202
;; live  kill	
;; rd  in  	(75)
1, 6, 9, 12, 13, 15, 16, 30, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;; rd  gen 	(4)
151, 162, 205, 206
;; rd  kill	(6)
150, 151, 152, 162, 205, 206
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; rd  out 	(73)
1, 6, 9, 12, 13, 15, 16, 30, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 144
;;      reg 141 { d152(bb 9 insn 80) d151(bb 19 insn 147) d150(bb 10 insn 88) }
;;   UD chains for insn luid 1 uid 145
;;      reg 138 { d145(bb 2 insn 186) }
;;      reg 201 { d205(bb 19 insn 144) }
;;   UD chains for insn luid 2 uid 146
;;      reg 202 { d206(bb 19 insn 145) }
;;   UD chains for insn luid 3 uid 147
;;      reg 146 { d162(bb 19 insn 146) }
;;      reg 147 { d163(bb 18 insn 140) }

( 18 19 )->[20]->( 18 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u181(11){ d13(bb 0 insn -1) }u182(13){ d16(bb 0 insn -1) }u183(25){ d38(bb 0 insn -1) }u184(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140
;; lr  def 	 24 [cc] 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  gen 	 24 [cc] 140
;; live  kill	
;; rd  in  	(75)
1, 6, 9, 12, 13, 15, 16, 30, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;; rd  gen 	(2)
29, 148
;; rd  kill	(12)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 148, 149
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; rd  out 	(74)
1, 6, 9, 12, 13, 15, 16, 29, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 150
;;      reg 140 { d149(bb 17 insn 119) d148(bb 20 insn 150) }
;;   UD chains for insn luid 1 uid 152
;;      reg 139 { d147(bb 13 insn 99) d146(bb 14 insn 104) }
;;      reg 140 { d148(bb 20 insn 150) }
;;   UD chains for insn luid 2 uid 153
;;      reg 24 { d29(bb 20 insn 152) }

( 20 16 )->[21]->( 1 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u189(11){ d13(bb 0 insn -1) }u190(13){ d16(bb 0 insn -1) }u191(25){ d38(bb 0 insn -1) }u192(26){ d39(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(80)
1, 3, 6, 9, 12, 13, 15, 16, 18, 29, 32, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;; rd  gen 	(1)
0
;; rd  kill	(4)
0, 1, 2, 3
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(79)
0, 6, 9, 12, 13, 15, 16, 18, 29, 32, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }
;;   reg 26 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 160
;;      reg 144 { d160(bb 16 insn 111) d159(bb 18 insn 129) }
;;   UD chains for insn luid 1 uid 166
;;      reg 0 { d0(bb 21 insn 160) }

( 21 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u195(0){ d0(bb 21 insn 160) }u196(11){ d13(bb 0 insn -1) }u197(13){ d16(bb 0 insn -1) }u198(14){ d18(bb 0 insn -1) }u199(25){ d38(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(79)
0, 6, 9, 12, 13, 15, 16, 18, 29, 32, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(79)
0, 6, 9, 12, 13, 15, 16, 18, 29, 32, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 21 insn 160) }
;;   reg 11 { d13(bb 0 insn -1) }
;;   reg 13 { d16(bb 0 insn -1) }
;;   reg 14 { d18(bb 0 insn -1) }
;;   reg 25 { d38(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 27 to worklist
  Adding insn 189 to worklist
  Adding insn 54 to worklist
  Adding insn 191 to worklist
  Adding insn 74 to worklist
  Adding insn 193 to worklist
  Adding insn 93 to worklist
  Adding insn 97 to worklist
  Adding insn 195 to worklist
  Adding insn 109 to worklist
  Adding insn 197 to worklist
  Adding insn 142 to worklist
  Adding insn 127 to worklist
  Adding insn 153 to worklist
  Adding insn 166 to worklist
Finished finding needed instructions:
  Adding insn 160 to worklist
Processing use of (reg 144 [ exceptions ]) in insn 160:
  Adding insn 111 to worklist
  Adding insn 129 to worklist
Processing use of (reg 136 [ except ]) in insn 129:
  Adding insn 128 to worklist
Processing use of (reg 144 [ exceptions ]) in insn 129:
  Adding insn 120 to worklist
Processing use of (reg 140 [ vecitr ]) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 0 r0) in insn 128:
Processing use of (reg 0 r0) in insn 166:
Processing use of (reg 24 cc) in insn 153:
  Adding insn 152 to worklist
Processing use of (reg 139 [ veclen ]) in insn 152:
  Adding insn 99 to worklist
  Adding insn 104 to worklist
Processing use of (reg 140 [ vecitr ]) in insn 152:
  Adding insn 150 to worklist
Processing use of (reg 140 [ vecitr ]) in insn 150:
Processing use of (reg 156 [ fpscr ]) in insn 99:
  Adding insn 5 to worklist
Processing use of (reg 1 r1) in insn 5:
Processing use of (reg 13 sp) in insn 127:
Processing use of (reg 0 r0) in insn 127:
  Adding insn 123 to worklist
Processing use of (reg 1 r1) in insn 127:
  Adding insn 124 to worklist
Processing use of (reg 2 r2) in insn 127:
  Adding insn 125 to worklist
Processing use of (reg 3 r3) in insn 127:
  Adding insn 126 to worklist
Processing use of (reg 196 [ <variable>.fn ]) in insn 127:
  Adding insn 122 to worklist
Processing use of (reg 137 [ fop ]) in insn 122:
  Adding insn 35 to worklist
  Adding insn 48 to worklist
Processing use of (reg 167) in insn 48:
  Adding insn 41 to worklist
Processing use of (reg 173) in insn 48:
  Adding insn 47 to worklist
Processing use of (reg 172) in insn 47:
  Adding insn 46 to worklist
Processing use of (reg 169) in insn 46:
  Adding insn 43 to worklist
Processing use of (reg 171) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 170) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 155 [ inst ]) in insn 44:
  Adding insn 4 to worklist
Processing use of (reg 0 r0) in insn 4:
Processing use of (reg 168) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 155 [ inst ]) in insn 42:
Processing use of (reg 161) in insn 35:
  Adding insn 30 to worklist
Processing use of (reg 165) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 164) in insn 34:
  Adding insn 33 to worklist
Processing use of (reg 162) in insn 33:
  Adding insn 31 to worklist
Processing use of (reg 163) in insn 33:
  Adding insn 32 to worklist
Processing use of (reg 153 [ D.5133 ]) in insn 32:
  Adding insn 11 to worklist
Processing use of (reg 155 [ inst ]) in insn 11:
Processing use of (reg 152 [ D.5135 ]) in insn 31:
  Adding insn 12 to worklist
Processing use of (reg 155 [ inst ]) in insn 12:
Processing use of (reg 156 [ fpscr ]) in insn 126:
Processing use of (reg 141 [ dm ]) in insn 125:
  Adding insn 80 to worklist
  Adding insn 147 to worklist
  Adding insn 88 to worklist
Processing use of (reg 189) in insn 88:
  Adding insn 86 to worklist
Processing use of (reg 208) in insn 88:
  Adding insn 183 to worklist
Processing use of (reg 155 [ inst ]) in insn 183:
Processing use of (reg 207) in insn 86:
  Adding insn 180 to worklist
Processing use of (reg 155 [ inst ]) in insn 180:
Processing use of (reg 146 [ D.5213 ]) in insn 147:
  Adding insn 146 to worklist
Processing use of (reg 147 [ D.5208 ]) in insn 147:
  Adding insn 140 to worklist
Processing use of (reg 141 [ dm ]) in insn 140:
Processing use of (reg 202) in insn 146:
  Adding insn 145 to worklist
Processing use of (reg 138 [ vecstride ]) in insn 145:
  Adding insn 186 to worklist
Processing use of (reg 201) in insn 145:
  Adding insn 144 to worklist
Processing use of (reg 141 [ dm ]) in insn 144:
Processing use of (reg 24 cc) in insn 186:
  Adding insn 185 to worklist
Processing use of (reg 158) in insn 185:
  Adding insn 13 to worklist
Processing use of (reg 156 [ fpscr ]) in insn 13:
Processing use of (reg 185) in insn 80:
  Adding insn 77 to worklist
Processing use of (reg 187) in insn 80:
  Adding insn 79 to worklist
Processing use of (reg 208) in insn 79:
Processing use of (reg 207) in insn 77:
Processing use of (reg 142 [ dn ]) in insn 124:
  Adding insn 118 to worklist
  Adding insn 139 to worklist
Processing use of (reg 148 [ D.5207 ]) in insn 139:
  Adding insn 138 to worklist
Processing use of (reg 149 [ D.5204 ]) in insn 139:
  Adding insn 135 to worklist
Processing use of (reg 142 [ dn ]) in insn 135:
Processing use of (reg 200) in insn 138:
  Adding insn 137 to worklist
Processing use of (reg 138 [ vecstride ]) in insn 137:
Processing use of (reg 199) in insn 137:
  Adding insn 136 to worklist
Processing use of (reg 142 [ dn ]) in insn 136:
Processing use of (reg 194) in insn 118:
  Adding insn 116 to worklist
Processing use of (reg 195) in insn 118:
  Adding insn 117 to worklist
Processing use of (reg 153 [ D.5133 ]) in insn 117:
Processing use of (reg 152 [ D.5135 ]) in insn 116:
Processing use of (reg 143 [ dest ]) in insn 123:
  Adding insn 60 to worklist
  Adding insn 69 to worklist
  Adding insn 134 to worklist
Processing use of (reg 135 [ temp.297 ]) in insn 134:
  Adding insn 130 to worklist
Processing use of (reg 150 [ D.5203 ]) in insn 134:
  Adding insn 133 to worklist
Processing use of (reg 198) in insn 133:
  Adding insn 132 to worklist
Processing use of (reg 138 [ vecstride ]) in insn 132:
Processing use of (reg 197) in insn 132:
  Adding insn 131 to worklist
Processing use of (reg 143 [ dest ]) in insn 131:
Processing use of (reg 143 [ dest ]) in insn 130:
Processing use of (reg 180) in insn 69:
  Adding insn 66 to worklist
Processing use of (reg 182) in insn 69:
  Adding insn 68 to worklist
Processing use of (reg 206) in insn 68:
  Adding insn 177 to worklist
Processing use of (reg 155 [ inst ]) in insn 177:
Processing use of (reg 205) in insn 66:
  Adding insn 174 to worklist
Processing use of (reg 155 [ inst ]) in insn 174:
Processing use of (reg 176) in insn 60:
  Adding insn 57 to worklist
Processing use of (reg 178) in insn 60:
  Adding insn 59 to worklist
Processing use of (reg 206) in insn 59:
Processing use of (reg 205) in insn 57:
Processing use of (reg 24 cc) in insn 142:
  Adding insn 141 to worklist
Processing use of (reg 147 [ D.5208 ]) in insn 141:
Processing use of (reg 24 cc) in insn 109:
  Adding insn 108 to worklist
Processing use of (reg 193 [ <variable>.fn ]) in insn 108:
  Adding insn 107 to worklist
Processing use of (reg 137 [ fop ]) in insn 107:
Processing use of (reg 24 cc) in insn 97:
  Adding insn 96 to worklist
Processing use of (reg 192) in insn 96:
  Adding insn 95 to worklist
Processing use of (reg 143 [ dest ]) in insn 95:
Processing use of (reg 24 cc) in insn 93:
  Adding insn 92 to worklist
Processing use of (reg 191) in insn 92:
  Adding insn 91 to worklist
Processing use of (reg 151 [ D.5156 ]) in insn 91:
  Adding insn 51 to worklist
Processing use of (reg 137 [ fop ]) in insn 51:
Processing use of (reg 24 cc) in insn 74:
  Adding insn 73 to worklist
Processing use of (reg 183) in insn 73:
  Adding insn 72 to worklist
Processing use of (reg 151 [ D.5156 ]) in insn 72:
Processing use of (reg 24 cc) in insn 54:
  Adding insn 53 to worklist
Processing use of (reg 174) in insn 53:
  Adding insn 52 to worklist
Processing use of (reg 151 [ D.5156 ]) in insn 52:
Processing use of (reg 24 cc) in insn 27:
  Adding insn 26 to worklist
Processing use of (reg 145 [ op ]) in insn 26:
  Adding insn 10 to worklist
Processing use of (reg 159) in insn 26:
  Adding insn 25 to worklist
Processing use of (reg 155 [ inst ]) in insn 10:


vfp_double_cpdo

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,5u} r1={3d,2u} r2={3d,1u} r3={3d,1u} r11={1d,21u} r12={2d} r13={1d,22u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={10d,9u} r25={1d,21u} r26={1d,20u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r135={1d,1u} r136={1d,1u} r137={2d,3u} r138={1d,3u} r139={2d,1u} r140={2d,3u} r141={3d,3u} r142={2d,3u} r143={3d,4u} r144={3d,2u} r145={1d,1u,1d} r146={1d,1u} r147={1d,2u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,3u} r152={1d,2u} r153={1d,2u} r155={1d,9u,1d} r156={1d,3u} r158={1d,1u} r159={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u,1d} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u,1d} r174={1d,1u} r176={1d,1u} r178={1d,1u} r180={1d,1u} r182={1d,1u} r183={1d,1u} r185={1d,1u} r187={1d,1u} r189={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r205={1d,2u} r206={1d,2u} r207={1d,2u} r208={1d,2u} 
;;    total ref usage 411{211d,196u,4e} in 99{98 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140
0[0,4] 1[4,3] 2[7,3] 3[10,3] 11[13,1] 12[14,2] 13[16,1] 14[17,2] 15[19,1] 16[20,1] 17[21,1] 18[22,1] 19[23,1] 20[24,1] 21[25,1] 22[26,1] 23[27,1] 24[28,10] 25[38,1] 26[39,1] 27[40,1] 28[41,1] 29[42,1] 30[43,1] 31[44,1] 32[45,1] 33[46,1] 34[47,1] 35[48,1] 36[49,1] 37[50,1] 38[51,1] 39[52,1] 40[53,1] 41[54,1] 42[55,1] 43[56,1] 44[57,1] 45[58,1] 46[59,1] 47[60,1] 48[61,1] 49[62,1] 50[63,1] 51[64,1] 52[65,1] 53[66,1] 54[67,1] 55[68,1] 56[69,1] 57[70,1] 58[71,1] 59[72,1] 60[73,1] 61[74,1] 62[75,1] 63[76,1] 64[77,1] 65[78,1] 66[79,1] 67[80,1] 68[81,1] 69[82,1] 70[83,1] 71[84,1] 72[85,1] 73[86,1] 74[87,1] 75[88,1] 76[89,1] 77[90,1] 78[91,1] 79[92,1] 80[93,1] 81[94,1] 82[95,1] 83[96,1] 84[97,1] 85[98,1] 86[99,1] 87[100,1] 88[101,1] 89[102,1] 90[103,1] 91[104,1] 92[105,1] 93[106,1] 94[107,1] 95[108,1] 96[109,1] 97[110,1] 98[111,1] 99[112,1] 100[113,1] 101[114,1] 102[115,1] 103[116,1] 104[117,1] 105[118,1] 106[119,1] 107[120,1] 108[121,1] 109[122,1] 110[123,1] 111[124,1] 112[125,1] 113[126,1] 114[127,1] 115[128,1] 116[129,1] 117[130,1] 118[131,1] 119[132,1] 120[133,1] 121[134,1] 122[135,1] 123[136,1] 124[137,1] 125[138,1] 126[139,1] 127[140,1] 135[141,1] 136[142,1] 137[143,2] 138[145,1] 139[146,2] 140[148,2] 141[150,3] 142[153,2] 143[155,3] 144[158,3] 145[161,1] 146[162,1] 147[163,1] 148[164,1] 149[165,1] 150[166,1] 151[167,1] 152[168,1] 153[169,1] 155[170,1] 156[171,1] 158[172,1] 159[173,1] 161[174,1] 162[175,1] 163[176,1] 164[177,1] 165[178,1] 167[179,1] 168[180,1] 169[181,1] 170[182,1] 171[183,1] 172[184,1] 173[185,1] 174[186,1] 176[187,1] 178[188,1] 180[189,1] 182[190,1] 183[191,1] 185[192,1] 187[193,1] 189[194,1] 191[195,1] 192[196,1] 193[197,1] 194[198,1] 195[199,1] 196[200,1] 197[201,1] 198[202,1] 199[203,1] 200[204,1] 201[205,1] 202[206,1] 205[207,1] 206[208,1] 207[209,1] 208[210,1] 
(note 3 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 138 145 152 153 155 156 158 159
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 138 145 152 153 155 156 158 159
;; live  kill	
;; rd  in  	(10)
3, 6, 9, 12, 13, 15, 16, 18, 38, 39
;; rd  gen 	(9)
37, 145, 161, 168, 169, 170, 171, 172, 173
;; rd  kill	(18)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 145, 161, 168, 169, 170, 171, 172, 173

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 3 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 4 7 5 2 arch/arm/vfp/vfpdouble.c:1126 (set (reg/v:SI 155 [ inst ])
        (reg:SI 0 r0 [ inst ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ inst ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:1126 (set (reg/v:SI 156 [ fpscr ])
        (reg:SI 1 r1 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ fpscr ])
        (nil)))

(note 6 5 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 11 2 arch/arm/vfp/vfpdouble.c:1127 (set (reg/v:SI 145 [ op ])
        (and:SI (reg/v:SI 155 [ inst ])
            (const_int 11534400 [0xb00040]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg/v:SI 155 [ inst ])
            (const_int 11534400 [0xb00040]))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:1130 (set (reg:SI 153 [ D.5133 ])
        (and:SI (reg/v:SI 155 [ inst ])
            (const_int 983040 [0xf0000]))) 67 {*arm_andsi3_insn} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfpdouble.c:1130 (set (reg:SI 152 [ D.5135 ])
        (and:SI (reg/v:SI 155 [ inst ])
            (const_int 128 [0x80]))) 67 {*arm_andsi3_insn} (nil))

(insn 13 12 185 2 arch/arm/vfp/vfpdouble.c:1135 (set (reg:SI 158)
        (and:SI (reg/v:SI 156 [ fpscr ])
            (const_int 3145728 [0x300000]))) 67 {*arm_andsi3_insn} (nil))

(insn 185 13 186 2 arch/arm/vfp/vfpdouble.c:1135 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 158)
            (const_int 3145728 [0x300000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 158)
        (nil)))

(insn 186 185 25 2 arch/arm/vfp/vfpdouble.c:1135 discrim 2 (set (reg/v:SI 138 [ vecstride ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 2 [0x2])
            (const_int 1 [0x1]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 25 186 26 2 arch/arm/vfp/vfpdouble.c:1137 (set (reg:SI 159)
        (const_int 11534400 [0xb00040])) 167 {*arm_movsi_insn} (nil))

(insn 26 25 27 2 arch/arm/vfp/vfpdouble.c:1137 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 145 [ op ])
            (reg:SI 159))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 159)
        (expr_list:REG_DEAD (reg/v:SI 145 [ op ])
            (expr_list:REG_EQUAL (compare:CC (reg/v:SI 145 [ op ])
                    (const_int 11534400 [0xb00040]))
                (nil)))))

(jump_insn 27 26 28 2 arch/arm/vfp/vfpdouble.c:1137 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 38)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; rd  out 	(19)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 145, 161, 168, 169, 170, 171, 172, 173


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  4 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153
;; lr  def 	 137 161 162 163 164 165
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; live  gen 	 137 161 162 163 164 165
;; live  kill	
;; rd  in  	(19)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 145, 161, 168, 169, 170, 171, 172, 173
;; rd  gen 	(6)
144, 174, 175, 176, 177, 178
;; rd  kill	(7)
143, 144, 174, 175, 176, 177, 178

;; Pred edge  2 [28.0%]  (fallthru)
(note 28 27 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 30 28 31 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg/f:SI 161)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 31 30 32 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg:SI 162)
        (lshiftrt:SI (reg:SI 152 [ D.5135 ])
            (const_int 7 [0x7]))) 117 {*arm_shiftsi3} (nil))

(insn 32 31 33 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg:SI 163)
        (lshiftrt:SI (reg:SI 153 [ D.5133 ])
            (const_int 15 [0xf]))) 117 {*arm_shiftsi3} (nil))

(insn 33 32 34 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg:SI 164)
        (ior:SI (reg:SI 162)
            (reg:SI 163))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 163)
        (expr_list:REG_DEAD (reg:SI 162)
            (nil))))

(insn 34 33 35 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg:SI 165)
        (ashift:SI (reg:SI 164)
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 164)
        (nil)))

(insn 35 34 189 3 arch/arm/vfp/vfpdouble.c:1137 discrim 1 (set (reg/v/f:SI 137 [ fop ])
        (plus:SI (reg/f:SI 161)
            (reg:SI 165))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 165)
        (expr_list:REG_DEAD (reg/f:SI 161)
            (expr_list:REG_EQUAL (plus:SI (reg:SI 165)
                    (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                            (const_int 16 [0x10]))))
                (nil)))))

(jump_insn 189 35 190 3 (set (pc)
        (label_ref 49)) -1 (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; rd  out 	(25)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 144, 145, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178


;; Succ edge  5 [100.0%] 

(barrier 190 189 38)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u29(11){ }u30(13){ }u31(25){ }u32(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 137 167 168 169 170 171 172 173
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 152 153 155 156
;; live  gen 	 137 167 168 169 170 171 172 173
;; live  kill	
;; rd  in  	(19)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 145, 161, 168, 169, 170, 171, 172, 173
;; rd  gen 	(8)
143, 179, 180, 181, 182, 183, 184, 185
;; rd  kill	(9)
143, 144, 179, 180, 181, 182, 183, 184, 185

;; Pred edge  2 [72.0%] 
(code_label 38 190 39 4 46 "" [1 uses])

(note 39 38 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 41 39 42 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg/f:SI 167)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 272 [0x110])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 272 [0x110])))
        (nil)))

(insn 42 41 43 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 168)
        (and:SI (reg/v:SI 155 [ inst ])
            (const_int 64 [0x40]))) 67 {*arm_andsi3_insn} (nil))

(insn 43 42 44 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 169)
        (lshiftrt:SI (reg:SI 168)
            (const_int 4 [0x4]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(insn 44 43 45 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 170)
        (and:SI (reg/v:SI 155 [ inst ])
            (const_int 11534336 [0xb00000]))) 67 {*arm_andsi3_insn} (nil))

(insn 45 44 46 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 171)
        (lshiftrt:SI (reg:SI 170)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 170)
        (nil)))

(insn 46 45 47 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 172)
        (ior:SI (reg:SI 169)
            (reg:SI 171))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 171)
        (expr_list:REG_DEAD (reg:SI 169)
            (nil))))

(insn 47 46 48 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg:SI 173)
        (ashift:SI (reg:SI 172)
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 172)
        (nil)))

(insn 48 47 49 4 arch/arm/vfp/vfpdouble.c:1137 discrim 2 (set (reg/v/f:SI 137 [ fop ])
        (plus:SI (reg/f:SI 167)
            (reg:SI 173))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 173)
        (expr_list:REG_DEAD (reg/f:SI 167)
            (expr_list:REG_EQUAL (plus:SI (reg:SI 173)
                    (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                            (const_int 272 [0x110]))))
                (nil)))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; rd  out 	(27)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 143, 145, 161, 168, 169, 170, 171, 172, 173, 179, 180, 181, 182, 183, 184, 185


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u43(11){ }u44(13){ }u45(25){ }u46(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 155
;; lr  def 	 24 [cc] 151 174 205 206
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 152 153 155 156
;; live  gen 	 24 [cc] 151 174 205 206
;; live  kill	
;; rd  in  	(33)
3, 6, 9, 12, 13, 15, 16, 18, 37, 38, 39, 143, 144, 145, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185
;; rd  gen 	(5)
36, 167, 186, 207, 208
;; rd  kill	(14)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 167, 186, 207, 208

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 49 48 50 5 47 "" [1 uses])

(note 50 49 51 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 5 arch/arm/vfp/vfpdouble.c:1143 (set (reg:SI 151 [ D.5156 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 137 [ fop ])
                (const_int 4 [0x4])) [0 <variable>.flags+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 52 51 53 5 arch/arm/vfp/vfpdouble.c:1143 (set (reg:SI 174)
        (and:SI (reg:SI 151 [ D.5156 ])
            (const_int 2 [0x2]))) 67 {*arm_andsi3_insn} (nil))

(insn 53 52 174 5 arch/arm/vfp/vfpdouble.c:1143 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 174)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 174)
        (nil)))

(insn 174 53 177 5 (set (reg:SI 205)
        (and:SI (reg/v:SI 155 [ inst ])
            (const_int 4194304 [0x400000]))) 67 {*arm_andsi3_insn} (nil))

(insn 177 174 54 5 (set (reg:SI 206)
        (and:SI (reg/v:SI 155 [ inst ])
            (const_int 61440 [0xf000]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 54 177 55 5 arch/arm/vfp/vfpdouble.c:1143 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; rd  out 	(37)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 207, 208


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u53(11){ }u54(13){ }u55(25){ }u56(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 205 206
;; lr  def 	 143 176 178
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; live  gen 	 143 176 178
;; live  kill	
;; rd  in  	(37)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 207, 208
;; rd  gen 	(3)
157, 187, 188
;; rd  kill	(5)
155, 156, 157, 187, 188

;; Pred edge  5 [50.0%]  (fallthru)
(note 55 54 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 57 55 59 6 arch/arm/vfp/vfpdouble.c:1144 (set (reg:SI 176)
        (lshiftrt:SI (reg:SI 205)
            (const_int 22 [0x16]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 205)
        (nil)))

(insn 59 57 60 6 arch/arm/vfp/vfpdouble.c:1144 (set (reg:SI 178)
        (lshiftrt:SI (reg:SI 206)
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 206)
        (nil)))

(insn 60 59 191 6 arch/arm/vfp/vfpdouble.c:1144 (set (reg/v:SI 143 [ dest ])
        (ior:SI (reg:SI 176)
            (reg:SI 178))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 178)
        (expr_list:REG_DEAD (reg:SI 176)
            (nil))))

(jump_insn 191 60 192 6 (set (pc)
        (label_ref 70)) -1 (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; rd  out 	(40)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 207, 208


;; Succ edge  8 [100.0%] 

(barrier 192 191 63)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u61(11){ }u62(13){ }u63(25){ }u64(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 205 206
;; lr  def 	 143 180 182
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 151 152 153 155 156 205 206
;; live  gen 	 143 180 182
;; live  kill	
;; rd  in  	(37)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 207, 208
;; rd  gen 	(3)
156, 189, 190
;; rd  kill	(5)
155, 156, 157, 189, 190

;; Pred edge  5 [50.0%] 
(code_label 63 192 64 7 48 "" [1 uses])

(note 64 63 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 66 64 68 7 arch/arm/vfp/vfpdouble.c:1146 (set (reg:SI 180)
        (lshiftrt:SI (reg:SI 205)
            (const_int 18 [0x12]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 205)
        (nil)))

(insn 68 66 69 7 arch/arm/vfp/vfpdouble.c:1146 (set (reg:SI 182)
        (lshiftrt:SI (reg:SI 206)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 206)
        (nil)))

(insn 69 68 70 7 arch/arm/vfp/vfpdouble.c:1146 (set (reg/v:SI 143 [ dest ])
        (ior:SI (reg:SI 180)
            (reg:SI 182))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 182)
        (expr_list:REG_DEAD (reg:SI 180)
            (nil))))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; rd  out 	(40)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 156, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 207, 208


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u69(11){ }u70(13){ }u71(25){ }u72(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 155
;; lr  def 	 24 [cc] 183 207 208
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 155 156
;; live  gen 	 24 [cc] 183 207 208
;; live  kill	
;; rd  in  	(43)
3, 6, 9, 12, 13, 15, 16, 18, 36, 38, 39, 143, 144, 145, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 207, 208
;; rd  gen 	(4)
35, 191, 209, 210
;; rd  kill	(13)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 191, 209, 210

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 70 69 71 8 49 "" [1 uses])

(note 71 70 72 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 72 71 73 8 arch/arm/vfp/vfpdouble.c:1151 (set (reg:SI 183)
        (and:SI (reg:SI 151 [ D.5156 ])
            (const_int 4 [0x4]))) 67 {*arm_andsi3_insn} (nil))

(insn 73 72 180 8 arch/arm/vfp/vfpdouble.c:1151 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 183)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 183)
        (nil)))

(insn 180 73 183 8 (set (reg:SI 207)
        (and:SI (reg/v:SI 155 [ inst ])
            (const_int 32 [0x20]))) 67 {*arm_andsi3_insn} (nil))

(insn 183 180 74 8 (set (reg:SI 208)
        (and:SI (reg/v:SI 155 [ inst ])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 155 [ inst ])
        (nil)))

(jump_insn 74 183 75 8 arch/arm/vfp/vfpdouble.c:1151 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 83)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; rd  out 	(46)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 207, 208, 209, 210


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u78(11){ }u79(13){ }u80(25){ }u81(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 207 208
;; lr  def 	 141 185 187
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; live  gen 	 141 185 187
;; live  kill	
;; rd  in  	(46)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 207, 208, 209, 210
;; rd  gen 	(3)
152, 192, 193
;; rd  kill	(5)
150, 151, 152, 192, 193

;; Pred edge  8 [50.0%]  (fallthru)
(note 75 74 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 77 75 79 9 arch/arm/vfp/vfpdouble.c:1152 (set (reg:SI 185)
        (lshiftrt:SI (reg:SI 207)
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 207)
        (nil)))

(insn 79 77 80 9 arch/arm/vfp/vfpdouble.c:1152 (set (reg:SI 187)
        (ashift:SI (reg:SI 208)
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 208)
        (nil)))

(insn 80 79 193 9 arch/arm/vfp/vfpdouble.c:1152 (set (reg/v:SI 141 [ dm ])
        (ior:SI (reg:SI 185)
            (reg:SI 187))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 187)
        (expr_list:REG_DEAD (reg:SI 185)
            (nil))))

(jump_insn 193 80 194 9 (set (pc)
        (label_ref 89)) -1 (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; rd  out 	(49)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 207, 208, 209, 210


;; Succ edge  11 [100.0%] 

(barrier 194 193 83)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u86(11){ }u87(13){ }u88(25){ }u89(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 207 208
;; lr  def 	 141 189
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 143 151 152 153 156 207 208
;; live  gen 	 141 189
;; live  kill	
;; rd  in  	(46)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 207, 208, 209, 210
;; rd  gen 	(2)
150, 194
;; rd  kill	(4)
150, 151, 152, 194

;; Pred edge  8 [50.0%] 
(code_label 83 194 84 10 50 "" [1 uses])

(note 84 83 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 86 84 88 10 arch/arm/vfp/vfpdouble.c:1154 (set (reg:SI 189)
        (lshiftrt:SI (reg:SI 207)
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 207)
        (nil)))

(insn 88 86 89 10 arch/arm/vfp/vfpdouble.c:1154 (set (reg/v:SI 141 [ dm ])
        (ior:SI (reg:SI 189)
            (reg:SI 208))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 208)
        (expr_list:REG_DEAD (reg:SI 189)
            (nil))))
;; End of basic block 10 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; rd  out 	(48)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 150, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 207, 208, 209, 210


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u93(11){ }u94(13){ }u95(25){ }u96(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 191
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 151 152 153 156
;; live  gen 	 24 [cc] 191
;; live  kill	
;; rd  in  	(51)
3, 6, 9, 12, 13, 15, 16, 18, 35, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 207, 208, 209, 210
;; rd  gen 	(2)
34, 195
;; rd  kill	(11)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 195

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 89 88 90 11 51 "" [1 uses])

(note 90 89 91 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 92 11 arch/arm/vfp/vfpdouble.c:1160 (set (reg:SI 191)
        (and:SI (reg:SI 151 [ D.5156 ])
            (const_int 1 [0x1]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 151 [ D.5156 ])
        (nil)))

(insn 92 91 93 11 arch/arm/vfp/vfpdouble.c:1160 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 191)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 191)
        (nil)))

(jump_insn 93 92 94 11 arch/arm/vfp/vfpdouble.c:1160 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; rd  out 	(52)
3, 6, 9, 12, 13, 15, 16, 18, 34, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 207, 208, 209, 210


;; Succ edge  14 [50.0%] 
;; Succ edge  12 [50.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u100(11){ }u101(13){ }u102(25){ }u103(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 192
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  gen 	 24 [cc] 192
;; live  kill	
;; rd  in  	(52)
3, 6, 9, 12, 13, 15, 16, 18, 34, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 207, 208, 209, 210
;; rd  gen 	(2)
33, 196
;; rd  kill	(11)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 196

;; Pred edge  11 [50.0%]  (fallthru)
(note 94 93 95 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 12 arch/arm/vfp/vfpdouble.c:1160 discrim 2 (set (reg:SI 192)
        (and:SI (reg/v:SI 143 [ dest ])
            (const_int 12 [0xc]))) 67 {*arm_andsi3_insn} (nil))

(insn 96 95 97 12 arch/arm/vfp/vfpdouble.c:1160 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 192)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 192)
        (nil)))

(jump_insn 97 96 98 12 arch/arm/vfp/vfpdouble.c:1160 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 12 -> ( 14 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; rd  out 	(53)
3, 6, 9, 12, 13, 15, 16, 18, 33, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210


;; Succ edge  14 [50.0%] 
;; Succ edge  13 [50.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u107(11){ }u108(13){ }u109(25){ }u110(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  gen 	 139
;; live  kill	
;; rd  in  	(53)
3, 6, 9, 12, 13, 15, 16, 18, 33, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210
;; rd  gen 	(1)
147
;; rd  kill	(2)
146, 147

;; Pred edge  12 [50.0%]  (fallthru)
(note 98 97 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 99 98 195 13 arch/arm/vfp/vfpdouble.c:1163 (set (reg/v:SI 139 [ veclen ])
        (and:SI (reg/v:SI 156 [ fpscr ])
            (const_int 458752 [0x70000]))) 67 {*arm_andsi3_insn} (nil))

(jump_insn 195 99 196 13 (set (pc)
        (label_ref 105)) -1 (nil))
;; End of basic block 13 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; rd  out 	(54)
3, 6, 9, 12, 13, 15, 16, 18, 33, 38, 39, 143, 144, 145, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210


;; Succ edge  15 [100.0%] 

(barrier 196 195 102)

;; Start of basic block ( 12 11) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u112(11){ }u113(13){ }u114(25){ }u115(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 141 143 152 153 156
;; live  gen 	 139
;; live  kill	
;; rd  in  	(54)
3, 6, 9, 12, 13, 15, 16, 18, 33, 34, 38, 39, 143, 144, 145, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210
;; rd  gen 	(1)
146
;; rd  kill	(2)
146, 147

;; Pred edge  12 [50.0%] 
;; Pred edge  11 [50.0%] 
(code_label 102 196 103 14 52 "" [2 uses])

(note 103 102 104 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 104 103 105 14 arch/arm/vfp/vfpdouble.c:1161 (set (reg/v:SI 139 [ veclen ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; rd  out 	(55)
3, 6, 9, 12, 13, 15, 16, 18, 33, 34, 38, 39, 143, 144, 145, 146, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 14 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u116(11){ }u117(13){ }u118(25){ }u119(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 193
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  gen 	 24 [cc] 193
;; live  kill	
;; rd  in  	(56)
3, 6, 9, 12, 13, 15, 16, 18, 33, 34, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 207, 208, 209, 210
;; rd  gen 	(2)
32, 197
;; rd  kill	(11)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 197

;; Pred edge  14 [100.0%]  (fallthru)
;; Pred edge  13 [100.0%] 
(code_label 105 104 106 15 53 "" [1 uses])

(note 106 105 107 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 107 106 108 15 arch/arm/vfp/vfpdouble.c:1168 (set (reg/f:SI 193 [ <variable>.fn ])
        (mem/s/f/j:SI (reg/v/f:SI 137 [ fop ]) [0 <variable>.fn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 108 107 109 15 arch/arm/vfp/vfpdouble.c:1168 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 193 [ <variable>.fn ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 193 [ <variable>.fn ])
        (nil)))

(jump_insn 109 108 110 15 arch/arm/vfp/vfpdouble.c:1168 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8986 [0x231a])
            (nil))))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; rd  out 	(56)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 207, 208, 209, 210


;; Succ edge  16 [10.1%]  (fallthru)
;; Succ edge  17 [89.9%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u123(11){ }u124(13){ }u125(25){ }u126(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 144
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 144
;; live  kill	
;; rd  in  	(56)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 207, 208, 209, 210
;; rd  gen 	(1)
160
;; rd  kill	(3)
158, 159, 160

;; Pred edge  15 [10.1%]  (fallthru)
(note 110 109 111 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 197 16 arch/arm/vfp/vfpdouble.c:1203 (set (reg/v:SI 144 [ exceptions ])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(jump_insn 197 111 198 16 (set (pc)
        (label_ref 154)) -1 (nil))
;; End of basic block 16 -> ( 21)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144
;; rd  out 	(57)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 160, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 207, 208, 209, 210


;; Succ edge  21 [100.0%] 

(barrier 198 197 114)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u127(11){ }u128(13){ }u129(25){ }u130(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153
;; lr  def 	 140 142 144 194 195
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 141 143 152 153 156
;; live  gen 	 140 142 144 194 195
;; live  kill	
;; rd  in  	(56)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 150, 152, 156, 157, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 207, 208, 209, 210
;; rd  gen 	(5)
149, 154, 158, 198, 199
;; rd  kill	(9)
148, 149, 153, 154, 158, 159, 160, 198, 199

;; Pred edge  15 [89.9%] 
(code_label 114 198 115 17 54 "" [1 uses])

(note 115 114 116 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 116 115 117 17 arch/arm/vfp/vfpdouble.c:1130 (set (reg:SI 194)
        (lshiftrt:SI (reg:SI 152 [ D.5135 ])
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 152 [ D.5135 ])
        (nil)))

(insn 117 116 118 17 arch/arm/vfp/vfpdouble.c:1130 (set (reg:SI 195)
        (lshiftrt:SI (reg:SI 153 [ D.5133 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 153 [ D.5133 ])
        (nil)))

(insn 118 117 119 17 arch/arm/vfp/vfpdouble.c:1130 (set (reg/v:SI 142 [ dn ])
        (ior:SI (reg:SI 194)
            (reg:SI 195))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 195)
        (expr_list:REG_DEAD (reg:SI 194)
            (nil))))

(insn 119 118 120 17 arch/arm/vfp/vfpdouble.c:1130 (set (reg/v:SI 140 [ vecitr ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 120 119 151 17 arch/arm/vfp/vfpdouble.c:1130 (set (reg/v:SI 144 [ exceptions ])
        (reg/v:SI 140 [ vecitr ])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 17 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; rd  out 	(61)
3, 6, 9, 12, 13, 15, 16, 18, 32, 38, 39, 143, 144, 145, 146, 147, 149, 150, 152, 154, 156, 157, 158, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 207, 208, 209, 210


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 17 20) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u136(11){ }u137(13){ }u138(25){ }u139(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 141 142 143 144 156
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 142 143 144 147 148 149 150 196 197 198 199 200
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 135 136 142 143 144 147 148 149 150 196 197 198 199 200
;; live  kill	 14 [lr]
;; rd  in  	(82)
1, 3, 6, 9, 12, 13, 15, 16, 18, 29, 32, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;; rd  gen 	(16)
1, 30, 141, 142, 153, 155, 159, 163, 164, 165, 166, 200, 201, 202, 203, 204
;; rd  kill	(35)
0, 1, 2, 3, 17, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 141, 142, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 200, 201, 202, 203, 204

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  20 [90.1%]  (dfs_back)
(code_label 151 120 121 18 57 "" [1 uses])

(note 121 151 122 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 122 121 123 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg/f:SI 196 [ <variable>.fn ])
        (mem/s/f/j:SI (reg/v/f:SI 137 [ fop ]) [0 <variable>.fn+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 123 122 124 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg:SI 0 r0)
        (reg/v:SI 143 [ dest ])) 167 {*arm_movsi_insn} (nil))

(insn 124 123 125 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg:SI 1 r1)
        (reg/v:SI 142 [ dn ])) 167 {*arm_movsi_insn} (nil))

(insn 125 124 126 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg:SI 2 r2)
        (reg/v:SI 141 [ dm ])) 167 {*arm_movsi_insn} (nil))

(insn 126 125 127 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg:SI 3 r3)
        (reg/v:SI 156 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 127 126 128 18 arch/arm/vfp/vfpdouble.c:1185 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 196 [ <variable>.fn ]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 249 {*call_value_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 196 [ <variable>.fn ])
        (expr_list:REG_DEAD (reg:SI 3 r3)
            (expr_list:REG_DEAD (reg:SI 2 r2)
                (expr_list:REG_DEAD (reg:SI 1 r1)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 128 127 129 18 arch/arm/vfp/vfpdouble.c:1185 (set (reg/v:SI 136 [ except ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 129 128 130 18 arch/arm/vfp/vfpdouble.c:1189 (set (reg/v:SI 144 [ exceptions ])
        (ior:SI (reg/v:SI 144 [ exceptions ])
            (reg/v:SI 136 [ except ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:SI 136 [ except ])
        (nil)))

(insn 130 129 131 18 arch/arm/vfp/vfpdouble.c:1195 (set (reg:SI 135 [ temp.297 ])
        (and:SI (reg/v:SI 143 [ dest ])
            (const_int 12 [0xc]))) 67 {*arm_andsi3_insn} (nil))

(insn 131 130 132 18 arch/arm/vfp/vfpdouble.c:1195 (set (reg:SI 197)
        (and:SI (reg/v:SI 143 [ dest ])
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 143 [ dest ])
        (nil)))

(insn 132 131 133 18 arch/arm/vfp/vfpdouble.c:1195 (set (reg:SI 198)
        (plus:SI (reg:SI 197)
            (reg/v:SI 138 [ vecstride ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 197)
        (nil)))

(insn 133 132 134 18 arch/arm/vfp/vfpdouble.c:1195 (set (reg:SI 150 [ D.5203 ])
        (and:SI (reg:SI 198)
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 198)
        (nil)))

(insn 134 133 135 18 arch/arm/vfp/vfpdouble.c:1195 (set (reg/v:SI 143 [ dest ])
        (plus:SI (reg:SI 150 [ D.5203 ])
            (reg:SI 135 [ temp.297 ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 150 [ D.5203 ])
        (expr_list:REG_DEAD (reg:SI 135 [ temp.297 ])
            (nil))))

(insn 135 134 136 18 arch/arm/vfp/vfpdouble.c:1196 (set (reg:SI 149 [ D.5204 ])
        (and:SI (reg/v:SI 142 [ dn ])
            (const_int 12 [0xc]))) 67 {*arm_andsi3_insn} (nil))

(insn 136 135 137 18 arch/arm/vfp/vfpdouble.c:1196 (set (reg:SI 199)
        (and:SI (reg/v:SI 142 [ dn ])
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 142 [ dn ])
        (nil)))

(insn 137 136 138 18 arch/arm/vfp/vfpdouble.c:1196 (set (reg:SI 200)
        (plus:SI (reg:SI 199)
            (reg/v:SI 138 [ vecstride ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 199)
        (nil)))

(insn 138 137 139 18 arch/arm/vfp/vfpdouble.c:1196 (set (reg:SI 148 [ D.5207 ])
        (and:SI (reg:SI 200)
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 200)
        (nil)))

(insn 139 138 140 18 arch/arm/vfp/vfpdouble.c:1196 (set (reg/v:SI 142 [ dn ])
        (plus:SI (reg:SI 148 [ D.5207 ])
            (reg:SI 149 [ D.5204 ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 149 [ D.5204 ])
        (expr_list:REG_DEAD (reg:SI 148 [ D.5207 ])
            (nil))))

(insn 140 139 141 18 arch/arm/vfp/vfpdouble.c:1197 (set (reg:SI 147 [ D.5208 ])
        (and:SI (reg/v:SI 141 [ dm ])
            (const_int 12 [0xc]))) 67 {*arm_andsi3_insn} (nil))

(insn 141 140 142 18 arch/arm/vfp/vfpdouble.c:1197 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 147 [ D.5208 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 142 141 143 18 arch/arm/vfp/vfpdouble.c:1197 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 148)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 147 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 147 156
;; rd  out 	(75)
1, 6, 9, 12, 13, 15, 16, 30, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  20 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u171(11){ }u172(13){ }u173(25){ }u174(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 147 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141 147
;; lr  def 	 141 146 201 202
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 147 156
;; live  gen 	 141 146 201 202
;; live  kill	
;; rd  in  	(75)
1, 6, 9, 12, 13, 15, 16, 30, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;; rd  gen 	(4)
151, 162, 205, 206
;; rd  kill	(6)
150, 151, 152, 162, 205, 206

;; Pred edge  18 [50.0%]  (fallthru)
(note 143 142 144 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 144 143 145 19 arch/arm/vfp/vfpdouble.c:1198 (set (reg:SI 201)
        (and:SI (reg/v:SI 141 [ dm ])
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ dm ])
        (nil)))

(insn 145 144 146 19 arch/arm/vfp/vfpdouble.c:1198 (set (reg:SI 202)
        (plus:SI (reg:SI 201)
            (reg/v:SI 138 [ vecstride ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 201)
        (nil)))

(insn 146 145 147 19 arch/arm/vfp/vfpdouble.c:1198 (set (reg:SI 146 [ D.5213 ])
        (and:SI (reg:SI 202)
            (const_int 3 [0x3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 202)
        (nil)))

(insn 147 146 148 19 arch/arm/vfp/vfpdouble.c:1198 (set (reg/v:SI 141 [ dm ])
        (plus:SI (reg:SI 146 [ D.5213 ])
            (reg:SI 147 [ D.5208 ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 147 [ D.5208 ])
        (expr_list:REG_DEAD (reg:SI 146 [ D.5213 ])
            (nil))))
;; End of basic block 19 -> ( 20)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; rd  out 	(73)
1, 6, 9, 12, 13, 15, 16, 30, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210


;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 18 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u181(11){ }u182(13){ }u183(25){ }u184(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140
;; lr  def 	 24 [cc] 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  gen 	 24 [cc] 140
;; live  kill	
;; rd  in  	(75)
1, 6, 9, 12, 13, 15, 16, 30, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;; rd  gen 	(2)
29, 148
;; rd  kill	(12)
28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 148, 149

;; Pred edge  18 [50.0%] 
;; Pred edge  19 [100.0%]  (fallthru)
(code_label 148 147 149 20 56 "" [1 uses])

(note 149 148 150 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 150 149 152 20 arch/arm/vfp/vfpdouble.c:1171 (set (reg/v:SI 140 [ vecitr ])
        (plus:SI (reg/v:SI 140 [ vecitr ])
            (const_int 65536 [0x10000]))) 4 {*arm_addsi3} (nil))

(insn 152 150 153 20 arch/arm/vfp/vfpdouble.c:1171 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ vecitr ])
            (reg/v:SI 139 [ veclen ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 153 152 154 20 arch/arm/vfp/vfpdouble.c:1171 discrim 1 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 151)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9011 [0x2333])
            (nil))))
;; End of basic block 20 -> ( 18 21)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 140 141 142 143 144 156
;; rd  out 	(74)
1, 6, 9, 12, 13, 15, 16, 29, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210


;; Succ edge  18 [90.1%]  (dfs_back)
;; Succ edge  21 [9.9%]  (fallthru,loop_exit)

;; Start of basic block ( 20 16) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u189(11){ }u190(13){ }u191(25){ }u192(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(80)
1, 3, 6, 9, 12, 13, 15, 16, 18, 29, 32, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
;; rd  gen 	(1)
0
;; rd  kill	(4)
0, 1, 2, 3

;; Pred edge  20 [9.9%]  (fallthru,loop_exit)
;; Pred edge  16 [100.0%] 
(code_label 154 153 155 21 55 "" [1 uses])

(note 155 154 160 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 160 155 166 21 arch/arm/vfp/vfpdouble.c:1204 (set (reg/i:SI 0 r0)
        (reg/v:SI 144 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 144 [ exceptions ])
        (nil)))

(insn 166 160 0 21 arch/arm/vfp/vfpdouble.c:1204 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 21 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(79)
0, 6, 9, 12, 13, 15, 16, 18, 29, 32, 38, 39, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_compare (vfp_compare)[0:159]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 39 n_edges 62 count 75 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 39 n_edges 62 count 76 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 39 n_edges 62 count 76 (  1.9)


vfp_compare

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={3d,3u} r2={3d,1u} r3={3d} r11={1d,38u} r12={3d} r13={1d,40u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={25d,24u} r25={1d,38u} r26={1d,37u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={8d,4u} r134={1d,12u,2d} r136={1d,2u} r137={1d,15u,2d} r140={1d,1u} r141={1d,2u} r142={1d,1u} r145={3d,3u,1d} r146={1d,2u,1d} r147={1d,1u} r148={1d,1u} r149={1d,2u} r150={1d,1u} r151={2d,2u} r152={1d,2u} r153={1d,1u} r154={2d,2u} r156={3d,3u,1d} r157={1d,2u,1d} r158={1d,1u} r159={1d,1u} r160={1d,2u} r161={1d,1u} r162={2d,2u} r163={1d,2u} r164={1d,1u} r165={2d,2u} r166={1d,1u,1d} r167={1d,2u} r168={1d,1u} r169={2d,2u} r170={1d,1u} r171={2d,1u} r174={2d,1u} r177={1d,1u} r178={1d,1u} r179={1d,2u} r180={2d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r187={1d,1u} 
;;    total ref usage 618{331d,278u,9e} in 122{120 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269
0[0,6] 1[6,3] 2[9,3] 3[12,3] 11[15,1] 12[16,3] 13[19,1] 14[20,3] 15[23,2] 16[25,2] 17[27,2] 18[29,2] 19[31,2] 20[33,2] 21[35,2] 22[37,2] 23[39,2] 24[41,25] 25[66,1] 26[67,1] 27[68,2] 28[70,2] 29[72,2] 30[74,2] 31[76,2] 32[78,2] 33[80,2] 34[82,2] 35[84,2] 36[86,2] 37[88,2] 38[90,2] 39[92,2] 40[94,2] 41[96,2] 42[98,2] 43[100,2] 44[102,2] 45[104,2] 46[106,2] 47[108,2] 48[110,2] 49[112,2] 50[114,2] 51[116,2] 52[118,2] 53[120,2] 54[122,2] 55[124,2] 56[126,2] 57[128,2] 58[130,2] 59[132,2] 60[134,2] 61[136,2] 62[138,2] 63[140,2] 64[142,2] 65[144,2] 66[146,2] 67[148,2] 68[150,2] 69[152,2] 70[154,2] 71[156,2] 72[158,2] 73[160,2] 74[162,2] 75[164,2] 76[166,2] 77[168,2] 78[170,2] 79[172,2] 80[174,2] 81[176,2] 82[178,2] 83[180,2] 84[182,2] 85[184,2] 86[186,2] 87[188,2] 88[190,2] 89[192,2] 90[194,2] 91[196,2] 92[198,2] 93[200,2] 94[202,2] 95[204,2] 96[206,2] 97[208,2] 98[210,2] 99[212,2] 100[214,2] 101[216,2] 102[218,2] 103[220,2] 104[222,2] 105[224,2] 106[226,2] 107[228,2] 108[230,2] 109[232,2] 110[234,2] 111[236,2] 112[238,2] 113[240,2] 114[242,2] 115[244,2] 116[246,2] 117[248,2] 118[250,2] 119[252,2] 120[254,2] 121[256,2] 122[258,2] 123[260,2] 124[262,2] 125[264,2] 126[266,2] 127[268,2] 133[270,8] 134[278,1] 136[279,1] 137[280,1] 140[281,1] 141[282,1] 142[283,1] 145[284,3] 146[287,1] 147[288,1] 148[289,1] 149[290,1] 150[291,1] 151[292,2] 152[294,1] 153[295,1] 154[296,2] 156[298,3] 157[301,1] 158[302,1] 159[303,1] 160[304,1] 161[305,1] 162[306,2] 163[308,1] 164[309,1] 165[310,2] 166[312,1] 167[313,1] 168[314,1] 169[315,2] 170[317,1] 171[318,2] 174[320,2] 177[322,1] 178[323,1] 179[324,1] 180[325,2] 183[327,1] 184[328,1] 185[329,1] 187[330,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d5(0){ }d8(1){ }d11(2){ }d14(3){ }d15(11){ }d18(12){ }d19(13){ }d22(14){ }d66(25){ }d67(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
5, 8, 11, 14, 15, 18, 19, 22, 66, 67
;; rd  kill	(25)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 66, 67
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
5, 8, 11, 14, 15, 18, 19, 22, 66, 67

( 0 )->[2]->( 8 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d15(bb 0 insn -1) }u1(13){ d19(bb 0 insn -1) }u2(25){ d66(bb 0 insn -1) }u3(26){ d67(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 140 141 142 145 146 147 148
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 140 141 142 145 146 147 148
;; live  kill	 14 [lr]
;; rd  in  	(10)
5, 8, 11, 14, 15, 18, 19, 22, 66, 67
;; rd  gen 	(11)
3, 7, 64, 278, 281, 282, 283, 285, 287, 288, 289
;; rd  kill	(44)
0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 278, 281, 282, 283, 287, 288, 289
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141 146
;; rd  out 	(18)
3, 7, 11, 14, 15, 18, 19, 64, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d5(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d8(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d11(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 9
;;      reg 142 { d283(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 10
;;      reg 13 { d19(bb 0 insn -1) }
;;      reg 0 { d4(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 11
;;      reg 0 { d3(bb 2 insn 10) }
;;      reg 1 { d7(bb 2 insn 10) }
;;   UD chains for insn luid 7 uid 13
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 145 read/write { d284(bb 2 insn 259) }
;;   UD chains for insn luid 8 uid 14
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 145 read/write { d286(bb 2 insn 13) d284(bb 2 insn 259) }
;;   UD chains for insn luid 10 uid 16
;;      reg 145 { d286(bb 2 insn 13) d285(bb 2 insn 14) d284(bb 2 insn 259) }
;;      reg 147 { d288(bb 2 insn 15) }
;;   eq_note reg 145 { }
;;   UD chains for insn luid 12 uid 18
;;      reg 146 { d287(bb 2 insn 16) }
;;      reg 148 { d289(bb 2 insn 17) }
;;   eq_note reg 146 { }
;;   UD chains for insn luid 13 uid 19
;;      reg 24 { d64(bb 2 insn 18) }

( 2 )->[3]->( 4 8 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u23(11){ d15(bb 0 insn -1) }u24(13){ d19(bb 0 insn -1) }u25(25){ d66(bb 0 insn -1) }u26(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(18)
3, 7, 11, 14, 15, 18, 19, 64, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289
;; rd  gen 	(1)
63
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; rd  out 	(18)
3, 7, 11, 14, 15, 18, 19, 63, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 20
;;      reg 146 { d287(bb 2 insn 16) }
;;   UD chains for insn luid 1 uid 21
;;      reg 24 { d63(bb 3 insn 20) }

( 3 )->[4]->( 5 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u29(11){ d15(bb 0 insn -1) }u30(13){ d19(bb 0 insn -1) }u31(25){ d66(bb 0 insn -1) }u32(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 149 150 151
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 24 [cc] 149 150 151
;; live  kill	
;; rd  in  	(18)
3, 7, 11, 14, 15, 18, 19, 63, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289
;; rd  gen 	(4)
62, 290, 291, 292
;; rd  kill	(29)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 290, 291, 292, 293
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; rd  out 	(21)
3, 7, 11, 14, 15, 18, 19, 62, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 24
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 150 { d291(bb 4 insn 23) }
;;   eq_note reg 134 { }
;;   UD chains for insn luid 2 uid 25
;;      reg 149 { d290(bb 4 insn 24) }
;;   UD chains for insn luid 3 uid 26
;;      reg 149 { d290(bb 4 insn 24) }
;;      reg 151 { d293(bb 4 insn 25) }
;;   UD chains for insn luid 4 uid 27
;;      reg 151 { d292(bb 4 insn 26) }
;;   UD chains for insn luid 5 uid 28
;;      reg 24 { d62(bb 4 insn 27) }

( 4 )->[5]->( 9 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u41(11){ d15(bb 0 insn -1) }u42(13){ d19(bb 0 insn -1) }u43(25){ d66(bb 0 insn -1) }u44(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(21)
3, 7, 11, 14, 15, 18, 19, 62, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292
;; rd  gen 	(1)
61
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; rd  out 	(21)
3, 7, 11, 14, 15, 18, 19, 61, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 30
;;      reg 141 { d282(bb 2 insn 3) }
;;   UD chains for insn luid 1 uid 31
;;      reg 24 { d61(bb 5 insn 30) }

( 5 )->[6]->( 9 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u47(11){ d15(bb 0 insn -1) }u48(13){ d19(bb 0 insn -1) }u49(25){ d66(bb 0 insn -1) }u50(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 152 153 154
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 24 [cc] 152 153 154
;; live  kill	
;; rd  in  	(21)
3, 7, 11, 14, 15, 18, 19, 61, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292
;; rd  gen 	(4)
60, 294, 295, 296
;; rd  kill	(29)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 294, 295, 296, 297
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; rd  out 	(24)
3, 7, 11, 14, 15, 18, 19, 60, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 34
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 153 { d295(bb 6 insn 33) }
;;   eq_note reg 134 { }
;;   UD chains for insn luid 2 uid 35
;;      reg 152 { d294(bb 6 insn 34) }
;;   UD chains for insn luid 3 uid 36
;;      reg 152 { d294(bb 6 insn 34) }
;;      reg 154 { d297(bb 6 insn 35) }
;;   UD chains for insn luid 4 uid 37
;;      reg 154 { d296(bb 6 insn 36) }
;;   UD chains for insn luid 5 uid 38
;;      reg 24 { d60(bb 6 insn 37) }

( 6 )->[7]->( 10 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u59(11){ d15(bb 0 insn -1) }u60(13){ d19(bb 0 insn -1) }u61(25){ d66(bb 0 insn -1) }u62(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 133
;; live  kill	
;; rd  in  	(24)
3, 7, 11, 14, 15, 18, 19, 60, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296
;; rd  gen 	(1)
277
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; rd  out 	(25)
3, 7, 11, 14, 15, 18, 19, 60, 66, 67, 277, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 3 4 2 )->[8]->( 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u63(11){ d15(bb 0 insn -1) }u64(13){ d19(bb 0 insn -1) }u65(25){ d66(bb 0 insn -1) }u66(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 133
;; live  kill	
;; rd  in  	(23)
3, 7, 11, 14, 15, 18, 19, 62, 63, 64, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292
;; rd  gen 	(1)
276
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; rd  out 	(24)
3, 7, 11, 14, 15, 18, 19, 62, 63, 64, 66, 67, 276, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 6 5 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u67(11){ d15(bb 0 insn -1) }u68(13){ d19(bb 0 insn -1) }u69(25){ d66(bb 0 insn -1) }u70(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 133
;; live  kill	
;; rd  in  	(25)
3, 7, 11, 14, 15, 18, 19, 60, 61, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296
;; rd  gen 	(1)
275
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; rd  out 	(26)
3, 7, 11, 14, 15, 18, 19, 60, 61, 66, 67, 275, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 9 7 8 )->[10]->( 16 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u71(11){ d15(bb 0 insn -1) }u72(13){ d19(bb 0 insn -1) }u73(25){ d66(bb 0 insn -1) }u74(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 156 157 158 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 137 156 157 158 159
;; live  kill	 14 [lr]
;; rd  in  	(31)
3, 7, 11, 14, 15, 18, 19, 60, 61, 62, 63, 64, 66, 67, 275, 276, 277, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296
;; rd  gen 	(8)
1, 6, 58, 280, 299, 301, 302, 303
;; rd  kill	(41)
0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 280, 301, 302, 303
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141 157
;; rd  out 	(32)
1, 6, 11, 14, 15, 18, 19, 58, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 53
;;      reg 140 { d281(bb 2 insn 2) }
;;   UD chains for insn luid 1 uid 54
;;      reg 13 { d19(bb 0 insn -1) }
;;      reg 0 { d2(bb 10 insn 53) }
;;   UD chains for insn luid 2 uid 55
;;      reg 0 { d1(bb 10 insn 54) }
;;      reg 1 { d6(bb 10 insn 54) }
;;   UD chains for insn luid 4 uid 57
;;      reg 137 { d280(bb 10 insn 55) }
;;      reg 156 read/write { d298(bb 10 insn 260) }
;;   UD chains for insn luid 5 uid 58
;;      reg 137 { d280(bb 10 insn 55) }
;;      reg 156 read/write { d300(bb 10 insn 57) d298(bb 10 insn 260) }
;;   UD chains for insn luid 7 uid 60
;;      reg 156 { d300(bb 10 insn 57) d299(bb 10 insn 58) d298(bb 10 insn 260) }
;;      reg 158 { d302(bb 10 insn 59) }
;;   eq_note reg 156 { }
;;   UD chains for insn luid 9 uid 62
;;      reg 157 { d301(bb 10 insn 60) }
;;      reg 159 { d303(bb 10 insn 61) }
;;   eq_note reg 157 { }
;;   UD chains for insn luid 10 uid 63
;;      reg 24 { d58(bb 10 insn 62) }

( 10 )->[11]->( 12 16 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u91(11){ d15(bb 0 insn -1) }u92(13){ d19(bb 0 insn -1) }u93(25){ d66(bb 0 insn -1) }u94(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141 157
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(32)
1, 6, 11, 14, 15, 18, 19, 58, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303
;; rd  gen 	(1)
57
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141
;; rd  out 	(32)
1, 6, 11, 14, 15, 18, 19, 57, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 64
;;      reg 157 { d301(bb 10 insn 60) }
;;   UD chains for insn luid 1 uid 65
;;      reg 24 { d57(bb 11 insn 64) }

( 11 )->[12]->( 13 16 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u97(11){ d15(bb 0 insn -1) }u98(13){ d19(bb 0 insn -1) }u99(25){ d66(bb 0 insn -1) }u100(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 160 161 162
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141
;; live  gen 	 24 [cc] 160 161 162
;; live  kill	
;; rd  in  	(32)
1, 6, 11, 14, 15, 18, 19, 57, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303
;; rd  gen 	(4)
56, 304, 305, 306
;; rd  kill	(29)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 304, 305, 306, 307
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141
;; rd  out 	(35)
1, 6, 11, 14, 15, 18, 19, 56, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 68
;;      reg 137 { d280(bb 10 insn 55) }
;;      reg 161 { d305(bb 12 insn 67) }
;;   eq_note reg 137 { }
;;   UD chains for insn luid 2 uid 69
;;      reg 160 { d304(bb 12 insn 68) }
;;   UD chains for insn luid 3 uid 70
;;      reg 160 { d304(bb 12 insn 68) }
;;      reg 162 { d307(bb 12 insn 69) }
;;   UD chains for insn luid 4 uid 71
;;      reg 162 { d306(bb 12 insn 70) }
;;   UD chains for insn luid 5 uid 72
;;      reg 24 { d56(bb 12 insn 71) }

( 12 )->[13]->( 15 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u109(11){ d15(bb 0 insn -1) }u110(13){ d19(bb 0 insn -1) }u111(25){ d66(bb 0 insn -1) }u112(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141
;; lr  def 	 24 [cc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 141
;; live  gen 	 24 [cc] 133
;; live  kill	
;; rd  in  	(35)
1, 6, 11, 14, 15, 18, 19, 56, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(2)
55, 274
;; rd  kill	(33)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 270, 271, 272, 273, 274, 275, 276, 277
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137
;; rd  out 	(33)
1, 6, 11, 14, 15, 18, 19, 55, 66, 67, 274, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 74
;;      reg 133 { d277(bb 7 insn 40) d276(bb 8 insn 45) d275(bb 9 insn 50) }
;;   UD chains for insn luid 1 uid 75
;;      reg 141 { d282(bb 2 insn 3) }
;;   UD chains for insn luid 2 uid 76
;;      reg 24 { d55(bb 13 insn 75) }

( 13 )->[14]->( 15 38 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u116(11){ d15(bb 0 insn -1) }u117(13){ d19(bb 0 insn -1) }u118(25){ d66(bb 0 insn -1) }u119(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 163 164 165
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137
;; live  gen 	 24 [cc] 163 164 165
;; live  kill	
;; rd  in  	(33)
1, 6, 11, 14, 15, 18, 19, 55, 66, 67, 274, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(4)
54, 308, 309, 310
;; rd  kill	(29)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 308, 309, 310, 311
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(36)
1, 6, 11, 14, 15, 18, 19, 54, 66, 67, 274, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 79
;;      reg 137 { d280(bb 10 insn 55) }
;;      reg 164 { d309(bb 14 insn 78) }
;;   eq_note reg 137 { }
;;   UD chains for insn luid 2 uid 80
;;      reg 163 { d308(bb 14 insn 79) }
;;   UD chains for insn luid 3 uid 81
;;      reg 163 { d308(bb 14 insn 79) }
;;      reg 165 { d311(bb 14 insn 80) }
;;   UD chains for insn luid 4 uid 82
;;      reg 165 { d310(bb 14 insn 81) }
;;   UD chains for insn luid 5 uid 83
;;      reg 24 { d54(bb 14 insn 82) }

( 13 14 )->[15]->( 38 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u128(11){ d15(bb 0 insn -1) }u129(13){ d19(bb 0 insn -1) }u130(25){ d66(bb 0 insn -1) }u131(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 133
;; live  kill	
;; rd  in  	(37)
1, 6, 11, 14, 15, 18, 19, 54, 55, 66, 67, 274, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310
;; rd  gen 	(1)
273
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(37)
1, 6, 11, 14, 15, 18, 19, 54, 55, 66, 67, 273, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 86
;;      reg 133 { d274(bb 13 insn 74) }

( 11 12 10 )->[16]->( 17 38 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u133(11){ d15(bb 0 insn -1) }u134(13){ d19(bb 0 insn -1) }u135(25){ d66(bb 0 insn -1) }u136(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(37)
1, 6, 11, 14, 15, 18, 19, 56, 57, 58, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(1)
53
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(35)
1, 6, 11, 14, 15, 18, 19, 53, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 91
;;      reg 133 { d277(bb 7 insn 40) d276(bb 8 insn 45) d275(bb 9 insn 50) }
;;   UD chains for insn luid 1 uid 92
;;      reg 24 { d53(bb 16 insn 91) }

( 16 )->[17]->( 19 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u139(11){ d15(bb 0 insn -1) }u140(13){ d19(bb 0 insn -1) }u141(25){ d66(bb 0 insn -1) }u142(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(35)
1, 6, 11, 14, 15, 18, 19, 53, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(1)
48
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(35)
1, 6, 11, 14, 15, 18, 19, 48, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 94
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 1 uid 95
;;      reg 24 { d48(bb 17 insn 94) }

( 17 )->[18]->( 19 35 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u146(11){ d15(bb 0 insn -1) }u147(13){ d19(bb 0 insn -1) }u148(25){ d66(bb 0 insn -1) }u149(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(35)
1, 6, 11, 14, 15, 18, 19, 48, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(1)
47
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(35)
1, 6, 11, 14, 15, 18, 19, 47, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 96
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 1 uid 97
;;      reg 24 { d47(bb 18 insn 96) }

( 18 17 )->[19]->( 35 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u153(11){ d15(bb 0 insn -1) }u154(13){ d19(bb 0 insn -1) }u155(25){ d66(bb 0 insn -1) }u156(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc] 166 167 168 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc] 166 167 168 169
;; live  kill	
;; rd  in  	(36)
1, 6, 11, 14, 15, 18, 19, 47, 48, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(5)
52, 312, 313, 314, 315
;; rd  kill	(30)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 312, 313, 314, 315, 316
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(39)
1, 6, 11, 14, 15, 18, 19, 52, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 102
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 2 uid 104
;;      reg 166 { d312(bb 19 insn 102) }
;;      reg 168 { d314(bb 19 insn 103) }
;;   eq_note reg 166 { }
;;   UD chains for insn luid 3 uid 105
;;      reg 167 { d313(bb 19 insn 104) }
;;   UD chains for insn luid 4 uid 106
;;      reg 167 { d313(bb 19 insn 104) }
;;      reg 169 { d316(bb 19 insn 105) }
;;   UD chains for insn luid 5 uid 107
;;      reg 169 { d315(bb 19 insn 106) }
;;   UD chains for insn luid 6 uid 108
;;      reg 24 { d52(bb 19 insn 107) }

( 19 )->[20]->( 23 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u167(11){ d15(bb 0 insn -1) }u168(13){ d19(bb 0 insn -1) }u169(25){ d66(bb 0 insn -1) }u170(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc] 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc] 170
;; live  kill	
;; rd  in  	(39)
1, 6, 11, 14, 15, 18, 19, 52, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315
;; rd  gen 	(2)
51, 317
;; rd  kill	(26)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 317
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(40)
1, 6, 11, 14, 15, 18, 19, 51, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 110
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 1 uid 111
;;      reg 170 { d317(bb 20 insn 110) }
;;   UD chains for insn luid 2 uid 112
;;      reg 24 { d51(bb 20 insn 111) }

( 20 )->[21]->( 27 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u175(11){ d15(bb 0 insn -1) }u176(13){ d19(bb 0 insn -1) }u177(25){ d66(bb 0 insn -1) }u178(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc] 136 171 174 187
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc] 136 171 174 187
;; live  kill	
;; rd  in  	(40)
1, 6, 11, 14, 15, 18, 19, 51, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317
;; rd  gen 	(5)
44, 279, 318, 321, 330
;; rd  kill	(31)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 279, 318, 319, 320, 321, 330
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 137
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 2 uid 257
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 3 uid 258
;;      reg 187 { d330(bb 21 insn 257) }
;;   UD chains for insn luid 4 uid 149
;;      reg 171 { d318(bb 21 insn 258) }
;;   UD chains for insn luid 6 uid 152
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 7 uid 153
;;      reg 24 { d44(bb 21 insn 152) }

( 21 )->[22]->( 25 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(11){ d15(bb 0 insn -1) }u-1(13){ d19(bb 0 insn -1) }u-1(25){ d66(bb 0 insn -1) }u-1(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  gen 	
;; live  kill	
;; rd  in  	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 20 )->[23]->( 24 36 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u186(11){ d15(bb 0 insn -1) }u187(13){ d19(bb 0 insn -1) }u188(25){ d66(bb 0 insn -1) }u189(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(40)
1, 6, 11, 14, 15, 18, 19, 51, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317
;; rd  gen 	(1)
46
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(40)
1, 6, 11, 14, 15, 18, 19, 46, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 121
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 1 uid 122
;;      reg 24 { d46(bb 23 insn 121) }

( 23 )->[24]->( 37 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(11){ d15(bb 0 insn -1) }u-1(13){ d19(bb 0 insn -1) }u-1(25){ d66(bb 0 insn -1) }u-1(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(40)
1, 6, 11, 14, 15, 18, 19, 46, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(40)
1, 6, 11, 14, 15, 18, 19, 46, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 22 )->[25]->( 28 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u192(11){ d15(bb 0 insn -1) }u193(13){ d19(bb 0 insn -1) }u194(25){ d66(bb 0 insn -1) }u195(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  gen 	
;; live  kill	
;; rd  in  	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 155
;;      reg 24 { d44(bb 21 insn 152) }

( 25 )->[26]->( 27 28 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u197(11){ d15(bb 0 insn -1) }u198(13){ d19(bb 0 insn -1) }u199(25){ d66(bb 0 insn -1) }u200(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;; rd  gen 	(1)
43
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(44)
1, 6, 11, 14, 15, 18, 19, 43, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 156
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 1 uid 157
;;      reg 24 { d43(bb 26 insn 156) }

( 21 26 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u204(11){ d15(bb 0 insn -1) }u205(13){ d19(bb 0 insn -1) }u206(25){ d66(bb 0 insn -1) }u207(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 174
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137
;; live  gen 	 174
;; live  kill	
;; rd  in  	(45)
1, 6, 11, 14, 15, 18, 19, 43, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;; rd  gen 	(1)
320
;; rd  kill	(2)
320, 321
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(45)
1, 6, 11, 14, 15, 18, 19, 43, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 25 26 27 )->[28]->( 37 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u208(11){ d15(bb 0 insn -1) }u209(13){ d19(bb 0 insn -1) }u210(25){ d66(bb 0 insn -1) }u211(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 174
;; lr  def 	 24 [cc] 177 178 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  gen 	 24 [cc] 177 178 179
;; live  kill	
;; rd  in  	(46)
1, 6, 11, 14, 15, 18, 19, 43, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 330
;; rd  gen 	(4)
50, 322, 323, 324
;; rd  kill	(28)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 322, 323, 324
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 179
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 179
;; rd  out 	(48)
1, 6, 11, 14, 15, 18, 19, 50, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 166
;;      reg 136 { d279(bb 21 insn 149) }
;;      reg 174 { d321(bb 21 insn 151) d320(bb 27 insn 164) }
;;   UD chains for insn luid 1 uid 167
;;      reg 177 { d322(bb 28 insn 166) }
;;   UD chains for insn luid 2 uid 168
;;      reg 178 { d323(bb 28 insn 167) }
;;   UD chains for insn luid 3 uid 169
;;      reg 179 { d324(bb 28 insn 168) }
;;   UD chains for insn luid 4 uid 170
;;      reg 24 { d50(bb 28 insn 169) }

( 28 )->[29]->( 32 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u218(11){ d15(bb 0 insn -1) }u219(13){ d19(bb 0 insn -1) }u220(25){ d66(bb 0 insn -1) }u221(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 179
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137 179
;; lr  def 	 24 [cc] 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 179
;; live  gen 	 24 [cc] 180
;; live  kill	
;; rd  in  	(48)
1, 6, 11, 14, 15, 18, 19, 50, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 330
;; rd  gen 	(2)
42, 326
;; rd  kill	(27)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 325, 326
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 180
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 180
;; rd  out 	(49)
1, 6, 11, 14, 15, 18, 19, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 173
;;      reg 179 { d324(bb 28 insn 168) }
;;   UD chains for insn luid 1 uid 174
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 2 uid 175
;;      reg 24 { d42(bb 29 insn 174) }

( 29 )->[30]->( 33 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u226(11){ d15(bb 0 insn -1) }u227(13){ d19(bb 0 insn -1) }u228(25){ d66(bb 0 insn -1) }u229(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 180
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 180
;; live  gen 	
;; live  kill	
;; rd  in  	(49)
1, 6, 11, 14, 15, 18, 19, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 180
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 180
;; rd  out 	(49)
1, 6, 11, 14, 15, 18, 19, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 177
;;      reg 24 { d42(bb 29 insn 174) }

( 30 )->[31]->( 32 33 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u231(11){ d15(bb 0 insn -1) }u232(13){ d19(bb 0 insn -1) }u233(25){ d66(bb 0 insn -1) }u234(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 180
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 180
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(49)
1, 6, 11, 14, 15, 18, 19, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330
;; rd  gen 	(1)
41
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 180
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 180
;; rd  out 	(49)
1, 6, 11, 14, 15, 18, 19, 41, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 178
;;      reg 134 { d278(bb 2 insn 11) }
;;      reg 137 { d280(bb 10 insn 55) }
;;   UD chains for insn luid 1 uid 179
;;      reg 24 { d41(bb 31 insn 178) }

( 29 31 )->[32]->( 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u238(11){ d15(bb 0 insn -1) }u239(13){ d19(bb 0 insn -1) }u240(25){ d66(bb 0 insn -1) }u241(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136
;; live  gen 	 180
;; live  kill	
;; rd  in  	(50)
1, 6, 11, 14, 15, 18, 19, 41, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330
;; rd  gen 	(1)
325
;; rd  kill	(2)
325, 326
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 180
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 180
;; rd  out 	(50)
1, 6, 11, 14, 15, 18, 19, 41, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 30 31 32 )->[33]->( 36 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u242(11){ d15(bb 0 insn -1) }u243(13){ d19(bb 0 insn -1) }u244(25){ d66(bb 0 insn -1) }u245(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 180
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 180
;; lr  def 	 24 [cc] 183 184 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 180
;; live  gen 	 24 [cc] 183 184 185
;; live  kill	
;; rd  in  	(51)
1, 6, 11, 14, 15, 18, 19, 41, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 330
;; rd  gen 	(4)
49, 327, 328, 329
;; rd  kill	(28)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 327, 328, 329
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(53)
1, 6, 11, 14, 15, 18, 19, 49, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 188
;;      reg 136 { d279(bb 21 insn 149) }
;;      reg 180 { d326(bb 29 insn 173) d325(bb 32 insn 186) }
;;   UD chains for insn luid 1 uid 189
;;      reg 183 { d327(bb 33 insn 188) }
;;   UD chains for insn luid 2 uid 190
;;      reg 184 { d328(bb 33 insn 189) }
;;   UD chains for insn luid 3 uid 191
;;      reg 185 { d329(bb 33 insn 190) }
;;   UD chains for insn luid 4 uid 192
;;      reg 24 { d49(bb 33 insn 191) }

( 33 )->[34]->( 38 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(11){ d15(bb 0 insn -1) }u-1(13){ d19(bb 0 insn -1) }u-1(25){ d66(bb 0 insn -1) }u-1(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	
;; live  kill	
;; rd  in  	(53)
1, 6, 11, 14, 15, 18, 19, 49, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(53)
1, 6, 11, 14, 15, 18, 19, 49, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 19 18 )->[35]->( 38 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u252(11){ d15(bb 0 insn -1) }u253(13){ d19(bb 0 insn -1) }u254(25){ d66(bb 0 insn -1) }u255(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	
;; rd  in  	(40)
1, 6, 11, 14, 15, 18, 19, 47, 52, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315
;; rd  gen 	(1)
272
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(38)
1, 6, 11, 14, 15, 18, 19, 47, 52, 66, 67, 272, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 33 23 )->[36]->( 38 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u256(11){ d15(bb 0 insn -1) }u257(13){ d19(bb 0 insn -1) }u258(25){ d66(bb 0 insn -1) }u259(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	
;; rd  in  	(54)
1, 6, 11, 14, 15, 18, 19, 46, 49, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;; rd  gen 	(1)
271
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(52)
1, 6, 11, 14, 15, 18, 19, 46, 49, 66, 67, 271, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 28 24 )->[37]->( 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u260(11){ d15(bb 0 insn -1) }u261(13){ d19(bb 0 insn -1) }u262(25){ d66(bb 0 insn -1) }u263(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	
;; rd  in  	(49)
1, 6, 11, 14, 15, 18, 19, 46, 50, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 330
;; rd  gen 	(1)
270
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(47)
1, 6, 11, 14, 15, 18, 19, 46, 50, 66, 67, 270, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }

( 37 35 16 34 14 15 36 )->[38]->( 1 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u264(11){ d15(bb 0 insn -1) }u265(13){ d19(bb 0 insn -1) }u266(25){ d66(bb 0 insn -1) }u267(26){ d67(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(68)
1, 6, 11, 14, 15, 18, 19, 46, 47, 49, 50, 52, 53, 54, 55, 66, 67, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;; rd  gen 	(1)
0
;; rd  kill	(6)
0, 1, 2, 3, 4, 5
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(68)
0, 6, 11, 14, 15, 18, 19, 46, 47, 49, 50, 52, 53, 54, 55, 66, 67, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d66(bb 0 insn -1) }
;;   reg 26 { d67(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 215
;;      reg 133 { d277(bb 7 insn 40) d276(bb 8 insn 45) d275(bb 9 insn 50) d274(bb 13 insn 74) d273(bb 15 insn 86) d272(bb 35 insn 198) d271(bb 36 insn 203) d270(bb 37 insn 208) }
;;   UD chains for insn luid 1 uid 221
;;      reg 0 { d0(bb 38 insn 215) }

( 38 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u270(0){ d0(bb 38 insn 215) }u271(11){ d15(bb 0 insn -1) }u272(13){ d19(bb 0 insn -1) }u273(14){ }u274(25){ d66(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(68)
0, 6, 11, 14, 15, 18, 19, 46, 47, 49, 50, 52, 53, 54, 55, 66, 67, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(68)
0, 6, 11, 14, 15, 18, 19, 46, 47, 49, 50, 52, 53, 54, 55, 66, 67, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 38 insn 215) }
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d66(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 19 to worklist
  Adding insn 10 to worklist
  Adding insn 21 to worklist
  Adding insn 28 to worklist
  Adding insn 31 to worklist
  Adding insn 38 to worklist
  Adding insn 261 to worklist
  Adding insn 263 to worklist
  Adding insn 63 to worklist
  Adding insn 54 to worklist
  Adding insn 65 to worklist
  Adding insn 72 to worklist
  Adding insn 76 to worklist
  Adding insn 83 to worklist
  Adding insn 265 to worklist
  Adding insn 92 to worklist
  Adding insn 95 to worklist
  Adding insn 97 to worklist
  Adding insn 108 to worklist
  Adding insn 112 to worklist
  Adding insn 153 to worklist
  Adding insn 269 to worklist
  Adding insn 122 to worklist
  Adding insn 272 to worklist
  Adding insn 155 to worklist
  Adding insn 157 to worklist
  Adding insn 170 to worklist
  Adding insn 175 to worklist
  Adding insn 177 to worklist
  Adding insn 179 to worklist
  Adding insn 192 to worklist
  Adding insn 275 to worklist
  Adding insn 277 to worklist
  Adding insn 279 to worklist
  Adding insn 221 to worklist
Finished finding needed instructions:
  Adding insn 215 to worklist
Processing use of (reg 133 [ ret ]) in insn 215:
  Adding insn 40 to worklist
  Adding insn 45 to worklist
  Adding insn 50 to worklist
  Adding insn 74 to worklist
  Adding insn 86 to worklist
  Adding insn 198 to worklist
  Adding insn 203 to worklist
  Adding insn 208 to worklist
Processing use of (reg 133 [ ret ]) in insn 86:
Processing use of (reg 133 [ ret ]) in insn 74:
Processing use of (reg 0 r0) in insn 221:
Processing use of (reg 24 cc) in insn 192:
  Adding insn 191 to worklist
Processing use of (reg 185) in insn 191:
  Adding insn 190 to worklist
Processing use of (reg 184) in insn 190:
  Adding insn 189 to worklist
Processing use of (subreg (reg 183) 0) in insn 189:
  Adding insn 188 to worklist
Processing use of (reg 136 [ D.4383 ]) in insn 188:
  Adding insn 149 to worklist
Processing use of (subreg (reg 180) 0) in insn 188:
  Adding insn 173 to worklist
  Adding insn 186 to worklist
Processing use of (subreg (reg 179) 0) in insn 173:
  Adding insn 168 to worklist
Processing use of (reg 178) in insn 168:
  Adding insn 167 to worklist
Processing use of (subreg (reg 177) 0) in insn 167:
  Adding insn 166 to worklist
Processing use of (reg 136 [ D.4383 ]) in insn 166:
Processing use of (subreg (reg 174) 0) in insn 166:
  Adding insn 151 to worklist
  Adding insn 164 to worklist
Processing use of (reg 171) in insn 149:
  Adding insn 258 to worklist
Processing use of (subreg (reg 187) 0) in insn 258:
  Adding insn 257 to worklist
Processing use of (subreg (reg 137 [ D.4354 ]) 4) in insn 257:
  Adding insn 55 to worklist
Processing use of (reg 0 r0) in insn 55:
Processing use of (reg 1 r1) in insn 55:
Processing use of (reg 24 cc) in insn 179:
  Adding insn 178 to worklist
Processing use of (subreg (reg 134 [ m ]) 0) in insn 178:
  Adding insn 11 to worklist
Processing use of (subreg (reg 137 [ D.4354 ]) 0) in insn 178:
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (reg 24 cc) in insn 177:
  Adding insn 174 to worklist
Processing use of (subreg (reg 134 [ m ]) 4) in insn 174:
Processing use of (subreg (reg 137 [ D.4354 ]) 4) in insn 174:
Processing use of (reg 24 cc) in insn 175:
Processing use of (reg 24 cc) in insn 170:
  Adding insn 169 to worklist
Processing use of (reg 179) in insn 169:
Processing use of (reg 24 cc) in insn 157:
  Adding insn 156 to worklist
Processing use of (subreg (reg 134 [ m ]) 0) in insn 156:
Processing use of (subreg (reg 137 [ D.4354 ]) 0) in insn 156:
Processing use of (reg 24 cc) in insn 155:
  Adding insn 152 to worklist
Processing use of (subreg (reg 134 [ m ]) 4) in insn 152:
Processing use of (subreg (reg 137 [ D.4354 ]) 4) in insn 152:
Processing use of (reg 24 cc) in insn 122:
  Adding insn 121 to worklist
Processing use of (subreg (reg 137 [ D.4354 ]) 4) in insn 121:
Processing use of (reg 24 cc) in insn 153:
Processing use of (reg 24 cc) in insn 112:
  Adding insn 111 to worklist
Processing use of (subreg (reg 170) 4) in insn 111:
  Adding insn 110 to worklist
Processing use of (reg 134 [ m ]) in insn 110:
Processing use of (reg 137 [ D.4354 ]) in insn 110:
Processing use of (reg 24 cc) in insn 108:
  Adding insn 107 to worklist
Processing use of (reg 169) in insn 107:
  Adding insn 106 to worklist
Processing use of (subreg (reg 167) 4) in insn 106:
  Adding insn 104 to worklist
Processing use of (reg 169) in insn 106:
  Adding insn 105 to worklist
Processing use of (subreg (reg 167) 0) in insn 105:
Processing use of (reg 166) in insn 104:
  Adding insn 102 to worklist
Processing use of (reg 168) in insn 104:
  Adding insn 103 to worklist
Processing use of (reg 134 [ m ]) in insn 102:
Processing use of (reg 137 [ D.4354 ]) in insn 102:
Processing use of (reg 24 cc) in insn 97:
  Adding insn 96 to worklist
Processing use of (subreg (reg 134 [ m ]) 4) in insn 96:
Processing use of (subreg (reg 137 [ D.4354 ]) 4) in insn 96:
Processing use of (reg 24 cc) in insn 95:
  Adding insn 94 to worklist
Processing use of (subreg (reg 134 [ m ]) 0) in insn 94:
Processing use of (subreg (reg 137 [ D.4354 ]) 0) in insn 94:
Processing use of (reg 24 cc) in insn 92:
  Adding insn 91 to worklist
Processing use of (reg 133 [ ret ]) in insn 91:
Processing use of (reg 24 cc) in insn 83:
  Adding insn 82 to worklist
Processing use of (reg 165) in insn 82:
  Adding insn 81 to worklist
Processing use of (subreg (reg 163) 4) in insn 81:
  Adding insn 79 to worklist
Processing use of (reg 165) in insn 81:
  Adding insn 80 to worklist
Processing use of (subreg (reg 163) 0) in insn 80:
Processing use of (reg 137 [ D.4354 ]) in insn 79:
Processing use of (reg 164) in insn 79:
  Adding insn 78 to worklist
Processing use of (reg 24 cc) in insn 76:
  Adding insn 75 to worklist
Processing use of (reg 141 [ signal_on_qnan ]) in insn 75:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 24 cc) in insn 72:
  Adding insn 71 to worklist
Processing use of (reg 162) in insn 71:
  Adding insn 70 to worklist
Processing use of (subreg (reg 160) 4) in insn 70:
  Adding insn 68 to worklist
Processing use of (reg 162) in insn 70:
  Adding insn 69 to worklist
Processing use of (subreg (reg 160) 0) in insn 69:
Processing use of (reg 137 [ D.4354 ]) in insn 68:
Processing use of (reg 161) in insn 68:
  Adding insn 67 to worklist
Processing use of (reg 24 cc) in insn 65:
  Adding insn 64 to worklist
Processing use of (subreg (reg 157) 4) in insn 64:
  Adding insn 60 to worklist
Processing use of (reg 156) in insn 60:
  Adding insn 57 to worklist
  Adding insn 58 to worklist
  Adding insn 260 to worklist
Processing use of (reg 158) in insn 60:
  Adding insn 59 to worklist
Processing use of (subreg (reg 137 [ D.4354 ]) 4) in insn 58:
Processing use of (reg 156) in insn 58:
Processing use of (subreg (reg 137 [ D.4354 ]) 4) in insn 57:
Processing use of (reg 156) in insn 57:
Processing use of (reg 13 sp) in insn 54:
Processing use of (reg 0 r0) in insn 54:
  Adding insn 53 to worklist
Processing use of (reg 140 [ dd ]) in insn 53:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 24 cc) in insn 63:
  Adding insn 62 to worklist
Processing use of (subreg (reg 157) 0) in insn 62:
Processing use of (reg 159) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 24 cc) in insn 38:
  Adding insn 37 to worklist
Processing use of (reg 154) in insn 37:
  Adding insn 36 to worklist
Processing use of (subreg (reg 152) 4) in insn 36:
  Adding insn 34 to worklist
Processing use of (reg 154) in insn 36:
  Adding insn 35 to worklist
Processing use of (subreg (reg 152) 0) in insn 35:
Processing use of (reg 134 [ m ]) in insn 34:
Processing use of (reg 153) in insn 34:
  Adding insn 33 to worklist
Processing use of (reg 24 cc) in insn 31:
  Adding insn 30 to worklist
Processing use of (reg 141 [ signal_on_qnan ]) in insn 30:
Processing use of (reg 24 cc) in insn 28:
  Adding insn 27 to worklist
Processing use of (reg 151) in insn 27:
  Adding insn 26 to worklist
Processing use of (subreg (reg 149) 4) in insn 26:
  Adding insn 24 to worklist
Processing use of (reg 151) in insn 26:
  Adding insn 25 to worklist
Processing use of (subreg (reg 149) 0) in insn 25:
Processing use of (reg 134 [ m ]) in insn 24:
Processing use of (reg 150) in insn 24:
  Adding insn 23 to worklist
Processing use of (reg 24 cc) in insn 21:
  Adding insn 20 to worklist
Processing use of (subreg (reg 146) 4) in insn 20:
  Adding insn 16 to worklist
Processing use of (reg 145) in insn 16:
  Adding insn 13 to worklist
  Adding insn 14 to worklist
  Adding insn 259 to worklist
Processing use of (reg 147) in insn 16:
  Adding insn 15 to worklist
Processing use of (subreg (reg 134 [ m ]) 4) in insn 14:
Processing use of (reg 145) in insn 14:
Processing use of (subreg (reg 134 [ m ]) 4) in insn 13:
Processing use of (reg 145) in insn 13:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 142 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 24 cc) in insn 19:
  Adding insn 18 to worklist
Processing use of (subreg (reg 146) 0) in insn 18:
Processing use of (reg 148) in insn 18:
  Adding insn 17 to worklist
DCE: Deleting insn 137
deleting insn with uid = 137.
DCE: Deleting insn 136
deleting insn with uid = 136.


vfp_compare

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={3d,3u} r2={3d,1u} r3={3d} r11={1d,38u} r12={3d} r13={1d,40u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={24d,24u} r25={1d,38u} r26={1d,37u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={8d,4u} r134={1d,12u,2d} r136={1d,2u} r137={1d,14u,2d} r140={1d,1u} r141={1d,2u} r142={1d,1u} r145={3d,3u,1d} r146={1d,2u,1d} r147={1d,1u} r148={1d,1u} r149={1d,2u} r150={1d,1u} r151={2d,2u} r152={1d,2u} r153={1d,1u} r154={2d,2u} r156={3d,3u,1d} r157={1d,2u,1d} r158={1d,1u} r159={1d,1u} r160={1d,2u} r161={1d,1u} r162={2d,2u} r163={1d,2u} r164={1d,1u} r165={2d,2u} r166={1d,1u,1d} r167={1d,2u} r168={1d,1u} r169={2d,2u} r170={1d,1u} r171={1d,1u} r174={2d,1u} r177={1d,1u} r178={1d,1u} r179={1d,2u} r180={2d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r187={1d,1u} 
;;    total ref usage 615{329d,277u,9e} in 120{118 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269
0[0,6] 1[6,3] 2[9,3] 3[12,3] 11[15,1] 12[16,3] 13[19,1] 14[20,3] 15[23,2] 16[25,2] 17[27,2] 18[29,2] 19[31,2] 20[33,2] 21[35,2] 22[37,2] 23[39,2] 24[41,25] 25[66,1] 26[67,1] 27[68,2] 28[70,2] 29[72,2] 30[74,2] 31[76,2] 32[78,2] 33[80,2] 34[82,2] 35[84,2] 36[86,2] 37[88,2] 38[90,2] 39[92,2] 40[94,2] 41[96,2] 42[98,2] 43[100,2] 44[102,2] 45[104,2] 46[106,2] 47[108,2] 48[110,2] 49[112,2] 50[114,2] 51[116,2] 52[118,2] 53[120,2] 54[122,2] 55[124,2] 56[126,2] 57[128,2] 58[130,2] 59[132,2] 60[134,2] 61[136,2] 62[138,2] 63[140,2] 64[142,2] 65[144,2] 66[146,2] 67[148,2] 68[150,2] 69[152,2] 70[154,2] 71[156,2] 72[158,2] 73[160,2] 74[162,2] 75[164,2] 76[166,2] 77[168,2] 78[170,2] 79[172,2] 80[174,2] 81[176,2] 82[178,2] 83[180,2] 84[182,2] 85[184,2] 86[186,2] 87[188,2] 88[190,2] 89[192,2] 90[194,2] 91[196,2] 92[198,2] 93[200,2] 94[202,2] 95[204,2] 96[206,2] 97[208,2] 98[210,2] 99[212,2] 100[214,2] 101[216,2] 102[218,2] 103[220,2] 104[222,2] 105[224,2] 106[226,2] 107[228,2] 108[230,2] 109[232,2] 110[234,2] 111[236,2] 112[238,2] 113[240,2] 114[242,2] 115[244,2] 116[246,2] 117[248,2] 118[250,2] 119[252,2] 120[254,2] 121[256,2] 122[258,2] 123[260,2] 124[262,2] 125[264,2] 126[266,2] 127[268,2] 133[270,8] 134[278,1] 136[279,1] 137[280,1] 140[281,1] 141[282,1] 142[283,1] 145[284,3] 146[287,1] 147[288,1] 148[289,1] 149[290,1] 150[291,1] 151[292,2] 152[294,1] 153[295,1] 154[296,2] 156[298,3] 157[301,1] 158[302,1] 159[303,1] 160[304,1] 161[305,1] 162[306,2] 163[308,1] 164[309,1] 165[310,2] 166[312,1] 167[313,1] 168[314,1] 169[315,2] 170[317,1] 171[318,2] 174[320,2] 177[322,1] 178[323,1] 179[324,1] 180[325,2] 183[327,1] 184[328,1] 185[329,1] 187[330,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 140 141 142 145 146 147 148
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 140 141 142 145 146 147 148
;; live  kill	 14 [lr]
;; rd  in  	(10)
5, 8, 11, 14, 15, 18, 19, 22, 66, 67
;; rd  gen 	(11)
3, 7, 64, 278, 281, 282, 283, 285, 287, 288, 289
;; rd  kill	(44)
0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 278, 281, 282, 283, 287, 288, 289

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/vfp/vfpdouble.c:359 (set (reg/v:SI 140 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:359 (set (reg/v:SI 141 [ signal_on_qnan ])
        (reg:SI 1 r1 [ signal_on_qnan ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ signal_on_qnan ])
        (nil)))

(insn 4 3 6 2 arch/arm/vfp/vfpdouble.c:359 (set (reg/v:SI 142 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(note 6 4 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:363 (set (reg:SI 0 r0)
        (reg/v:SI 142 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 142 [ dm ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:363 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 259 2 arch/arm/vfp/vfpdouble.c:363 (set (reg/v:DI 134 [ m ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 259 11 13 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:DI 145)
        (const_int 0 [0x0])) -1 (nil))

(insn 13 259 14 2 arch/arm/vfp/vfpdouble.c:364 (set (subreg:SI (reg:DI 145) 0)
        (ashiftrt:SI (subreg:SI (reg/v:DI 134 [ m ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 14 13 15 2 arch/arm/vfp/vfpdouble.c:364 (set (subreg:SI (reg:DI 145) 4)
        (ashiftrt:SI (subreg:SI (reg/v:DI 134 [ m ]) 4)
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 15 14 16 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:DI 147)
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (nil))

(insn 16 15 17 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:DI 146)
        (and:DI (reg:DI 145)
            (reg:DI 147))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 147)
        (expr_list:REG_DEAD (reg:DI 145)
            (expr_list:REG_EQUAL (and:DI (reg:DI 145)
                    (const_int 2047 [0x7ff]))
                (nil)))))

(insn 17 16 18 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:SI 148)
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (nil))

(insn 18 17 19 2 arch/arm/vfp/vfpdouble.c:364 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 146) 0)
            (reg:SI 148))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 148)
        (expr_list:REG_EQUAL (compare:CC (subreg:SI (reg:DI 146) 0)
                (const_int 2047 [0x7ff]))
            (nil))))

(jump_insn 19 18 223 2 arch/arm/vfp/vfpdouble.c:364 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 2 -> ( 8 3)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141 146
;; rd  out 	(18)
3, 7, 11, 14, 15, 18, 19, 64, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289


;; Succ edge  8 [71.0%] 
;; Succ edge  3 [29.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u23(11){ }u24(13){ }u25(25){ }u26(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(18)
3, 7, 11, 14, 15, 18, 19, 64, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289
;; rd  gen 	(1)
63
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

;; Pred edge  2 [29.0%]  (fallthru)
(note 223 19 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 20 223 21 3 arch/arm/vfp/vfpdouble.c:364 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 146) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 146)
        (nil)))

(jump_insn 21 20 22 3 arch/arm/vfp/vfpdouble.c:364 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; rd  out 	(18)
3, 7, 11, 14, 15, 18, 19, 63, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u29(11){ }u30(13){ }u31(25){ }u32(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 149 150 151
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 24 [cc] 149 150 151
;; live  kill	
;; rd  in  	(18)
3, 7, 11, 14, 15, 18, 19, 63, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289
;; rd  gen 	(4)
62, 290, 291, 292
;; rd  kill	(29)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 290, 291, 292, 293

;; Pred edge  3 [50.0%]  (fallthru)
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (set (reg:DI 150)
        (const_int 4503599627370495 [0xfffffffffffff])) 163 {*arm_movdi} (nil))

(insn 24 23 25 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (set (reg:DI 149)
        (and:DI (reg/v:DI 134 [ m ])
            (reg:DI 150))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 150)
        (expr_list:REG_EQUAL (and:DI (reg/v:DI 134 [ m ])
                (const_int 4503599627370495 [0xfffffffffffff]))
            (nil))))

(insn 25 24 26 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (set (reg:SI 151)
        (subreg:SI (reg:DI 149) 0)) 167 {*arm_movsi_insn} (nil))

(insn 26 25 27 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (set (reg:SI 151)
        (ior:SI (reg:SI 151)
            (subreg:SI (reg:DI 149) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 149)
        (nil)))

(insn 27 26 28 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 151)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 151)
        (nil)))

(jump_insn 28 27 29 4 arch/arm/vfp/vfpdouble.c:364 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; rd  out 	(21)
3, 7, 11, 14, 15, 18, 19, 62, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u41(11){ }u42(13){ }u43(25){ }u44(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(21)
3, 7, 11, 14, 15, 18, 19, 62, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292
;; rd  gen 	(1)
61
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

;; Pred edge  4 [50.0%]  (fallthru)
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 31 5 arch/arm/vfp/vfpdouble.c:366 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ signal_on_qnan ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 31 30 32 5 arch/arm/vfp/vfpdouble.c:366 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 9 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; rd  out 	(21)
3, 7, 11, 14, 15, 18, 19, 61, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292


;; Succ edge  9 [50.0%] 
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u47(11){ }u48(13){ }u49(25){ }u50(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 152 153 154
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 24 [cc] 152 153 154
;; live  kill	
;; rd  in  	(21)
3, 7, 11, 14, 15, 18, 19, 61, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292
;; rd  gen 	(4)
60, 294, 295, 296
;; rd  kill	(29)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 294, 295, 296, 297

;; Pred edge  5 [50.0%]  (fallthru)
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 33 32 34 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (reg:DI 153)
        (const_int 2251799813685248 [0x8000000000000])) 163 {*arm_movdi} (nil))

(insn 34 33 35 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (reg:DI 152)
        (and:DI (reg/v:DI 134 [ m ])
            (reg:DI 153))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 153)
        (expr_list:REG_EQUAL (and:DI (reg/v:DI 134 [ m ])
                (const_int 2251799813685248 [0x8000000000000]))
            (nil))))

(insn 35 34 36 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (reg:SI 154)
        (subreg:SI (reg:DI 152) 0)) 167 {*arm_movsi_insn} (nil))

(insn 36 35 37 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (reg:SI 154)
        (ior:SI (reg:SI 154)
            (subreg:SI (reg:DI 152) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 152)
        (nil)))

(insn 37 36 38 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 154)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 154)
        (nil)))

(jump_insn 38 37 39 6 arch/arm/vfp/vfpdouble.c:366 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 9 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; rd  out 	(24)
3, 7, 11, 14, 15, 18, 19, 60, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296


;; Succ edge  9 [50.0%] 
;; Succ edge  7 [50.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u59(11){ }u60(13){ }u61(25){ }u62(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 133
;; live  kill	
;; rd  in  	(24)
3, 7, 11, 14, 15, 18, 19, 60, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296
;; rd  gen 	(1)
277
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277

;; Pred edge  6 [50.0%]  (fallthru)
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 40 39 261 7 arch/arm/vfp/vfpdouble.c:365 (set (reg/v:SI 133 [ ret ])
        (const_int 805306368 [0x30000000])) 167 {*arm_movsi_insn} (nil))

(jump_insn 261 40 262 7 (set (pc)
        (label_ref 51)) -1 (nil))
;; End of basic block 7 -> ( 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; rd  out 	(25)
3, 7, 11, 14, 15, 18, 19, 60, 66, 67, 277, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296


;; Succ edge  10 [100.0%] 

(barrier 262 261 43)

;; Start of basic block ( 3 4 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u63(11){ }u64(13){ }u65(25){ }u66(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 133
;; live  kill	
;; rd  in  	(23)
3, 7, 11, 14, 15, 18, 19, 62, 63, 64, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292
;; rd  gen 	(1)
276
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [50.0%] 
;; Pred edge  2 [71.0%] 
(code_label 43 262 44 8 64 "" [3 uses])

(note 44 43 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 263 8 arch/arm/vfp/vfpdouble.c:361 (set (reg/v:SI 133 [ ret ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 263 45 264 8 (set (pc)
        (label_ref 51)) -1 (nil))
;; End of basic block 8 -> ( 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; rd  out 	(24)
3, 7, 11, 14, 15, 18, 19, 62, 63, 64, 66, 67, 276, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292


;; Succ edge  10 [100.0%] 

(barrier 264 263 48)

;; Start of basic block ( 6 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u67(11){ }u68(13){ }u69(25){ }u70(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 140 141
;; live  gen 	 133
;; live  kill	
;; rd  in  	(25)
3, 7, 11, 14, 15, 18, 19, 60, 61, 66, 67, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296
;; rd  gen 	(1)
275
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277

;; Pred edge  6 [50.0%] 
;; Pred edge  5 [50.0%] 
(code_label 48 264 49 9 65 "" [2 uses])

(note 49 48 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 51 9 arch/arm/vfp/vfpdouble.c:370 (set (reg/v:SI 133 [ ret ])
        (const_int 805306369 [0x30000001])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; rd  out 	(26)
3, 7, 11, 14, 15, 18, 19, 60, 61, 66, 67, 275, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9 7 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u71(11){ }u72(13){ }u73(25){ }u74(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 156 157 158 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 140 141
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 137 156 157 158 159
;; live  kill	 14 [lr]
;; rd  in  	(31)
3, 7, 11, 14, 15, 18, 19, 60, 61, 62, 63, 64, 66, 67, 275, 276, 277, 278, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296
;; rd  gen 	(8)
1, 6, 58, 280, 299, 301, 302, 303
;; rd  kill	(41)
0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 280, 301, 302, 303

;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  8 [100.0%] 
(code_label 51 50 52 10 66 "" [2 uses])

(note 52 51 53 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 10 arch/arm/vfp/vfpdouble.c:373 (set (reg:SI 0 r0)
        (reg/v:SI 140 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ dd ])
        (nil)))

(call_insn 54 53 55 10 arch/arm/vfp/vfpdouble.c:373 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 55 54 260 10 arch/arm/vfp/vfpdouble.c:373 (set (reg:DI 137 [ D.4354 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 260 55 57 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:DI 156)
        (const_int 0 [0x0])) -1 (nil))

(insn 57 260 58 10 arch/arm/vfp/vfpdouble.c:374 (set (subreg:SI (reg:DI 156) 0)
        (ashiftrt:SI (subreg:SI (reg:DI 137 [ D.4354 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 58 57 59 10 arch/arm/vfp/vfpdouble.c:374 (set (subreg:SI (reg:DI 156) 4)
        (ashiftrt:SI (subreg:SI (reg:DI 137 [ D.4354 ]) 4)
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 59 58 60 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:DI 158)
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (nil))

(insn 60 59 61 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:DI 157)
        (and:DI (reg:DI 156)
            (reg:DI 158))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 158)
        (expr_list:REG_DEAD (reg:DI 156)
            (expr_list:REG_EQUAL (and:DI (reg:DI 156)
                    (const_int 2047 [0x7ff]))
                (nil)))))

(insn 61 60 62 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:SI 159)
        (const_int 2047 [0x7ff])) 167 {*arm_movsi_insn} (nil))

(insn 62 61 63 10 arch/arm/vfp/vfpdouble.c:374 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 157) 0)
            (reg:SI 159))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 159)
        (expr_list:REG_EQUAL (compare:CC (subreg:SI (reg:DI 157) 0)
                (const_int 2047 [0x7ff]))
            (nil))))

(jump_insn 63 62 224 10 arch/arm/vfp/vfpdouble.c:374 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 10 -> ( 16 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141 157
;; rd  out 	(32)
1, 6, 11, 14, 15, 18, 19, 58, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303


;; Succ edge  16 [71.0%] 
;; Succ edge  11 [29.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141 157
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(32)
1, 6, 11, 14, 15, 18, 19, 58, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303
;; rd  gen 	(1)
57
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

;; Pred edge  10 [29.0%]  (fallthru)
(note 224 63 64 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 64 224 65 11 arch/arm/vfp/vfpdouble.c:374 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 157) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 157)
        (nil)))

(jump_insn 65 64 66 11 arch/arm/vfp/vfpdouble.c:374 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 11 -> ( 12 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141
;; rd  out 	(32)
1, 6, 11, 14, 15, 18, 19, 57, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303


;; Succ edge  12 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u97(11){ }u98(13){ }u99(25){ }u100(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 160 161 162
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141
;; live  gen 	 24 [cc] 160 161 162
;; live  kill	
;; rd  in  	(32)
1, 6, 11, 14, 15, 18, 19, 57, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303
;; rd  gen 	(4)
56, 304, 305, 306
;; rd  kill	(29)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 304, 305, 306, 307

;; Pred edge  11 [50.0%]  (fallthru)
(note 66 65 67 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 67 66 68 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (set (reg:DI 161)
        (const_int 4503599627370495 [0xfffffffffffff])) 163 {*arm_movdi} (nil))

(insn 68 67 69 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (set (reg:DI 160)
        (and:DI (reg:DI 137 [ D.4354 ])
            (reg:DI 161))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 161)
        (expr_list:REG_EQUAL (and:DI (reg:DI 137 [ D.4354 ])
                (const_int 4503599627370495 [0xfffffffffffff]))
            (nil))))

(insn 69 68 70 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (set (reg:SI 162)
        (subreg:SI (reg:DI 160) 0)) 167 {*arm_movsi_insn} (nil))

(insn 70 69 71 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (set (reg:SI 162)
        (ior:SI (reg:SI 162)
            (subreg:SI (reg:DI 160) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 160)
        (nil)))

(insn 71 70 72 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 162)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 162)
        (nil)))

(jump_insn 72 71 73 12 arch/arm/vfp/vfpdouble.c:374 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 89)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 12 -> ( 13 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 141
;; rd  out 	(35)
1, 6, 11, 14, 15, 18, 19, 56, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306


;; Succ edge  13 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u109(11){ }u110(13){ }u111(25){ }u112(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141
;; lr  def 	 24 [cc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 141
;; live  gen 	 24 [cc] 133
;; live  kill	
;; rd  in  	(35)
1, 6, 11, 14, 15, 18, 19, 56, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(2)
55, 274
;; rd  kill	(33)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 270, 271, 272, 273, 274, 275, 276, 277

;; Pred edge  12 [50.0%]  (fallthru)
(note 73 72 74 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 74 73 75 13 arch/arm/vfp/vfpdouble.c:375 (set (reg/v:SI 133 [ ret ])
        (ior:SI (reg/v:SI 133 [ ret ])
            (const_int 805306368 [0x30000000]))) 89 {*arm_iorsi3} (nil))

(insn 75 74 76 13 arch/arm/vfp/vfpdouble.c:376 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ signal_on_qnan ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ signal_on_qnan ])
        (nil)))

(jump_insn 76 75 77 13 arch/arm/vfp/vfpdouble.c:376 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 84)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137
;; rd  out 	(33)
1, 6, 11, 14, 15, 18, 19, 55, 66, 67, 274, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306


;; Succ edge  15 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u116(11){ }u117(13){ }u118(25){ }u119(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 163 164 165
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137
;; live  gen 	 24 [cc] 163 164 165
;; live  kill	
;; rd  in  	(33)
1, 6, 11, 14, 15, 18, 19, 55, 66, 67, 274, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(4)
54, 308, 309, 310
;; rd  kill	(29)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 308, 309, 310, 311

;; Pred edge  13 [50.0%]  (fallthru)
(note 77 76 78 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 78 77 79 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (reg:DI 164)
        (const_int 2251799813685248 [0x8000000000000])) 163 {*arm_movdi} (nil))

(insn 79 78 80 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (reg:DI 163)
        (and:DI (reg:DI 137 [ D.4354 ])
            (reg:DI 164))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 164)
        (expr_list:REG_DEAD (reg:DI 137 [ D.4354 ])
            (expr_list:REG_EQUAL (and:DI (reg:DI 137 [ D.4354 ])
                    (const_int 2251799813685248 [0x8000000000000]))
                (nil)))))

(insn 80 79 81 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (reg:SI 165)
        (subreg:SI (reg:DI 163) 0)) 167 {*arm_movsi_insn} (nil))

(insn 81 80 82 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (reg:SI 165)
        (ior:SI (reg:SI 165)
            (subreg:SI (reg:DI 163) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 163)
        (nil)))

(insn 82 81 83 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 165)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 165)
        (nil)))

(jump_insn 83 82 84 14 arch/arm/vfp/vfpdouble.c:376 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 209)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 14 -> ( 15 38)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(36)
1, 6, 11, 14, 15, 18, 19, 54, 66, 67, 274, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  38 [50.0%] 

;; Start of basic block ( 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u128(11){ }u129(13){ }u130(25){ }u131(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 133
;; live  kill	
;; rd  in  	(37)
1, 6, 11, 14, 15, 18, 19, 54, 55, 66, 67, 274, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310
;; rd  gen 	(1)
273
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277

;; Pred edge  13 [50.0%] 
;; Pred edge  14 [50.0%]  (fallthru)
(code_label 84 83 85 15 68 "" [1 uses])

(note 85 84 86 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 265 15 arch/arm/vfp/vfpdouble.c:380 (set (reg/v:SI 133 [ ret ])
        (ior:SI (reg/v:SI 133 [ ret ])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(jump_insn 265 86 266 15 (set (pc)
        (label_ref 209)) -1 (nil))
;; End of basic block 15 -> ( 38)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(37)
1, 6, 11, 14, 15, 18, 19, 54, 55, 66, 67, 273, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310


;; Succ edge  38 [100.0%] 

(barrier 266 265 89)

;; Start of basic block ( 11 12 10) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u133(11){ }u134(13){ }u135(25){ }u136(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(37)
1, 6, 11, 14, 15, 18, 19, 56, 57, 58, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(1)
53
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

;; Pred edge  11 [50.0%] 
;; Pred edge  12 [50.0%] 
;; Pred edge  10 [71.0%] 
(code_label 89 266 90 16 67 "" [3 uses])

(note 90 89 91 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 92 16 arch/arm/vfp/vfpdouble.c:383 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 133 [ ret ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 92 91 93 16 arch/arm/vfp/vfpdouble.c:383 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 209)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2907 [0xb5b])
            (nil))))
;; End of basic block 16 -> ( 17 38)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(35)
1, 6, 11, 14, 15, 18, 19, 53, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306


;; Succ edge  17 [70.9%]  (fallthru)
;; Succ edge  38 [29.1%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u139(11){ }u140(13){ }u141(25){ }u142(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(35)
1, 6, 11, 14, 15, 18, 19, 53, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(1)
48
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

;; Pred edge  16 [70.9%]  (fallthru)
(note 93 92 94 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 17 arch/arm/vfp/vfpdouble.c:384 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 137 [ D.4354 ]) 0)
            (subreg:SI (reg/v:DI 134 [ m ]) 0))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 95 94 225 17 arch/arm/vfp/vfpdouble.c:384 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 255)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 17 -> ( 19 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(35)
1, 6, 11, 14, 15, 18, 19, 48, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306


;; Succ edge  19 [71.0%] 
;; Succ edge  18 [29.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u146(11){ }u147(13){ }u148(25){ }u149(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(35)
1, 6, 11, 14, 15, 18, 19, 48, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(1)
47
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

;; Pred edge  17 [29.0%]  (fallthru)
(note 225 95 96 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 96 225 97 18 arch/arm/vfp/vfpdouble.c:384 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 137 [ D.4354 ]) 4)
            (subreg:SI (reg/v:DI 134 [ m ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 97 96 255 18 arch/arm/vfp/vfpdouble.c:384 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 196)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 18 -> ( 19 35)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(35)
1, 6, 11, 14, 15, 18, 19, 47, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306


;; Succ edge  19 [71.0%]  (fallthru)
;; Succ edge  35 [29.0%] 

;; Start of basic block ( 18 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u153(11){ }u154(13){ }u155(25){ }u156(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc] 166 167 168 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc] 166 167 168 169
;; live  kill	
;; rd  in  	(36)
1, 6, 11, 14, 15, 18, 19, 47, 48, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306
;; rd  gen 	(5)
52, 312, 313, 314, 315
;; rd  kill	(30)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 312, 313, 314, 315, 316

;; Pred edge  18 [71.0%]  (fallthru)
;; Pred edge  17 [71.0%] 
(code_label 255 97 101 19 84 "" [1 uses])

(note 101 255 102 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 102 101 103 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (reg:DI 166)
        (ior:DI (reg:DI 137 [ D.4354 ])
            (reg/v:DI 134 [ m ]))) 86 {iordi3} (nil))

(insn 103 102 104 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (reg:DI 168)
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (nil))

(insn 104 103 105 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (reg:DI 167)
        (and:DI (reg:DI 166)
            (reg:DI 168))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 168)
        (expr_list:REG_DEAD (reg:DI 166)
            (expr_list:REG_EQUAL (and:DI (reg:DI 166)
                    (const_int 9223372036854775807 [0x7fffffffffffffff]))
                (nil)))))

(insn 105 104 106 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (reg:SI 169)
        (subreg:SI (reg:DI 167) 0)) 167 {*arm_movsi_insn} (nil))

(insn 106 105 107 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (reg:SI 169)
        (ior:SI (reg:SI 169)
            (subreg:SI (reg:DI 167) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 167)
        (nil)))

(insn 107 106 108 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 169)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 169)
        (nil)))

(jump_insn 108 107 109 19 arch/arm/vfp/vfpdouble.c:384 discrim 2 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 196)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 19 -> ( 35 20)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(39)
1, 6, 11, 14, 15, 18, 19, 52, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315


;; Succ edge  35 [39.0%] 
;; Succ edge  20 [61.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u167(11){ }u168(13){ }u169(25){ }u170(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc] 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc] 170
;; live  kill	
;; rd  in  	(39)
1, 6, 11, 14, 15, 18, 19, 52, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315
;; rd  gen 	(2)
51, 317
;; rd  kill	(26)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 317

;; Pred edge  19 [61.0%]  (fallthru)
(note 109 108 110 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 110 109 111 20 arch/arm/vfp/vfpdouble.c:389 (set (reg:DI 170)
        (xor:DI (reg:DI 137 [ D.4354 ])
            (reg/v:DI 134 [ m ]))) 93 {xordi3} (nil))

(insn 111 110 112 20 arch/arm/vfp/vfpdouble.c:389 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 170) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 170)
        (nil)))

(jump_insn 112 111 228 20 arch/arm/vfp/vfpdouble.c:389 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 256)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2100 [0x834])
            (nil))))
;; End of basic block 20 -> ( 23 21)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; rd  out 	(40)
1, 6, 11, 14, 15, 18, 19, 51, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317


;; Succ edge  23 [21.0%] 
;; Succ edge  21 [79.0%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u175(11){ }u176(13){ }u177(25){ }u178(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc] 136 171 174 187
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137
;; live  gen 	 24 [cc] 136 171 174 187
;; live  kill	
;; rd  in  	(40)
1, 6, 11, 14, 15, 18, 19, 51, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317
;; rd  gen 	(5)
44, 279, 318, 321, 330
;; rd  kill	(31)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 279, 318, 319, 320, 321, 330

;; Pred edge  20 [79.0%]  (fallthru)
(note 228 112 257 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 257 228 258 21 arch/arm/vfp/vfpdouble.c:403 (set (reg:SI 187)
        (lshiftrt:SI (subreg:SI (reg:DI 137 [ D.4354 ]) 4)
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 258 257 149 21 arch/arm/vfp/vfpdouble.c:403 (set (reg:QI 171)
        (subreg:QI (reg:SI 187) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 187)
        (nil)))

(insn 149 258 151 21 arch/arm/vfp/vfpdouble.c:403 (set (reg:SI 136 [ D.4383 ])
        (zero_extend:SI (reg:QI 171))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 171)
        (nil)))

(insn 151 149 152 21 arch/arm/vfp/vfpdouble.c:403 (set (reg:QI 174)
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 152 151 153 21 arch/arm/vfp/vfpdouble.c:403 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 134 [ m ]) 4)
            (subreg:SI (reg:DI 137 [ D.4354 ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 153 152 267 21 arch/arm/vfp/vfpdouble.c:403 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 162)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 21 -> ( 27 22)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330


;; Succ edge  27 [50.0%] 
;; Succ edge  22 [50.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  gen 	
;; live  kill	
;; rd  in  	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  21 [50.0%]  (fallthru)
(note 267 153 269 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(jump_insn 269 267 270 22 (set (pc)
        (label_ref 268)) -1 (nil))
;; End of basic block 22 -> ( 25)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330


;; Succ edge  25 [100.0%] 

(barrier 270 269 256)

;; Start of basic block ( 20) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u186(11){ }u187(13){ }u188(25){ }u189(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(40)
1, 6, 11, 14, 15, 18, 19, 51, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317
;; rd  gen 	(1)
46
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

;; Pred edge  20 [21.0%] 
(code_label 256 270 120 23 85 "" [1 uses])

(note 120 256 121 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 121 120 122 23 arch/arm/vfp/vfpdouble.c:393 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 137 [ D.4354 ]) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 137 [ D.4354 ])
        (nil)))

(jump_insn 122 121 271 23 arch/arm/vfp/vfpdouble.c:393 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 201)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7900 [0x1edc])
            (nil))))
;; End of basic block 23 -> ( 24 36)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(40)
1, 6, 11, 14, 15, 18, 19, 46, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317


;; Succ edge  24 [21.0%]  (fallthru)
;; Succ edge  36 [79.0%] 

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(40)
1, 6, 11, 14, 15, 18, 19, 46, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  23 [21.0%]  (fallthru)
(note 271 122 272 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(jump_insn 272 271 273 24 (set (pc)
        (label_ref 206)) -1 (nil))
;; End of basic block 24 -> ( 37)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(40)
1, 6, 11, 14, 15, 18, 19, 46, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317


;; Succ edge  37 [100.0%] 

(barrier 273 272 268)

;; Start of basic block ( 22) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u192(11){ }u193(13){ }u194(25){ }u195(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  gen 	
;; live  kill	
;; rd  in  	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  22 [100.0%] 
(code_label 268 273 241 25 86 "" [1 uses])

(note 241 268 155 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(jump_insn 155 241 242 25 arch/arm/vfp/vfpdouble.c:403 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 165)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 25 -> ( 28 26)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330


;; Succ edge  28 [71.0%] 
;; Succ edge  26 [29.0%]  (fallthru)

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u197(11){ }u198(13){ }u199(25){ }u200(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(44)
1, 6, 11, 14, 15, 18, 19, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;; rd  gen 	(1)
43
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

;; Pred edge  25 [29.0%]  (fallthru)
(note 242 155 156 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 156 242 157 26 arch/arm/vfp/vfpdouble.c:403 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 134 [ m ]) 0)
            (subreg:SI (reg:DI 137 [ D.4354 ]) 0))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 157 156 162 26 arch/arm/vfp/vfpdouble.c:403 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 165)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 26 -> ( 27 28)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(44)
1, 6, 11, 14, 15, 18, 19, 43, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330


;; Succ edge  27 [50.0%]  (fallthru)
;; Succ edge  28 [50.0%] 

;; Start of basic block ( 21 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u204(11){ }u205(13){ }u206(25){ }u207(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 174
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137
;; live  gen 	 174
;; live  kill	
;; rd  in  	(45)
1, 6, 11, 14, 15, 18, 19, 43, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 321, 330
;; rd  gen 	(1)
320
;; rd  kill	(2)
320, 321

;; Pred edge  21 [50.0%] 
;; Pred edge  26 [50.0%]  (fallthru)
(code_label 162 157 245 27 80 "" [1 uses])

(note 245 162 164 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 164 245 165 27 arch/arm/vfp/vfpdouble.c:403 (set (reg:QI 174)
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 27 -> ( 28)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; rd  out 	(45)
1, 6, 11, 14, 15, 18, 19, 43, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 330


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 25 26 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u208(11){ }u209(13){ }u210(25){ }u211(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 174
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 174
;; lr  def 	 24 [cc] 177 178 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 174
;; live  gen 	 24 [cc] 177 178 179
;; live  kill	
;; rd  in  	(46)
1, 6, 11, 14, 15, 18, 19, 43, 44, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 330
;; rd  gen 	(4)
50, 322, 323, 324
;; rd  kill	(28)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 322, 323, 324

;; Pred edge  25 [71.0%] 
;; Pred edge  26 [50.0%] 
;; Pred edge  27 [100.0%]  (fallthru)
(code_label 165 164 246 28 79 "" [2 uses])

(note 246 165 166 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 166 246 167 28 arch/arm/vfp/vfpdouble.c:403 (set (reg:SI 177)
        (xor:SI (reg:SI 136 [ D.4383 ])
            (subreg:SI (reg:QI 174) 0))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:QI 174)
        (nil)))

(insn 167 166 168 28 arch/arm/vfp/vfpdouble.c:403 (set (reg:QI 178)
        (subreg:QI (reg:SI 177) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 177)
        (nil)))

(insn 168 167 169 28 arch/arm/vfp/vfpdouble.c:403 (set (reg:SI 179)
        (zero_extend:SI (reg:QI 178))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 178)
        (nil)))

(insn 169 168 170 28 arch/arm/vfp/vfpdouble.c:403 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 179)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 170 169 171 28 arch/arm/vfp/vfpdouble.c:403 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 206)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 28 -> ( 37 29)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 179
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 179
;; rd  out 	(48)
1, 6, 11, 14, 15, 18, 19, 50, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 330


;; Succ edge  37 [50.0%] 
;; Succ edge  29 [50.0%]  (fallthru)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u218(11){ }u219(13){ }u220(25){ }u221(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 179
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137 179
;; lr  def 	 24 [cc] 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 179
;; live  gen 	 24 [cc] 180
;; live  kill	
;; rd  in  	(48)
1, 6, 11, 14, 15, 18, 19, 50, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 330
;; rd  gen 	(2)
42, 326
;; rd  kill	(27)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 325, 326

;; Pred edge  28 [50.0%]  (fallthru)
(note 171 170 173 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 173 171 174 29 arch/arm/vfp/vfpdouble.c:408 (set (reg:QI 180)
        (subreg:QI (reg:SI 179) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 179)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 174 173 175 29 arch/arm/vfp/vfpdouble.c:408 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 137 [ D.4354 ]) 4)
            (subreg:SI (reg/v:DI 134 [ m ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 175 174 247 29 arch/arm/vfp/vfpdouble.c:408 (set (pc)
        (if_then_else (gt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 184)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 29 -> ( 32 30)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 180
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 180
;; rd  out 	(49)
1, 6, 11, 14, 15, 18, 19, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330


;; Succ edge  32 [50.0%] 
;; Succ edge  30 [50.0%]  (fallthru)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u226(11){ }u227(13){ }u228(25){ }u229(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 180
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 134 136 137 180
;; live  gen 	
;; live  kill	
;; rd  in  	(49)
1, 6, 11, 14, 15, 18, 19, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  29 [50.0%]  (fallthru)
(note 247 175 177 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(jump_insn 177 247 248 30 arch/arm/vfp/vfpdouble.c:408 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 187)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 30 -> ( 33 31)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 180
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 180
;; rd  out 	(49)
1, 6, 11, 14, 15, 18, 19, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330


;; Succ edge  33 [71.0%] 
;; Succ edge  31 [29.0%]  (fallthru)

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u231(11){ }u232(13){ }u233(25){ }u234(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 137 180
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 137 180
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(49)
1, 6, 11, 14, 15, 18, 19, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330
;; rd  gen 	(1)
41
;; rd  kill	(25)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65

;; Pred edge  30 [29.0%]  (fallthru)
(note 248 177 178 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 178 248 179 31 arch/arm/vfp/vfpdouble.c:408 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 137 [ D.4354 ]) 0)
            (subreg:SI (reg/v:DI 134 [ m ]) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 137 [ D.4354 ])
        (expr_list:REG_DEAD (reg/v:DI 134 [ m ])
            (nil))))

(jump_insn 179 178 184 31 arch/arm/vfp/vfpdouble.c:408 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 187)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 31 -> ( 32 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 180
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 180
;; rd  out 	(49)
1, 6, 11, 14, 15, 18, 19, 41, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330


;; Succ edge  32 [50.0%]  (fallthru)
;; Succ edge  33 [50.0%] 

;; Start of basic block ( 29 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u238(11){ }u239(13){ }u240(25){ }u241(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136
;; live  gen 	 180
;; live  kill	
;; rd  in  	(50)
1, 6, 11, 14, 15, 18, 19, 41, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 326, 330
;; rd  gen 	(1)
325
;; rd  kill	(2)
325, 326

;; Pred edge  29 [50.0%] 
;; Pred edge  31 [50.0%]  (fallthru)
(code_label 184 179 251 32 82 "" [1 uses])

(note 251 184 186 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 186 251 187 32 arch/arm/vfp/vfpdouble.c:408 (set (reg:QI 180)
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 32 -> ( 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 180
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 180
;; rd  out 	(50)
1, 6, 11, 14, 15, 18, 19, 41, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 330


;; Succ edge  33 [100.0%]  (fallthru)

;; Start of basic block ( 30 31 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u242(11){ }u243(13){ }u244(25){ }u245(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 136 180
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 180
;; lr  def 	 24 [cc] 183 184 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 180
;; live  gen 	 24 [cc] 183 184 185
;; live  kill	
;; rd  in  	(51)
1, 6, 11, 14, 15, 18, 19, 41, 42, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 330
;; rd  gen 	(4)
49, 327, 328, 329
;; rd  kill	(28)
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 327, 328, 329

;; Pred edge  30 [71.0%] 
;; Pred edge  31 [50.0%] 
;; Pred edge  32 [100.0%]  (fallthru)
(code_label 187 186 252 33 81 "" [2 uses])

(note 252 187 188 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 188 252 189 33 arch/arm/vfp/vfpdouble.c:408 (set (reg:SI 183)
        (xor:SI (reg:SI 136 [ D.4383 ])
            (subreg:SI (reg:QI 180) 0))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:QI 180)
        (expr_list:REG_DEAD (reg:SI 136 [ D.4383 ])
            (nil))))

(insn 189 188 190 33 arch/arm/vfp/vfpdouble.c:408 (set (reg:QI 184)
        (subreg:QI (reg:SI 183) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 183)
        (nil)))

(insn 190 189 191 33 arch/arm/vfp/vfpdouble.c:408 (set (reg:SI 185)
        (zero_extend:SI (reg:QI 184))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 184)
        (nil)))

(insn 191 190 192 33 arch/arm/vfp/vfpdouble.c:408 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 185)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 185)
        (nil)))

(jump_insn 192 191 274 33 arch/arm/vfp/vfpdouble.c:408 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 201)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 33 -> ( 36 34)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(53)
1, 6, 11, 14, 15, 18, 19, 49, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330


;; Succ edge  36 [50.0%] 
;; Succ edge  34 [50.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	
;; live  kill	
;; rd  in  	(53)
1, 6, 11, 14, 15, 18, 19, 49, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  33 [50.0%]  (fallthru)
(note 274 192 275 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(jump_insn 275 274 276 34 (set (pc)
        (label_ref 209)) -1 (nil))
;; End of basic block 34 -> ( 38)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(53)
1, 6, 11, 14, 15, 18, 19, 49, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330


;; Succ edge  38 [100.0%] 

(barrier 276 275 196)

;; Start of basic block ( 19 18) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u252(11){ }u253(13){ }u254(25){ }u255(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	
;; rd  in  	(40)
1, 6, 11, 14, 15, 18, 19, 47, 52, 66, 67, 275, 276, 277, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315
;; rd  gen 	(1)
272
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277

;; Pred edge  19 [39.0%] 
;; Pred edge  18 [29.0%] 
(code_label 196 276 197 35 70 "" [2 uses])

(note 197 196 198 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 198 197 277 35 arch/arm/vfp/vfpdouble.c:388 (set (reg/v:SI 133 [ ret ])
        (const_int 1610612736 [0x60000000])) 167 {*arm_movsi_insn} (nil))

(jump_insn 277 198 278 35 (set (pc)
        (label_ref 209)) -1 (nil))
;; End of basic block 35 -> ( 38)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(38)
1, 6, 11, 14, 15, 18, 19, 47, 52, 66, 67, 272, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315


;; Succ edge  38 [100.0%] 

(barrier 278 277 201)

;; Start of basic block ( 33 23) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u256(11){ }u257(13){ }u258(25){ }u259(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	
;; rd  in  	(54)
1, 6, 11, 14, 15, 18, 19, 46, 49, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;; rd  gen 	(1)
271
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277

;; Pred edge  33 [50.0%] 
;; Pred edge  23 [79.0%] 
(code_label 201 278 202 36 76 "" [2 uses])

(note 202 201 203 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 203 202 279 36 arch/arm/vfp/vfpdouble.c:402 (set (reg/v:SI 133 [ ret ])
        (const_int 536870912 [0x20000000])) 167 {*arm_movsi_insn} (nil))

(jump_insn 279 203 280 36 (set (pc)
        (label_ref 209)) -1 (nil))
;; End of basic block 36 -> ( 38)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(52)
1, 6, 11, 14, 15, 18, 19, 46, 49, 66, 67, 271, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330


;; Succ edge  38 [100.0%] 

(barrier 280 279 206)

;; Start of basic block ( 28 24) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u260(11){ }u261(13){ }u262(25){ }u263(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	
;; rd  in  	(49)
1, 6, 11, 14, 15, 18, 19, 46, 50, 66, 67, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 330
;; rd  gen 	(1)
270
;; rd  kill	(8)
270, 271, 272, 273, 274, 275, 276, 277

;; Pred edge  28 [50.0%] 
;; Pred edge  24 [100.0%] 
(code_label 206 280 207 37 74 "" [2 uses])

(note 207 206 208 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 208 207 209 37 arch/arm/vfp/vfpdouble.c:407 (set (reg/v:SI 133 [ ret ])
        (const_int -2147483648 [0xffffffff80000000])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 37 -> ( 38)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; rd  out 	(47)
1, 6, 11, 14, 15, 18, 19, 46, 50, 66, 67, 270, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 330


;; Succ edge  38 [100.0%]  (fallthru)

;; Start of basic block ( 37 35 16 34 14 15 36) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u264(11){ }u265(13){ }u266(25){ }u267(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(68)
1, 6, 11, 14, 15, 18, 19, 46, 47, 49, 50, 52, 53, 54, 55, 66, 67, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330
;; rd  gen 	(1)
0
;; rd  kill	(6)
0, 1, 2, 3, 4, 5

;; Pred edge  37 [100.0%]  (fallthru)
;; Pred edge  35 [100.0%] 
;; Pred edge  16 [29.1%] 
;; Pred edge  34 [100.0%] 
;; Pred edge  14 [50.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  36 [100.0%] 
(code_label 209 208 210 38 69 "" [6 uses])

(note 210 209 215 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 215 210 221 38 arch/arm/vfp/vfpdouble.c:417 (set (reg/i:SI 0 r0)
        (reg/v:SI 133 [ ret ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 133 [ ret ])
        (nil)))

(insn 221 215 0 38 arch/arm/vfp/vfpdouble.c:417 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 38 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(68)
0, 6, 11, 14, 15, 18, 19, 46, 47, 49, 50, 52, 53, 54, 55, 66, 67, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fcmpez (vfp_double_fcmpez)[0:163]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcmpez

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={3d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 142{128d,14u,0e} in 3{2 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127
0[0,2] 1[2,3] 2[5,3] 3[8,2] 11[10,1] 12[11,2] 13[13,1] 14[14,1] 15[15,1] 16[16,1] 17[17,1] 18[18,1] 19[19,1] 20[20,1] 21[21,1] 22[22,1] 23[23,1] 24[24,1] 25[25,1] 26[26,1] 27[27,1] 28[28,1] 29[29,1] 30[30,1] 31[31,1] 32[32,1] 33[33,1] 34[34,1] 35[35,1] 36[36,1] 37[37,1] 38[38,1] 39[39,1] 40[40,1] 41[41,1] 42[42,1] 43[43,1] 44[44,1] 45[45,1] 46[46,1] 47[47,1] 48[48,1] 49[49,1] 50[50,1] 51[51,1] 52[52,1] 53[53,1] 54[54,1] 55[55,1] 56[56,1] 57[57,1] 58[58,1] 59[59,1] 60[60,1] 61[61,1] 62[62,1] 63[63,1] 64[64,1] 65[65,1] 66[66,1] 67[67,1] 68[68,1] 69[69,1] 70[70,1] 71[71,1] 72[72,1] 73[73,1] 74[74,1] 75[75,1] 76[76,1] 77[77,1] 78[78,1] 79[79,1] 80[80,1] 81[81,1] 82[82,1] 83[83,1] 84[84,1] 85[85,1] 86[86,1] 87[87,1] 88[88,1] 89[89,1] 90[90,1] 91[91,1] 92[92,1] 93[93,1] 94[94,1] 95[95,1] 96[96,1] 97[97,1] 98[98,1] 99[99,1] 100[100,1] 101[101,1] 102[102,1] 103[103,1] 104[104,1] 105[105,1] 106[106,1] 107[107,1] 108[108,1] 109[109,1] 110[110,1] 111[111,1] 112[112,1] 113[113,1] 114[114,1] 115[115,1] 116[116,1] 117[117,1] 118[118,1] 119[119,1] 120[120,1] 121[121,1] 122[122,1] 123[123,1] 124[124,1] 125[125,1] 126[126,1] 127[127,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d4(1){ }d7(2){ }d9(3){ }d10(11){ }d12(12){ }d13(13){ }d14(14){ }d25(25){ }d26(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  kill	(17)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 25, 26
;; lr  out 	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d10(bb 0 insn -1) }u1(13){ d13(bb 0 insn -1) }u2(25){ d25(bb 0 insn -1) }u3(26){ d26(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	
;; rd  in  	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26
;;  UD chains for artificial uses
;;   reg 11 { d10(bb 0 insn -1) }
;;   reg 13 { d13(bb 0 insn -1) }
;;   reg 25 { d25(bb 0 insn -1) }
;;   reg 26 { d26(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 13
;;      reg 13 { d13(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 2 insn 10) }
;;      reg 2 { d6(bb 2 insn 11) }
;;      reg 3 { d9(bb 0 insn -1) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u9(0){ d0(bb 2 insn 13) }u10(11){ d10(bb 0 insn -1) }u11(13){ d13(bb 0 insn -1) }u12(14){ d14(bb 0 insn -1) }u13(25){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(10)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 13) }
;;   reg 11 { d10(bb 0 insn -1) }
;;   reg 13 { d13(bb 0 insn -1) }
;;   reg 14 { d14(bb 0 insn -1) }
;;   reg 25 { d25(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 13:
Processing use of (reg 0 r0) in insn 13:
Processing use of (reg 1 r1) in insn 13:
  Adding insn 10 to worklist
Processing use of (reg 2 r2) in insn 13:
  Adding insn 11 to worklist
Processing use of (reg 3 r3) in insn 13:


vfp_double_fcmpez

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={3d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 142{128d,14u,0e} in 3{2 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127
0[0,2] 1[2,3] 2[5,3] 3[8,2] 11[10,1] 12[11,2] 13[13,1] 14[14,1] 15[15,1] 16[16,1] 17[17,1] 18[18,1] 19[19,1] 20[20,1] 21[21,1] 22[22,1] 23[23,1] 24[24,1] 25[25,1] 26[26,1] 27[27,1] 28[28,1] 29[29,1] 30[30,1] 31[31,1] 32[32,1] 33[33,1] 34[34,1] 35[35,1] 36[36,1] 37[37,1] 38[38,1] 39[39,1] 40[40,1] 41[41,1] 42[42,1] 43[43,1] 44[44,1] 45[45,1] 46[46,1] 47[47,1] 48[48,1] 49[49,1] 50[50,1] 51[51,1] 52[52,1] 53[53,1] 54[54,1] 55[55,1] 56[56,1] 57[57,1] 58[58,1] 59[59,1] 60[60,1] 61[61,1] 62[62,1] 63[63,1] 64[64,1] 65[65,1] 66[66,1] 67[67,1] 68[68,1] 69[69,1] 70[70,1] 71[71,1] 72[72,1] 73[73,1] 74[74,1] 75[75,1] 76[76,1] 77[77,1] 78[78,1] 79[79,1] 80[80,1] 81[81,1] 82[82,1] 83[83,1] 84[84,1] 85[85,1] 86[86,1] 87[87,1] 88[88,1] 89[89,1] 90[90,1] 91[91,1] 92[92,1] 93[93,1] 94[94,1] 95[95,1] 96[96,1] 97[97,1] 98[98,1] 99[99,1] 100[100,1] 101[101,1] 102[102,1] 103[103,1] 104[104,1] 105[105,1] 106[106,1] 107[107,1] 108[108,1] 109[109,1] 110[110,1] 111[111,1] 112[112,1] 113[113,1] 114[114,1] 115[115,1] 116[116,1] 117[117,1] 118[118,1] 119[119,1] 120[120,1] 121[121,1] 122[122,1] 123[123,1] 124[124,1] 125[125,1] 126[126,1] 127[127,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	
;; rd  in  	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 11 2 arch/arm/vfp/vfpdouble.c:436 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 13 2 arch/arm/vfp/vfpdouble.c:436 (set (reg:SI 2 r2)
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 11 14 2 arch/arm/vfp/vfpdouble.c:436 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_compare") [flags 0x3] <function_decl 0x10ad5380 vfp_compare>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fcmpz (vfp_double_fcmpz)[0:162]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcmpz

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={3d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 142{128d,14u,0e} in 3{2 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127
0[0,2] 1[2,3] 2[5,3] 3[8,2] 11[10,1] 12[11,2] 13[13,1] 14[14,1] 15[15,1] 16[16,1] 17[17,1] 18[18,1] 19[19,1] 20[20,1] 21[21,1] 22[22,1] 23[23,1] 24[24,1] 25[25,1] 26[26,1] 27[27,1] 28[28,1] 29[29,1] 30[30,1] 31[31,1] 32[32,1] 33[33,1] 34[34,1] 35[35,1] 36[36,1] 37[37,1] 38[38,1] 39[39,1] 40[40,1] 41[41,1] 42[42,1] 43[43,1] 44[44,1] 45[45,1] 46[46,1] 47[47,1] 48[48,1] 49[49,1] 50[50,1] 51[51,1] 52[52,1] 53[53,1] 54[54,1] 55[55,1] 56[56,1] 57[57,1] 58[58,1] 59[59,1] 60[60,1] 61[61,1] 62[62,1] 63[63,1] 64[64,1] 65[65,1] 66[66,1] 67[67,1] 68[68,1] 69[69,1] 70[70,1] 71[71,1] 72[72,1] 73[73,1] 74[74,1] 75[75,1] 76[76,1] 77[77,1] 78[78,1] 79[79,1] 80[80,1] 81[81,1] 82[82,1] 83[83,1] 84[84,1] 85[85,1] 86[86,1] 87[87,1] 88[88,1] 89[89,1] 90[90,1] 91[91,1] 92[92,1] 93[93,1] 94[94,1] 95[95,1] 96[96,1] 97[97,1] 98[98,1] 99[99,1] 100[100,1] 101[101,1] 102[102,1] 103[103,1] 104[104,1] 105[105,1] 106[106,1] 107[107,1] 108[108,1] 109[109,1] 110[110,1] 111[111,1] 112[112,1] 113[113,1] 114[114,1] 115[115,1] 116[116,1] 117[117,1] 118[118,1] 119[119,1] 120[120,1] 121[121,1] 122[122,1] 123[123,1] 124[124,1] 125[125,1] 126[126,1] 127[127,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d4(1){ }d7(2){ }d9(3){ }d10(11){ }d12(12){ }d13(13){ }d14(14){ }d25(25){ }d26(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  kill	(17)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 25, 26
;; lr  out 	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d10(bb 0 insn -1) }u1(13){ d13(bb 0 insn -1) }u2(25){ d25(bb 0 insn -1) }u3(26){ d26(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	
;; rd  in  	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26
;;  UD chains for artificial uses
;;   reg 11 { d10(bb 0 insn -1) }
;;   reg 13 { d13(bb 0 insn -1) }
;;   reg 25 { d25(bb 0 insn -1) }
;;   reg 26 { d26(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 13
;;      reg 13 { d13(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 2 insn 10) }
;;      reg 2 { d6(bb 2 insn 11) }
;;      reg 3 { d9(bb 0 insn -1) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u9(0){ d0(bb 2 insn 13) }u10(11){ d10(bb 0 insn -1) }u11(13){ d13(bb 0 insn -1) }u12(14){ d14(bb 0 insn -1) }u13(25){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(10)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 13) }
;;   reg 11 { d10(bb 0 insn -1) }
;;   reg 13 { d13(bb 0 insn -1) }
;;   reg 14 { d14(bb 0 insn -1) }
;;   reg 25 { d25(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 13:
Processing use of (reg 0 r0) in insn 13:
Processing use of (reg 1 r1) in insn 13:
  Adding insn 10 to worklist
Processing use of (reg 2 r2) in insn 13:
  Adding insn 11 to worklist
Processing use of (reg 3 r3) in insn 13:


vfp_double_fcmpz

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={3d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 142{128d,14u,0e} in 3{2 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127
0[0,2] 1[2,3] 2[5,3] 3[8,2] 11[10,1] 12[11,2] 13[13,1] 14[14,1] 15[15,1] 16[16,1] 17[17,1] 18[18,1] 19[19,1] 20[20,1] 21[21,1] 22[22,1] 23[23,1] 24[24,1] 25[25,1] 26[26,1] 27[27,1] 28[28,1] 29[29,1] 30[30,1] 31[31,1] 32[32,1] 33[33,1] 34[34,1] 35[35,1] 36[36,1] 37[37,1] 38[38,1] 39[39,1] 40[40,1] 41[41,1] 42[42,1] 43[43,1] 44[44,1] 45[45,1] 46[46,1] 47[47,1] 48[48,1] 49[49,1] 50[50,1] 51[51,1] 52[52,1] 53[53,1] 54[54,1] 55[55,1] 56[56,1] 57[57,1] 58[58,1] 59[59,1] 60[60,1] 61[61,1] 62[62,1] 63[63,1] 64[64,1] 65[65,1] 66[66,1] 67[67,1] 68[68,1] 69[69,1] 70[70,1] 71[71,1] 72[72,1] 73[73,1] 74[74,1] 75[75,1] 76[76,1] 77[77,1] 78[78,1] 79[79,1] 80[80,1] 81[81,1] 82[82,1] 83[83,1] 84[84,1] 85[85,1] 86[86,1] 87[87,1] 88[88,1] 89[89,1] 90[90,1] 91[91,1] 92[92,1] 93[93,1] 94[94,1] 95[95,1] 96[96,1] 97[97,1] 98[98,1] 99[99,1] 100[100,1] 101[101,1] 102[102,1] 103[103,1] 104[104,1] 105[105,1] 106[106,1] 107[107,1] 108[108,1] 109[109,1] 110[110,1] 111[111,1] 112[112,1] 113[113,1] 114[114,1] 115[115,1] 116[116,1] 117[117,1] 118[118,1] 119[119,1] 120[120,1] 121[121,1] 122[122,1] 123[123,1] 124[124,1] 125[125,1] 126[126,1] 127[127,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	
;; rd  in  	(10)
1, 4, 7, 9, 10, 12, 13, 14, 25, 26
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 11 2 arch/arm/vfp/vfpdouble.c:431 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 13 2 arch/arm/vfp/vfpdouble.c:431 (set (reg:SI 2 r2)
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 11 14 2 arch/arm/vfp/vfpdouble.c:431 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_compare") [flags 0x3] <function_decl 0x10ad5380 vfp_compare>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 4, 7, 9, 10, 12, 13, 14, 25, 26


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fcmpe (vfp_double_fcmpe)[0:161]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcmpe

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{127d,14u,0e} in 2{1 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,3] 2[5,2] 3[7,2] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d4(1){ }d6(2){ }d8(3){ }d9(11){ }d11(12){ }d12(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 4, 6, 8, 9, 11, 12, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d9(bb 0 insn -1) }u1(13){ d12(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; rd  in  	(10)
1, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 4, 6, 8, 9, 11, 12, 13, 24, 25
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 13
;;      reg 13 { d12(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 2 insn 10) }
;;      reg 2 { d6(bb 0 insn -1) }
;;      reg 3 { d8(bb 0 insn -1) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u9(0){ d0(bb 2 insn 13) }u10(11){ d9(bb 0 insn -1) }u11(13){ d12(bb 0 insn -1) }u12(14){ d13(bb 0 insn -1) }u13(25){ d24(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(10)
0, 4, 6, 8, 9, 11, 12, 13, 24, 25
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 13) }
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 14 { d13(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 13:
Processing use of (reg 0 r0) in insn 13:
Processing use of (reg 1 r1) in insn 13:
  Adding insn 10 to worklist
Processing use of (reg 2 r2) in insn 13:
Processing use of (reg 3 r3) in insn 13:


vfp_double_fcmpe

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{127d,14u,0e} in 2{1 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,3] 2[5,2] 3[7,2] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; rd  in  	(10)
1, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 13 2 arch/arm/vfp/vfpdouble.c:426 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 10 14 2 arch/arm/vfp/vfpdouble.c:426 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_compare") [flags 0x3] <function_decl 0x10ad5380 vfp_compare>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 4, 6, 8, 9, 11, 12, 13, 24, 25


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fcmp (vfp_double_fcmp)[0:160]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcmp

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{127d,14u,0e} in 2{1 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,3] 2[5,2] 3[7,2] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d4(1){ }d6(2){ }d8(3){ }d9(11){ }d11(12){ }d12(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 4, 6, 8, 9, 11, 12, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d9(bb 0 insn -1) }u1(13){ d12(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; rd  in  	(10)
1, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 4, 6, 8, 9, 11, 12, 13, 24, 25
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 13
;;      reg 13 { d12(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 2 insn 10) }
;;      reg 2 { d6(bb 0 insn -1) }
;;      reg 3 { d8(bb 0 insn -1) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u9(0){ d0(bb 2 insn 13) }u10(11){ d9(bb 0 insn -1) }u11(13){ d12(bb 0 insn -1) }u12(14){ d13(bb 0 insn -1) }u13(25){ d24(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(10)
0, 4, 6, 8, 9, 11, 12, 13, 24, 25
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 13) }
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 14 { d13(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 13:
Processing use of (reg 0 r0) in insn 13:
Processing use of (reg 1 r1) in insn 13:
  Adding insn 10 to worklist
Processing use of (reg 2 r2) in insn 13:
Processing use of (reg 3 r3) in insn 13:


vfp_double_fcmp

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={3d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{127d,14u,0e} in 2{1 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,3] 2[5,2] 3[7,2] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; rd  in  	(10)
1, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 13 2 arch/arm/vfp/vfpdouble.c:421 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 10 14 2 arch/arm/vfp/vfpdouble.c:421 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_compare") [flags 0x3] <function_decl 0x10ad5380 vfp_compare>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 4, 6, 8, 9, 11, 12, 13, 24, 25


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fneg (vfp_double_fneg)[0:157]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fneg

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={6d,6u} r1={4d,2u} r2={4d,2u} r3={3d} r11={1d,2u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,2u} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={1d,1u,1d} r134={1d,1u} r135={1d,1u} r137={1d,1u} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 282{255d,26u,1e} in 13{11 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248
0[0,6] 1[6,4] 2[10,4] 3[14,3] 11[17,1] 12[18,3] 13[21,1] 14[22,3] 15[25,2] 16[27,2] 17[29,2] 18[31,2] 19[33,2] 20[35,2] 21[37,2] 22[39,2] 23[41,2] 24[43,2] 25[45,1] 26[46,1] 27[47,2] 28[49,2] 29[51,2] 30[53,2] 31[55,2] 32[57,2] 33[59,2] 34[61,2] 35[63,2] 36[65,2] 37[67,2] 38[69,2] 39[71,2] 40[73,2] 41[75,2] 42[77,2] 43[79,2] 44[81,2] 45[83,2] 46[85,2] 47[87,2] 48[89,2] 49[91,2] 50[93,2] 51[95,2] 52[97,2] 53[99,2] 54[101,2] 55[103,2] 56[105,2] 57[107,2] 58[109,2] 59[111,2] 60[113,2] 61[115,2] 62[117,2] 63[119,2] 64[121,2] 65[123,2] 66[125,2] 67[127,2] 68[129,2] 69[131,2] 70[133,2] 71[135,2] 72[137,2] 73[139,2] 74[141,2] 75[143,2] 76[145,2] 77[147,2] 78[149,2] 79[151,2] 80[153,2] 81[155,2] 82[157,2] 83[159,2] 84[161,2] 85[163,2] 86[165,2] 87[167,2] 88[169,2] 89[171,2] 90[173,2] 91[175,2] 92[177,2] 93[179,2] 94[181,2] 95[183,2] 96[185,2] 97[187,2] 98[189,2] 99[191,2] 100[193,2] 101[195,2] 102[197,2] 103[199,2] 104[201,2] 105[203,2] 106[205,2] 107[207,2] 108[209,2] 109[211,2] 110[213,2] 111[215,2] 112[217,2] 113[219,2] 114[221,2] 115[223,2] 116[225,2] 117[227,2] 118[229,2] 119[231,2] 120[233,2] 121[235,2] 122[237,2] 123[239,2] 124[241,2] 125[243,2] 126[245,2] 127[247,2] 133[249,1] 134[250,1] 135[251,1] 137[252,1] 139[253,1] 140[254,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d5(0){ }d9(1){ }d13(2){ }d16(3){ }d17(11){ }d20(12){ }d21(13){ }d24(14){ }d45(25){ }d46(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
5, 9, 13, 16, 17, 20, 21, 24, 45, 46
;; rd  kill	(27)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 45, 46
;; lr  out 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
5, 9, 13, 16, 17, 20, 21, 24, 45, 46

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d17(bb 0 insn -1) }u1(13){ d21(bb 0 insn -1) }u2(25){ d45(bb 0 insn -1) }u3(26){ d46(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135 137 139 140
;; live  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 133 134 135 137 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
5, 9, 13, 16, 17, 20, 21, 24, 45, 46
;; rd  gen 	(7)
0, 249, 250, 251, 252, 253, 254
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 22, 23, 24, 249, 250, 251, 252, 253, 254
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(15)
0, 9, 13, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 25 { d45(bb 0 insn -1) }
;;   reg 26 { d46(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d5(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 2 { d13(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 9
;;      reg 137 { d252(bb 2 insn 4) }
;;   UD chains for insn luid 3 uid 10
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 0 { d4(bb 2 insn 9) }
;;   UD chains for insn luid 4 uid 11
;;      reg 0 { d3(bb 2 insn 10) }
;;      reg 1 { d8(bb 2 insn 10) }
;;   UD chains for insn luid 6 uid 13
;;      reg 133 { d249(bb 2 insn 11) }
;;      reg 140 { d254(bb 2 insn 12) }
;;   eq_note reg 133 { }
;;   UD chains for insn luid 7 uid 14
;;      reg 139 { d253(bb 2 insn 13) }
;;   UD chains for insn luid 8 uid 15
;;      reg 135 { d251(bb 2 insn 2) }
;;   UD chains for insn luid 9 uid 16
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 0 { d2(bb 2 insn 14) }
;;      reg 1 { d7(bb 2 insn 14) }
;;      reg 2 { d11(bb 2 insn 15) }
;;   UD chains for insn luid 11 uid 21
;;      reg 134 { d250(bb 2 insn 17) }
;;   UD chains for insn luid 12 uid 27
;;      reg 0 { d0(bb 2 insn 21) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u22(0){ d0(bb 2 insn 21) }u23(11){ d17(bb 0 insn -1) }u24(13){ d21(bb 0 insn -1) }u25(14){ }u26(25){ d45(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(15)
0, 9, 13, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(15)
0, 9, 13, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 21) }
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d45(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 27 to worklist
  Adding insn 16 to worklist
  Adding insn 10 to worklist
Finished finding needed instructions:
  Adding insn 21 to worklist
Processing use of (reg 134 [ <result> ]) in insn 21:
  Adding insn 17 to worklist
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 137 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 13 sp) in insn 16:
Processing use of (reg 0 r0) in insn 16:
  Adding insn 14 to worklist
Processing use of (reg 1 r1) in insn 16:
Processing use of (reg 2 r2) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 135 [ dd ]) in insn 15:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 139) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 133 [ D.4238 ]) in insn 13:
  Adding insn 11 to worklist
Processing use of (reg 140) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (reg 0 r0) in insn 27:


vfp_double_fneg

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={6d,6u} r1={4d,2u} r2={4d,2u} r3={3d} r11={1d,2u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,2u} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={1d,1u,1d} r134={1d,1u} r135={1d,1u} r137={1d,1u} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 282{255d,26u,1e} in 13{11 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248
0[0,6] 1[6,4] 2[10,4] 3[14,3] 11[17,1] 12[18,3] 13[21,1] 14[22,3] 15[25,2] 16[27,2] 17[29,2] 18[31,2] 19[33,2] 20[35,2] 21[37,2] 22[39,2] 23[41,2] 24[43,2] 25[45,1] 26[46,1] 27[47,2] 28[49,2] 29[51,2] 30[53,2] 31[55,2] 32[57,2] 33[59,2] 34[61,2] 35[63,2] 36[65,2] 37[67,2] 38[69,2] 39[71,2] 40[73,2] 41[75,2] 42[77,2] 43[79,2] 44[81,2] 45[83,2] 46[85,2] 47[87,2] 48[89,2] 49[91,2] 50[93,2] 51[95,2] 52[97,2] 53[99,2] 54[101,2] 55[103,2] 56[105,2] 57[107,2] 58[109,2] 59[111,2] 60[113,2] 61[115,2] 62[117,2] 63[119,2] 64[121,2] 65[123,2] 66[125,2] 67[127,2] 68[129,2] 69[131,2] 70[133,2] 71[135,2] 72[137,2] 73[139,2] 74[141,2] 75[143,2] 76[145,2] 77[147,2] 78[149,2] 79[151,2] 80[153,2] 81[155,2] 82[157,2] 83[159,2] 84[161,2] 85[163,2] 86[165,2] 87[167,2] 88[169,2] 89[171,2] 90[173,2] 91[175,2] 92[177,2] 93[179,2] 94[181,2] 95[183,2] 96[185,2] 97[187,2] 98[189,2] 99[191,2] 100[193,2] 101[195,2] 102[197,2] 103[199,2] 104[201,2] 105[203,2] 106[205,2] 107[207,2] 108[209,2] 109[211,2] 110[213,2] 111[215,2] 112[217,2] 113[219,2] 114[221,2] 115[223,2] 116[225,2] 117[227,2] 118[229,2] 119[231,2] 120[233,2] 121[235,2] 122[237,2] 123[239,2] 124[241,2] 125[243,2] 126[245,2] 127[247,2] 133[249,1] 134[250,1] 135[251,1] 137[252,1] 139[253,1] 140[254,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135 137 139 140
;; live  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 133 134 135 137 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
5, 9, 13, 16, 17, 20, 21, 24, 45, 46
;; rd  gen 	(7)
0, 249, 250, 251, 252, 253, 254
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 22, 23, 24, 249, 250, 251, 252, 253, 254

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 4 2 arch/arm/vfp/vfpdouble.c:263 (set (reg/v:SI 135 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 4 2 6 2 arch/arm/vfp/vfpdouble.c:263 (set (reg/v:SI 137 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(note 6 4 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:SI 0 r0)
        (reg/v:SI 137 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ dm ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:264 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:DI 133 [ D.4238 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:DI 140)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:DI 139)
        (xor:DI (reg:DI 133 [ D.4238 ])
            (reg:DI 140))) 93 {xordi3} (expr_list:REG_DEAD (reg:DI 140)
        (expr_list:REG_DEAD (reg:DI 133 [ D.4238 ])
            (expr_list:REG_EQUAL (plus:DI (reg:DI 133 [ D.4238 ])
                    (const_int -9223372036854775808 [0x8000000000000000]))
                (nil)))))

(insn 14 13 15 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:DI 0 r0)
        (reg:DI 139)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 139)
        (nil)))

(insn 15 14 16 2 arch/arm/vfp/vfpdouble.c:264 (set (reg:SI 2 r2)
        (reg/v:SI 135 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ dd ])
        (nil)))

(call_insn 16 15 17 2 arch/arm/vfp/vfpdouble.c:264 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 17 16 21 2 arch/arm/vfp/vfpdouble.c:266 (set (reg:SI 134 [ <result> ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 21 17 27 2 arch/arm/vfp/vfpdouble.c:266 (set (reg/i:SI 0 r0)
        (reg:SI 134 [ <result> ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ <result> ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 27 21 0 2 arch/arm/vfp/vfpdouble.c:266 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(15)
0, 9, 13, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fabs (vfp_double_fabs)[0:155]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fabs

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={6d,6u} r1={4d,2u} r2={4d,2u} r3={3d} r11={1d,2u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,2u} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={1d,1u,1d} r134={1d,1u} r135={1d,1u} r137={1d,1u} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 282{255d,26u,1e} in 13{11 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248
0[0,6] 1[6,4] 2[10,4] 3[14,3] 11[17,1] 12[18,3] 13[21,1] 14[22,3] 15[25,2] 16[27,2] 17[29,2] 18[31,2] 19[33,2] 20[35,2] 21[37,2] 22[39,2] 23[41,2] 24[43,2] 25[45,1] 26[46,1] 27[47,2] 28[49,2] 29[51,2] 30[53,2] 31[55,2] 32[57,2] 33[59,2] 34[61,2] 35[63,2] 36[65,2] 37[67,2] 38[69,2] 39[71,2] 40[73,2] 41[75,2] 42[77,2] 43[79,2] 44[81,2] 45[83,2] 46[85,2] 47[87,2] 48[89,2] 49[91,2] 50[93,2] 51[95,2] 52[97,2] 53[99,2] 54[101,2] 55[103,2] 56[105,2] 57[107,2] 58[109,2] 59[111,2] 60[113,2] 61[115,2] 62[117,2] 63[119,2] 64[121,2] 65[123,2] 66[125,2] 67[127,2] 68[129,2] 69[131,2] 70[133,2] 71[135,2] 72[137,2] 73[139,2] 74[141,2] 75[143,2] 76[145,2] 77[147,2] 78[149,2] 79[151,2] 80[153,2] 81[155,2] 82[157,2] 83[159,2] 84[161,2] 85[163,2] 86[165,2] 87[167,2] 88[169,2] 89[171,2] 90[173,2] 91[175,2] 92[177,2] 93[179,2] 94[181,2] 95[183,2] 96[185,2] 97[187,2] 98[189,2] 99[191,2] 100[193,2] 101[195,2] 102[197,2] 103[199,2] 104[201,2] 105[203,2] 106[205,2] 107[207,2] 108[209,2] 109[211,2] 110[213,2] 111[215,2] 112[217,2] 113[219,2] 114[221,2] 115[223,2] 116[225,2] 117[227,2] 118[229,2] 119[231,2] 120[233,2] 121[235,2] 122[237,2] 123[239,2] 124[241,2] 125[243,2] 126[245,2] 127[247,2] 133[249,1] 134[250,1] 135[251,1] 137[252,1] 139[253,1] 140[254,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d5(0){ }d9(1){ }d13(2){ }d16(3){ }d17(11){ }d20(12){ }d21(13){ }d24(14){ }d45(25){ }d46(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
5, 9, 13, 16, 17, 20, 21, 24, 45, 46
;; rd  kill	(27)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 45, 46
;; lr  out 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
5, 9, 13, 16, 17, 20, 21, 24, 45, 46

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d17(bb 0 insn -1) }u1(13){ d21(bb 0 insn -1) }u2(25){ d45(bb 0 insn -1) }u3(26){ d46(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135 137 139 140
;; live  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 133 134 135 137 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
5, 9, 13, 16, 17, 20, 21, 24, 45, 46
;; rd  gen 	(7)
0, 249, 250, 251, 252, 253, 254
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 22, 23, 24, 249, 250, 251, 252, 253, 254
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(15)
0, 9, 13, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 25 { d45(bb 0 insn -1) }
;;   reg 26 { d46(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d5(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 2 { d13(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 9
;;      reg 137 { d252(bb 2 insn 4) }
;;   UD chains for insn luid 3 uid 10
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 0 { d4(bb 2 insn 9) }
;;   UD chains for insn luid 4 uid 11
;;      reg 0 { d3(bb 2 insn 10) }
;;      reg 1 { d8(bb 2 insn 10) }
;;   UD chains for insn luid 6 uid 13
;;      reg 133 { d249(bb 2 insn 11) }
;;      reg 140 { d254(bb 2 insn 12) }
;;   eq_note reg 133 { }
;;   UD chains for insn luid 7 uid 14
;;      reg 139 { d253(bb 2 insn 13) }
;;   UD chains for insn luid 8 uid 15
;;      reg 135 { d251(bb 2 insn 2) }
;;   UD chains for insn luid 9 uid 16
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 0 { d2(bb 2 insn 14) }
;;      reg 1 { d7(bb 2 insn 14) }
;;      reg 2 { d11(bb 2 insn 15) }
;;   UD chains for insn luid 11 uid 21
;;      reg 134 { d250(bb 2 insn 17) }
;;   UD chains for insn luid 12 uid 27
;;      reg 0 { d0(bb 2 insn 21) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u22(0){ d0(bb 2 insn 21) }u23(11){ d17(bb 0 insn -1) }u24(13){ d21(bb 0 insn -1) }u25(14){ }u26(25){ d45(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(15)
0, 9, 13, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(15)
0, 9, 13, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 21) }
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d45(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 27 to worklist
  Adding insn 16 to worklist
  Adding insn 10 to worklist
Finished finding needed instructions:
  Adding insn 21 to worklist
Processing use of (reg 134 [ <result> ]) in insn 21:
  Adding insn 17 to worklist
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 137 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 13 sp) in insn 16:
Processing use of (reg 0 r0) in insn 16:
  Adding insn 14 to worklist
Processing use of (reg 1 r1) in insn 16:
Processing use of (reg 2 r2) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 135 [ dd ]) in insn 15:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 139) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 133 [ D.4217 ]) in insn 13:
  Adding insn 11 to worklist
Processing use of (reg 140) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (reg 0 r0) in insn 27:


vfp_double_fabs

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={6d,6u} r1={4d,2u} r2={4d,2u} r3={3d} r11={1d,2u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,2u} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={1d,1u,1d} r134={1d,1u} r135={1d,1u} r137={1d,1u} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 282{255d,26u,1e} in 13{11 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248
0[0,6] 1[6,4] 2[10,4] 3[14,3] 11[17,1] 12[18,3] 13[21,1] 14[22,3] 15[25,2] 16[27,2] 17[29,2] 18[31,2] 19[33,2] 20[35,2] 21[37,2] 22[39,2] 23[41,2] 24[43,2] 25[45,1] 26[46,1] 27[47,2] 28[49,2] 29[51,2] 30[53,2] 31[55,2] 32[57,2] 33[59,2] 34[61,2] 35[63,2] 36[65,2] 37[67,2] 38[69,2] 39[71,2] 40[73,2] 41[75,2] 42[77,2] 43[79,2] 44[81,2] 45[83,2] 46[85,2] 47[87,2] 48[89,2] 49[91,2] 50[93,2] 51[95,2] 52[97,2] 53[99,2] 54[101,2] 55[103,2] 56[105,2] 57[107,2] 58[109,2] 59[111,2] 60[113,2] 61[115,2] 62[117,2] 63[119,2] 64[121,2] 65[123,2] 66[125,2] 67[127,2] 68[129,2] 69[131,2] 70[133,2] 71[135,2] 72[137,2] 73[139,2] 74[141,2] 75[143,2] 76[145,2] 77[147,2] 78[149,2] 79[151,2] 80[153,2] 81[155,2] 82[157,2] 83[159,2] 84[161,2] 85[163,2] 86[165,2] 87[167,2] 88[169,2] 89[171,2] 90[173,2] 91[175,2] 92[177,2] 93[179,2] 94[181,2] 95[183,2] 96[185,2] 97[187,2] 98[189,2] 99[191,2] 100[193,2] 101[195,2] 102[197,2] 103[199,2] 104[201,2] 105[203,2] 106[205,2] 107[207,2] 108[209,2] 109[211,2] 110[213,2] 111[215,2] 112[217,2] 113[219,2] 114[221,2] 115[223,2] 116[225,2] 117[227,2] 118[229,2] 119[231,2] 120[233,2] 121[235,2] 122[237,2] 123[239,2] 124[241,2] 125[243,2] 126[245,2] 127[247,2] 133[249,1] 134[250,1] 135[251,1] 137[252,1] 139[253,1] 140[254,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135 137 139 140
;; live  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 133 134 135 137 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
5, 9, 13, 16, 17, 20, 21, 24, 45, 46
;; rd  gen 	(7)
0, 249, 250, 251, 252, 253, 254
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 22, 23, 24, 249, 250, 251, 252, 253, 254

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 4 2 arch/arm/vfp/vfpdouble.c:251 (set (reg/v:SI 135 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 4 2 6 2 arch/arm/vfp/vfpdouble.c:251 (set (reg/v:SI 137 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(note 6 4 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:SI 0 r0)
        (reg/v:SI 137 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ dm ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:252 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:DI 133 [ D.4217 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:DI 140)
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:DI 139)
        (and:DI (reg:DI 133 [ D.4217 ])
            (reg:DI 140))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 140)
        (expr_list:REG_DEAD (reg:DI 133 [ D.4217 ])
            (expr_list:REG_EQUAL (and:DI (reg:DI 133 [ D.4217 ])
                    (const_int 9223372036854775807 [0x7fffffffffffffff]))
                (nil)))))

(insn 14 13 15 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:DI 0 r0)
        (reg:DI 139)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 139)
        (nil)))

(insn 15 14 16 2 arch/arm/vfp/vfpdouble.c:252 (set (reg:SI 2 r2)
        (reg/v:SI 135 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ dd ])
        (nil)))

(call_insn 16 15 17 2 arch/arm/vfp/vfpdouble.c:252 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 17 16 21 2 arch/arm/vfp/vfpdouble.c:254 (set (reg:SI 134 [ <result> ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 21 17 27 2 arch/arm/vfp/vfpdouble.c:254 (set (reg/i:SI 0 r0)
        (reg:SI 134 [ <result> ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ <result> ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 27 21 0 2 arch/arm/vfp/vfpdouble.c:254 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(15)
0, 9, 13, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fcpy (vfp_double_fcpy)[0:156]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fcpy

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={5d,5u} r1={3d,1u} r2={4d,2u} r3={3d} r11={1d,2u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,2u} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r134={1d,1u} r135={1d,1u} r137={1d,1u} 
;;    total ref usage 271{250d,21u,0e} in 9{7 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246
0[0,5] 1[5,3] 2[8,4] 3[12,3] 11[15,1] 12[16,3] 13[19,1] 14[20,3] 15[23,2] 16[25,2] 17[27,2] 18[29,2] 19[31,2] 20[33,2] 21[35,2] 22[37,2] 23[39,2] 24[41,2] 25[43,1] 26[44,1] 27[45,2] 28[47,2] 29[49,2] 30[51,2] 31[53,2] 32[55,2] 33[57,2] 34[59,2] 35[61,2] 36[63,2] 37[65,2] 38[67,2] 39[69,2] 40[71,2] 41[73,2] 42[75,2] 43[77,2] 44[79,2] 45[81,2] 46[83,2] 47[85,2] 48[87,2] 49[89,2] 50[91,2] 51[93,2] 52[95,2] 53[97,2] 54[99,2] 55[101,2] 56[103,2] 57[105,2] 58[107,2] 59[109,2] 60[111,2] 61[113,2] 62[115,2] 63[117,2] 64[119,2] 65[121,2] 66[123,2] 67[125,2] 68[127,2] 69[129,2] 70[131,2] 71[133,2] 72[135,2] 73[137,2] 74[139,2] 75[141,2] 76[143,2] 77[145,2] 78[147,2] 79[149,2] 80[151,2] 81[153,2] 82[155,2] 83[157,2] 84[159,2] 85[161,2] 86[163,2] 87[165,2] 88[167,2] 89[169,2] 90[171,2] 91[173,2] 92[175,2] 93[177,2] 94[179,2] 95[181,2] 96[183,2] 97[185,2] 98[187,2] 99[189,2] 100[191,2] 101[193,2] 102[195,2] 103[197,2] 104[199,2] 105[201,2] 106[203,2] 107[205,2] 108[207,2] 109[209,2] 110[211,2] 111[213,2] 112[215,2] 113[217,2] 114[219,2] 115[221,2] 116[223,2] 117[225,2] 118[227,2] 119[229,2] 120[231,2] 121[233,2] 122[235,2] 123[237,2] 124[239,2] 125[241,2] 126[243,2] 127[245,2] 134[247,1] 135[248,1] 137[249,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d4(0){ }d7(1){ }d11(2){ }d14(3){ }d15(11){ }d18(12){ }d19(13){ }d22(14){ }d43(25){ }d44(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
4, 7, 11, 14, 15, 18, 19, 22, 43, 44
;; rd  kill	(25)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 43, 44
;; lr  out 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
4, 7, 11, 14, 15, 18, 19, 22, 43, 44

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d15(bb 0 insn -1) }u1(13){ d19(bb 0 insn -1) }u2(25){ d43(bb 0 insn -1) }u3(26){ d44(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 137
;; live  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 134 135 137
;; live  kill	 14 [lr]
;; rd  in  	(10)
4, 7, 11, 14, 15, 18, 19, 22, 43, 44
;; rd  gen 	(4)
0, 247, 248, 249
;; rd  kill	(11)
0, 1, 2, 3, 4, 20, 21, 22, 247, 248, 249
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(12)
0, 7, 11, 14, 15, 18, 19, 43, 44, 247, 248, 249
;;  UD chains for artificial uses
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 25 { d43(bb 0 insn -1) }
;;   reg 26 { d44(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d4(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 2 { d11(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 9
;;      reg 137 { d249(bb 2 insn 4) }
;;   UD chains for insn luid 3 uid 10
;;      reg 13 { d19(bb 0 insn -1) }
;;      reg 0 { d3(bb 2 insn 9) }
;;   UD chains for insn luid 4 uid 13
;;      reg 135 { d248(bb 2 insn 2) }
;;   UD chains for insn luid 5 uid 14
;;      reg 13 { d19(bb 0 insn -1) }
;;      reg 0 { d2(bb 2 insn 10) }
;;      reg 1 { d6(bb 2 insn 10) }
;;      reg 2 { d9(bb 2 insn 13) }
;;   UD chains for insn luid 7 uid 19
;;      reg 134 { d247(bb 2 insn 15) }
;;   UD chains for insn luid 8 uid 25
;;      reg 0 { d0(bb 2 insn 19) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u16(0){ d0(bb 2 insn 19) }u17(11){ d15(bb 0 insn -1) }u18(13){ d19(bb 0 insn -1) }u19(14){ }u20(25){ d43(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(12)
0, 7, 11, 14, 15, 18, 19, 43, 44, 247, 248, 249
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(12)
0, 7, 11, 14, 15, 18, 19, 43, 44, 247, 248, 249
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 19) }
;;   reg 11 { d15(bb 0 insn -1) }
;;   reg 13 { d19(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d43(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 25 to worklist
  Adding insn 14 to worklist
  Adding insn 10 to worklist
Finished finding needed instructions:
  Adding insn 19 to worklist
Processing use of (reg 134 [ <result> ]) in insn 19:
  Adding insn 15 to worklist
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 137 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 13 sp) in insn 14:
Processing use of (reg 0 r0) in insn 14:
Processing use of (reg 1 r1) in insn 14:
Processing use of (reg 2 r2) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 135 [ dd ]) in insn 13:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 0 r0) in insn 25:


vfp_double_fcpy

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={5d,5u} r1={3d,1u} r2={4d,2u} r3={3d} r11={1d,2u} r12={3d} r13={1d,4u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,2u} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r134={1d,1u} r135={1d,1u} r137={1d,1u} 
;;    total ref usage 271{250d,21u,0e} in 9{7 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246
0[0,5] 1[5,3] 2[8,4] 3[12,3] 11[15,1] 12[16,3] 13[19,1] 14[20,3] 15[23,2] 16[25,2] 17[27,2] 18[29,2] 19[31,2] 20[33,2] 21[35,2] 22[37,2] 23[39,2] 24[41,2] 25[43,1] 26[44,1] 27[45,2] 28[47,2] 29[49,2] 30[51,2] 31[53,2] 32[55,2] 33[57,2] 34[59,2] 35[61,2] 36[63,2] 37[65,2] 38[67,2] 39[69,2] 40[71,2] 41[73,2] 42[75,2] 43[77,2] 44[79,2] 45[81,2] 46[83,2] 47[85,2] 48[87,2] 49[89,2] 50[91,2] 51[93,2] 52[95,2] 53[97,2] 54[99,2] 55[101,2] 56[103,2] 57[105,2] 58[107,2] 59[109,2] 60[111,2] 61[113,2] 62[115,2] 63[117,2] 64[119,2] 65[121,2] 66[123,2] 67[125,2] 68[127,2] 69[129,2] 70[131,2] 71[133,2] 72[135,2] 73[137,2] 74[139,2] 75[141,2] 76[143,2] 77[145,2] 78[147,2] 79[149,2] 80[151,2] 81[153,2] 82[155,2] 83[157,2] 84[159,2] 85[161,2] 86[163,2] 87[165,2] 88[167,2] 89[169,2] 90[171,2] 91[173,2] 92[175,2] 93[177,2] 94[179,2] 95[181,2] 96[183,2] 97[185,2] 98[187,2] 99[189,2] 100[191,2] 101[193,2] 102[195,2] 103[197,2] 104[199,2] 105[201,2] 106[203,2] 107[205,2] 108[207,2] 109[209,2] 110[211,2] 111[213,2] 112[215,2] 113[217,2] 114[219,2] 115[221,2] 116[223,2] 117[225,2] 118[227,2] 119[229,2] 120[231,2] 121[233,2] 122[235,2] 123[237,2] 124[239,2] 125[241,2] 126[243,2] 127[245,2] 134[247,1] 135[248,1] 137[249,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 137
;; live  in  	 0 [r0] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 134 135 137
;; live  kill	 14 [lr]
;; rd  in  	(10)
4, 7, 11, 14, 15, 18, 19, 22, 43, 44
;; rd  gen 	(4)
0, 247, 248, 249
;; rd  kill	(11)
0, 1, 2, 3, 4, 20, 21, 22, 247, 248, 249

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 4 2 arch/arm/vfp/vfpdouble.c:257 (set (reg/v:SI 135 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 4 2 6 2 arch/arm/vfp/vfpdouble.c:257 (set (reg/v:SI 137 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(note 6 4 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:258 (set (reg:SI 0 r0)
        (reg/v:SI 137 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ dm ])
        (nil)))

(call_insn 10 9 13 2 arch/arm/vfp/vfpdouble.c:258 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 13 10 14 2 arch/arm/vfp/vfpdouble.c:258 (set (reg:SI 2 r2)
        (reg/v:SI 135 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ dd ])
        (nil)))

(call_insn 14 13 15 2 arch/arm/vfp/vfpdouble.c:258 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 15 14 19 2 arch/arm/vfp/vfpdouble.c:260 (set (reg:SI 134 [ <result> ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 19 15 25 2 arch/arm/vfp/vfpdouble.c:260 (set (reg/i:SI 0 r0)
        (reg:SI 134 [ <result> ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ <result> ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 25 19 0 2 arch/arm/vfp/vfpdouble.c:260 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(12)
0, 7, 11, 14, 15, 18, 19, 43, 44, 247, 248, 249


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_normalise_denormal (vfp_double_normalise_denormal)[0:152]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


vfp_double_normalise_denormal

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={3d,2u} r2={3d,1u} r3={2d} r11={1d,6u} r12={2d} r13={1d,7u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r25={1d,6u} r26={1d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} r134={1d,1u} r135={2d,4u,1d} r137={1d,6u,1d} r140={1d,1u} r141={1d,1u} r143={1d,1u} r144={1d,1u} r147={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} 
;;    total ref usage 200{145d,53u,2e} in 22{21 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131
0[0,3] 1[3,3] 2[6,3] 3[9,2] 11[11,1] 12[12,2] 13[14,1] 14[15,2] 15[17,1] 16[18,1] 17[19,1] 18[20,1] 19[21,1] 20[22,1] 21[23,1] 22[24,1] 23[25,1] 24[26,3] 25[29,1] 26[30,1] 27[31,1] 28[32,1] 29[33,1] 30[34,1] 31[35,1] 32[36,1] 33[37,1] 34[38,1] 35[39,1] 36[40,1] 37[41,1] 38[42,1] 39[43,1] 40[44,1] 41[45,1] 42[46,1] 43[47,1] 44[48,1] 45[49,1] 46[50,1] 47[51,1] 48[52,1] 49[53,1] 50[54,1] 51[55,1] 52[56,1] 53[57,1] 54[58,1] 55[59,1] 56[60,1] 57[61,1] 58[62,1] 59[63,1] 60[64,1] 61[65,1] 62[66,1] 63[67,1] 64[68,1] 65[69,1] 66[70,1] 67[71,1] 68[72,1] 69[73,1] 70[74,1] 71[75,1] 72[76,1] 73[77,1] 74[78,1] 75[79,1] 76[80,1] 77[81,1] 78[82,1] 79[83,1] 80[84,1] 81[85,1] 82[86,1] 83[87,1] 84[88,1] 85[89,1] 86[90,1] 87[91,1] 88[92,1] 89[93,1] 90[94,1] 91[95,1] 92[96,1] 93[97,1] 94[98,1] 95[99,1] 96[100,1] 97[101,1] 98[102,1] 99[103,1] 100[104,1] 101[105,1] 102[106,1] 103[107,1] 104[108,1] 105[109,1] 106[110,1] 107[111,1] 108[112,1] 109[113,1] 110[114,1] 111[115,1] 112[116,1] 113[117,1] 114[118,1] 115[119,1] 116[120,1] 117[121,1] 118[122,1] 119[123,1] 120[124,1] 121[125,1] 122[126,1] 123[127,1] 124[128,1] 125[129,1] 126[130,1] 127[131,1] 133[132,1] 134[133,1] 135[134,2] 137[136,1] 140[137,1] 141[138,1] 143[139,1] 144[140,1] 147[141,1] 154[142,1] 155[143,1] 156[144,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d2(0){ }d5(1){ }d8(2){ }d10(3){ }d11(11){ }d13(12){ }d14(13){ }d16(14){ }d29(25){ }d30(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
2, 5, 8, 10, 11, 13, 14, 16, 29, 30
;; rd  kill	(19)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 29, 30
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
2, 5, 8, 10, 11, 13, 14, 16, 29, 30

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d11(bb 0 insn -1) }u1(13){ d14(bb 0 insn -1) }u2(25){ d29(bb 0 insn -1) }u3(26){ d30(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 134 135 137 140 155 156
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 134 135 137 140 155 156
;; live  kill	
;; rd  in  	(10)
2, 5, 8, 10, 11, 13, 14, 16, 29, 30
;; rd  gen 	(7)
28, 133, 135, 136, 137, 143, 144
;; rd  kill	(10)
26, 27, 28, 133, 134, 135, 136, 137, 143, 144
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137 155
;; rd  out 	(17)
2, 5, 8, 10, 11, 13, 14, 16, 28, 29, 30, 133, 135, 136, 137, 143, 144
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 25 { d29(bb 0 insn -1) }
;;   reg 26 { d30(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d2(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 47
;;      reg 137 { d136(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 48
;;      reg 137 { d136(bb 2 insn 2) }
;;   UD chains for insn luid 3 uid 9
;;      reg 156 { d144(bb 2 insn 48) }
;;   UD chains for insn luid 4 uid 10
;;      reg 134 { d133(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 11
;;      reg 140 { d137(bb 2 insn 10) }
;;   UD chains for insn luid 6 uid 12
;;      reg 135 { d135(bb 2 insn 11) }
;;   UD chains for insn luid 7 uid 13
;;      reg 24 { d28(bb 2 insn 12) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u12(11){ d11(bb 0 insn -1) }u13(13){ d14(bb 0 insn -1) }u14(25){ d29(bb 0 insn -1) }u15(26){ d30(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 133 135 141
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 155
;; live  gen 	 133 135 141
;; live  kill	
;; rd  in  	(17)
2, 5, 8, 10, 11, 13, 14, 16, 28, 29, 30, 133, 135, 136, 137, 143, 144
;; rd  gen 	(3)
132, 134, 138
;; rd  kill	(4)
132, 134, 135, 138
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; rd  out 	(19)
2, 5, 8, 10, 11, 13, 14, 16, 28, 29, 30, 132, 133, 134, 136, 137, 138, 143, 144
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 25 { d29(bb 0 insn -1) }
;;   reg 26 { d30(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 15
;;      reg 155 { d143(bb 2 insn 47) }
;;   UD chains for insn luid 1 uid 16
;;      reg 133 { d132(bb 3 insn 15) }
;;   UD chains for insn luid 2 uid 17
;;      reg 141 { d138(bb 3 insn 16) }

( 2 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ d11(bb 0 insn -1) }u20(13){ d14(bb 0 insn -1) }u21(25){ d29(bb 0 insn -1) }u22(26){ d30(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(20)
2, 5, 8, 10, 11, 13, 14, 16, 28, 29, 30, 132, 133, 134, 135, 136, 137, 138, 143, 144
;; rd  gen 	(1)
27
;; rd  kill	(3)
26, 27, 28
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; rd  out 	(20)
2, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 143, 144
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 25 { d29(bb 0 insn -1) }
;;   reg 26 { d30(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 20
;;      reg 135 { d135(bb 2 insn 11) d134(bb 3 insn 17) }
;;   UD chains for insn luid 1 uid 21
;;      reg 24 { d27(bb 4 insn 20) }

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u25(11){ d11(bb 0 insn -1) }u26(13){ d14(bb 0 insn -1) }u27(25){ d29(bb 0 insn -1) }u28(26){ d30(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 137
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 143 144 147 154
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 137
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 143 144 147 154
;; live  kill	 14 [lr]
;; rd  in  	(20)
2, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 143, 144
;; rd  gen 	(6)
0, 3, 139, 140, 141, 142
;; rd  kill	(12)
0, 1, 2, 3, 4, 5, 15, 16, 139, 140, 141, 142
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(23)
0, 3, 8, 10, 11, 13, 14, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 25 { d29(bb 0 insn -1) }
;;   reg 26 { d30(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 23
;;      reg 137 { d136(bb 2 insn 2) }
;;   UD chains for insn luid 1 uid 25
;;      reg 143 { d139(bb 5 insn 23) }
;;   UD chains for insn luid 2 uid 28
;;      reg 135 { d135(bb 2 insn 11) d134(bb 3 insn 17) }
;;      reg 144 { d140(bb 5 insn 25) }
;;   UD chains for insn luid 3 uid 29
;;      reg 137 { d136(bb 2 insn 2) }
;;      reg 147 { d141(bb 5 insn 28) }
;;   UD chains for insn luid 4 uid 33
;;      reg 137 { d136(bb 2 insn 2) }
;;   UD chains for insn luid 5 uid 34
;;      reg 135 { d135(bb 2 insn 11) d134(bb 3 insn 17) }
;;   UD chains for insn luid 6 uid 35
;;      reg 13 { d14(bb 0 insn -1) }
;;      reg 0 { d1(bb 5 insn 33) }
;;      reg 1 { d4(bb 5 insn 33) }
;;      reg 2 { d7(bb 5 insn 34) }
;;   UD chains for insn luid 7 uid 36
;;      reg 0 { d0(bb 5 insn 35) }
;;      reg 1 { d3(bb 5 insn 35) }
;;   eq_note reg 135 { }
;;   eq_note reg 137 { }
;;   UD chains for insn luid 8 uid 37
;;      reg 137 { d136(bb 2 insn 2) }
;;      reg 154 { d142(bb 5 insn 36) }

( 5 4 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u47(11){ d11(bb 0 insn -1) }u48(13){ d14(bb 0 insn -1) }u49(25){ d29(bb 0 insn -1) }u50(26){ d30(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(26)
0, 2, 3, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(26)
0, 2, 3, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 25 { d29(bb 0 insn -1) }
;;   reg 26 { d30(bb 0 insn -1) }

( 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u51(11){ d11(bb 0 insn -1) }u52(13){ d14(bb 0 insn -1) }u53(14){ d16(bb 0 insn -1) }u54(25){ d29(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(26)
0, 2, 3, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(26)
0, 2, 3, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144
;;  UD chains for artificial uses
;;   reg 11 { d11(bb 0 insn -1) }
;;   reg 13 { d14(bb 0 insn -1) }
;;   reg 14 { d16(bb 0 insn -1) }
;;   reg 25 { d29(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 21 to worklist
  Adding insn 37 to worklist
  Adding insn 29 to worklist
Finished finding needed instructions:
Processing use of (reg 137 [ vd ]) in insn 29:
  Adding insn 2 to worklist
Processing use of (subreg (reg 147) 0) in insn 29:
  Adding insn 28 to worklist
Processing use of (reg 135 [ bits ]) in insn 28:
  Adding insn 11 to worklist
  Adding insn 17 to worklist
Processing use of (reg 144) in insn 28:
  Adding insn 25 to worklist
Processing use of (reg 143 [ <variable>.exponent ]) in insn 25:
  Adding insn 23 to worklist
Processing use of (reg 137 [ vd ]) in insn 23:
Processing use of (reg 141) in insn 17:
  Adding insn 16 to worklist
Processing use of (reg 133 [ ret ]) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 155 [ D.4073 ]) in insn 15:
  Adding insn 47 to worklist
Processing use of (reg 137 [ vd ]) in insn 47:
Processing use of (reg 140) in insn 11:
  Adding insn 10 to worklist
Processing use of (reg 134 [ ret ]) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 156 [ D.4073+4 ]) in insn 9:
  Adding insn 48 to worklist
Processing use of (reg 137 [ vd ]) in insn 48:
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 137 [ vd ]) in insn 37:
Processing use of (reg 154) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 0 r0) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 1 r1) in insn 36:
Processing use of (reg 13 sp) in insn 35:
Processing use of (reg 0 r0) in insn 35:
  Adding insn 33 to worklist
Processing use of (reg 1 r1) in insn 35:
Processing use of (reg 2 r2) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 135 [ bits ]) in insn 34:
Processing use of (reg 137 [ vd ]) in insn 33:
Processing use of (reg 24 cc) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 135 [ bits ]) in insn 20:
Processing use of (reg 24 cc) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 135 [ bits ]) in insn 12:


vfp_double_normalise_denormal

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,3u} r1={3d,2u} r2={3d,1u} r3={2d} r11={1d,6u} r12={2d} r13={1d,7u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,2u} r25={1d,6u} r26={1d,5u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u} r134={1d,1u} r135={2d,4u,1d} r137={1d,6u,1d} r140={1d,1u} r141={1d,1u} r143={1d,1u} r144={1d,1u} r147={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} 
;;    total ref usage 200{145d,53u,2e} in 22{21 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131
0[0,3] 1[3,3] 2[6,3] 3[9,2] 11[11,1] 12[12,2] 13[14,1] 14[15,2] 15[17,1] 16[18,1] 17[19,1] 18[20,1] 19[21,1] 20[22,1] 21[23,1] 22[24,1] 23[25,1] 24[26,3] 25[29,1] 26[30,1] 27[31,1] 28[32,1] 29[33,1] 30[34,1] 31[35,1] 32[36,1] 33[37,1] 34[38,1] 35[39,1] 36[40,1] 37[41,1] 38[42,1] 39[43,1] 40[44,1] 41[45,1] 42[46,1] 43[47,1] 44[48,1] 45[49,1] 46[50,1] 47[51,1] 48[52,1] 49[53,1] 50[54,1] 51[55,1] 52[56,1] 53[57,1] 54[58,1] 55[59,1] 56[60,1] 57[61,1] 58[62,1] 59[63,1] 60[64,1] 61[65,1] 62[66,1] 63[67,1] 64[68,1] 65[69,1] 66[70,1] 67[71,1] 68[72,1] 69[73,1] 70[74,1] 71[75,1] 72[76,1] 73[77,1] 74[78,1] 75[79,1] 76[80,1] 77[81,1] 78[82,1] 79[83,1] 80[84,1] 81[85,1] 82[86,1] 83[87,1] 84[88,1] 85[89,1] 86[90,1] 87[91,1] 88[92,1] 89[93,1] 90[94,1] 91[95,1] 92[96,1] 93[97,1] 94[98,1] 95[99,1] 96[100,1] 97[101,1] 98[102,1] 99[103,1] 100[104,1] 101[105,1] 102[106,1] 103[107,1] 104[108,1] 105[109,1] 106[110,1] 107[111,1] 108[112,1] 109[113,1] 110[114,1] 111[115,1] 112[116,1] 113[117,1] 114[118,1] 115[119,1] 116[120,1] 117[121,1] 118[122,1] 119[123,1] 120[124,1] 121[125,1] 122[126,1] 123[127,1] 124[128,1] 125[129,1] 126[130,1] 127[131,1] 133[132,1] 134[133,1] 135[134,2] 137[136,1] 140[137,1] 141[138,1] 143[139,1] 144[140,1] 147[141,1] 154[142,1] 155[143,1] 156[144,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 134 135 137 140 155 156
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 134 135 137 140 155 156
;; live  kill	
;; rd  in  	(10)
2, 5, 8, 10, 11, 13, 14, 16, 29, 30
;; rd  gen 	(7)
28, 133, 135, 136, 137, 143, 144
;; rd  kill	(10)
26, 27, 28, 133, 134, 135, 136, 137, 143, 144

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 arch/arm/vfp/vfpdouble.c:55 (set (reg/v/f:SI 137 [ vd ])
        (reg:SI 0 r0 [ vd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ vd ])
        (nil)))

(note 3 2 47 2 NOTE_INSN_FUNCTION_BEG)

(insn 47 3 48 2 arch/arm/vfp/vfpdouble.c:56 (set (reg:SI 155 [ D.4073 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 137 [ vd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 48 47 9 2 arch/arm/vfp/vfpdouble.c:56 (set (reg:SI 156 [ D.4073+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 137 [ vd ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 9 48 10 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 134 [ ret ])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 156 [ D.4073+4 ])
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1139895)) -1 (expr_list:REG_DEAD (reg:SI 156 [ D.4073+4 ])
        (nil)))

(insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:56 (set (reg:SI 140)
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 134 [ ret ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ ret ])
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:56 (set (reg/v:SI 135 [ bits ])
        (minus:SI (const_int 31 [0x1f])
            (reg:SI 140))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 140)
        (nil)))

(insn 12 11 13 2 arch/arm/vfp/vfpdouble.c:57 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ bits ])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 13 12 14 2 arch/arm/vfp/vfpdouble.c:57 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137 155
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137 155
;; rd  out 	(17)
2, 5, 8, 10, 11, 13, 14, 16, 28, 29, 30, 133, 135, 136, 137, 143, 144


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  4 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u12(11){ }u13(13){ }u14(25){ }u15(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 155
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 133 135 141
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 155
;; live  gen 	 133 135 141
;; live  kill	
;; rd  in  	(17)
2, 5, 8, 10, 11, 13, 14, 16, 28, 29, 30, 133, 135, 136, 137, 143, 144
;; rd  gen 	(3)
132, 134, 138
;; rd  kill	(4)
132, 134, 135, 138

;; Pred edge  2 [28.0%]  (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 133 [ ret ])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 155 [ D.4073 ])
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1139895)) -1 (expr_list:REG_DEAD (reg:SI 155 [ D.4073 ])
        (nil)))

(insn 16 15 17 3 arch/arm/vfp/vfpdouble.c:58 (set (reg:SI 141)
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 133 [ ret ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/v:SI 133 [ ret ])
        (nil)))

(insn 17 16 18 3 arch/arm/vfp/vfpdouble.c:58 (set (reg/v:SI 135 [ bits ])
        (minus:SI (const_int 63 [0x3f])
            (reg:SI 141))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 141)
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; rd  out 	(19)
2, 5, 8, 10, 11, 13, 14, 16, 28, 29, 30, 132, 133, 134, 136, 137, 138, 143, 144


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u19(11){ }u20(13){ }u21(25){ }u22(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(20)
2, 5, 8, 10, 11, 13, 14, 16, 28, 29, 30, 132, 133, 134, 135, 136, 137, 138, 143, 144
;; rd  gen 	(1)
27
;; rd  kill	(3)
26, 27, 28

;; Pred edge  2 [72.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 18 17 19 4 106 "" [1 uses])

(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 4 arch/arm/vfp/vfpdouble.c:62 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 135 [ bits ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 4 arch/arm/vfp/vfpdouble.c:62 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 43)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 137
;; rd  out 	(20)
2, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 143, 144


;; Succ edge  5 [61.0%]  (fallthru)
;; Succ edge  6 [39.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u25(11){ }u26(13){ }u27(25){ }u28(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 137
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 143 144 147 154
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 137
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 143 144 147 154
;; live  kill	 14 [lr]
;; rd  in  	(20)
2, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 143, 144
;; rd  gen 	(6)
0, 3, 139, 140, 141, 142
;; rd  kill	(12)
0, 1, 2, 3, 4, 5, 15, 16, 139, 140, 141, 142

;; Pred edge  4 [61.0%]  (fallthru)
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 25 5 arch/arm/vfp/vfpdouble.c:63 (set (reg:SI 143 [ <variable>.exponent ])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 137 [ vd ]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 25 23 28 5 arch/arm/vfp/vfpdouble.c:63 (set (reg:SI 144)
        (plus:SI (reg:SI 143 [ <variable>.exponent ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 143 [ <variable>.exponent ])
        (nil)))

(insn 28 25 29 5 arch/arm/vfp/vfpdouble.c:63 (set (reg:SI 147)
        (minus:SI (reg:SI 144)
            (reg/v:SI 135 [ bits ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 144)
        (nil)))

(insn 29 28 33 5 arch/arm/vfp/vfpdouble.c:63 (set (mem/s/j:HI (reg/v/f:SI 137 [ vd ]) [0 <variable>.exponent+0 S2 A64])
        (subreg:HI (reg:SI 147) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 147)
        (nil)))

(insn 33 29 34 5 arch/arm/vfp/vfpdouble.c:64 (set (reg:DI 0 r0)
        (mem/s/j:DI (plus:SI (reg/v/f:SI 137 [ vd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 34 33 35 5 arch/arm/vfp/vfpdouble.c:64 (set (reg:SI 2 r2)
        (reg/v:SI 135 [ bits ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ bits ])
        (nil)))

(call_insn/u 35 34 36 5 arch/arm/vfp/vfpdouble.c:64 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 36 35 37 5 arch/arm/vfp/vfpdouble.c:64 (set (reg:DI 154)
        (reg:DI 0 r0)) 163 {*arm_movdi} (expr_list:REG_EQUAL (ashift:DI (mem/s/j:DI (plus:SI (reg/v/f:SI 137 [ vd ])
                    (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
            (reg/v:SI 135 [ bits ]))
        (nil)))

(insn 37 36 43 5 arch/arm/vfp/vfpdouble.c:64 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 137 [ vd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 154)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 154)
        (expr_list:REG_DEAD (reg/v/f:SI 137 [ vd ])
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(23)
0, 3, 8, 10, 11, 13, 14, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u47(11){ }u48(13){ }u49(25){ }u50(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; rd  in  	(26)
0, 2, 3, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [39.0%] 
(code_label 43 37 46 6 108 "" [1 uses])

(note 46 43 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(26)
0, 2, 3, 5, 8, 10, 11, 13, 14, 16, 27, 29, 30, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_normaliseround (vfp_double_normaliseround)[0:153]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 51 n_edges 77 count 95 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 51 n_edges 77 count 100 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 51 n_edges 77 count 100 (    2)


vfp_double_normaliseround

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={14d,14u} r1={13d,10u} r2={13d,7u} r3={9d,3u} r11={1d,50u} r12={7d} r13={1d,56u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={43d,32u} r25={1d,50u} r26={1d,49u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,6u} r136={1d,1u} r137={1d,1u} r138={1d,3u} r139={3d,2u} r140={2d,4u} r141={6d,8u,1d} r142={5d,5u} r143={5d,17u,4d} r144={1d,1u} r145={1d,1u} r147={1d,4u} r148={1d,2u} r150={1d,1u} r151={1d,16u} r152={1d,1u} r153={4d,5u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r160={1d,1u} r161={2d,1u} r163={2d,2u} r164={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={2d,3u} r174={1d,1u} r175={1d,1u} r178={1d,1u} r180={2d,2u} r181={1d,1u} r182={1d,1u} r183={1d,2u} r184={1d,1u} r185={2d,3u} r186={1d,2u} r187={1d,1u} r188={2d,2u} r190={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,2u} r198={1d,1u} r199={1d,2u} r200={1d,1u} r201={2d,2u} r202={1d,2u} r203={2d,2u} r206={1d,1u} r208={1d,1u} r209={1d,1u} r212={1d,1u} r213={1d,2u} r215={1d,1u} r216={2d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r224={1d,1u} r226={3d,4u} r227={1d,1u} r228={1d,1u} r230={3d,3u} r231={1d,1u} r234={4d,5u} r235={1d,1u} r236={1d,2u} r237={1d,1u} r239={1d,1u} r241={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={2d,2u} r250={1d,1u} r253={3d,3u} r254={3d,3u} r255={3d,3u} 
;;    total ref usage 1358{900d,453u,5e} in 223{217 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769
0[0,14] 1[14,13] 2[27,13] 3[40,9] 11[49,1] 12[50,7] 13[57,1] 14[58,7] 15[65,6] 16[71,6] 17[77,6] 18[83,6] 19[89,6] 20[95,6] 21[101,6] 22[107,6] 23[113,6] 24[119,43] 25[162,1] 26[163,1] 27[164,6] 28[170,6] 29[176,6] 30[182,6] 31[188,6] 32[194,6] 33[200,6] 34[206,6] 35[212,6] 36[218,6] 37[224,6] 38[230,6] 39[236,6] 40[242,6] 41[248,6] 42[254,6] 43[260,6] 44[266,6] 45[272,6] 46[278,6] 47[284,6] 48[290,6] 49[296,6] 50[302,6] 51[308,6] 52[314,6] 53[320,6] 54[326,6] 55[332,6] 56[338,6] 57[344,6] 58[350,6] 59[356,6] 60[362,6] 61[368,6] 62[374,6] 63[380,6] 64[386,6] 65[392,6] 66[398,6] 67[404,6] 68[410,6] 69[416,6] 70[422,6] 71[428,6] 72[434,6] 73[440,6] 74[446,6] 75[452,6] 76[458,6] 77[464,6] 78[470,6] 79[476,6] 80[482,6] 81[488,6] 82[494,6] 83[500,6] 84[506,6] 85[512,6] 86[518,6] 87[524,6] 88[530,6] 89[536,6] 90[542,6] 91[548,6] 92[554,6] 93[560,6] 94[566,6] 95[572,6] 96[578,6] 97[584,6] 98[590,6] 99[596,6] 100[602,6] 101[608,6] 102[614,6] 103[620,6] 104[626,6] 105[632,6] 106[638,6] 107[644,6] 108[650,6] 109[656,6] 110[662,6] 111[668,6] 112[674,6] 113[680,6] 114[686,6] 115[692,6] 116[698,6] 117[704,6] 118[710,6] 119[716,6] 120[722,6] 121[728,6] 122[734,6] 123[740,6] 124[746,6] 125[752,6] 126[758,6] 127[764,6] 133[770,1] 136[771,1] 137[772,1] 138[773,1] 139[774,3] 140[777,2] 141[779,6] 142[785,5] 143[790,5] 144[795,1] 145[796,1] 147[797,1] 148[798,1] 150[799,1] 151[800,1] 152[801,1] 153[802,4] 155[806,1] 156[807,1] 157[808,1] 158[809,1] 160[810,1] 161[811,2] 163[813,2] 164[815,1] 166[816,1] 167[817,1] 168[818,1] 169[819,2] 174[821,1] 175[822,1] 178[823,1] 180[824,2] 181[826,1] 182[827,1] 183[828,1] 184[829,1] 185[830,2] 186[832,1] 187[833,1] 188[834,2] 190[836,1] 192[837,1] 193[838,1] 194[839,1] 195[840,1] 196[841,1] 197[842,1] 198[843,1] 199[844,1] 200[845,1] 201[846,2] 202[848,1] 203[849,2] 206[851,1] 208[852,1] 209[853,1] 212[854,1] 213[855,1] 215[856,1] 216[857,2] 219[859,1] 220[860,1] 221[861,1] 222[862,1] 224[863,1] 226[864,3] 227[867,1] 228[868,1] 230[869,3] 231[872,1] 234[873,4] 235[877,1] 236[878,1] 237[879,1] 239[880,1] 241[881,1] 243[882,1] 244[883,1] 245[884,1] 246[885,1] 247[886,1] 248[887,1] 249[888,2] 250[890,1] 253[891,3] 254[894,3] 255[897,3] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d13(0){ }d26(1){ }d39(2){ }d48(3){ }d49(11){ }d56(12){ }d57(13){ }d64(14){ }d162(25){ }d163(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
13, 26, 39, 48, 49, 56, 57, 64, 162, 163
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 162, 163
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
13, 26, 39, 48, 49, 56, 57, 64, 162, 163

( 0 )->[2]->( 3 6 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d49(bb 0 insn -1) }u1(13){ d57(bb 0 insn -1) }u2(25){ d162(bb 0 insn -1) }u3(26){ d163(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 148 150 151 152 153 155 156 157 158
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 148 150 151 152 153 155 156 157 158
;; live  kill	
;; rd  in  	(10)
13, 26, 39, 48, 49, 56, 57, 64, 162, 163
;; rd  gen 	(10)
161, 798, 799, 800, 801, 805, 806, 807, 808, 809
;; rd  kill	(12)
798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; rd  out 	(20)
13, 26, 39, 48, 49, 56, 57, 64, 161, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d13(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d26(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d48(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 10
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 6 uid 12
;;      reg 156 { d807(bb 2 insn 11) }
;;   UD chains for insn luid 7 uid 13
;;      reg 148 { d798(bb 2 insn 10) }
;;   UD chains for insn luid 8 uid 14
;;      reg 155 { d806(bb 2 insn 12) }
;;   UD chains for insn luid 9 uid 15
;;      reg 157 { d808(bb 2 insn 13) }
;;      reg 158 { d809(bb 2 insn 14) }
;;   UD chains for insn luid 10 uid 16
;;      reg 24 { d161(bb 2 insn 15) }

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(11){ d49(bb 0 insn -1) }u16(13){ d57(bb 0 insn -1) }u17(25){ d162(bb 0 insn -1) }u18(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 153
;; lr  def 	 24 [cc] 160 161 163 164
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; live  gen 	 24 [cc] 160 161 163 164
;; live  kill	
;; rd  in  	(20)
13, 26, 39, 48, 49, 56, 57, 64, 161, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809
;; rd  gen 	(5)
159, 810, 812, 813, 815
;; rd  kill	(6)
810, 811, 812, 813, 814, 815
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; rd  out 	(24)
13, 26, 39, 48, 49, 56, 57, 64, 159, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 815
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 18
;;      reg 153 { d805(bb 2 insn 5) }
;;   UD chains for insn luid 1 uid 19
;;      reg 24 { d160(bb 3 insn 18) }
;;   UD chains for insn luid 3 uid 23
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 4 uid 24
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 5 uid 25
;;      reg 163 { d814(bb 3 insn 23) }
;;      reg 164 { d815(bb 3 insn 24) }
;;   UD chains for insn luid 6 uid 26
;;      reg 163 { d813(bb 3 insn 25) }
;;   UD chains for insn luid 7 uid 27
;;      reg 24 { d159(bb 3 insn 26) }

( 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u27(11){ d49(bb 0 insn -1) }u28(13){ d57(bb 0 insn -1) }u29(25){ d162(bb 0 insn -1) }u30(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 161
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160
;; live  gen 	 161
;; live  kill	
;; rd  in  	(24)
13, 26, 39, 48, 49, 56, 57, 64, 159, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 815
;; rd  gen 	(1)
811
;; rd  kill	(2)
811, 812
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; rd  out 	(24)
13, 26, 39, 48, 49, 56, 57, 64, 159, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 813, 815
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 3 4 )->[5]->( 50 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u31(11){ d49(bb 0 insn -1) }u32(13){ d57(bb 0 insn -1) }u33(25){ d162(bb 0 insn -1) }u34(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161
;; lr  def 	 24 [cc] 166 167 168
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; live  gen 	 24 [cc] 166 167 168
;; live  kill	
;; rd  in  	(25)
13, 26, 39, 48, 49, 56, 57, 64, 159, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815
;; rd  gen 	(4)
158, 816, 817, 818
;; rd  kill	(3)
816, 817, 818
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; rd  out 	(28)
13, 26, 39, 48, 49, 56, 57, 64, 158, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 31
;;      reg 160 { d810(bb 3 insn 19) }
;;      reg 161 { d812(bb 3 insn 22) d811(bb 4 insn 29) }
;;   UD chains for insn luid 1 uid 32
;;      reg 166 { d816(bb 5 insn 31) }
;;   UD chains for insn luid 2 uid 33
;;      reg 167 { d817(bb 5 insn 32) }
;;   UD chains for insn luid 3 uid 34
;;      reg 168 { d818(bb 5 insn 33) }
;;   UD chains for insn luid 4 uid 35
;;      reg 24 { d158(bb 5 insn 34) }

( 2 5 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u41(11){ d49(bb 0 insn -1) }u42(13){ d57(bb 0 insn -1) }u43(25){ d162(bb 0 insn -1) }u44(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 143 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; live  gen 	 24 [cc] 143 169
;; live  kill	
;; rd  in  	(29)
13, 26, 39, 48, 49, 56, 57, 64, 158, 161, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818
;; rd  gen 	(3)
157, 794, 819
;; rd  kill	(7)
790, 791, 792, 793, 794, 819, 820
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148 150 151 152 153 169
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148 150 151 152 153 169
;; rd  out 	(30)
13, 26, 39, 48, 49, 56, 57, 64, 157, 162, 163, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 38
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 1 uid 39
;;      reg 143 { d794(bb 6 insn 38) }
;;   UD chains for insn luid 2 uid 40
;;      reg 143 { d794(bb 6 insn 38) }
;;      reg 169 { d820(bb 6 insn 39) }
;;   UD chains for insn luid 3 uid 41
;;      reg 169 { d819(bb 6 insn 40) }
;;   UD chains for insn luid 4 uid 42
;;      reg 24 { d157(bb 6 insn 41) }

( 6 )->[7]->( 50 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u51(11){ d49(bb 0 insn -1) }u52(13){ d57(bb 0 insn -1) }u53(25){ d162(bb 0 insn -1) }u54(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 169
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 169
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 169
;; live  gen 	
;; live  kill	
;; rd  in  	(30)
13, 26, 39, 48, 49, 56, 57, 64, 157, 162, 163, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; rd  out 	(30)
13, 26, 39, 48, 49, 56, 57, 64, 157, 162, 163, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 46
;;      reg 151 { d800(bb 2 insn 3) }
;;      reg 169 { d819(bb 6 insn 40) }

( 6 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u57(11){ d49(bb 0 insn -1) }u58(13){ d57(bb 0 insn -1) }u59(25){ d162(bb 0 insn -1) }u60(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148
;; lr  def 	 24 [cc] 137 140 141 174 241
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148 150 151 152 153
;; live  gen 	 24 [cc] 137 140 141 174 241
;; live  kill	
;; rd  in  	(30)
13, 26, 39, 48, 49, 56, 57, 64, 157, 162, 163, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819
;; rd  gen 	(6)
156, 772, 778, 784, 821, 881
;; rd  kill	(11)
772, 777, 778, 779, 780, 781, 782, 783, 784, 821, 881
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; rd  out 	(35)
13, 26, 39, 48, 49, 56, 57, 64, 156, 162, 163, 772, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 881
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 51
;;      reg 148 { d798(bb 2 insn 10) }
;;   UD chains for insn luid 1 uid 52
;;      reg 143 { d794(bb 6 insn 38) }
;;   UD chains for insn luid 2 uid 54
;;      reg 241 { d881(bb 8 insn 52) }
;;   UD chains for insn luid 3 uid 55
;;      reg 137 { d772(bb 8 insn 54) }
;;   UD chains for insn luid 4 uid 56
;;      reg 174 { d821(bb 8 insn 55) }
;;   UD chains for insn luid 5 uid 57
;;      reg 140 { d778(bb 8 insn 56) }
;;   UD chains for insn luid 6 uid 58
;;      reg 24 { d156(bb 8 insn 57) }

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u68(11){ d49(bb 0 insn -1) }u69(13){ d57(bb 0 insn -1) }u70(25){ d162(bb 0 insn -1) }u71(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 136 140 175
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  gen 	 136 140 175
;; live  kill	
;; rd  in  	(35)
13, 26, 39, 48, 49, 56, 57, 64, 156, 162, 163, 772, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 881
;; rd  gen 	(3)
771, 777, 822
;; rd  kill	(4)
771, 777, 778, 822
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; rd  out 	(37)
13, 26, 39, 48, 49, 56, 57, 64, 156, 162, 163, 771, 772, 777, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 60
;;      reg 143 { d794(bb 6 insn 38) }
;;   UD chains for insn luid 1 uid 61
;;      reg 136 { d771(bb 9 insn 60) }
;;   UD chains for insn luid 2 uid 62
;;      reg 175 { d822(bb 9 insn 61) }

( 8 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u75(11){ d49(bb 0 insn -1) }u76(13){ d57(bb 0 insn -1) }u77(25){ d162(bb 0 insn -1) }u78(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
13, 26, 39, 48, 49, 56, 57, 64, 156, 162, 163, 771, 772, 777, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881
;; rd  gen 	(1)
155
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; rd  out 	(38)
13, 26, 39, 48, 49, 56, 57, 64, 155, 162, 163, 771, 772, 777, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 65
;;      reg 140 { d778(bb 8 insn 56) d777(bb 9 insn 62) }
;;   UD chains for insn luid 1 uid 66
;;      reg 24 { d155(bb 10 insn 65) }

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u81(11){ d49(bb 0 insn -1) }u82(13){ d57(bb 0 insn -1) }u83(25){ d162(bb 0 insn -1) }u84(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 141 143 243 244 253
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 141 143 243 244 253
;; live  kill	 14 [lr] 253
;; rd  in  	(38)
13, 26, 39, 48, 49, 56, 57, 64, 155, 162, 163, 771, 772, 777, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881
;; rd  gen 	(7)
11, 24, 783, 793, 882, 883, 891
;; rd  kill	(47)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 58, 59, 60, 61, 62, 63, 64, 779, 780, 781, 782, 783, 784, 790, 791, 792, 793, 794, 882, 883
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; rd  out 	(40)
11, 24, 39, 48, 49, 56, 57, 155, 162, 163, 771, 772, 777, 778, 783, 793, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 68
;;      reg 140 { d778(bb 8 insn 56) d777(bb 9 insn 62) }
;;      reg 141 { d784(bb 8 insn 51) }
;;   UD chains for insn luid 1 uid 69
;;      reg 143 { d794(bb 6 insn 38) }
;;   UD chains for insn luid 2 uid 70
;;      reg 140 { d778(bb 8 insn 56) d777(bb 9 insn 62) }
;;   UD chains for insn luid 3 uid 71
;;      reg 13 { d57(bb 0 insn -1) }
;;      reg 0 { d12(bb 11 insn 69) }
;;      reg 1 { d25(bb 11 insn 69) }
;;      reg 2 { d38(bb 11 insn 70) }
;;   UD chains for insn luid 4 uid 352
;;      reg 0 { d11(bb 11 insn 71) }
;;   UD chains for insn luid 5 uid 353
;;      reg 1 { d24(bb 11 insn 71) }
;;   UD chains for insn luid 7 uid 355
;;      reg 243 { d882(bb 11 insn 352) }
;;      reg 253 read/write { }
;;   UD chains for insn luid 8 uid 356
;;      reg 244 { d883(bb 11 insn 353) }
;;      reg 253 read/write { d892(bb 11 insn 355) }
;;   UD chains for insn luid 9 uid 357
;;      reg 253 { d892(bb 11 insn 355) d891(bb 11 insn 356) }

( 10 11 )->[12]->( 14 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u100(11){ d49(bb 0 insn -1) }u101(13){ d57(bb 0 insn -1) }u102(25){ d162(bb 0 insn -1) }u103(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(45)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 155, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(1)
153
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; rd  out 	(45)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 153, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 76
;;      reg 141 { d784(bb 8 insn 51) d783(bb 11 insn 68) }
;;   UD chains for insn luid 1 uid 77
;;      reg 24 { d153(bb 12 insn 76) }

( 12 )->[13]->( 24 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u106(11){ d49(bb 0 insn -1) }u107(13){ d57(bb 0 insn -1) }u108(25){ d162(bb 0 insn -1) }u109(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  gen 	 139
;; live  kill	
;; rd  in  	(45)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 153, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(1)
776
;; rd  kill	(3)
774, 775, 776
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; rd  out 	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 153, 162, 163, 771, 772, 776, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 12 )->[14]->( 15 21 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u110(11){ d49(bb 0 insn -1) }u111(13){ d57(bb 0 insn -1) }u112(25){ d162(bb 0 insn -1) }u113(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  gen 	 24 [cc] 147
;; live  kill	
;; rd  in  	(45)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 153, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(2)
121, 797
;; rd  kill	(1)
797
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; rd  out 	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 121, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 84
;;      reg 141 { d784(bb 8 insn 51) d783(bb 11 insn 68) }
;;   UD chains for insn luid 1 uid 86
;;      reg 147 { d797(bb 14 insn 84) }
;;   UD chains for insn luid 2 uid 87
;;      reg 24 { d121(bb 14 insn 86) }

( 14 )->[15]->( 16 19 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u117(11){ d49(bb 0 insn -1) }u118(13){ d57(bb 0 insn -1) }u119(25){ d162(bb 0 insn -1) }u120(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 121, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(1)
120
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; rd  out 	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 120, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 89
;;      reg 147 { d797(bb 14 insn 84) }
;;   UD chains for insn luid 1 uid 90
;;      reg 24 { d120(bb 15 insn 89) }

( 15 )->[16]->( 18 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u123(11){ d49(bb 0 insn -1) }u124(13){ d57(bb 0 insn -1) }u125(25){ d162(bb 0 insn -1) }u126(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 178 180 181 245 246 247 248 254 255
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 178 180 181 245 246 247 248 254 255
;; live  kill	 14 [lr] 254 255
;; rd  in  	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 120, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(11)
6, 149, 823, 825, 826, 884, 885, 886, 887, 894, 897
;; rd  kill	(29)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 58, 59, 60, 61, 62, 63, 64, 823, 824, 825, 826, 884, 885, 886, 887
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; rd  out 	(53)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 825, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 92
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) }
;;   UD chains for insn luid 1 uid 93
;;      reg 147 { d797(bb 14 insn 84) }
;;   UD chains for insn luid 2 uid 94
;;      reg 13 { d57(bb 0 insn -1) }
;;      reg 0 { d10(bb 16 insn 92) }
;;      reg 1 { d23(bb 16 insn 92) }
;;      reg 2 { d36(bb 16 insn 93) }
;;   UD chains for insn luid 3 uid 358
;;      reg 0 { d9(bb 16 insn 94) }
;;   UD chains for insn luid 4 uid 359
;;      reg 1 { d22(bb 16 insn 94) }
;;   UD chains for insn luid 6 uid 361
;;      reg 245 { d884(bb 16 insn 358) }
;;      reg 254 read/write { }
;;   UD chains for insn luid 7 uid 362
;;      reg 246 { d885(bb 16 insn 359) }
;;      reg 254 read/write { d895(bb 16 insn 361) }
;;   UD chains for insn luid 8 uid 97
;;      reg 147 { d797(bb 14 insn 84) }
;;   UD chains for insn luid 9 uid 98
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) }
;;   UD chains for insn luid 10 uid 99
;;      reg 178 { d823(bb 16 insn 97) }
;;   UD chains for insn luid 11 uid 100
;;      reg 13 { d57(bb 0 insn -1) }
;;      reg 0 { d8(bb 16 insn 98) }
;;      reg 1 { d21(bb 16 insn 98) }
;;      reg 2 { d34(bb 16 insn 99) }
;;   UD chains for insn luid 12 uid 364
;;      reg 0 { d7(bb 16 insn 100) }
;;   UD chains for insn luid 13 uid 365
;;      reg 1 { d20(bb 16 insn 100) }
;;   UD chains for insn luid 15 uid 367
;;      reg 247 { d886(bb 16 insn 364) }
;;      reg 255 read/write { }
;;   UD chains for insn luid 16 uid 368
;;      reg 248 { d887(bb 16 insn 365) }
;;      reg 255 read/write { d898(bb 16 insn 367) }
;;   UD chains for insn luid 17 uid 369
;;      reg 255 { d898(bb 16 insn 367) d897(bb 16 insn 368) }
;;   UD chains for insn luid 18 uid 103
;;      reg 180 { d825(bb 16 insn 369) }
;;   UD chains for insn luid 20 uid 105
;;      reg 13 { d57(bb 0 insn -1) }
;;      reg 0 { d0(bb 16 insn 103) }
;;      reg 1 { d14(bb 16 insn 103) }
;;      reg 2 { d32(bb 16 insn 104) }
;;      reg 3 { d44(bb 16 insn 104) }
;;   UD chains for insn luid 21 uid 106
;;      reg 0 { d6(bb 16 insn 105) }
;;   UD chains for insn luid 22 uid 107
;;      reg 181 { d826(bb 16 insn 106) }
;;   UD chains for insn luid 23 uid 108
;;      reg 24 { d149(bb 16 insn 107) }

( 16 )->[17]->( 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u162(11){ d49(bb 0 insn -1) }u163(13){ d57(bb 0 insn -1) }u164(25){ d162(bb 0 insn -1) }u165(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 254
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 254
;; live  gen 	 180
;; live  kill	
;; rd  in  	(53)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 825, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
824
;; rd  kill	(2)
824, 825
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; rd  out 	(53)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 16 17 )->[18]->( 21 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u166(11){ d49(bb 0 insn -1) }u167(13){ d57(bb 0 insn -1) }u168(25){ d162(bb 0 insn -1) }u169(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 254
;; lr  def 	 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; live  gen 	 143
;; live  kill	
;; rd  in  	(54)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
790
;; rd  kill	(5)
790, 791, 792, 793, 794
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; rd  out 	(53)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 790, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 112
;;      reg 180 { d825(bb 16 insn 369) d824(bb 17 insn 109) }
;;      reg 254 { d894(bb 16 insn 362) }

( 15 )->[19]->( 21 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u172(11){ d49(bb 0 insn -1) }u173(13){ d57(bb 0 insn -1) }u174(25){ d162(bb 0 insn -1) }u175(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 182
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 182
;; live  kill	 14 [lr]
;; rd  in  	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 120, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(3)
4, 147, 827
;; rd  kill	(22)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 58, 59, 60, 61, 62, 63, 64, 827
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; rd  out 	(45)
4, 24, 26, 39, 48, 49, 56, 57, 147, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 827, 881, 882, 883, 891
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 117
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) }
;;   UD chains for insn luid 2 uid 119
;;      reg 13 { d57(bb 0 insn -1) }
;;      reg 0 { d5(bb 19 insn 117) }
;;      reg 1 { d18(bb 19 insn 117) }
;;      reg 2 { d30(bb 19 insn 118) }
;;      reg 3 { d42(bb 19 insn 118) }
;;   UD chains for insn luid 3 uid 120
;;      reg 0 { d4(bb 19 insn 119) }
;;   UD chains for insn luid 4 uid 121
;;      reg 182 { d827(bb 19 insn 120) }
;;   UD chains for insn luid 5 uid 122
;;      reg 24 { d147(bb 19 insn 121) }

( 19 )->[20]->( 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u185(11){ d49(bb 0 insn -1) }u186(13){ d57(bb 0 insn -1) }u187(25){ d162(bb 0 insn -1) }u188(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153
;; live  gen 	 143
;; live  kill	
;; rd  in  	(45)
4, 24, 26, 39, 48, 49, 56, 57, 147, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 827, 881, 882, 883, 891
;; rd  gen 	(1)
792
;; rd  kill	(5)
790, 791, 792, 793, 794
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; rd  out 	(44)
4, 24, 26, 39, 48, 49, 56, 57, 147, 162, 163, 771, 772, 777, 778, 783, 784, 792, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 827, 881, 882, 883, 891
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 14 19 20 18 )->[21]->( 22 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u189(11){ d49(bb 0 insn -1) }u190(13){ d57(bb 0 insn -1) }u191(25){ d162(bb 0 insn -1) }u192(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 183 184 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  gen 	 24 [cc] 183 184 185
;; live  kill	
;; rd  in  	(63)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 121, 147, 149, 162, 163, 771, 772, 777, 778, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(4)
146, 828, 829, 830
;; rd  kill	(4)
828, 829, 830, 831
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153 185
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153 185
;; rd  out 	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 777, 778, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 128
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) d792(bb 20 insn 123) d790(bb 18 insn 112) }
;;      reg 184 { d829(bb 21 insn 127) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 2 uid 129
;;      reg 183 { d828(bb 21 insn 128) }
;;   UD chains for insn luid 3 uid 130
;;      reg 183 { d828(bb 21 insn 128) }
;;      reg 185 { d831(bb 21 insn 129) }
;;   UD chains for insn luid 4 uid 131
;;      reg 185 { d830(bb 21 insn 130) }
;;   UD chains for insn luid 5 uid 132
;;      reg 24 { d146(bb 21 insn 131) }

( 21 )->[22]->( 24 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u201(11){ d49(bb 0 insn -1) }u202(13){ d57(bb 0 insn -1) }u203(25){ d162(bb 0 insn -1) }u204(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153 185
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; lr  def 	 139 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153 185
;; live  gen 	 139 141
;; live  kill	
;; rd  in  	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 777, 778, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
774, 779
;; rd  kill	(9)
774, 775, 776, 779, 780, 781, 782, 783, 784
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; rd  out 	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 774, 777, 778, 779, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 134
;;      reg 185 { d830(bb 21 insn 130) }
;;   UD chains for insn luid 1 uid 135
;;      reg 139 { d774(bb 22 insn 134) }

( 21 )->[23]->( 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u207(11){ d49(bb 0 insn -1) }u208(13){ d57(bb 0 insn -1) }u209(25){ d162(bb 0 insn -1) }u210(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  gen 	 139 141
;; live  kill	
;; rd  in  	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 777, 778, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
775, 782
;; rd  kill	(9)
774, 775, 776, 779, 780, 781, 782, 783, 784
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; rd  out 	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 775, 777, 778, 782, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 13 23 22 )->[24]->( 25 28 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u211(11){ d49(bb 0 insn -1) }u212(13){ d57(bb 0 insn -1) }u213(25){ d162(bb 0 insn -1) }u214(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; live  gen 	 24 [cc] 138
;; live  kill	
;; rd  in  	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 153, 162, 163, 771, 772, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
145, 773
;; rd  kill	(1)
773
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; rd  out 	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 145, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 144
;;      reg 152 { d801(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 145
;;      reg 138 { d773(bb 24 insn 144) }
;;   UD chains for insn luid 2 uid 146
;;      reg 24 { d145(bb 24 insn 145) }

( 24 )->[25]->( 26 27 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u218(11){ d49(bb 0 insn -1) }u219(13){ d57(bb 0 insn -1) }u220(25){ d162(bb 0 insn -1) }u221(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 186 187 188
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 24 [cc] 186 187 188
;; live  kill	
;; rd  in  	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 145, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(4)
144, 832, 833, 834
;; rd  kill	(4)
832, 833, 834, 835
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; rd  out 	(73)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 149
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) d792(bb 20 insn 123) d790(bb 18 insn 112) }
;;      reg 187 { d833(bb 25 insn 148) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 2 uid 150
;;      reg 186 { d832(bb 25 insn 149) }
;;   UD chains for insn luid 3 uid 151
;;      reg 186 { d832(bb 25 insn 149) }
;;      reg 188 { d835(bb 25 insn 150) }
;;   UD chains for insn luid 4 uid 152
;;      reg 188 { d834(bb 25 insn 151) }
;;   UD chains for insn luid 5 uid 153
;;      reg 24 { d144(bb 25 insn 152) }

( 25 )->[26]->( 32 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u230(11){ d49(bb 0 insn -1) }u231(13){ d57(bb 0 insn -1) }u232(25){ d162(bb 0 insn -1) }u233(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 142
;; live  kill	
;; rd  in  	(73)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
789
;; rd  kill	(5)
785, 786, 787, 788, 789
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(74)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 25 )->[27]->( 32 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u234(11){ d49(bb 0 insn -1) }u235(13){ d57(bb 0 insn -1) }u236(25){ d162(bb 0 insn -1) }u237(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 142
;; live  kill	
;; rd  in  	(73)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
788
;; rd  kill	(5)
785, 786, 787, 788, 789
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(74)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 788, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 24 )->[28]->( 31 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u238(11){ d49(bb 0 insn -1) }u239(13){ d57(bb 0 insn -1) }u240(25){ d162(bb 0 insn -1) }u241(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 145, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
143
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; rd  out 	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 143, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 165
;;      reg 138 { d773(bb 24 insn 144) }
;;   UD chains for insn luid 1 uid 166
;;      reg 24 { d143(bb 28 insn 165) }

( 28 )->[29]->( 30 31 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u244(11){ d49(bb 0 insn -1) }u245(13){ d57(bb 0 insn -1) }u246(25){ d162(bb 0 insn -1) }u247(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 151
;; lr  def 	 24 [cc] 190 192 193 194 195 196
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; live  gen 	 24 [cc] 190 192 193 194 195 196
;; live  kill	
;; rd  in  	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 143, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(7)
140, 836, 837, 838, 839, 840, 841
;; rd  kill	(6)
836, 837, 838, 839, 840, 841
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; rd  out 	(76)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 168
;;      reg 138 { d773(bb 24 insn 144) }
;;   UD chains for insn luid 1 uid 169
;;      reg 24 { d142(bb 29 insn 168) }
;;   UD chains for insn luid 2 uid 171
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 3 uid 172
;;      reg 192 { d837(bb 29 insn 171) }
;;   UD chains for insn luid 4 uid 173
;;      reg 24 { d141(bb 29 insn 172) }
;;   UD chains for insn luid 5 uid 175
;;      reg 190 { d836(bb 29 insn 169) }
;;      reg 193 { d838(bb 29 insn 173) }
;;   UD chains for insn luid 6 uid 176
;;      reg 194 { d839(bb 29 insn 175) }
;;   UD chains for insn luid 7 uid 177
;;      reg 195 { d840(bb 29 insn 176) }
;;   UD chains for insn luid 8 uid 178
;;      reg 196 { d841(bb 29 insn 177) }
;;   UD chains for insn luid 9 uid 179
;;      reg 24 { d140(bb 29 insn 178) }

( 29 )->[30]->( 32 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u259(11){ d49(bb 0 insn -1) }u260(13){ d57(bb 0 insn -1) }u261(25){ d162(bb 0 insn -1) }u262(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 142
;; live  kill	
;; rd  in  	(76)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
787
;; rd  kill	(5)
785, 786, 787, 788, 789
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(77)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 787, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 29 28 )->[31]->( 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u263(11){ d49(bb 0 insn -1) }u264(13){ d57(bb 0 insn -1) }u265(25){ d162(bb 0 insn -1) }u266(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 142
;; live  kill	
;; rd  in  	(77)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 143, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
786
;; rd  kill	(5)
785, 786, 787, 788, 789
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(78)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 143, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 31 27 26 30 )->[32]->( 35 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u267(11){ d49(bb 0 insn -1) }u268(13){ d57(bb 0 insn -1) }u269(25){ d162(bb 0 insn -1) }u270(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143
;; lr  def 	 24 [cc] 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 24 [cc] 197
;; live  kill	 24 [cc]
;; rd  in  	(85)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 143, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
138, 842
;; rd  kill	(1)
842
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; rd  out 	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 189
;;      reg 142 { d789(bb 26 insn 155) d788(bb 27 insn 160) d787(bb 30 insn 181) d786(bb 31 insn 186) }
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) d792(bb 20 insn 123) d790(bb 18 insn 112) }
;;   UD chains for insn luid 1 uid 190
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) d792(bb 20 insn 123) d790(bb 18 insn 112) }
;;      reg 197 { d842(bb 32 insn 189) }
;;   UD chains for insn luid 2 uid 191
;;      reg 24 { d138(bb 32 insn 190) }

( 32 )->[33]->( 36 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u276(11){ d49(bb 0 insn -1) }u277(13){ d57(bb 0 insn -1) }u278(25){ d162(bb 0 insn -1) }u279(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; live  gen 	
;; live  kill	
;; rd  in  	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; rd  out 	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 193
;;      reg 24 { d138(bb 32 insn 190) }

( 33 )->[34]->( 35 36 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u281(11){ d49(bb 0 insn -1) }u282(13){ d57(bb 0 insn -1) }u283(25){ d162(bb 0 insn -1) }u284(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 197
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
137
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 137, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 194
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) d792(bb 20 insn 123) d790(bb 18 insn 112) }
;;      reg 197 { d842(bb 32 insn 189) }
;;   UD chains for insn luid 1 uid 195
;;      reg 24 { d137(bb 34 insn 194) }

( 34 32 )->[35]->( 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u288(11){ d49(bb 0 insn -1) }u289(13){ d57(bb 0 insn -1) }u290(25){ d162(bb 0 insn -1) }u291(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 143
;; lr  def 	 24 [cc] 141 142 143 144 145 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 141 142 143 144 145 198
;; live  kill	 24 [cc]
;; rd  in  	(85)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 137, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(6)
781, 785, 791, 795, 796, 843
;; rd  kill	(19)
779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 843
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(77)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 781, 785, 791, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 202
;;      reg 141 { d784(bb 8 insn 51) d783(bb 11 insn 68) d782(bb 23 insn 141) d779(bb 22 insn 135) }
;;   UD chains for insn luid 1 uid 203
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) d792(bb 20 insn 123) d790(bb 18 insn 112) }
;;   UD chains for insn luid 3 uid 205
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) d792(bb 20 insn 123) d790(bb 18 insn 112) }
;;      reg 198 { d843(bb 35 insn 204) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 4 uid 206
;;      reg 144 { d795(bb 35 insn 205) }
;;      reg 145 { d796(bb 35 insn 203) }
;;   UD chains for insn luid 5 uid 207
;;      reg 142 { d789(bb 26 insn 155) d788(bb 27 insn 160) d787(bb 30 insn 181) d786(bb 31 insn 186) }

( 35 33 34 )->[36]->( 37 38 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u300(11){ d49(bb 0 insn -1) }u301(13){ d57(bb 0 insn -1) }u302(25){ d162(bb 0 insn -1) }u303(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 199 200 201
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 24 [cc] 199 200 201
;; live  kill	
;; rd  in  	(91)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 137, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(4)
134, 844, 845, 846
;; rd  kill	(4)
844, 845, 846, 847
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(93)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 134, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 211
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) d792(bb 20 insn 123) d791(bb 35 insn 206) d790(bb 18 insn 112) }
;;      reg 200 { d845(bb 36 insn 210) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 2 uid 212
;;      reg 199 { d844(bb 36 insn 211) }
;;   UD chains for insn luid 3 uid 213
;;      reg 199 { d844(bb 36 insn 211) }
;;      reg 201 { d847(bb 36 insn 212) }
;;   UD chains for insn luid 4 uid 214
;;      reg 201 { d846(bb 36 insn 213) }
;;   UD chains for insn luid 5 uid 215
;;      reg 24 { d134(bb 36 insn 214) }

( 36 )->[37]->( 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u312(11){ d49(bb 0 insn -1) }u313(13){ d57(bb 0 insn -1) }u314(25){ d162(bb 0 insn -1) }u315(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153
;; lr  def 	 153
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 153
;; live  kill	
;; rd  in  	(93)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 134, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
804
;; rd  kill	(4)
802, 803, 804, 805
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(93)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 134, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 217
;;      reg 153 { d805(bb 2 insn 5) }

( 36 37 )->[38]->( 39 42 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u317(11){ d49(bb 0 insn -1) }u318(13){ d57(bb 0 insn -1) }u319(25){ d162(bb 0 insn -1) }u320(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 202
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 24 [cc] 202
;; live  kill	
;; rd  in  	(94)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 134, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
133, 848
;; rd  kill	(1)
848
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 202
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 202
;; rd  out 	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 133, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 221
;;      reg 141 { d784(bb 8 insn 51) d783(bb 11 insn 68) d782(bb 23 insn 141) d781(bb 35 insn 202) d779(bb 22 insn 135) }
;;      reg 202 { d848(bb 38 insn 220) }
;;   eq_note reg 141 { }
;;   UD chains for insn luid 2 uid 222
;;      reg 24 { d133(bb 38 insn 221) }

( 38 )->[39]->( 40 41 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u325(11){ d49(bb 0 insn -1) }u326(13){ d57(bb 0 insn -1) }u327(25){ d162(bb 0 insn -1) }u328(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 150 151 153 202
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 153
;; lr  def 	 24 [cc] 153 203
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 150 151 153 202
;; live  gen 	 24 [cc] 153 203
;; live  kill	
;; rd  in  	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 133, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(3)
132, 803, 849
;; rd  kill	(6)
802, 803, 804, 805, 849, 850
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 202
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 202
;; rd  out 	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 224
;;      reg 153 { d805(bb 2 insn 5) d804(bb 37 insn 217) }
;;   UD chains for insn luid 1 uid 225
;;      reg 142 { d789(bb 26 insn 155) d788(bb 27 insn 160) d787(bb 30 insn 181) d786(bb 31 insn 186) d785(bb 35 insn 207) }
;;   UD chains for insn luid 2 uid 226
;;      reg 142 { d789(bb 26 insn 155) d788(bb 27 insn 160) d787(bb 30 insn 181) d786(bb 31 insn 186) d785(bb 35 insn 207) }
;;      reg 203 { d850(bb 39 insn 225) }
;;   UD chains for insn luid 3 uid 227
;;      reg 203 { d849(bb 39 insn 226) }
;;   UD chains for insn luid 4 uid 228
;;      reg 24 { d132(bb 39 insn 227) }

( 39 )->[40]->( 50 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u335(11){ d49(bb 0 insn -1) }u336(13){ d57(bb 0 insn -1) }u337(25){ d162(bb 0 insn -1) }u338(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 202
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 202
;; lr  def 	 206
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 202
;; live  gen 	 206
;; live  kill	
;; rd  in  	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
851
;; rd  kill	(1)
851
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; rd  out 	(96)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 232
;;      reg 151 { d800(bb 2 insn 3) }
;;      reg 202 { d848(bb 38 insn 220) }
;;   UD chains for insn luid 2 uid 234
;;      reg 151 { d800(bb 2 insn 3) }
;;      reg 206 { d851(bb 40 insn 233) }

( 39 )->[41]->( 50 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u343(11){ d49(bb 0 insn -1) }u344(13){ d57(bb 0 insn -1) }u345(25){ d162(bb 0 insn -1) }u346(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 208 209
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  gen 	 208 209
;; live  kill	
;; rd  in  	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
852, 853
;; rd  kill	(2)
852, 853
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; rd  out 	(97)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 852, 853, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 241
;;      reg 151 { d800(bb 2 insn 3) }
;;      reg 208 { d852(bb 41 insn 239) }
;;   UD chains for insn luid 3 uid 243
;;      reg 151 { d800(bb 2 insn 3) }
;;      reg 209 { d853(bb 41 insn 242) }

( 38 )->[42]->( 45 43 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u351(11){ d49(bb 0 insn -1) }u352(13){ d57(bb 0 insn -1) }u353(25){ d162(bb 0 insn -1) }u354(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 143
;; lr  def 	 24 [cc] 133 141 212 213 215 216 249 250
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 24 [cc] 133 141 212 213 215 216 249 250
;; live  kill	 24 [cc]
;; rd  in  	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 133, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(9)
129, 770, 780, 854, 855, 856, 858, 888, 890
;; rd  kill	(15)
770, 779, 780, 781, 782, 783, 784, 854, 855, 856, 857, 858, 888, 889, 890
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; rd  out 	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 248
;;      reg 142 { d789(bb 26 insn 155) d788(bb 27 insn 160) d787(bb 30 insn 181) d786(bb 31 insn 186) d785(bb 35 insn 207) }
;;      reg 143 { d794(bb 6 insn 38) d793(bb 11 insn 357) d792(bb 20 insn 123) d791(bb 35 insn 206) d790(bb 18 insn 112) }
;;   UD chains for insn luid 1 uid 249
;;      reg 133 { d770(bb 42 insn 248) }
;;   UD chains for insn luid 2 uid 250
;;      reg 133 { d770(bb 42 insn 248) }
;;   UD chains for insn luid 3 uid 251
;;      reg 212 { d854(bb 42 insn 249) }
;;      reg 249 { d889(bb 42 insn 250) }
;;   UD chains for insn luid 4 uid 252
;;      reg 133 { d770(bb 42 insn 248) }
;;   UD chains for insn luid 5 uid 254
;;      reg 249 { d888(bb 42 insn 251) }
;;      reg 250 { d890(bb 42 insn 252) }
;;   UD chains for insn luid 6 uid 373
;;      reg 213 { d855(bb 42 insn 254) }
;;   UD chains for insn luid 7 uid 374
;;      reg 24 { d119(bb 42 insn 373) }
;;      reg 141 { d784(bb 8 insn 51) d783(bb 11 insn 68) d782(bb 23 insn 141) d781(bb 35 insn 202) d779(bb 22 insn 135) }
;;      reg 213 { d855(bb 42 insn 254) }
;;   UD chains for insn luid 8 uid 261
;;      reg 141 { d780(bb 42 insn 374) }
;;   UD chains for insn luid 9 uid 262
;;      reg 24 { d130(bb 42 insn 261) }
;;   UD chains for insn luid 11 uid 266
;;      reg 133 { d770(bb 42 insn 248) }
;;   UD chains for insn luid 12 uid 267
;;      reg 24 { d129(bb 42 insn 266) }

( 42 )->[43]->( 46 44 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u372(11){ d49(bb 0 insn -1) }u373(13){ d57(bb 0 insn -1) }u374(25){ d162(bb 0 insn -1) }u375(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  gen 	
;; live  kill	
;; rd  in  	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; rd  out 	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 269
;;      reg 24 { d129(bb 42 insn 266) }

( 43 )->[44]->( 45 46 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u377(11){ d49(bb 0 insn -1) }u378(13){ d57(bb 0 insn -1) }u379(25){ d162(bb 0 insn -1) }u380(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
128
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; rd  out 	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 128, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 270
;;      reg 133 { d770(bb 42 insn 248) }
;;   UD chains for insn luid 1 uid 271
;;      reg 24 { d128(bb 44 insn 270) }

( 42 44 )->[45]->( 46 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u383(11){ d49(bb 0 insn -1) }u384(13){ d57(bb 0 insn -1) }u385(25){ d162(bb 0 insn -1) }u386(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 216
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215
;; live  gen 	 216
;; live  kill	
;; rd  in  	(99)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 128, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
857
;; rd  kill	(2)
857, 858
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; rd  out 	(99)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 128, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }

( 43 44 45 )->[46]->( 49 47 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u387(11){ d49(bb 0 insn -1) }u388(13){ d57(bb 0 insn -1) }u389(25){ d162(bb 0 insn -1) }u390(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 215 216
;; lr  def 	 24 [cc] 219 220 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  gen 	 24 [cc] 219 220 221
;; live  kill	
;; rd  in  	(100)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 128, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(4)
127, 859, 860, 861
;; rd  kill	(3)
859, 860, 861
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153
;; rd  out 	(102)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 127, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 280
;;      reg 215 { d856(bb 42 insn 262) }
;;      reg 216 { d858(bb 42 insn 265) d857(bb 45 insn 278) }
;;   UD chains for insn luid 1 uid 281
;;      reg 219 { d859(bb 46 insn 280) }
;;   UD chains for insn luid 2 uid 282
;;      reg 220 { d860(bb 46 insn 281) }
;;   UD chains for insn luid 3 uid 283
;;      reg 221 { d861(bb 46 insn 282) }
;;   UD chains for insn luid 4 uid 284
;;      reg 24 { d127(bb 46 insn 283) }

( 46 )->[47]->( 48 49 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u397(11){ d49(bb 0 insn -1) }u398(13){ d57(bb 0 insn -1) }u399(25){ d162(bb 0 insn -1) }u400(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(102)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 127, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
126
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; rd  out 	(102)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 126, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 286
;;      reg 139 { d776(bb 13 insn 79) d775(bb 23 insn 140) d774(bb 22 insn 134) }
;;   UD chains for insn luid 1 uid 287
;;      reg 24 { d126(bb 47 insn 286) }

( 47 )->[48]->( 49 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u403(11){ d49(bb 0 insn -1) }u404(13){ d57(bb 0 insn -1) }u405(25){ d162(bb 0 insn -1) }u406(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153
;; lr  def 	 153
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; live  gen 	 153
;; live  kill	
;; rd  in  	(102)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 126, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
802
;; rd  kill	(4)
802, 803, 804, 805
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; rd  out 	(101)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 126, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 289
;;      reg 153 { d805(bb 2 insn 5) d804(bb 37 insn 217) }

( 47 48 46 )->[49]->( 50 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u408(11){ d49(bb 0 insn -1) }u409(13){ d57(bb 0 insn -1) }u410(25){ d162(bb 0 insn -1) }u411(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 151
;; lr  def 	 24 [cc] 222
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; live  gen 	 222
;; live  kill	 24 [cc]
;; rd  in  	(104)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 126, 127, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
862
;; rd  kill	(1)
862
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; rd  out 	(103)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 862, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 292
;;      reg 141 { d780(bb 42 insn 374) }
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 1 uid 293
;;      reg 133 { d770(bb 42 insn 248) }
;;   UD chains for insn luid 2 uid 294
;;      reg 151 { d800(bb 2 insn 3) }
;;      reg 222 { d862(bb 49 insn 293) }

( 5 7 40 49 41 )->[50]->( 1 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u417(11){ d49(bb 0 insn -1) }u418(13){ d57(bb 0 insn -1) }u419(25){ d162(bb 0 insn -1) }u420(26){ d163(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 224 226 227 228 230 231 234 235 236 237 239
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 224 226 227 228 230 231 234 235 236 237 239
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(116)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 157, 158, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(12)
1, 863, 866, 867, 868, 870, 872, 874, 877, 878, 879, 880
;; rd  kill	(29)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 58, 59, 60, 61, 62, 63, 64, 863, 867, 868, 872, 877, 878, 879, 880
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(123)
1, 24, 26, 39, 48, 49, 56, 57, 132, 157, 158, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 870, 872, 874, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 25 { d162(bb 0 insn -1) }
;;   reg 26 { d163(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 298
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 2 uid 300
;;      reg 224 { d863(bb 50 insn 298) }
;;      reg 226 read/write { d864(bb 50 insn 375) }
;;   UD chains for insn luid 3 uid 301
;;      reg 226 read/write { d865(bb 50 insn 300) d864(bb 50 insn 375) }
;;   UD chains for insn luid 4 uid 303
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 5 uid 304
;;      reg 228 { d868(bb 50 insn 303) }
;;   UD chains for insn luid 7 uid 305
;;      reg 227 { d867(bb 50 insn 304) }
;;      reg 230 read/write { d869(bb 50 insn 376) }
;;   UD chains for insn luid 8 uid 306
;;      reg 226 { d866(bb 50 insn 301) d865(bb 50 insn 300) d864(bb 50 insn 375) }
;;      reg 230 read/write { d871(bb 50 insn 305) d869(bb 50 insn 376) }
;;   UD chains for insn luid 9 uid 307
;;      reg 226 { d866(bb 50 insn 301) d865(bb 50 insn 300) d864(bb 50 insn 375) }
;;      reg 230 { d871(bb 50 insn 305) d870(bb 50 insn 306) d869(bb 50 insn 376) }
;;   UD chains for insn luid 10 uid 309
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 11 uid 310
;;      reg 236 { d878(bb 50 insn 309) }
;;   UD chains for insn luid 12 uid 311
;;      reg 151 { d800(bb 2 insn 3) }
;;   UD chains for insn luid 14 uid 312
;;      reg 234 read/write { d873(bb 50 insn 377) }
;;      reg 237 { d879(bb 50 insn 311) }
;;   UD chains for insn luid 15 uid 313
;;      reg 234 { d876(bb 50 insn 312) d873(bb 50 insn 377) }
;;      reg 234 read/write { d876(bb 50 insn 312) d873(bb 50 insn 377) }
;;      reg 235 { d877(bb 50 insn 310) }
;;   UD chains for insn luid 16 uid 315
;;      reg 234 read/write { d876(bb 50 insn 312) d875(bb 50 insn 313) d873(bb 50 insn 377) }
;;      reg 236 { d878(bb 50 insn 309) }
;;   UD chains for insn luid 17 uid 316
;;      reg 231 { d872(bb 50 insn 307) }
;;      reg 234 { d876(bb 50 insn 312) d875(bb 50 insn 313) d874(bb 50 insn 315) d873(bb 50 insn 377) }
;;   UD chains for insn luid 18 uid 317
;;      reg 239 { d880(bb 50 insn 316) }
;;   UD chains for insn luid 19 uid 318
;;      reg 150 { d799(bb 2 insn 2) }
;;   UD chains for insn luid 20 uid 319
;;      reg 13 { d57(bb 0 insn -1) }
;;      reg 0 { d3(bb 50 insn 317) }
;;      reg 1 { d16(bb 50 insn 317) }
;;      reg 2 { d28(bb 50 insn 318) }
;;   UD chains for insn luid 21 uid 324
;;      reg 153 { d805(bb 2 insn 5) d804(bb 37 insn 217) d803(bb 39 insn 224) d802(bb 48 insn 289) }
;;   UD chains for insn luid 22 uid 330
;;      reg 0 { d1(bb 50 insn 324) }

( 50 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u453(0){ d1(bb 50 insn 324) }u454(11){ d49(bb 0 insn -1) }u455(13){ d57(bb 0 insn -1) }u456(14){ }u457(25){ d162(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(123)
1, 24, 26, 39, 48, 49, 56, 57, 132, 157, 158, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 870, 872, 874, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(123)
1, 24, 26, 39, 48, 49, 56, 57, 132, 157, 158, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 870, 872, 874, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;;  UD chains for artificial uses
;;   reg 0 { d1(bb 50 insn 324) }
;;   reg 11 { d49(bb 0 insn -1) }
;;   reg 13 { d57(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d162(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 16 to worklist
  Adding insn 27 to worklist
  Adding insn 35 to worklist
  Adding insn 42 to worklist
  Adding insn 378 to worklist
  Adding insn 46 to worklist
  Adding insn 58 to worklist
  Adding insn 66 to worklist
  Adding insn 354 to worklist
  Adding insn 77 to worklist
  Adding insn 380 to worklist
  Adding insn 87 to worklist
  Adding insn 90 to worklist
  Adding insn 108 to worklist
  Adding insn 366 to worklist
  Adding insn 360 to worklist
  Adding insn 382 to worklist
  Adding insn 122 to worklist
  Adding insn 132 to worklist
  Adding insn 384 to worklist
  Adding insn 146 to worklist
  Adding insn 153 to worklist
  Adding insn 386 to worklist
  Adding insn 388 to worklist
  Adding insn 166 to worklist
  Adding insn 179 to worklist
  Adding insn 390 to worklist
  Adding insn 191 to worklist
  Adding insn 193 to worklist
  Adding insn 195 to worklist
  Adding insn 215 to worklist
  Adding insn 222 to worklist
  Adding insn 228 to worklist
  Adding insn 392 to worklist
  Adding insn 234 to worklist
  Adding insn 232 to worklist
  Adding insn 394 to worklist
  Adding insn 243 to worklist
  Adding insn 241 to worklist
  Adding insn 267 to worklist
  Adding insn 269 to worklist
  Adding insn 271 to worklist
  Adding insn 284 to worklist
  Adding insn 287 to worklist
  Adding insn 294 to worklist
  Adding insn 292 to worklist
  Adding insn 330 to worklist
  Adding insn 319 to worklist
Finished finding needed instructions:
  Adding insn 324 to worklist
Processing use of (reg 153 [ exceptions ]) in insn 324:
  Adding insn 5 to worklist
  Adding insn 217 to worklist
  Adding insn 224 to worklist
  Adding insn 289 to worklist
Processing use of (reg 153 [ exceptions ]) in insn 289:
Processing use of (reg 153 [ exceptions ]) in insn 224:
Processing use of (reg 153 [ exceptions ]) in insn 217:
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 13 sp) in insn 319:
Processing use of (reg 0 r0) in insn 319:
  Adding insn 317 to worklist
Processing use of (reg 1 r1) in insn 319:
Processing use of (reg 2 r2) in insn 319:
  Adding insn 318 to worklist
Processing use of (reg 150 [ dd ]) in insn 318:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 239) in insn 317:
  Adding insn 316 to worklist
Processing use of (reg 231) in insn 316:
  Adding insn 307 to worklist
Processing use of (reg 234) in insn 316:
  Adding insn 312 to worklist
  Adding insn 313 to worklist
  Adding insn 315 to worklist
  Adding insn 377 to worklist
Processing use of (reg 234) in insn 315:
Processing use of (reg 236 [ <variable>.significand+4 ]) in insn 315:
  Adding insn 309 to worklist
Processing use of (reg 151 [ vd ]) in insn 309:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (subreg (reg 234) 0) in insn 313:
Processing use of (reg 234) in insn 313:
Processing use of (reg 235) in insn 313:
  Adding insn 310 to worklist
Processing use of (reg 236 [ <variable>.significand+4 ]) in insn 310:
Processing use of (reg 234) in insn 312:
Processing use of (reg 237 [ <variable>.significand ]) in insn 312:
  Adding insn 311 to worklist
Processing use of (reg 151 [ vd ]) in insn 311:
Processing use of (reg 226) in insn 307:
  Adding insn 301 to worklist
  Adding insn 300 to worklist
  Adding insn 375 to worklist
Processing use of (reg 230) in insn 307:
  Adding insn 305 to worklist
  Adding insn 306 to worklist
  Adding insn 376 to worklist
Processing use of (subreg (reg 226) 0) in insn 306:
Processing use of (reg 230) in insn 306:
Processing use of (subreg (reg 227 [ <variable>.exponent ]) 0) in insn 305:
  Adding insn 304 to worklist
Processing use of (reg 230) in insn 305:
Processing use of (reg 228 [ <variable>.exponent ]) in insn 304:
  Adding insn 303 to worklist
Processing use of (reg 151 [ vd ]) in insn 303:
Processing use of (reg 224 [ <variable>.sign ]) in insn 300:
  Adding insn 298 to worklist
Processing use of (reg 226) in insn 300:
Processing use of (reg 151 [ vd ]) in insn 298:
Processing use of (reg 226) in insn 301:
Processing use of (reg 0 r0) in insn 330:
Processing use of (subreg (reg 141 [ exponent ]) 0) in insn 292:
  Adding insn 374 to worklist
Processing use of (reg 151 [ vd ]) in insn 292:
Processing use of (reg 24 cc) in insn 374:
  Adding insn 373 to worklist
Processing use of (reg 141 [ exponent ]) in insn 374:
  Adding insn 51 to worklist
  Adding insn 68 to worklist
  Adding insn 141 to worklist
  Adding insn 202 to worklist
  Adding insn 135 to worklist
Processing use of (reg 213) in insn 374:
  Adding insn 254 to worklist
Processing use of (reg 249) in insn 254:
  Adding insn 251 to worklist
Processing use of (reg 250 [+4 ]) in insn 254:
  Adding insn 252 to worklist
Processing use of (subreg (reg 133 [ significand.542 ]) 4) in insn 252:
  Adding insn 248 to worklist
Processing use of (reg 142 [ incr ]) in insn 248:
  Adding insn 155 to worklist
  Adding insn 160 to worklist
  Adding insn 181 to worklist
  Adding insn 186 to worklist
  Adding insn 207 to worklist
Processing use of (reg 143 [ significand ]) in insn 248:
  Adding insn 38 to worklist
  Adding insn 357 to worklist
  Adding insn 123 to worklist
  Adding insn 206 to worklist
  Adding insn 112 to worklist
Processing use of (reg 180 [+4 ]) in insn 112:
  Adding insn 369 to worklist
  Adding insn 109 to worklist
Processing use of (reg 254 [ D.5449 ]) in insn 112:
  Adding insn 362 to worklist
Processing use of (reg 246 [+4 ]) in insn 362:
  Adding insn 359 to worklist
Processing use of (reg 254 [ D.5449 ]) in insn 362:
  Adding insn 361 to worklist
Processing use of (reg 245) in insn 361:
  Adding insn 358 to worklist
Processing use of (reg 254 [ D.5449 ]) in insn 361:
Processing use of (reg 0 r0) in insn 358:
  Adding insn 94 to worklist
Processing use of (reg 13 sp) in insn 94:
Processing use of (reg 0 r0) in insn 94:
  Adding insn 92 to worklist
Processing use of (reg 1 r1) in insn 94:
Processing use of (reg 2 r2) in insn 94:
  Adding insn 93 to worklist
Processing use of (reg 147 [ D.4126 ]) in insn 93:
  Adding insn 84 to worklist
Processing use of (reg 141 [ exponent ]) in insn 84:
Processing use of (reg 143 [ significand ]) in insn 92:
Processing use of (reg 1 r1) in insn 359:
Processing use of (reg 255 [+4 ]) in insn 369:
  Adding insn 367 to worklist
  Adding insn 368 to worklist
Processing use of (reg 248 [+4 ]) in insn 368:
  Adding insn 365 to worklist
Processing use of (reg 255 [+4 ]) in insn 368:
Processing use of (reg 1 r1) in insn 365:
  Adding insn 100 to worklist
Processing use of (reg 13 sp) in insn 100:
Processing use of (reg 0 r0) in insn 100:
  Adding insn 98 to worklist
Processing use of (reg 1 r1) in insn 100:
Processing use of (reg 2 r2) in insn 100:
  Adding insn 99 to worklist
Processing use of (reg 178) in insn 99:
  Adding insn 97 to worklist
Processing use of (reg 147 [ D.4126 ]) in insn 97:
Processing use of (reg 143 [ significand ]) in insn 98:
Processing use of (reg 247) in insn 367:
  Adding insn 364 to worklist
Processing use of (reg 255 [+4 ]) in insn 367:
Processing use of (reg 0 r0) in insn 364:
Processing use of (reg 144 [ D.4151 ]) in insn 206:
  Adding insn 205 to worklist
Processing use of (reg 145 [ D.4150 ]) in insn 206:
  Adding insn 203 to worklist
Processing use of (reg 143 [ significand ]) in insn 203:
Processing use of (reg 143 [ significand ]) in insn 205:
Processing use of (reg 198) in insn 205:
  Adding insn 204 to worklist
Processing use of (reg 253 [ significand ]) in insn 357:
  Adding insn 355 to worklist
  Adding insn 356 to worklist
Processing use of (reg 244 [+4 ]) in insn 356:
  Adding insn 353 to worklist
Processing use of (reg 253 [ significand ]) in insn 356:
Processing use of (reg 1 r1) in insn 353:
  Adding insn 71 to worklist
Processing use of (reg 13 sp) in insn 71:
Processing use of (reg 0 r0) in insn 71:
  Adding insn 69 to worklist
Processing use of (reg 1 r1) in insn 71:
Processing use of (reg 2 r2) in insn 71:
  Adding insn 70 to worklist
Processing use of (reg 140 [ shift ]) in insn 70:
  Adding insn 56 to worklist
  Adding insn 62 to worklist
Processing use of (reg 175) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 136 [ ret ]) in insn 61:
  Adding insn 60 to worklist
Processing use of (subreg (reg 143 [ significand ]) 0) in insn 60:
Processing use of (reg 174) in insn 56:
  Adding insn 55 to worklist
Processing use of (reg 137 [ ret ]) in insn 55:
  Adding insn 54 to worklist
Processing use of (reg 241) in insn 54:
  Adding insn 52 to worklist
Processing use of (subreg (reg 143 [ significand ]) 4) in insn 52:
Processing use of (reg 143 [ significand ]) in insn 69:
Processing use of (reg 243) in insn 355:
  Adding insn 352 to worklist
Processing use of (reg 253 [ significand ]) in insn 355:
Processing use of (reg 0 r0) in insn 352:
Processing use of (reg 151 [ vd ]) in insn 38:
Processing use of (reg 142 [ incr ]) in insn 207:
Processing use of (reg 212) in insn 251:
  Adding insn 249 to worklist
Processing use of (reg 249) in insn 251:
  Adding insn 250 to worklist
Processing use of (subreg (reg 133 [ significand.542 ]) 0) in insn 250:
Processing use of (subreg (reg 133 [ significand.542 ]) 4) in insn 249:
Processing use of (reg 139 [ underflow ]) in insn 135:
  Adding insn 134 to worklist
Processing use of (reg 185) in insn 134:
  Adding insn 130 to worklist
Processing use of (subreg (reg 183) 4) in insn 130:
  Adding insn 128 to worklist
Processing use of (reg 185) in insn 130:
  Adding insn 129 to worklist
Processing use of (subreg (reg 183) 0) in insn 129:
Processing use of (reg 143 [ significand ]) in insn 128:
Processing use of (reg 184) in insn 128:
  Adding insn 127 to worklist
Processing use of (reg 141 [ exponent ]) in insn 202:
Processing use of (reg 140 [ shift ]) in insn 68:
Processing use of (reg 141 [ exponent ]) in insn 68:
Processing use of (subreg (reg 148 [ D.4105 ]) 0) in insn 51:
  Adding insn 10 to worklist
Processing use of (reg 151 [ vd ]) in insn 10:
Processing use of (reg 213) in insn 373:
Processing use of (reg 151 [ vd ]) in insn 294:
Processing use of (reg 222) in insn 294:
  Adding insn 293 to worklist
Processing use of (reg 133 [ significand.542 ]) in insn 293:
Processing use of (reg 24 cc) in insn 287:
  Adding insn 286 to worklist
Processing use of (reg 139 [ underflow ]) in insn 286:
  Adding insn 79 to worklist
  Adding insn 140 to worklist
Processing use of (reg 24 cc) in insn 284:
  Adding insn 283 to worklist
Processing use of (reg 221) in insn 283:
  Adding insn 282 to worklist
Processing use of (reg 220) in insn 282:
  Adding insn 281 to worklist
Processing use of (subreg (reg 219) 0) in insn 281:
  Adding insn 280 to worklist
Processing use of (reg 215) in insn 280:
  Adding insn 262 to worklist
Processing use of (subreg (reg 216) 0) in insn 280:
  Adding insn 265 to worklist
  Adding insn 278 to worklist
Processing use of (reg 24 cc) in insn 262:
  Adding insn 261 to worklist
Processing use of (reg 141 [ exponent ]) in insn 261:
Processing use of (reg 24 cc) in insn 271:
  Adding insn 270 to worklist
Processing use of (subreg (reg 133 [ significand.542 ]) 0) in insn 270:
Processing use of (reg 24 cc) in insn 269:
  Adding insn 266 to worklist
Processing use of (subreg (reg 133 [ significand.542 ]) 4) in insn 266:
Processing use of (reg 24 cc) in insn 267:
Processing use of (reg 151 [ vd ]) in insn 241:
Processing use of (subreg (reg 208) 0) in insn 241:
  Adding insn 239 to worklist
Processing use of (reg 151 [ vd ]) in insn 243:
Processing use of (reg 209) in insn 243:
  Adding insn 242 to worklist
Processing use of (reg 151 [ vd ]) in insn 232:
Processing use of (subreg (reg 202) 0) in insn 232:
  Adding insn 220 to worklist
Processing use of (reg 151 [ vd ]) in insn 234:
Processing use of (reg 206) in insn 234:
  Adding insn 233 to worklist
Processing use of (reg 24 cc) in insn 228:
  Adding insn 227 to worklist
Processing use of (reg 203 [ incr ]) in insn 227:
  Adding insn 226 to worklist
Processing use of (subreg (reg 142 [ incr ]) 4) in insn 226:
Processing use of (reg 203 [ incr ]) in insn 226:
  Adding insn 225 to worklist
Processing use of (subreg (reg 142 [ incr ]) 0) in insn 225:
Processing use of (reg 24 cc) in insn 222:
  Adding insn 221 to worklist
Processing use of (reg 141 [ exponent ]) in insn 221:
Processing use of (reg 202) in insn 221:
Processing use of (reg 24 cc) in insn 215:
  Adding insn 214 to worklist
Processing use of (reg 201) in insn 214:
  Adding insn 213 to worklist
Processing use of (subreg (reg 199) 4) in insn 213:
  Adding insn 211 to worklist
Processing use of (reg 201) in insn 213:
  Adding insn 212 to worklist
Processing use of (subreg (reg 199) 0) in insn 212:
Processing use of (reg 143 [ significand ]) in insn 211:
Processing use of (reg 200) in insn 211:
  Adding insn 210 to worklist
Processing use of (reg 24 cc) in insn 195:
  Adding insn 194 to worklist
Processing use of (subreg (reg 143 [ significand ]) 0) in insn 194:
Processing use of (subreg (reg 197) 0) in insn 194:
  Adding insn 189 to worklist
Processing use of (reg 142 [ incr ]) in insn 189:
Processing use of (reg 143 [ significand ]) in insn 189:
Processing use of (reg 24 cc) in insn 193:
  Adding insn 190 to worklist
Processing use of (subreg (reg 143 [ significand ]) 4) in insn 190:
Processing use of (subreg (reg 197) 4) in insn 190:
Processing use of (reg 24 cc) in insn 191:
Processing use of (reg 24 cc) in insn 179:
  Adding insn 178 to worklist
Processing use of (reg 196) in insn 178:
  Adding insn 177 to worklist
Processing use of (reg 195) in insn 177:
  Adding insn 176 to worklist
Processing use of (subreg (reg 194) 0) in insn 176:
  Adding insn 175 to worklist
Processing use of (reg 190) in insn 175:
  Adding insn 169 to worklist
Processing use of (reg 193) in insn 175:
  Adding insn 173 to worklist
Processing use of (reg 24 cc) in insn 173:
  Adding insn 172 to worklist
Processing use of (reg 192 [ <variable>.sign ]) in insn 172:
  Adding insn 171 to worklist
Processing use of (reg 151 [ vd ]) in insn 171:
Processing use of (reg 24 cc) in insn 169:
  Adding insn 168 to worklist
Processing use of (reg 138 [ rmode ]) in insn 168:
  Adding insn 144 to worklist
Processing use of (reg 152 [ fpscr ]) in insn 144:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 24 cc) in insn 166:
  Adding insn 165 to worklist
Processing use of (reg 138 [ rmode ]) in insn 165:
Processing use of (reg 24 cc) in insn 153:
  Adding insn 152 to worklist
Processing use of (reg 188) in insn 152:
  Adding insn 151 to worklist
Processing use of (subreg (reg 186) 4) in insn 151:
  Adding insn 149 to worklist
Processing use of (reg 188) in insn 151:
  Adding insn 150 to worklist
Processing use of (subreg (reg 186) 0) in insn 150:
Processing use of (reg 143 [ significand ]) in insn 149:
Processing use of (reg 187) in insn 149:
  Adding insn 148 to worklist
Processing use of (reg 24 cc) in insn 146:
  Adding insn 145 to worklist
Processing use of (reg 138 [ rmode ]) in insn 145:
Processing use of (reg 24 cc) in insn 132:
  Adding insn 131 to worklist
Processing use of (reg 185) in insn 131:
Processing use of (reg 24 cc) in insn 122:
  Adding insn 121 to worklist
Processing use of (reg 182) in insn 121:
  Adding insn 120 to worklist
Processing use of (reg 0 r0) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 13 sp) in insn 119:
Processing use of (reg 0 r0) in insn 119:
  Adding insn 117 to worklist
Processing use of (reg 1 r1) in insn 119:
Processing use of (reg 2 r2) in insn 119:
  Adding insn 118 to worklist
Processing use of (reg 3 r3) in insn 119:
Processing use of (reg 143 [ significand ]) in insn 117:
Processing use of (reg 24 cc) in insn 108:
  Adding insn 107 to worklist
Processing use of (reg 181) in insn 107:
  Adding insn 106 to worklist
Processing use of (reg 0 r0) in insn 106:
  Adding insn 105 to worklist
Processing use of (reg 13 sp) in insn 105:
Processing use of (reg 0 r0) in insn 105:
  Adding insn 103 to worklist
Processing use of (reg 1 r1) in insn 105:
Processing use of (reg 2 r2) in insn 105:
  Adding insn 104 to worklist
Processing use of (reg 3 r3) in insn 105:
Processing use of (reg 180 [+4 ]) in insn 103:
Processing use of (reg 24 cc) in insn 90:
  Adding insn 89 to worklist
Processing use of (reg 147 [ D.4126 ]) in insn 89:
Processing use of (reg 24 cc) in insn 87:
  Adding insn 86 to worklist
Processing use of (reg 147 [ D.4126 ]) in insn 86:
Processing use of (reg 24 cc) in insn 77:
  Adding insn 76 to worklist
Processing use of (reg 141 [ exponent ]) in insn 76:
Processing use of (reg 24 cc) in insn 66:
  Adding insn 65 to worklist
Processing use of (reg 140 [ shift ]) in insn 65:
Processing use of (reg 24 cc) in insn 58:
  Adding insn 57 to worklist
Processing use of (reg 140 [ shift ]) in insn 57:
Processing use of (reg 151 [ vd ]) in insn 46:
Processing use of (subreg (reg 169 [ significand ]) 0) in insn 46:
  Adding insn 40 to worklist
Processing use of (subreg (reg 143 [ significand ]) 4) in insn 40:
Processing use of (reg 169 [ significand ]) in insn 40:
  Adding insn 39 to worklist
Processing use of (subreg (reg 143 [ significand ]) 0) in insn 39:
Processing use of (reg 24 cc) in insn 42:
  Adding insn 41 to worklist
Processing use of (reg 169 [ significand ]) in insn 41:
Processing use of (reg 24 cc) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 168) in insn 34:
  Adding insn 33 to worklist
Processing use of (reg 167) in insn 33:
  Adding insn 32 to worklist
Processing use of (subreg (reg 166) 0) in insn 32:
  Adding insn 31 to worklist
Processing use of (reg 160) in insn 31:
  Adding insn 19 to worklist
Processing use of (subreg (reg 161) 0) in insn 31:
  Adding insn 22 to worklist
  Adding insn 29 to worklist
Processing use of (reg 24 cc) in insn 19:
  Adding insn 18 to worklist
Processing use of (reg 153 [ exceptions ]) in insn 18:
Processing use of (reg 24 cc) in insn 27:
  Adding insn 26 to worklist
Processing use of (reg 163 [ <variable>.significand ]) in insn 26:
  Adding insn 25 to worklist
Processing use of (reg 163 [ <variable>.significand ]) in insn 25:
  Adding insn 23 to worklist
Processing use of (reg 164 [ <variable>.significand+4 ]) in insn 25:
  Adding insn 24 to worklist
Processing use of (reg 151 [ vd ]) in insn 24:
Processing use of (reg 151 [ vd ]) in insn 23:
Processing use of (reg 24 cc) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 157 [ D.4105 ]) in insn 15:
  Adding insn 13 to worklist
Processing use of (reg 158) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 155) in insn 14:
  Adding insn 12 to worklist
Processing use of (subreg (reg 156) 0) in insn 12:
  Adding insn 11 to worklist
Processing use of (subreg (reg 148 [ D.4105 ]) 0) in insn 13:


vfp_double_normaliseround

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={14d,14u} r1={13d,10u} r2={13d,7u} r3={9d,3u} r11={1d,50u} r12={7d} r13={1d,56u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={43d,32u} r25={1d,50u} r26={1d,49u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,6u} r136={1d,1u} r137={1d,1u} r138={1d,3u} r139={3d,2u} r140={2d,4u} r141={6d,8u,1d} r142={5d,5u} r143={5d,17u,4d} r144={1d,1u} r145={1d,1u} r147={1d,4u} r148={1d,2u} r150={1d,1u} r151={1d,16u} r152={1d,1u} r153={4d,5u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r160={1d,1u} r161={2d,1u} r163={2d,2u} r164={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={2d,3u} r174={1d,1u} r175={1d,1u} r178={1d,1u} r180={2d,2u} r181={1d,1u} r182={1d,1u} r183={1d,2u} r184={1d,1u} r185={2d,3u} r186={1d,2u} r187={1d,1u} r188={2d,2u} r190={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,2u} r198={1d,1u} r199={1d,2u} r200={1d,1u} r201={2d,2u} r202={1d,2u} r203={2d,2u} r206={1d,1u} r208={1d,1u} r209={1d,1u} r212={1d,1u} r213={1d,2u} r215={1d,1u} r216={2d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r224={1d,1u} r226={3d,4u} r227={1d,1u} r228={1d,1u} r230={3d,3u} r231={1d,1u} r234={4d,5u} r235={1d,1u} r236={1d,2u} r237={1d,1u} r239={1d,1u} r241={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={2d,2u} r250={1d,1u} r253={3d,3u} r254={3d,3u} r255={3d,3u} 
;;    total ref usage 1358{900d,453u,5e} in 223{217 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769
0[0,14] 1[14,13] 2[27,13] 3[40,9] 11[49,1] 12[50,7] 13[57,1] 14[58,7] 15[65,6] 16[71,6] 17[77,6] 18[83,6] 19[89,6] 20[95,6] 21[101,6] 22[107,6] 23[113,6] 24[119,43] 25[162,1] 26[163,1] 27[164,6] 28[170,6] 29[176,6] 30[182,6] 31[188,6] 32[194,6] 33[200,6] 34[206,6] 35[212,6] 36[218,6] 37[224,6] 38[230,6] 39[236,6] 40[242,6] 41[248,6] 42[254,6] 43[260,6] 44[266,6] 45[272,6] 46[278,6] 47[284,6] 48[290,6] 49[296,6] 50[302,6] 51[308,6] 52[314,6] 53[320,6] 54[326,6] 55[332,6] 56[338,6] 57[344,6] 58[350,6] 59[356,6] 60[362,6] 61[368,6] 62[374,6] 63[380,6] 64[386,6] 65[392,6] 66[398,6] 67[404,6] 68[410,6] 69[416,6] 70[422,6] 71[428,6] 72[434,6] 73[440,6] 74[446,6] 75[452,6] 76[458,6] 77[464,6] 78[470,6] 79[476,6] 80[482,6] 81[488,6] 82[494,6] 83[500,6] 84[506,6] 85[512,6] 86[518,6] 87[524,6] 88[530,6] 89[536,6] 90[542,6] 91[548,6] 92[554,6] 93[560,6] 94[566,6] 95[572,6] 96[578,6] 97[584,6] 98[590,6] 99[596,6] 100[602,6] 101[608,6] 102[614,6] 103[620,6] 104[626,6] 105[632,6] 106[638,6] 107[644,6] 108[650,6] 109[656,6] 110[662,6] 111[668,6] 112[674,6] 113[680,6] 114[686,6] 115[692,6] 116[698,6] 117[704,6] 118[710,6] 119[716,6] 120[722,6] 121[728,6] 122[734,6] 123[740,6] 124[746,6] 125[752,6] 126[758,6] 127[764,6] 133[770,1] 136[771,1] 137[772,1] 138[773,1] 139[774,3] 140[777,2] 141[779,6] 142[785,5] 143[790,5] 144[795,1] 145[796,1] 147[797,1] 148[798,1] 150[799,1] 151[800,1] 152[801,1] 153[802,4] 155[806,1] 156[807,1] 157[808,1] 158[809,1] 160[810,1] 161[811,2] 163[813,2] 164[815,1] 166[816,1] 167[817,1] 168[818,1] 169[819,2] 174[821,1] 175[822,1] 178[823,1] 180[824,2] 181[826,1] 182[827,1] 183[828,1] 184[829,1] 185[830,2] 186[832,1] 187[833,1] 188[834,2] 190[836,1] 192[837,1] 193[838,1] 194[839,1] 195[840,1] 196[841,1] 197[842,1] 198[843,1] 199[844,1] 200[845,1] 201[846,2] 202[848,1] 203[849,2] 206[851,1] 208[852,1] 209[853,1] 212[854,1] 213[855,1] 215[856,1] 216[857,2] 219[859,1] 220[860,1] 221[861,1] 222[862,1] 224[863,1] 226[864,3] 227[867,1] 228[868,1] 230[869,3] 231[872,1] 234[873,4] 235[877,1] 236[878,1] 237[879,1] 239[880,1] 241[881,1] 243[882,1] 244[883,1] 245[884,1] 246[885,1] 247[886,1] 248[887,1] 249[888,2] 250[890,1] 253[891,3] 254[894,3] 255[897,3] 
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 148 150 151 152 153 155 156 157 158
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 148 150 151 152 153 155 156 157 158
;; live  kill	
;; rd  in  	(10)
13, 26, 39, 48, 49, 56, 57, 64, 162, 163
;; rd  gen 	(10)
161, 798, 799, 800, 801, 805, 806, 807, 808, 809
;; rd  kill	(12)
798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 8 3 2 arch/arm/vfp/vfpdouble.c:71 (set (reg/v:SI 150 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:71 (set (reg/v/f:SI 151 [ vd ])
        (reg:SI 1 r1 [ vd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ vd ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:71 (set (reg/v:SI 152 [ fpscr ])
        (reg:SI 2 r2 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ fpscr ])
        (nil)))

(insn 5 4 7 2 arch/arm/vfp/vfpdouble.c:71 (set (reg/v:SI 153 [ exceptions ])
        (reg:SI 3 r3 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ exceptions ])
        (nil)))

(note 7 5 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 7 11 2 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 148 [ D.4105 ])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 151 [ vd ]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 156)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfpdouble.c:81 (set (reg:HI 155)
        (subreg:HI (reg:SI 156) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 156)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 13 12 14 2 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 157 [ D.4105 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 148 [ D.4105 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 14 13 15 2 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 158)
        (sign_extend:SI (reg:HI 155))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 155)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 15 14 16 2 arch/arm/vfp/vfpdouble.c:81 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 157 [ D.4105 ])
            (reg:SI 158))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 158)
        (expr_list:REG_DEAD (reg:SI 157 [ D.4105 ])
            (nil))))

(jump_insn 16 15 17 2 arch/arm/vfp/vfpdouble.c:81 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; rd  out 	(20)
13, 26, 39, 48, 49, 56, 57, 64, 161, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  6 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(11){ }u16(13){ }u17(25){ }u18(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 153
;; lr  def 	 24 [cc] 160 161 163 164
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; live  gen 	 24 [cc] 160 161 163 164
;; live  kill	
;; rd  in  	(20)
13, 26, 39, 48, 49, 56, 57, 64, 161, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809
;; rd  gen 	(5)
159, 810, 812, 813, 815
;; rd  kill	(6)
810, 811, 812, 813, 814, 815

;; Pred edge  2 [28.0%]  (fallthru)
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 3 arch/arm/vfp/vfpdouble.c:81 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 153 [ exceptions ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 19 18 22 3 arch/arm/vfp/vfpdouble.c:81 discrim 1 (set (reg:SI 160)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 22 19 23 3 arch/arm/vfp/vfpdouble.c:81 discrim 1 (set (reg:QI 161)
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 23 22 24 3 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 163 [ <variable>.significand ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 151 [ vd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 24 23 25 3 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 164 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 151 [ vd ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 25 24 26 3 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 163 [ <variable>.significand ])
        (ior:SI (reg:SI 163 [ <variable>.significand ])
            (reg:SI 164 [ <variable>.significand+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 164 [ <variable>.significand+4 ])
        (nil)))

(insn 26 25 27 3 arch/arm/vfp/vfpdouble.c:81 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 163 [ <variable>.significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 163 [ <variable>.significand ])
        (nil)))

(jump_insn 27 26 332 3 arch/arm/vfp/vfpdouble.c:81 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; rd  out 	(24)
13, 26, 39, 48, 49, 56, 57, 64, 159, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 815


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u27(11){ }u28(13){ }u29(25){ }u30(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 161
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160
;; live  gen 	 161
;; live  kill	
;; rd  in  	(24)
13, 26, 39, 48, 49, 56, 57, 64, 159, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 812, 813, 815
;; rd  gen 	(1)
811
;; rd  kill	(2)
811, 812

;; Pred edge  3 [50.0%]  (fallthru)
(note 332 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 29 332 30 4 arch/arm/vfp/vfpdouble.c:81 (set (reg:QI 161)
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; rd  out 	(24)
13, 26, 39, 48, 49, 56, 57, 64, 159, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 813, 815


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u31(11){ }u32(13){ }u33(25){ }u34(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161
;; lr  def 	 24 [cc] 166 167 168
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153 160 161
;; live  gen 	 24 [cc] 166 167 168
;; live  kill	
;; rd  in  	(25)
13, 26, 39, 48, 49, 56, 57, 64, 159, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815
;; rd  gen 	(4)
158, 816, 817, 818
;; rd  kill	(3)
816, 817, 818

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 30 29 333 5 112 "" [1 uses])

(note 333 30 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 31 333 32 5 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 166)
        (ior:SI (reg:SI 160)
            (subreg:SI (reg:QI 161) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:QI 161)
        (expr_list:REG_DEAD (reg:SI 160)
            (nil))))

(insn 32 31 33 5 arch/arm/vfp/vfpdouble.c:81 (set (reg:QI 167)
        (subreg:QI (reg:SI 166) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 166)
        (nil)))

(insn 33 32 34 5 arch/arm/vfp/vfpdouble.c:81 (set (reg:SI 168)
        (zero_extend:SI (reg:QI 167))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 167)
        (nil)))

(insn 34 33 35 5 arch/arm/vfp/vfpdouble.c:81 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 168)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(jump_insn 35 34 36 5 arch/arm/vfp/vfpdouble.c:81 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 295)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 50 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; rd  out 	(28)
13, 26, 39, 48, 49, 56, 57, 64, 158, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818


;; Succ edge  50 [50.0%] 
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 2 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u41(11){ }u42(13){ }u43(25){ }u44(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 143 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 150 151 152 153
;; live  gen 	 24 [cc] 143 169
;; live  kill	
;; rd  in  	(29)
13, 26, 39, 48, 49, 56, 57, 64, 158, 161, 162, 163, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818
;; rd  gen 	(3)
157, 794, 819
;; rd  kill	(7)
790, 791, 792, 793, 794, 819, 820

;; Pred edge  2 [72.0%] 
;; Pred edge  5 [50.0%]  (fallthru)
(code_label 36 35 37 6 110 "" [1 uses])

(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 6 arch/arm/vfp/vfpdouble.c:87 (set (reg/v:DI 143 [ significand ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 151 [ vd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 39 38 40 6 arch/arm/vfp/vfpdouble.c:87 (set (reg:SI 169 [ significand ])
        (subreg:SI (reg/v:DI 143 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 40 39 41 6 arch/arm/vfp/vfpdouble.c:87 (set (reg:SI 169 [ significand ])
        (ior:SI (reg:SI 169 [ significand ])
            (subreg:SI (reg/v:DI 143 [ significand ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 41 40 42 6 arch/arm/vfp/vfpdouble.c:87 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 169 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 42 41 43 6 arch/arm/vfp/vfpdouble.c:87 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148 150 151 152 153 169
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148 150 151 152 153 169
;; rd  out 	(30)
13, 26, 39, 48, 49, 56, 57, 64, 157, 162, 163, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u51(11){ }u52(13){ }u53(25){ }u54(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 169
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 169
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 169
;; live  gen 	
;; live  kill	
;; rd  in  	(30)
13, 26, 39, 48, 49, 56, 57, 64, 157, 162, 163, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  6 [39.0%]  (fallthru)
(note 43 42 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 43 378 7 arch/arm/vfp/vfpdouble.c:88 (set (mem/s/j:HI (reg/v/f:SI 151 [ vd ]) [0 <variable>.exponent+0 S2 A64])
        (subreg:HI (reg:SI 169 [ significand ]) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 169 [ significand ])
        (nil)))

(jump_insn 378 46 379 7 arch/arm/vfp/vfpdouble.c:89 (set (pc)
        (label_ref 295)) -1 (nil))
;; End of basic block 7 -> ( 50)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; rd  out 	(30)
13, 26, 39, 48, 49, 56, 57, 64, 157, 162, 163, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819


;; Succ edge  50 [100.0%] 

(barrier 379 378 49)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u57(11){ }u58(13){ }u59(25){ }u60(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148
;; lr  def 	 24 [cc] 137 140 141 174 241
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 148 150 151 152 153
;; live  gen 	 24 [cc] 137 140 141 174 241
;; live  kill	
;; rd  in  	(30)
13, 26, 39, 48, 49, 56, 57, 64, 157, 162, 163, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819
;; rd  gen 	(6)
156, 772, 778, 784, 821, 881
;; rd  kill	(11)
772, 777, 778, 779, 780, 781, 782, 783, 784, 821, 881

;; Pred edge  6 [61.0%] 
(code_label 49 379 50 8 113 "" [1 uses])

(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 8 arch/arm/vfp/vfpdouble.c:92 (set (reg/v:SI 141 [ exponent ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 148 [ D.4105 ]) 0))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 148 [ D.4105 ])
        (nil)))

(insn 52 51 54 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg:SI 241)
        (subreg:SI (reg/v:DI 143 [ significand ]) 4)) 167 {*arm_movsi_insn} (nil))

(insn 54 52 55 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 137 [ ret ])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 241)
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1139895)) -1 (expr_list:REG_DEAD (reg:SI 241)
        (nil)))

(insn 55 54 56 8 arch/arm/vfp/vfpdouble.c:95 (set (reg:SI 174)
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 137 [ ret ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ ret ])
        (nil)))

(insn 56 55 57 8 arch/arm/vfp/vfpdouble.c:95 (set (reg/v:SI 140 [ shift ])
        (minus:SI (const_int 32 [0x20])
            (reg:SI 174))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 174)
        (nil)))

(insn 57 56 58 8 arch/arm/vfp/vfpdouble.c:96 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ shift ])
            (const_int 32 [0x20]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 58 57 59 8 arch/arm/vfp/vfpdouble.c:96 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; rd  out 	(35)
13, 26, 39, 48, 49, 56, 57, 64, 156, 162, 163, 772, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 881


;; Succ edge  9 [28.0%]  (fallthru)
;; Succ edge  10 [72.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u68(11){ }u69(13){ }u70(25){ }u71(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 136 140 175
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  gen 	 136 140 175
;; live  kill	
;; rd  in  	(35)
13, 26, 39, 48, 49, 56, 57, 64, 156, 162, 163, 772, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 881
;; rd  gen 	(3)
771, 777, 822
;; rd  kill	(4)
771, 777, 778, 822

;; Pred edge  8 [28.0%]  (fallthru)
(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 136 [ ret ])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (subreg:SI (reg/v:DI 143 [ significand ]) 0)
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1139895)) -1 (nil))

(insn 61 60 62 9 arch/arm/vfp/vfpdouble.c:97 (set (reg:SI 175)
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 136 [ ret ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/v:SI 136 [ ret ])
        (nil)))

(insn 62 61 63 9 arch/arm/vfp/vfpdouble.c:97 (set (reg/v:SI 140 [ shift ])
        (minus:SI (const_int 64 [0x40])
            (reg:SI 175))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 175)
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; rd  out 	(37)
13, 26, 39, 48, 49, 56, 57, 64, 156, 162, 163, 771, 772, 777, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u75(11){ }u76(13){ }u77(25){ }u78(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
13, 26, 39, 48, 49, 56, 57, 64, 156, 162, 163, 771, 772, 777, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881
;; rd  gen 	(1)
155
;; rd  kill	(0)


;; Pred edge  8 [72.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 63 62 64 10 114 "" [1 uses])

(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 65 64 66 10 arch/arm/vfp/vfpdouble.c:98 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ shift ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 66 65 67 10 arch/arm/vfp/vfpdouble.c:98 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 74)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; rd  out 	(38)
13, 26, 39, 48, 49, 56, 57, 64, 155, 162, 163, 771, 772, 777, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881


;; Succ edge  11 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u81(11){ }u82(13){ }u83(25){ }u84(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 141 143 243 244 253
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141 143 150 151 152 153
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 141 143 243 244 253
;; live  kill	 14 [lr] 253
;; rd  in  	(38)
13, 26, 39, 48, 49, 56, 57, 64, 155, 162, 163, 771, 772, 777, 778, 784, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881
;; rd  gen 	(7)
11, 24, 783, 793, 882, 883, 891
;; rd  kill	(47)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 58, 59, 60, 61, 62, 63, 64, 779, 780, 781, 782, 783, 784, 790, 791, 792, 793, 794, 882, 883

;; Pred edge  10 [50.0%]  (fallthru)
(note 67 66 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 68 67 69 11 arch/arm/vfp/vfpdouble.c:99 (set (reg/v:SI 141 [ exponent ])
        (minus:SI (reg/v:SI 141 [ exponent ])
            (reg/v:SI 140 [ shift ]))) 28 {*arm_subsi3_insn} (nil))

(insn 69 68 70 11 arch/arm/vfp/vfpdouble.c:100 (set (reg:DI 0 r0)
        (reg/v:DI 143 [ significand ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v:DI 143 [ significand ])
        (nil)))

(insn 70 69 71 11 arch/arm/vfp/vfpdouble.c:100 (set (reg:SI 2 r2)
        (reg/v:SI 140 [ shift ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ shift ])
        (nil)))

(call_insn/u 71 70 352 11 arch/arm/vfp/vfpdouble.c:100 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 352 71 353 11 arch/arm/vfp/vfpdouble.c:100 (set (reg:SI 243)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 353 352 354 11 arch/arm/vfp/vfpdouble.c:100 (set (reg:SI 244 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 354 353 355 11 arch/arm/vfp/vfpdouble.c:100 (clobber (reg:DI 253 [ significand ])) -1 (nil))

(insn 355 354 356 11 arch/arm/vfp/vfpdouble.c:100 (set (subreg:SI (reg:DI 253 [ significand ]) 0)
        (reg:SI 243)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 243)
        (nil)))

(insn 356 355 357 11 arch/arm/vfp/vfpdouble.c:100 (set (subreg:SI (reg:DI 253 [ significand ]) 4)
        (reg:SI 244 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 244 [+4 ])
        (nil)))

(insn 357 356 74 11 arch/arm/vfp/vfpdouble.c:100 (set (reg/v:DI 143 [ significand ])
        (reg:DI 253 [ significand ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 253 [ significand ])
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; rd  out 	(40)
11, 24, 39, 48, 49, 56, 57, 155, 162, 163, 771, 772, 777, 778, 783, 793, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u100(11){ }u101(13){ }u102(25){ }u103(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(45)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 155, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(1)
153
;; rd  kill	(0)


;; Pred edge  10 [50.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 74 357 75 12 115 "" [1 uses])

(note 75 74 76 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 76 75 77 12 arch/arm/vfp/vfpdouble.c:113 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ exponent ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 77 76 78 12 arch/arm/vfp/vfpdouble.c:113 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 12 -> ( 14 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; rd  out 	(45)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 153, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891


;; Succ edge  14 [50.0%] 
;; Succ edge  13 [50.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u106(11){ }u107(13){ }u108(25){ }u109(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  gen 	 139
;; live  kill	
;; rd  in  	(45)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 153, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(1)
776
;; rd  kill	(3)
774, 775, 776

;; Pred edge  12 [50.0%]  (fallthru)
(note 78 77 79 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 79 78 380 13 arch/arm/vfp/vfpdouble.c:113 (set (reg/v:SI 139 [ underflow ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 380 79 381 13 (set (pc)
        (label_ref 142)) -1 (nil))
;; End of basic block 13 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; rd  out 	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 153, 162, 163, 771, 772, 776, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891


;; Succ edge  24 [100.0%] 

(barrier 381 380 82)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u110(11){ }u111(13){ }u112(25){ }u113(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 143 150 151 152 153
;; live  gen 	 24 [cc] 147
;; live  kill	
;; rd  in  	(45)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 153, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(2)
121, 797
;; rd  kill	(1)
797

;; Pred edge  12 [50.0%] 
(code_label 82 381 83 14 116 "" [1 uses])

(note 83 82 84 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 84 83 86 14 arch/arm/vfp/vfpdouble.c:114 (set (reg:SI 147 [ D.4126 ])
        (neg:SI (reg/v:SI 141 [ exponent ]))) 127 {*arm_negsi2} (expr_list:REG_DEAD (reg/v:SI 141 [ exponent ])
        (nil)))

(insn 86 84 87 14 arch/arm/vfp/vfp.h:25 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 147 [ D.4126 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 87 86 88 14 arch/arm/vfp/vfp.h:25 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 14 -> ( 15 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; rd  out 	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 121, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u117(11){ }u118(13){ }u119(25){ }u120(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 121, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(1)
120
;; rd  kill	(0)


;; Pred edge  14 [50.0%]  (fallthru)
(note 88 87 89 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 90 15 arch/arm/vfp/vfp.h:26 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 147 [ D.4126 ])
            (const_int 63 [0x3f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 90 89 91 15 arch/arm/vfp/vfp.h:26 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 115)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 15 -> ( 16 19)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; rd  out 	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 120, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891


;; Succ edge  16 [50.0%]  (fallthru)
;; Succ edge  19 [50.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u123(11){ }u124(13){ }u125(25){ }u126(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 178 180 181 245 246 247 248 254 255
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 147 150 151 152 153
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 178 180 181 245 246 247 248 254 255
;; live  kill	 14 [lr] 254 255
;; rd  in  	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 120, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(11)
6, 149, 823, 825, 826, 884, 885, 886, 887, 894, 897
;; rd  kill	(29)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 58, 59, 60, 61, 62, 63, 64, 823, 824, 825, 826, 884, 885, 886, 887

;; Pred edge  15 [50.0%]  (fallthru)
(note 91 90 92 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 92 91 93 16 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg/v:DI 143 [ significand ])) 163 {*arm_movdi} (nil))

(insn 93 92 94 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 2 r2)
        (reg:SI 147 [ D.4126 ])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 94 93 358 16 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 358 94 359 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 245)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 359 358 360 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 246 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 360 359 361 16 arch/arm/vfp/vfp.h:27 (clobber (reg:DI 254 [ D.5449 ])) -1 (nil))

(insn 361 360 362 16 arch/arm/vfp/vfp.h:27 (set (subreg:SI (reg:DI 254 [ D.5449 ]) 0)
        (reg:SI 245)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 245)
        (nil)))

(insn 362 361 97 16 arch/arm/vfp/vfp.h:27 (set (subreg:SI (reg:DI 254 [ D.5449 ]) 4)
        (reg:SI 246 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 246 [+4 ])
        (nil)))

(insn 97 362 98 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 178)
        (minus:SI (const_int 64 [0x40])
            (reg:SI 147 [ D.4126 ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 147 [ D.4126 ])
        (nil)))

(insn 98 97 99 16 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg/v:DI 143 [ significand ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v:DI 143 [ significand ])
        (nil)))

(insn 99 98 100 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 2 r2)
        (reg:SI 178)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 178)
        (nil)))

(call_insn/u 100 99 364 16 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 364 100 365 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 247)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 365 364 366 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 248 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 366 365 367 16 arch/arm/vfp/vfp.h:27 (clobber (reg:DI 255 [+4 ])) -1 (nil))

(insn 367 366 368 16 arch/arm/vfp/vfp.h:27 (set (subreg:SI (reg:DI 255 [+4 ]) 0)
        (reg:SI 247)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 247)
        (nil)))

(insn 368 367 369 16 arch/arm/vfp/vfp.h:27 (set (subreg:SI (reg:DI 255 [+4 ]) 4)
        (reg:SI 248 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 248 [+4 ])
        (nil)))

(insn 369 368 103 16 arch/arm/vfp/vfp.h:27 (set (reg:DI 180 [+4 ])
        (reg:DI 255 [+4 ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 255 [+4 ])
        (nil)))

(insn 103 369 104 16 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg:DI 180 [+4 ])) 163 {*arm_movdi} (nil))

(insn 104 103 105 16 arch/arm/vfp/vfp.h:27 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(call_insn/u 105 104 106 16 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_ulcmp") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 106 105 107 16 arch/arm/vfp/vfp.h:27 (set (reg:SI 181)
        (plus:SI (reg:SI 0 r0)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 107 106 108 16 arch/arm/vfp/vfp.h:27 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 181)
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 181)
        (nil)))

(jump_insn 108 107 334 16 arch/arm/vfp/vfp.h:27 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 16 -> ( 18 17)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; rd  out 	(53)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 825, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  18 [29.0%] 
;; Succ edge  17 [71.0%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u162(11){ }u163(13){ }u164(25){ }u165(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 254
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 254
;; live  gen 	 180
;; live  kill	
;; rd  in  	(53)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 825, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
824
;; rd  kill	(2)
824, 825

;; Pred edge  16 [71.0%]  (fallthru)
(note 334 108 109 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 109 334 110 17 arch/arm/vfp/vfp.h:27 (set (reg:DI 180 [+4 ])
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; rd  out 	(53)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u166(11){ }u167(13){ }u168(25){ }u169(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 254
;; lr  def 	 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153 180 254
;; live  gen 	 143
;; live  kill	
;; rd  in  	(54)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
790
;; rd  kill	(5)
790, 791, 792, 793, 794

;; Pred edge  16 [29.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
(code_label 110 109 335 18 120 "" [1 uses])

(note 335 110 112 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 112 335 382 18 arch/arm/vfp/vfp.h:27 (set (reg/v:DI 143 [ significand ])
        (ior:DI (reg:DI 180 [+4 ])
            (reg:DI 254 [ D.5449 ]))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 254 [ D.5449 ])
        (expr_list:REG_DEAD (reg:DI 180 [+4 ])
            (nil))))

(jump_insn 382 112 383 18 (set (pc)
        (label_ref 125)) -1 (nil))
;; End of basic block 18 -> ( 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; rd  out 	(53)
6, 24, 26, 39, 48, 49, 56, 57, 149, 162, 163, 771, 772, 777, 778, 783, 784, 790, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  21 [100.0%] 

(barrier 383 382 115)

;; Start of basic block ( 15) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u172(11){ }u173(13){ }u174(25){ }u175(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 182
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 182
;; live  kill	 14 [lr]
;; rd  in  	(46)
11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 120, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 881, 882, 883, 891
;; rd  gen 	(3)
4, 147, 827
;; rd  kill	(22)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 58, 59, 60, 61, 62, 63, 64, 827

;; Pred edge  15 [50.0%] 
(code_label 115 383 116 19 119 "" [1 uses])

(note 116 115 117 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 117 116 118 19 arch/arm/vfp/vfp.h:29 (set (reg:DI 0 r0)
        (reg/v:DI 143 [ significand ])) 163 {*arm_movdi} (nil))

(insn 118 117 119 19 arch/arm/vfp/vfp.h:29 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(call_insn/u 119 118 120 19 arch/arm/vfp/vfp.h:29 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_ulcmp") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 120 119 121 19 arch/arm/vfp/vfp.h:29 (set (reg:SI 182)
        (plus:SI (reg:SI 0 r0)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 121 120 122 19 arch/arm/vfp/vfp.h:29 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 182)
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 182)
        (nil)))

(jump_insn 122 121 336 19 arch/arm/vfp/vfp.h:29 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 19 -> ( 21 20)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; rd  out 	(45)
4, 24, 26, 39, 48, 49, 56, 57, 147, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 827, 881, 882, 883, 891


;; Succ edge  21 [29.0%] 
;; Succ edge  20 [71.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u185(11){ }u186(13){ }u187(25){ }u188(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 152 153
;; live  gen 	 143
;; live  kill	
;; rd  in  	(45)
4, 24, 26, 39, 48, 49, 56, 57, 147, 162, 163, 771, 772, 777, 778, 783, 784, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 827, 881, 882, 883, 891
;; rd  gen 	(1)
792
;; rd  kill	(5)
790, 791, 792, 793, 794

;; Pred edge  19 [71.0%]  (fallthru)
(note 336 122 123 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 123 336 125 20 arch/arm/vfp/vfp.h:29 (set (reg/v:DI 143 [ significand ])
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 20 -> ( 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; rd  out 	(44)
4, 24, 26, 39, 48, 49, 56, 57, 147, 162, 163, 771, 772, 777, 778, 783, 784, 792, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 827, 881, 882, 883, 891


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 14 19 20 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u189(11){ }u190(13){ }u191(25){ }u192(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 183 184 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  gen 	 24 [cc] 183 184 185
;; live  kill	
;; rd  in  	(63)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 121, 147, 149, 162, 163, 771, 772, 777, 778, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(4)
146, 828, 829, 830
;; rd  kill	(4)
828, 829, 830, 831

;; Pred edge  14 [50.0%] 
;; Pred edge  19 [29.0%] 
;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  18 [100.0%] 
(code_label 125 123 126 21 118 "" [3 uses])

(note 126 125 127 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 127 126 128 21 arch/arm/vfp/vfpdouble.c:121 (set (reg:DI 184)
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (nil))

(insn 128 127 129 21 arch/arm/vfp/vfpdouble.c:121 (set (reg:DI 183)
        (and:DI (reg/v:DI 143 [ significand ])
            (reg:DI 184))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 184)
        (expr_list:REG_EQUAL (and:DI (reg/v:DI 143 [ significand ])
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 129 128 130 21 arch/arm/vfp/vfpdouble.c:121 (set (reg:SI 185)
        (subreg:SI (reg:DI 183) 0)) 167 {*arm_movsi_insn} (nil))

(insn 130 129 131 21 arch/arm/vfp/vfpdouble.c:121 (set (reg:SI 185)
        (ior:SI (reg:SI 185)
            (subreg:SI (reg:DI 183) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 183)
        (nil)))

(insn 131 130 132 21 arch/arm/vfp/vfpdouble.c:121 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 185)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 132 131 133 21 arch/arm/vfp/vfpdouble.c:121 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 138)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153 185
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153 185
;; rd  out 	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 777, 778, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  22 [50.0%]  (fallthru)
;; Succ edge  23 [50.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u201(11){ }u202(13){ }u203(25){ }u204(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153 185
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; lr  def 	 139 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153 185
;; live  gen 	 139 141
;; live  kill	
;; rd  in  	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 777, 778, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
774, 779
;; rd  kill	(9)
774, 775, 776, 779, 780, 781, 782, 783, 784

;; Pred edge  21 [50.0%]  (fallthru)
(note 133 132 134 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 134 133 135 22 arch/arm/vfp/vfpdouble.c:122 (set (reg/v:SI 139 [ underflow ])
        (reg:SI 185)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 185)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 135 134 384 22 arch/arm/vfp/vfpdouble.c:115 (set (reg/v:SI 141 [ exponent ])
        (reg/v:SI 139 [ underflow ])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 384 135 385 22 (set (pc)
        (label_ref 142)) -1 (nil))
;; End of basic block 22 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; rd  out 	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 774, 777, 778, 779, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  24 [100.0%] 

(barrier 385 384 138)

;; Start of basic block ( 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u207(11){ }u208(13){ }u209(25){ }u210(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 150 151 152 153
;; live  gen 	 139 141
;; live  kill	
;; rd  in  	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 777, 778, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
775, 782
;; rd  kill	(9)
774, 775, 776, 779, 780, 781, 782, 783, 784

;; Pred edge  21 [50.0%] 
(code_label 138 385 139 23 122 "" [1 uses])

(note 139 138 140 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 140 139 141 23 arch/arm/vfp/vfpdouble.c:115 (set (reg/v:SI 139 [ underflow ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 141 140 142 23 arch/arm/vfp/vfpdouble.c:115 (set (reg/v:SI 141 [ exponent ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 23 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; rd  out 	(64)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 162, 163, 771, 772, 775, 777, 778, 782, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 13 23 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u211(11){ }u212(13){ }u213(25){ }u214(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 152 153
;; live  gen 	 24 [cc] 138
;; live  kill	
;; rd  in  	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 146, 153, 162, 163, 771, 772, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
145, 773
;; rd  kill	(1)
773

;; Pred edge  13 [100.0%] 
;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  22 [100.0%] 
(code_label 142 141 143 24 117 "" [2 uses])

(note 143 142 144 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 144 143 145 24 arch/arm/vfp/vfpdouble.c:129 (set (reg/v:SI 138 [ rmode ])
        (and:SI (reg/v:SI 152 [ fpscr ])
            (const_int 12582912 [0xc00000]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 152 [ fpscr ])
        (nil)))

(insn 145 144 146 24 arch/arm/vfp/vfpdouble.c:131 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ rmode ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 146 145 147 24 arch/arm/vfp/vfpdouble.c:131 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 163)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 24 -> ( 25 28)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; rd  out 	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 145, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  25 [50.0%]  (fallthru)
;; Succ edge  28 [50.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u218(11){ }u219(13){ }u220(25){ }u221(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 186 187 188
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 24 [cc] 186 187 188
;; live  kill	
;; rd  in  	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 145, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(4)
144, 832, 833, 834
;; rd  kill	(4)
832, 833, 834, 835

;; Pred edge  24 [50.0%]  (fallthru)
(note 147 146 148 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 148 147 149 25 arch/arm/vfp/vfpdouble.c:133 (set (reg:DI 187)
        (const_int 2048 [0x800])) 163 {*arm_movdi} (nil))

(insn 149 148 150 25 arch/arm/vfp/vfpdouble.c:133 (set (reg:DI 186)
        (and:DI (reg/v:DI 143 [ significand ])
            (reg:DI 187))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 187)
        (expr_list:REG_EQUAL (and:DI (reg/v:DI 143 [ significand ])
                (const_int 2048 [0x800]))
            (nil))))

(insn 150 149 151 25 arch/arm/vfp/vfpdouble.c:133 (set (reg:SI 188)
        (subreg:SI (reg:DI 186) 0)) 167 {*arm_movsi_insn} (nil))

(insn 151 150 152 25 arch/arm/vfp/vfpdouble.c:133 (set (reg:SI 188)
        (ior:SI (reg:SI 188)
            (subreg:SI (reg:DI 186) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 186)
        (nil)))

(insn 152 151 153 25 arch/arm/vfp/vfpdouble.c:133 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 188)
        (nil)))

(jump_insn 153 152 154 25 arch/arm/vfp/vfpdouble.c:133 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 25 -> ( 26 27)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; rd  out 	(73)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  26 [50.0%]  (fallthru)
;; Succ edge  27 [50.0%] 

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u230(11){ }u231(13){ }u232(25){ }u233(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 142
;; live  kill	
;; rd  in  	(73)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
789
;; rd  kill	(5)
785, 786, 787, 788, 789

;; Pred edge  25 [50.0%]  (fallthru)
(note 154 153 155 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 155 154 386 26 arch/arm/vfp/vfpdouble.c:134 (set (reg/v:DI 142 [ incr ])
        (const_int 1023 [0x3ff])) 163 {*arm_movdi} (nil))

(jump_insn 386 155 387 26 (set (pc)
        (label_ref 187)) -1 (nil))
;; End of basic block 26 -> ( 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(74)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  32 [100.0%] 

(barrier 387 386 158)

;; Start of basic block ( 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u234(11){ }u235(13){ }u236(25){ }u237(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 142
;; live  kill	
;; rd  in  	(73)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
788
;; rd  kill	(5)
785, 786, 787, 788, 789

;; Pred edge  25 [50.0%] 
(code_label 158 387 159 27 124 "" [1 uses])

(note 159 158 160 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 160 159 388 27 arch/arm/vfp/vfpdouble.c:132 (set (reg/v:DI 142 [ incr ])
        (const_int 1024 [0x400])) 163 {*arm_movdi} (nil))

(jump_insn 388 160 389 27 (set (pc)
        (label_ref 187)) -1 (nil))
;; End of basic block 27 -> ( 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(74)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 788, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  32 [100.0%] 

(barrier 389 388 163)

;; Start of basic block ( 24) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u238(11){ }u239(13){ }u240(25){ }u241(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 145, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
143
;; rd  kill	(0)


;; Pred edge  24 [50.0%] 
(code_label 163 389 164 28 123 "" [1 uses])

(note 164 163 165 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 165 164 166 28 arch/arm/vfp/vfpdouble.c:135 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ rmode ])
            (const_int 12582912 [0xc00000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 166 165 167 28 arch/arm/vfp/vfpdouble.c:135 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 184)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 28 -> ( 31 29)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; rd  out 	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 143, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  31 [28.0%] 
;; Succ edge  29 [72.0%]  (fallthru)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u244(11){ }u245(13){ }u246(25){ }u247(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 151
;; lr  def 	 24 [cc] 190 192 193 194 195 196
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 141 143 150 151 153
;; live  gen 	 24 [cc] 190 192 193 194 195 196
;; live  kill	
;; rd  in  	(70)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 143, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(7)
140, 836, 837, 838, 839, 840, 841
;; rd  kill	(6)
836, 837, 838, 839, 840, 841

;; Pred edge  28 [72.0%]  (fallthru)
(note 167 166 168 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 168 167 169 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ rmode ])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ rmode ])
        (nil)))

(insn 169 168 171 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:SI 190)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 171 169 172 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:SI 192 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 151 [ vd ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 172 171 173 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 192 [ <variable>.sign ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 192 [ <variable>.sign ])
        (nil)))

(insn 173 172 175 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:SI 193)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 175 173 176 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:SI 194)
        (xor:SI (reg:SI 190)
            (reg:SI 193))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 193)
        (expr_list:REG_DEAD (reg:SI 190)
            (nil))))

(insn 176 175 177 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:QI 195)
        (subreg:QI (reg:SI 194) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 194)
        (nil)))

(insn 177 176 178 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:SI 196)
        (zero_extend:SI (reg:QI 195))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 195)
        (nil)))

(insn 178 177 179 29 arch/arm/vfp/vfpdouble.c:137 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 196)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 196)
        (nil)))

(jump_insn 179 178 180 29 arch/arm/vfp/vfpdouble.c:137 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 184)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 29 -> ( 30 31)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; rd  out 	(76)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  30 [50.0%]  (fallthru)
;; Succ edge  31 [50.0%] 

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u259(11){ }u260(13){ }u261(25){ }u262(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 142
;; live  kill	
;; rd  in  	(76)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
787
;; rd  kill	(5)
785, 786, 787, 788, 789

;; Pred edge  29 [50.0%]  (fallthru)
(note 180 179 181 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 181 180 390 30 arch/arm/vfp/vfpdouble.c:138 (set (reg/v:DI 142 [ incr ])
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (nil))

(jump_insn 390 181 391 30 (set (pc)
        (label_ref 187)) -1 (nil))
;; End of basic block 30 -> ( 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(77)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 787, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  32 [100.0%] 

(barrier 391 390 184)

;; Start of basic block ( 29 28) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u263(11){ }u264(13){ }u265(25){ }u266(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 143 150 151 153
;; live  gen 	 142
;; live  kill	
;; rd  in  	(77)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 143, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
786
;; rd  kill	(5)
785, 786, 787, 788, 789

;; Pred edge  29 [50.0%] 
;; Pred edge  28 [28.0%] 
(code_label 184 391 185 31 126 "" [2 uses])

(note 185 184 186 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 186 185 187 31 arch/arm/vfp/vfpdouble.c:136 (set (reg/v:DI 142 [ incr ])
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))
;; End of basic block 31 -> ( 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(78)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 143, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  32 [100.0%]  (fallthru)

;; Start of basic block ( 31 27 26 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u267(11){ }u268(13){ }u269(25){ }u270(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143
;; lr  def 	 24 [cc] 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 24 [cc] 197
;; live  kill	 24 [cc]
;; rd  in  	(85)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 140, 143, 144, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
138, 842
;; rd  kill	(1)
842

;; Pred edge  31 [100.0%]  (fallthru)
;; Pred edge  27 [100.0%] 
;; Pred edge  26 [100.0%] 
;; Pred edge  30 [100.0%] 
(code_label 187 186 188 32 125 "" [3 uses])

(note 188 187 189 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 189 188 190 32 arch/arm/vfp/vfpdouble.c:145 (parallel [
            (set (reg:DI 197)
                (plus:DI (reg/v:DI 142 [ incr ])
                    (reg/v:DI 143 [ significand ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 190 189 191 32 arch/arm/vfp/vfpdouble.c:145 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 143 [ significand ]) 4)
            (subreg:SI (reg:DI 197) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 191 190 338 32 arch/arm/vfp/vfpdouble.c:145 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 351)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 32 -> ( 35 33)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; rd  out 	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  35 [50.0%] 
;; Succ edge  33 [50.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u276(11){ }u277(13){ }u278(25){ }u279(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; live  gen 	
;; live  kill	
;; rd  in  	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  32 [50.0%]  (fallthru)
(note 338 191 193 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(jump_insn 193 338 339 33 arch/arm/vfp/vfpdouble.c:145 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 33 -> ( 36 34)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; rd  out 	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  36 [71.0%] 
;; Succ edge  34 [29.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u281(11){ }u282(13){ }u283(25){ }u284(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 197
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 197
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
137
;; rd  kill	(0)


;; Pred edge  33 [29.0%]  (fallthru)
(note 339 193 194 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 194 339 195 34 arch/arm/vfp/vfpdouble.c:145 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 143 [ significand ]) 0)
            (subreg:SI (reg:DI 197) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 197)
        (nil)))

(jump_insn 195 194 351 34 arch/arm/vfp/vfpdouble.c:145 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 34 -> ( 35 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(84)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 137, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  35 [50.0%]  (fallthru)
;; Succ edge  36 [50.0%] 

;; Start of basic block ( 34 32) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u288(11){ }u289(13){ }u290(25){ }u291(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 143
;; lr  def 	 24 [cc] 141 142 143 144 145 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 141 142 143 144 145 198
;; live  kill	 24 [cc]
;; rd  in  	(85)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 137, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(6)
781, 785, 791, 795, 796, 843
;; rd  kill	(19)
779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 843

;; Pred edge  34 [50.0%]  (fallthru)
;; Pred edge  32 [50.0%] 
(code_label 351 195 201 35 137 "" [1 uses])

(note 201 351 202 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 202 201 203 35 arch/arm/vfp/vfpdouble.c:146 (set (reg/v:SI 141 [ exponent ])
        (plus:SI (reg/v:SI 141 [ exponent ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 203 202 204 35 arch/arm/vfp/vfpdouble.c:147 (parallel [
            (set (reg:DI 145 [ D.4150 ])
                (lshiftrt:DI (reg/v:DI 143 [ significand ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 204 203 205 35 arch/arm/vfp/vfpdouble.c:147 (set (reg:DI 198)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 205 204 206 35 arch/arm/vfp/vfpdouble.c:147 (set (reg:DI 144 [ D.4151 ])
        (and:DI (reg/v:DI 143 [ significand ])
            (reg:DI 198))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 198)
        (expr_list:REG_DEAD (reg/v:DI 143 [ significand ])
            (expr_list:REG_EQUAL (and:DI (reg/v:DI 143 [ significand ])
                    (const_int 1 [0x1]))
                (nil)))))

(insn 206 205 207 35 arch/arm/vfp/vfpdouble.c:147 (set (reg/v:DI 143 [ significand ])
        (ior:DI (reg:DI 144 [ D.4151 ])
            (reg:DI 145 [ D.4150 ]))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 145 [ D.4150 ])
        (expr_list:REG_DEAD (reg:DI 144 [ D.4151 ])
            (nil))))

(insn 207 206 208 35 arch/arm/vfp/vfpdouble.c:148 (parallel [
            (set (reg/v:DI 142 [ incr ])
                (lshiftrt:DI (reg/v:DI 142 [ incr ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))
;; End of basic block 35 -> ( 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(77)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 781, 785, 791, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  36 [100.0%]  (fallthru)

;; Start of basic block ( 35 33 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u300(11){ }u301(13){ }u302(25){ }u303(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 199 200 201
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 24 [cc] 199 200 201
;; live  kill	
;; rd  in  	(91)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 137, 138, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(4)
134, 844, 845, 846
;; rd  kill	(4)
844, 845, 846, 847

;; Pred edge  35 [100.0%]  (fallthru)
;; Pred edge  33 [71.0%] 
;; Pred edge  34 [50.0%] 
(code_label 208 207 209 36 127 "" [2 uses])

(note 209 208 210 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 210 209 211 36 arch/arm/vfp/vfpdouble.c:160 (set (reg:DI 200)
        (const_int 2047 [0x7ff])) 163 {*arm_movdi} (nil))

(insn 211 210 212 36 arch/arm/vfp/vfpdouble.c:160 (set (reg:DI 199)
        (and:DI (reg/v:DI 143 [ significand ])
            (reg:DI 200))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 200)
        (expr_list:REG_EQUAL (and:DI (reg/v:DI 143 [ significand ])
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 212 211 213 36 arch/arm/vfp/vfpdouble.c:160 (set (reg:SI 201)
        (subreg:SI (reg:DI 199) 0)) 167 {*arm_movsi_insn} (nil))

(insn 213 212 214 36 arch/arm/vfp/vfpdouble.c:160 (set (reg:SI 201)
        (ior:SI (reg:SI 201)
            (subreg:SI (reg:DI 199) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 199)
        (nil)))

(insn 214 213 215 36 arch/arm/vfp/vfpdouble.c:160 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 201)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 201)
        (nil)))

(jump_insn 215 214 216 36 arch/arm/vfp/vfpdouble.c:160 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 218)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 36 -> ( 37 38)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(93)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 134, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  37 [50.0%]  (fallthru)
;; Succ edge  38 [50.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u312(11){ }u313(13){ }u314(25){ }u315(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153
;; lr  def 	 153
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 153
;; live  kill	
;; rd  in  	(93)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 134, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
804
;; rd  kill	(4)
802, 803, 804, 805

;; Pred edge  36 [50.0%]  (fallthru)
(note 216 215 217 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 217 216 218 37 arch/arm/vfp/vfpdouble.c:161 (set (reg/v:SI 153 [ exceptions ])
        (ior:SI (reg/v:SI 153 [ exceptions ])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))
;; End of basic block 37 -> ( 38)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; rd  out 	(93)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 134, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  38 [100.0%]  (fallthru)

;; Start of basic block ( 36 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u317(11){ }u318(13){ }u319(25){ }u320(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 202
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 24 [cc] 202
;; live  kill	
;; rd  in  	(94)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 134, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
133, 848
;; rd  kill	(1)
848

;; Pred edge  36 [50.0%] 
;; Pred edge  37 [100.0%]  (fallthru)
(code_label 218 217 219 38 129 "" [1 uses])

(note 219 218 220 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 220 219 221 38 arch/arm/vfp/vfpdouble.c:171 (set (reg:SI 202)
        (const_int 2045 [0x7fd])) 167 {*arm_movsi_insn} (nil))

(insn 221 220 222 38 arch/arm/vfp/vfpdouble.c:171 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ exponent ])
            (reg:SI 202))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 141 [ exponent ])
            (const_int 2045 [0x7fd]))
        (nil)))

(jump_insn 222 221 223 38 arch/arm/vfp/vfpdouble.c:171 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 246)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 38 -> ( 39 42)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 202
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153 202
;; rd  out 	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 133, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  39 [50.0%]  (fallthru)
;; Succ edge  42 [50.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u325(11){ }u326(13){ }u327(25){ }u328(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 150 151 153 202
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 153
;; lr  def 	 24 [cc] 153 203
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 150 151 153 202
;; live  gen 	 24 [cc] 153 203
;; live  kill	
;; rd  in  	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 133, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(3)
132, 803, 849
;; rd  kill	(6)
802, 803, 804, 805, 849, 850

;; Pred edge  38 [50.0%]  (fallthru)
(note 223 222 224 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 224 223 225 39 arch/arm/vfp/vfpdouble.c:172 (set (reg/v:SI 153 [ exceptions ])
        (ior:SI (reg/v:SI 153 [ exceptions ])
            (const_int 20 [0x14]))) 89 {*arm_iorsi3} (nil))

(insn 225 224 226 39 arch/arm/vfp/vfpdouble.c:173 (set (reg:SI 203 [ incr ])
        (subreg:SI (reg/v:DI 142 [ incr ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 226 225 227 39 arch/arm/vfp/vfpdouble.c:173 (set (reg:SI 203 [ incr ])
        (ior:SI (reg:SI 203 [ incr ])
            (subreg:SI (reg/v:DI 142 [ incr ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 142 [ incr ])
        (nil)))

(insn 227 226 228 39 arch/arm/vfp/vfpdouble.c:173 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 203 [ incr ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 203 [ incr ])
        (nil)))

(jump_insn 228 227 229 39 arch/arm/vfp/vfpdouble.c:173 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 237)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 39 -> ( 40 41)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 202
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 202
;; rd  out 	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  40 [50.0%]  (fallthru)
;; Succ edge  41 [50.0%] 

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u335(11){ }u336(13){ }u337(25){ }u338(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 202
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 202
;; lr  def 	 206
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153 202
;; live  gen 	 206
;; live  kill	
;; rd  in  	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(1)
851
;; rd  kill	(1)
851

;; Pred edge  39 [50.0%]  (fallthru)
(note 229 228 232 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 232 229 233 40 arch/arm/vfp/vfpdouble.c:174 (set (mem/s/j:HI (reg/v/f:SI 151 [ vd ]) [0 <variable>.exponent+0 S2 A64])
        (subreg:HI (reg:SI 202) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 202)
        (expr_list:REG_EQUAL (const_int 2045 [0x7fd])
            (nil))))

(insn 233 232 234 40 arch/arm/vfp/vfpdouble.c:175 (set (reg:DI 206)
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (nil))

(insn 234 233 392 40 arch/arm/vfp/vfpdouble.c:175 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 151 [ vd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 206)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 206)
        (expr_list:REG_EQUAL (const_int 9223372036854775807 [0x7fffffffffffffff])
            (nil))))

(jump_insn 392 234 393 40 (set (pc)
        (label_ref 295)) -1 (nil))
;; End of basic block 40 -> ( 50)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; rd  out 	(96)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  50 [100.0%] 

(barrier 393 392 237)

;; Start of basic block ( 39) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u343(11){ }u344(13){ }u345(25){ }u346(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 208 209
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  gen 	 208 209
;; live  kill	
;; rd  in  	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(2)
852, 853
;; rd  kill	(2)
852, 853

;; Pred edge  39 [50.0%] 
(code_label 237 393 238 41 131 "" [1 uses])

(note 238 237 239 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 239 238 241 41 arch/arm/vfp/vfpdouble.c:177 (set (reg:SI 208)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 241 239 242 41 arch/arm/vfp/vfpdouble.c:177 (set (mem/s/j:HI (reg/v/f:SI 151 [ vd ]) [0 <variable>.exponent+0 S2 A64])
        (subreg:HI (reg:SI 208) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 208)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 242 241 243 41 arch/arm/vfp/vfpdouble.c:178 (set (reg:DI 209)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 243 242 394 41 arch/arm/vfp/vfpdouble.c:178 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 151 [ vd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 209)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 209)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 394 243 395 41 (set (pc)
        (label_ref 295)) -1 (nil))
;; End of basic block 41 -> ( 50)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; rd  out 	(97)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 852, 853, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897


;; Succ edge  50 [100.0%] 

(barrier 395 394 246)

;; Start of basic block ( 38) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u351(11){ }u352(13){ }u353(25){ }u354(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 143
;; lr  def 	 24 [cc] 133 141 212 213 215 216 249 250
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141 142 143 150 151 153
;; live  gen 	 24 [cc] 133 141 212 213 215 216 249 250
;; live  kill	 24 [cc]
;; rd  in  	(95)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 133, 162, 163, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 881, 882, 883, 884, 885, 886, 887, 891, 894, 897
;; rd  gen 	(9)
129, 770, 780, 854, 855, 856, 858, 888, 890
;; rd  kill	(15)
770, 779, 780, 781, 782, 783, 784, 854, 855, 856, 857, 858, 888, 889, 890

;; Pred edge  38 [50.0%] 
(code_label 246 395 247 42 130 "" [1 uses])

(note 247 246 248 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 248 247 249 42 arch/arm/vfp/vfpdouble.c:166 (parallel [
            (set (reg/v:DI 133 [ significand.542 ])
                (plus:DI (reg/v:DI 142 [ incr ])
                    (reg/v:DI 143 [ significand ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 143 [ significand ])
        (expr_list:REG_DEAD (reg/v:DI 142 [ incr ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 249 248 250 42 arch/arm/vfp/vfpdouble.c:181 (set (reg:SI 212)
        (ashift:SI (subreg:SI (reg/v:DI 133 [ significand.542 ]) 4)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn 250 249 251 42 arch/arm/vfp/vfpdouble.c:181 (set (reg:SI 249)
        (lshiftrt:SI (subreg:SI (reg/v:DI 133 [ significand.542 ]) 0)
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (nil))

(insn 251 250 252 42 arch/arm/vfp/vfpdouble.c:181 (set (reg:SI 249)
        (ior:SI (reg:SI 212)
            (reg:SI 249))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 212)
        (nil)))

(insn 252 251 254 42 arch/arm/vfp/vfpdouble.c:181 (set (reg:SI 250 [+4 ])
        (lshiftrt:SI (subreg:SI (reg/v:DI 133 [ significand.542 ]) 4)
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (nil))

(insn 254 252 373 42 arch/arm/vfp/vfpdouble.c:181 (set (reg:SI 213)
        (ior:SI (reg:SI 249)
            (reg:SI 250 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 250 [+4 ])
        (expr_list:REG_DEAD (reg:SI 249)
            (nil))))

(insn 373 254 374 42 arch/arm/vfp/vfpdouble.c:182 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 213)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 374 373 261 42 arch/arm/vfp/vfpdouble.c:182 (set (reg/v:SI 141 [ exponent ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 141 [ exponent ])
            (reg:SI 213))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:SI 213)
        (expr_list:REG_DEAD (reg:CC 24 cc)
            (nil))))

(insn 261 374 262 42 arch/arm/vfp/vfpdouble.c:183 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ exponent ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 262 261 265 42 arch/arm/vfp/vfpdouble.c:183 (set (reg:SI 215)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 265 262 266 42 arch/arm/vfp/vfpdouble.c:183 (set (reg:QI 216)
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 266 265 267 42 arch/arm/vfp/vfpdouble.c:183 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 133 [ significand.542 ]) 4)
            (const_int -2147483648 [0xffffffff80000000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 267 266 343 42 arch/arm/vfp/vfpdouble.c:183 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 276)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 42 -> ( 45 43)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; rd  out 	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897


;; Succ edge  45 [50.0%] 
;; Succ edge  43 [50.0%]  (fallthru)

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u372(11){ }u373(13){ }u374(25){ }u375(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  gen 	
;; live  kill	
;; rd  in  	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  42 [50.0%]  (fallthru)
(note 343 267 269 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(jump_insn 269 343 344 43 arch/arm/vfp/vfpdouble.c:183 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 279)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 43 -> ( 46 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; rd  out 	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897


;; Succ edge  46 [71.0%] 
;; Succ edge  44 [29.0%]  (fallthru)

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u377(11){ }u378(13){ }u379(25){ }u380(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
128
;; rd  kill	(0)


;; Pred edge  43 [29.0%]  (fallthru)
(note 344 269 270 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 270 344 271 44 arch/arm/vfp/vfpdouble.c:183 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 133 [ significand.542 ]) 0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 271 270 276 44 arch/arm/vfp/vfpdouble.c:183 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 279)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 44 -> ( 45 46)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; rd  out 	(98)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 128, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897


;; Succ edge  45 [50.0%]  (fallthru)
;; Succ edge  46 [50.0%] 

;; Start of basic block ( 42 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u383(11){ }u384(13){ }u385(25){ }u386(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 216
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215
;; live  gen 	 216
;; live  kill	
;; rd  in  	(99)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 128, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
857
;; rd  kill	(2)
857, 858

;; Pred edge  42 [50.0%] 
;; Pred edge  44 [50.0%]  (fallthru)
(code_label 276 271 347 45 135 "" [1 uses])

(note 347 276 278 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 278 347 279 45 arch/arm/vfp/vfpdouble.c:183 (set (reg:QI 216)
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 45 -> ( 46)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; rd  out 	(99)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 128, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897


;; Succ edge  46 [100.0%]  (fallthru)

;; Start of basic block ( 43 44 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u387(11){ }u388(13){ }u389(25){ }u390(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 215 216
;; lr  def 	 24 [cc] 219 220 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153 215 216
;; live  gen 	 24 [cc] 219 220 221
;; live  kill	
;; rd  in  	(100)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 128, 129, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(4)
127, 859, 860, 861
;; rd  kill	(3)
859, 860, 861

;; Pred edge  43 [71.0%] 
;; Pred edge  44 [50.0%] 
;; Pred edge  45 [100.0%]  (fallthru)
(code_label 279 278 348 46 134 "" [2 uses])

(note 348 279 280 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 280 348 281 46 arch/arm/vfp/vfpdouble.c:183 (set (reg:SI 219)
        (ior:SI (reg:SI 215)
            (subreg:SI (reg:QI 216) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:QI 216)
        (expr_list:REG_DEAD (reg:SI 215)
            (nil))))

(insn 281 280 282 46 arch/arm/vfp/vfpdouble.c:183 (set (reg:QI 220)
        (subreg:QI (reg:SI 219) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 219)
        (nil)))

(insn 282 281 283 46 arch/arm/vfp/vfpdouble.c:183 (set (reg:SI 221)
        (zero_extend:SI (reg:QI 220))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 220)
        (nil)))

(insn 283 282 284 46 arch/arm/vfp/vfpdouble.c:183 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 221)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 221)
        (nil)))

(jump_insn 284 283 285 46 arch/arm/vfp/vfpdouble.c:183 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 290)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 46 -> ( 49 47)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153
;; rd  out 	(102)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 127, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897


;; Succ edge  49 [50.0%] 
;; Succ edge  47 [50.0%]  (fallthru)

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u397(11){ }u398(13){ }u399(25){ }u400(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 139 141 150 151 153
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(102)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 127, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
126
;; rd  kill	(0)


;; Pred edge  46 [50.0%]  (fallthru)
(note 285 284 286 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 286 285 287 47 arch/arm/vfp/vfpdouble.c:185 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 139 [ underflow ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ underflow ])
        (nil)))

(jump_insn 287 286 288 47 arch/arm/vfp/vfpdouble.c:185 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 290)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 47 -> ( 48 49)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; rd  out 	(102)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 126, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897


;; Succ edge  48 [100.0%]  (fallthru)
;; Succ edge  49 [0.0%] 

;; Start of basic block ( 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u403(11){ }u404(13){ }u405(25){ }u406(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153
;; lr  def 	 153
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; live  gen 	 153
;; live  kill	
;; rd  in  	(102)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 126, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
802
;; rd  kill	(4)
802, 803, 804, 805

;; Pred edge  47 [100.0%]  (fallthru)
(note 288 287 289 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 289 288 290 48 arch/arm/vfp/vfpdouble.c:186 (set (reg/v:SI 153 [ exceptions ])
        (ior:SI (reg/v:SI 153 [ exceptions ])
            (const_int 8 [0x8]))) 89 {*arm_iorsi3} (nil))
;; End of basic block 48 -> ( 49)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; rd  out 	(101)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 126, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897


;; Succ edge  49 [100.0%]  (fallthru)

;; Start of basic block ( 47 48 46) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u408(11){ }u409(13){ }u410(25){ }u411(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 151
;; lr  def 	 24 [cc] 222
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 150 151 153
;; live  gen 	 222
;; live  kill	 24 [cc]
;; rd  in  	(104)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 126, 127, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(1)
862
;; rd  kill	(1)
862

;; Pred edge  47 [0.0%] 
;; Pred edge  48 [100.0%]  (fallthru)
;; Pred edge  46 [50.0%] 
(code_label 290 289 291 49 133 "" [2 uses])

(note 291 290 292 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 292 291 293 49 arch/arm/vfp/vfpdouble.c:187 (set (mem/s/j:HI (reg/v/f:SI 151 [ vd ]) [0 <variable>.exponent+0 S2 A64])
        (subreg:HI (reg/v:SI 141 [ exponent ]) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg/v:SI 141 [ exponent ])
        (nil)))

(insn 293 292 294 49 arch/arm/vfp/vfpdouble.c:188 (parallel [
            (set (reg:DI 222)
                (lshiftrt:DI (reg/v:DI 133 [ significand.542 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (expr_list:REG_DEAD (reg/v:DI 133 [ significand.542 ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 294 293 295 49 arch/arm/vfp/vfpdouble.c:188 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 151 [ vd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg:DI 222)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 222)
        (nil)))
;; End of basic block 49 -> ( 50)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; rd  out 	(103)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 854, 855, 856, 857, 858, 859, 860, 861, 862, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897


;; Succ edge  50 [100.0%]  (fallthru)

;; Start of basic block ( 5 7 40 49 41) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u417(11){ }u418(13){ }u419(25){ }u420(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 224 226 227 228 230 231 234 235 236 237 239
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151 153
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 224 226 227 228 230 231 234 235 236 237 239
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(116)
4, 6, 11, 13, 24, 26, 39, 48, 49, 56, 57, 64, 132, 157, 158, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897
;; rd  gen 	(12)
1, 863, 866, 867, 868, 870, 872, 874, 877, 878, 879, 880
;; rd  kill	(29)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 58, 59, 60, 61, 62, 63, 64, 863, 867, 868, 872, 877, 878, 879, 880

;; Pred edge  5 [50.0%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  40 [100.0%] 
;; Pred edge  49 [100.0%]  (fallthru)
;; Pred edge  41 [100.0%] 
(code_label 295 294 296 50 111 ("pack") [4 uses])

(note 296 295 298 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 298 296 375 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 224 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 151 [ vd ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 375 298 300 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:DI 226)
        (const_int 0 [0x0])) -1 (nil))

(insn 300 375 301 50 arch/arm/vfp/vfpdouble.c:197 (set (subreg:SI (reg:DI 226) 4)
        (ashift:SI (reg:SI 224 [ <variable>.sign ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 224 [ <variable>.sign ])
        (nil)))

(insn 301 300 303 50 arch/arm/vfp/vfpdouble.c:197 (set (subreg:SI (reg:DI 226) 0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 303 301 304 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 228 [ <variable>.exponent ])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 151 [ vd ]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 304 303 376 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:DI 227 [ <variable>.exponent ])
        (sign_extend:DI (reg:SI 228 [ <variable>.exponent ]))) 140 {*arm_extendsidi2} (expr_list:REG_DEAD (reg:SI 228 [ <variable>.exponent ])
        (nil)))

(insn 376 304 305 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:DI 230)
        (const_int 0 [0x0])) -1 (nil))

(insn 305 376 306 50 arch/arm/vfp/vfpdouble.c:197 (set (subreg:SI (reg:DI 230) 4)
        (ashift:SI (subreg:SI (reg:DI 227 [ <variable>.exponent ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 227 [ <variable>.exponent ])
        (nil)))

(insn 306 305 307 50 arch/arm/vfp/vfpdouble.c:197 (set (subreg:SI (reg:DI 230) 0)
        (subreg:SI (reg:DI 226) 0)) 167 {*arm_movsi_insn} (nil))

(insn 307 306 309 50 arch/arm/vfp/vfpdouble.c:197 (parallel [
            (set (reg:DI 231)
                (plus:DI (reg:DI 226)
                    (reg:DI 230)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 230)
        (expr_list:REG_DEAD (reg:DI 226)
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 309 307 310 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 236 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 151 [ vd ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 310 309 311 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 235)
        (ashift:SI (reg:SI 236 [ <variable>.significand+4 ])
            (const_int 22 [0x16]))) 117 {*arm_shiftsi3} (nil))

(insn 311 310 377 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 237 [ <variable>.significand ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 151 [ vd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 151 [ vd ])
        (nil)))

(insn 377 311 312 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:DI 234)
        (const_int 0 [0x0])) -1 (nil))

(insn 312 377 313 50 arch/arm/vfp/vfpdouble.c:197 (set (subreg:SI (reg:DI 234) 0)
        (lshiftrt:SI (reg:SI 237 [ <variable>.significand ])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 237 [ <variable>.significand ])
        (nil)))

(insn 313 312 315 50 arch/arm/vfp/vfpdouble.c:197 (set (subreg:SI (reg:DI 234) 0)
        (ior:SI (reg:SI 235)
            (subreg:SI (reg:DI 234) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 235)
        (nil)))

(insn 315 313 316 50 arch/arm/vfp/vfpdouble.c:197 (set (subreg:SI (reg:DI 234) 4)
        (lshiftrt:SI (reg:SI 236 [ <variable>.significand+4 ])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 236 [ <variable>.significand+4 ])
        (nil)))

(insn 316 315 317 50 arch/arm/vfp/vfpdouble.c:197 (parallel [
            (set (reg:DI 239)
                (plus:DI (reg:DI 231)
                    (reg:DI 234)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 234)
        (expr_list:REG_DEAD (reg:DI 231)
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 317 316 318 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:DI 0 r0)
        (reg:DI 239)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 239)
        (nil)))

(insn 318 317 319 50 arch/arm/vfp/vfpdouble.c:197 (set (reg:SI 2 r2)
        (reg/v:SI 150 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 150 [ dd ])
        (nil)))

(call_insn 319 318 324 50 arch/arm/vfp/vfpdouble.c:197 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 324 319 330 50 arch/arm/vfp/vfpdouble.c:200 (set (reg/i:SI 0 r0)
        (reg/v:SI 153 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 153 [ exceptions ])
        (nil)))

(insn 330 324 0 50 arch/arm/vfp/vfpdouble.c:200 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 50 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(123)
1, 24, 26, 39, 48, 49, 56, 57, 132, 157, 158, 162, 163, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 870, 872, 874, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 897


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fnmul (vfp_double_fnmul)[0:180]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)


vfp_double_fnmul

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={9d,5u} r2={9d,3u} r3={9d,3u} r11={1d,12u} r12={7d} r13={1d,19u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,10u} r25={1d,25u,6d} r26={1d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,3u} r134={5d,8u,1d} r135={1d,3u} r136={5d,8u,1d} r137={1d,1u} r139={1d,5u,1d} r140={1d,5u,1d} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,2u} r162={1d,1u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={2d,2u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r179={1d,1u,1d} r180={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,2u} r189={1d,1u} r190={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={2d,2u} r199={1d,1u} r200={1d,2u} r201={1d,1u} r202={1d,1u} r204={1d,1u,1d} r205={1d,1u} r206={1d,1u} r208={1d,1u} r210={1d,1u} r212={1d,1u} r214={1d,1u} r215={2d,3u} r216={1d,1u} r218={1d,1u} r220={1d,1u} r221={2d,3u} 
;;    total ref usage 1020{808d,199u,13e} in 117{111 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733
0[0,13] 1[13,9] 2[22,9] 3[31,9] 11[40,1] 12[41,7] 13[48,1] 14[49,7] 15[56,6] 16[62,6] 17[68,6] 18[74,6] 19[80,6] 20[86,6] 21[92,6] 22[98,6] 23[104,6] 24[110,16] 25[126,1] 26[127,1] 27[128,6] 28[134,6] 29[140,6] 30[146,6] 31[152,6] 32[158,6] 33[164,6] 34[170,6] 35[176,6] 36[182,6] 37[188,6] 38[194,6] 39[200,6] 40[206,6] 41[212,6] 42[218,6] 43[224,6] 44[230,6] 45[236,6] 46[242,6] 47[248,6] 48[254,6] 49[260,6] 50[266,6] 51[272,6] 52[278,6] 53[284,6] 54[290,6] 55[296,6] 56[302,6] 57[308,6] 58[314,6] 59[320,6] 60[326,6] 61[332,6] 62[338,6] 63[344,6] 64[350,6] 65[356,6] 66[362,6] 67[368,6] 68[374,6] 69[380,6] 70[386,6] 71[392,6] 72[398,6] 73[404,6] 74[410,6] 75[416,6] 76[422,6] 77[428,6] 78[434,6] 79[440,6] 80[446,6] 81[452,6] 82[458,6] 83[464,6] 84[470,6] 85[476,6] 86[482,6] 87[488,6] 88[494,6] 89[500,6] 90[506,6] 91[512,6] 92[518,6] 93[524,6] 94[530,6] 95[536,6] 96[542,6] 97[548,6] 98[554,6] 99[560,6] 100[566,6] 101[572,6] 102[578,6] 103[584,6] 104[590,6] 105[596,6] 106[602,6] 107[608,6] 108[614,6] 109[620,6] 110[626,6] 111[632,6] 112[638,6] 113[644,6] 114[650,6] 115[656,6] 116[662,6] 117[668,6] 118[674,6] 119[680,6] 120[686,6] 121[692,6] 122[698,6] 123[704,6] 124[710,6] 125[716,6] 126[722,6] 127[728,6] 133[734,1] 134[735,5] 135[740,1] 136[741,5] 137[746,1] 139[747,1] 140[748,1] 142[749,1] 143[750,1] 144[751,1] 145[752,1] 146[753,1] 147[754,1] 152[755,1] 153[756,1] 156[757,1] 157[758,1] 159[759,1] 160[760,1] 161[761,1] 162[762,1] 163[763,1] 166[764,1] 167[765,1] 168[766,1] 169[767,1] 170[768,1] 171[769,2] 172[771,1] 173[772,1] 174[773,1] 179[774,1] 180[775,1] 183[776,1] 184[777,1] 186[778,1] 187[779,1] 188[780,1] 189[781,1] 190[782,1] 193[783,1] 194[784,1] 195[785,1] 196[786,1] 197[787,1] 198[788,2] 199[790,1] 200[791,1] 201[792,1] 202[793,1] 204[794,1] 205[795,1] 206[796,1] 208[797,1] 210[798,1] 212[799,1] 214[800,1] 215[801,2] 216[803,1] 218[804,1] 220[805,1] 221[806,2] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d12(0){ }d21(1){ }d30(2){ }d39(3){ }d40(11){ }d47(12){ }d48(13){ }d55(14){ }d126(25){ }d127(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  kill	(58)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 126, 127
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d40(bb 0 insn -1) }u1(13){ d48(bb 0 insn -1) }u2(25){ d126(bb 0 insn -1) }u3(26){ d127(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 210 212 214 215
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 210 212 214 215
;; live  kill	 14 [lr]
;; rd  in  	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  gen 	(29)
10, 20, 123, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801, 802
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d12(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d21(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d30(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 9
;;      reg 143 { d750(bb 2 insn 3) }
;;   UD chains for insn luid 5 uid 10
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d11(bb 2 insn 9) }
;;   UD chains for insn luid 6 uid 11
;;      reg 0 { d10(bb 2 insn 10) }
;;      reg 1 { d20(bb 2 insn 10) }
;;   UD chains for insn luid 8 uid 13
;;      reg 140 { d748(bb 2 insn 11) }
;;      reg 147 { d754(bb 2 insn 12) }
;;   eq_note reg 140 { }
;;   UD chains for insn luid 9 uid 14
;;      reg 146 { d753(bb 2 insn 13) }
;;   UD chains for insn luid 10 uid 16
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 210 { d798(bb 2 insn 14) }
;;   UD chains for insn luid 11 uid 17
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 12 uid 19
;;      reg 212 { d799(bb 2 insn 17) }
;;   UD chains for insn luid 13 uid 20
;;      reg 152 { d755(bb 2 insn 19) }
;;   UD chains for insn luid 14 uid 21
;;      reg 153 { d756(bb 2 insn 20) }
;;   eq_note reg 152 { }
;;   UD chains for insn luid 15 uid 22
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 16 uid 23
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 17 uid 24
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 18 uid 25
;;      reg 156 { d757(bb 2 insn 23) }
;;      reg 215 { d802(bb 2 insn 24) }
;;   UD chains for insn luid 19 uid 26
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 20 uid 27
;;      reg 215 { d801(bb 2 insn 25) }
;;   UD chains for insn luid 22 uid 28
;;      reg 136 read/write { d741(bb 2 insn 160) }
;;      reg 214 { d800(bb 2 insn 26) }
;;   UD chains for insn luid 23 uid 29
;;      reg 136 { d745(bb 2 insn 28) d741(bb 2 insn 160) }
;;      reg 136 read/write { d745(bb 2 insn 28) d741(bb 2 insn 160) }
;;      reg 157 { d758(bb 2 insn 27) }
;;   UD chains for insn luid 24 uid 30
;;      reg 136 read/write { d745(bb 2 insn 28) d744(bb 2 insn 29) d741(bb 2 insn 160) }
;;      reg 215 { d801(bb 2 insn 25) }
;;   UD chains for insn luid 26 uid 32
;;      reg 160 { d760(bb 2 insn 31) }
;;   UD chains for insn luid 27 uid 33
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 28 uid 34
;;      reg 159 { d759(bb 2 insn 32) }
;;   UD chains for insn luid 29 uid 35
;;      reg 161 { d761(bb 2 insn 33) }
;;      reg 162 { d762(bb 2 insn 34) }
;;   UD chains for insn luid 30 uid 36
;;      reg 24 { d124(bb 2 insn 35) }
;;   UD chains for insn luid 31 uid 39
;;      reg 161 { d761(bb 2 insn 33) }
;;   UD chains for insn luid 32 uid 40
;;      reg 24 { d111(bb 2 insn 39) }
;;   UD chains for insn luid 33 uid 42
;;      reg 163 { d763(bb 2 insn 36) }
;;      reg 166 { d764(bb 2 insn 40) }
;;   UD chains for insn luid 34 uid 43
;;      reg 167 { d765(bb 2 insn 42) }
;;   UD chains for insn luid 35 uid 44
;;      reg 168 { d766(bb 2 insn 43) }
;;   UD chains for insn luid 36 uid 45
;;      reg 169 { d767(bb 2 insn 44) }
;;   UD chains for insn luid 37 uid 46
;;      reg 24 { d123(bb 2 insn 45) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ d40(bb 0 insn -1) }u54(13){ d48(bb 0 insn -1) }u55(25){ d126(bb 0 insn -1) }u56(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 136 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 136 170
;; live  kill	
;; rd  in  	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;; rd  gen 	(2)
742, 768
;; rd  kill	(6)
741, 742, 743, 744, 745, 768
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(37)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 49
;;      reg 136 { d743(bb 2 insn 30) }
;;      reg 170 { d768(bb 3 insn 48) }
;;   eq_note reg 136 { }

( 2 3 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ d40(bb 0 insn -1) }u61(13){ d48(bb 0 insn -1) }u62(25){ d126(bb 0 insn -1) }u63(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;; rd  gen 	(1)
122
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; rd  out 	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 52
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 53
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 2 uid 54
;;      reg 24 { d122(bb 4 insn 53) }

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u68(11){ d40(bb 0 insn -1) }u69(13){ d48(bb 0 insn -1) }u70(25){ d126(bb 0 insn -1) }u71(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  gen 	 24 [cc] 171
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;; rd  gen 	(2)
121, 769
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 769, 770
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 56
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 57
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;      reg 171 { d770(bb 5 insn 56) }
;;   UD chains for insn luid 2 uid 58
;;      reg 171 { d769(bb 5 insn 57) }
;;   UD chains for insn luid 3 uid 59
;;      reg 24 { d121(bb 5 insn 58) }

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ d40(bb 0 insn -1) }u78(13){ d48(bb 0 insn -1) }u79(25){ d126(bb 0 insn -1) }u80(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 172
;; live  kill	 14 [lr]
;; rd  in  	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 798, 799, 800, 801
;; rd  gen 	(1)
771
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 771
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(40)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 61
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 62
;;      reg 172 { d771(bb 6 insn 61) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 63
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d9(bb 6 insn 62) }

( 4 5 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u86(11){ d40(bb 0 insn -1) }u87(13){ d48(bb 0 insn -1) }u88(25){ d126(bb 0 insn -1) }u89(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 216 218 220 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 216 218 220 221
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 20, 30, 39, 40, 47, 48, 121, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 798, 799, 800, 801
;; rd  gen 	(25)
6, 18, 117, 734, 737, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 803, 804, 805, 806
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 734, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 803, 804, 805, 806, 807
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 66
;;      reg 144 { d751(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 67
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d7(bb 7 insn 66) }
;;   UD chains for insn luid 2 uid 68
;;      reg 0 { d6(bb 7 insn 67) }
;;      reg 1 { d18(bb 7 insn 67) }
;;   UD chains for insn luid 4 uid 70
;;      reg 139 { d747(bb 7 insn 68) }
;;      reg 174 { d773(bb 7 insn 69) }
;;   eq_note reg 139 { }
;;   UD chains for insn luid 5 uid 71
;;      reg 173 { d772(bb 7 insn 70) }
;;   UD chains for insn luid 6 uid 73
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 216 { d803(bb 7 insn 71) }
;;   UD chains for insn luid 7 uid 74
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 8 uid 76
;;      reg 218 { d804(bb 7 insn 74) }
;;   UD chains for insn luid 9 uid 77
;;      reg 179 { d774(bb 7 insn 76) }
;;   UD chains for insn luid 10 uid 78
;;      reg 180 { d775(bb 7 insn 77) }
;;   eq_note reg 179 { }
;;   UD chains for insn luid 11 uid 79
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 12 uid 80
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 13 uid 81
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 14 uid 82
;;      reg 183 { d776(bb 7 insn 80) }
;;      reg 221 { d807(bb 7 insn 81) }
;;   UD chains for insn luid 15 uid 83
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 16 uid 84
;;      reg 221 { d806(bb 7 insn 82) }
;;   UD chains for insn luid 18 uid 85
;;      reg 134 read/write { d735(bb 7 insn 161) }
;;      reg 220 { d805(bb 7 insn 83) }
;;   UD chains for insn luid 19 uid 86
;;      reg 134 { d739(bb 7 insn 85) d735(bb 7 insn 161) }
;;      reg 134 read/write { d739(bb 7 insn 85) d735(bb 7 insn 161) }
;;      reg 184 { d777(bb 7 insn 84) }
;;   UD chains for insn luid 20 uid 87
;;      reg 134 read/write { d739(bb 7 insn 85) d738(bb 7 insn 86) d735(bb 7 insn 161) }
;;      reg 221 { d806(bb 7 insn 82) }
;;   UD chains for insn luid 22 uid 89
;;      reg 187 { d779(bb 7 insn 88) }
;;   UD chains for insn luid 23 uid 90
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 24 uid 91
;;      reg 186 { d778(bb 7 insn 89) }
;;   UD chains for insn luid 25 uid 92
;;      reg 188 { d780(bb 7 insn 90) }
;;      reg 189 { d781(bb 7 insn 91) }
;;   UD chains for insn luid 26 uid 93
;;      reg 24 { d118(bb 7 insn 92) }
;;   UD chains for insn luid 27 uid 96
;;      reg 188 { d780(bb 7 insn 90) }
;;   UD chains for insn luid 28 uid 97
;;      reg 24 { d110(bb 7 insn 96) }
;;   UD chains for insn luid 29 uid 99
;;      reg 190 { d782(bb 7 insn 93) }
;;      reg 193 { d783(bb 7 insn 97) }
;;   UD chains for insn luid 30 uid 100
;;      reg 194 { d784(bb 7 insn 99) }
;;   UD chains for insn luid 31 uid 101
;;      reg 195 { d785(bb 7 insn 100) }
;;   UD chains for insn luid 32 uid 102
;;      reg 196 { d786(bb 7 insn 101) }
;;   UD chains for insn luid 33 uid 103
;;      reg 24 { d117(bb 7 insn 102) }

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u135(11){ d40(bb 0 insn -1) }u136(13){ d48(bb 0 insn -1) }u137(25){ d126(bb 0 insn -1) }u138(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 134 197
;; live  kill	
;; rd  in  	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(2)
736, 787
;; rd  kill	(6)
735, 736, 737, 738, 739, 787
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(63)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 106
;;      reg 134 { d737(bb 7 insn 87) }
;;      reg 197 { d787(bb 8 insn 105) }
;;   eq_note reg 134 { }

( 7 8 )->[9]->( 10 12 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u142(11){ d40(bb 0 insn -1) }u143(13){ d48(bb 0 insn -1) }u144(25){ d126(bb 0 insn -1) }u145(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(1)
116
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; rd  out 	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 109
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;   UD chains for insn luid 1 uid 110
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 2 uid 111
;;      reg 24 { d116(bb 9 insn 110) }

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u150(11){ d40(bb 0 insn -1) }u151(13){ d48(bb 0 insn -1) }u152(25){ d126(bb 0 insn -1) }u153(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  gen 	 24 [cc] 198
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(2)
115, 788
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 788, 789
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 113
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;   UD chains for insn luid 1 uid 114
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;      reg 198 { d789(bb 10 insn 113) }
;;   UD chains for insn luid 2 uid 115
;;      reg 198 { d788(bb 10 insn 114) }
;;   UD chains for insn luid 3 uid 116
;;      reg 24 { d115(bb 10 insn 115) }

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u159(11){ d40(bb 0 insn -1) }u160(13){ d48(bb 0 insn -1) }u161(25){ d126(bb 0 insn -1) }u162(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 199
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 199
;; live  kill	 14 [lr]
;; rd  in  	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(1)
790
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 790
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(66)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 118
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 119
;;      reg 199 { d790(bb 11 insn 118) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 120
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d5(bb 11 insn 119) }

( 9 10 11 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u168(11){ d40(bb 0 insn -1) }u169(13){ d48(bb 0 insn -1) }u170(25){ d126(bb 0 insn -1) }u171(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 200 201 202 204 205 206 208
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 137 200 201 202 204 205 206 208
;; live  kill	 14 [lr]
;; rd  in  	(67)
6, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(9)
0, 746, 791, 792, 793, 794, 795, 796, 797
;; rd  kill	(28)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 49, 50, 51, 52, 53, 54, 55, 746, 791, 792, 793, 794, 795, 796, 797
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(75)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 123
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 124
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 125
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 126
;;      reg 200 { d791(bb 12 insn 123) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 4 uid 127
;;      reg 201 { d792(bb 12 insn 124) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 128
;;      reg 202 { d793(bb 12 insn 125) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 6 uid 129
;;      reg 145 { d752(bb 2 insn 5) }
;;   UD chains for insn luid 7 uid 130
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d3(bb 12 insn 126) }
;;      reg 1 { d16(bb 12 insn 127) }
;;      reg 2 { d25(bb 12 insn 128) }
;;      reg 3 { d34(bb 12 insn 129) }
;;   UD chains for insn luid 8 uid 131
;;      reg 0 { d2(bb 12 insn 130) }
;;   UD chains for insn luid 9 uid 132
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 11 uid 135
;;      reg 204 { d794(bb 12 insn 132) }
;;      reg 206 { d796(bb 12 insn 134) }
;;   eq_note reg 204 { }
;;   UD chains for insn luid 12 uid 136
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 205 { d795(bb 12 insn 135) }
;;   UD chains for insn luid 14 uid 139
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 208 { d797(bb 12 insn 138) }
;;   UD chains for insn luid 15 uid 140
;;      reg 142 { d749(bb 2 insn 2) }
;;   UD chains for insn luid 16 uid 141
;;      reg 200 { d791(bb 12 insn 123) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 17 uid 142
;;      reg 145 { d752(bb 2 insn 5) }
;;   UD chains for insn luid 18 uid 143
;;      reg 137 { d746(bb 12 insn 131) }
;;   UD chains for insn luid 19 uid 144
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d1(bb 12 insn 140) }
;;      reg 1 { d13(bb 12 insn 141) }
;;      reg 2 { d23(bb 12 insn 142) }
;;      reg 3 { d32(bb 12 insn 143) }
;;   UD chains for insn luid 20 uid 156
;;      reg 0 { d0(bb 12 insn 144) }

( 12 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u207(0){ d0(bb 12 insn 144) }u208(11){ d40(bb 0 insn -1) }u209(13){ d48(bb 0 insn -1) }u210(14){ }u211(25){ d126(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(75)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(75)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 12 insn 144) }
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d126(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 46 to worklist
  Adding insn 22 to worklist
  Adding insn 16 to worklist
  Adding insn 10 to worklist
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 59 to worklist
  Adding insn 63 to worklist
  Adding insn 103 to worklist
  Adding insn 79 to worklist
  Adding insn 73 to worklist
  Adding insn 67 to worklist
  Adding insn 111 to worklist
  Adding insn 109 to worklist
  Adding insn 116 to worklist
  Adding insn 120 to worklist
  Adding insn 156 to worklist
  Adding insn 144 to worklist
  Adding insn 139 to worklist
  Adding insn 136 to worklist
  Adding insn 130 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 130:
Processing use of (reg 0 r0) in insn 130:
  Adding insn 126 to worklist
Processing use of (reg 1 r1) in insn 130:
  Adding insn 127 to worklist
Processing use of (reg 2 r2) in insn 130:
  Adding insn 128 to worklist
Processing use of (reg 3 r3) in insn 130:
  Adding insn 129 to worklist
Processing use of (reg 145 [ fpscr ]) in insn 129:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 202) in insn 128:
  Adding insn 125 to worklist
Processing use of (reg 25 sfp) in insn 125:
Processing use of (reg 201) in insn 127:
  Adding insn 124 to worklist
Processing use of (reg 25 sfp) in insn 124:
Processing use of (reg 200) in insn 126:
  Adding insn 123 to worklist
Processing use of (reg 25 sfp) in insn 123:
Processing use of (reg 25 sfp) in insn 136:
Processing use of (subreg (reg 205) 0) in insn 136:
  Adding insn 135 to worklist
Processing use of (reg 204 [ vdd.sign ]) in insn 135:
  Adding insn 132 to worklist
Processing use of (reg 206) in insn 135:
  Adding insn 134 to worklist
Processing use of (reg 25 sfp) in insn 132:
Processing use of (reg 13 sp) in insn 139:
Processing use of (reg 208) in insn 139:
  Adding insn 138 to worklist
Processing use of (reg 13 sp) in insn 144:
Processing use of (reg 0 r0) in insn 144:
  Adding insn 140 to worklist
Processing use of (reg 1 r1) in insn 144:
  Adding insn 141 to worklist
Processing use of (reg 2 r2) in insn 144:
  Adding insn 142 to worklist
Processing use of (reg 3 r3) in insn 144:
  Adding insn 143 to worklist
Processing use of (reg 137 [ exceptions ]) in insn 143:
  Adding insn 131 to worklist
Processing use of (reg 0 r0) in insn 131:
Processing use of (reg 145 [ fpscr ]) in insn 142:
Processing use of (reg 200) in insn 141:
Processing use of (reg 142 [ dd ]) in insn 140:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 0 r0) in insn 156:
Processing use of (reg 13 sp) in insn 120:
Processing use of (reg 0 r0) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 199) in insn 119:
  Adding insn 118 to worklist
Processing use of (reg 25 sfp) in insn 118:
Processing use of (reg 24 cc) in insn 116:
  Adding insn 115 to worklist
Processing use of (reg 198 [ significand ]) in insn 115:
  Adding insn 114 to worklist
Processing use of (subreg (reg 134 [ significand ]) 4) in insn 114:
  Adding insn 87 to worklist
  Adding insn 106 to worklist
Processing use of (reg 198 [ significand ]) in insn 114:
  Adding insn 113 to worklist
Processing use of (subreg (reg 134 [ significand ]) 0) in insn 113:
Processing use of (reg 134 [ significand ]) in insn 106:
Processing use of (reg 197) in insn 106:
  Adding insn 105 to worklist
Processing use of (reg 134 [ significand ]) in insn 87:
  Adding insn 85 to worklist
  Adding insn 86 to worklist
  Adding insn 161 to worklist
Processing use of (reg 221 [+4 ]) in insn 87:
  Adding insn 82 to worklist
Processing use of (reg 183) in insn 82:
  Adding insn 80 to worklist
Processing use of (reg 221 [+4 ]) in insn 82:
  Adding insn 81 to worklist
Processing use of (subreg (reg 139 [ D.4940 ]) 4) in insn 81:
  Adding insn 68 to worklist
Processing use of (reg 0 r0) in insn 68:
Processing use of (reg 1 r1) in insn 68:
Processing use of (subreg (reg 139 [ D.4940 ]) 0) in insn 80:
Processing use of (subreg (reg 134 [ significand ]) 0) in insn 86:
Processing use of (reg 134 [ significand ]) in insn 86:
Processing use of (reg 184) in insn 86:
  Adding insn 84 to worklist
Processing use of (reg 221 [+4 ]) in insn 84:
Processing use of (reg 134 [ significand ]) in insn 85:
Processing use of (reg 220) in insn 85:
  Adding insn 83 to worklist
Processing use of (subreg (reg 139 [ D.4940 ]) 0) in insn 83:
Processing use of (reg 25 sfp) in insn 109:
Processing use of (reg 134 [ significand ]) in insn 109:
Processing use of (reg 24 cc) in insn 111:
  Adding insn 110 to worklist
Processing use of (reg 133 [ D.5500 ]) in insn 110:
  Adding insn 78 to worklist
Processing use of (reg 180) in insn 78:
  Adding insn 77 to worklist
Processing use of (reg 179) in insn 77:
  Adding insn 76 to worklist
Processing use of (subreg (reg 218) 0) in insn 76:
  Adding insn 74 to worklist
Processing use of (subreg (reg 139 [ D.4940 ]) 4) in insn 74:
Processing use of (reg 13 sp) in insn 67:
Processing use of (reg 0 r0) in insn 67:
  Adding insn 66 to worklist
Processing use of (reg 144 [ dm ]) in insn 66:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 25 sfp) in insn 73:
Processing use of (subreg (reg 216) 0) in insn 73:
  Adding insn 71 to worklist
Processing use of (subreg (reg 173) 4) in insn 71:
  Adding insn 70 to worklist
Processing use of (reg 139 [ D.4940 ]) in insn 70:
Processing use of (reg 174) in insn 70:
  Adding insn 69 to worklist
Processing use of (reg 25 sfp) in insn 79:
Processing use of (subreg (reg 133 [ D.5500 ]) 0) in insn 79:
Processing use of (reg 24 cc) in insn 103:
  Adding insn 102 to worklist
Processing use of (reg 196) in insn 102:
  Adding insn 101 to worklist
Processing use of (reg 195) in insn 101:
  Adding insn 100 to worklist
Processing use of (subreg (reg 194) 0) in insn 100:
  Adding insn 99 to worklist
Processing use of (reg 190) in insn 99:
  Adding insn 93 to worklist
Processing use of (reg 193) in insn 99:
  Adding insn 97 to worklist
Processing use of (reg 24 cc) in insn 97:
  Adding insn 96 to worklist
Processing use of (reg 188 [ D.5500 ]) in insn 96:
  Adding insn 90 to worklist
Processing use of (subreg (reg 133 [ D.5500 ]) 0) in insn 90:
Processing use of (reg 24 cc) in insn 93:
  Adding insn 92 to worklist
Processing use of (reg 188 [ D.5500 ]) in insn 92:
Processing use of (reg 189) in insn 92:
  Adding insn 91 to worklist
Processing use of (reg 186) in insn 91:
  Adding insn 89 to worklist
Processing use of (subreg (reg 187) 0) in insn 89:
  Adding insn 88 to worklist
Processing use of (reg 13 sp) in insn 63:
Processing use of (reg 0 r0) in insn 63:
  Adding insn 62 to worklist
Processing use of (reg 172) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 25 sfp) in insn 61:
Processing use of (reg 24 cc) in insn 59:
  Adding insn 58 to worklist
Processing use of (reg 171 [ significand ]) in insn 58:
  Adding insn 57 to worklist
Processing use of (subreg (reg 136 [ significand ]) 4) in insn 57:
  Adding insn 30 to worklist
  Adding insn 49 to worklist
Processing use of (reg 171 [ significand ]) in insn 57:
  Adding insn 56 to worklist
Processing use of (subreg (reg 136 [ significand ]) 0) in insn 56:
Processing use of (reg 136 [ significand ]) in insn 49:
Processing use of (reg 170) in insn 49:
  Adding insn 48 to worklist
Processing use of (reg 136 [ significand ]) in insn 30:
  Adding insn 28 to worklist
  Adding insn 29 to worklist
  Adding insn 160 to worklist
Processing use of (reg 215 [+4 ]) in insn 30:
  Adding insn 25 to worklist
Processing use of (reg 156) in insn 25:
  Adding insn 23 to worklist
Processing use of (reg 215 [+4 ]) in insn 25:
  Adding insn 24 to worklist
Processing use of (subreg (reg 140 [ D.4931 ]) 4) in insn 24:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (subreg (reg 140 [ D.4931 ]) 0) in insn 23:
Processing use of (subreg (reg 136 [ significand ]) 0) in insn 29:
Processing use of (reg 136 [ significand ]) in insn 29:
Processing use of (reg 157) in insn 29:
  Adding insn 27 to worklist
Processing use of (reg 215 [+4 ]) in insn 27:
Processing use of (reg 136 [ significand ]) in insn 28:
Processing use of (reg 214) in insn 28:
  Adding insn 26 to worklist
Processing use of (subreg (reg 140 [ D.4931 ]) 0) in insn 26:
Processing use of (reg 25 sfp) in insn 52:
Processing use of (reg 136 [ significand ]) in insn 52:
Processing use of (reg 24 cc) in insn 54:
  Adding insn 53 to worklist
Processing use of (reg 135 [ D.5485 ]) in insn 53:
  Adding insn 21 to worklist
Processing use of (reg 153) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 152) in insn 20:
  Adding insn 19 to worklist
Processing use of (subreg (reg 212) 0) in insn 19:
  Adding insn 17 to worklist
Processing use of (subreg (reg 140 [ D.4931 ]) 4) in insn 17:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 143 [ dn ]) in insn 9:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 25 sfp) in insn 16:
Processing use of (subreg (reg 210) 0) in insn 16:
  Adding insn 14 to worklist
Processing use of (subreg (reg 146) 4) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 140 [ D.4931 ]) in insn 13:
Processing use of (reg 147) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 25 sfp) in insn 22:
Processing use of (subreg (reg 135 [ D.5485 ]) 0) in insn 22:
Processing use of (reg 24 cc) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 169) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 168) in insn 44:
  Adding insn 43 to worklist
Processing use of (subreg (reg 167) 0) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 163) in insn 42:
  Adding insn 36 to worklist
Processing use of (reg 166) in insn 42:
  Adding insn 40 to worklist
Processing use of (reg 24 cc) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 161 [ D.5485 ]) in insn 39:
  Adding insn 33 to worklist
Processing use of (subreg (reg 135 [ D.5485 ]) 0) in insn 33:
Processing use of (reg 24 cc) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 161 [ D.5485 ]) in insn 35:
Processing use of (reg 162) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 159) in insn 34:
  Adding insn 32 to worklist
Processing use of (subreg (reg 160) 0) in insn 32:
  Adding insn 31 to worklist


vfp_double_fnmul

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={9d,5u} r2={9d,3u} r3={9d,3u} r11={1d,12u} r12={7d} r13={1d,19u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,10u} r25={1d,25u,6d} r26={1d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,3u} r134={5d,8u,1d} r135={1d,3u} r136={5d,8u,1d} r137={1d,1u} r139={1d,5u,1d} r140={1d,5u,1d} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,2u} r162={1d,1u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={2d,2u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r179={1d,1u,1d} r180={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,2u} r189={1d,1u} r190={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={2d,2u} r199={1d,1u} r200={1d,2u} r201={1d,1u} r202={1d,1u} r204={1d,1u,1d} r205={1d,1u} r206={1d,1u} r208={1d,1u} r210={1d,1u} r212={1d,1u} r214={1d,1u} r215={2d,3u} r216={1d,1u} r218={1d,1u} r220={1d,1u} r221={2d,3u} 
;;    total ref usage 1020{808d,199u,13e} in 117{111 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733
0[0,13] 1[13,9] 2[22,9] 3[31,9] 11[40,1] 12[41,7] 13[48,1] 14[49,7] 15[56,6] 16[62,6] 17[68,6] 18[74,6] 19[80,6] 20[86,6] 21[92,6] 22[98,6] 23[104,6] 24[110,16] 25[126,1] 26[127,1] 27[128,6] 28[134,6] 29[140,6] 30[146,6] 31[152,6] 32[158,6] 33[164,6] 34[170,6] 35[176,6] 36[182,6] 37[188,6] 38[194,6] 39[200,6] 40[206,6] 41[212,6] 42[218,6] 43[224,6] 44[230,6] 45[236,6] 46[242,6] 47[248,6] 48[254,6] 49[260,6] 50[266,6] 51[272,6] 52[278,6] 53[284,6] 54[290,6] 55[296,6] 56[302,6] 57[308,6] 58[314,6] 59[320,6] 60[326,6] 61[332,6] 62[338,6] 63[344,6] 64[350,6] 65[356,6] 66[362,6] 67[368,6] 68[374,6] 69[380,6] 70[386,6] 71[392,6] 72[398,6] 73[404,6] 74[410,6] 75[416,6] 76[422,6] 77[428,6] 78[434,6] 79[440,6] 80[446,6] 81[452,6] 82[458,6] 83[464,6] 84[470,6] 85[476,6] 86[482,6] 87[488,6] 88[494,6] 89[500,6] 90[506,6] 91[512,6] 92[518,6] 93[524,6] 94[530,6] 95[536,6] 96[542,6] 97[548,6] 98[554,6] 99[560,6] 100[566,6] 101[572,6] 102[578,6] 103[584,6] 104[590,6] 105[596,6] 106[602,6] 107[608,6] 108[614,6] 109[620,6] 110[626,6] 111[632,6] 112[638,6] 113[644,6] 114[650,6] 115[656,6] 116[662,6] 117[668,6] 118[674,6] 119[680,6] 120[686,6] 121[692,6] 122[698,6] 123[704,6] 124[710,6] 125[716,6] 126[722,6] 127[728,6] 133[734,1] 134[735,5] 135[740,1] 136[741,5] 137[746,1] 139[747,1] 140[748,1] 142[749,1] 143[750,1] 144[751,1] 145[752,1] 146[753,1] 147[754,1] 152[755,1] 153[756,1] 156[757,1] 157[758,1] 159[759,1] 160[760,1] 161[761,1] 162[762,1] 163[763,1] 166[764,1] 167[765,1] 168[766,1] 169[767,1] 170[768,1] 171[769,2] 172[771,1] 173[772,1] 174[773,1] 179[774,1] 180[775,1] 183[776,1] 184[777,1] 186[778,1] 187[779,1] 188[780,1] 189[781,1] 190[782,1] 193[783,1] 194[784,1] 195[785,1] 196[786,1] 197[787,1] 198[788,2] 199[790,1] 200[791,1] 201[792,1] 202[793,1] 204[794,1] 205[795,1] 206[796,1] 208[797,1] 210[798,1] 212[799,1] 214[800,1] 215[801,2] 216[803,1] 218[804,1] 220[805,1] 221[806,2] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 210 212 214 215
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 210 212 214 215
;; live  kill	 14 [lr]
;; rd  in  	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  gen 	(29)
10, 20, 123, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801, 802

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/vfp/vfpdouble.c:937 (set (reg/v:SI 142 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:937 (set (reg/v:SI 143 [ dn ])
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ dn ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:937 (set (reg/v:SI 144 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:937 (set (reg/v:SI 145 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:941 (set (reg:SI 0 r0)
        (reg/v:SI 143 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 143 [ dn ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:941 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:941 (set (reg:DI 140 [ D.4931 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 147)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 146)
        (and:DI (reg:DI 140 [ D.4931 ])
            (reg:DI 147))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 147)
        (expr_list:REG_EQUAL (and:DI (reg:DI 140 [ D.4931 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 14 13 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 210)
        (lshiftrt:SI (subreg:SI (reg:DI 146) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 146)
        (nil)))

(insn 16 14 17 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -30 [0xffffffffffffffe2])) [0 vdn.sign+0 S2 A16])
        (subreg:HI (reg:SI 210) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 210)
        (nil)))

(insn 17 16 19 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 212)
        (ashiftrt:SI (subreg:SI (reg:DI 140 [ D.4931 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 19 17 20 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 152)
        (zero_extend:SI (subreg:HI (reg:SI 212) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 212)
        (nil)))

(insn 20 19 21 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 153)
        (ashift:SI (reg:SI 152)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 152)
        (nil)))

(insn 21 20 22 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 135 [ D.5485 ])
        (lshiftrt:SI (reg:SI 153)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_EQUAL (and:SI (reg:SI 152)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 22 21 23 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0])) [0 vdn.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 135 [ D.5485 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 156)
        (lshiftrt:SI (subreg:SI (reg:DI 140 [ D.4931 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 215 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 140 [ D.4931 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 215 [+4 ])
        (ior:SI (reg:SI 156)
            (reg:SI 215 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 214)
        (ashift:SI (subreg:SI (reg:DI 140 [ D.4931 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 140 [ D.4931 ])
        (nil)))

(insn 27 26 160 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 157)
        (ashift:SI (reg:SI 215 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 160 27 28 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 136 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 28 160 29 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 214)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 214)
        (nil)))

(insn 29 28 30 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 0)
        (ior:SI (reg:SI 157)
            (subreg:SI (reg/v:DI 136 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 157)
        (nil)))

(insn 30 29 31 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 215 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 215 [+4 ])
        (nil)))

(insn 31 30 32 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 160)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 32 31 33 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 159)
        (subreg:HI (reg:SI 160) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 160)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 33 32 34 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 161 [ D.5485 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 135 [ D.5485 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 34 33 35 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 162)
        (sign_extend:SI (reg:HI 159))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 159)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 35 34 36 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.5485 ])
            (reg:SI 162))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 162)
        (nil)))

(insn 36 35 39 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 163)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 39 36 40 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.5485 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 161 [ D.5485 ])
        (nil)))

(insn 40 39 42 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 166)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 42 40 43 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 167)
        (and:SI (reg:SI 163)
            (reg:SI 166))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 166)
        (expr_list:REG_DEAD (reg:SI 163)
            (nil))))

(insn 43 42 44 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 168)
        (subreg:QI (reg:SI 167) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 167)
        (nil)))

(insn 44 43 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 169)
        (zero_extend:SI (reg:QI 168))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 168)
        (nil)))

(insn 45 44 46 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 169)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 169)
        (nil)))

(jump_insn 46 45 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ }u54(13){ }u55(25){ }u56(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 136 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 136 170
;; live  kill	
;; rd  in  	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;; rd  gen 	(2)
742, 768
;; rd  kill	(6)
741, 742, 743, 744, 745, 768

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 170)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 136 [ significand ])
        (ior:DI (reg/v:DI 136 [ significand ])
            (reg:DI 170))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 170)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 136 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(37)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;; rd  gen 	(1)
122
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 141 "" [1 uses])

(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 136 [ significand ])) 163 {*arm_movdi} (nil))

(insn 53 52 54 4 arch/arm/vfp/vfpdouble.c:942 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.5485 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.5485 ])
        (nil)))

(jump_insn 54 53 55 4 arch/arm/vfp/vfpdouble.c:942 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; rd  out 	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u68(11){ }u69(13){ }u70(25){ }u71(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  gen 	 24 [cc] 171
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;; rd  gen 	(2)
121, 769
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 769, 770

;; Pred edge  4 [50.0%]  (fallthru)
(note 55 54 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 5 arch/arm/vfp/vfpdouble.c:942 discrim 1 (set (reg:SI 171 [ significand ])
        (subreg:SI (reg/v:DI 136 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 57 56 58 5 arch/arm/vfp/vfpdouble.c:942 discrim 1 (set (reg:SI 171 [ significand ])
        (ior:SI (reg:SI 171 [ significand ])
            (subreg:SI (reg/v:DI 136 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 136 [ significand ])
        (nil)))

(insn 58 57 59 5 arch/arm/vfp/vfpdouble.c:942 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 171 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 171 [ significand ])
        (nil)))

(jump_insn 59 58 60 5 arch/arm/vfp/vfpdouble.c:942 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 798, 799, 800, 801


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ }u78(13){ }u79(25){ }u80(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 172
;; live  kill	 14 [lr]
;; rd  in  	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 798, 799, 800, 801
;; rd  gen 	(1)
771
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 771

;; Pred edge  5 [29.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 6 arch/arm/vfp/vfpdouble.c:943 (set (reg/f:SI 172)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 62 61 63 6 arch/arm/vfp/vfpdouble.c:943 (set (reg:SI 0 r0)
        (reg/f:SI 172)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 172)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(call_insn 63 62 64 6 arch/arm/vfp/vfpdouble.c:943 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(40)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 798, 799, 800, 801


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u86(11){ }u87(13){ }u88(25){ }u89(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 216 218 220 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 216 218 220 221
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 20, 30, 39, 40, 47, 48, 121, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 798, 799, 800, 801
;; rd  gen 	(25)
6, 18, 117, 734, 737, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 803, 804, 805, 806
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 734, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 803, 804, 805, 806, 807

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 64 63 65 7 142 "" [2 uses])

(note 65 64 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 67 7 arch/arm/vfp/vfpdouble.c:945 (set (reg:SI 0 r0)
        (reg/v:SI 144 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 144 [ dm ])
        (nil)))

(call_insn 67 66 68 7 arch/arm/vfp/vfpdouble.c:945 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 68 67 69 7 arch/arm/vfp/vfpdouble.c:945 (set (reg:DI 139 [ D.4940 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 69 68 70 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 174)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 70 69 71 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 173)
        (and:DI (reg:DI 139 [ D.4940 ])
            (reg:DI 174))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 174)
        (expr_list:REG_EQUAL (and:DI (reg:DI 139 [ D.4940 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 71 70 73 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 216)
        (lshiftrt:SI (subreg:SI (reg:DI 173) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 173)
        (nil)))

(insn 73 71 74 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -46 [0xffffffffffffffd2])) [0 vdm.sign+0 S2 A16])
        (subreg:HI (reg:SI 216) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 216)
        (nil)))

(insn 74 73 76 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 218)
        (ashiftrt:SI (subreg:SI (reg:DI 139 [ D.4940 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 76 74 77 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 179)
        (zero_extend:SI (subreg:HI (reg:SI 218) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 218)
        (nil)))

(insn 77 76 78 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 180)
        (ashift:SI (reg:SI 179)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 179)
        (nil)))

(insn 78 77 79 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 133 [ D.5500 ])
        (lshiftrt:SI (reg:SI 180)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 180)
        (expr_list:REG_EQUAL (and:SI (reg:SI 179)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 79 78 80 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0])) [0 vdm.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 133 [ D.5500 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 80 79 81 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 183)
        (lshiftrt:SI (subreg:SI (reg:DI 139 [ D.4940 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 81 80 82 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 221 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 139 [ D.4940 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 82 81 83 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 221 [+4 ])
        (ior:SI (reg:SI 183)
            (reg:SI 221 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 183)
        (nil)))

(insn 83 82 84 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 220)
        (ashift:SI (subreg:SI (reg:DI 139 [ D.4940 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 139 [ D.4940 ])
        (nil)))

(insn 84 83 161 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 184)
        (ashift:SI (reg:SI 221 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 161 84 85 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 134 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 85 161 86 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 220)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 220)
        (nil)))

(insn 86 85 87 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 0)
        (ior:SI (reg:SI 184)
            (subreg:SI (reg/v:DI 134 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 184)
        (nil)))

(insn 87 86 88 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 221 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 221 [+4 ])
        (nil)))

(insn 88 87 89 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 187)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 89 88 90 7 arch/arm/vfp/vfp.h:309 (set (reg:HI 186)
        (subreg:HI (reg:SI 187) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 187)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 90 89 91 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 188 [ D.5500 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 133 [ D.5500 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 91 90 92 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 189)
        (sign_extend:SI (reg:HI 186))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 186)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 92 91 93 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.5500 ])
            (reg:SI 189))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 189)
        (nil)))

(insn 93 92 96 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 190)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 96 93 97 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.5500 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 188 [ D.5500 ])
        (nil)))

(insn 97 96 99 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 193)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 99 97 100 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 194)
        (and:SI (reg:SI 190)
            (reg:SI 193))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 193)
        (expr_list:REG_DEAD (reg:SI 190)
            (nil))))

(insn 100 99 101 7 arch/arm/vfp/vfp.h:309 (set (reg:QI 195)
        (subreg:QI (reg:SI 194) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 194)
        (nil)))

(insn 101 100 102 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 196)
        (zero_extend:SI (reg:QI 195))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 195)
        (nil)))

(insn 102 101 103 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 196)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 196)
        (nil)))

(jump_insn 103 102 104 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u135(11){ }u136(13){ }u137(25){ }u138(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 134 197
;; live  kill	
;; rd  in  	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(2)
736, 787
;; rd  kill	(6)
735, 736, 737, 738, 739, 787

;; Pred edge  7 [50.0%]  (fallthru)
(note 104 103 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 105 104 106 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 197)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 106 105 107 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 134 [ significand ])
        (ior:DI (reg/v:DI 134 [ significand ])
            (reg:DI 197))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 134 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(63)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u142(11){ }u143(13){ }u144(25){ }u145(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(1)
116
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 107 106 108 9 143 "" [1 uses])

(note 108 107 109 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 134 [ significand ])) 163 {*arm_movdi} (nil))

(insn 110 109 111 9 arch/arm/vfp/vfpdouble.c:946 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.5500 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.5500 ])
        (nil)))

(jump_insn 111 110 112 9 arch/arm/vfp/vfpdouble.c:946 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; rd  out 	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  10 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u150(11){ }u151(13){ }u152(25){ }u153(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  gen 	 24 [cc] 198
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(2)
115, 788
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 788, 789

;; Pred edge  9 [61.0%]  (fallthru)
(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 113 112 114 10 arch/arm/vfp/vfpdouble.c:946 discrim 1 (set (reg:SI 198 [ significand ])
        (subreg:SI (reg/v:DI 134 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 114 113 115 10 arch/arm/vfp/vfpdouble.c:946 discrim 1 (set (reg:SI 198 [ significand ])
        (ior:SI (reg:SI 198 [ significand ])
            (subreg:SI (reg/v:DI 134 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 134 [ significand ])
        (nil)))

(insn 115 114 116 10 arch/arm/vfp/vfpdouble.c:946 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 198 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 198 [ significand ])
        (nil)))

(jump_insn 116 115 117 10 arch/arm/vfp/vfpdouble.c:946 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  11 [39.0%]  (fallthru)
;; Succ edge  12 [61.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u159(11){ }u160(13){ }u161(25){ }u162(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 199
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 199
;; live  kill	 14 [lr]
;; rd  in  	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(1)
790
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 790

;; Pred edge  10 [39.0%]  (fallthru)
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 11 arch/arm/vfp/vfpdouble.c:947 (set (reg/f:SI 199)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 119 118 120 11 arch/arm/vfp/vfpdouble.c:947 (set (reg:SI 0 r0)
        (reg/f:SI 199)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 199)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(call_insn 120 119 121 11 arch/arm/vfp/vfpdouble.c:947 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(66)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u168(11){ }u169(13){ }u170(25){ }u171(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 200 201 202 204 205 206 208
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 137 200 201 202 204 205 206 208
;; live  kill	 14 [lr]
;; rd  in  	(67)
6, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(9)
0, 746, 791, 792, 793, 794, 795, 796, 797
;; rd  kill	(28)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 49, 50, 51, 52, 53, 54, 55, 746, 791, 792, 793, 794, 795, 796, 797

;; Pred edge  9 [39.0%] 
;; Pred edge  10 [61.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 121 120 122 12 144 "" [2 uses])

(note 122 121 123 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 123 122 124 12 arch/arm/vfp/vfpdouble.c:949 (set (reg/f:SI 200)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 124 123 125 12 arch/arm/vfp/vfpdouble.c:949 (set (reg/f:SI 201)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 125 124 126 12 arch/arm/vfp/vfpdouble.c:949 (set (reg/f:SI 202)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 126 125 127 12 arch/arm/vfp/vfpdouble.c:949 (set (reg:SI 0 r0)
        (reg/f:SI 200)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 127 126 128 12 arch/arm/vfp/vfpdouble.c:949 (set (reg:SI 1 r1)
        (reg/f:SI 201)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 201)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(insn 128 127 129 12 arch/arm/vfp/vfpdouble.c:949 (set (reg:SI 2 r2)
        (reg/f:SI 202)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 202)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(insn 129 128 130 12 arch/arm/vfp/vfpdouble.c:949 (set (reg:SI 3 r3)
        (reg/v:SI 145 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 130 129 131 12 arch/arm/vfp/vfpdouble.c:949 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply") [flags 0x3] <function_decl 0x10b08180 vfp_double_multiply>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 131 130 132 12 arch/arm/vfp/vfpdouble.c:949 (set (reg/v:SI 137 [ exceptions ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 132 131 134 12 arch/arm/vfp/vfpdouble.c:950 (set (reg:SI 204 [ vdd.sign ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -14 [0xfffffffffffffff2])) [0 vdd.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 134 132 135 12 arch/arm/vfp/vfpdouble.c:950 (set (reg:SI 206)
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (nil))

(insn 135 134 136 12 arch/arm/vfp/vfpdouble.c:950 (set (reg:SI 205)
        (xor:SI (reg:SI 204 [ vdd.sign ])
            (reg:SI 206))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 206)
        (expr_list:REG_DEAD (reg:SI 204 [ vdd.sign ])
            (expr_list:REG_EQUAL (xor:SI (reg:SI 204 [ vdd.sign ])
                    (const_int -32768 [0xffffffffffff8000]))
                (nil)))))

(insn 136 135 138 12 arch/arm/vfp/vfpdouble.c:950 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -14 [0xfffffffffffffff2])) [0 vdd.sign+0 S2 A16])
        (subreg:HI (reg:SI 205) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 205)
        (nil)))

(insn 138 136 139 12 arch/arm/vfp/vfpdouble.c:952 (set (reg/f:SI 208)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10d43b60>)) 167 {*arm_movsi_insn} (nil))

(insn 139 138 140 12 arch/arm/vfp/vfpdouble.c:952 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 208)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 208)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10d43b60>)
            (nil))))

(insn 140 139 141 12 arch/arm/vfp/vfpdouble.c:952 (set (reg:SI 0 r0)
        (reg/v:SI 142 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 142 [ dd ])
        (nil)))

(insn 141 140 142 12 arch/arm/vfp/vfpdouble.c:952 (set (reg:SI 1 r1)
        (reg/f:SI 200)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 200)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 142 141 143 12 arch/arm/vfp/vfpdouble.c:952 (set (reg:SI 2 r2)
        (reg/v:SI 145 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ fpscr ])
        (nil)))

(insn 143 142 144 12 arch/arm/vfp/vfpdouble.c:952 (set (reg:SI 3 r3)
        (reg/v:SI 137 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ exceptions ])
        (nil)))

(call_insn 144 143 156 12 arch/arm/vfp/vfpdouble.c:952 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 156 144 0 12 arch/arm/vfp/vfpdouble.c:953 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(75)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fmul (vfp_double_fmul)[0:179]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)


vfp_double_fmul

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={9d,5u} r2={9d,3u} r3={9d,3u} r11={1d,12u} r12={7d} r13={1d,19u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,10u} r25={1d,23u,6d} r26={1d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,3u} r134={5d,8u,1d} r135={1d,3u} r136={5d,8u,1d} r137={1d,1u} r139={1d,5u,1d} r140={1d,5u,1d} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,2u} r162={1d,1u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={2d,2u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r179={1d,1u,1d} r180={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,2u} r189={1d,1u} r190={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={2d,2u} r199={1d,1u} r200={1d,2u} r201={1d,1u} r202={1d,1u} r204={1d,1u} r206={1d,1u} r208={1d,1u} r210={1d,1u} r211={2d,3u} r212={1d,1u} r214={1d,1u} r216={1d,1u} r217={2d,3u} 
;;    total ref usage 1011{805d,194u,12e} in 113{107 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733
0[0,13] 1[13,9] 2[22,9] 3[31,9] 11[40,1] 12[41,7] 13[48,1] 14[49,7] 15[56,6] 16[62,6] 17[68,6] 18[74,6] 19[80,6] 20[86,6] 21[92,6] 22[98,6] 23[104,6] 24[110,16] 25[126,1] 26[127,1] 27[128,6] 28[134,6] 29[140,6] 30[146,6] 31[152,6] 32[158,6] 33[164,6] 34[170,6] 35[176,6] 36[182,6] 37[188,6] 38[194,6] 39[200,6] 40[206,6] 41[212,6] 42[218,6] 43[224,6] 44[230,6] 45[236,6] 46[242,6] 47[248,6] 48[254,6] 49[260,6] 50[266,6] 51[272,6] 52[278,6] 53[284,6] 54[290,6] 55[296,6] 56[302,6] 57[308,6] 58[314,6] 59[320,6] 60[326,6] 61[332,6] 62[338,6] 63[344,6] 64[350,6] 65[356,6] 66[362,6] 67[368,6] 68[374,6] 69[380,6] 70[386,6] 71[392,6] 72[398,6] 73[404,6] 74[410,6] 75[416,6] 76[422,6] 77[428,6] 78[434,6] 79[440,6] 80[446,6] 81[452,6] 82[458,6] 83[464,6] 84[470,6] 85[476,6] 86[482,6] 87[488,6] 88[494,6] 89[500,6] 90[506,6] 91[512,6] 92[518,6] 93[524,6] 94[530,6] 95[536,6] 96[542,6] 97[548,6] 98[554,6] 99[560,6] 100[566,6] 101[572,6] 102[578,6] 103[584,6] 104[590,6] 105[596,6] 106[602,6] 107[608,6] 108[614,6] 109[620,6] 110[626,6] 111[632,6] 112[638,6] 113[644,6] 114[650,6] 115[656,6] 116[662,6] 117[668,6] 118[674,6] 119[680,6] 120[686,6] 121[692,6] 122[698,6] 123[704,6] 124[710,6] 125[716,6] 126[722,6] 127[728,6] 133[734,1] 134[735,5] 135[740,1] 136[741,5] 137[746,1] 139[747,1] 140[748,1] 142[749,1] 143[750,1] 144[751,1] 145[752,1] 146[753,1] 147[754,1] 152[755,1] 153[756,1] 156[757,1] 157[758,1] 159[759,1] 160[760,1] 161[761,1] 162[762,1] 163[763,1] 166[764,1] 167[765,1] 168[766,1] 169[767,1] 170[768,1] 171[769,2] 172[771,1] 173[772,1] 174[773,1] 179[774,1] 180[775,1] 183[776,1] 184[777,1] 186[778,1] 187[779,1] 188[780,1] 189[781,1] 190[782,1] 193[783,1] 194[784,1] 195[785,1] 196[786,1] 197[787,1] 198[788,2] 199[790,1] 200[791,1] 201[792,1] 202[793,1] 204[794,1] 206[795,1] 208[796,1] 210[797,1] 211[798,2] 212[800,1] 214[801,1] 216[802,1] 217[803,2] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d12(0){ }d21(1){ }d30(2){ }d39(3){ }d40(11){ }d47(12){ }d48(13){ }d55(14){ }d126(25){ }d127(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  kill	(58)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 126, 127
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d40(bb 0 insn -1) }u1(13){ d48(bb 0 insn -1) }u2(25){ d126(bb 0 insn -1) }u3(26){ d127(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 206 208 210 211
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 206 208 210 211
;; live  kill	 14 [lr]
;; rd  in  	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  gen 	(29)
10, 20, 123, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798, 799
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d12(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d21(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d30(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 9
;;      reg 143 { d750(bb 2 insn 3) }
;;   UD chains for insn luid 5 uid 10
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d11(bb 2 insn 9) }
;;   UD chains for insn luid 6 uid 11
;;      reg 0 { d10(bb 2 insn 10) }
;;      reg 1 { d20(bb 2 insn 10) }
;;   UD chains for insn luid 8 uid 13
;;      reg 140 { d748(bb 2 insn 11) }
;;      reg 147 { d754(bb 2 insn 12) }
;;   eq_note reg 140 { }
;;   UD chains for insn luid 9 uid 14
;;      reg 146 { d753(bb 2 insn 13) }
;;   UD chains for insn luid 10 uid 16
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 206 { d795(bb 2 insn 14) }
;;   UD chains for insn luid 11 uid 17
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 12 uid 19
;;      reg 208 { d796(bb 2 insn 17) }
;;   UD chains for insn luid 13 uid 20
;;      reg 152 { d755(bb 2 insn 19) }
;;   UD chains for insn luid 14 uid 21
;;      reg 153 { d756(bb 2 insn 20) }
;;   eq_note reg 152 { }
;;   UD chains for insn luid 15 uid 22
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 16 uid 23
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 17 uid 24
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 18 uid 25
;;      reg 156 { d757(bb 2 insn 23) }
;;      reg 211 { d799(bb 2 insn 24) }
;;   UD chains for insn luid 19 uid 26
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 20 uid 27
;;      reg 211 { d798(bb 2 insn 25) }
;;   UD chains for insn luid 22 uid 28
;;      reg 136 read/write { d741(bb 2 insn 155) }
;;      reg 210 { d797(bb 2 insn 26) }
;;   UD chains for insn luid 23 uid 29
;;      reg 136 { d745(bb 2 insn 28) d741(bb 2 insn 155) }
;;      reg 136 read/write { d745(bb 2 insn 28) d741(bb 2 insn 155) }
;;      reg 157 { d758(bb 2 insn 27) }
;;   UD chains for insn luid 24 uid 30
;;      reg 136 read/write { d745(bb 2 insn 28) d744(bb 2 insn 29) d741(bb 2 insn 155) }
;;      reg 211 { d798(bb 2 insn 25) }
;;   UD chains for insn luid 26 uid 32
;;      reg 160 { d760(bb 2 insn 31) }
;;   UD chains for insn luid 27 uid 33
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 28 uid 34
;;      reg 159 { d759(bb 2 insn 32) }
;;   UD chains for insn luid 29 uid 35
;;      reg 161 { d761(bb 2 insn 33) }
;;      reg 162 { d762(bb 2 insn 34) }
;;   UD chains for insn luid 30 uid 36
;;      reg 24 { d124(bb 2 insn 35) }
;;   UD chains for insn luid 31 uid 39
;;      reg 161 { d761(bb 2 insn 33) }
;;   UD chains for insn luid 32 uid 40
;;      reg 24 { d111(bb 2 insn 39) }
;;   UD chains for insn luid 33 uid 42
;;      reg 163 { d763(bb 2 insn 36) }
;;      reg 166 { d764(bb 2 insn 40) }
;;   UD chains for insn luid 34 uid 43
;;      reg 167 { d765(bb 2 insn 42) }
;;   UD chains for insn luid 35 uid 44
;;      reg 168 { d766(bb 2 insn 43) }
;;   UD chains for insn luid 36 uid 45
;;      reg 169 { d767(bb 2 insn 44) }
;;   UD chains for insn luid 37 uid 46
;;      reg 24 { d123(bb 2 insn 45) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ d40(bb 0 insn -1) }u54(13){ d48(bb 0 insn -1) }u55(25){ d126(bb 0 insn -1) }u56(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 136 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 136 170
;; live  kill	
;; rd  in  	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;; rd  gen 	(2)
742, 768
;; rd  kill	(6)
741, 742, 743, 744, 745, 768
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(37)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 49
;;      reg 136 { d743(bb 2 insn 30) }
;;      reg 170 { d768(bb 3 insn 48) }
;;   eq_note reg 136 { }

( 2 3 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ d40(bb 0 insn -1) }u61(13){ d48(bb 0 insn -1) }u62(25){ d126(bb 0 insn -1) }u63(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;; rd  gen 	(1)
122
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; rd  out 	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 52
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 53
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 2 uid 54
;;      reg 24 { d122(bb 4 insn 53) }

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u68(11){ d40(bb 0 insn -1) }u69(13){ d48(bb 0 insn -1) }u70(25){ d126(bb 0 insn -1) }u71(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  gen 	 24 [cc] 171
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;; rd  gen 	(2)
121, 769
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 769, 770
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 56
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 57
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;      reg 171 { d770(bb 5 insn 56) }
;;   UD chains for insn luid 2 uid 58
;;      reg 171 { d769(bb 5 insn 57) }
;;   UD chains for insn luid 3 uid 59
;;      reg 24 { d121(bb 5 insn 58) }

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ d40(bb 0 insn -1) }u78(13){ d48(bb 0 insn -1) }u79(25){ d126(bb 0 insn -1) }u80(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 172
;; live  kill	 14 [lr]
;; rd  in  	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 795, 796, 797, 798
;; rd  gen 	(1)
771
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 771
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(40)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 61
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 62
;;      reg 172 { d771(bb 6 insn 61) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 63
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d9(bb 6 insn 62) }

( 4 5 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u86(11){ d40(bb 0 insn -1) }u87(13){ d48(bb 0 insn -1) }u88(25){ d126(bb 0 insn -1) }u89(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 212 214 216 217
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 212 214 216 217
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 20, 30, 39, 40, 47, 48, 121, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 795, 796, 797, 798
;; rd  gen 	(25)
6, 18, 117, 734, 737, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 800, 801, 802, 803
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 734, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 800, 801, 802, 803, 804
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 66
;;      reg 144 { d751(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 67
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d7(bb 7 insn 66) }
;;   UD chains for insn luid 2 uid 68
;;      reg 0 { d6(bb 7 insn 67) }
;;      reg 1 { d18(bb 7 insn 67) }
;;   UD chains for insn luid 4 uid 70
;;      reg 139 { d747(bb 7 insn 68) }
;;      reg 174 { d773(bb 7 insn 69) }
;;   eq_note reg 139 { }
;;   UD chains for insn luid 5 uid 71
;;      reg 173 { d772(bb 7 insn 70) }
;;   UD chains for insn luid 6 uid 73
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 212 { d800(bb 7 insn 71) }
;;   UD chains for insn luid 7 uid 74
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 8 uid 76
;;      reg 214 { d801(bb 7 insn 74) }
;;   UD chains for insn luid 9 uid 77
;;      reg 179 { d774(bb 7 insn 76) }
;;   UD chains for insn luid 10 uid 78
;;      reg 180 { d775(bb 7 insn 77) }
;;   eq_note reg 179 { }
;;   UD chains for insn luid 11 uid 79
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 12 uid 80
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 13 uid 81
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 14 uid 82
;;      reg 183 { d776(bb 7 insn 80) }
;;      reg 217 { d804(bb 7 insn 81) }
;;   UD chains for insn luid 15 uid 83
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 16 uid 84
;;      reg 217 { d803(bb 7 insn 82) }
;;   UD chains for insn luid 18 uid 85
;;      reg 134 read/write { d735(bb 7 insn 156) }
;;      reg 216 { d802(bb 7 insn 83) }
;;   UD chains for insn luid 19 uid 86
;;      reg 134 { d739(bb 7 insn 85) d735(bb 7 insn 156) }
;;      reg 134 read/write { d739(bb 7 insn 85) d735(bb 7 insn 156) }
;;      reg 184 { d777(bb 7 insn 84) }
;;   UD chains for insn luid 20 uid 87
;;      reg 134 read/write { d739(bb 7 insn 85) d738(bb 7 insn 86) d735(bb 7 insn 156) }
;;      reg 217 { d803(bb 7 insn 82) }
;;   UD chains for insn luid 22 uid 89
;;      reg 187 { d779(bb 7 insn 88) }
;;   UD chains for insn luid 23 uid 90
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 24 uid 91
;;      reg 186 { d778(bb 7 insn 89) }
;;   UD chains for insn luid 25 uid 92
;;      reg 188 { d780(bb 7 insn 90) }
;;      reg 189 { d781(bb 7 insn 91) }
;;   UD chains for insn luid 26 uid 93
;;      reg 24 { d118(bb 7 insn 92) }
;;   UD chains for insn luid 27 uid 96
;;      reg 188 { d780(bb 7 insn 90) }
;;   UD chains for insn luid 28 uid 97
;;      reg 24 { d110(bb 7 insn 96) }
;;   UD chains for insn luid 29 uid 99
;;      reg 190 { d782(bb 7 insn 93) }
;;      reg 193 { d783(bb 7 insn 97) }
;;   UD chains for insn luid 30 uid 100
;;      reg 194 { d784(bb 7 insn 99) }
;;   UD chains for insn luid 31 uid 101
;;      reg 195 { d785(bb 7 insn 100) }
;;   UD chains for insn luid 32 uid 102
;;      reg 196 { d786(bb 7 insn 101) }
;;   UD chains for insn luid 33 uid 103
;;      reg 24 { d117(bb 7 insn 102) }

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u135(11){ d40(bb 0 insn -1) }u136(13){ d48(bb 0 insn -1) }u137(25){ d126(bb 0 insn -1) }u138(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 134 197
;; live  kill	
;; rd  in  	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(2)
736, 787
;; rd  kill	(6)
735, 736, 737, 738, 739, 787
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(63)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 106
;;      reg 134 { d737(bb 7 insn 87) }
;;      reg 197 { d787(bb 8 insn 105) }
;;   eq_note reg 134 { }

( 7 8 )->[9]->( 10 12 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u142(11){ d40(bb 0 insn -1) }u143(13){ d48(bb 0 insn -1) }u144(25){ d126(bb 0 insn -1) }u145(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(1)
116
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; rd  out 	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 109
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;   UD chains for insn luid 1 uid 110
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 2 uid 111
;;      reg 24 { d116(bb 9 insn 110) }

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u150(11){ d40(bb 0 insn -1) }u151(13){ d48(bb 0 insn -1) }u152(25){ d126(bb 0 insn -1) }u153(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  gen 	 24 [cc] 198
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(2)
115, 788
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 788, 789
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 113
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;   UD chains for insn luid 1 uid 114
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;      reg 198 { d789(bb 10 insn 113) }
;;   UD chains for insn luid 2 uid 115
;;      reg 198 { d788(bb 10 insn 114) }
;;   UD chains for insn luid 3 uid 116
;;      reg 24 { d115(bb 10 insn 115) }

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u159(11){ d40(bb 0 insn -1) }u160(13){ d48(bb 0 insn -1) }u161(25){ d126(bb 0 insn -1) }u162(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 199
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 199
;; live  kill	 14 [lr]
;; rd  in  	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(1)
790
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 790
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(66)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 118
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 119
;;      reg 199 { d790(bb 11 insn 118) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 120
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d5(bb 11 insn 119) }

( 9 10 11 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u168(11){ d40(bb 0 insn -1) }u169(13){ d48(bb 0 insn -1) }u170(25){ d126(bb 0 insn -1) }u171(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 200 201 202 204
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 137 200 201 202 204
;; live  kill	 14 [lr]
;; rd  in  	(67)
6, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(6)
0, 746, 791, 792, 793, 794
;; rd  kill	(25)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 49, 50, 51, 52, 53, 54, 55, 746, 791, 792, 793, 794
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(72)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 123
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 124
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 125
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 126
;;      reg 200 { d791(bb 12 insn 123) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 4 uid 127
;;      reg 201 { d792(bb 12 insn 124) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 128
;;      reg 202 { d793(bb 12 insn 125) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 6 uid 129
;;      reg 145 { d752(bb 2 insn 5) }
;;   UD chains for insn luid 7 uid 130
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d3(bb 12 insn 126) }
;;      reg 1 { d16(bb 12 insn 127) }
;;      reg 2 { d25(bb 12 insn 128) }
;;      reg 3 { d34(bb 12 insn 129) }
;;   UD chains for insn luid 8 uid 131
;;      reg 0 { d2(bb 12 insn 130) }
;;   UD chains for insn luid 10 uid 134
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 204 { d794(bb 12 insn 133) }
;;   UD chains for insn luid 11 uid 135
;;      reg 142 { d749(bb 2 insn 2) }
;;   UD chains for insn luid 12 uid 136
;;      reg 200 { d791(bb 12 insn 123) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 13 uid 137
;;      reg 145 { d752(bb 2 insn 5) }
;;   UD chains for insn luid 14 uid 138
;;      reg 137 { d746(bb 12 insn 131) }
;;   UD chains for insn luid 15 uid 139
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d1(bb 12 insn 135) }
;;      reg 1 { d13(bb 12 insn 136) }
;;      reg 2 { d23(bb 12 insn 137) }
;;      reg 3 { d32(bb 12 insn 138) }
;;   UD chains for insn luid 16 uid 151
;;      reg 0 { d0(bb 12 insn 139) }

( 12 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u201(0){ d0(bb 12 insn 139) }u202(11){ d40(bb 0 insn -1) }u203(13){ d48(bb 0 insn -1) }u204(14){ }u205(25){ d126(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(72)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(72)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 12 insn 139) }
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d126(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 46 to worklist
  Adding insn 22 to worklist
  Adding insn 16 to worklist
  Adding insn 10 to worklist
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 59 to worklist
  Adding insn 63 to worklist
  Adding insn 103 to worklist
  Adding insn 79 to worklist
  Adding insn 73 to worklist
  Adding insn 67 to worklist
  Adding insn 111 to worklist
  Adding insn 109 to worklist
  Adding insn 116 to worklist
  Adding insn 120 to worklist
  Adding insn 151 to worklist
  Adding insn 139 to worklist
  Adding insn 134 to worklist
  Adding insn 130 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 130:
Processing use of (reg 0 r0) in insn 130:
  Adding insn 126 to worklist
Processing use of (reg 1 r1) in insn 130:
  Adding insn 127 to worklist
Processing use of (reg 2 r2) in insn 130:
  Adding insn 128 to worklist
Processing use of (reg 3 r3) in insn 130:
  Adding insn 129 to worklist
Processing use of (reg 145 [ fpscr ]) in insn 129:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 202) in insn 128:
  Adding insn 125 to worklist
Processing use of (reg 25 sfp) in insn 125:
Processing use of (reg 201) in insn 127:
  Adding insn 124 to worklist
Processing use of (reg 25 sfp) in insn 124:
Processing use of (reg 200) in insn 126:
  Adding insn 123 to worklist
Processing use of (reg 25 sfp) in insn 123:
Processing use of (reg 13 sp) in insn 134:
Processing use of (reg 204) in insn 134:
  Adding insn 133 to worklist
Processing use of (reg 13 sp) in insn 139:
Processing use of (reg 0 r0) in insn 139:
  Adding insn 135 to worklist
Processing use of (reg 1 r1) in insn 139:
  Adding insn 136 to worklist
Processing use of (reg 2 r2) in insn 139:
  Adding insn 137 to worklist
Processing use of (reg 3 r3) in insn 139:
  Adding insn 138 to worklist
Processing use of (reg 137 [ exceptions ]) in insn 138:
  Adding insn 131 to worklist
Processing use of (reg 0 r0) in insn 131:
Processing use of (reg 145 [ fpscr ]) in insn 137:
Processing use of (reg 200) in insn 136:
Processing use of (reg 142 [ dd ]) in insn 135:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 0 r0) in insn 151:
Processing use of (reg 13 sp) in insn 120:
Processing use of (reg 0 r0) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 199) in insn 119:
  Adding insn 118 to worklist
Processing use of (reg 25 sfp) in insn 118:
Processing use of (reg 24 cc) in insn 116:
  Adding insn 115 to worklist
Processing use of (reg 198 [ significand ]) in insn 115:
  Adding insn 114 to worklist
Processing use of (subreg (reg 134 [ significand ]) 4) in insn 114:
  Adding insn 87 to worklist
  Adding insn 106 to worklist
Processing use of (reg 198 [ significand ]) in insn 114:
  Adding insn 113 to worklist
Processing use of (subreg (reg 134 [ significand ]) 0) in insn 113:
Processing use of (reg 134 [ significand ]) in insn 106:
Processing use of (reg 197) in insn 106:
  Adding insn 105 to worklist
Processing use of (reg 134 [ significand ]) in insn 87:
  Adding insn 85 to worklist
  Adding insn 86 to worklist
  Adding insn 156 to worklist
Processing use of (reg 217 [+4 ]) in insn 87:
  Adding insn 82 to worklist
Processing use of (reg 183) in insn 82:
  Adding insn 80 to worklist
Processing use of (reg 217 [+4 ]) in insn 82:
  Adding insn 81 to worklist
Processing use of (subreg (reg 139 [ D.4909 ]) 4) in insn 81:
  Adding insn 68 to worklist
Processing use of (reg 0 r0) in insn 68:
Processing use of (reg 1 r1) in insn 68:
Processing use of (subreg (reg 139 [ D.4909 ]) 0) in insn 80:
Processing use of (subreg (reg 134 [ significand ]) 0) in insn 86:
Processing use of (reg 134 [ significand ]) in insn 86:
Processing use of (reg 184) in insn 86:
  Adding insn 84 to worklist
Processing use of (reg 217 [+4 ]) in insn 84:
Processing use of (reg 134 [ significand ]) in insn 85:
Processing use of (reg 216) in insn 85:
  Adding insn 83 to worklist
Processing use of (subreg (reg 139 [ D.4909 ]) 0) in insn 83:
Processing use of (reg 25 sfp) in insn 109:
Processing use of (reg 134 [ significand ]) in insn 109:
Processing use of (reg 24 cc) in insn 111:
  Adding insn 110 to worklist
Processing use of (reg 133 [ D.5530 ]) in insn 110:
  Adding insn 78 to worklist
Processing use of (reg 180) in insn 78:
  Adding insn 77 to worklist
Processing use of (reg 179) in insn 77:
  Adding insn 76 to worklist
Processing use of (subreg (reg 214) 0) in insn 76:
  Adding insn 74 to worklist
Processing use of (subreg (reg 139 [ D.4909 ]) 4) in insn 74:
Processing use of (reg 13 sp) in insn 67:
Processing use of (reg 0 r0) in insn 67:
  Adding insn 66 to worklist
Processing use of (reg 144 [ dm ]) in insn 66:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 25 sfp) in insn 73:
Processing use of (subreg (reg 212) 0) in insn 73:
  Adding insn 71 to worklist
Processing use of (subreg (reg 173) 4) in insn 71:
  Adding insn 70 to worklist
Processing use of (reg 139 [ D.4909 ]) in insn 70:
Processing use of (reg 174) in insn 70:
  Adding insn 69 to worklist
Processing use of (reg 25 sfp) in insn 79:
Processing use of (subreg (reg 133 [ D.5530 ]) 0) in insn 79:
Processing use of (reg 24 cc) in insn 103:
  Adding insn 102 to worklist
Processing use of (reg 196) in insn 102:
  Adding insn 101 to worklist
Processing use of (reg 195) in insn 101:
  Adding insn 100 to worklist
Processing use of (subreg (reg 194) 0) in insn 100:
  Adding insn 99 to worklist
Processing use of (reg 190) in insn 99:
  Adding insn 93 to worklist
Processing use of (reg 193) in insn 99:
  Adding insn 97 to worklist
Processing use of (reg 24 cc) in insn 97:
  Adding insn 96 to worklist
Processing use of (reg 188 [ D.5530 ]) in insn 96:
  Adding insn 90 to worklist
Processing use of (subreg (reg 133 [ D.5530 ]) 0) in insn 90:
Processing use of (reg 24 cc) in insn 93:
  Adding insn 92 to worklist
Processing use of (reg 188 [ D.5530 ]) in insn 92:
Processing use of (reg 189) in insn 92:
  Adding insn 91 to worklist
Processing use of (reg 186) in insn 91:
  Adding insn 89 to worklist
Processing use of (subreg (reg 187) 0) in insn 89:
  Adding insn 88 to worklist
Processing use of (reg 13 sp) in insn 63:
Processing use of (reg 0 r0) in insn 63:
  Adding insn 62 to worklist
Processing use of (reg 172) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 25 sfp) in insn 61:
Processing use of (reg 24 cc) in insn 59:
  Adding insn 58 to worklist
Processing use of (reg 171 [ significand ]) in insn 58:
  Adding insn 57 to worklist
Processing use of (subreg (reg 136 [ significand ]) 4) in insn 57:
  Adding insn 30 to worklist
  Adding insn 49 to worklist
Processing use of (reg 171 [ significand ]) in insn 57:
  Adding insn 56 to worklist
Processing use of (subreg (reg 136 [ significand ]) 0) in insn 56:
Processing use of (reg 136 [ significand ]) in insn 49:
Processing use of (reg 170) in insn 49:
  Adding insn 48 to worklist
Processing use of (reg 136 [ significand ]) in insn 30:
  Adding insn 28 to worklist
  Adding insn 29 to worklist
  Adding insn 155 to worklist
Processing use of (reg 211 [+4 ]) in insn 30:
  Adding insn 25 to worklist
Processing use of (reg 156) in insn 25:
  Adding insn 23 to worklist
Processing use of (reg 211 [+4 ]) in insn 25:
  Adding insn 24 to worklist
Processing use of (subreg (reg 140 [ D.4900 ]) 4) in insn 24:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (subreg (reg 140 [ D.4900 ]) 0) in insn 23:
Processing use of (subreg (reg 136 [ significand ]) 0) in insn 29:
Processing use of (reg 136 [ significand ]) in insn 29:
Processing use of (reg 157) in insn 29:
  Adding insn 27 to worklist
Processing use of (reg 211 [+4 ]) in insn 27:
Processing use of (reg 136 [ significand ]) in insn 28:
Processing use of (reg 210) in insn 28:
  Adding insn 26 to worklist
Processing use of (subreg (reg 140 [ D.4900 ]) 0) in insn 26:
Processing use of (reg 25 sfp) in insn 52:
Processing use of (reg 136 [ significand ]) in insn 52:
Processing use of (reg 24 cc) in insn 54:
  Adding insn 53 to worklist
Processing use of (reg 135 [ D.5515 ]) in insn 53:
  Adding insn 21 to worklist
Processing use of (reg 153) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 152) in insn 20:
  Adding insn 19 to worklist
Processing use of (subreg (reg 208) 0) in insn 19:
  Adding insn 17 to worklist
Processing use of (subreg (reg 140 [ D.4900 ]) 4) in insn 17:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 143 [ dn ]) in insn 9:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 25 sfp) in insn 16:
Processing use of (subreg (reg 206) 0) in insn 16:
  Adding insn 14 to worklist
Processing use of (subreg (reg 146) 4) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 140 [ D.4900 ]) in insn 13:
Processing use of (reg 147) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 25 sfp) in insn 22:
Processing use of (subreg (reg 135 [ D.5515 ]) 0) in insn 22:
Processing use of (reg 24 cc) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 169) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 168) in insn 44:
  Adding insn 43 to worklist
Processing use of (subreg (reg 167) 0) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 163) in insn 42:
  Adding insn 36 to worklist
Processing use of (reg 166) in insn 42:
  Adding insn 40 to worklist
Processing use of (reg 24 cc) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 161 [ D.5515 ]) in insn 39:
  Adding insn 33 to worklist
Processing use of (subreg (reg 135 [ D.5515 ]) 0) in insn 33:
Processing use of (reg 24 cc) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 161 [ D.5515 ]) in insn 35:
Processing use of (reg 162) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 159) in insn 34:
  Adding insn 32 to worklist
Processing use of (subreg (reg 160) 0) in insn 32:
  Adding insn 31 to worklist


vfp_double_fmul

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={9d,5u} r2={9d,3u} r3={9d,3u} r11={1d,12u} r12={7d} r13={1d,19u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,10u} r25={1d,23u,6d} r26={1d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,3u} r134={5d,8u,1d} r135={1d,3u} r136={5d,8u,1d} r137={1d,1u} r139={1d,5u,1d} r140={1d,5u,1d} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,2u} r162={1d,1u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={2d,2u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r179={1d,1u,1d} r180={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,2u} r189={1d,1u} r190={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={2d,2u} r199={1d,1u} r200={1d,2u} r201={1d,1u} r202={1d,1u} r204={1d,1u} r206={1d,1u} r208={1d,1u} r210={1d,1u} r211={2d,3u} r212={1d,1u} r214={1d,1u} r216={1d,1u} r217={2d,3u} 
;;    total ref usage 1011{805d,194u,12e} in 113{107 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733
0[0,13] 1[13,9] 2[22,9] 3[31,9] 11[40,1] 12[41,7] 13[48,1] 14[49,7] 15[56,6] 16[62,6] 17[68,6] 18[74,6] 19[80,6] 20[86,6] 21[92,6] 22[98,6] 23[104,6] 24[110,16] 25[126,1] 26[127,1] 27[128,6] 28[134,6] 29[140,6] 30[146,6] 31[152,6] 32[158,6] 33[164,6] 34[170,6] 35[176,6] 36[182,6] 37[188,6] 38[194,6] 39[200,6] 40[206,6] 41[212,6] 42[218,6] 43[224,6] 44[230,6] 45[236,6] 46[242,6] 47[248,6] 48[254,6] 49[260,6] 50[266,6] 51[272,6] 52[278,6] 53[284,6] 54[290,6] 55[296,6] 56[302,6] 57[308,6] 58[314,6] 59[320,6] 60[326,6] 61[332,6] 62[338,6] 63[344,6] 64[350,6] 65[356,6] 66[362,6] 67[368,6] 68[374,6] 69[380,6] 70[386,6] 71[392,6] 72[398,6] 73[404,6] 74[410,6] 75[416,6] 76[422,6] 77[428,6] 78[434,6] 79[440,6] 80[446,6] 81[452,6] 82[458,6] 83[464,6] 84[470,6] 85[476,6] 86[482,6] 87[488,6] 88[494,6] 89[500,6] 90[506,6] 91[512,6] 92[518,6] 93[524,6] 94[530,6] 95[536,6] 96[542,6] 97[548,6] 98[554,6] 99[560,6] 100[566,6] 101[572,6] 102[578,6] 103[584,6] 104[590,6] 105[596,6] 106[602,6] 107[608,6] 108[614,6] 109[620,6] 110[626,6] 111[632,6] 112[638,6] 113[644,6] 114[650,6] 115[656,6] 116[662,6] 117[668,6] 118[674,6] 119[680,6] 120[686,6] 121[692,6] 122[698,6] 123[704,6] 124[710,6] 125[716,6] 126[722,6] 127[728,6] 133[734,1] 134[735,5] 135[740,1] 136[741,5] 137[746,1] 139[747,1] 140[748,1] 142[749,1] 143[750,1] 144[751,1] 145[752,1] 146[753,1] 147[754,1] 152[755,1] 153[756,1] 156[757,1] 157[758,1] 159[759,1] 160[760,1] 161[761,1] 162[762,1] 163[763,1] 166[764,1] 167[765,1] 168[766,1] 169[767,1] 170[768,1] 171[769,2] 172[771,1] 173[772,1] 174[773,1] 179[774,1] 180[775,1] 183[776,1] 184[777,1] 186[778,1] 187[779,1] 188[780,1] 189[781,1] 190[782,1] 193[783,1] 194[784,1] 195[785,1] 196[786,1] 197[787,1] 198[788,2] 199[790,1] 200[791,1] 201[792,1] 202[793,1] 204[794,1] 206[795,1] 208[796,1] 210[797,1] 211[798,2] 212[800,1] 214[801,1] 216[802,1] 217[803,2] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 206 208 210 211
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 206 208 210 211
;; live  kill	 14 [lr]
;; rd  in  	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  gen 	(29)
10, 20, 123, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798, 799

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/vfp/vfpdouble.c:917 (set (reg/v:SI 142 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:917 (set (reg/v:SI 143 [ dn ])
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ dn ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:917 (set (reg/v:SI 144 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:917 (set (reg/v:SI 145 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:921 (set (reg:SI 0 r0)
        (reg/v:SI 143 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 143 [ dn ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:921 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:921 (set (reg:DI 140 [ D.4900 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 147)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 146)
        (and:DI (reg:DI 140 [ D.4900 ])
            (reg:DI 147))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 147)
        (expr_list:REG_EQUAL (and:DI (reg:DI 140 [ D.4900 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 14 13 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 206)
        (lshiftrt:SI (subreg:SI (reg:DI 146) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 146)
        (nil)))

(insn 16 14 17 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -30 [0xffffffffffffffe2])) [0 vdn.sign+0 S2 A16])
        (subreg:HI (reg:SI 206) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 206)
        (nil)))

(insn 17 16 19 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 208)
        (ashiftrt:SI (subreg:SI (reg:DI 140 [ D.4900 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 19 17 20 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 152)
        (zero_extend:SI (subreg:HI (reg:SI 208) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 208)
        (nil)))

(insn 20 19 21 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 153)
        (ashift:SI (reg:SI 152)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 152)
        (nil)))

(insn 21 20 22 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 135 [ D.5515 ])
        (lshiftrt:SI (reg:SI 153)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_EQUAL (and:SI (reg:SI 152)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 22 21 23 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0])) [0 vdn.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 135 [ D.5515 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 156)
        (lshiftrt:SI (subreg:SI (reg:DI 140 [ D.4900 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 211 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 140 [ D.4900 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 211 [+4 ])
        (ior:SI (reg:SI 156)
            (reg:SI 211 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 210)
        (ashift:SI (subreg:SI (reg:DI 140 [ D.4900 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 140 [ D.4900 ])
        (nil)))

(insn 27 26 155 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 157)
        (ashift:SI (reg:SI 211 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 155 27 28 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 136 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 28 155 29 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 210)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 210)
        (nil)))

(insn 29 28 30 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 0)
        (ior:SI (reg:SI 157)
            (subreg:SI (reg/v:DI 136 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 157)
        (nil)))

(insn 30 29 31 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 211 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 211 [+4 ])
        (nil)))

(insn 31 30 32 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 160)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 32 31 33 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 159)
        (subreg:HI (reg:SI 160) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 160)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 33 32 34 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 161 [ D.5515 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 135 [ D.5515 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 34 33 35 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 162)
        (sign_extend:SI (reg:HI 159))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 159)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 35 34 36 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.5515 ])
            (reg:SI 162))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 162)
        (nil)))

(insn 36 35 39 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 163)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 39 36 40 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.5515 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 161 [ D.5515 ])
        (nil)))

(insn 40 39 42 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 166)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 42 40 43 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 167)
        (and:SI (reg:SI 163)
            (reg:SI 166))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 166)
        (expr_list:REG_DEAD (reg:SI 163)
            (nil))))

(insn 43 42 44 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 168)
        (subreg:QI (reg:SI 167) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 167)
        (nil)))

(insn 44 43 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 169)
        (zero_extend:SI (reg:QI 168))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 168)
        (nil)))

(insn 45 44 46 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 169)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 169)
        (nil)))

(jump_insn 46 45 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ }u54(13){ }u55(25){ }u56(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 136 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 136 170
;; live  kill	
;; rd  in  	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;; rd  gen 	(2)
742, 768
;; rd  kill	(6)
741, 742, 743, 744, 745, 768

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 170)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 136 [ significand ])
        (ior:DI (reg/v:DI 136 [ significand ])
            (reg:DI 170))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 170)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 136 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(37)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;; rd  gen 	(1)
122
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 149 "" [1 uses])

(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 136 [ significand ])) 163 {*arm_movdi} (nil))

(insn 53 52 54 4 arch/arm/vfp/vfpdouble.c:922 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.5515 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.5515 ])
        (nil)))

(jump_insn 54 53 55 4 arch/arm/vfp/vfpdouble.c:922 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; rd  out 	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u68(11){ }u69(13){ }u70(25){ }u71(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  gen 	 24 [cc] 171
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;; rd  gen 	(2)
121, 769
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 769, 770

;; Pred edge  4 [50.0%]  (fallthru)
(note 55 54 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 5 arch/arm/vfp/vfpdouble.c:922 discrim 1 (set (reg:SI 171 [ significand ])
        (subreg:SI (reg/v:DI 136 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 57 56 58 5 arch/arm/vfp/vfpdouble.c:922 discrim 1 (set (reg:SI 171 [ significand ])
        (ior:SI (reg:SI 171 [ significand ])
            (subreg:SI (reg/v:DI 136 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 136 [ significand ])
        (nil)))

(insn 58 57 59 5 arch/arm/vfp/vfpdouble.c:922 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 171 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 171 [ significand ])
        (nil)))

(jump_insn 59 58 60 5 arch/arm/vfp/vfpdouble.c:922 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 795, 796, 797, 798


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ }u78(13){ }u79(25){ }u80(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 172
;; live  kill	 14 [lr]
;; rd  in  	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 795, 796, 797, 798
;; rd  gen 	(1)
771
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 771

;; Pred edge  5 [29.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 6 arch/arm/vfp/vfpdouble.c:923 (set (reg/f:SI 172)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 62 61 63 6 arch/arm/vfp/vfpdouble.c:923 (set (reg:SI 0 r0)
        (reg/f:SI 172)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 172)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(call_insn 63 62 64 6 arch/arm/vfp/vfpdouble.c:923 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(40)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 795, 796, 797, 798


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u86(11){ }u87(13){ }u88(25){ }u89(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 212 214 216 217
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 212 214 216 217
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 20, 30, 39, 40, 47, 48, 121, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 795, 796, 797, 798
;; rd  gen 	(25)
6, 18, 117, 734, 737, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 800, 801, 802, 803
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 734, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 800, 801, 802, 803, 804

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 64 63 65 7 150 "" [2 uses])

(note 65 64 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 67 7 arch/arm/vfp/vfpdouble.c:925 (set (reg:SI 0 r0)
        (reg/v:SI 144 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 144 [ dm ])
        (nil)))

(call_insn 67 66 68 7 arch/arm/vfp/vfpdouble.c:925 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 68 67 69 7 arch/arm/vfp/vfpdouble.c:925 (set (reg:DI 139 [ D.4909 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 69 68 70 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 174)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 70 69 71 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 173)
        (and:DI (reg:DI 139 [ D.4909 ])
            (reg:DI 174))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 174)
        (expr_list:REG_EQUAL (and:DI (reg:DI 139 [ D.4909 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 71 70 73 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 212)
        (lshiftrt:SI (subreg:SI (reg:DI 173) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 173)
        (nil)))

(insn 73 71 74 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -46 [0xffffffffffffffd2])) [0 vdm.sign+0 S2 A16])
        (subreg:HI (reg:SI 212) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 212)
        (nil)))

(insn 74 73 76 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 214)
        (ashiftrt:SI (subreg:SI (reg:DI 139 [ D.4909 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 76 74 77 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 179)
        (zero_extend:SI (subreg:HI (reg:SI 214) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 214)
        (nil)))

(insn 77 76 78 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 180)
        (ashift:SI (reg:SI 179)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 179)
        (nil)))

(insn 78 77 79 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 133 [ D.5530 ])
        (lshiftrt:SI (reg:SI 180)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 180)
        (expr_list:REG_EQUAL (and:SI (reg:SI 179)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 79 78 80 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0])) [0 vdm.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 133 [ D.5530 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 80 79 81 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 183)
        (lshiftrt:SI (subreg:SI (reg:DI 139 [ D.4909 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 81 80 82 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 217 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 139 [ D.4909 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 82 81 83 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 217 [+4 ])
        (ior:SI (reg:SI 183)
            (reg:SI 217 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 183)
        (nil)))

(insn 83 82 84 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 216)
        (ashift:SI (subreg:SI (reg:DI 139 [ D.4909 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 139 [ D.4909 ])
        (nil)))

(insn 84 83 156 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 184)
        (ashift:SI (reg:SI 217 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 156 84 85 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 134 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 85 156 86 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 216)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 216)
        (nil)))

(insn 86 85 87 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 0)
        (ior:SI (reg:SI 184)
            (subreg:SI (reg/v:DI 134 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 184)
        (nil)))

(insn 87 86 88 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 217 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 217 [+4 ])
        (nil)))

(insn 88 87 89 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 187)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 89 88 90 7 arch/arm/vfp/vfp.h:309 (set (reg:HI 186)
        (subreg:HI (reg:SI 187) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 187)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 90 89 91 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 188 [ D.5530 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 133 [ D.5530 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 91 90 92 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 189)
        (sign_extend:SI (reg:HI 186))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 186)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 92 91 93 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.5530 ])
            (reg:SI 189))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 189)
        (nil)))

(insn 93 92 96 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 190)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 96 93 97 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.5530 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 188 [ D.5530 ])
        (nil)))

(insn 97 96 99 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 193)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 99 97 100 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 194)
        (and:SI (reg:SI 190)
            (reg:SI 193))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 193)
        (expr_list:REG_DEAD (reg:SI 190)
            (nil))))

(insn 100 99 101 7 arch/arm/vfp/vfp.h:309 (set (reg:QI 195)
        (subreg:QI (reg:SI 194) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 194)
        (nil)))

(insn 101 100 102 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 196)
        (zero_extend:SI (reg:QI 195))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 195)
        (nil)))

(insn 102 101 103 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 196)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 196)
        (nil)))

(jump_insn 103 102 104 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u135(11){ }u136(13){ }u137(25){ }u138(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 134 197
;; live  kill	
;; rd  in  	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(2)
736, 787
;; rd  kill	(6)
735, 736, 737, 738, 739, 787

;; Pred edge  7 [50.0%]  (fallthru)
(note 104 103 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 105 104 106 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 197)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 106 105 107 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 134 [ significand ])
        (ior:DI (reg/v:DI 134 [ significand ])
            (reg:DI 197))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 134 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(63)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u142(11){ }u143(13){ }u144(25){ }u145(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(1)
116
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 107 106 108 9 151 "" [1 uses])

(note 108 107 109 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 134 [ significand ])) 163 {*arm_movdi} (nil))

(insn 110 109 111 9 arch/arm/vfp/vfpdouble.c:926 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.5530 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.5530 ])
        (nil)))

(jump_insn 111 110 112 9 arch/arm/vfp/vfpdouble.c:926 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; rd  out 	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  10 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u150(11){ }u151(13){ }u152(25){ }u153(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  gen 	 24 [cc] 198
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(2)
115, 788
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 788, 789

;; Pred edge  9 [61.0%]  (fallthru)
(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 113 112 114 10 arch/arm/vfp/vfpdouble.c:926 discrim 1 (set (reg:SI 198 [ significand ])
        (subreg:SI (reg/v:DI 134 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 114 113 115 10 arch/arm/vfp/vfpdouble.c:926 discrim 1 (set (reg:SI 198 [ significand ])
        (ior:SI (reg:SI 198 [ significand ])
            (subreg:SI (reg/v:DI 134 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 134 [ significand ])
        (nil)))

(insn 115 114 116 10 arch/arm/vfp/vfpdouble.c:926 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 198 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 198 [ significand ])
        (nil)))

(jump_insn 116 115 117 10 arch/arm/vfp/vfpdouble.c:926 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  11 [39.0%]  (fallthru)
;; Succ edge  12 [61.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u159(11){ }u160(13){ }u161(25){ }u162(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 199
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 199
;; live  kill	 14 [lr]
;; rd  in  	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(1)
790
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 790

;; Pred edge  10 [39.0%]  (fallthru)
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 11 arch/arm/vfp/vfpdouble.c:927 (set (reg/f:SI 199)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 119 118 120 11 arch/arm/vfp/vfpdouble.c:927 (set (reg:SI 0 r0)
        (reg/f:SI 199)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 199)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(call_insn 120 119 121 11 arch/arm/vfp/vfpdouble.c:927 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(66)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u168(11){ }u169(13){ }u170(25){ }u171(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 200 201 202 204
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 137 200 201 202 204
;; live  kill	 14 [lr]
;; rd  in  	(67)
6, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(6)
0, 746, 791, 792, 793, 794
;; rd  kill	(25)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 49, 50, 51, 52, 53, 54, 55, 746, 791, 792, 793, 794

;; Pred edge  9 [39.0%] 
;; Pred edge  10 [61.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 121 120 122 12 152 "" [2 uses])

(note 122 121 123 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 123 122 124 12 arch/arm/vfp/vfpdouble.c:929 (set (reg/f:SI 200)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 124 123 125 12 arch/arm/vfp/vfpdouble.c:929 (set (reg/f:SI 201)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 125 124 126 12 arch/arm/vfp/vfpdouble.c:929 (set (reg/f:SI 202)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 126 125 127 12 arch/arm/vfp/vfpdouble.c:929 (set (reg:SI 0 r0)
        (reg/f:SI 200)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 127 126 128 12 arch/arm/vfp/vfpdouble.c:929 (set (reg:SI 1 r1)
        (reg/f:SI 201)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 201)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(insn 128 127 129 12 arch/arm/vfp/vfpdouble.c:929 (set (reg:SI 2 r2)
        (reg/f:SI 202)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 202)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(insn 129 128 130 12 arch/arm/vfp/vfpdouble.c:929 (set (reg:SI 3 r3)
        (reg/v:SI 145 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 130 129 131 12 arch/arm/vfp/vfpdouble.c:929 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply") [flags 0x3] <function_decl 0x10b08180 vfp_double_multiply>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 131 130 133 12 arch/arm/vfp/vfpdouble.c:929 (set (reg/v:SI 137 [ exceptions ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 133 131 134 12 arch/arm/vfp/vfpdouble.c:930 (set (reg/f:SI 204)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x10d50fc0>)) 167 {*arm_movsi_insn} (nil))

(insn 134 133 135 12 arch/arm/vfp/vfpdouble.c:930 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 204)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 204)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x10d50fc0>)
            (nil))))

(insn 135 134 136 12 arch/arm/vfp/vfpdouble.c:930 (set (reg:SI 0 r0)
        (reg/v:SI 142 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 142 [ dd ])
        (nil)))

(insn 136 135 137 12 arch/arm/vfp/vfpdouble.c:930 (set (reg:SI 1 r1)
        (reg/f:SI 200)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 200)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 137 136 138 12 arch/arm/vfp/vfpdouble.c:930 (set (reg:SI 2 r2)
        (reg/v:SI 145 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ fpscr ])
        (nil)))

(insn 138 137 139 12 arch/arm/vfp/vfpdouble.c:930 (set (reg:SI 3 r3)
        (reg/v:SI 137 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ exceptions ])
        (nil)))

(call_insn 139 138 151 12 arch/arm/vfp/vfpdouble.c:930 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 151 139 0 12 arch/arm/vfp/vfpdouble.c:931 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(72)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fdiv (vfp_double_fdiv)[0:183]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 76 n_edges 111 count 150 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 76 n_edges 111 count 152 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 76 n_edges 111 count 152 (    2)


vfp_double_fdiv

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={22d,19u} r1={19d,10u} r2={17d,8u} r3={15d,5u} r4={2d,2u} r11={1d,75u} r12={12d} r13={1d,85u} r14={12d,1u} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={77d,46u} r25={1d,115u,9d} r26={1d,74u} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} r134={1d,2u} r135={3d,5u} r136={1d,1u} r137={1d,4u} r138={1d,1u} r139={1d,2u} r140={3d,6u} r141={1d,1u} r142={1d,4u} r143={5d,7u,2d} r149={2d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,3u} r154={1d,1u} r156={3d,7u} r157={3d,3u} r158={2d,3u} r159={2d,2u} r160={4d,6u,3d} r161={1d,6u} r162={1d,2u} r163={1d,3u} r164={1d,1u} r165={1d,3u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={2d,1u} r174={1d,2u} r175={1d,3u,1d} r176={1d,2u} r177={1d,4u} r178={5d,11u,2d} r179={1d,2u} r180={5d,6u,1d} r181={2d,3u} r182={2d,2u} r183={4d,5u} r184={4d,5u} r185={7d,1u} r186={1d,3u} r188={1d,2u} r189={1d,5u,1d} r190={1d,5u,1d} r192={1d,3u} r193={1d,1u} r194={1d,1u} r195={1d,3u} r196={1d,1u} r197={1d,1u} r202={1d,1u,1d} r203={1d,1u} r206={1d,1u} r207={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,2u} r212={1d,1u} r213={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r227={1d,1u,1d} r228={1d,1u} r231={1d,1u} r232={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,2u} r237={1d,1u} r238={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={2d,2u} r254={1d,2u} r255={1d,1u} r256={2d,2u} r257={2d,2u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={2d,2u} r264={1d,2u} r265={1d,1u} r266={2d,2u} r267={2d,2u} r268={1d,1u} r269={1d,3u} r270={1d,1u} r271={1d,2u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r281={1d,1u,1d} r282={1d,1u} r283={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,2u} r289={1d,11u} r290={1d,2u} r291={1d,1u} r293={1d,1u} r294={1d,2u} r295={1d,2u} r308={3d,3u} r309={1d,1u} r310={1d,1u} r311={1d,1u} r314={3d,4u} r316={3d,3u} r317={1d,1u} r318={1d,2u} r319={1d,1u} r320={1d,2u} r321={1d,2u} r337={3d,3u} r338={1d,1u} r339={1d,2u} r340={1d,1u} r343={2d,1u} r344={2d,2u} r345={1d,1u} r346={1d,1u} r347={1d,1u} r348={1d,1u} r349={1d,1u} r350={1d,1u} r351={1d,1u} r352={1d,1u} r354={1d,1u} r356={3d,4u} r357={1d,1u} r358={1d,1u} r360={3d,3u} r361={1d,1u} r364={4d,5u} r365={1d,1u} r366={1d,2u} r367={1d,1u} r369={1d,1u} r370={1d,1u} r371={1d,1u} r372={1d,1u} r375={1d,1u} r377={1d,1u} r378={1d,1u} r379={1d,4u} r381={1d,1u} r383={3d,3u} r385={1d,1u} r386={1d,1u} r388={3d,3u} r389={1d,1u} r393={4d,5u} r394={1d,1u} r395={1d,2u} r396={1d,1u} r398={1d,1u} r400={1d,1u} r411={1d,2u} r420={1d,1u} r422={1d,1u} r424={1d,1u} r425={2d,3u} r426={1d,1u} r428={1d,1u} r430={1d,1u} r431={2d,3u} r432={1d,2u} r434={1d,2u} r436={1d,2u} r442={1d,1u} r443={1d,1u} r444={1d,1u} r445={1d,1u} r446={1d,1u} 
;;    total ref usage 2275{1442d,810u,23e} in 420{411 regular + 9 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	
0[0,22] 1[22,19] 2[41,17] 3[58,15] 4[73,2] 11[75,1] 12[76,12] 13[88,1] 14[89,12] 15[101,9] 16[110,9] 17[119,9] 18[128,9] 19[137,9] 20[146,9] 21[155,9] 22[164,9] 23[173,9] 24[182,77] 25[259,1] 26[260,1] 27[261,9] 28[270,9] 29[279,9] 30[288,9] 31[297,9] 32[306,9] 33[315,9] 34[324,9] 35[333,9] 36[342,9] 37[351,9] 38[360,9] 39[369,9] 40[378,9] 41[387,9] 42[396,9] 43[405,9] 44[414,9] 45[423,9] 46[432,9] 47[441,9] 48[450,9] 49[459,9] 50[468,9] 51[477,9] 52[486,9] 53[495,9] 54[504,9] 55[513,9] 56[522,9] 57[531,9] 58[540,9] 59[549,9] 60[558,9] 61[567,9] 62[576,9] 63[585,9] 64[594,9] 65[603,9] 66[612,9] 67[621,9] 68[630,9] 69[639,9] 70[648,9] 71[657,9] 72[666,9] 73[675,9] 74[684,9] 75[693,9] 76[702,9] 77[711,9] 78[720,9] 79[729,9] 80[738,9] 81[747,9] 82[756,9] 83[765,9] 84[774,9] 85[783,9] 86[792,9] 87[801,9] 88[810,9] 89[819,9] 90[828,9] 91[837,9] 92[846,9] 93[855,9] 94[864,9] 95[873,9] 96[882,9] 97[891,9] 98[900,9] 99[909,9] 100[918,9] 101[927,9] 102[936,9] 103[945,9] 104[954,9] 105[963,9] 106[972,9] 107[981,9] 108[990,9] 109[999,9] 110[1008,9] 111[1017,9] 112[1026,9] 113[1035,9] 114[1044,9] 115[1053,9] 116[1062,9] 117[1071,9] 118[1080,9] 119[1089,9] 120[1098,9] 121[1107,9] 122[1116,9] 123[1125,9] 124[1134,9] 125[1143,9] 126[1152,9] 127[1161,9] 134[1170,1] 135[1171,3] 136[1174,1] 137[1175,1] 138[1176,1] 139[1177,1] 140[1178,3] 141[1181,1] 142[1182,1] 143[1183,5] 149[1188,2] 150[1190,1] 151[1191,1] 152[1192,1] 153[1193,1] 154[1194,1] 156[1195,3] 157[1198,3] 158[1201,2] 159[1203,2] 160[1205,4] 161[1209,1] 162[1210,1] 163[1211,1] 164[1212,1] 165[1213,1] 166[1214,1] 167[1215,1] 168[1216,1] 169[1217,2] 174[1219,1] 175[1220,1] 176[1221,1] 177[1222,1] 178[1223,5] 179[1228,1] 180[1229,5] 181[1234,2] 182[1236,2] 183[1238,4] 184[1242,4] 185[1246,7] 186[1253,1] 188[1254,1] 189[1255,1] 190[1256,1] 192[1257,1] 193[1258,1] 194[1259,1] 195[1260,1] 196[1261,1] 197[1262,1] 202[1263,1] 203[1264,1] 206[1265,1] 207[1266,1] 209[1267,1] 210[1268,1] 211[1269,1] 212[1270,1] 213[1271,1] 216[1272,1] 217[1273,1] 218[1274,1] 219[1275,1] 220[1276,1] 221[1277,1] 222[1278,1] 227[1279,1] 228[1280,1] 231[1281,1] 232[1282,1] 234[1283,1] 235[1284,1] 236[1285,1] 237[1286,1] 238[1287,1] 241[1288,1] 242[1289,1] 243[1290,1] 244[1291,1] 245[1292,1] 247[1293,1] 248[1294,1] 249[1295,1] 250[1296,1] 251[1297,1] 252[1298,1] 253[1299,2] 254[1301,1] 255[1302,1] 256[1303,2] 257[1305,2] 258[1307,1] 259[1308,1] 260[1309,1] 261[1310,1] 262[1311,1] 263[1312,2] 264[1314,1] 265[1315,1] 266[1316,2] 267[1318,2] 268[1320,1] 269[1321,1] 270[1322,1] 271[1323,1] 272[1324,1] 273[1325,1] 274[1326,1] 275[1327,1] 276[1328,1] 277[1329,1] 278[1330,1] 279[1331,1] 281[1332,1] 282[1333,1] 283[1334,1] 286[1335,1] 287[1336,1] 288[1337,1] 289[1338,1] 290[1339,1] 291[1340,1] 293[1341,1] 294[1342,1] 295[1343,1] 308[1344,3] 309[1347,1] 310[1348,1] 311[1349,1] 314[1350,3] 316[1353,3] 317[1356,1] 318[1357,1] 319[1358,1] 320[1359,1] 321[1360,1] 337[1361,3] 338[1364,1] 339[1365,1] 340[1366,1] 343[1367,2] 344[1369,2] 345[1371,1] 346[1372,1] 347[1373,1] 348[1374,1] 349[1375,1] 350[1376,1] 351[1377,1] 352[1378,1] 354[1379,1] 356[1380,3] 357[1383,1] 358[1384,1] 360[1385,3] 361[1388,1] 364[1389,4] 365[1393,1] 366[1394,1] 367[1395,1] 369[1396,1] 370[1397,1] 371[1398,1] 372[1399,1] 375[1400,1] 377[1401,1] 378[1402,1] 379[1403,1] 381[1404,1] 383[1405,3] 385[1408,1] 386[1409,1] 388[1410,3] 389[1413,1] 393[1414,4] 394[1418,1] 395[1419,1] 396[1420,1] 398[1421,1] 400[1422,1] 411[1423,1] 420[1424,1] 422[1425,1] 424[1426,1] 425[1427,2] 426[1429,1] 428[1430,1] 430[1431,1] 431[1432,2] 432[1434,1] 434[1435,1] 436[1436,1] 442[1437,1] 443[1438,1] 444[1439,1] 445[1440,1] 446[1441,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d21(0){ }d40(1){ }d57(2){ }d72(3){ }d75(11){ }d87(12){ }d88(13){ }d100(14){ }d259(25){ }d260(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
21, 40, 57, 72, 75, 87, 88, 100, 259, 260
;; rd  kill	(101)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 259, 260
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
21, 40, 57, 72, 75, 87, 88, 100, 259, 260

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d75(bb 0 insn -1) }u1(13){ d88(bb 0 insn -1) }u2(25){ d259(bb 0 insn -1) }u3(26){ d260(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 179 180 190 192 193 194 195 196 197 202 203 206 207 209 210 211 212 213 216 217 218 219 420 422 424 425
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 179 180 190 192 193 194 195 196 197 202 203 206 207 209 210 211 212 213 216 217 218 219 420 422 424 425
;; live  kill	 14 [lr]
;; rd  in  	(10)
21, 40, 57, 72, 75, 87, 88, 100, 259, 260
;; rd  gen 	(29)
19, 39, 256, 1228, 1231, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1424, 1425, 1426, 1427
;; rd  kill	(79)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1228, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1424, 1425, 1426, 1427, 1428
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; rd  out 	(36)
19, 39, 57, 72, 75, 87, 88, 256, 259, 260, 1228, 1231, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1424, 1425, 1426, 1427
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 3
;;      reg 0 { d21(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 1 { d40(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 5
;;      reg 2 { d57(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 6
;;      reg 3 { d72(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 10
;;      reg 193 { d1258(bb 2 insn 4) }
;;   UD chains for insn luid 5 uid 11
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 0 { d20(bb 2 insn 10) }
;;   UD chains for insn luid 6 uid 12
;;      reg 0 { d19(bb 2 insn 11) }
;;      reg 1 { d39(bb 2 insn 11) }
;;   UD chains for insn luid 8 uid 14
;;      reg 190 { d1256(bb 2 insn 12) }
;;      reg 197 { d1262(bb 2 insn 13) }
;;   eq_note reg 190 { }
;;   UD chains for insn luid 9 uid 15
;;      reg 196 { d1261(bb 2 insn 14) }
;;   UD chains for insn luid 10 uid 17
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 420 { d1424(bb 2 insn 15) }
;;   UD chains for insn luid 11 uid 18
;;      reg 190 { d1256(bb 2 insn 12) }
;;   UD chains for insn luid 12 uid 20
;;      reg 422 { d1425(bb 2 insn 18) }
;;   UD chains for insn luid 13 uid 21
;;      reg 202 { d1263(bb 2 insn 20) }
;;   UD chains for insn luid 14 uid 22
;;      reg 203 { d1264(bb 2 insn 21) }
;;   eq_note reg 202 { }
;;   UD chains for insn luid 15 uid 23
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 179 { d1228(bb 2 insn 22) }
;;   UD chains for insn luid 16 uid 24
;;      reg 190 { d1256(bb 2 insn 12) }
;;   UD chains for insn luid 17 uid 25
;;      reg 190 { d1256(bb 2 insn 12) }
;;   UD chains for insn luid 18 uid 26
;;      reg 206 { d1265(bb 2 insn 24) }
;;      reg 425 { d1428(bb 2 insn 25) }
;;   UD chains for insn luid 19 uid 27
;;      reg 190 { d1256(bb 2 insn 12) }
;;   UD chains for insn luid 20 uid 28
;;      reg 425 { d1427(bb 2 insn 26) }
;;   UD chains for insn luid 22 uid 29
;;      reg 180 read/write { d1229(bb 2 insn 853) }
;;      reg 424 { d1426(bb 2 insn 27) }
;;   UD chains for insn luid 23 uid 30
;;      reg 180 { d1233(bb 2 insn 29) d1229(bb 2 insn 853) }
;;      reg 180 read/write { d1233(bb 2 insn 29) d1229(bb 2 insn 853) }
;;      reg 207 { d1266(bb 2 insn 28) }
;;   UD chains for insn luid 24 uid 31
;;      reg 180 read/write { d1233(bb 2 insn 29) d1232(bb 2 insn 30) d1229(bb 2 insn 853) }
;;      reg 425 { d1427(bb 2 insn 26) }
;;   UD chains for insn luid 26 uid 33
;;      reg 210 { d1268(bb 2 insn 32) }
;;   UD chains for insn luid 27 uid 34
;;      reg 179 { d1228(bb 2 insn 22) }
;;   UD chains for insn luid 28 uid 35
;;      reg 209 { d1267(bb 2 insn 33) }
;;   UD chains for insn luid 29 uid 36
;;      reg 211 { d1269(bb 2 insn 34) }
;;      reg 212 { d1270(bb 2 insn 35) }
;;   UD chains for insn luid 30 uid 37
;;      reg 24 { d257(bb 2 insn 36) }
;;   UD chains for insn luid 31 uid 40
;;      reg 211 { d1269(bb 2 insn 34) }
;;   UD chains for insn luid 32 uid 41
;;      reg 24 { d196(bb 2 insn 40) }
;;   UD chains for insn luid 33 uid 43
;;      reg 213 { d1271(bb 2 insn 37) }
;;      reg 216 { d1272(bb 2 insn 41) }
;;   UD chains for insn luid 34 uid 44
;;      reg 217 { d1273(bb 2 insn 43) }
;;   UD chains for insn luid 35 uid 45
;;      reg 218 { d1274(bb 2 insn 44) }
;;   UD chains for insn luid 36 uid 46
;;      reg 219 { d1275(bb 2 insn 45) }
;;   UD chains for insn luid 37 uid 47
;;      reg 24 { d256(bb 2 insn 46) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ d75(bb 0 insn -1) }u54(13){ d88(bb 0 insn -1) }u55(25){ d259(bb 0 insn -1) }u56(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180
;; lr  def 	 180 220
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; live  gen 	 180 220
;; live  kill	
;; rd  in  	(36)
19, 39, 57, 72, 75, 87, 88, 256, 259, 260, 1228, 1231, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1424, 1425, 1426, 1427
;; rd  gen 	(2)
1230, 1276
;; rd  kill	(6)
1229, 1230, 1231, 1232, 1233, 1276
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; rd  out 	(37)
19, 39, 57, 72, 75, 87, 88, 256, 259, 260, 1228, 1230, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1424, 1425, 1426, 1427
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 50
;;      reg 180 { d1231(bb 2 insn 31) }
;;      reg 220 { d1276(bb 3 insn 49) }
;;   eq_note reg 180 { }

( 2 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ d75(bb 0 insn -1) }u61(13){ d88(bb 0 insn -1) }u62(25){ d259(bb 0 insn -1) }u63(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 194
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 176 177 178 189 221 222 227 228 231 232 234 235 236 237 238 241 242 243 244 426 428 430 431
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 176 177 178 189 221 222 227 228 231 232 234 235 236 237 238 241 242 243 244 426 428 430 431
;; live  kill	 14 [lr]
;; rd  in  	(38)
19, 39, 57, 72, 75, 87, 88, 256, 259, 260, 1228, 1230, 1231, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1424, 1425, 1426, 1427
;; rd  gen 	(26)
17, 38, 253, 1221, 1222, 1225, 1255, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1429, 1430, 1431, 1432
;; rd  kill	(76)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1221, 1222, 1255, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1429, 1430, 1431, 1432, 1433
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; rd  out 	(61)
17, 38, 57, 72, 75, 87, 88, 253, 259, 260, 1221, 1222, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 53
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 180 { d1231(bb 2 insn 31) d1230(bb 3 insn 50) }
;;   UD chains for insn luid 1 uid 54
;;      reg 194 { d1259(bb 2 insn 5) }
;;   UD chains for insn luid 2 uid 55
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 0 { d18(bb 4 insn 54) }
;;   UD chains for insn luid 3 uid 56
;;      reg 0 { d17(bb 4 insn 55) }
;;      reg 1 { d38(bb 4 insn 55) }
;;   UD chains for insn luid 5 uid 58
;;      reg 189 { d1255(bb 4 insn 56) }
;;      reg 222 { d1278(bb 4 insn 57) }
;;   eq_note reg 189 { }
;;   UD chains for insn luid 6 uid 59
;;      reg 221 { d1277(bb 4 insn 58) }
;;   UD chains for insn luid 7 uid 61
;;      reg 426 { d1429(bb 4 insn 59) }
;;   UD chains for insn luid 8 uid 62
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 176 { d1221(bb 4 insn 61) }
;;   UD chains for insn luid 9 uid 63
;;      reg 189 { d1255(bb 4 insn 56) }
;;   UD chains for insn luid 10 uid 65
;;      reg 428 { d1430(bb 4 insn 63) }
;;   UD chains for insn luid 11 uid 66
;;      reg 227 { d1279(bb 4 insn 65) }
;;   UD chains for insn luid 12 uid 67
;;      reg 228 { d1280(bb 4 insn 66) }
;;   eq_note reg 227 { }
;;   UD chains for insn luid 13 uid 68
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 177 { d1222(bb 4 insn 67) }
;;   UD chains for insn luid 14 uid 69
;;      reg 189 { d1255(bb 4 insn 56) }
;;   UD chains for insn luid 15 uid 70
;;      reg 189 { d1255(bb 4 insn 56) }
;;   UD chains for insn luid 16 uid 71
;;      reg 231 { d1281(bb 4 insn 69) }
;;      reg 431 { d1433(bb 4 insn 70) }
;;   UD chains for insn luid 17 uid 72
;;      reg 189 { d1255(bb 4 insn 56) }
;;   UD chains for insn luid 18 uid 73
;;      reg 431 { d1432(bb 4 insn 71) }
;;   UD chains for insn luid 20 uid 74
;;      reg 178 read/write { d1223(bb 4 insn 854) }
;;      reg 430 { d1431(bb 4 insn 72) }
;;   UD chains for insn luid 21 uid 75
;;      reg 178 { d1227(bb 4 insn 74) d1223(bb 4 insn 854) }
;;      reg 178 read/write { d1227(bb 4 insn 74) d1223(bb 4 insn 854) }
;;      reg 232 { d1282(bb 4 insn 73) }
;;   UD chains for insn luid 22 uid 76
;;      reg 178 read/write { d1227(bb 4 insn 74) d1226(bb 4 insn 75) d1223(bb 4 insn 854) }
;;      reg 431 { d1432(bb 4 insn 71) }
;;   UD chains for insn luid 24 uid 78
;;      reg 235 { d1284(bb 4 insn 77) }
;;   UD chains for insn luid 25 uid 79
;;      reg 177 { d1222(bb 4 insn 67) }
;;   UD chains for insn luid 26 uid 80
;;      reg 234 { d1283(bb 4 insn 78) }
;;   UD chains for insn luid 27 uid 81
;;      reg 236 { d1285(bb 4 insn 79) }
;;      reg 237 { d1286(bb 4 insn 80) }
;;   UD chains for insn luid 28 uid 82
;;      reg 24 { d254(bb 4 insn 81) }
;;   UD chains for insn luid 29 uid 85
;;      reg 236 { d1285(bb 4 insn 79) }
;;   UD chains for insn luid 30 uid 86
;;      reg 24 { d195(bb 4 insn 85) }
;;   UD chains for insn luid 31 uid 88
;;      reg 238 { d1287(bb 4 insn 82) }
;;      reg 241 { d1288(bb 4 insn 86) }
;;   UD chains for insn luid 32 uid 89
;;      reg 242 { d1289(bb 4 insn 88) }
;;   UD chains for insn luid 33 uid 90
;;      reg 243 { d1290(bb 4 insn 89) }
;;   UD chains for insn luid 34 uid 91
;;      reg 244 { d1291(bb 4 insn 90) }
;;   UD chains for insn luid 35 uid 92
;;      reg 24 { d253(bb 4 insn 91) }

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u112(11){ d75(bb 0 insn -1) }u113(13){ d88(bb 0 insn -1) }u114(25){ d259(bb 0 insn -1) }u115(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178
;; lr  def 	 178 245
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; live  gen 	 178 245
;; live  kill	
;; rd  in  	(61)
17, 38, 57, 72, 75, 87, 88, 253, 259, 260, 1221, 1222, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
1224, 1292
;; rd  kill	(6)
1223, 1224, 1225, 1226, 1227, 1292
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; rd  out 	(62)
17, 38, 57, 72, 75, 87, 88, 253, 259, 260, 1221, 1222, 1224, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 95
;;      reg 178 { d1225(bb 4 insn 76) }
;;      reg 245 { d1292(bb 5 insn 94) }
;;   eq_note reg 178 { }

( 4 5 )->[6]->( 7 10 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u119(11){ d75(bb 0 insn -1) }u120(13){ d88(bb 0 insn -1) }u121(25){ d259(bb 0 insn -1) }u122(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178
;; lr  def 	 24 [cc] 174 247 248 249 250 251 252
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; live  gen 	 24 [cc] 174 247 248 249 250 251 252
;; live  kill	
;; rd  in  	(63)
17, 38, 57, 72, 75, 87, 88, 253, 259, 260, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(8)
252, 1219, 1293, 1294, 1295, 1296, 1297, 1298
;; rd  kill	(7)
1219, 1293, 1294, 1295, 1296, 1297, 1298
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 177 178 192 195
;; rd  out 	(70)
17, 38, 57, 72, 75, 87, 88, 252, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 98
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 178 { d1225(bb 4 insn 76) d1224(bb 5 insn 95) }
;;   UD chains for insn luid 1 uid 99
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 101
;;      reg 176 { d1221(bb 4 insn 61) }
;;      reg 247 { d1293(bb 6 insn 99) }
;;   UD chains for insn luid 3 uid 102
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 248 { d1294(bb 6 insn 101) }
;;   UD chains for insn luid 4 uid 103
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 6 uid 105
;;      reg 250 { d1296(bb 6 insn 104) }
;;   UD chains for insn luid 7 uid 106
;;      reg 174 { d1219(bb 6 insn 103) }
;;   UD chains for insn luid 8 uid 107
;;      reg 249 { d1295(bb 6 insn 105) }
;;   UD chains for insn luid 9 uid 108
;;      reg 251 { d1297(bb 6 insn 106) }
;;      reg 252 { d1298(bb 6 insn 107) }
;;   UD chains for insn luid 10 uid 109
;;      reg 24 { d252(bb 6 insn 108) }

( 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u137(11){ d75(bb 0 insn -1) }u138(13){ d88(bb 0 insn -1) }u139(25){ d259(bb 0 insn -1) }u140(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 175 253
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  gen 	 24 [cc] 175 253
;; live  kill	
;; rd  in  	(70)
17, 38, 57, 72, 75, 87, 88, 252, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(3)
251, 1220, 1299
;; rd  kill	(3)
1220, 1299, 1300
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177 178 192 195
;; rd  out 	(72)
17, 38, 57, 72, 75, 87, 88, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 111
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 112
;;      reg 175 { d1220(bb 7 insn 111) }
;;   UD chains for insn luid 2 uid 113
;;      reg 175 { d1220(bb 7 insn 111) }
;;      reg 253 { d1300(bb 7 insn 112) }
;;   UD chains for insn luid 3 uid 114
;;      reg 253 { d1299(bb 7 insn 113) }
;;   UD chains for insn luid 4 uid 115
;;      reg 24 { d251(bb 7 insn 114) }

( 7 )->[8]->( 13 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u147(11){ d75(bb 0 insn -1) }u148(13){ d88(bb 0 insn -1) }u149(25){ d259(bb 0 insn -1) }u150(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 183
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  gen 	 183
;; live  kill	
;; rd  in  	(72)
17, 38, 57, 72, 75, 87, 88, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1241
;; rd  kill	(4)
1238, 1239, 1240, 1241
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(73)
17, 38, 57, 72, 75, 87, 88, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 7 )->[9]->( 13 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u151(11){ d75(bb 0 insn -1) }u152(13){ d88(bb 0 insn -1) }u153(25){ d259(bb 0 insn -1) }u154(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175
;; lr  def 	 24 [cc] 183 254 255 256
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177 178 192 195
;; live  gen 	 24 [cc] 183 254 255 256
;; live  kill	
;; rd  in  	(72)
17, 38, 57, 72, 75, 87, 88, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
190, 1239, 1301, 1302, 1303
;; rd  kill	(8)
1238, 1239, 1240, 1241, 1301, 1302, 1303, 1304
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(76)
17, 38, 57, 72, 75, 87, 88, 190, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1239, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 123
;;      reg 175 { d1220(bb 7 insn 111) }
;;      reg 255 { d1302(bb 9 insn 122) }
;;   eq_note reg 175 { }
;;   UD chains for insn luid 2 uid 124
;;      reg 254 { d1301(bb 9 insn 123) }
;;   UD chains for insn luid 3 uid 125
;;      reg 254 { d1301(bb 9 insn 123) }
;;      reg 256 { d1304(bb 9 insn 124) }
;;   UD chains for insn luid 4 uid 836
;;      reg 256 { d1303(bb 9 insn 125) }
;;   UD chains for insn luid 5 uid 837
;;      reg 24 { d190(bb 9 insn 836) }

( 6 )->[10]->( 12 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u163(11){ d75(bb 0 insn -1) }u164(13){ d88(bb 0 insn -1) }u165(25){ d259(bb 0 insn -1) }u166(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 177 178 192 195
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(70)
17, 38, 57, 72, 75, 87, 88, 252, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
250
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; rd  out 	(70)
17, 38, 57, 72, 75, 87, 88, 250, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 139
;;      reg 174 { d1219(bb 6 insn 103) }
;;   UD chains for insn luid 1 uid 140
;;      reg 24 { d250(bb 10 insn 139) }

( 10 )->[11]->( 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u169(11){ d75(bb 0 insn -1) }u170(13){ d88(bb 0 insn -1) }u171(25){ d259(bb 0 insn -1) }u172(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 183
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  gen 	 183
;; live  kill	
;; rd  in  	(70)
17, 38, 57, 72, 75, 87, 88, 250, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1240
;; rd  kill	(4)
1238, 1239, 1240, 1241
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(71)
17, 38, 57, 72, 75, 87, 88, 250, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1240, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 10 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u173(11){ d75(bb 0 insn -1) }u174(13){ d88(bb 0 insn -1) }u175(25){ d259(bb 0 insn -1) }u176(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 183 257 258
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  gen 	 24 [cc] 183 257 258
;; live  kill	
;; rd  in  	(70)
17, 38, 57, 72, 75, 87, 88, 250, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(4)
189, 1238, 1305, 1307
;; rd  kill	(7)
1238, 1239, 1240, 1241, 1305, 1306, 1307
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(73)
17, 38, 57, 72, 75, 87, 88, 189, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1305, 1307, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 147
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 148
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 149
;;      reg 257 { d1306(bb 12 insn 147) }
;;      reg 258 { d1307(bb 12 insn 148) }
;;   UD chains for insn luid 3 uid 838
;;      reg 257 { d1305(bb 12 insn 149) }
;;   UD chains for insn luid 4 uid 839
;;      reg 24 { d189(bb 12 insn 838) }

( 12 9 8 11 )->[13]->( 14 17 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u183(11){ d75(bb 0 insn -1) }u184(13){ d88(bb 0 insn -1) }u185(25){ d259(bb 0 insn -1) }u186(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 259 260 261 262
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  gen 	 24 [cc] 259 260 261 262
;; live  kill	
;; rd  in  	(84)
17, 38, 57, 72, 75, 87, 88, 189, 190, 250, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
249, 1308, 1309, 1310, 1311
;; rd  kill	(4)
1308, 1309, 1310, 1311
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(85)
17, 38, 57, 72, 75, 87, 88, 249, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 162
;;      reg 260 { d1309(bb 13 insn 161) }
;;   UD chains for insn luid 2 uid 163
;;      reg 177 { d1222(bb 4 insn 67) }
;;   UD chains for insn luid 3 uid 164
;;      reg 259 { d1308(bb 13 insn 162) }
;;   UD chains for insn luid 4 uid 165
;;      reg 261 { d1310(bb 13 insn 163) }
;;      reg 262 { d1311(bb 13 insn 164) }
;;   UD chains for insn luid 5 uid 166
;;      reg 24 { d249(bb 13 insn 165) }

( 13 )->[14]->( 15 16 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u193(11){ d75(bb 0 insn -1) }u194(13){ d88(bb 0 insn -1) }u195(25){ d259(bb 0 insn -1) }u196(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178
;; lr  def 	 24 [cc] 263
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  gen 	 24 [cc] 263
;; live  kill	
;; rd  in  	(85)
17, 38, 57, 72, 75, 87, 88, 249, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
248, 1312
;; rd  kill	(2)
1312, 1313
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; rd  out 	(86)
17, 38, 57, 72, 75, 87, 88, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 168
;;      reg 178 { d1225(bb 4 insn 76) d1224(bb 5 insn 95) }
;;   UD chains for insn luid 1 uid 169
;;      reg 178 { d1225(bb 4 insn 76) d1224(bb 5 insn 95) }
;;      reg 263 { d1313(bb 14 insn 168) }
;;   UD chains for insn luid 2 uid 170
;;      reg 263 { d1312(bb 14 insn 169) }
;;   UD chains for insn luid 3 uid 171
;;      reg 24 { d248(bb 14 insn 170) }

( 14 )->[15]->( 20 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u202(11){ d75(bb 0 insn -1) }u203(13){ d88(bb 0 insn -1) }u204(25){ d259(bb 0 insn -1) }u205(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 184
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 192 195
;; live  gen 	 184
;; live  kill	
;; rd  in  	(86)
17, 38, 57, 72, 75, 87, 88, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1245
;; rd  kill	(4)
1242, 1243, 1244, 1245
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(87)
17, 38, 57, 72, 75, 87, 88, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 14 )->[16]->( 20 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u206(11){ d75(bb 0 insn -1) }u207(13){ d88(bb 0 insn -1) }u208(25){ d259(bb 0 insn -1) }u209(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178
;; lr  def 	 24 [cc] 184 264 265 266
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  gen 	 24 [cc] 184 264 265 266
;; live  kill	
;; rd  in  	(86)
17, 38, 57, 72, 75, 87, 88, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
188, 1243, 1314, 1315, 1316
;; rd  kill	(8)
1242, 1243, 1244, 1245, 1314, 1315, 1316, 1317
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(90)
17, 38, 57, 72, 75, 87, 88, 188, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1243, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 179
;;      reg 178 { d1225(bb 4 insn 76) d1224(bb 5 insn 95) }
;;      reg 265 { d1315(bb 16 insn 178) }
;;   eq_note reg 178 { }
;;   UD chains for insn luid 2 uid 180
;;      reg 264 { d1314(bb 16 insn 179) }
;;   UD chains for insn luid 3 uid 181
;;      reg 264 { d1314(bb 16 insn 179) }
;;      reg 266 { d1317(bb 16 insn 180) }
;;   UD chains for insn luid 4 uid 840
;;      reg 266 { d1316(bb 16 insn 181) }
;;   UD chains for insn luid 5 uid 841
;;      reg 24 { d188(bb 16 insn 840) }

( 13 )->[17]->( 19 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u218(11){ d75(bb 0 insn -1) }u219(13){ d88(bb 0 insn -1) }u220(25){ d259(bb 0 insn -1) }u221(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(85)
17, 38, 57, 72, 75, 87, 88, 249, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
247
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; rd  out 	(85)
17, 38, 57, 72, 75, 87, 88, 247, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 195
;;      reg 177 { d1222(bb 4 insn 67) }
;;   UD chains for insn luid 1 uid 196
;;      reg 24 { d247(bb 17 insn 195) }

( 17 )->[18]->( 20 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u224(11){ d75(bb 0 insn -1) }u225(13){ d88(bb 0 insn -1) }u226(25){ d259(bb 0 insn -1) }u227(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 184
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 192 195
;; live  gen 	 184
;; live  kill	
;; rd  in  	(85)
17, 38, 57, 72, 75, 87, 88, 247, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1244
;; rd  kill	(4)
1242, 1243, 1244, 1245
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(86)
17, 38, 57, 72, 75, 87, 88, 247, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1244, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 17 )->[19]->( 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u228(11){ d75(bb 0 insn -1) }u229(13){ d88(bb 0 insn -1) }u230(25){ d259(bb 0 insn -1) }u231(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178
;; lr  def 	 24 [cc] 184 267
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  gen 	 24 [cc] 184 267
;; live  kill	
;; rd  in  	(85)
17, 38, 57, 72, 75, 87, 88, 247, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(3)
187, 1242, 1318
;; rd  kill	(6)
1242, 1243, 1244, 1245, 1318, 1319
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(87)
17, 38, 57, 72, 75, 87, 88, 187, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1318, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 203
;;      reg 178 { d1225(bb 4 insn 76) d1224(bb 5 insn 95) }
;;   UD chains for insn luid 1 uid 204
;;      reg 178 { d1225(bb 4 insn 76) d1224(bb 5 insn 95) }
;;      reg 267 { d1319(bb 19 insn 203) }
;;   UD chains for insn luid 2 uid 842
;;      reg 267 { d1318(bb 19 insn 204) }
;;   UD chains for insn luid 3 uid 843
;;      reg 24 { d187(bb 19 insn 842) }

( 19 16 15 18 )->[20]->( 68 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u237(11){ d75(bb 0 insn -1) }u238(13){ d88(bb 0 insn -1) }u239(25){ d259(bb 0 insn -1) }u240(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 24 [cc] 268
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 268
;; live  kill	
;; rd  in  	(97)
17, 38, 57, 72, 75, 87, 88, 187, 188, 247, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
246, 1320
;; rd  kill	(1)
1320
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(95)
17, 38, 57, 72, 75, 87, 88, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 216
;;      reg 183 { d1241(bb 8 insn 117) d1240(bb 11 insn 142) d1239(bb 9 insn 837) d1238(bb 12 insn 839) }
;;   UD chains for insn luid 1 uid 217
;;      reg 268 { d1320(bb 20 insn 216) }
;;   UD chains for insn luid 2 uid 218
;;      reg 24 { d246(bb 20 insn 217) }

( 20 )->[21]->( 70 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u244(11){ d75(bb 0 insn -1) }u245(13){ d88(bb 0 insn -1) }u246(25){ d259(bb 0 insn -1) }u247(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 24 [cc] 269
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 269
;; live  kill	
;; rd  in  	(95)
17, 38, 57, 72, 75, 87, 88, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
245, 1321
;; rd  kill	(1)
1321
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269
;; rd  out 	(96)
17, 38, 57, 72, 75, 87, 88, 245, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 220
;;      reg 184 { d1245(bb 15 insn 173) d1244(bb 18 insn 198) d1243(bb 16 insn 841) d1242(bb 19 insn 843) }
;;   UD chains for insn luid 1 uid 221
;;      reg 269 { d1321(bb 21 insn 220) }
;;   UD chains for insn luid 2 uid 222
;;      reg 24 { d245(bb 21 insn 221) }

( 21 )->[22]->( 74 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u251(11){ d75(bb 0 insn -1) }u252(13){ d88(bb 0 insn -1) }u253(25){ d259(bb 0 insn -1) }u254(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184
;; lr  def 	 24 [cc] 270 271
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269
;; live  gen 	 24 [cc] 270 271
;; live  kill	
;; rd  in  	(96)
17, 38, 57, 72, 75, 87, 88, 245, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(3)
244, 1322, 1323
;; rd  kill	(2)
1322, 1323
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269 271
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269 271
;; rd  out 	(98)
17, 38, 57, 72, 75, 87, 88, 244, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 224
;;      reg 183 { d1241(bb 8 insn 117) d1240(bb 11 insn 142) d1239(bb 9 insn 837) d1238(bb 12 insn 839) }
;;   UD chains for insn luid 1 uid 225
;;      reg 184 { d1245(bb 15 insn 173) d1244(bb 18 insn 198) d1243(bb 16 insn 841) d1242(bb 19 insn 843) }
;;      reg 270 { d1322(bb 22 insn 224) }
;;   UD chains for insn luid 2 uid 226
;;      reg 271 { d1323(bb 22 insn 225) }
;;   UD chains for insn luid 3 uid 227
;;      reg 24 { d244(bb 22 insn 226) }

( 22 )->[23]->( 72 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u260(11){ d75(bb 0 insn -1) }u261(13){ d88(bb 0 insn -1) }u262(25){ d259(bb 0 insn -1) }u263(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 271
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 24 [cc] 272
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 271
;; live  gen 	 24 [cc] 272
;; live  kill	
;; rd  in  	(98)
17, 38, 57, 72, 75, 87, 88, 244, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
243, 1324
;; rd  kill	(1)
1324
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 271
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 271
;; rd  out 	(99)
17, 38, 57, 72, 75, 87, 88, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 229
;;      reg 183 { d1241(bb 8 insn 117) d1240(bb 11 insn 142) d1239(bb 9 insn 837) d1238(bb 12 insn 839) }
;;   UD chains for insn luid 1 uid 230
;;      reg 272 { d1324(bb 23 insn 229) }
;;   UD chains for insn luid 2 uid 231
;;      reg 24 { d243(bb 23 insn 230) }

( 23 )->[24]->( 25 26 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u267(11){ d75(bb 0 insn -1) }u268(13){ d88(bb 0 insn -1) }u269(25){ d259(bb 0 insn -1) }u270(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 24 [cc] 273
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 273
;; live  kill	
;; rd  in  	(99)
17, 38, 57, 72, 75, 87, 88, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
242, 1325
;; rd  kill	(1)
1325
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(100)
17, 38, 57, 72, 75, 87, 88, 242, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 233
;;      reg 184 { d1245(bb 15 insn 173) d1244(bb 18 insn 198) d1243(bb 16 insn 841) d1242(bb 19 insn 843) }
;;   UD chains for insn luid 1 uid 234
;;      reg 273 { d1325(bb 24 insn 233) }
;;   UD chains for insn luid 2 uid 235
;;      reg 24 { d242(bb 24 insn 234) }

( 24 )->[25]->( 73 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u274(11){ d75(bb 0 insn -1) }u275(13){ d88(bb 0 insn -1) }u276(25){ d259(bb 0 insn -1) }u277(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; live  gen 	 185
;; live  kill	
;; rd  in  	(100)
17, 38, 57, 72, 75, 87, 88, 242, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1252
;; rd  kill	(7)
1246, 1247, 1248, 1249, 1250, 1251, 1252
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(101)
17, 38, 57, 72, 75, 87, 88, 242, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 24 )->[26]->( 71 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u278(11){ d75(bb 0 insn -1) }u279(13){ d88(bb 0 insn -1) }u280(25){ d259(bb 0 insn -1) }u281(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 24 [cc] 274
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 274
;; live  kill	
;; rd  in  	(100)
17, 38, 57, 72, 75, 87, 88, 242, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
241, 1326
;; rd  kill	(1)
1326
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(101)
17, 38, 57, 72, 75, 87, 88, 241, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 242
;;      reg 184 { d1245(bb 15 insn 173) d1244(bb 18 insn 198) d1243(bb 16 insn 841) d1242(bb 19 insn 843) }
;;   UD chains for insn luid 1 uid 243
;;      reg 274 { d1326(bb 26 insn 242) }
;;   UD chains for insn luid 2 uid 244
;;      reg 24 { d241(bb 26 insn 243) }

( 26 )->[27]->( 71 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u285(11){ d75(bb 0 insn -1) }u286(13){ d88(bb 0 insn -1) }u287(25){ d259(bb 0 insn -1) }u288(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 24 [cc] 275
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 275
;; live  kill	
;; rd  in  	(101)
17, 38, 57, 72, 75, 87, 88, 241, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
240, 1327
;; rd  kill	(1)
1327
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(102)
17, 38, 57, 72, 75, 87, 88, 240, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 246
;;      reg 183 { d1241(bb 8 insn 117) d1240(bb 11 insn 142) d1239(bb 9 insn 837) d1238(bb 12 insn 839) }
;;   UD chains for insn luid 1 uid 247
;;      reg 275 { d1327(bb 27 insn 246) }
;;   UD chains for insn luid 2 uid 248
;;      reg 24 { d240(bb 27 insn 247) }

( 27 )->[28]->( 29 30 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u292(11){ d75(bb 0 insn -1) }u293(13){ d88(bb 0 insn -1) }u294(25){ d259(bb 0 insn -1) }u295(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 24 [cc] 276
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 276
;; live  kill	
;; rd  in  	(102)
17, 38, 57, 72, 75, 87, 88, 240, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
239, 1328
;; rd  kill	(1)
1328
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; rd  out 	(103)
17, 38, 57, 72, 75, 87, 88, 239, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 250
;;      reg 183 { d1241(bb 8 insn 117) d1240(bb 11 insn 142) d1239(bb 9 insn 837) d1238(bb 12 insn 839) }
;;   UD chains for insn luid 1 uid 251
;;      reg 276 { d1328(bb 28 insn 250) }
;;   UD chains for insn luid 2 uid 252
;;      reg 24 { d239(bb 28 insn 251) }

( 28 )->[29]->( 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u299(11){ d75(bb 0 insn -1) }u300(13){ d88(bb 0 insn -1) }u301(25){ d259(bb 0 insn -1) }u302(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 277
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; live  gen 	 0 [r0] 277
;; live  kill	 14 [lr]
;; rd  in  	(103)
17, 38, 57, 72, 75, 87, 88, 239, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1329
;; rd  kill	(13)
89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1329
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; rd  out 	(104)
17, 38, 57, 72, 75, 87, 88, 239, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 254
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 255
;;      reg 277 { d1329(bb 29 insn 254) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 256
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 0 { d16(bb 29 insn 255) }

( 28 29 )->[30]->( 31 32 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u308(11){ d75(bb 0 insn -1) }u309(13){ d88(bb 0 insn -1) }u310(25){ d259(bb 0 insn -1) }u311(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 24 [cc] 278
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; live  gen 	 24 [cc] 278
;; live  kill	
;; rd  in  	(104)
17, 38, 57, 72, 75, 87, 88, 239, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
237, 1330
;; rd  kill	(1)
1330
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; rd  out 	(105)
17, 38, 57, 72, 75, 87, 88, 237, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 259
;;      reg 184 { d1245(bb 15 insn 173) d1244(bb 18 insn 198) d1243(bb 16 insn 841) d1242(bb 19 insn 843) }
;;   UD chains for insn luid 1 uid 260
;;      reg 278 { d1330(bb 30 insn 259) }
;;   UD chains for insn luid 2 uid 261
;;      reg 24 { d237(bb 30 insn 260) }

( 30 )->[31]->( 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u315(11){ d75(bb 0 insn -1) }u316(13){ d88(bb 0 insn -1) }u317(25){ d259(bb 0 insn -1) }u318(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 279
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 0 [r0] 279
;; live  kill	 14 [lr]
;; rd  in  	(105)
17, 38, 57, 72, 75, 87, 88, 237, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1331
;; rd  kill	(13)
89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1331
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; rd  out 	(106)
17, 38, 57, 72, 75, 87, 88, 237, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 263
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 264
;;      reg 279 { d1331(bb 31 insn 263) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 265
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 0 { d14(bb 31 insn 264) }

( 30 31 )->[32]->( 36 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u324(11){ d75(bb 0 insn -1) }u325(13){ d88(bb 0 insn -1) }u326(25){ d259(bb 0 insn -1) }u327(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 186 188 281 282 283 286 287 288 289 290
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 24 [cc] 186 188 281 282 283 286 287 288 289 290
;; live  kill	 24 [cc]
;; rd  in  	(106)
17, 38, 57, 72, 75, 87, 88, 237, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(11)
194, 1253, 1254, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339
;; rd  kill	(10)
1253, 1254, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; rd  out 	(116)
17, 38, 57, 72, 75, 87, 88, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 268
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 270
;;      reg 281 { d1332(bb 32 insn 268) }
;;   UD chains for insn luid 2 uid 271
;;      reg 283 { d1334(bb 32 insn 270) }
;;   eq_note reg 281 { }
;;   UD chains for insn luid 3 uid 273
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 275
;;      reg 282 { d1333(bb 32 insn 271) }
;;      reg 286 { d1335(bb 32 insn 273) }
;;   UD chains for insn luid 5 uid 276
;;      reg 287 { d1336(bb 32 insn 275) }
;;   UD chains for insn luid 6 uid 277
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 188 { d1254(bb 32 insn 276) }
;;   UD chains for insn luid 7 uid 278
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 8 uid 279
;;      reg 288 { d1337(bb 32 insn 278) }
;;      reg 288 { d1337(bb 32 insn 278) }
;;   UD chains for insn luid 9 uid 281
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 289 { d1338(bb 32 insn 279) }
;;   UD chains for insn luid 10 uid 282
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 11 uid 283
;;      reg 186 { d1253(bb 32 insn 282) }
;;      reg 186 { d1253(bb 32 insn 282) }
;;   UD chains for insn luid 12 uid 284
;;      reg 289 { d1338(bb 32 insn 279) }
;;      reg 290 { d1339(bb 32 insn 283) }
;;   UD chains for insn luid 13 uid 285
;;      reg 24 { d194(bb 32 insn 284) }

( 32 )->[33]->( 35 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u349(11){ d75(bb 0 insn -1) }u350(13){ d88(bb 0 insn -1) }u351(25){ d259(bb 0 insn -1) }u352(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; live  gen 	
;; live  kill	
;; rd  in  	(116)
17, 38, 57, 72, 75, 87, 88, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; rd  out 	(116)
17, 38, 57, 72, 75, 87, 88, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 287
;;      reg 24 { d194(bb 32 insn 284) }

( 33 )->[34]->( 36 35 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u354(11){ d75(bb 0 insn -1) }u355(13){ d88(bb 0 insn -1) }u356(25){ d259(bb 0 insn -1) }u357(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 289 290
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(116)
17, 38, 57, 72, 75, 87, 88, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
193
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289
;; rd  out 	(116)
17, 38, 57, 72, 75, 87, 88, 193, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 288
;;      reg 289 { d1338(bb 32 insn 279) }
;;      reg 290 { d1339(bb 32 insn 283) }
;;   UD chains for insn luid 1 uid 289
;;      reg 24 { d193(bb 34 insn 288) }

( 34 33 )->[35]->( 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u361(11){ d75(bb 0 insn -1) }u362(13){ d88(bb 0 insn -1) }u363(25){ d259(bb 0 insn -1) }u364(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188
;; lr  def 	 24 [cc] 291 293
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289
;; live  gen 	 291 293
;; live  kill	 24 [cc]
;; rd  in  	(117)
17, 38, 57, 72, 75, 87, 88, 193, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
1340, 1341
;; rd  kill	(2)
1340, 1341
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195 289
;; rd  out 	(117)
17, 38, 57, 72, 75, 87, 88, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 296
;;      reg 186 { d1253(bb 32 insn 282) }
;;   UD chains for insn luid 1 uid 297
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 291 { d1340(bb 35 insn 296) }
;;   UD chains for insn luid 2 uid 299
;;      reg 188 { d1254(bb 32 insn 276) }
;;   UD chains for insn luid 3 uid 300
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 293 { d1341(bb 35 insn 299) }

( 35 32 34 )->[36]->( 40 37 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u371(11){ d75(bb 0 insn -1) }u372(13){ d88(bb 0 insn -1) }u373(25){ d259(bb 0 insn -1) }u374(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 289
;; lr  def 	 24 [cc] 161
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195 289
;; live  gen 	 24 [cc] 161
;; live  kill	
;; rd  in  	(119)
17, 38, 57, 72, 75, 87, 88, 193, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
192, 1209
;; rd  kill	(1)
1209
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 161 192 195 289
;; rd  out 	(119)
17, 38, 57, 72, 75, 87, 88, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 303
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 304
;;      reg 161 { d1209(bb 36 insn 303) }
;;      reg 289 { d1338(bb 32 insn 279) }
;;   UD chains for insn luid 2 uid 305
;;      reg 24 { d192(bb 36 insn 304) }

( 36 )->[37]->( 39 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u379(11){ d75(bb 0 insn -1) }u380(13){ d88(bb 0 insn -1) }u381(25){ d259(bb 0 insn -1) }u382(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 161 192 195 289
;; live  gen 	
;; live  kill	
;; rd  in  	(119)
17, 38, 57, 72, 75, 87, 88, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; rd  out 	(119)
17, 38, 57, 72, 75, 87, 88, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 307
;;      reg 24 { d192(bb 36 insn 304) }

( 37 )->[38]->( 40 39 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u384(11){ d75(bb 0 insn -1) }u385(13){ d88(bb 0 insn -1) }u386(25){ d259(bb 0 insn -1) }u387(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 289
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(119)
17, 38, 57, 72, 75, 87, 88, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
191
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; rd  out 	(119)
17, 38, 57, 72, 75, 87, 88, 191, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 308
;;      reg 161 { d1209(bb 36 insn 303) }
;;      reg 289 { d1338(bb 32 insn 279) }
;;   UD chains for insn luid 1 uid 309
;;      reg 24 { d191(bb 38 insn 308) }

( 38 37 )->[39]->( 54 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u391(11){ d75(bb 0 insn -1) }u392(13){ d88(bb 0 insn -1) }u393(25){ d259(bb 0 insn -1) }u394(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 160
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  gen 	 160
;; live  kill	
;; rd  in  	(120)
17, 38, 57, 72, 75, 87, 88, 191, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1208
;; rd  kill	(4)
1205, 1206, 1207, 1208
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; rd  out 	(121)
17, 38, 57, 72, 75, 87, 88, 191, 192, 259, 260, 1208, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 36 38 )->[40]->( 42 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u395(11){ d75(bb 0 insn -1) }u396(13){ d88(bb 0 insn -1) }u397(25){ d259(bb 0 insn -1) }u398(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 289
;; lr  def 	 24 [cc] 156 411
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  gen 	 24 [cc] 156 411
;; live  kill	
;; rd  in  	(120)
17, 38, 57, 72, 75, 87, 88, 191, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(3)
232, 1197, 1423
;; rd  kill	(1)
1423
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; rd  out 	(121)
17, 38, 57, 72, 75, 87, 88, 232, 259, 260, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 321
;;      reg 156 read/write { d1195(bb 40 insn 855) }
;;      reg 289 { d1338(bb 32 insn 279) }
;;   UD chains for insn luid 2 uid 322
;;      reg 156 read/write { d1196(bb 40 insn 321) d1195(bb 40 insn 855) }
;;   UD chains for insn luid 3 uid 323
;;      reg 156 { d1197(bb 40 insn 322) d1196(bb 40 insn 321) d1195(bb 40 insn 855) }
;;   UD chains for insn luid 4 uid 325
;;      reg 161 { d1209(bb 36 insn 303) }
;;      reg 411 { d1423(bb 40 insn 323) }
;;   UD chains for insn luid 5 uid 326
;;      reg 24 { d232(bb 40 insn 325) }

( 40 )->[41]->( 43 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u406(11){ d75(bb 0 insn -1) }u407(13){ d88(bb 0 insn -1) }u408(25){ d259(bb 0 insn -1) }u409(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; live  gen 	 143
;; live  kill	
;; rd  in  	(121)
17, 38, 57, 72, 75, 87, 88, 232, 259, 260, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1187
;; rd  kill	(5)
1183, 1184, 1185, 1186, 1187
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; rd  out 	(122)
17, 38, 57, 72, 75, 87, 88, 232, 259, 260, 1187, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 40 )->[42]->( 43 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u410(11){ d75(bb 0 insn -1) }u411(13){ d88(bb 0 insn -1) }u412(25){ d259(bb 0 insn -1) }u413(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc] 143 400
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 143 400
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; rd  in  	(121)
17, 38, 57, 72, 75, 87, 88, 232, 259, 260, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(7)
12, 34, 52, 67, 74, 1184, 1422
;; rd  kill	(100)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1422
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; rd  out 	(122)
12, 34, 52, 67, 74, 75, 88, 259, 260, 1184, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 342
;;      reg 156 { d1197(bb 40 insn 322) }
;;   UD chains for insn luid 1 uid 343
;;      reg 161 { d1209(bb 36 insn 303) }
;;   UD chains for insn luid 2 uid 344
;;      reg 0 { d12(bb 42 insn 343) }
;;      reg 1 { d35(bb 42 insn 343) }
;;      reg 4 { d74(bb 42 insn 342) }
;;   UD chains for insn luid 3 uid 812
;;      reg 2 { d52(bb 42 insn 344) }
;;   UD chains for insn luid 5 uid 346
;;      reg 143 read/write { d1183(bb 42 insn 856) }
;;      reg 400 { d1422(bb 42 insn 812) }
;;   UD chains for insn luid 6 uid 347
;;      reg 143 read/write { d1186(bb 42 insn 346) d1183(bb 42 insn 856) }
;;      reg 156 { d1197(bb 40 insn 322) }

( 42 41 )->[43]->( 47 44 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u424(11){ d75(bb 0 insn -1) }u425(13){ d88(bb 0 insn -1) }u426(25){ d259(bb 0 insn -1) }u427(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 289
;; lr  def 	 24 [cc] 142 163 164 165 166 167 294 295 432
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; live  gen 	 24 [cc] 142 163 164 165 166 167 294 295 432
;; live  kill	 24 [cc]
;; rd  in  	(129)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 232, 259, 260, 1184, 1187, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(10)
229, 1182, 1211, 1212, 1213, 1214, 1215, 1342, 1343, 1434
;; rd  kill	(9)
1182, 1211, 1212, 1213, 1214, 1215, 1342, 1343, 1434
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; rd  out 	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 350
;;      reg 289 { d1338(bb 32 insn 279) }
;;   UD chains for insn luid 1 uid 352
;;      reg 143 { d1187(bb 41 insn 337) d1184(bb 42 insn 347) }
;;   UD chains for insn luid 2 uid 357
;;      reg 294 { d1342(bb 43 insn 350) }
;;      reg 295 { d1343(bb 43 insn 352) }
;;   UD chains for insn luid 3 uid 361
;;      reg 156 { d1197(bb 40 insn 322) }
;;   UD chains for insn luid 4 uid 366
;;      reg 163 { d1211(bb 43 insn 361) }
;;      reg 295 { d1343(bb 43 insn 352) }
;;   UD chains for insn luid 5 uid 370
;;      reg 143 { d1187(bb 41 insn 337) d1184(bb 42 insn 347) }
;;   UD chains for insn luid 6 uid 377
;;      reg 294 { d1342(bb 43 insn 350) }
;;      reg 432 { d1434(bb 43 insn 370) }
;;   UD chains for insn luid 7 uid 381
;;      reg 165 { d1213(bb 43 insn 377) }
;;      reg 166 { d1214(bb 43 insn 366) }
;;   UD chains for insn luid 8 uid 385
;;      reg 163 { d1211(bb 43 insn 361) }
;;      reg 432 { d1434(bb 43 insn 370) }
;;   UD chains for insn luid 9 uid 389
;;      reg 142 { d1182(bb 43 insn 381) }
;;      reg 165 { d1213(bb 43 insn 377) }
;;   UD chains for insn luid 10 uid 390
;;      reg 24 { d229(bb 43 insn 389) }

( 43 )->[44]->( 46 45 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u445(11){ d75(bb 0 insn -1) }u446(13){ d88(bb 0 insn -1) }u447(25){ d259(bb 0 insn -1) }u448(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; live  gen 	
;; live  kill	
;; rd  in  	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; rd  out 	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 392
;;      reg 24 { d229(bb 43 insn 389) }

( 44 )->[45]->( 47 46 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u450(11){ d75(bb 0 insn -1) }u451(13){ d88(bb 0 insn -1) }u452(25){ d259(bb 0 insn -1) }u453(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 165
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(1)
228
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; rd  out 	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 393
;;      reg 142 { d1182(bb 43 insn 381) }
;;      reg 165 { d1213(bb 43 insn 377) }
;;   UD chains for insn luid 1 uid 394
;;      reg 24 { d228(bb 45 insn 393) }

( 45 44 )->[46]->( 48 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u457(11){ d75(bb 0 insn -1) }u458(13){ d88(bb 0 insn -1) }u459(25){ d259(bb 0 insn -1) }u460(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; live  gen 	 169
;; live  kill	
;; rd  in  	(139)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(1)
1218
;; rd  kill	(2)
1217, 1218
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; rd  out 	(140)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 43 45 )->[47]->( 48 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u461(11){ d75(bb 0 insn -1) }u462(13){ d88(bb 0 insn -1) }u463(25){ d259(bb 0 insn -1) }u464(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; live  gen 	 169
;; live  kill	
;; rd  in  	(139)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(1)
1217
;; rd  kill	(2)
1217, 1218
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; rd  out 	(140)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1217, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 47 46 )->[48]->( 50 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u465(11){ d75(bb 0 insn -1) }u466(13){ d88(bb 0 insn -1) }u467(25){ d259(bb 0 insn -1) }u468(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 161 164 167 169 289
;; lr  def 	 24 [cc] 139 140 141 157 158 159 168 308 309 310 311 442 446
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; live  gen 	 24 [cc] 139 140 141 157 158 159 168 308 309 310 311 442 446
;; live  kill	 24 [cc]
;; rd  in  	(141)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(13)
1177, 1180, 1181, 1199, 1202, 1204, 1216, 1345, 1347, 1348, 1349, 1437, 1441
;; rd  kill	(12)
1177, 1181, 1201, 1202, 1203, 1204, 1216, 1347, 1348, 1349, 1437, 1441
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; rd  out 	(152)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 259, 260, 1177, 1180, 1181, 1182, 1184, 1187, 1197, 1199, 1202, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 409
;;      reg 140 read/write { d1178(bb 48 insn 857) }
;;      reg 142 { d1182(bb 43 insn 381) }
;;   UD chains for insn luid 2 uid 410
;;      reg 140 read/write { d1179(bb 48 insn 409) d1178(bb 48 insn 857) }
;;   UD chains for insn luid 3 uid 411
;;      reg 140 { d1180(bb 48 insn 410) d1179(bb 48 insn 409) d1178(bb 48 insn 857) }
;;      reg 164 { d1212(bb 43 insn 357) }
;;   UD chains for insn luid 5 uid 412
;;      reg 142 { d1182(bb 43 insn 381) }
;;      reg 308 read/write { d1344(bb 48 insn 858) }
;;   UD chains for insn luid 6 uid 413
;;      reg 140 { d1180(bb 48 insn 410) d1179(bb 48 insn 409) d1178(bb 48 insn 857) }
;;      reg 308 read/write { d1346(bb 48 insn 412) d1344(bb 48 insn 858) }
;;   UD chains for insn luid 7 uid 414
;;      reg 167 { d1215(bb 43 insn 385) }
;;      reg 308 { d1346(bb 48 insn 412) d1345(bb 48 insn 413) d1344(bb 48 insn 858) }
;;   UD chains for insn luid 8 uid 844
;;      reg 139 { d1177(bb 48 insn 411) }
;;      reg 140 { d1180(bb 48 insn 410) d1179(bb 48 insn 409) d1178(bb 48 insn 857) }
;;   UD chains for insn luid 9 uid 845
;;      reg 24 { d186(bb 48 insn 844) }
;;   UD chains for insn luid 10 uid 846
;;      reg 442 { d1437(bb 48 insn 845) }
;;   UD chains for insn luid 11 uid 429
;;      reg 168 { d1216(bb 48 insn 414) }
;;      reg 309 { d1347(bb 48 insn 846) }
;;   UD chains for insn luid 13 uid 431
;;      reg 141 { d1181(bb 48 insn 429) }
;;      reg 169 { d1218(bb 46 insn 401) d1217(bb 47 insn 406) }
;;   UD chains for insn luid 14 uid 432
;;      reg 139 { d1177(bb 48 insn 411) }
;;      reg 161 { d1209(bb 36 insn 303) }
;;      reg 310 { d1348(bb 48 insn 430) }
;;      reg 311 { d1349(bb 48 insn 431) }
;;   UD chains for insn luid 16 uid 433
;;      reg 157 read/write { d1198(bb 48 insn 859) }
;;      reg 289 { d1338(bb 32 insn 279) }
;;   UD chains for insn luid 17 uid 434
;;      reg 140 { d1180(bb 48 insn 410) d1179(bb 48 insn 409) d1178(bb 48 insn 857) }
;;      reg 157 read/write { d1200(bb 48 insn 433) d1198(bb 48 insn 859) }

( 50 )->[49]->( 50 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u496(11){ d75(bb 0 insn -1) }u497(13){ d88(bb 0 insn -1) }u498(25){ d259(bb 0 insn -1) }u499(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 446
;; lr  def 	 24 [cc] 143 158 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  gen 	 143 158 159
;; live  kill	 24 [cc]
;; rd  in  	(156)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 221, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(3)
1185, 1201, 1203
;; rd  kill	(9)
1183, 1184, 1185, 1186, 1187, 1201, 1202, 1203, 1204
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; rd  out 	(151)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 259, 260, 1177, 1180, 1181, 1182, 1185, 1197, 1199, 1201, 1203, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 439
;;      reg 143 { d1187(bb 41 insn 337) d1185(bb 49 insn 439) d1184(bb 42 insn 347) }
;;      reg 446 { d1441(bb 48 insn 438) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 1 uid 440
;;      reg 156 { d1197(bb 40 insn 322) }
;;      reg 157 { d1199(bb 48 insn 434) }
;;      reg 158 { d1202(bb 48 insn 432) d1201(bb 49 insn 440) }
;;      reg 159 { d1204(bb 48 insn 432) d1203(bb 49 insn 440) }

( 49 48 )->[50]->( 49 51 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u507(11){ d75(bb 0 insn -1) }u508(13){ d88(bb 0 insn -1) }u509(25){ d259(bb 0 insn -1) }u510(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 158
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(155)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(1)
221
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; rd  out 	(156)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 221, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 444
;;      reg 158 { d1202(bb 48 insn 432) d1201(bb 49 insn 440) }
;;   UD chains for insn luid 1 uid 445
;;      reg 24 { d221(bb 50 insn 444) }

( 50 )->[51]->( 53 52 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u513(11){ d75(bb 0 insn -1) }u514(13){ d88(bb 0 insn -1) }u515(25){ d259(bb 0 insn -1) }u516(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 158 159 161 163 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 158 159 411
;; lr  def 	 24 [cc] 162 314 316
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 158 159 161 163 192 195 289 411
;; live  gen 	 24 [cc] 162 314 316
;; live  kill	
;; rd  in  	(156)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 221, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(4)
220, 1210, 1352, 1354
;; rd  kill	(1)
1210
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 162 163 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 162 163 192 195 289
;; rd  out 	(159)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 220, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 454
;;      reg 159 { d1204(bb 48 insn 432) d1203(bb 49 insn 440) }
;;      reg 314 read/write { d1350(bb 51 insn 860) }
;;   UD chains for insn luid 2 uid 455
;;      reg 314 read/write { d1351(bb 51 insn 454) d1350(bb 51 insn 860) }
;;   UD chains for insn luid 4 uid 456
;;      reg 158 { d1202(bb 48 insn 432) d1201(bb 49 insn 440) }
;;      reg 316 read/write { d1353(bb 51 insn 861) }
;;   UD chains for insn luid 5 uid 457
;;      reg 314 { d1352(bb 51 insn 455) d1351(bb 51 insn 454) d1350(bb 51 insn 860) }
;;      reg 316 read/write { d1355(bb 51 insn 456) d1353(bb 51 insn 861) }
;;   UD chains for insn luid 6 uid 458
;;      reg 314 { d1352(bb 51 insn 455) d1351(bb 51 insn 454) d1350(bb 51 insn 860) }
;;      reg 316 { d1355(bb 51 insn 456) d1354(bb 51 insn 457) d1353(bb 51 insn 861) }
;;   UD chains for insn luid 7 uid 459
;;      reg 162 { d1210(bb 51 insn 458) }
;;      reg 411 { d1423(bb 40 insn 323) }
;;   UD chains for insn luid 8 uid 460
;;      reg 24 { d220(bb 51 insn 459) }

( 51 )->[52]->( 54 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u529(11){ d75(bb 0 insn -1) }u530(13){ d88(bb 0 insn -1) }u531(25){ d259(bb 0 insn -1) }u532(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 160 317
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 192 195 289
;; live  gen 	 160 317
;; live  kill	
;; rd  in  	(159)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 220, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(2)
1207, 1356
;; rd  kill	(5)
1205, 1206, 1207, 1208, 1356
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; rd  out 	(161)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 220, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 472
;;      reg 143 { d1187(bb 41 insn 337) d1185(bb 49 insn 439) d1184(bb 42 insn 347) }
;;      reg 317 { d1356(bb 52 insn 471) }
;;   eq_note reg 143 { }

( 51 )->[53]->( 54 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u536(11){ d75(bb 0 insn -1) }u537(13){ d88(bb 0 insn -1) }u538(25){ d259(bb 0 insn -1) }u539(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 162 163 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 162 163
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc] 138 160
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 162 163 192 195 289
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 138 160
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; rd  in  	(159)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 220, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(7)
11, 32, 51, 66, 73, 1176, 1206
;; rd  kill	(104)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1176, 1205, 1206, 1207, 1208
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; rd  out 	(155)
11, 32, 51, 66, 73, 75, 88, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 477
;;      reg 163 { d1211(bb 43 insn 361) }
;;   UD chains for insn luid 1 uid 478
;;      reg 162 { d1210(bb 51 insn 458) }
;;   UD chains for insn luid 2 uid 479
;;      reg 0 { d11(bb 53 insn 478) }
;;      reg 1 { d33(bb 53 insn 478) }
;;      reg 4 { d73(bb 53 insn 477) }
;;   UD chains for insn luid 3 uid 480
;;      reg 2 { d51(bb 53 insn 479) }
;;      reg 3 { d66(bb 53 insn 479) }
;;   UD chains for insn luid 4 uid 481
;;      reg 138 { d1176(bb 53 insn 480) }
;;      reg 143 { d1187(bb 41 insn 337) d1185(bb 49 insn 439) d1184(bb 42 insn 347) }

( 39 53 52 )->[54]->( 67 55 )
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u549(11){ d75(bb 0 insn -1) }u550(13){ d88(bb 0 insn -1) }u551(25){ d259(bb 0 insn -1) }u552(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160
;; lr  def 	 24 [cc] 318 319
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  gen 	 24 [cc] 318 319
;; live  kill	
;; rd  in  	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 191, 192, 220, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(3)
218, 1357, 1358
;; rd  kill	(2)
1357, 1358
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289 318
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289 318
;; rd  out 	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 218, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 484
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 160 { d1208(bb 39 insn 316) d1207(bb 52 insn 472) d1206(bb 53 insn 481) }
;;   UD chains for insn luid 2 uid 486
;;      reg 160 { d1208(bb 39 insn 316) d1207(bb 52 insn 472) d1206(bb 53 insn 481) }
;;      reg 319 { d1358(bb 54 insn 485) }
;;   eq_note reg 160 { }
;;   UD chains for insn luid 3 uid 487
;;      reg 318 { d1357(bb 54 insn 486) }
;;   UD chains for insn luid 4 uid 488
;;      reg 24 { d218(bb 54 insn 487) }

( 54 )->[55]->( 67 56 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u560(11){ d75(bb 0 insn -1) }u561(13){ d88(bb 0 insn -1) }u562(25){ d259(bb 0 insn -1) }u563(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289 318
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 318
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289 318
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 218, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(1)
217
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; rd  out 	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 491
;;      reg 318 { d1357(bb 54 insn 486) }
;;   UD chains for insn luid 1 uid 492
;;      reg 24 { d217(bb 55 insn 491) }

( 55 )->[56]->( 60 57 )
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u566(11){ d75(bb 0 insn -1) }u567(13){ d88(bb 0 insn -1) }u568(25){ d259(bb 0 insn -1) }u569(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 289
;; lr  def 	 24 [cc] 137 151 152 153 154 320 321 434 436
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  gen 	 24 [cc] 137 151 152 153 154 320 321 434 436
;; live  kill	 24 [cc]
;; rd  in  	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(10)
215, 1175, 1191, 1192, 1193, 1194, 1359, 1360, 1435, 1436
;; rd  kill	(9)
1175, 1191, 1192, 1193, 1194, 1359, 1360, 1435, 1436
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; rd  out 	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 499
;;      reg 289 { d1338(bb 32 insn 279) }
;;   UD chains for insn luid 1 uid 501
;;      reg 160 { d1208(bb 39 insn 316) d1207(bb 52 insn 472) d1206(bb 53 insn 481) }
;;   UD chains for insn luid 2 uid 506
;;      reg 320 { d1359(bb 56 insn 499) }
;;      reg 321 { d1360(bb 56 insn 501) }
;;   UD chains for insn luid 3 uid 510
;;      reg 289 { d1338(bb 32 insn 279) }
;;   UD chains for insn luid 4 uid 517
;;      reg 321 { d1360(bb 56 insn 501) }
;;      reg 434 { d1435(bb 56 insn 510) }
;;   UD chains for insn luid 5 uid 521
;;      reg 160 { d1208(bb 39 insn 316) d1207(bb 52 insn 472) d1206(bb 53 insn 481) }
;;   UD chains for insn luid 6 uid 528
;;      reg 320 { d1359(bb 56 insn 499) }
;;      reg 436 { d1436(bb 56 insn 521) }
;;   UD chains for insn luid 7 uid 532
;;      reg 152 { d1192(bb 56 insn 517) }
;;      reg 153 { d1193(bb 56 insn 528) }
;;   UD chains for insn luid 8 uid 536
;;      reg 434 { d1435(bb 56 insn 510) }
;;      reg 436 { d1436(bb 56 insn 521) }
;;   UD chains for insn luid 9 uid 540
;;      reg 137 { d1175(bb 56 insn 532) }
;;      reg 153 { d1193(bb 56 insn 528) }
;;   UD chains for insn luid 10 uid 541
;;      reg 24 { d215(bb 56 insn 540) }

( 56 )->[57]->( 59 58 )
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u587(11){ d75(bb 0 insn -1) }u588(13){ d88(bb 0 insn -1) }u589(25){ d259(bb 0 insn -1) }u590(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; live  gen 	
;; live  kill	
;; rd  in  	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; rd  out 	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 543
;;      reg 24 { d215(bb 56 insn 540) }

( 57 )->[58]->( 60 59 )
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u592(11){ d75(bb 0 insn -1) }u593(13){ d88(bb 0 insn -1) }u594(25){ d259(bb 0 insn -1) }u595(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 153
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(1)
214
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; rd  out 	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 544
;;      reg 137 { d1175(bb 56 insn 532) }
;;      reg 153 { d1193(bb 56 insn 528) }
;;   UD chains for insn luid 1 uid 545
;;      reg 24 { d214(bb 58 insn 544) }

( 58 57 )->[59]->( 61 )
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u599(11){ d75(bb 0 insn -1) }u600(13){ d88(bb 0 insn -1) }u601(25){ d259(bb 0 insn -1) }u602(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 149
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; live  gen 	 149
;; live  kill	
;; rd  in  	(181)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(1)
1189
;; rd  kill	(2)
1188, 1189
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; rd  out 	(182)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1189, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 56 58 )->[60]->( 61 )
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u603(11){ d75(bb 0 insn -1) }u604(13){ d88(bb 0 insn -1) }u605(25){ d259(bb 0 insn -1) }u606(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 149
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; live  gen 	 149
;; live  kill	
;; rd  in  	(181)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(1)
1188
;; rd  kill	(2)
1188, 1189
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; rd  out 	(182)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 60 59 )->[61]->( 63 )
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u607(11){ d75(bb 0 insn -1) }u608(13){ d88(bb 0 insn -1) }u609(25){ d259(bb 0 insn -1) }u610(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 161
;; lr  def 	 24 [cc] 134 135 136 150 181 182 337 338 339 340 443 444 445
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; live  gen 	 24 [cc] 134 135 136 150 181 182 337 338 339 340 443 444 445
;; live  kill	 24 [cc]
;; rd  in  	(183)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(13)
1170, 1173, 1174, 1190, 1235, 1237, 1362, 1364, 1365, 1366, 1438, 1439, 1440
;; rd  kill	(13)
1170, 1174, 1190, 1234, 1235, 1236, 1237, 1364, 1365, 1366, 1438, 1439, 1440
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; rd  out 	(194)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 560
;;      reg 135 read/write { d1171(bb 61 insn 862) }
;;      reg 137 { d1175(bb 56 insn 532) }
;;   UD chains for insn luid 2 uid 561
;;      reg 135 read/write { d1172(bb 61 insn 560) d1171(bb 61 insn 862) }
;;   UD chains for insn luid 3 uid 562
;;      reg 135 { d1173(bb 61 insn 561) d1172(bb 61 insn 560) d1171(bb 61 insn 862) }
;;      reg 154 { d1194(bb 56 insn 506) }
;;   UD chains for insn luid 5 uid 563
;;      reg 137 { d1175(bb 56 insn 532) }
;;      reg 337 read/write { d1361(bb 61 insn 863) }
;;   UD chains for insn luid 6 uid 564
;;      reg 135 { d1173(bb 61 insn 561) d1172(bb 61 insn 560) d1171(bb 61 insn 862) }
;;      reg 337 read/write { d1363(bb 61 insn 563) d1361(bb 61 insn 863) }
;;   UD chains for insn luid 7 uid 565
;;      reg 151 { d1191(bb 56 insn 536) }
;;      reg 337 { d1363(bb 61 insn 563) d1362(bb 61 insn 564) d1361(bb 61 insn 863) }
;;   UD chains for insn luid 8 uid 847
;;      reg 134 { d1170(bb 61 insn 562) }
;;      reg 135 { d1173(bb 61 insn 561) d1172(bb 61 insn 560) d1171(bb 61 insn 862) }
;;   UD chains for insn luid 9 uid 848
;;      reg 24 { d185(bb 61 insn 847) }
;;   UD chains for insn luid 10 uid 849
;;      reg 443 { d1438(bb 61 insn 848) }
;;   UD chains for insn luid 11 uid 580
;;      reg 150 { d1190(bb 61 insn 565) }
;;      reg 338 { d1364(bb 61 insn 849) }
;;   UD chains for insn luid 13 uid 582
;;      reg 136 { d1174(bb 61 insn 580) }
;;      reg 149 { d1189(bb 59 insn 552) d1188(bb 60 insn 557) }
;;   UD chains for insn luid 14 uid 583
;;      reg 134 { d1170(bb 61 insn 562) }
;;      reg 161 { d1209(bb 36 insn 303) }
;;      reg 339 { d1365(bb 61 insn 581) }
;;      reg 340 { d1366(bb 61 insn 582) }
;;   UD chains for insn luid 16 uid 587
;;      reg 339 { d1365(bb 61 insn 581) }

( 63 )->[62]->( 63 )
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u635(11){ d75(bb 0 insn -1) }u636(13){ d88(bb 0 insn -1) }u637(25){ d259(bb 0 insn -1) }u638(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 182 289 445
;; lr  def 	 24 [cc] 181 182
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  gen 	 181 182
;; live  kill	 24 [cc]
;; rd  in  	(195)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 208, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(2)
1234, 1236
;; rd  kill	(4)
1234, 1235, 1236, 1237
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; rd  out 	(192)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 588
;;      reg 181 { d1235(bb 61 insn 583) d1234(bb 62 insn 588) }
;;      reg 182 { d1237(bb 61 insn 583) d1236(bb 62 insn 588) }
;;      reg 289 { d1338(bb 32 insn 279) }
;;      reg 445 { d1440(bb 61 insn 587) }

( 62 61 )->[63]->( 62 64 )
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u643(11){ d75(bb 0 insn -1) }u644(13){ d88(bb 0 insn -1) }u645(25){ d259(bb 0 insn -1) }u646(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 182 444
;; lr  def 	 24 [cc] 160
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  gen 	 24 [cc] 160
;; live  kill	 24 [cc]
;; rd  in  	(197)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(2)
208, 1205
;; rd  kill	(4)
1205, 1206, 1207, 1208
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; rd  out 	(195)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 208, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 592
;;      reg 160 { d1208(bb 39 insn 316) d1207(bb 52 insn 472) d1206(bb 53 insn 481) d1205(bb 63 insn 592) }
;;      reg 444 { d1439(bb 61 insn 591) }
;;   eq_note reg 160 { }
;;   UD chains for insn luid 1 uid 594
;;      reg 182 { d1237(bb 61 insn 583) d1236(bb 62 insn 588) }
;;   UD chains for insn luid 2 uid 595
;;      reg 24 { d208(bb 63 insn 594) }

( 63 )->[64]->( 66 65 )
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u652(11){ d75(bb 0 insn -1) }u653(13){ d88(bb 0 insn -1) }u654(25){ d259(bb 0 insn -1) }u655(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181
;; lr  def 	 24 [cc] 343 344
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 192 195
;; live  gen 	 24 [cc] 343 344
;; live  kill	
;; rd  in  	(195)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 208, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(3)
207, 1368, 1369
;; rd  kill	(4)
1367, 1368, 1369, 1370
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; rd  out 	(197)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 207, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1368, 1369, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 605
;;      reg 181 { d1235(bb 61 insn 583) d1234(bb 62 insn 588) }
;;   UD chains for insn luid 2 uid 606
;;      reg 181 { d1235(bb 61 insn 583) d1234(bb 62 insn 588) }
;;      reg 344 { d1370(bb 64 insn 605) }
;;   UD chains for insn luid 3 uid 607
;;      reg 344 { d1369(bb 64 insn 606) }
;;   UD chains for insn luid 4 uid 608
;;      reg 24 { d207(bb 64 insn 607) }

( 64 )->[65]->( 66 )
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u661(11){ d75(bb 0 insn -1) }u662(13){ d88(bb 0 insn -1) }u663(25){ d259(bb 0 insn -1) }u664(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 343
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195
;; live  gen 	 343
;; live  kill	
;; rd  in  	(197)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 207, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1368, 1369, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(1)
1367
;; rd  kill	(2)
1367, 1368
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; rd  out 	(197)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 207, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1369, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }

( 64 65 )->[66]->( 67 )
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u665(11){ d75(bb 0 insn -1) }u666(13){ d88(bb 0 insn -1) }u667(25){ d259(bb 0 insn -1) }u668(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 343
;; lr  def 	 24 [cc] 345 346 347
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; live  gen 	 345 346 347
;; live  kill	 24 [cc]
;; rd  in  	(198)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 207, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(3)
1371, 1372, 1373
;; rd  kill	(3)
1371, 1372, 1373
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; rd  out 	(200)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 612
;;      reg 160 { d1205(bb 63 insn 592) }
;;      reg 346 { d1372(bb 66 insn 611) }
;;   eq_note reg 160 { }
;;   UD chains for insn luid 2 uid 613
;;      reg 343 { d1368(bb 64 insn 604) d1367(bb 65 insn 609) }
;;      reg 345 { d1371(bb 66 insn 612) }
;;   UD chains for insn luid 3 uid 614
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 347 { d1373(bb 66 insn 613) }

( 66 54 55 )->[67]->( 75 )
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u676(11){ d75(bb 0 insn -1) }u677(13){ d88(bb 0 insn -1) }u678(25){ d259(bb 0 insn -1) }u679(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185 348 349
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 185 348 349
;; live  kill	 14 [lr]
;; rd  in  	(205)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(4)
9, 1251, 1374, 1375
;; rd  kill	(43)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1374, 1375
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 185
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; rd  out 	(206)
9, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 617
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 619
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 349 { d1375(bb 67 insn 618) }
;;   UD chains for insn luid 3 uid 620
;;      reg 192 { d1257(bb 2 insn 3) }
;;   UD chains for insn luid 4 uid 621
;;      reg 348 { d1374(bb 67 insn 617) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 622
;;      reg 195 { d1260(bb 2 insn 6) }
;;   UD chains for insn luid 7 uid 624
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 0 { d10(bb 67 insn 620) }
;;      reg 1 { d31(bb 67 insn 621) }
;;      reg 2 { d50(bb 67 insn 622) }
;;      reg 3 { d65(bb 67 insn 623) }
;;   UD chains for insn luid 8 uid 625
;;      reg 0 { d9(bb 67 insn 624) }

( 20 )->[68]->( 69 )
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u693(11){ d75(bb 0 insn -1) }u694(13){ d88(bb 0 insn -1) }u695(25){ d259(bb 0 insn -1) }u696(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 195
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185 350 351 352
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 185 350 351 352
;; live  kill	 14 [lr]
;; rd  in  	(95)
17, 38, 57, 72, 75, 87, 88, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
7, 1250, 1376, 1377, 1378
;; rd  kill	(44)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1376, 1377, 1378
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(99)
7, 38, 57, 72, 75, 87, 88, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1250, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1376, 1377, 1378, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 630
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 631
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 632
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 633
;;      reg 350 { d1376(bb 68 insn 630) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 4 uid 634
;;      reg 351 { d1377(bb 68 insn 631) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 635
;;      reg 352 { d1378(bb 68 insn 632) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 6 uid 636
;;      reg 195 { d1260(bb 2 insn 6) }
;;   UD chains for insn luid 7 uid 637
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 0 { d8(bb 68 insn 633) }
;;      reg 1 { d29(bb 68 insn 634) }
;;      reg 2 { d48(bb 68 insn 635) }
;;      reg 3 { d63(bb 68 insn 636) }
;;   UD chains for insn luid 8 uid 638
;;      reg 0 { d7(bb 68 insn 637) }

( 68 71 70 73 )->[69]->( 75 )
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u713(11){ d75(bb 0 insn -1) }u714(13){ d88(bb 0 insn -1) }u715(25){ d259(bb 0 insn -1) }u716(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 354 356 357 358 360 361 364 365 366 367 369
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 354 356 357 358 360 361 364 365 366 367 369
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(123)
3, 7, 17, 38, 57, 72, 75, 87, 88, 240, 241, 242, 243, 245, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1376, 1377, 1378, 1397, 1398, 1399, 1400, 1401, 1402, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(11)
1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396
;; rd  kill	(20)
89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1379, 1383, 1384, 1388, 1393, 1394, 1395, 1396
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 185
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; rd  out 	(134)
3, 7, 17, 38, 57, 72, 75, 87, 88, 240, 241, 242, 243, 245, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1376, 1377, 1378, 1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 642
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 644
;;      reg 354 { d1379(bb 69 insn 642) }
;;      reg 356 read/write { d1380(bb 69 insn 864) }
;;   UD chains for insn luid 3 uid 645
;;      reg 356 read/write { d1381(bb 69 insn 644) d1380(bb 69 insn 864) }
;;   UD chains for insn luid 4 uid 647
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 648
;;      reg 358 { d1384(bb 69 insn 647) }
;;   UD chains for insn luid 7 uid 649
;;      reg 357 { d1383(bb 69 insn 648) }
;;      reg 360 read/write { d1385(bb 69 insn 865) }
;;   UD chains for insn luid 8 uid 650
;;      reg 356 { d1382(bb 69 insn 645) d1381(bb 69 insn 644) d1380(bb 69 insn 864) }
;;      reg 360 read/write { d1387(bb 69 insn 649) d1385(bb 69 insn 865) }
;;   UD chains for insn luid 9 uid 651
;;      reg 356 { d1382(bb 69 insn 645) d1381(bb 69 insn 644) d1380(bb 69 insn 864) }
;;      reg 360 { d1387(bb 69 insn 649) d1386(bb 69 insn 650) d1385(bb 69 insn 865) }
;;   UD chains for insn luid 10 uid 653
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 11 uid 654
;;      reg 366 { d1394(bb 69 insn 653) }
;;   UD chains for insn luid 12 uid 655
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 14 uid 656
;;      reg 364 read/write { d1389(bb 69 insn 866) }
;;      reg 367 { d1395(bb 69 insn 655) }
;;   UD chains for insn luid 15 uid 657
;;      reg 364 { d1392(bb 69 insn 656) d1389(bb 69 insn 866) }
;;      reg 364 read/write { d1392(bb 69 insn 656) d1389(bb 69 insn 866) }
;;      reg 365 { d1393(bb 69 insn 654) }
;;   UD chains for insn luid 16 uid 659
;;      reg 364 read/write { d1392(bb 69 insn 656) d1391(bb 69 insn 657) d1389(bb 69 insn 866) }
;;      reg 366 { d1394(bb 69 insn 653) }
;;   UD chains for insn luid 17 uid 660
;;      reg 361 { d1388(bb 69 insn 651) }
;;      reg 364 { d1392(bb 69 insn 656) d1391(bb 69 insn 657) d1390(bb 69 insn 659) d1389(bb 69 insn 866) }
;;   UD chains for insn luid 18 uid 661
;;      reg 369 { d1396(bb 69 insn 660) }
;;   UD chains for insn luid 19 uid 662
;;      reg 192 { d1257(bb 2 insn 3) }
;;   UD chains for insn luid 20 uid 663
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 0 { d6(bb 69 insn 661) }
;;      reg 1 { d27(bb 69 insn 661) }
;;      reg 2 { d46(bb 69 insn 662) }

( 21 )->[70]->( 69 )
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u747(11){ d75(bb 0 insn -1) }u748(13){ d88(bb 0 insn -1) }u749(25){ d259(bb 0 insn -1) }u750(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 195
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185 370 371 372
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 185 370 371 372
;; live  kill	 14 [lr]
;; rd  in  	(96)
17, 38, 57, 72, 75, 87, 88, 245, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
3, 1249, 1397, 1398, 1399
;; rd  kill	(44)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1397, 1398, 1399
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(100)
3, 38, 57, 72, 75, 87, 88, 245, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1249, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1397, 1398, 1399, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 668
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 669
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 670
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 671
;;      reg 370 { d1397(bb 70 insn 668) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 4 uid 672
;;      reg 371 { d1398(bb 70 insn 669) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 673
;;      reg 372 { d1399(bb 70 insn 670) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 6 uid 674
;;      reg 195 { d1260(bb 2 insn 6) }
;;   UD chains for insn luid 7 uid 675
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 0 { d4(bb 70 insn 671) }
;;      reg 1 { d25(bb 70 insn 672) }
;;      reg 2 { d44(bb 70 insn 673) }
;;      reg 3 { d60(bb 70 insn 674) }
;;   UD chains for insn luid 8 uid 676
;;      reg 0 { d3(bb 70 insn 675) }

( 26 27 )->[71]->( 69 )
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u767(11){ d75(bb 0 insn -1) }u768(13){ d88(bb 0 insn -1) }u769(25){ d259(bb 0 insn -1) }u770(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 185 375
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; live  gen 	 185 375
;; live  kill	
;; rd  in  	(103)
17, 38, 57, 72, 75, 87, 88, 240, 241, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
1247, 1400
;; rd  kill	(8)
1246, 1247, 1248, 1249, 1250, 1251, 1252, 1400
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(105)
17, 38, 57, 72, 75, 87, 88, 240, 241, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1400, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 683
;;      reg 25 { d259(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 685
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 375 { d1400(bb 71 insn 684) }

( 23 )->[72]->( 73 )
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u774(11){ d75(bb 0 insn -1) }u775(13){ d88(bb 0 insn -1) }u776(25){ d259(bb 0 insn -1) }u777(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 271
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 271
;; lr  def 	 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 271
;; live  gen 	 185
;; live  kill	
;; rd  in  	(99)
17, 38, 57, 72, 75, 87, 88, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1246
;; rd  kill	(7)
1246, 1247, 1248, 1249, 1250, 1251, 1252
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(100)
17, 38, 57, 72, 75, 87, 88, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 691
;;      reg 271 { d1323(bb 22 insn 225) }

( 72 25 )->[73]->( 69 )
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u779(11){ d75(bb 0 insn -1) }u780(13){ d88(bb 0 insn -1) }u781(25){ d259(bb 0 insn -1) }u782(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 377 378
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  gen 	 377 378
;; live  kill	
;; rd  in  	(103)
17, 38, 57, 72, 75, 87, 88, 242, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
1401, 1402
;; rd  kill	(2)
1401, 1402
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(105)
17, 38, 57, 72, 75, 87, 88, 242, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1401, 1402, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 696
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 377 { d1401(bb 73 insn 694) }
;;   UD chains for insn luid 3 uid 698
;;      reg 25 { d259(bb 0 insn -1) }
;;      reg 378 { d1402(bb 73 insn 697) }

( 22 )->[74]->( 75 )
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u787(11){ d75(bb 0 insn -1) }u788(13){ d88(bb 0 insn -1) }u789(25){ d259(bb 0 insn -1) }u790(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 269
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 269
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185 379 381 383 385 386 388 389 393 394 395 396 398
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 269
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 185 379 381 383 385 386 388 389 393 394 395 396 398
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(98)
17, 38, 57, 72, 75, 87, 88, 244, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(13)
1248, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421
;; rd  kill	(28)
89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1403, 1404, 1408, 1409, 1413, 1418, 1419, 1420, 1421
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 185
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; rd  out 	(111)
17, 38, 57, 72, 75, 87, 88, 244, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1248, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 705
;;      reg 379 { d1403(bb 74 insn 703) }
;;   UD chains for insn luid 3 uid 707
;;      reg 381 { d1404(bb 74 insn 705) }
;;      reg 383 read/write { d1405(bb 74 insn 867) }
;;   UD chains for insn luid 4 uid 708
;;      reg 269 { d1321(bb 21 insn 220) }
;;      reg 383 read/write { d1407(bb 74 insn 707) d1405(bb 74 insn 867) }
;;   UD chains for insn luid 5 uid 711
;;      reg 379 { d1403(bb 74 insn 703) }
;;   UD chains for insn luid 6 uid 712
;;      reg 386 { d1409(bb 74 insn 711) }
;;   UD chains for insn luid 8 uid 713
;;      reg 385 { d1408(bb 74 insn 712) }
;;      reg 388 read/write { d1410(bb 74 insn 868) }
;;   UD chains for insn luid 9 uid 714
;;      reg 269 { d1321(bb 21 insn 220) }
;;      reg 388 read/write { d1412(bb 74 insn 713) d1410(bb 74 insn 868) }
;;   UD chains for insn luid 10 uid 715
;;      reg 383 { d1407(bb 74 insn 707) d1406(bb 74 insn 708) d1405(bb 74 insn 867) }
;;      reg 388 { d1412(bb 74 insn 713) d1411(bb 74 insn 714) d1410(bb 74 insn 868) }
;;   UD chains for insn luid 11 uid 718
;;      reg 379 { d1403(bb 74 insn 703) }
;;   UD chains for insn luid 12 uid 719
;;      reg 395 { d1419(bb 74 insn 718) }
;;   UD chains for insn luid 13 uid 720
;;      reg 379 { d1403(bb 74 insn 703) }
;;   UD chains for insn luid 15 uid 721
;;      reg 393 read/write { d1414(bb 74 insn 869) }
;;      reg 396 { d1420(bb 74 insn 720) }
;;   UD chains for insn luid 16 uid 722
;;      reg 393 { d1417(bb 74 insn 721) d1414(bb 74 insn 869) }
;;      reg 393 read/write { d1417(bb 74 insn 721) d1414(bb 74 insn 869) }
;;      reg 394 { d1418(bb 74 insn 719) }
;;   UD chains for insn luid 17 uid 724
;;      reg 393 read/write { d1417(bb 74 insn 721) d1416(bb 74 insn 722) d1414(bb 74 insn 869) }
;;      reg 395 { d1419(bb 74 insn 718) }
;;   UD chains for insn luid 18 uid 725
;;      reg 389 { d1413(bb 74 insn 715) }
;;      reg 393 { d1417(bb 74 insn 721) d1416(bb 74 insn 722) d1415(bb 74 insn 724) d1414(bb 74 insn 869) }
;;   UD chains for insn luid 19 uid 726
;;      reg 398 { d1421(bb 74 insn 725) }
;;   UD chains for insn luid 20 uid 727
;;      reg 192 { d1257(bb 2 insn 3) }
;;   UD chains for insn luid 21 uid 728
;;      reg 13 { d88(bb 0 insn -1) }
;;      reg 0 { d2(bb 74 insn 726) }
;;      reg 1 { d23(bb 74 insn 726) }
;;      reg 2 { d42(bb 74 insn 727) }

( 74 67 69 )->[75]->( 1 )
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u822(11){ d75(bb 0 insn -1) }u823(13){ d88(bb 0 insn -1) }u824(25){ d259(bb 0 insn -1) }u825(26){ d260(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 185
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(254)
3, 7, 9, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 240, 241, 242, 243, 244, 245, 246, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(1)
0
;; rd  kill	(22)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(251)
0, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 240, 241, 242, 243, 244, 245, 246, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;;  UD chains for artificial uses
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 25 { d259(bb 0 insn -1) }
;;   reg 26 { d260(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 736
;;      reg 185 { d1252(bb 25 insn 237) d1251(bb 67 insn 625) d1250(bb 68 insn 638) d1249(bb 70 insn 676) d1248(bb 74 insn 729) d1247(bb 71 insn 686) d1246(bb 72 insn 691) }
;;   UD chains for insn luid 1 uid 742
;;      reg 0 { d0(bb 75 insn 736) }

( 75 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u828(0){ d0(bb 75 insn 736) }u829(11){ d75(bb 0 insn -1) }u830(13){ d88(bb 0 insn -1) }u831(14){ }u832(25){ d259(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(251)
0, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 240, 241, 242, 243, 244, 245, 246, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(251)
0, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 240, 241, 242, 243, 244, 245, 246, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 75 insn 736) }
;;   reg 11 { d75(bb 0 insn -1) }
;;   reg 13 { d88(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d259(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 47 to worklist
  Adding insn 23 to worklist
  Adding insn 17 to worklist
  Adding insn 11 to worklist
  Adding insn 92 to worklist
  Adding insn 68 to worklist
  Adding insn 62 to worklist
  Adding insn 55 to worklist
  Adding insn 53 to worklist
  Adding insn 109 to worklist
  Adding insn 102 to worklist
  Adding insn 98 to worklist
  Adding insn 115 to worklist
  Adding insn 870 to worklist
  Adding insn 872 to worklist
  Adding insn 140 to worklist
  Adding insn 874 to worklist
  Adding insn 166 to worklist
  Adding insn 171 to worklist
  Adding insn 876 to worklist
  Adding insn 878 to worklist
  Adding insn 196 to worklist
  Adding insn 880 to worklist
  Adding insn 218 to worklist
  Adding insn 222 to worklist
  Adding insn 227 to worklist
  Adding insn 231 to worklist
  Adding insn 235 to worklist
  Adding insn 882 to worklist
  Adding insn 244 to worklist
  Adding insn 248 to worklist
  Adding insn 252 to worklist
  Adding insn 256 to worklist
  Adding insn 261 to worklist
  Adding insn 265 to worklist
  Adding insn 285 to worklist
  Adding insn 281 to worklist
  Adding insn 277 to worklist
  Adding insn 287 to worklist
  Adding insn 289 to worklist
  Adding insn 300 to worklist
  Adding insn 297 to worklist
  Adding insn 305 to worklist
  Adding insn 307 to worklist
  Adding insn 309 to worklist
  Adding insn 884 to worklist
  Adding insn 326 to worklist
  Adding insn 886 to worklist
  Adding insn 390 to worklist
  Adding insn 392 to worklist
  Adding insn 394 to worklist
  Adding insn 888 to worklist
  Adding insn 890 to worklist
  Adding insn 445 to worklist
  Adding insn 460 to worklist
  Adding insn 892 to worklist
  Adding insn 488 to worklist
  Adding insn 484 to worklist
  Adding insn 492 to worklist
  Adding insn 541 to worklist
  Adding insn 543 to worklist
  Adding insn 545 to worklist
  Adding insn 894 to worklist
  Adding insn 896 to worklist
  Adding insn 595 to worklist
  Adding insn 608 to worklist
  Adding insn 614 to worklist
  Adding insn 898 to worklist
  Adding insn 624 to worklist
  Adding insn 619 to worklist
  Adding insn 637 to worklist
  Adding insn 900 to worklist
  Adding insn 663 to worklist
  Adding insn 902 to worklist
  Adding insn 675 to worklist
  Adding insn 904 to worklist
  Adding insn 685 to worklist
  Adding insn 683 to worklist
  Adding insn 906 to worklist
  Adding insn 698 to worklist
  Adding insn 696 to worklist
  Adding insn 728 to worklist
  Adding insn 742 to worklist
Finished finding needed instructions:
  Adding insn 736 to worklist
Processing use of (reg 185 [ exceptions ]) in insn 736:
  Adding insn 237 to worklist
  Adding insn 625 to worklist
  Adding insn 638 to worklist
  Adding insn 676 to worklist
  Adding insn 729 to worklist
  Adding insn 686 to worklist
  Adding insn 691 to worklist
Processing use of (reg 271) in insn 691:
  Adding insn 225 to worklist
Processing use of (reg 184 [ tm ]) in insn 225:
  Adding insn 173 to worklist
  Adding insn 198 to worklist
  Adding insn 841 to worklist
  Adding insn 843 to worklist
Processing use of (reg 270) in insn 225:
  Adding insn 224 to worklist
Processing use of (reg 183 [ tn ]) in insn 224:
  Adding insn 117 to worklist
  Adding insn 142 to worklist
  Adding insn 837 to worklist
  Adding insn 839 to worklist
Processing use of (reg 24 cc) in insn 839:
  Adding insn 838 to worklist
Processing use of (reg 257 [ vdn.significand ]) in insn 838:
  Adding insn 149 to worklist
Processing use of (reg 257 [ vdn.significand ]) in insn 149:
  Adding insn 147 to worklist
Processing use of (reg 258 [ vdn.significand+4 ]) in insn 149:
  Adding insn 148 to worklist
Processing use of (reg 25 sfp) in insn 148:
Processing use of (reg 25 sfp) in insn 147:
Processing use of (reg 24 cc) in insn 837:
  Adding insn 836 to worklist
Processing use of (reg 256) in insn 836:
  Adding insn 125 to worklist
Processing use of (subreg (reg 254) 4) in insn 125:
  Adding insn 123 to worklist
Processing use of (reg 256) in insn 125:
  Adding insn 124 to worklist
Processing use of (subreg (reg 254) 0) in insn 124:
Processing use of (reg 175 [ D.5605 ]) in insn 123:
  Adding insn 111 to worklist
Processing use of (reg 255) in insn 123:
  Adding insn 122 to worklist
Processing use of (reg 25 sfp) in insn 111:
Processing use of (reg 24 cc) in insn 843:
  Adding insn 842 to worklist
Processing use of (reg 267 [ significand ]) in insn 842:
  Adding insn 204 to worklist
Processing use of (subreg (reg 178 [ significand ]) 4) in insn 204:
  Adding insn 76 to worklist
  Adding insn 95 to worklist
Processing use of (reg 267 [ significand ]) in insn 204:
  Adding insn 203 to worklist
Processing use of (subreg (reg 178 [ significand ]) 0) in insn 203:
Processing use of (reg 178 [ significand ]) in insn 95:
Processing use of (reg 245) in insn 95:
  Adding insn 94 to worklist
Processing use of (reg 178 [ significand ]) in insn 76:
  Adding insn 74 to worklist
  Adding insn 75 to worklist
  Adding insn 854 to worklist
Processing use of (reg 431 [+4 ]) in insn 76:
  Adding insn 71 to worklist
Processing use of (reg 231) in insn 71:
  Adding insn 69 to worklist
Processing use of (reg 431 [+4 ]) in insn 71:
  Adding insn 70 to worklist
Processing use of (subreg (reg 189 [ D.5047 ]) 4) in insn 70:
  Adding insn 56 to worklist
Processing use of (reg 0 r0) in insn 56:
Processing use of (reg 1 r1) in insn 56:
Processing use of (subreg (reg 189 [ D.5047 ]) 0) in insn 69:
Processing use of (subreg (reg 178 [ significand ]) 0) in insn 75:
Processing use of (reg 178 [ significand ]) in insn 75:
Processing use of (reg 232) in insn 75:
  Adding insn 73 to worklist
Processing use of (reg 431 [+4 ]) in insn 73:
Processing use of (reg 178 [ significand ]) in insn 74:
Processing use of (reg 430) in insn 74:
  Adding insn 72 to worklist
Processing use of (subreg (reg 189 [ D.5047 ]) 0) in insn 72:
Processing use of (reg 24 cc) in insn 841:
  Adding insn 840 to worklist
Processing use of (reg 266) in insn 840:
  Adding insn 181 to worklist
Processing use of (subreg (reg 264) 4) in insn 181:
  Adding insn 179 to worklist
Processing use of (reg 266) in insn 181:
  Adding insn 180 to worklist
Processing use of (subreg (reg 264) 0) in insn 180:
Processing use of (reg 178 [ significand ]) in insn 179:
Processing use of (reg 265) in insn 179:
  Adding insn 178 to worklist
Processing use of (reg 0 r0) in insn 676:
Processing use of (reg 0 r0) in insn 638:
Processing use of (reg 0 r0) in insn 625:
Processing use of (reg 0 r0) in insn 742:
Processing use of (reg 13 sp) in insn 728:
Processing use of (reg 0 r0) in insn 728:
  Adding insn 726 to worklist
Processing use of (reg 1 r1) in insn 728:
Processing use of (reg 2 r2) in insn 728:
  Adding insn 727 to worklist
Processing use of (reg 192 [ dd ]) in insn 727:
  Adding insn 3 to worklist
Processing use of (reg 0 r0) in insn 3:
Processing use of (reg 398) in insn 726:
  Adding insn 725 to worklist
Processing use of (reg 389) in insn 725:
  Adding insn 715 to worklist
Processing use of (reg 393) in insn 725:
  Adding insn 721 to worklist
  Adding insn 722 to worklist
  Adding insn 724 to worklist
  Adding insn 869 to worklist
Processing use of (reg 393) in insn 724:
Processing use of (reg 395 [ vfp_double_default_qnan.significand+4 ]) in insn 724:
  Adding insn 718 to worklist
Processing use of (reg 379) in insn 718:
  Adding insn 703 to worklist
Processing use of (subreg (reg 393) 0) in insn 722:
Processing use of (reg 393) in insn 722:
Processing use of (reg 394) in insn 722:
  Adding insn 719 to worklist
Processing use of (reg 395 [ vfp_double_default_qnan.significand+4 ]) in insn 719:
Processing use of (reg 393) in insn 721:
Processing use of (reg 396 [ vfp_double_default_qnan.significand ]) in insn 721:
  Adding insn 720 to worklist
Processing use of (reg 379) in insn 720:
Processing use of (reg 383) in insn 715:
  Adding insn 707 to worklist
  Adding insn 708 to worklist
  Adding insn 867 to worklist
Processing use of (reg 388) in insn 715:
  Adding insn 713 to worklist
  Adding insn 714 to worklist
  Adding insn 868 to worklist
Processing use of (reg 269) in insn 714:
  Adding insn 220 to worklist
Processing use of (reg 388) in insn 714:
Processing use of (reg 184 [ tm ]) in insn 220:
Processing use of (subreg (reg 385 [ vfp_double_default_qnan.exponent ]) 0) in insn 713:
  Adding insn 712 to worklist
Processing use of (reg 388) in insn 713:
Processing use of (reg 386 [ vfp_double_default_qnan.exponent ]) in insn 712:
  Adding insn 711 to worklist
Processing use of (reg 379) in insn 711:
Processing use of (reg 269) in insn 708:
Processing use of (reg 383) in insn 708:
Processing use of (reg 381 [ vfp_double_default_qnan.sign ]) in insn 707:
  Adding insn 705 to worklist
Processing use of (reg 383) in insn 707:
Processing use of (reg 379) in insn 705:
Processing use of (reg 25 sfp) in insn 696:
Processing use of (subreg (reg 377) 0) in insn 696:
  Adding insn 694 to worklist
Processing use of (reg 25 sfp) in insn 698:
Processing use of (reg 378) in insn 698:
  Adding insn 697 to worklist
Processing use of (reg 25 sfp) in insn 683:
Processing use of (reg 25 sfp) in insn 685:
Processing use of (reg 375) in insn 685:
  Adding insn 684 to worklist
Processing use of (reg 13 sp) in insn 675:
Processing use of (reg 0 r0) in insn 675:
  Adding insn 671 to worklist
Processing use of (reg 1 r1) in insn 675:
  Adding insn 672 to worklist
Processing use of (reg 2 r2) in insn 675:
  Adding insn 673 to worklist
Processing use of (reg 3 r3) in insn 675:
  Adding insn 674 to worklist
Processing use of (reg 195 [ fpscr ]) in insn 674:
  Adding insn 6 to worklist
Processing use of (reg 3 r3) in insn 6:
Processing use of (reg 372) in insn 673:
  Adding insn 670 to worklist
Processing use of (reg 25 sfp) in insn 670:
Processing use of (reg 371) in insn 672:
  Adding insn 669 to worklist
Processing use of (reg 25 sfp) in insn 669:
Processing use of (reg 370) in insn 671:
  Adding insn 668 to worklist
Processing use of (reg 25 sfp) in insn 668:
Processing use of (reg 13 sp) in insn 663:
Processing use of (reg 0 r0) in insn 663:
  Adding insn 661 to worklist
Processing use of (reg 1 r1) in insn 663:
Processing use of (reg 2 r2) in insn 663:
  Adding insn 662 to worklist
Processing use of (reg 192 [ dd ]) in insn 662:
Processing use of (reg 369) in insn 661:
  Adding insn 660 to worklist
Processing use of (reg 361) in insn 660:
  Adding insn 651 to worklist
Processing use of (reg 364) in insn 660:
  Adding insn 656 to worklist
  Adding insn 657 to worklist
  Adding insn 659 to worklist
  Adding insn 866 to worklist
Processing use of (reg 364) in insn 659:
Processing use of (reg 366 [ vdd.significand+4 ]) in insn 659:
  Adding insn 653 to worklist
Processing use of (reg 25 sfp) in insn 653:
Processing use of (subreg (reg 364) 0) in insn 657:
Processing use of (reg 364) in insn 657:
Processing use of (reg 365) in insn 657:
  Adding insn 654 to worklist
Processing use of (reg 366 [ vdd.significand+4 ]) in insn 654:
Processing use of (reg 364) in insn 656:
Processing use of (reg 367 [ vdd.significand ]) in insn 656:
  Adding insn 655 to worklist
Processing use of (reg 25 sfp) in insn 655:
Processing use of (reg 356) in insn 651:
  Adding insn 645 to worklist
  Adding insn 644 to worklist
  Adding insn 864 to worklist
Processing use of (reg 360) in insn 651:
  Adding insn 649 to worklist
  Adding insn 650 to worklist
  Adding insn 865 to worklist
Processing use of (subreg (reg 356) 0) in insn 650:
Processing use of (reg 360) in insn 650:
Processing use of (subreg (reg 357 [ vdd.exponent ]) 0) in insn 649:
  Adding insn 648 to worklist
Processing use of (reg 360) in insn 649:
Processing use of (reg 358 [ vdd.exponent ]) in insn 648:
  Adding insn 647 to worklist
Processing use of (reg 25 sfp) in insn 647:
Processing use of (reg 354 [ vdd.sign ]) in insn 644:
  Adding insn 642 to worklist
Processing use of (reg 356) in insn 644:
Processing use of (reg 25 sfp) in insn 642:
Processing use of (reg 356) in insn 645:
Processing use of (reg 13 sp) in insn 637:
Processing use of (reg 0 r0) in insn 637:
  Adding insn 633 to worklist
Processing use of (reg 1 r1) in insn 637:
  Adding insn 634 to worklist
Processing use of (reg 2 r2) in insn 637:
  Adding insn 635 to worklist
Processing use of (reg 3 r3) in insn 637:
  Adding insn 636 to worklist
Processing use of (reg 195 [ fpscr ]) in insn 636:
Processing use of (reg 352) in insn 635:
  Adding insn 632 to worklist
Processing use of (reg 25 sfp) in insn 632:
Processing use of (reg 351) in insn 634:
  Adding insn 631 to worklist
Processing use of (reg 25 sfp) in insn 631:
Processing use of (reg 350) in insn 633:
  Adding insn 630 to worklist
Processing use of (reg 25 sfp) in insn 630:
Processing use of (reg 13 sp) in insn 619:
Processing use of (reg 349) in insn 619:
  Adding insn 618 to worklist
Processing use of (reg 13 sp) in insn 624:
Processing use of (reg 0 r0) in insn 624:
  Adding insn 620 to worklist
Processing use of (reg 1 r1) in insn 624:
  Adding insn 621 to worklist
Processing use of (reg 2 r2) in insn 624:
  Adding insn 622 to worklist
Processing use of (reg 3 r3) in insn 624:
  Adding insn 623 to worklist
Processing use of (reg 195 [ fpscr ]) in insn 622:
Processing use of (reg 348) in insn 621:
  Adding insn 617 to worklist
Processing use of (reg 25 sfp) in insn 617:
Processing use of (reg 192 [ dd ]) in insn 620:
Processing use of (reg 25 sfp) in insn 614:
Processing use of (reg 347) in insn 614:
  Adding insn 613 to worklist
Processing use of (reg 343) in insn 613:
  Adding insn 604 to worklist
  Adding insn 609 to worklist
Processing use of (reg 345) in insn 613:
  Adding insn 612 to worklist
Processing use of (reg 160 [ z ]) in insn 612:
  Adding insn 592 to worklist
Processing use of (reg 346) in insn 612:
  Adding insn 611 to worklist
Processing use of (reg 160 [ z ]) in insn 592:
  Adding insn 316 to worklist
  Adding insn 472 to worklist
  Adding insn 481 to worklist
Processing use of (reg 444) in insn 592:
  Adding insn 591 to worklist
Processing use of (reg 138 [ remh.738 ]) in insn 481:
  Adding insn 480 to worklist
Processing use of (reg 143 [ z.732 ]) in insn 481:
  Adding insn 337 to worklist
  Adding insn 439 to worklist
  Adding insn 347 to worklist
Processing use of (reg 143 [ z.732 ]) in insn 347:
  Adding insn 346 to worklist
  Adding insn 856 to worklist
Processing use of (subreg (reg 156 [ mh ]) 4) in insn 347:
  Adding insn 322 to worklist
Processing use of (reg 156 [ mh ]) in insn 322:
  Adding insn 321 to worklist
  Adding insn 855 to worklist
Processing use of (reg 156 [ mh ]) in insn 321:
Processing use of (subreg (reg 289) 4) in insn 321:
  Adding insn 279 to worklist
Processing use of (reg 288 [ vdm.significand ]) in insn 279:
  Adding insn 278 to worklist
Processing use of (reg 288 [ vdm.significand ]) in insn 279:
Processing use of (reg 25 sfp) in insn 278:
Processing use of (reg 143 [ z.732 ]) in insn 346:
Processing use of (reg 400 [ z.731 ]) in insn 346:
  Adding insn 812 to worklist
Processing use of (reg 2 r2) in insn 812:
  Adding insn 344 to worklist
Processing use of (reg 0 r0) in insn 344:
  Adding insn 343 to worklist
Processing use of (reg 1 r1) in insn 344:
Processing use of (reg 4 r4) in insn 344:
  Adding insn 342 to worklist
Processing use of (subreg (reg 156 [ mh ]) 0) in insn 342:
Processing use of (reg 161 [ __n ]) in insn 343:
  Adding insn 303 to worklist
Processing use of (reg 25 sfp) in insn 303:
Processing use of (reg 143 [ z.732 ]) in insn 439:
Processing use of (reg 446) in insn 439:
  Adding insn 438 to worklist
Processing use of (reg 2 r2) in insn 480:
  Adding insn 479 to worklist
Processing use of (reg 3 r3) in insn 480:
Processing use of (reg 0 r0) in insn 479:
  Adding insn 478 to worklist
Processing use of (reg 1 r1) in insn 479:
Processing use of (reg 4 r4) in insn 479:
  Adding insn 477 to worklist
Processing use of (reg 163 [ __left ]) in insn 477:
  Adding insn 361 to worklist
Processing use of (subreg (reg 156 [ mh ]) 0) in insn 361:
Processing use of (reg 162 [ __n ]) in insn 478:
  Adding insn 458 to worklist
Processing use of (reg 314) in insn 458:
  Adding insn 455 to worklist
  Adding insn 454 to worklist
  Adding insn 860 to worklist
Processing use of (reg 316 [ remh ]) in insn 458:
  Adding insn 456 to worklist
  Adding insn 457 to worklist
  Adding insn 861 to worklist
Processing use of (subreg (reg 314) 4) in insn 457:
Processing use of (reg 316 [ remh ]) in insn 457:
Processing use of (subreg (reg 158 [ remh ]) 0) in insn 456:
  Adding insn 432 to worklist
  Adding insn 440 to worklist
Processing use of (reg 316 [ remh ]) in insn 456:
Processing use of (reg 156 [ mh ]) in insn 440:
Processing use of (reg 157 [ ml ]) in insn 440:
  Adding insn 434 to worklist
Processing use of (reg 158 [ remh ]) in insn 440:
Processing use of (reg 159 [ reml ]) in insn 440:
Processing use of (subreg (reg 140 [ rma.735 ]) 0) in insn 434:
  Adding insn 410 to worklist
  Adding insn 409 to worklist
  Adding insn 857 to worklist
Processing use of (reg 157 [ ml ]) in insn 434:
  Adding insn 433 to worklist
  Adding insn 859 to worklist
Processing use of (reg 157 [ ml ]) in insn 433:
Processing use of (subreg (reg 289) 0) in insn 433:
Processing use of (reg 140 [ rma.735 ]) in insn 409:
Processing use of (subreg (reg 142 [ rma.733 ]) 0) in insn 409:
  Adding insn 381 to worklist
Processing use of (reg 165 [ rmb ]) in insn 381:
  Adding insn 377 to worklist
Processing use of (reg 166 [ rma ]) in insn 381:
  Adding insn 366 to worklist
Processing use of (reg 163 [ __left ]) in insn 366:
Processing use of (reg 295 [ z.732 ]) in insn 366:
  Adding insn 352 to worklist
Processing use of (subreg (reg 143 [ z.732 ]) 0) in insn 352:
Processing use of (reg 294 [ D.5083 ]) in insn 377:
  Adding insn 350 to worklist
Processing use of (reg 432) in insn 377:
  Adding insn 370 to worklist
Processing use of (subreg (reg 143 [ z.732 ]) 4) in insn 370:
Processing use of (subreg (reg 289) 0) in insn 350:
Processing use of (reg 140 [ rma.735 ]) in insn 410:
Processing use of (reg 139 [ rl.736 ]) in insn 432:
  Adding insn 411 to worklist
Processing use of (reg 161 [ __n ]) in insn 432:
Processing use of (reg 310) in insn 432:
  Adding insn 430 to worklist
Processing use of (reg 311) in insn 432:
  Adding insn 431 to worklist
Processing use of (reg 141 [ rh.734 ]) in insn 431:
  Adding insn 429 to worklist
Processing use of (reg 169 [ iftmp.83 ]) in insn 431:
  Adding insn 401 to worklist
  Adding insn 406 to worklist
Processing use of (reg 168 [ D.5684 ]) in insn 429:
  Adding insn 414 to worklist
Processing use of (reg 309) in insn 429:
  Adding insn 846 to worklist
Processing use of (reg 442) in insn 846:
  Adding insn 845 to worklist
Processing use of (reg 24 cc) in insn 845:
  Adding insn 844 to worklist
Processing use of (subreg (reg 139 [ rl.736 ]) 4) in insn 844:
Processing use of (subreg (reg 140 [ rma.735 ]) 4) in insn 844:
Processing use of (reg 167 [ rh ]) in insn 414:
  Adding insn 385 to worklist
Processing use of (reg 308 [ rma.735 ]) in insn 414:
  Adding insn 412 to worklist
  Adding insn 413 to worklist
  Adding insn 858 to worklist
Processing use of (subreg (reg 140 [ rma.735 ]) 0) in insn 413:
Processing use of (reg 308 [ rma.735 ]) in insn 413:
Processing use of (subreg (reg 142 [ rma.733 ]) 4) in insn 412:
Processing use of (reg 308 [ rma.735 ]) in insn 412:
Processing use of (reg 163 [ __left ]) in insn 385:
Processing use of (reg 432) in insn 385:
Processing use of (reg 140 [ rma.735 ]) in insn 411:
Processing use of (reg 164 [ rl ]) in insn 411:
  Adding insn 357 to worklist
Processing use of (reg 294 [ D.5083 ]) in insn 357:
Processing use of (reg 295 [ z.732 ]) in insn 357:
Processing use of (subreg (reg 159 [ reml ]) 4) in insn 454:
Processing use of (reg 314) in insn 454:
Processing use of (reg 314) in insn 455:
Processing use of (reg 143 [ z.732 ]) in insn 472:
Processing use of (reg 317) in insn 472:
  Adding insn 471 to worklist
Processing use of (reg 24 cc) in insn 608:
  Adding insn 607 to worklist
Processing use of (reg 344 [ reml ]) in insn 607:
  Adding insn 606 to worklist
Processing use of (subreg (reg 181 [ reml ]) 4) in insn 606:
  Adding insn 583 to worklist
  Adding insn 588 to worklist
Processing use of (reg 344 [ reml ]) in insn 606:
  Adding insn 605 to worklist
Processing use of (subreg (reg 181 [ reml ]) 0) in insn 605:
Processing use of (reg 181 [ reml ]) in insn 588:
Processing use of (reg 182 [ remh ]) in insn 588:
Processing use of (reg 289) in insn 588:
Processing use of (reg 445) in insn 588:
  Adding insn 587 to worklist
Processing use of (reg 339) in insn 587:
  Adding insn 581 to worklist
Processing use of (reg 134 [ rl.742 ]) in insn 583:
  Adding insn 562 to worklist
Processing use of (reg 161 [ __n ]) in insn 583:
Processing use of (reg 339) in insn 583:
Processing use of (reg 340) in insn 583:
  Adding insn 582 to worklist
Processing use of (reg 136 [ rh.740 ]) in insn 582:
  Adding insn 580 to worklist
Processing use of (reg 149 [ iftmp.83 ]) in insn 582:
  Adding insn 552 to worklist
  Adding insn 557 to worklist
Processing use of (reg 150 [ D.5828 ]) in insn 580:
  Adding insn 565 to worklist
Processing use of (reg 338) in insn 580:
  Adding insn 849 to worklist
Processing use of (reg 443) in insn 849:
  Adding insn 848 to worklist
Processing use of (reg 24 cc) in insn 848:
  Adding insn 847 to worklist
Processing use of (subreg (reg 134 [ rl.742 ]) 4) in insn 847:
Processing use of (subreg (reg 135 [ rma.741 ]) 4) in insn 847:
  Adding insn 561 to worklist
  Adding insn 560 to worklist
  Adding insn 862 to worklist
Processing use of (reg 135 [ rma.741 ]) in insn 560:
Processing use of (subreg (reg 137 [ rma.739 ]) 0) in insn 560:
  Adding insn 532 to worklist
Processing use of (reg 152 [ rma ]) in insn 532:
  Adding insn 517 to worklist
Processing use of (reg 153 [ rmb ]) in insn 532:
  Adding insn 528 to worklist
Processing use of (reg 320 [ D.5083 ]) in insn 528:
  Adding insn 499 to worklist
Processing use of (reg 436) in insn 528:
  Adding insn 521 to worklist
Processing use of (subreg (reg 160 [ z ]) 4) in insn 521:
Processing use of (subreg (reg 289) 0) in insn 499:
Processing use of (reg 321 [ z ]) in insn 517:
  Adding insn 501 to worklist
Processing use of (reg 434) in insn 517:
  Adding insn 510 to worklist
Processing use of (subreg (reg 289) 4) in insn 510:
Processing use of (subreg (reg 160 [ z ]) 0) in insn 501:
Processing use of (reg 135 [ rma.741 ]) in insn 561:
Processing use of (reg 151 [ rh ]) in insn 565:
  Adding insn 536 to worklist
Processing use of (reg 337 [ rma.741 ]) in insn 565:
  Adding insn 563 to worklist
  Adding insn 564 to worklist
  Adding insn 863 to worklist
Processing use of (subreg (reg 135 [ rma.741 ]) 0) in insn 564:
Processing use of (reg 337 [ rma.741 ]) in insn 564:
Processing use of (subreg (reg 137 [ rma.739 ]) 4) in insn 563:
Processing use of (reg 337 [ rma.741 ]) in insn 563:
Processing use of (reg 434) in insn 536:
Processing use of (reg 436) in insn 536:
Processing use of (reg 135 [ rma.741 ]) in insn 562:
Processing use of (reg 154 [ rl ]) in insn 562:
  Adding insn 506 to worklist
Processing use of (reg 320 [ D.5083 ]) in insn 506:
Processing use of (reg 321 [ z ]) in insn 506:
Processing use of (reg 24 cc) in insn 595:
  Adding insn 594 to worklist
Processing use of (subreg (reg 182 [ remh ]) 4) in insn 594:
Processing use of (reg 24 cc) in insn 545:
  Adding insn 544 to worklist
Processing use of (subreg (reg 137 [ rma.739 ]) 0) in insn 544:
Processing use of (subreg (reg 153 [ rmb ]) 0) in insn 544:
Processing use of (reg 24 cc) in insn 543:
  Adding insn 540 to worklist
Processing use of (subreg (reg 137 [ rma.739 ]) 4) in insn 540:
Processing use of (subreg (reg 153 [ rmb ]) 4) in insn 540:
Processing use of (reg 24 cc) in insn 541:
Processing use of (reg 24 cc) in insn 492:
  Adding insn 491 to worklist
Processing use of (subreg (reg 318) 0) in insn 491:
  Adding insn 486 to worklist
Processing use of (reg 160 [ z ]) in insn 486:
Processing use of (reg 319) in insn 486:
  Adding insn 485 to worklist
Processing use of (reg 25 sfp) in insn 484:
Processing use of (reg 160 [ z ]) in insn 484:
Processing use of (reg 24 cc) in insn 488:
  Adding insn 487 to worklist
Processing use of (subreg (reg 318) 4) in insn 487:
Processing use of (reg 24 cc) in insn 460:
  Adding insn 459 to worklist
Processing use of (subreg (reg 162 [ __n ]) 4) in insn 459:
Processing use of (reg 411 [ D.5814+4 ]) in insn 459:
  Adding insn 323 to worklist
Processing use of (subreg (reg 156 [ mh ]) 0) in insn 323:
Processing use of (reg 24 cc) in insn 445:
  Adding insn 444 to worklist
Processing use of (subreg (reg 158 [ remh ]) 4) in insn 444:
Processing use of (reg 24 cc) in insn 394:
  Adding insn 393 to worklist
Processing use of (subreg (reg 142 [ rma.733 ]) 0) in insn 393:
Processing use of (subreg (reg 165 [ rmb ]) 0) in insn 393:
Processing use of (reg 24 cc) in insn 392:
  Adding insn 389 to worklist
Processing use of (subreg (reg 142 [ rma.733 ]) 4) in insn 389:
Processing use of (subreg (reg 165 [ rmb ]) 4) in insn 389:
Processing use of (reg 24 cc) in insn 390:
Processing use of (reg 24 cc) in insn 326:
  Adding insn 325 to worklist
Processing use of (subreg (reg 161 [ __n ]) 4) in insn 325:
Processing use of (reg 411 [ D.5814+4 ]) in insn 325:
Processing use of (reg 24 cc) in insn 309:
  Adding insn 308 to worklist
Processing use of (subreg (reg 161 [ __n ]) 0) in insn 308:
Processing use of (subreg (reg 289) 0) in insn 308:
Processing use of (reg 24 cc) in insn 307:
  Adding insn 304 to worklist
Processing use of (subreg (reg 161 [ __n ]) 4) in insn 304:
Processing use of (subreg (reg 289) 4) in insn 304:
Processing use of (reg 24 cc) in insn 305:
Processing use of (reg 25 sfp) in insn 297:
Processing use of (reg 291) in insn 297:
  Adding insn 296 to worklist
Processing use of (reg 186 [ D.5084 ]) in insn 296:
  Adding insn 282 to worklist
Processing use of (reg 25 sfp) in insn 282:
Processing use of (reg 25 sfp) in insn 300:
Processing use of (subreg (reg 293) 0) in insn 300:
  Adding insn 299 to worklist
Processing use of (reg 188 [ D.5081 ]) in insn 299:
  Adding insn 276 to worklist
Processing use of (subreg (reg 287) 0) in insn 276:
  Adding insn 275 to worklist
Processing use of (reg 282) in insn 275:
  Adding insn 271 to worklist
Processing use of (reg 286 [ vdm.exponent ]) in insn 275:
  Adding insn 273 to worklist
Processing use of (reg 25 sfp) in insn 273:
Processing use of (reg 283) in insn 271:
  Adding insn 270 to worklist
Processing use of (reg 281 [ vdn.exponent ]) in insn 270:
  Adding insn 268 to worklist
Processing use of (reg 25 sfp) in insn 268:
Processing use of (reg 24 cc) in insn 289:
  Adding insn 288 to worklist
Processing use of (subreg (reg 289) 0) in insn 288:
Processing use of (subreg (reg 290) 0) in insn 288:
  Adding insn 283 to worklist
Processing use of (reg 186 [ D.5084 ]) in insn 283:
Processing use of (reg 186 [ D.5084 ]) in insn 283:
Processing use of (reg 24 cc) in insn 287:
  Adding insn 284 to worklist
Processing use of (subreg (reg 289) 4) in insn 284:
Processing use of (subreg (reg 290) 4) in insn 284:
Processing use of (reg 25 sfp) in insn 277:
Processing use of (subreg (reg 188 [ D.5081 ]) 0) in insn 277:
Processing use of (reg 25 sfp) in insn 281:
Processing use of (reg 289) in insn 281:
Processing use of (reg 24 cc) in insn 285:
Processing use of (reg 13 sp) in insn 265:
Processing use of (reg 0 r0) in insn 265:
  Adding insn 264 to worklist
Processing use of (reg 279) in insn 264:
  Adding insn 263 to worklist
Processing use of (reg 25 sfp) in insn 263:
Processing use of (reg 24 cc) in insn 261:
  Adding insn 260 to worklist
Processing use of (reg 278) in insn 260:
  Adding insn 259 to worklist
Processing use of (reg 184 [ tm ]) in insn 259:
Processing use of (reg 13 sp) in insn 256:
Processing use of (reg 0 r0) in insn 256:
  Adding insn 255 to worklist
Processing use of (reg 277) in insn 255:
  Adding insn 254 to worklist
Processing use of (reg 25 sfp) in insn 254:
Processing use of (reg 24 cc) in insn 252:
  Adding insn 251 to worklist
Processing use of (reg 276) in insn 251:
  Adding insn 250 to worklist
Processing use of (reg 183 [ tn ]) in insn 250:
Processing use of (reg 24 cc) in insn 248:
  Adding insn 247 to worklist
Processing use of (reg 275) in insn 247:
  Adding insn 246 to worklist
Processing use of (reg 183 [ tn ]) in insn 246:
Processing use of (reg 24 cc) in insn 244:
  Adding insn 243 to worklist
Processing use of (reg 274) in insn 243:
  Adding insn 242 to worklist
Processing use of (reg 184 [ tm ]) in insn 242:
Processing use of (reg 24 cc) in insn 235:
  Adding insn 234 to worklist
Processing use of (reg 273) in insn 234:
  Adding insn 233 to worklist
Processing use of (reg 184 [ tm ]) in insn 233:
Processing use of (reg 24 cc) in insn 231:
  Adding insn 230 to worklist
Processing use of (reg 272) in insn 230:
  Adding insn 229 to worklist
Processing use of (reg 183 [ tn ]) in insn 229:
Processing use of (reg 24 cc) in insn 227:
  Adding insn 226 to worklist
Processing use of (reg 271) in insn 226:
Processing use of (reg 24 cc) in insn 222:
  Adding insn 221 to worklist
Processing use of (reg 269) in insn 221:
Processing use of (reg 24 cc) in insn 218:
  Adding insn 217 to worklist
Processing use of (reg 268) in insn 217:
  Adding insn 216 to worklist
Processing use of (reg 183 [ tn ]) in insn 216:
Processing use of (reg 24 cc) in insn 196:
  Adding insn 195 to worklist
Processing use of (reg 177 [ D.5594 ]) in insn 195:
  Adding insn 67 to worklist
Processing use of (reg 228) in insn 67:
  Adding insn 66 to worklist
Processing use of (reg 227) in insn 66:
  Adding insn 65 to worklist
Processing use of (subreg (reg 428) 0) in insn 65:
  Adding insn 63 to worklist
Processing use of (subreg (reg 189 [ D.5047 ]) 4) in insn 63:
Processing use of (reg 24 cc) in insn 171:
  Adding insn 170 to worklist
Processing use of (reg 263 [ significand ]) in insn 170:
  Adding insn 169 to worklist
Processing use of (subreg (reg 178 [ significand ]) 4) in insn 169:
Processing use of (reg 263 [ significand ]) in insn 169:
  Adding insn 168 to worklist
Processing use of (subreg (reg 178 [ significand ]) 0) in insn 168:
Processing use of (reg 24 cc) in insn 166:
  Adding insn 165 to worklist
Processing use of (reg 261 [ D.5594 ]) in insn 165:
  Adding insn 163 to worklist
Processing use of (reg 262) in insn 165:
  Adding insn 164 to worklist
Processing use of (reg 259) in insn 164:
  Adding insn 162 to worklist
Processing use of (subreg (reg 260) 0) in insn 162:
  Adding insn 161 to worklist
Processing use of (subreg (reg 177 [ D.5594 ]) 0) in insn 163:
Processing use of (reg 24 cc) in insn 140:
  Adding insn 139 to worklist
Processing use of (reg 174 [ D.5606 ]) in insn 139:
  Adding insn 103 to worklist
Processing use of (reg 25 sfp) in insn 103:
Processing use of (reg 24 cc) in insn 115:
  Adding insn 114 to worklist
Processing use of (reg 253 [ D.5605 ]) in insn 114:
  Adding insn 113 to worklist
Processing use of (subreg (reg 175 [ D.5605 ]) 4) in insn 113:
Processing use of (reg 253 [ D.5605 ]) in insn 113:
  Adding insn 112 to worklist
Processing use of (subreg (reg 175 [ D.5605 ]) 0) in insn 112:
Processing use of (reg 25 sfp) in insn 98:
Processing use of (reg 178 [ significand ]) in insn 98:
Processing use of (reg 25 sfp) in insn 102:
Processing use of (subreg (reg 248) 0) in insn 102:
  Adding insn 101 to worklist
Processing use of (reg 176 [ D.5597 ]) in insn 101:
  Adding insn 61 to worklist
Processing use of (reg 247 [ vdn.sign ]) in insn 101:
  Adding insn 99 to worklist
Processing use of (reg 25 sfp) in insn 99:
Processing use of (subreg (reg 426) 0) in insn 61:
  Adding insn 59 to worklist
Processing use of (subreg (reg 221) 4) in insn 59:
  Adding insn 58 to worklist
Processing use of (reg 189 [ D.5047 ]) in insn 58:
Processing use of (reg 222) in insn 58:
  Adding insn 57 to worklist
Processing use of (reg 24 cc) in insn 109:
  Adding insn 108 to worklist
Processing use of (reg 251 [ D.5606 ]) in insn 108:
  Adding insn 106 to worklist
Processing use of (reg 252) in insn 108:
  Adding insn 107 to worklist
Processing use of (reg 249) in insn 107:
  Adding insn 105 to worklist
Processing use of (subreg (reg 250) 0) in insn 105:
  Adding insn 104 to worklist
Processing use of (subreg (reg 174 [ D.5606 ]) 0) in insn 106:
Processing use of (reg 25 sfp) in insn 53:
Processing use of (reg 180 [ significand ]) in insn 53:
  Adding insn 31 to worklist
  Adding insn 50 to worklist
Processing use of (reg 180 [ significand ]) in insn 50:
Processing use of (reg 220) in insn 50:
  Adding insn 49 to worklist
Processing use of (reg 180 [ significand ]) in insn 31:
  Adding insn 29 to worklist
  Adding insn 30 to worklist
  Adding insn 853 to worklist
Processing use of (reg 425 [+4 ]) in insn 31:
  Adding insn 26 to worklist
Processing use of (reg 206) in insn 26:
  Adding insn 24 to worklist
Processing use of (reg 425 [+4 ]) in insn 26:
  Adding insn 25 to worklist
Processing use of (subreg (reg 190 [ D.5044 ]) 4) in insn 25:
  Adding insn 12 to worklist
Processing use of (reg 0 r0) in insn 12:
Processing use of (reg 1 r1) in insn 12:
Processing use of (subreg (reg 190 [ D.5044 ]) 0) in insn 24:
Processing use of (subreg (reg 180 [ significand ]) 0) in insn 30:
Processing use of (reg 180 [ significand ]) in insn 30:
Processing use of (reg 207) in insn 30:
  Adding insn 28 to worklist
Processing use of (reg 425 [+4 ]) in insn 28:
Processing use of (reg 180 [ significand ]) in insn 29:
Processing use of (reg 424) in insn 29:
  Adding insn 27 to worklist
Processing use of (subreg (reg 190 [ D.5044 ]) 0) in insn 27:
Processing use of (reg 13 sp) in insn 55:
Processing use of (reg 0 r0) in insn 55:
  Adding insn 54 to worklist
Processing use of (reg 194 [ dm ]) in insn 54:
  Adding insn 5 to worklist
Processing use of (reg 2 r2) in insn 5:
Processing use of (reg 25 sfp) in insn 62:
Processing use of (subreg (reg 176 [ D.5597 ]) 0) in insn 62:
Processing use of (reg 25 sfp) in insn 68:
Processing use of (subreg (reg 177 [ D.5594 ]) 0) in insn 68:
Processing use of (reg 24 cc) in insn 92:
  Adding insn 91 to worklist
Processing use of (reg 244) in insn 91:
  Adding insn 90 to worklist
Processing use of (reg 243) in insn 90:
  Adding insn 89 to worklist
Processing use of (subreg (reg 242) 0) in insn 89:
  Adding insn 88 to worklist
Processing use of (reg 238) in insn 88:
  Adding insn 82 to worklist
Processing use of (reg 241) in insn 88:
  Adding insn 86 to worklist
Processing use of (reg 24 cc) in insn 86:
  Adding insn 85 to worklist
Processing use of (reg 236 [ D.5594 ]) in insn 85:
  Adding insn 79 to worklist
Processing use of (subreg (reg 177 [ D.5594 ]) 0) in insn 79:
Processing use of (reg 24 cc) in insn 82:
  Adding insn 81 to worklist
Processing use of (reg 236 [ D.5594 ]) in insn 81:
Processing use of (reg 237) in insn 81:
  Adding insn 80 to worklist
Processing use of (reg 234) in insn 80:
  Adding insn 78 to worklist
Processing use of (subreg (reg 235) 0) in insn 78:
  Adding insn 77 to worklist
Processing use of (reg 13 sp) in insn 11:
Processing use of (reg 0 r0) in insn 11:
  Adding insn 10 to worklist
Processing use of (reg 193 [ dn ]) in insn 10:
  Adding insn 4 to worklist
Processing use of (reg 1 r1) in insn 4:
Processing use of (reg 25 sfp) in insn 17:
Processing use of (subreg (reg 420) 0) in insn 17:
  Adding insn 15 to worklist
Processing use of (subreg (reg 196) 4) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 190 [ D.5044 ]) in insn 14:
Processing use of (reg 197) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 25 sfp) in insn 23:
Processing use of (subreg (reg 179 [ D.5579 ]) 0) in insn 23:
  Adding insn 22 to worklist
Processing use of (reg 203) in insn 22:
  Adding insn 21 to worklist
Processing use of (reg 202) in insn 21:
  Adding insn 20 to worklist
Processing use of (subreg (reg 422) 0) in insn 20:
  Adding insn 18 to worklist
Processing use of (subreg (reg 190 [ D.5044 ]) 4) in insn 18:
Processing use of (reg 24 cc) in insn 47:
  Adding insn 46 to worklist
Processing use of (reg 219) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 218) in insn 45:
  Adding insn 44 to worklist
Processing use of (subreg (reg 217) 0) in insn 44:
  Adding insn 43 to worklist
Processing use of (reg 213) in insn 43:
  Adding insn 37 to worklist
Processing use of (reg 216) in insn 43:
  Adding insn 41 to worklist
Processing use of (reg 24 cc) in insn 41:
  Adding insn 40 to worklist
Processing use of (reg 211 [ D.5579 ]) in insn 40:
  Adding insn 34 to worklist
Processing use of (subreg (reg 179 [ D.5579 ]) 0) in insn 34:
Processing use of (reg 24 cc) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 211 [ D.5579 ]) in insn 36:
Processing use of (reg 212) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 209) in insn 35:
  Adding insn 33 to worklist
Processing use of (subreg (reg 210) 0) in insn 33:
  Adding insn 32 to worklist


vfp_double_fdiv

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={22d,19u} r1={19d,10u} r2={17d,8u} r3={15d,5u} r4={2d,2u} r11={1d,75u} r12={12d} r13={1d,85u} r14={12d,1u} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={77d,46u} r25={1d,115u,9d} r26={1d,74u} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={9d} r103={9d} r104={9d} r105={9d} r106={9d} r107={9d} r108={9d} r109={9d} r110={9d} r111={9d} r112={9d} r113={9d} r114={9d} r115={9d} r116={9d} r117={9d} r118={9d} r119={9d} r120={9d} r121={9d} r122={9d} r123={9d} r124={9d} r125={9d} r126={9d} r127={9d} r134={1d,2u} r135={3d,5u} r136={1d,1u} r137={1d,4u} r138={1d,1u} r139={1d,2u} r140={3d,6u} r141={1d,1u} r142={1d,4u} r143={5d,7u,2d} r149={2d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,3u} r154={1d,1u} r156={3d,7u} r157={3d,3u} r158={2d,3u} r159={2d,2u} r160={4d,6u,3d} r161={1d,6u} r162={1d,2u} r163={1d,3u} r164={1d,1u} r165={1d,3u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={2d,1u} r174={1d,2u} r175={1d,3u,1d} r176={1d,2u} r177={1d,4u} r178={5d,11u,2d} r179={1d,2u} r180={5d,6u,1d} r181={2d,3u} r182={2d,2u} r183={4d,5u} r184={4d,5u} r185={7d,1u} r186={1d,3u} r188={1d,2u} r189={1d,5u,1d} r190={1d,5u,1d} r192={1d,3u} r193={1d,1u} r194={1d,1u} r195={1d,3u} r196={1d,1u} r197={1d,1u} r202={1d,1u,1d} r203={1d,1u} r206={1d,1u} r207={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,2u} r212={1d,1u} r213={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r227={1d,1u,1d} r228={1d,1u} r231={1d,1u} r232={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,2u} r237={1d,1u} r238={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={2d,2u} r254={1d,2u} r255={1d,1u} r256={2d,2u} r257={2d,2u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={2d,2u} r264={1d,2u} r265={1d,1u} r266={2d,2u} r267={2d,2u} r268={1d,1u} r269={1d,3u} r270={1d,1u} r271={1d,2u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r281={1d,1u,1d} r282={1d,1u} r283={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,2u} r289={1d,11u} r290={1d,2u} r291={1d,1u} r293={1d,1u} r294={1d,2u} r295={1d,2u} r308={3d,3u} r309={1d,1u} r310={1d,1u} r311={1d,1u} r314={3d,4u} r316={3d,3u} r317={1d,1u} r318={1d,2u} r319={1d,1u} r320={1d,2u} r321={1d,2u} r337={3d,3u} r338={1d,1u} r339={1d,2u} r340={1d,1u} r343={2d,1u} r344={2d,2u} r345={1d,1u} r346={1d,1u} r347={1d,1u} r348={1d,1u} r349={1d,1u} r350={1d,1u} r351={1d,1u} r352={1d,1u} r354={1d,1u} r356={3d,4u} r357={1d,1u} r358={1d,1u} r360={3d,3u} r361={1d,1u} r364={4d,5u} r365={1d,1u} r366={1d,2u} r367={1d,1u} r369={1d,1u} r370={1d,1u} r371={1d,1u} r372={1d,1u} r375={1d,1u} r377={1d,1u} r378={1d,1u} r379={1d,4u} r381={1d,1u} r383={3d,3u} r385={1d,1u} r386={1d,1u} r388={3d,3u} r389={1d,1u} r393={4d,5u} r394={1d,1u} r395={1d,2u} r396={1d,1u} r398={1d,1u} r400={1d,1u} r411={1d,2u} r420={1d,1u} r422={1d,1u} r424={1d,1u} r425={2d,3u} r426={1d,1u} r428={1d,1u} r430={1d,1u} r431={2d,3u} r432={1d,2u} r434={1d,2u} r436={1d,2u} r442={1d,1u} r443={1d,1u} r444={1d,1u} r445={1d,1u} r446={1d,1u} 
;;    total ref usage 2275{1442d,810u,23e} in 420{411 regular + 9 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	
0[0,22] 1[22,19] 2[41,17] 3[58,15] 4[73,2] 11[75,1] 12[76,12] 13[88,1] 14[89,12] 15[101,9] 16[110,9] 17[119,9] 18[128,9] 19[137,9] 20[146,9] 21[155,9] 22[164,9] 23[173,9] 24[182,77] 25[259,1] 26[260,1] 27[261,9] 28[270,9] 29[279,9] 30[288,9] 31[297,9] 32[306,9] 33[315,9] 34[324,9] 35[333,9] 36[342,9] 37[351,9] 38[360,9] 39[369,9] 40[378,9] 41[387,9] 42[396,9] 43[405,9] 44[414,9] 45[423,9] 46[432,9] 47[441,9] 48[450,9] 49[459,9] 50[468,9] 51[477,9] 52[486,9] 53[495,9] 54[504,9] 55[513,9] 56[522,9] 57[531,9] 58[540,9] 59[549,9] 60[558,9] 61[567,9] 62[576,9] 63[585,9] 64[594,9] 65[603,9] 66[612,9] 67[621,9] 68[630,9] 69[639,9] 70[648,9] 71[657,9] 72[666,9] 73[675,9] 74[684,9] 75[693,9] 76[702,9] 77[711,9] 78[720,9] 79[729,9] 80[738,9] 81[747,9] 82[756,9] 83[765,9] 84[774,9] 85[783,9] 86[792,9] 87[801,9] 88[810,9] 89[819,9] 90[828,9] 91[837,9] 92[846,9] 93[855,9] 94[864,9] 95[873,9] 96[882,9] 97[891,9] 98[900,9] 99[909,9] 100[918,9] 101[927,9] 102[936,9] 103[945,9] 104[954,9] 105[963,9] 106[972,9] 107[981,9] 108[990,9] 109[999,9] 110[1008,9] 111[1017,9] 112[1026,9] 113[1035,9] 114[1044,9] 115[1053,9] 116[1062,9] 117[1071,9] 118[1080,9] 119[1089,9] 120[1098,9] 121[1107,9] 122[1116,9] 123[1125,9] 124[1134,9] 125[1143,9] 126[1152,9] 127[1161,9] 134[1170,1] 135[1171,3] 136[1174,1] 137[1175,1] 138[1176,1] 139[1177,1] 140[1178,3] 141[1181,1] 142[1182,1] 143[1183,5] 149[1188,2] 150[1190,1] 151[1191,1] 152[1192,1] 153[1193,1] 154[1194,1] 156[1195,3] 157[1198,3] 158[1201,2] 159[1203,2] 160[1205,4] 161[1209,1] 162[1210,1] 163[1211,1] 164[1212,1] 165[1213,1] 166[1214,1] 167[1215,1] 168[1216,1] 169[1217,2] 174[1219,1] 175[1220,1] 176[1221,1] 177[1222,1] 178[1223,5] 179[1228,1] 180[1229,5] 181[1234,2] 182[1236,2] 183[1238,4] 184[1242,4] 185[1246,7] 186[1253,1] 188[1254,1] 189[1255,1] 190[1256,1] 192[1257,1] 193[1258,1] 194[1259,1] 195[1260,1] 196[1261,1] 197[1262,1] 202[1263,1] 203[1264,1] 206[1265,1] 207[1266,1] 209[1267,1] 210[1268,1] 211[1269,1] 212[1270,1] 213[1271,1] 216[1272,1] 217[1273,1] 218[1274,1] 219[1275,1] 220[1276,1] 221[1277,1] 222[1278,1] 227[1279,1] 228[1280,1] 231[1281,1] 232[1282,1] 234[1283,1] 235[1284,1] 236[1285,1] 237[1286,1] 238[1287,1] 241[1288,1] 242[1289,1] 243[1290,1] 244[1291,1] 245[1292,1] 247[1293,1] 248[1294,1] 249[1295,1] 250[1296,1] 251[1297,1] 252[1298,1] 253[1299,2] 254[1301,1] 255[1302,1] 256[1303,2] 257[1305,2] 258[1307,1] 259[1308,1] 260[1309,1] 261[1310,1] 262[1311,1] 263[1312,2] 264[1314,1] 265[1315,1] 266[1316,2] 267[1318,2] 268[1320,1] 269[1321,1] 270[1322,1] 271[1323,1] 272[1324,1] 273[1325,1] 274[1326,1] 275[1327,1] 276[1328,1] 277[1329,1] 278[1330,1] 279[1331,1] 281[1332,1] 282[1333,1] 283[1334,1] 286[1335,1] 287[1336,1] 288[1337,1] 289[1338,1] 290[1339,1] 291[1340,1] 293[1341,1] 294[1342,1] 295[1343,1] 308[1344,3] 309[1347,1] 310[1348,1] 311[1349,1] 314[1350,3] 316[1353,3] 317[1356,1] 318[1357,1] 319[1358,1] 320[1359,1] 321[1360,1] 337[1361,3] 338[1364,1] 339[1365,1] 340[1366,1] 343[1367,2] 344[1369,2] 345[1371,1] 346[1372,1] 347[1373,1] 348[1374,1] 349[1375,1] 350[1376,1] 351[1377,1] 352[1378,1] 354[1379,1] 356[1380,3] 357[1383,1] 358[1384,1] 360[1385,3] 361[1388,1] 364[1389,4] 365[1393,1] 366[1394,1] 367[1395,1] 369[1396,1] 370[1397,1] 371[1398,1] 372[1399,1] 375[1400,1] 377[1401,1] 378[1402,1] 379[1403,1] 381[1404,1] 383[1405,3] 385[1408,1] 386[1409,1] 388[1410,3] 389[1413,1] 393[1414,4] 394[1418,1] 395[1419,1] 396[1420,1] 398[1421,1] 400[1422,1] 411[1423,1] 420[1424,1] 422[1425,1] 424[1426,1] 425[1427,2] 426[1429,1] 428[1430,1] 430[1431,1] 431[1432,2] 432[1434,1] 434[1435,1] 436[1436,1] 442[1437,1] 443[1438,1] 444[1439,1] 445[1440,1] 446[1441,1] 
(note 2 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 179 180 190 192 193 194 195 196 197 202 203 206 207 209 210 211 212 213 216 217 218 219 420 422 424 425
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 179 180 190 192 193 194 195 196 197 202 203 206 207 209 210 211 212 213 216 217 218 219 420 422 424 425
;; live  kill	 14 [lr]
;; rd  in  	(10)
21, 40, 57, 72, 75, 87, 88, 100, 259, 260
;; rd  gen 	(29)
19, 39, 256, 1228, 1231, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1424, 1425, 1426, 1427
;; rd  kill	(79)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1228, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1424, 1425, 1426, 1427, 1428

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 2 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 3 8 4 2 arch/arm/vfp/vfpdouble.c:1006 (set (reg/v:SI 192 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:1006 (set (reg/v:SI 193 [ dn ])
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ dn ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:1006 (set (reg/v:SI 194 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 6 5 7 2 arch/arm/vfp/vfpdouble.c:1006 (set (reg/v:SI 195 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 7 11 2 arch/arm/vfp/vfpdouble.c:1011 (set (reg:SI 0 r0)
        (reg/v:SI 193 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 193 [ dn ])
        (nil)))

(call_insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:1011 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 12 11 13 2 arch/arm/vfp/vfpdouble.c:1011 (set (reg:DI 190 [ D.5044 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 197)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 14 13 15 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 196)
        (and:DI (reg:DI 190 [ D.5044 ])
            (reg:DI 197))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_EQUAL (and:DI (reg:DI 190 [ D.5044 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 15 14 17 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 420)
        (lshiftrt:SI (subreg:SI (reg:DI 196) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 196)
        (nil)))

(insn 17 15 18 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -30 [0xffffffffffffffe2])) [0 vdn.sign+0 S2 A16])
        (subreg:HI (reg:SI 420) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 420)
        (nil)))

(insn 18 17 20 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 422)
        (ashiftrt:SI (subreg:SI (reg:DI 190 [ D.5044 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 20 18 21 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 202)
        (zero_extend:SI (subreg:HI (reg:SI 422) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 422)
        (nil)))

(insn 21 20 22 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 203)
        (ashift:SI (reg:SI 202)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 202)
        (nil)))

(insn 22 21 23 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 179 [ D.5579 ])
        (lshiftrt:SI (reg:SI 203)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 203)
        (expr_list:REG_EQUAL (and:SI (reg:SI 202)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0])) [0 vdn.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 179 [ D.5579 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 206)
        (lshiftrt:SI (subreg:SI (reg:DI 190 [ D.5044 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 425 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 190 [ D.5044 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 425 [+4 ])
        (ior:SI (reg:SI 206)
            (reg:SI 425 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 206)
        (nil)))

(insn 27 26 28 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 424)
        (ashift:SI (subreg:SI (reg:DI 190 [ D.5044 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 190 [ D.5044 ])
        (nil)))

(insn 28 27 853 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 207)
        (ashift:SI (reg:SI 425 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 853 28 29 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 180 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 29 853 30 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 180 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 424)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 424)
        (nil)))

(insn 30 29 31 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 180 [ significand ]) 0)
        (ior:SI (reg:SI 207)
            (subreg:SI (reg/v:DI 180 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 207)
        (nil)))

(insn 31 30 32 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 180 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 425 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 425 [+4 ])
        (nil)))

(insn 32 31 33 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 210)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 33 32 34 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 209)
        (subreg:HI (reg:SI 210) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 210)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 34 33 35 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 211 [ D.5579 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 179 [ D.5579 ]) 0))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 179 [ D.5579 ])
        (nil)))

(insn 35 34 36 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 212)
        (sign_extend:SI (reg:HI 209))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 209)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 36 35 37 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 211 [ D.5579 ])
            (reg:SI 212))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 212)
        (nil)))

(insn 37 36 40 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 213)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 40 37 41 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 211 [ D.5579 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 211 [ D.5579 ])
        (nil)))

(insn 41 40 43 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 216)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 43 41 44 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 217)
        (and:SI (reg:SI 213)
            (reg:SI 216))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 216)
        (expr_list:REG_DEAD (reg:SI 213)
            (nil))))

(insn 44 43 45 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 218)
        (subreg:QI (reg:SI 217) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 217)
        (nil)))

(insn 45 44 46 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 219)
        (zero_extend:SI (reg:QI 218))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 218)
        (nil)))

(insn 46 45 47 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 219)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 219)
        (nil)))

(jump_insn 47 46 48 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; rd  out 	(36)
19, 39, 57, 72, 75, 87, 88, 256, 259, 260, 1228, 1231, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1424, 1425, 1426, 1427


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ }u54(13){ }u55(25){ }u56(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180
;; lr  def 	 180 220
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; live  gen 	 180 220
;; live  kill	
;; rd  in  	(36)
19, 39, 57, 72, 75, 87, 88, 256, 259, 260, 1228, 1231, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1424, 1425, 1426, 1427
;; rd  gen 	(2)
1230, 1276
;; rd  kill	(6)
1229, 1230, 1231, 1232, 1233, 1276

;; Pred edge  2 [50.0%]  (fallthru)
(note 48 47 49 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 220)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 50 49 51 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 180 [ significand ])
        (ior:DI (reg/v:DI 180 [ significand ])
            (reg:DI 220))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 220)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 180 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; rd  out 	(37)
19, 39, 57, 72, 75, 87, 88, 256, 259, 260, 1228, 1230, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1424, 1425, 1426, 1427


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 194
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 176 177 178 189 221 222 227 228 231 232 234 235 236 237 238 241 242 243 244 426 428 430 431
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 192 194 195
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 176 177 178 189 221 222 227 228 231 232 234 235 236 237 238 241 242 243 244 426 428 430 431
;; live  kill	 14 [lr]
;; rd  in  	(38)
19, 39, 57, 72, 75, 87, 88, 256, 259, 260, 1228, 1230, 1231, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1424, 1425, 1426, 1427
;; rd  gen 	(26)
17, 38, 253, 1221, 1222, 1225, 1255, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1429, 1430, 1431, 1432
;; rd  kill	(76)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1221, 1222, 1255, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1429, 1430, 1431, 1432, 1433

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 51 50 52 4 157 "" [1 uses])

(note 52 51 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 180 [ significand ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v:DI 180 [ significand ])
        (nil)))

(insn 54 53 55 4 arch/arm/vfp/vfpdouble.c:1012 (set (reg:SI 0 r0)
        (reg/v:SI 194 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 194 [ dm ])
        (nil)))

(call_insn 55 54 56 4 arch/arm/vfp/vfpdouble.c:1012 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 56 55 57 4 arch/arm/vfp/vfpdouble.c:1012 (set (reg:DI 189 [ D.5047 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 57 56 58 4 arch/arm/vfp/vfp.h:304 (set (reg:DI 222)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 58 57 59 4 arch/arm/vfp/vfp.h:304 (set (reg:DI 221)
        (and:DI (reg:DI 189 [ D.5047 ])
            (reg:DI 222))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 222)
        (expr_list:REG_EQUAL (and:DI (reg:DI 189 [ D.5047 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 59 58 61 4 arch/arm/vfp/vfp.h:304 (set (reg:SI 426)
        (lshiftrt:SI (subreg:SI (reg:DI 221) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 221)
        (nil)))

(insn 61 59 62 4 arch/arm/vfp/vfp.h:304 (set (reg:SI 176 [ D.5597 ])
        (zero_extend:SI (subreg:HI (reg:SI 426) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 426)
        (nil)))

(insn 62 61 63 4 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -46 [0xffffffffffffffd2])) [0 vdm.sign+0 S2 A16])
        (subreg/s/u:HI (reg:SI 176 [ D.5597 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 63 62 65 4 arch/arm/vfp/vfp.h:305 (set (reg:SI 428)
        (ashiftrt:SI (subreg:SI (reg:DI 189 [ D.5047 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 65 63 66 4 arch/arm/vfp/vfp.h:305 (set (reg:SI 227)
        (zero_extend:SI (subreg:HI (reg:SI 428) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 428)
        (nil)))

(insn 66 65 67 4 arch/arm/vfp/vfp.h:305 (set (reg:SI 228)
        (ashift:SI (reg:SI 227)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 227)
        (nil)))

(insn 67 66 68 4 arch/arm/vfp/vfp.h:305 (set (reg:SI 177 [ D.5594 ])
        (lshiftrt:SI (reg:SI 228)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 228)
        (expr_list:REG_EQUAL (and:SI (reg:SI 227)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 68 67 69 4 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0])) [0 vdm.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 177 [ D.5594 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 69 68 70 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 231)
        (lshiftrt:SI (subreg:SI (reg:DI 189 [ D.5047 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 70 69 71 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 431 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 189 [ D.5047 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 71 70 72 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 431 [+4 ])
        (ior:SI (reg:SI 231)
            (reg:SI 431 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 231)
        (nil)))

(insn 72 71 73 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 430)
        (ashift:SI (subreg:SI (reg:DI 189 [ D.5047 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 189 [ D.5047 ])
        (nil)))

(insn 73 72 854 4 arch/arm/vfp/vfp.h:308 (set (reg:SI 232)
        (ashift:SI (reg:SI 431 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 854 73 74 4 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 178 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 74 854 75 4 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 178 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 430)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 430)
        (nil)))

(insn 75 74 76 4 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 178 [ significand ]) 0)
        (ior:SI (reg:SI 232)
            (subreg:SI (reg/v:DI 178 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 232)
        (nil)))

(insn 76 75 77 4 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 178 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 431 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 431 [+4 ])
        (nil)))

(insn 77 76 78 4 arch/arm/vfp/vfp.h:309 (set (reg:SI 235)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 78 77 79 4 arch/arm/vfp/vfp.h:309 (set (reg:HI 234)
        (subreg:HI (reg:SI 235) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 235)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 79 78 80 4 arch/arm/vfp/vfp.h:309 (set (reg:SI 236 [ D.5594 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 177 [ D.5594 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 80 79 81 4 arch/arm/vfp/vfp.h:309 (set (reg:SI 237)
        (sign_extend:SI (reg:HI 234))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 234)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 81 80 82 4 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 236 [ D.5594 ])
            (reg:SI 237))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 237)
        (nil)))

(insn 82 81 85 4 arch/arm/vfp/vfp.h:309 (set (reg:SI 238)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 85 82 86 4 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 236 [ D.5594 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 236 [ D.5594 ])
        (nil)))

(insn 86 85 88 4 arch/arm/vfp/vfp.h:309 (set (reg:SI 241)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 88 86 89 4 arch/arm/vfp/vfp.h:309 (set (reg:SI 242)
        (and:SI (reg:SI 238)
            (reg:SI 241))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 241)
        (expr_list:REG_DEAD (reg:SI 238)
            (nil))))

(insn 89 88 90 4 arch/arm/vfp/vfp.h:309 (set (reg:QI 243)
        (subreg:QI (reg:SI 242) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 242)
        (nil)))

(insn 90 89 91 4 arch/arm/vfp/vfp.h:309 (set (reg:SI 244)
        (zero_extend:SI (reg:QI 243))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 243)
        (nil)))

(insn 91 90 92 4 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 244)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 244)
        (nil)))

(jump_insn 92 91 93 4 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 96)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; rd  out 	(61)
17, 38, 57, 72, 75, 87, 88, 253, 259, 260, 1221, 1222, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u112(11){ }u113(13){ }u114(25){ }u115(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178
;; lr  def 	 178 245
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; live  gen 	 178 245
;; live  kill	
;; rd  in  	(61)
17, 38, 57, 72, 75, 87, 88, 253, 259, 260, 1221, 1222, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
1224, 1292
;; rd  kill	(6)
1223, 1224, 1225, 1226, 1227, 1292

;; Pred edge  4 [50.0%]  (fallthru)
(note 93 92 94 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 5 arch/arm/vfp/vfp.h:310 (set (reg:DI 245)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 95 94 96 5 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 178 [ significand ])
        (ior:DI (reg/v:DI 178 [ significand ])
            (reg:DI 245))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 245)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 178 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; rd  out 	(62)
17, 38, 57, 72, 75, 87, 88, 253, 259, 260, 1221, 1222, 1224, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u119(11){ }u120(13){ }u121(25){ }u122(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178
;; lr  def 	 24 [cc] 174 247 248 249 250 251 252
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 177 178 192 195
;; live  gen 	 24 [cc] 174 247 248 249 250 251 252
;; live  kill	
;; rd  in  	(63)
17, 38, 57, 72, 75, 87, 88, 253, 259, 260, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(8)
252, 1219, 1293, 1294, 1295, 1296, 1297, 1298
;; rd  kill	(7)
1219, 1293, 1294, 1295, 1296, 1297, 1298

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 96 95 97 6 158 "" [1 uses])

(note 97 96 98 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 98 97 99 6 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 178 [ significand ])) 163 {*arm_movdi} (nil))

(insn 99 98 101 6 arch/arm/vfp/vfpdouble.c:1014 (set (reg:SI 247 [ vdn.sign ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -30 [0xffffffffffffffe2])) [0 vdn.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 101 99 102 6 arch/arm/vfp/vfpdouble.c:1014 (set (reg:SI 248)
        (xor:SI (reg:SI 176 [ D.5597 ])
            (reg:SI 247 [ vdn.sign ]))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 247 [ vdn.sign ])
        (expr_list:REG_DEAD (reg:SI 176 [ D.5597 ])
            (nil))))

(insn 102 101 103 6 arch/arm/vfp/vfpdouble.c:1014 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -14 [0xfffffffffffffff2])) [0 vdd.sign+0 S2 A16])
        (subreg:HI (reg:SI 248) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 248)
        (nil)))

(insn 103 102 104 6 arch/arm/vfp/vfp.h:330 (set (reg:SI 174 [ D.5606 ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -32 [0xffffffffffffffe0])) [0 vdn.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 104 103 105 6 arch/arm/vfp/vfp.h:330 (set (reg:SI 250)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 105 104 106 6 arch/arm/vfp/vfp.h:330 (set (reg:HI 249)
        (subreg:HI (reg:SI 250) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 250)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 106 105 107 6 arch/arm/vfp/vfp.h:330 (set (reg:SI 251 [ D.5606 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 174 [ D.5606 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 107 106 108 6 arch/arm/vfp/vfp.h:330 (set (reg:SI 252)
        (sign_extend:SI (reg:HI 249))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 249)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 108 107 109 6 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 251 [ D.5606 ])
            (reg:SI 252))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 252)
        (expr_list:REG_DEAD (reg:SI 251 [ D.5606 ])
            (nil))))

(jump_insn 109 108 110 6 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 137)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 6 -> ( 7 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 177 178 192 195
;; rd  out 	(70)
17, 38, 57, 72, 75, 87, 88, 252, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  7 [28.0%]  (fallthru)
;; Succ edge  10 [72.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u137(11){ }u138(13){ }u139(25){ }u140(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 175 253
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  gen 	 24 [cc] 175 253
;; live  kill	
;; rd  in  	(70)
17, 38, 57, 72, 75, 87, 88, 252, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(3)
251, 1220, 1299
;; rd  kill	(3)
1220, 1299, 1300

;; Pred edge  6 [28.0%]  (fallthru)
(note 110 109 111 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 112 7 arch/arm/vfp/vfp.h:331 (set (reg:DI 175 [ D.5605 ])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 112 111 113 7 arch/arm/vfp/vfp.h:331 (set (reg:SI 253 [ D.5605 ])
        (subreg:SI (reg:DI 175 [ D.5605 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 113 112 114 7 arch/arm/vfp/vfp.h:331 (set (reg:SI 253 [ D.5605 ])
        (ior:SI (reg:SI 253 [ D.5605 ])
            (subreg:SI (reg:DI 175 [ D.5605 ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 114 113 115 7 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 253 [ D.5605 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 253 [ D.5605 ])
        (nil)))

(jump_insn 115 114 116 7 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177 178 192 195
;; rd  out 	(72)
17, 38, 57, 72, 75, 87, 88, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u147(11){ }u148(13){ }u149(25){ }u150(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 183
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  gen 	 183
;; live  kill	
;; rd  in  	(72)
17, 38, 57, 72, 75, 87, 88, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1241
;; rd  kill	(4)
1238, 1239, 1240, 1241

;; Pred edge  7 [50.0%]  (fallthru)
(note 116 115 117 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 117 116 870 8 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 183 [ tn ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 870 117 871 8 (set (pc)
        (label_ref 159)) -1 (nil))
;; End of basic block 8 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(73)
17, 38, 57, 72, 75, 87, 88, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  13 [100.0%] 

(barrier 871 870 120)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u151(11){ }u152(13){ }u153(25){ }u154(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175
;; lr  def 	 24 [cc] 183 254 255 256
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177 178 192 195
;; live  gen 	 24 [cc] 183 254 255 256
;; live  kill	
;; rd  in  	(72)
17, 38, 57, 72, 75, 87, 88, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
190, 1239, 1301, 1302, 1303
;; rd  kill	(8)
1238, 1239, 1240, 1241, 1301, 1302, 1303, 1304

;; Pred edge  7 [50.0%] 
(code_label 120 871 121 9 160 "" [1 uses])

(note 121 120 122 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 122 121 123 9 arch/arm/vfp/vfp.h:333 (set (reg:DI 255)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 123 122 124 9 arch/arm/vfp/vfp.h:333 (set (reg:DI 254)
        (and:DI (reg:DI 175 [ D.5605 ])
            (reg:DI 255))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 255)
        (expr_list:REG_DEAD (reg:DI 175 [ D.5605 ])
            (expr_list:REG_EQUAL (and:DI (reg:DI 175 [ D.5605 ])
                    (const_int 2305843009213693952 [0x2000000000000000]))
                (nil)))))

(insn 124 123 125 9 arch/arm/vfp/vfp.h:333 (set (reg:SI 256)
        (subreg:SI (reg:DI 254) 0)) 167 {*arm_movsi_insn} (nil))

(insn 125 124 836 9 arch/arm/vfp/vfp.h:333 (set (reg:SI 256)
        (ior:SI (reg:SI 256)
            (subreg:SI (reg:DI 254) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 254)
        (nil)))

(insn 836 125 837 9 arch/arm/vfp/vfp.h:336 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 256)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 256)
        (nil)))

(insn 837 836 872 9 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 183 [ tn ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 16 [0x10])
            (const_int 48 [0x30]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 872 837 873 9 (set (pc)
        (label_ref 159)) -1 (nil))
;; End of basic block 9 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(76)
17, 38, 57, 72, 75, 87, 88, 190, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1239, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  13 [100.0%] 

(barrier 873 872 137)

;; Start of basic block ( 6) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u163(11){ }u164(13){ }u165(25){ }u166(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 177 178 192 195
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(70)
17, 38, 57, 72, 75, 87, 88, 252, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
250
;; rd  kill	(0)


;; Pred edge  6 [72.0%] 
(code_label 137 873 138 10 159 "" [1 uses])

(note 138 137 139 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 139 138 140 10 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 174 [ D.5606 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 174 [ D.5606 ])
        (nil)))

(jump_insn 140 139 141 10 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 145)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; rd  out 	(70)
17, 38, 57, 72, 75, 87, 88, 250, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  12 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u169(11){ }u170(13){ }u171(25){ }u172(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 183
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  gen 	 183
;; live  kill	
;; rd  in  	(70)
17, 38, 57, 72, 75, 87, 88, 250, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1240
;; rd  kill	(4)
1238, 1239, 1240, 1241

;; Pred edge  10 [50.0%]  (fallthru)
(note 141 140 142 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 142 141 874 11 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 183 [ tn ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 874 142 875 11 (set (pc)
        (label_ref 159)) -1 (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(71)
17, 38, 57, 72, 75, 87, 88, 250, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1240, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  13 [100.0%] 

(barrier 875 874 145)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u173(11){ }u174(13){ }u175(25){ }u176(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 183 257 258
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 192 195
;; live  gen 	 24 [cc] 183 257 258
;; live  kill	
;; rd  in  	(70)
17, 38, 57, 72, 75, 87, 88, 250, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(4)
189, 1238, 1305, 1307
;; rd  kill	(7)
1238, 1239, 1240, 1241, 1305, 1306, 1307

;; Pred edge  10 [50.0%] 
(code_label 145 875 146 12 163 "" [1 uses])

(note 146 145 147 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 147 146 148 12 arch/arm/vfp/vfp.h:338 (set (reg:SI 257 [ vdn.significand ])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 148 147 149 12 arch/arm/vfp/vfp.h:338 (set (reg:SI 258 [ vdn.significand+4 ])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -20 [0xffffffffffffffec])) [0 vdn.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 149 148 838 12 arch/arm/vfp/vfp.h:338 (set (reg:SI 257 [ vdn.significand ])
        (ior:SI (reg:SI 257 [ vdn.significand ])
            (reg:SI 258 [ vdn.significand+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 258 [ vdn.significand+4 ])
        (nil)))

(insn 838 149 839 12 arch/arm/vfp/vfp.h:341 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 257 [ vdn.significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 257 [ vdn.significand ])
        (nil)))

(insn 839 838 159 12 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 183 [ tn ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(73)
17, 38, 57, 72, 75, 87, 88, 189, 259, 260, 1219, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1305, 1307, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 9 8 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u183(11){ }u184(13){ }u185(25){ }u186(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 259 260 261 262
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  gen 	 24 [cc] 259 260 261 262
;; live  kill	
;; rd  in  	(84)
17, 38, 57, 72, 75, 87, 88, 189, 190, 250, 251, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
249, 1308, 1309, 1310, 1311
;; rd  kill	(4)
1308, 1309, 1310, 1311

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
;; Pred edge  8 [100.0%] 
;; Pred edge  11 [100.0%] 
(code_label 159 839 160 13 161 "" [3 uses])

(note 160 159 161 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 161 160 162 13 arch/arm/vfp/vfp.h:330 (set (reg:SI 260)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 162 161 163 13 arch/arm/vfp/vfp.h:330 (set (reg:HI 259)
        (subreg:HI (reg:SI 260) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 260)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 163 162 164 13 arch/arm/vfp/vfp.h:330 (set (reg:SI 261 [ D.5594 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 177 [ D.5594 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 164 163 165 13 arch/arm/vfp/vfp.h:330 (set (reg:SI 262)
        (sign_extend:SI (reg:HI 259))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 259)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 165 164 166 13 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 261 [ D.5594 ])
            (reg:SI 262))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 262)
        (expr_list:REG_DEAD (reg:SI 261 [ D.5594 ])
            (nil))))

(jump_insn 166 165 167 13 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 193)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 13 -> ( 14 17)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; rd  out 	(85)
17, 38, 57, 72, 75, 87, 88, 249, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  14 [28.0%]  (fallthru)
;; Succ edge  17 [72.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u193(11){ }u194(13){ }u195(25){ }u196(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178
;; lr  def 	 24 [cc] 263
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  gen 	 24 [cc] 263
;; live  kill	
;; rd  in  	(85)
17, 38, 57, 72, 75, 87, 88, 249, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
248, 1312
;; rd  kill	(2)
1312, 1313

;; Pred edge  13 [28.0%]  (fallthru)
(note 167 166 168 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 168 167 169 14 arch/arm/vfp/vfp.h:331 (set (reg:SI 263 [ significand ])
        (subreg:SI (reg/v:DI 178 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 169 168 170 14 arch/arm/vfp/vfp.h:331 (set (reg:SI 263 [ significand ])
        (ior:SI (reg:SI 263 [ significand ])
            (subreg:SI (reg/v:DI 178 [ significand ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 170 169 171 14 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 263 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 263 [ significand ])
        (nil)))

(jump_insn 171 170 172 14 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 176)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; rd  out 	(86)
17, 38, 57, 72, 75, 87, 88, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u202(11){ }u203(13){ }u204(25){ }u205(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 184
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 192 195
;; live  gen 	 184
;; live  kill	
;; rd  in  	(86)
17, 38, 57, 72, 75, 87, 88, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1245
;; rd  kill	(4)
1242, 1243, 1244, 1245

;; Pred edge  14 [50.0%]  (fallthru)
(note 172 171 173 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 173 172 876 15 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 184 [ tm ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 876 173 877 15 (set (pc)
        (label_ref 214)) -1 (nil))
;; End of basic block 15 -> ( 20)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(87)
17, 38, 57, 72, 75, 87, 88, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  20 [100.0%] 

(barrier 877 876 176)

;; Start of basic block ( 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u206(11){ }u207(13){ }u208(25){ }u209(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178
;; lr  def 	 24 [cc] 184 264 265 266
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  gen 	 24 [cc] 184 264 265 266
;; live  kill	
;; rd  in  	(86)
17, 38, 57, 72, 75, 87, 88, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
188, 1243, 1314, 1315, 1316
;; rd  kill	(8)
1242, 1243, 1244, 1245, 1314, 1315, 1316, 1317

;; Pred edge  14 [50.0%] 
(code_label 176 877 177 16 166 "" [1 uses])

(note 177 176 178 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 178 177 179 16 arch/arm/vfp/vfp.h:333 (set (reg:DI 265)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 179 178 180 16 arch/arm/vfp/vfp.h:333 (set (reg:DI 264)
        (and:DI (reg/v:DI 178 [ significand ])
            (reg:DI 265))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 265)
        (expr_list:REG_DEAD (reg/v:DI 178 [ significand ])
            (expr_list:REG_EQUAL (and:DI (reg/v:DI 178 [ significand ])
                    (const_int 2305843009213693952 [0x2000000000000000]))
                (nil)))))

(insn 180 179 181 16 arch/arm/vfp/vfp.h:333 (set (reg:SI 266)
        (subreg:SI (reg:DI 264) 0)) 167 {*arm_movsi_insn} (nil))

(insn 181 180 840 16 arch/arm/vfp/vfp.h:333 (set (reg:SI 266)
        (ior:SI (reg:SI 266)
            (subreg:SI (reg:DI 264) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 264)
        (nil)))

(insn 840 181 841 16 arch/arm/vfp/vfp.h:336 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 266)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 266)
        (nil)))

(insn 841 840 878 16 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 184 [ tm ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 16 [0x10])
            (const_int 48 [0x30]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 878 841 879 16 (set (pc)
        (label_ref 214)) -1 (nil))
;; End of basic block 16 -> ( 20)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(90)
17, 38, 57, 72, 75, 87, 88, 188, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1243, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  20 [100.0%] 

(barrier 879 878 193)

;; Start of basic block ( 13) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u218(11){ }u219(13){ }u220(25){ }u221(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 178 183 192 195
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(85)
17, 38, 57, 72, 75, 87, 88, 249, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
247
;; rd  kill	(0)


;; Pred edge  13 [72.0%] 
(code_label 193 879 194 17 165 "" [1 uses])

(note 194 193 195 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 195 194 196 17 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 177 [ D.5594 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 177 [ D.5594 ])
        (nil)))

(jump_insn 196 195 197 17 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 201)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 19 18)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; rd  out 	(85)
17, 38, 57, 72, 75, 87, 88, 247, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  19 [50.0%] 
;; Succ edge  18 [50.0%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u224(11){ }u225(13){ }u226(25){ }u227(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 184
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 192 195
;; live  gen 	 184
;; live  kill	
;; rd  in  	(85)
17, 38, 57, 72, 75, 87, 88, 247, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1244
;; rd  kill	(4)
1242, 1243, 1244, 1245

;; Pred edge  17 [50.0%]  (fallthru)
(note 197 196 198 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 198 197 880 18 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 184 [ tm ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 880 198 881 18 (set (pc)
        (label_ref 214)) -1 (nil))
;; End of basic block 18 -> ( 20)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(86)
17, 38, 57, 72, 75, 87, 88, 247, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1244, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  20 [100.0%] 

(barrier 881 880 201)

;; Start of basic block ( 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u228(11){ }u229(13){ }u230(25){ }u231(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178
;; lr  def 	 24 [cc] 184 267
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 178 183 192 195
;; live  gen 	 24 [cc] 184 267
;; live  kill	
;; rd  in  	(85)
17, 38, 57, 72, 75, 87, 88, 247, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(3)
187, 1242, 1318
;; rd  kill	(6)
1242, 1243, 1244, 1245, 1318, 1319

;; Pred edge  17 [50.0%] 
(code_label 201 881 202 19 169 "" [1 uses])

(note 202 201 203 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 203 202 204 19 arch/arm/vfp/vfp.h:338 (set (reg:SI 267 [ significand ])
        (subreg:SI (reg/v:DI 178 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 204 203 842 19 arch/arm/vfp/vfp.h:338 (set (reg:SI 267 [ significand ])
        (ior:SI (reg:SI 267 [ significand ])
            (subreg:SI (reg/v:DI 178 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 178 [ significand ])
        (nil)))

(insn 842 204 843 19 arch/arm/vfp/vfp.h:341 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 267 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 267 [ significand ])
        (nil)))

(insn 843 842 214 19 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 184 [ tm ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 19 -> ( 20)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(87)
17, 38, 57, 72, 75, 87, 88, 187, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1318, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  20 [100.0%]  (fallthru)

;; Start of basic block ( 19 16 15 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u237(11){ }u238(13){ }u239(25){ }u240(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 24 [cc] 268
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 268
;; live  kill	
;; rd  in  	(97)
17, 38, 57, 72, 75, 87, 88, 187, 188, 247, 248, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
246, 1320
;; rd  kill	(1)
1320

;; Pred edge  19 [100.0%]  (fallthru)
;; Pred edge  16 [100.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  18 [100.0%] 
(code_label 214 843 215 20 167 "" [3 uses])

(note 215 214 216 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 216 215 217 20 arch/arm/vfp/vfpdouble.c:1022 (set (reg:SI 268)
        (and:SI (reg/v:SI 183 [ tn ])
            (const_int 16 [0x10]))) 67 {*arm_andsi3_insn} (nil))

(insn 217 216 218 20 arch/arm/vfp/vfpdouble.c:1022 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 268)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 268)
        (nil)))

(jump_insn 218 217 219 20 arch/arm/vfp/vfpdouble.c:1022 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 628)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 20 -> ( 68 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(95)
17, 38, 57, 72, 75, 87, 88, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  68 [29.0%] 
;; Succ edge  21 [71.0%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u244(11){ }u245(13){ }u246(25){ }u247(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 24 [cc] 269
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 269
;; live  kill	
;; rd  in  	(95)
17, 38, 57, 72, 75, 87, 88, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
245, 1321
;; rd  kill	(1)
1321

;; Pred edge  20 [71.0%]  (fallthru)
(note 219 218 220 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 220 219 221 21 arch/arm/vfp/vfpdouble.c:1028 (set (reg:SI 269)
        (and:SI (reg/v:SI 184 [ tm ])
            (const_int 16 [0x10]))) 67 {*arm_andsi3_insn} (nil))

(insn 221 220 222 21 arch/arm/vfp/vfpdouble.c:1028 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 269)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 222 221 223 21 arch/arm/vfp/vfpdouble.c:1028 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 666)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 21 -> ( 70 22)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269
;; rd  out 	(96)
17, 38, 57, 72, 75, 87, 88, 245, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  70 [29.0%] 
;; Succ edge  22 [71.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u251(11){ }u252(13){ }u253(25){ }u254(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184
;; lr  def 	 24 [cc] 270 271
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269
;; live  gen 	 24 [cc] 270 271
;; live  kill	
;; rd  in  	(96)
17, 38, 57, 72, 75, 87, 88, 245, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(3)
244, 1322, 1323
;; rd  kill	(2)
1322, 1323

;; Pred edge  21 [71.0%]  (fallthru)
(note 223 222 224 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 224 223 225 22 arch/arm/vfp/vfpdouble.c:1035 (set (reg:SI 270)
        (and:SI (reg/v:SI 183 [ tn ])
            (const_int 10 [0xa]))) 67 {*arm_andsi3_insn} (nil))

(insn 225 224 226 22 arch/arm/vfp/vfpdouble.c:1035 (set (reg:SI 271)
        (and:SI (reg:SI 270)
            (reg/v:SI 184 [ tm ]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 270)
        (nil)))

(insn 226 225 227 22 arch/arm/vfp/vfpdouble.c:1035 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 271)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 227 226 228 22 arch/arm/vfp/vfpdouble.c:1035 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 701)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 22 -> ( 74 23)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269 271
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 269 271
;; rd  out 	(98)
17, 38, 57, 72, 75, 87, 88, 244, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  74 [29.0%] 
;; Succ edge  23 [71.0%]  (fallthru)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u260(11){ }u261(13){ }u262(25){ }u263(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 271
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 24 [cc] 272
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 271
;; live  gen 	 24 [cc] 272
;; live  kill	
;; rd  in  	(98)
17, 38, 57, 72, 75, 87, 88, 244, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
243, 1324
;; rd  kill	(1)
1324

;; Pred edge  22 [71.0%]  (fallthru)
(note 228 227 229 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 229 228 230 23 arch/arm/vfp/vfpdouble.c:1041 (set (reg:SI 272)
        (and:SI (reg/v:SI 183 [ tn ])
            (const_int 8 [0x8]))) 67 {*arm_andsi3_insn} (nil))

(insn 230 229 231 23 arch/arm/vfp/vfpdouble.c:1041 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 272)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 272)
        (nil)))

(jump_insn 231 230 232 23 arch/arm/vfp/vfpdouble.c:1041 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 689)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 23 -> ( 72 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 271
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195 271
;; rd  out 	(99)
17, 38, 57, 72, 75, 87, 88, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  72 [50.0%] 
;; Succ edge  24 [50.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u267(11){ }u268(13){ }u269(25){ }u270(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 24 [cc] 273
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 273
;; live  kill	
;; rd  in  	(99)
17, 38, 57, 72, 75, 87, 88, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
242, 1325
;; rd  kill	(1)
1325

;; Pred edge  23 [50.0%]  (fallthru)
(note 232 231 233 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 233 232 234 24 arch/arm/vfp/vfpdouble.c:1047 (set (reg:SI 273)
        (and:SI (reg/v:SI 184 [ tm ])
            (const_int 2 [0x2]))) 67 {*arm_andsi3_insn} (nil))

(insn 234 233 235 24 arch/arm/vfp/vfpdouble.c:1047 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 273)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 273)
        (nil)))

(jump_insn 235 234 236 24 arch/arm/vfp/vfpdouble.c:1047 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 240)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(100)
17, 38, 57, 72, 75, 87, 88, 242, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  25 [50.0%]  (fallthru)
;; Succ edge  26 [50.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u274(11){ }u275(13){ }u276(25){ }u277(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; live  gen 	 185
;; live  kill	
;; rd  in  	(100)
17, 38, 57, 72, 75, 87, 88, 242, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1252
;; rd  kill	(7)
1246, 1247, 1248, 1249, 1250, 1251, 1252

;; Pred edge  24 [50.0%]  (fallthru)
(note 236 235 237 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 237 236 882 25 arch/arm/vfp/vfpdouble.c:1099 (set (reg/v:SI 185 [ exceptions ])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (nil))

(jump_insn 882 237 883 25 (set (pc)
        (label_ref 692)) -1 (nil))
;; End of basic block 25 -> ( 73)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(101)
17, 38, 57, 72, 75, 87, 88, 242, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  73 [100.0%] 

(barrier 883 882 240)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u278(11){ }u279(13){ }u280(25){ }u281(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 24 [cc] 274
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 274
;; live  kill	
;; rd  in  	(100)
17, 38, 57, 72, 75, 87, 88, 242, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
241, 1326
;; rd  kill	(1)
1326

;; Pred edge  24 [50.0%] 
(code_label 240 883 241 26 175 "" [1 uses])

(note 241 240 242 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 242 241 243 26 arch/arm/vfp/vfpdouble.c:1053 (set (reg:SI 274)
        (and:SI (reg/v:SI 184 [ tm ])
            (const_int 8 [0x8]))) 67 {*arm_andsi3_insn} (nil))

(insn 243 242 244 26 arch/arm/vfp/vfpdouble.c:1053 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 274)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 274)
        (nil)))

(jump_insn 244 243 245 26 arch/arm/vfp/vfpdouble.c:1053 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 679)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 26 -> ( 71 27)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(101)
17, 38, 57, 72, 75, 87, 88, 241, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  71 [50.0%] 
;; Succ edge  27 [50.0%]  (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u285(11){ }u286(13){ }u287(25){ }u288(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 24 [cc] 275
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 275
;; live  kill	
;; rd  in  	(101)
17, 38, 57, 72, 75, 87, 88, 241, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
240, 1327
;; rd  kill	(1)
1327

;; Pred edge  26 [50.0%]  (fallthru)
(note 245 244 246 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 246 245 247 27 arch/arm/vfp/vfpdouble.c:1053 discrim 1 (set (reg:SI 275)
        (and:SI (reg/v:SI 183 [ tn ])
            (const_int 2 [0x2]))) 67 {*arm_andsi3_insn} (nil))

(insn 247 246 248 27 arch/arm/vfp/vfpdouble.c:1053 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 275)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 275)
        (nil)))

(jump_insn 248 247 249 27 arch/arm/vfp/vfpdouble.c:1053 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 679)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 27 -> ( 71 28)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; rd  out 	(102)
17, 38, 57, 72, 75, 87, 88, 240, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  71 [50.0%] 
;; Succ edge  28 [50.0%]  (fallthru)

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u292(11){ }u293(13){ }u294(25){ }u295(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 24 [cc] 276
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183 184 192 195
;; live  gen 	 24 [cc] 276
;; live  kill	
;; rd  in  	(102)
17, 38, 57, 72, 75, 87, 88, 240, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
239, 1328
;; rd  kill	(1)
1328

;; Pred edge  27 [50.0%]  (fallthru)
(note 249 248 250 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 250 249 251 28 arch/arm/vfp/vfpdouble.c:1056 (set (reg:SI 276)
        (and:SI (reg/v:SI 183 [ tn ])
            (const_int 4 [0x4]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 183 [ tn ])
        (nil)))

(insn 251 250 252 28 arch/arm/vfp/vfpdouble.c:1056 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 276)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 276)
        (nil)))

(jump_insn 252 251 253 28 arch/arm/vfp/vfpdouble.c:1056 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 257)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; rd  out 	(103)
17, 38, 57, 72, 75, 87, 88, 239, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  29 [29.0%]  (fallthru)
;; Succ edge  30 [71.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u299(11){ }u300(13){ }u301(25){ }u302(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 277
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; live  gen 	 0 [r0] 277
;; live  kill	 14 [lr]
;; rd  in  	(103)
17, 38, 57, 72, 75, 87, 88, 239, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1329
;; rd  kill	(13)
89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1329

;; Pred edge  28 [29.0%]  (fallthru)
(note 253 252 254 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 254 253 255 29 arch/arm/vfp/vfpdouble.c:1057 (set (reg/f:SI 277)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 255 254 256 29 arch/arm/vfp/vfpdouble.c:1057 (set (reg:SI 0 r0)
        (reg/f:SI 277)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 277)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(call_insn 256 255 257 29 arch/arm/vfp/vfpdouble.c:1057 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 29 -> ( 30)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; rd  out 	(104)
17, 38, 57, 72, 75, 87, 88, 239, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  30 [100.0%]  (fallthru)

;; Start of basic block ( 28 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u308(11){ }u309(13){ }u310(25){ }u311(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 24 [cc] 278
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184 192 195
;; live  gen 	 24 [cc] 278
;; live  kill	
;; rd  in  	(104)
17, 38, 57, 72, 75, 87, 88, 239, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
237, 1330
;; rd  kill	(1)
1330

;; Pred edge  28 [71.0%] 
;; Pred edge  29 [100.0%]  (fallthru)
(code_label 257 256 258 30 178 "" [1 uses])

(note 258 257 259 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 259 258 260 30 arch/arm/vfp/vfpdouble.c:1058 (set (reg:SI 278)
        (and:SI (reg/v:SI 184 [ tm ])
            (const_int 4 [0x4]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 184 [ tm ])
        (nil)))

(insn 260 259 261 30 arch/arm/vfp/vfpdouble.c:1058 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 278)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 278)
        (nil)))

(jump_insn 261 260 262 30 arch/arm/vfp/vfpdouble.c:1058 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 266)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 30 -> ( 31 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; rd  out 	(105)
17, 38, 57, 72, 75, 87, 88, 237, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  31 [29.0%]  (fallthru)
;; Succ edge  32 [71.0%] 

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u315(11){ }u316(13){ }u317(25){ }u318(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 279
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 0 [r0] 279
;; live  kill	 14 [lr]
;; rd  in  	(105)
17, 38, 57, 72, 75, 87, 88, 237, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1331
;; rd  kill	(13)
89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1331

;; Pred edge  30 [29.0%]  (fallthru)
(note 262 261 263 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 263 262 264 31 arch/arm/vfp/vfpdouble.c:1059 (set (reg/f:SI 279)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 264 263 265 31 arch/arm/vfp/vfpdouble.c:1059 (set (reg:SI 0 r0)
        (reg/f:SI 279)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 279)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(call_insn 265 264 266 31 arch/arm/vfp/vfpdouble.c:1059 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 31 -> ( 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; rd  out 	(106)
17, 38, 57, 72, 75, 87, 88, 237, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  32 [100.0%]  (fallthru)

;; Start of basic block ( 30 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u324(11){ }u325(13){ }u326(25){ }u327(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 186 188 281 282 283 286 287 288 289 290
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 24 [cc] 186 188 281 282 283 286 287 288 289 290
;; live  kill	 24 [cc]
;; rd  in  	(106)
17, 38, 57, 72, 75, 87, 88, 237, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(11)
194, 1253, 1254, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339
;; rd  kill	(10)
1253, 1254, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339

;; Pred edge  30 [71.0%] 
;; Pred edge  31 [100.0%]  (fallthru)
(code_label 266 265 267 32 179 "" [1 uses])

(note 267 266 268 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 268 267 270 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 281 [ vdn.exponent ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -32 [0xffffffffffffffe0])) [0 vdn.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 270 268 271 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 283)
        (plus:SI (reg:SI 281 [ vdn.exponent ])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 281 [ vdn.exponent ])
        (nil)))

(insn 271 270 273 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 282)
        (plus:SI (reg:SI 283)
            (const_int 2 [0x2]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 283)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 281 [ vdn.exponent ])
                (const_int 1022 [0x3fe]))
            (nil))))

(insn 273 271 275 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 286 [ vdm.exponent ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -48 [0xffffffffffffffd0])) [0 vdm.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 275 273 276 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 287)
        (minus:SI (reg:SI 282)
            (reg:SI 286 [ vdm.exponent ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 286 [ vdm.exponent ])
        (expr_list:REG_DEAD (reg:SI 282)
            (nil))))

(insn 276 275 277 32 arch/arm/vfp/vfpdouble.c:1064 (set (reg:SI 188 [ D.5081 ])
        (zero_extend:SI (subreg:HI (reg:SI 287) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 287)
        (nil)))

(insn 277 276 278 32 arch/arm/vfp/vfpdouble.c:1064 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 vdd.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 188 [ D.5081 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 278 277 279 32 arch/arm/vfp/vfpdouble.c:1065 (set (reg:DI 288 [ vdm.significand ])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0 vdm.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 279 278 281 32 arch/arm/vfp/vfpdouble.c:1065 (parallel [
            (set (reg:DI 289)
                (plus:DI (reg:DI 288 [ vdm.significand ])
                    (reg:DI 288 [ vdm.significand ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 288 [ vdm.significand ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 281 279 282 32 arch/arm/vfp/vfpdouble.c:1065 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0 vdm.significand+0 S8 A64])
        (reg:DI 289)) 163 {*arm_movdi} (nil))

(insn 282 281 283 32 arch/arm/vfp/vfpdouble.c:1066 (set (reg:DI 186 [ D.5084 ])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 283 282 284 32 arch/arm/vfp/vfpdouble.c:1066 (parallel [
            (set (reg:DI 290)
                (plus:DI (reg:DI 186 [ D.5084 ])
                    (reg:DI 186 [ D.5084 ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 284 283 285 32 arch/arm/vfp/vfpdouble.c:1066 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 289) 4)
            (subreg:SI (reg:DI 290) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 285 284 744 32 arch/arm/vfp/vfpdouble.c:1066 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 301)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 32 -> ( 36 33)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; rd  out 	(116)
17, 38, 57, 72, 75, 87, 88, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  36 [50.0%] 
;; Succ edge  33 [50.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u349(11){ }u350(13){ }u351(25){ }u352(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; live  gen 	
;; live  kill	
;; rd  in  	(116)
17, 38, 57, 72, 75, 87, 88, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  32 [50.0%]  (fallthru)
(note 744 285 287 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(jump_insn 287 744 745 33 arch/arm/vfp/vfpdouble.c:1066 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 803)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 33 -> ( 35 34)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; rd  out 	(116)
17, 38, 57, 72, 75, 87, 88, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  35 [71.0%] 
;; Succ edge  34 [29.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u354(11){ }u355(13){ }u356(25){ }u357(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 289 290
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289 290
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(116)
17, 38, 57, 72, 75, 87, 88, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
193
;; rd  kill	(0)


;; Pred edge  33 [29.0%]  (fallthru)
(note 745 287 288 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 288 745 289 34 arch/arm/vfp/vfpdouble.c:1066 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 289) 0)
            (subreg:SI (reg:DI 290) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 290)
        (nil)))

(jump_insn 289 288 803 34 arch/arm/vfp/vfpdouble.c:1066 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 301)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 34 -> ( 36 35)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289
;; rd  out 	(116)
17, 38, 57, 72, 75, 87, 88, 193, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  36 [50.0%] 
;; Succ edge  35 [50.0%]  (fallthru)

;; Start of basic block ( 34 33) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u361(11){ }u362(13){ }u363(25){ }u364(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188
;; lr  def 	 24 [cc] 291 293
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 186 188 192 195 289
;; live  gen 	 291 293
;; live  kill	 24 [cc]
;; rd  in  	(117)
17, 38, 57, 72, 75, 87, 88, 193, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
1340, 1341
;; rd  kill	(2)
1340, 1341

;; Pred edge  34 [50.0%]  (fallthru)
;; Pred edge  33 [71.0%] 
(code_label 803 289 295 35 212 "" [1 uses])

(note 295 803 296 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 296 295 297 35 arch/arm/vfp/vfpdouble.c:1067 (parallel [
            (set (reg:DI 291)
                (lshiftrt:DI (reg:DI 186 [ D.5084 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (expr_list:REG_DEAD (reg:DI 186 [ D.5084 ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 297 296 299 35 arch/arm/vfp/vfpdouble.c:1067 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])
        (reg:DI 291)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 291)
        (nil)))

(insn 299 297 300 35 arch/arm/vfp/vfpdouble.c:1068 (set (reg:SI 293)
        (plus:SI (reg:SI 188 [ D.5081 ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 188 [ D.5081 ])
        (nil)))

(insn 300 299 301 35 arch/arm/vfp/vfpdouble.c:1068 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 vdd.exponent+0 S2 A64])
        (subreg:HI (reg:SI 293) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 293)
        (nil)))
;; End of basic block 35 -> ( 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195 289
;; rd  out 	(117)
17, 38, 57, 72, 75, 87, 88, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  36 [100.0%]  (fallthru)

;; Start of basic block ( 35 32 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u371(11){ }u372(13){ }u373(25){ }u374(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 289
;; lr  def 	 24 [cc] 161
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195 289
;; live  gen 	 24 [cc] 161
;; live  kill	
;; rd  in  	(119)
17, 38, 57, 72, 75, 87, 88, 193, 194, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
192, 1209
;; rd  kill	(1)
1209

;; Pred edge  35 [100.0%]  (fallthru)
;; Pred edge  32 [50.0%] 
;; Pred edge  34 [50.0%] 
(code_label 301 300 302 36 180 "" [2 uses])

(note 302 301 303 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 303 302 304 36 arch/arm/vfp/vfpdouble.c:1070 (set (reg/v:DI 161 [ __n ])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 304 303 305 36 arch/arm/vfp/vfp.h:117 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 289) 4)
            (subreg:SI (reg/v:DI 161 [ __n ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 305 304 749 36 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 319)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 36 -> ( 40 37)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 161 192 195 289
;; rd  out 	(119)
17, 38, 57, 72, 75, 87, 88, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  40 [50.0%] 
;; Succ edge  37 [50.0%]  (fallthru)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u379(11){ }u380(13){ }u381(25){ }u382(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 161 192 195 289
;; live  gen 	
;; live  kill	
;; rd  in  	(119)
17, 38, 57, 72, 75, 87, 88, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  36 [50.0%]  (fallthru)
(note 749 305 307 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(jump_insn 307 749 750 37 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 804)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 37 -> ( 39 38)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; rd  out 	(119)
17, 38, 57, 72, 75, 87, 88, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  39 [71.0%] 
;; Succ edge  38 [29.0%]  (fallthru)

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u384(11){ }u385(13){ }u386(25){ }u387(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 289
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(119)
17, 38, 57, 72, 75, 87, 88, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
191
;; rd  kill	(0)


;; Pred edge  37 [29.0%]  (fallthru)
(note 750 307 308 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 308 750 309 38 arch/arm/vfp/vfp.h:117 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 289) 0)
            (subreg:SI (reg/v:DI 161 [ __n ]) 0))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 309 308 804 38 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 319)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 38 -> ( 40 39)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; rd  out 	(119)
17, 38, 57, 72, 75, 87, 88, 191, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  40 [50.0%] 
;; Succ edge  39 [50.0%]  (fallthru)

;; Start of basic block ( 38 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u391(11){ }u392(13){ }u393(25){ }u394(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 160
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  gen 	 160
;; live  kill	
;; rd  in  	(120)
17, 38, 57, 72, 75, 87, 88, 191, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1208
;; rd  kill	(4)
1205, 1206, 1207, 1208

;; Pred edge  38 [50.0%]  (fallthru)
;; Pred edge  37 [71.0%] 
(code_label 804 309 315 39 213 "" [1 uses])

(note 315 804 316 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 316 315 884 39 arch/arm/vfp/vfp.h:118 (set (reg/v:DI 160 [ z ])
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(jump_insn 884 316 885 39 (set (pc)
        (label_ref 482)) -1 (nil))
;; End of basic block 39 -> ( 54)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; rd  out 	(121)
17, 38, 57, 72, 75, 87, 88, 191, 192, 259, 260, 1208, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  54 [100.0%] 

(barrier 885 884 319)

;; Start of basic block ( 36 38) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u395(11){ }u396(13){ }u397(25){ }u398(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 289
;; lr  def 	 24 [cc] 156 411
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 192 195 289
;; live  gen 	 24 [cc] 156 411
;; live  kill	
;; rd  in  	(120)
17, 38, 57, 72, 75, 87, 88, 191, 192, 259, 260, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(3)
232, 1197, 1423
;; rd  kill	(1)
1423

;; Pred edge  36 [50.0%] 
;; Pred edge  38 [50.0%] 
(code_label 319 885 320 40 182 "" [2 uses])

(note 320 319 855 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 855 320 321 40 arch/arm/vfp/vfp.h:119 (set (reg/v:DI 156 [ mh ])
        (const_int 0 [0x0])) -1 (nil))

(insn 321 855 322 40 arch/arm/vfp/vfp.h:119 (set (subreg:SI (reg/v:DI 156 [ mh ]) 0)
        (subreg:SI (reg:DI 289) 4)) 167 {*arm_movsi_insn} (nil))

(insn 322 321 323 40 arch/arm/vfp/vfp.h:119 (set (subreg:SI (reg/v:DI 156 [ mh ]) 4)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 323 322 325 40 arch/arm/vfp/vfp.h:120 (set (reg:SI 411 [ D.5814+4 ])
        (subreg:SI (reg/v:DI 156 [ mh ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 325 323 326 40 arch/arm/vfp/vfp.h:120 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 411 [ D.5814+4 ])
            (subreg:SI (reg/v:DI 161 [ __n ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 326 325 754 40 arch/arm/vfp/vfp.h:120 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 340)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 40 -> ( 42 41)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; rd  out 	(121)
17, 38, 57, 72, 75, 87, 88, 232, 259, 260, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  42 [50.0%] 
;; Succ edge  41 [50.0%]  (fallthru)

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u406(11){ }u407(13){ }u408(25){ }u409(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; live  gen 	 143
;; live  kill	
;; rd  in  	(121)
17, 38, 57, 72, 75, 87, 88, 232, 259, 260, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1187
;; rd  kill	(5)
1183, 1184, 1185, 1186, 1187

;; Pred edge  40 [50.0%]  (fallthru)
(note 754 326 337 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 337 754 886 41 arch/arm/vfp/vfp.h:121 (set (reg/v:DI 143 [ z.732 ])
        (const_int -4294967296 [0xffffffff00000000])) 163 {*arm_movdi} (nil))

(jump_insn 886 337 887 41 (set (pc)
        (label_ref 348)) -1 (nil))
;; End of basic block 41 -> ( 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; rd  out 	(122)
17, 38, 57, 72, 75, 87, 88, 232, 259, 260, 1187, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  43 [100.0%] 

(barrier 887 886 340)

;; Start of basic block ( 40) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u410(11){ }u411(13){ }u412(25){ }u413(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc] 143 400
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 161 192 195 289 411
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 143 400
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; rd  in  	(121)
17, 38, 57, 72, 75, 87, 88, 232, 259, 260, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(7)
12, 34, 52, 67, 74, 1184, 1422
;; rd  kill	(100)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1422

;; Pred edge  40 [50.0%] 
(code_label 340 887 341 42 185 "" [1 uses])

(note 341 340 342 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 342 341 343 42 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg/v:SI 4 r4 [ __base ])
        (subreg:SI (reg/v:DI 156 [ mh ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 343 342 344 42 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg/v:DI 0 r0 [ __n ])
        (reg/v:DI 161 [ __n ])) 163 {*arm_movdi} (nil))

(insn 344 343 812 42 arch/arm/vfp/vfp.h:124 discrim 1 (parallel [
            (set (reg/v:SI 1 r1 [ __rem ])
                (asm_operands:SI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 0 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779402))
            (set (reg/v:DI 2 r2 [ __res ])
                (asm_operands:DI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 1 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779402))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 4 r4 [ __base ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (expr_list:REG_UNUSED (reg/v:SI 1 r1 [ __rem ])
                        (expr_list:REG_UNUSED (reg:SI 3 r3)
                            (nil))))))))

(insn 812 344 856 42 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg:SI 400 [ z.731 ])
        (reg:SI 2 r2 [ __res ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ __res ])
        (nil)))

(insn 856 812 346 42 arch/arm/vfp/vfp.h:125 (set (reg/v:DI 143 [ z.732 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 346 856 347 42 arch/arm/vfp/vfp.h:125 (set (subreg:SI (reg/v:DI 143 [ z.732 ]) 4)
        (reg:SI 400 [ z.731 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 400 [ z.731 ])
        (nil)))

(insn 347 346 348 42 arch/arm/vfp/vfp.h:125 (set (subreg:SI (reg/v:DI 143 [ z.732 ]) 0)
        (subreg:SI (reg/v:DI 156 [ mh ]) 4)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 42 -> ( 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; rd  out 	(122)
12, 34, 52, 67, 74, 75, 88, 259, 260, 1184, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  43 [100.0%]  (fallthru)

;; Start of basic block ( 42 41) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u424(11){ }u425(13){ }u426(25){ }u427(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 289
;; lr  def 	 24 [cc] 142 163 164 165 166 167 294 295 432
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 161 192 195 289 411
;; live  gen 	 24 [cc] 142 163 164 165 166 167 294 295 432
;; live  kill	 24 [cc]
;; rd  in  	(129)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 232, 259, 260, 1184, 1187, 1197, 1209, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(10)
229, 1182, 1211, 1212, 1213, 1214, 1215, 1342, 1343, 1434
;; rd  kill	(9)
1182, 1211, 1212, 1213, 1214, 1215, 1342, 1343, 1434

;; Pred edge  42 [100.0%]  (fallthru)
;; Pred edge  41 [100.0%] 
(code_label 348 347 349 43 187 "" [1 uses])

(note 349 348 350 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 350 349 352 43 arch/arm/vfp/vfp.h:80 (set (reg:SI 294 [ D.5083 ])
        (subreg:SI (reg:DI 289) 0)) 167 {*arm_movsi_insn} (nil))

(insn 352 350 357 43 arch/arm/vfp/vfp.h:80 (set (reg:SI 295 [ z.732 ])
        (subreg:SI (reg/v:DI 143 [ z.732 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 357 352 361 43 arch/arm/vfp/vfp.h:80 (set (reg/v:DI 164 [ rl ])
        (mult:DI (zero_extend:DI (reg:SI 295 [ z.732 ]))
            (zero_extend:DI (reg:SI 294 [ D.5083 ])))) 51 {*umulsidi3_v6} (nil))

(insn 361 357 366 43 arch/arm/vfp/vfp.h:82 (set (reg/v:SI 163 [ __left ])
        (subreg:SI (reg/v:DI 156 [ mh ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 366 361 370 43 arch/arm/vfp/vfp.h:83 (set (reg/v:DI 166 [ rma ])
        (mult:DI (zero_extend:DI (reg:SI 295 [ z.732 ]))
            (zero_extend:DI (reg/v:SI 163 [ __left ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 295 [ z.732 ])
        (nil)))

(insn 370 366 377 43 arch/arm/vfp/vfp.h:86 (set (reg:SI 432)
        (subreg:SI (reg/v:DI 143 [ z.732 ]) 4)) 167 {*arm_movsi_insn} (nil))

(insn 377 370 381 43 arch/arm/vfp/vfp.h:86 (set (reg/v:DI 165 [ rmb ])
        (mult:DI (zero_extend:DI (reg:SI 432))
            (zero_extend:DI (reg:SI 294 [ D.5083 ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 294 [ D.5083 ])
        (nil)))

(insn 381 377 385 43 arch/arm/vfp/vfp.h:87 (parallel [
            (set (reg/v:DI 142 [ rma.733 ])
                (plus:DI (reg/v:DI 165 [ rmb ])
                    (reg/v:DI 166 [ rma ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 166 [ rma ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 385 381 389 43 arch/arm/vfp/vfp.h:89 (set (reg/v:DI 167 [ rh ])
        (mult:DI (zero_extend:DI (reg:SI 432))
            (zero_extend:DI (reg/v:SI 163 [ __left ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 432)
        (nil)))

(insn 389 385 390 43 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 165 [ rmb ]) 4)
            (subreg:SI (reg/v:DI 142 [ rma.733 ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 390 389 759 43 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 404)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 43 -> ( 47 44)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; rd  out 	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434


;; Succ edge  47 [50.0%] 
;; Succ edge  44 [50.0%]  (fallthru)

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u445(11){ }u446(13){ }u447(25){ }u448(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; live  gen 	
;; live  kill	
;; rd  in  	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  43 [50.0%]  (fallthru)
(note 759 390 392 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(jump_insn 392 759 760 44 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 806)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 44 -> ( 46 45)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; rd  out 	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434


;; Succ edge  46 [71.0%] 
;; Succ edge  45 [29.0%]  (fallthru)

;; Start of basic block ( 44) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u450(11){ }u451(13){ }u452(25){ }u453(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 165
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 165 167 192 195 289 411
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(1)
228
;; rd  kill	(0)


;; Pred edge  44 [29.0%]  (fallthru)
(note 760 392 393 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 393 760 394 45 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 165 [ rmb ]) 0)
            (subreg:SI (reg/v:DI 142 [ rma.733 ]) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:DI 165 [ rmb ])
        (nil)))

(jump_insn 394 393 806 45 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 404)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 45 -> ( 47 46)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; rd  out 	(138)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434


;; Succ edge  47 [50.0%] 
;; Succ edge  46 [50.0%]  (fallthru)

;; Start of basic block ( 45 44) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u457(11){ }u458(13){ }u459(25){ }u460(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; live  gen 	 169
;; live  kill	
;; rd  in  	(139)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(1)
1218
;; rd  kill	(2)
1217, 1218

;; Pred edge  45 [50.0%]  (fallthru)
;; Pred edge  44 [71.0%] 
(code_label 806 394 400 46 215 "" [1 uses])

(note 400 806 401 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 401 400 888 46 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 169 [ iftmp.83 ])
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(jump_insn 888 401 889 46 (set (pc)
        (label_ref 407)) -1 (nil))
;; End of basic block 46 -> ( 48)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; rd  out 	(140)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434


;; Succ edge  48 [100.0%] 

(barrier 889 888 404)

;; Start of basic block ( 43 45) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u461(11){ }u462(13){ }u463(25){ }u464(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 192 195 289 411
;; live  gen 	 169
;; live  kill	
;; rd  in  	(139)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(1)
1217
;; rd  kill	(2)
1217, 1218

;; Pred edge  43 [50.0%] 
;; Pred edge  45 [50.0%] 
(code_label 404 889 405 47 188 "" [2 uses])

(note 405 404 406 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 406 405 407 47 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 169 [ iftmp.83 ])
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (nil))
;; End of basic block 47 -> ( 48)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; rd  out 	(140)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1217, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434


;; Succ edge  48 [100.0%]  (fallthru)

;; Start of basic block ( 47 46) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u465(11){ }u466(13){ }u467(25){ }u468(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 161 164 167 169 289
;; lr  def 	 24 [cc] 139 140 141 157 158 159 168 308 309 310 311 442 446
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 156 161 163 164 167 169 192 195 289 411
;; live  gen 	 24 [cc] 139 140 141 157 158 159 168 308 309 310 311 442 446
;; live  kill	 24 [cc]
;; rd  in  	(141)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 228, 229, 259, 260, 1182, 1184, 1187, 1197, 1209, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434
;; rd  gen 	(13)
1177, 1180, 1181, 1199, 1202, 1204, 1216, 1345, 1347, 1348, 1349, 1437, 1441
;; rd  kill	(12)
1177, 1181, 1201, 1202, 1203, 1204, 1216, 1347, 1348, 1349, 1437, 1441

;; Pred edge  47 [100.0%]  (fallthru)
;; Pred edge  46 [100.0%] 
(code_label 407 406 408 48 190 "" [1 uses])

(note 408 407 857 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 857 408 409 48 arch/arm/vfp/vfp.h:92 (set (reg/v:DI 140 [ rma.735 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 409 857 410 48 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 140 [ rma.735 ]) 4)
        (subreg:SI (reg/v:DI 142 [ rma.733 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 410 409 411 48 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 140 [ rma.735 ]) 0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 411 410 858 48 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg/v:DI 139 [ rl.736 ])
                (plus:DI (reg/v:DI 140 [ rma.735 ])
                    (reg/v:DI 164 [ rl ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 164 [ rl ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 858 411 412 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 308 [ rma.735 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 412 858 413 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 308 [ rma.735 ]) 0)
        (subreg:SI (reg/v:DI 142 [ rma.733 ]) 4)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 142 [ rma.733 ])
        (nil)))

(insn 413 412 414 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 308 [ rma.735 ]) 4)
        (subreg:SI (reg/v:DI 140 [ rma.735 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 414 413 844 48 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 168 [ D.5684 ])
                (plus:DI (reg:DI 308 [ rma.735 ])
                    (reg/v:DI 167 [ rh ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 308 [ rma.735 ])
        (expr_list:REG_DEAD (reg/v:DI 167 [ rh ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 844 414 845 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 140 [ rma.735 ]) 4)
            (subreg:SI (reg/v:DI 139 [ rl.736 ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(insn 845 844 846 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 442)
        (gtu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 846 845 429 48 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 309)
        (zero_extend:DI (reg:SI 442))) 138 {*arm_zero_extendsidi2} (expr_list:REG_DEAD (reg:SI 442)
        (nil)))

(insn 429 846 430 48 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg/v:DI 141 [ rh.734 ])
                (plus:DI (reg:DI 168 [ D.5684 ])
                    (reg:DI 309)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 309)
        (expr_list:REG_DEAD (reg:DI 168 [ D.5684 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 430 429 431 48 arch/arm/vfp/vfp.h:62 (set (reg:DI 310)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 431 430 432 48 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 311)
                (plus:DI (reg/v:DI 141 [ rh.734 ])
                    (reg:DI 169 [ iftmp.83 ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 169 [ iftmp.83 ])
        (expr_list:REG_DEAD (reg/v:DI 141 [ rh.734 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 432 431 859 48 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg/v:DI 159 [ reml ])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 0 [
                        (reg:DI 310)
                        (reg/v:DI 161 [ __n ])
                        (reg/v:DI 139 [ rl.736 ])
                        (reg:DI 311)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (set (reg/v:DI 158 [ remh ])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 1 [
                        (reg:DI 310)
                        (reg/v:DI 161 [ __n ])
                        (reg/v:DI 139 [ rl.736 ])
                        (reg:DI 311)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:DI 311)
        (expr_list:REG_DEAD (reg:DI 310)
            (expr_list:REG_DEAD (reg/v:DI 139 [ rl.736 ])
                (expr_list:REG_UNUSED (reg:QI 24 cc)
                    (nil))))))

(insn 859 432 433 48 arch/arm/vfp/vfp.h:129 (set (reg/v:DI 157 [ ml ])
        (const_int 0 [0x0])) -1 (nil))

(insn 433 859 434 48 arch/arm/vfp/vfp.h:129 (set (subreg:SI (reg/v:DI 157 [ ml ]) 4)
        (subreg:SI (reg:DI 289) 0)) 167 {*arm_movsi_insn} (nil))

(insn 434 433 438 48 arch/arm/vfp/vfp.h:129 (set (subreg:SI (reg/v:DI 157 [ ml ]) 0)
        (subreg:SI (reg/v:DI 140 [ rma.735 ]) 0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 140 [ rma.735 ])
        (nil)))

(insn 438 434 890 48 arch/arm/vfp/vfp.h:131 (set (reg:DI 446)
        (const_int -4294967296 [0xffffffff00000000])) 163 {*arm_movdi} (nil))

(jump_insn 890 438 891 48 (set (pc)
        (label_ref 441)) -1 (nil))
;; End of basic block 48 -> ( 50)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; rd  out 	(152)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 259, 260, 1177, 1180, 1181, 1182, 1184, 1187, 1197, 1199, 1202, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441


;; Succ edge  50 [100.0%] 

(barrier 891 890 443)

;; Start of basic block ( 50) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u496(11){ }u497(13){ }u498(25){ }u499(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 446
;; lr  def 	 24 [cc] 143 158 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  gen 	 143 158 159
;; live  kill	 24 [cc]
;; rd  in  	(156)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 221, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(3)
1185, 1201, 1203
;; rd  kill	(9)
1183, 1184, 1185, 1186, 1187, 1201, 1202, 1203, 1204

;; Pred edge  50 [21.0%] 
(code_label 443 891 437 49 194 "" [1 uses])

(note 437 443 439 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 439 437 440 49 arch/arm/vfp/vfp.h:131 (parallel [
            (set (reg/v:DI 143 [ z.732 ])
                (plus:DI (reg/v:DI 143 [ z.732 ])
                    (reg:DI 446)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (expr_list:REG_EQUAL (plus:DI (reg/v:DI 143 [ z.732 ])
                (const_int -4294967296 [0xffffffff00000000]))
            (nil))))

(insn 440 439 441 49 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 159 [ reml ])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 0 [
                        (reg/v:DI 159 [ reml ])
                        (reg/v:DI 158 [ remh ])
                        (reg/v:DI 157 [ ml ])
                        (reg/v:DI 156 [ mh ])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (set (reg/v:DI 158 [ remh ])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 1 [
                        (reg/v:DI 159 [ reml ])
                        (reg/v:DI 158 [ remh ])
                        (reg/v:DI 157 [ ml ])
                        (reg/v:DI 156 [ mh ])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 49 -> ( 50)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; rd  out 	(151)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 259, 260, 1177, 1180, 1181, 1182, 1185, 1197, 1199, 1201, 1203, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441


;; Succ edge  50 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 49 48) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u507(11){ }u508(13){ }u509(25){ }u510(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 158
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(155)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(1)
221
;; rd  kill	(0)


;; Pred edge  49 [100.0%]  (fallthru,dfs_back)
;; Pred edge  48 [100.0%] 
(code_label 441 440 442 50 193 "" [1 uses])

(note 442 441 444 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 444 442 445 50 arch/arm/vfp/vfp.h:130 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 158 [ remh ]) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 445 444 770 50 arch/arm/vfp/vfp.h:130 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 443)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2100 [0x834])
            (nil))))
;; End of basic block 50 -> ( 49 51)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 156 157 158 159 161 163 192 195 289 411 446
;; rd  out 	(156)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 221, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441


;; Succ edge  49 [21.0%] 
;; Succ edge  51 [79.0%]  (fallthru,loop_exit)

;; Start of basic block ( 50) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u513(11){ }u514(13){ }u515(25){ }u516(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 158 159 161 163 192 195 289 411
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 158 159 411
;; lr  def 	 24 [cc] 162 314 316
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 158 159 161 163 192 195 289 411
;; live  gen 	 24 [cc] 162 314 316
;; live  kill	
;; rd  in  	(156)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 221, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(4)
220, 1210, 1352, 1354
;; rd  kill	(1)
1210

;; Pred edge  50 [79.0%]  (fallthru,loop_exit)
(note 770 445 860 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 860 770 454 51 arch/arm/vfp/vfp.h:134 (set (reg:DI 314)
        (const_int 0 [0x0])) -1 (nil))

(insn 454 860 455 51 arch/arm/vfp/vfp.h:134 (set (subreg:SI (reg:DI 314) 0)
        (subreg:SI (reg/v:DI 159 [ reml ]) 4)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 159 [ reml ])
        (nil)))

(insn 455 454 861 51 arch/arm/vfp/vfp.h:134 (set (subreg:SI (reg:DI 314) 4)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 861 455 456 51 arch/arm/vfp/vfp.h:134 (set (reg:DI 316 [ remh ])
        (const_int 0 [0x0])) -1 (nil))

(insn 456 861 457 51 arch/arm/vfp/vfp.h:134 (set (subreg:SI (reg:DI 316 [ remh ]) 4)
        (subreg:SI (reg/v:DI 158 [ remh ]) 0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 158 [ remh ])
        (nil)))

(insn 457 456 458 51 arch/arm/vfp/vfp.h:134 (set (subreg:SI (reg:DI 316 [ remh ]) 0)
        (subreg:SI (reg:DI 314) 4)) 167 {*arm_movsi_insn} (nil))

(insn 458 457 459 51 arch/arm/vfp/vfp.h:134 (set (reg/v:DI 162 [ __n ])
        (ior:DI (reg:DI 314)
            (reg:DI 316 [ remh ]))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 316 [ remh ])
        (expr_list:REG_DEAD (reg:DI 314)
            (nil))))

(insn 459 458 460 51 arch/arm/vfp/vfp.h:135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 411 [ D.5814+4 ])
            (subreg:SI (reg/v:DI 162 [ __n ]) 4))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 411 [ D.5814+4 ])
        (nil)))

(jump_insn 460 459 774 51 arch/arm/vfp/vfp.h:135 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 475)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 51 -> ( 53 52)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 162 163 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 162 163 192 195 289
;; rd  out 	(159)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 220, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441


;; Succ edge  53 [50.0%] 
;; Succ edge  52 [50.0%]  (fallthru)

;; Start of basic block ( 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u529(11){ }u530(13){ }u531(25){ }u532(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 160 317
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 192 195 289
;; live  gen 	 160 317
;; live  kill	
;; rd  in  	(159)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 220, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(2)
1207, 1356
;; rd  kill	(5)
1205, 1206, 1207, 1208, 1356

;; Pred edge  51 [50.0%]  (fallthru)
(note 774 460 471 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 471 774 472 52 arch/arm/vfp/vfp.h:136 (set (reg:DI 317)
        (const_int 4294967295 [0xffffffff])) 163 {*arm_movdi} (nil))

(insn 472 471 892 52 arch/arm/vfp/vfp.h:136 (set (reg/v:DI 160 [ z ])
        (ior:DI (reg/v:DI 143 [ z.732 ])
            (reg:DI 317))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 317)
        (expr_list:REG_DEAD (reg/v:DI 143 [ z.732 ])
            (expr_list:REG_EQUAL (ior:DI (reg/v:DI 143 [ z.732 ])
                    (const_int 4294967295 [0xffffffff]))
                (nil)))))

(jump_insn 892 472 893 52 (set (pc)
        (label_ref 482)) -1 (nil))
;; End of basic block 52 -> ( 54)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; rd  out 	(161)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 220, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441


;; Succ edge  54 [100.0%] 

(barrier 893 892 475)

;; Start of basic block ( 51) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u536(11){ }u537(13){ }u538(25){ }u539(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 162 163 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 162 163
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc] 138 160
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 161 162 163 192 195 289
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 138 160
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; rd  in  	(159)
12, 17, 34, 38, 52, 57, 67, 72, 74, 75, 87, 88, 220, 259, 260, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(7)
11, 32, 51, 66, 73, 1176, 1206
;; rd  kill	(104)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1176, 1205, 1206, 1207, 1208

;; Pred edge  51 [50.0%] 
(code_label 475 893 476 53 196 "" [1 uses])

(note 476 475 477 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 477 476 478 53 arch/arm/vfp/vfp.h:138 discrim 1 (set (reg/v:SI 4 r4 [ __base ])
        (reg/v:SI 163 [ __left ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 163 [ __left ])
        (nil)))

(insn 478 477 479 53 arch/arm/vfp/vfp.h:138 discrim 1 (set (reg/v:DI 0 r0 [ __n ])
        (reg/v:DI 162 [ __n ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v:DI 162 [ __n ])
        (nil)))

(insn 479 478 480 53 arch/arm/vfp/vfp.h:138 discrim 1 (parallel [
            (set (reg/v:SI 1 r1 [ __rem ])
                (asm_operands:SI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 0 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779457))
            (set (reg/v:DI 2 r2 [ __res ])
                (asm_operands:DI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 1 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779457))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 4 r4 [ __base ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (expr_list:REG_UNUSED (reg/v:SI 1 r1 [ __rem ])
                        (nil)))))))

(insn 480 479 481 53 arch/arm/vfp/vfp.h:138 discrim 1 (set (reg/v:DI 138 [ remh.738 ])
        (reg/v:DI 2 r2 [ __res ])) 163 {*arm_movdi} (nil))

(insn 481 480 482 53 arch/arm/vfp/vfp.h:139 (set (reg/v:DI 160 [ z ])
        (ior:DI (reg/v:DI 138 [ remh.738 ])
            (reg/v:DI 143 [ z.732 ]))) 86 {iordi3} (expr_list:REG_DEAD (reg/v:DI 143 [ z.732 ])
        (expr_list:REG_DEAD (reg/v:DI 138 [ remh.738 ])
            (nil))))
;; End of basic block 53 -> ( 54)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; rd  out 	(155)
11, 32, 51, 66, 73, 75, 88, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441


;; Succ edge  54 [100.0%]  (fallthru)

;; Start of basic block ( 39 53 52) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u549(11){ }u550(13){ }u551(25){ }u552(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160
;; lr  def 	 24 [cc] 318 319
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  gen 	 24 [cc] 318 319
;; live  kill	
;; rd  in  	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 191, 192, 220, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(3)
218, 1357, 1358
;; rd  kill	(2)
1357, 1358

;; Pred edge  39 [100.0%] 
;; Pred edge  53 [100.0%]  (fallthru)
;; Pred edge  52 [100.0%] 
(code_label 482 481 483 54 184 "" [2 uses])

(note 483 482 484 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn 484 483 485 54 arch/arm/vfp/vfpdouble.c:1070 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdd.significand+0 S8 A64])
        (reg/v:DI 160 [ z ])) 163 {*arm_movdi} (nil))

(insn 485 484 486 54 arch/arm/vfp/vfpdouble.c:1071 (set (reg:DI 319)
        (const_int 511 [0x1ff])) 163 {*arm_movdi} (nil))

(insn 486 485 487 54 arch/arm/vfp/vfpdouble.c:1071 (set (reg:DI 318)
        (and:DI (reg/v:DI 160 [ z ])
            (reg:DI 319))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 319)
        (expr_list:REG_EQUAL (and:DI (reg/v:DI 160 [ z ])
                (const_int 511 [0x1ff]))
            (nil))))

(insn 487 486 488 54 arch/arm/vfp/vfpdouble.c:1071 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 318) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 488 487 780 54 arch/arm/vfp/vfpdouble.c:1071 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 615)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 54 -> ( 67 55)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289 318
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289 318
;; rd  out 	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 218, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441


;; Succ edge  67 [50.0%] 
;; Succ edge  55 [50.0%]  (fallthru)

;; Start of basic block ( 54) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u560(11){ }u561(13){ }u562(25){ }u563(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289 318
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 318
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289 318
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 218, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(1)
217
;; rd  kill	(0)


;; Pred edge  54 [50.0%]  (fallthru)
(note 780 488 491 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 491 780 492 55 arch/arm/vfp/vfpdouble.c:1071 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 318) 0)
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 318)
        (nil)))

(jump_insn 492 491 781 55 arch/arm/vfp/vfpdouble.c:1071 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 615)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 55 -> ( 67 56)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; rd  out 	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441


;; Succ edge  67 [50.0%] 
;; Succ edge  56 [50.0%]  (fallthru)

;; Start of basic block ( 55) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u566(11){ }u567(13){ }u568(25){ }u569(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 289
;; lr  def 	 24 [cc] 137 151 152 153 154 320 321 434 436
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161 192 195 289
;; live  gen 	 24 [cc] 137 151 152 153 154 320 321 434 436
;; live  kill	 24 [cc]
;; rd  in  	(171)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 259, 260, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1437, 1441
;; rd  gen 	(10)
215, 1175, 1191, 1192, 1193, 1194, 1359, 1360, 1435, 1436
;; rd  kill	(9)
1175, 1191, 1192, 1193, 1194, 1359, 1360, 1435, 1436

;; Pred edge  55 [50.0%]  (fallthru)
(note 781 492 499 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(insn 499 781 501 56 arch/arm/vfp/vfp.h:80 (set (reg:SI 320 [ D.5083 ])
        (subreg:SI (reg:DI 289) 0)) 167 {*arm_movsi_insn} (nil))

(insn 501 499 506 56 arch/arm/vfp/vfp.h:80 (set (reg:SI 321 [ z ])
        (subreg:SI (reg/v:DI 160 [ z ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 506 501 510 56 arch/arm/vfp/vfp.h:80 (set (reg/v:DI 154 [ rl ])
        (mult:DI (zero_extend:DI (reg:SI 321 [ z ]))
            (zero_extend:DI (reg:SI 320 [ D.5083 ])))) 51 {*umulsidi3_v6} (nil))

(insn 510 506 517 56 arch/arm/vfp/vfp.h:83 (set (reg:SI 434)
        (subreg:SI (reg:DI 289) 4)) 167 {*arm_movsi_insn} (nil))

(insn 517 510 521 56 arch/arm/vfp/vfp.h:83 (set (reg/v:DI 152 [ rma ])
        (mult:DI (zero_extend:DI (reg:SI 321 [ z ]))
            (zero_extend:DI (reg:SI 434)))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 321 [ z ])
        (nil)))

(insn 521 517 528 56 arch/arm/vfp/vfp.h:86 (set (reg:SI 436)
        (subreg:SI (reg/v:DI 160 [ z ]) 4)) 167 {*arm_movsi_insn} (nil))

(insn 528 521 532 56 arch/arm/vfp/vfp.h:86 (set (reg/v:DI 153 [ rmb ])
        (mult:DI (zero_extend:DI (reg:SI 436))
            (zero_extend:DI (reg:SI 320 [ D.5083 ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 320 [ D.5083 ])
        (nil)))

(insn 532 528 536 56 arch/arm/vfp/vfp.h:87 (parallel [
            (set (reg/v:DI 137 [ rma.739 ])
                (plus:DI (reg/v:DI 153 [ rmb ])
                    (reg/v:DI 152 [ rma ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 152 [ rma ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 536 532 540 56 arch/arm/vfp/vfp.h:89 (set (reg/v:DI 151 [ rh ])
        (mult:DI (zero_extend:DI (reg:SI 436))
            (zero_extend:DI (reg:SI 434)))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 436)
        (expr_list:REG_DEAD (reg:SI 434)
            (nil))))

(insn 540 536 541 56 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 153 [ rmb ]) 4)
            (subreg:SI (reg/v:DI 137 [ rma.739 ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 541 540 784 56 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 555)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 56 -> ( 60 57)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; rd  out 	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441


;; Succ edge  60 [50.0%] 
;; Succ edge  57 [50.0%]  (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u587(11){ }u588(13){ }u589(25){ }u590(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; live  gen 	
;; live  kill	
;; rd  in  	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  56 [50.0%]  (fallthru)
(note 784 541 543 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(jump_insn 543 784 785 57 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 810)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 57 -> ( 59 58)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; rd  out 	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441


;; Succ edge  59 [71.0%] 
;; Succ edge  58 [29.0%]  (fallthru)

;; Start of basic block ( 57) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u592(11){ }u593(13){ }u594(25){ }u595(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 153
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 153 154 160 161 192 195 289
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(1)
214
;; rd  kill	(0)


;; Pred edge  57 [29.0%]  (fallthru)
(note 785 543 544 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(insn 544 785 545 58 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 153 [ rmb ]) 0)
            (subreg:SI (reg/v:DI 137 [ rma.739 ]) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:DI 153 [ rmb ])
        (nil)))

(jump_insn 545 544 810 58 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 555)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 58 -> ( 60 59)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; rd  out 	(180)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441


;; Succ edge  60 [50.0%] 
;; Succ edge  59 [50.0%]  (fallthru)

;; Start of basic block ( 58 57) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u599(11){ }u600(13){ }u601(25){ }u602(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 149
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; live  gen 	 149
;; live  kill	
;; rd  in  	(181)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(1)
1189
;; rd  kill	(2)
1188, 1189

;; Pred edge  58 [50.0%]  (fallthru)
;; Pred edge  57 [71.0%] 
(code_label 810 545 551 59 219 "" [1 uses])

(note 551 810 552 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn 552 551 894 59 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 149 [ iftmp.83 ])
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(jump_insn 894 552 895 59 (set (pc)
        (label_ref 558)) -1 (nil))
;; End of basic block 59 -> ( 61)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; rd  out 	(182)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1189, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441


;; Succ edge  61 [100.0%] 

(barrier 895 894 555)

;; Start of basic block ( 56 58) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u603(11){ }u604(13){ }u605(25){ }u606(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 149
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 151 154 160 161 192 195 289
;; live  gen 	 149
;; live  kill	
;; rd  in  	(181)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(1)
1188
;; rd  kill	(2)
1188, 1189

;; Pred edge  56 [50.0%] 
;; Pred edge  58 [50.0%] 
(code_label 555 895 556 60 200 "" [2 uses])

(note 556 555 557 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(insn 557 556 558 60 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 149 [ iftmp.83 ])
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (nil))
;; End of basic block 60 -> ( 61)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; rd  out 	(182)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441


;; Succ edge  61 [100.0%]  (fallthru)

;; Start of basic block ( 60 59) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u607(11){ }u608(13){ }u609(25){ }u610(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 161
;; lr  def 	 24 [cc] 134 135 136 150 181 182 337 338 339 340 443 444 445
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 149 151 154 160 161 192 195 289
;; live  gen 	 24 [cc] 134 135 136 150 181 182 337 338 339 340 443 444 445
;; live  kill	 24 [cc]
;; rd  in  	(183)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 214, 215, 259, 260, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1441
;; rd  gen 	(13)
1170, 1173, 1174, 1190, 1235, 1237, 1362, 1364, 1365, 1366, 1438, 1439, 1440
;; rd  kill	(13)
1170, 1174, 1190, 1234, 1235, 1236, 1237, 1364, 1365, 1366, 1438, 1439, 1440

;; Pred edge  60 [100.0%]  (fallthru)
;; Pred edge  59 [100.0%] 
(code_label 558 557 559 61 202 "" [1 uses])

(note 559 558 862 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(insn 862 559 560 61 arch/arm/vfp/vfp.h:92 (set (reg/v:DI 135 [ rma.741 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 560 862 561 61 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 135 [ rma.741 ]) 4)
        (subreg:SI (reg/v:DI 137 [ rma.739 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 561 560 562 61 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 135 [ rma.741 ]) 0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 562 561 863 61 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg/v:DI 134 [ rl.742 ])
                (plus:DI (reg/v:DI 135 [ rma.741 ])
                    (reg/v:DI 154 [ rl ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 154 [ rl ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 863 562 563 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 337 [ rma.741 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 563 863 564 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 337 [ rma.741 ]) 0)
        (subreg:SI (reg/v:DI 137 [ rma.739 ]) 4)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 137 [ rma.739 ])
        (nil)))

(insn 564 563 565 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 337 [ rma.741 ]) 4)
        (subreg:SI (reg/v:DI 135 [ rma.741 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 565 564 847 61 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 150 [ D.5828 ])
                (plus:DI (reg:DI 337 [ rma.741 ])
                    (reg/v:DI 151 [ rh ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 337 [ rma.741 ])
        (expr_list:REG_DEAD (reg/v:DI 151 [ rh ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 847 565 848 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 135 [ rma.741 ]) 4)
            (subreg:SI (reg/v:DI 134 [ rl.742 ]) 4))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:DI 135 [ rma.741 ])
        (nil)))

(insn 848 847 849 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 443)
        (gtu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 849 848 580 61 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 338)
        (zero_extend:DI (reg:SI 443))) 138 {*arm_zero_extendsidi2} (expr_list:REG_DEAD (reg:SI 443)
        (nil)))

(insn 580 849 581 61 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg/v:DI 136 [ rh.740 ])
                (plus:DI (reg:DI 150 [ D.5828 ])
                    (reg:DI 338)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 338)
        (expr_list:REG_DEAD (reg:DI 150 [ D.5828 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 581 580 582 61 arch/arm/vfp/vfp.h:62 (set (reg:DI 339)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 582 581 583 61 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 340)
                (plus:DI (reg/v:DI 136 [ rh.740 ])
                    (reg:DI 149 [ iftmp.83 ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 149 [ iftmp.83 ])
        (expr_list:REG_DEAD (reg/v:DI 136 [ rh.740 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 583 582 591 61 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg/v:DI 181 [ reml ])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 0 [
                        (reg:DI 339)
                        (reg/v:DI 161 [ __n ])
                        (reg/v:DI 134 [ rl.742 ])
                        (reg:DI 340)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (set (reg/v:DI 182 [ remh ])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 1 [
                        (reg:DI 339)
                        (reg/v:DI 161 [ __n ])
                        (reg/v:DI 134 [ rl.742 ])
                        (reg:DI 340)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:DI 340)
        (expr_list:REG_DEAD (reg/v:DI 161 [ __n ])
            (expr_list:REG_DEAD (reg/v:DI 134 [ rl.742 ])
                (expr_list:REG_UNUSED (reg:QI 24 cc)
                    (nil))))))

(insn 591 583 587 61 arch/arm/vfp/vfp.h:49 (set (reg:DI 444)
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(insn 587 591 896 61 arch/arm/vfp/vfp.h:49 (set (reg:DI 445)
        (reg:DI 339)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 339)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 896 587 897 61 arch/arm/vfp/vfpdouble.c:1075 (set (pc)
        (label_ref 589)) -1 (nil))
;; End of basic block 61 -> ( 63)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; rd  out 	(194)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441


;; Succ edge  63 [100.0%] 

(barrier 897 896 593)

;; Start of basic block ( 63) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u635(11){ }u636(13){ }u637(25){ }u638(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 182 289 445
;; lr  def 	 24 [cc] 181 182
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  gen 	 181 182
;; live  kill	 24 [cc]
;; rd  in  	(195)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 208, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(2)
1234, 1236
;; rd  kill	(4)
1234, 1235, 1236, 1237

;; Pred edge  63 [21.0%] 
(code_label 593 897 586 62 206 "" [1 uses])

(note 586 593 588 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 588 586 589 62 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 181 [ reml ])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 0 [
                        (reg/v:DI 181 [ reml ])
                        (reg/v:DI 182 [ remh ])
                        (reg:DI 289)
                        (reg:DI 445)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (set (reg/v:DI 182 [ remh ])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 1 [
                        (reg/v:DI 181 [ reml ])
                        (reg/v:DI 182 [ remh ])
                        (reg:DI 289)
                        (reg:DI 445)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 62 -> ( 63)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; rd  out 	(192)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441


;; Succ edge  63 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 62 61) -> 63
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u643(11){ }u644(13){ }u645(25){ }u646(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 182 444
;; lr  def 	 24 [cc] 160
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  gen 	 24 [cc] 160
;; live  kill	 24 [cc]
;; rd  in  	(197)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(2)
208, 1205
;; rd  kill	(4)
1205, 1206, 1207, 1208

;; Pred edge  62 [100.0%]  (fallthru,dfs_back)
;; Pred edge  61 [100.0%] 
(code_label 589 588 590 63 205 "" [1 uses])

(note 590 589 592 63 [bb 63] NOTE_INSN_BASIC_BLOCK)

(insn 592 590 594 63 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 160 [ z ])
                (plus:DI (reg/v:DI 160 [ z ])
                    (reg:DI 444)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (expr_list:REG_EQUAL (plus:DI (reg/v:DI 160 [ z ])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))

(insn 594 592 595 63 arch/arm/vfp/vfpdouble.c:1075 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 182 [ remh ]) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 595 594 795 63 arch/arm/vfp/vfpdouble.c:1075 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 593)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2100 [0x834])
            (nil))))
;; End of basic block 63 -> ( 62 64)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 182 192 195 289 444 445
;; rd  out 	(195)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 208, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441


;; Succ edge  62 [21.0%] 
;; Succ edge  64 [79.0%]  (fallthru,loop_exit)

;; Start of basic block ( 63) -> 64
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u652(11){ }u653(13){ }u654(25){ }u655(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181
;; lr  def 	 24 [cc] 343 344
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 181 192 195
;; live  gen 	 24 [cc] 343 344
;; live  kill	
;; rd  in  	(195)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 208, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(3)
207, 1368, 1369
;; rd  kill	(4)
1367, 1368, 1369, 1370

;; Pred edge  63 [79.0%]  (fallthru,loop_exit)
(note 795 595 604 64 [bb 64] NOTE_INSN_BASIC_BLOCK)

(insn 604 795 605 64 arch/arm/vfp/vfpdouble.c:1079 (set (reg:DI 343)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 605 604 606 64 arch/arm/vfp/vfpdouble.c:1079 (set (reg:SI 344 [ reml ])
        (subreg:SI (reg/v:DI 181 [ reml ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 606 605 607 64 arch/arm/vfp/vfpdouble.c:1079 (set (reg:SI 344 [ reml ])
        (ior:SI (reg:SI 344 [ reml ])
            (subreg:SI (reg/v:DI 181 [ reml ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 181 [ reml ])
        (nil)))

(insn 607 606 608 64 arch/arm/vfp/vfpdouble.c:1079 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 344 [ reml ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 344 [ reml ])
        (nil)))

(jump_insn 608 607 799 64 arch/arm/vfp/vfpdouble.c:1079 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 610)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 64 -> ( 66 65)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; rd  out 	(197)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 207, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1368, 1369, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441


;; Succ edge  66 [50.0%] 
;; Succ edge  65 [50.0%]  (fallthru)

;; Start of basic block ( 64) -> 65
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u661(11){ }u662(13){ }u663(25){ }u664(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 343
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195
;; live  gen 	 343
;; live  kill	
;; rd  in  	(197)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 207, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1368, 1369, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(1)
1367
;; rd  kill	(2)
1367, 1368

;; Pred edge  64 [50.0%]  (fallthru)
(note 799 608 609 65 [bb 65] NOTE_INSN_BASIC_BLOCK)

(insn 609 799 610 65 arch/arm/vfp/vfpdouble.c:1079 (set (reg:DI 343)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 65 -> ( 66)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; rd  out 	(197)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 207, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1369, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441


;; Succ edge  66 [100.0%]  (fallthru)

;; Start of basic block ( 64 65) -> 66
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u665(11){ }u666(13){ }u667(25){ }u668(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 343
;; lr  def 	 24 [cc] 345 346 347
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 192 195 343
;; live  gen 	 345 346 347
;; live  kill	 24 [cc]
;; rd  in  	(198)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 207, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(3)
1371, 1372, 1373
;; rd  kill	(3)
1371, 1372, 1373

;; Pred edge  64 [50.0%] 
;; Pred edge  65 [100.0%]  (fallthru)
(code_label 610 609 800 66 208 "" [1 uses])

(note 800 610 611 66 [bb 66] NOTE_INSN_BASIC_BLOCK)

(insn 611 800 612 66 arch/arm/vfp/vfpdouble.c:1079 (set (reg:DI 346)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 612 611 613 66 arch/arm/vfp/vfpdouble.c:1079 (parallel [
            (set (reg:DI 345)
                (plus:DI (reg/v:DI 160 [ z ])
                    (reg:DI 346)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 346)
        (expr_list:REG_DEAD (reg/v:DI 160 [ z ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (expr_list:REG_EQUAL (plus:DI (reg/v:DI 160 [ z ])
                        (const_int 1 [0x1]))
                    (nil))))))

(insn 613 612 614 66 arch/arm/vfp/vfpdouble.c:1079 (set (reg:DI 347)
        (ior:DI (reg:DI 343)
            (reg:DI 345))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 345)
        (expr_list:REG_DEAD (reg:DI 343)
            (nil))))

(insn 614 613 615 66 arch/arm/vfp/vfpdouble.c:1079 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdd.significand+0 S8 A64])
        (reg:DI 347)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 347)
        (nil)))
;; End of basic block 66 -> ( 67)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; rd  out 	(200)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441


;; Succ edge  67 [100.0%]  (fallthru)

;; Start of basic block ( 66 54 55) -> 67
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u676(11){ }u677(13){ }u678(25){ }u679(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185 348 349
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 185 348 349
;; live  kill	 14 [lr]
;; rd  in  	(205)
11, 12, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(4)
9, 1251, 1374, 1375
;; rd  kill	(43)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1374, 1375

;; Pred edge  66 [100.0%]  (fallthru)
;; Pred edge  54 [50.0%] 
;; Pred edge  55 [50.0%] 
(code_label 615 614 616 67 198 "" [2 uses])

(note 616 615 617 67 [bb 67] NOTE_INSN_BASIC_BLOCK)

(insn 617 616 618 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg/f:SI 348)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 618 617 619 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg/f:SI 349)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x10d96040>)) 167 {*arm_movsi_insn} (nil))

(insn 619 618 620 67 arch/arm/vfp/vfpdouble.c:1081 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 349)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 349)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x10d96040>)
            (nil))))

(insn 620 619 621 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg:SI 0 r0)
        (reg/v:SI 192 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 192 [ dd ])
        (nil)))

(insn 621 620 622 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg:SI 1 r1)
        (reg/f:SI 348)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 348)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 622 621 623 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg:SI 2 r2)
        (reg/v:SI 195 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 195 [ fpscr ])
        (nil)))

(insn 623 622 624 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 624 623 625 67 arch/arm/vfp/vfpdouble.c:1081 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 625 624 898 67 arch/arm/vfp/vfpdouble.c:1081 (set (reg/v:SI 185 [ exceptions ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 898 625 899 67 arch/arm/vfp/vfpdouble.c:1081 (set (pc)
        (label_ref 730)) -1 (nil))
;; End of basic block 67 -> ( 75)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 185
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; rd  out 	(206)
9, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441


;; Succ edge  75 [100.0%] 

(barrier 899 898 628)

;; Start of basic block ( 20) -> 68
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u693(11){ }u694(13){ }u695(25){ }u696(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 195
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185 350 351 352
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 185 350 351 352
;; live  kill	 14 [lr]
;; rd  in  	(95)
17, 38, 57, 72, 75, 87, 88, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
7, 1250, 1376, 1377, 1378
;; rd  kill	(44)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1376, 1377, 1378

;; Pred edge  20 [29.0%] 
(code_label 628 899 629 68 171 ("vdn_nan") [1 uses])

(note 629 628 630 68 [bb 68] NOTE_INSN_BASIC_BLOCK)

(insn 630 629 631 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg/f:SI 350)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 631 630 632 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg/f:SI 351)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 632 631 633 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg/f:SI 352)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 633 632 634 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg:SI 0 r0)
        (reg/f:SI 350)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 350)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 634 633 635 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg:SI 1 r1)
        (reg/f:SI 351)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 351)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(insn 635 634 636 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg:SI 2 r2)
        (reg/f:SI 352)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 352)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(insn 636 635 637 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg:SI 3 r3)
        (reg/v:SI 195 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 195 [ fpscr ])
        (nil)))

(call_insn 637 636 638 68 arch/arm/vfp/vfpdouble.c:1084 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 638 637 639 68 arch/arm/vfp/vfpdouble.c:1084 (set (reg/v:SI 185 [ exceptions ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 68 -> ( 69)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(99)
7, 38, 57, 72, 75, 87, 88, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1250, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1376, 1377, 1378, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  69 [100.0%]  (fallthru)

;; Start of basic block ( 68 71 70 73) -> 69
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u713(11){ }u714(13){ }u715(25){ }u716(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 354 356 357 358 360 361 364 365 366 367 369
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 354 356 357 358 360 361 364 365 366 367 369
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(123)
3, 7, 17, 38, 57, 72, 75, 87, 88, 240, 241, 242, 243, 245, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1376, 1377, 1378, 1397, 1398, 1399, 1400, 1401, 1402, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(11)
1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396
;; rd  kill	(20)
89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1379, 1383, 1384, 1388, 1393, 1394, 1395, 1396

;; Pred edge  68 [100.0%]  (fallthru)
;; Pred edge  71 [100.0%] 
;; Pred edge  70 [100.0%] 
;; Pred edge  73 [100.0%] 
(code_label 639 638 640 69 210 ("pack") [3 uses])

(note 640 639 642 69 [bb 69] NOTE_INSN_BASIC_BLOCK)

(insn 642 640 864 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 354 [ vdd.sign ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -14 [0xfffffffffffffff2])) [0 vdd.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 864 642 644 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:DI 356)
        (const_int 0 [0x0])) -1 (nil))

(insn 644 864 645 69 arch/arm/vfp/vfpdouble.c:1086 (set (subreg:SI (reg:DI 356) 4)
        (ashift:SI (reg:SI 354 [ vdd.sign ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 354 [ vdd.sign ])
        (nil)))

(insn 645 644 647 69 arch/arm/vfp/vfpdouble.c:1086 (set (subreg:SI (reg:DI 356) 0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 647 645 648 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 358 [ vdd.exponent ])
        (sign_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -16 [0xfffffffffffffff0])) [0 vdd.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 648 647 865 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:DI 357 [ vdd.exponent ])
        (sign_extend:DI (reg:SI 358 [ vdd.exponent ]))) 140 {*arm_extendsidi2} (expr_list:REG_DEAD (reg:SI 358 [ vdd.exponent ])
        (nil)))

(insn 865 648 649 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:DI 360)
        (const_int 0 [0x0])) -1 (nil))

(insn 649 865 650 69 arch/arm/vfp/vfpdouble.c:1086 (set (subreg:SI (reg:DI 360) 4)
        (ashift:SI (subreg:SI (reg:DI 357 [ vdd.exponent ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 357 [ vdd.exponent ])
        (nil)))

(insn 650 649 651 69 arch/arm/vfp/vfpdouble.c:1086 (set (subreg:SI (reg:DI 360) 0)
        (subreg:SI (reg:DI 356) 0)) 167 {*arm_movsi_insn} (nil))

(insn 651 650 653 69 arch/arm/vfp/vfpdouble.c:1086 (parallel [
            (set (reg:DI 361)
                (plus:DI (reg:DI 356)
                    (reg:DI 360)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 360)
        (expr_list:REG_DEAD (reg:DI 356)
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 653 651 654 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 366 [ vdd.significand+4 ])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 vdd.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 654 653 655 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 365)
        (ashift:SI (reg:SI 366 [ vdd.significand+4 ])
            (const_int 22 [0x16]))) 117 {*arm_shiftsi3} (nil))

(insn 655 654 866 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 367 [ vdd.significand ])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdd.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 866 655 656 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:DI 364)
        (const_int 0 [0x0])) -1 (nil))

(insn 656 866 657 69 arch/arm/vfp/vfpdouble.c:1086 (set (subreg:SI (reg:DI 364) 0)
        (lshiftrt:SI (reg:SI 367 [ vdd.significand ])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 367 [ vdd.significand ])
        (nil)))

(insn 657 656 659 69 arch/arm/vfp/vfpdouble.c:1086 (set (subreg:SI (reg:DI 364) 0)
        (ior:SI (reg:SI 365)
            (subreg:SI (reg:DI 364) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 365)
        (nil)))

(insn 659 657 660 69 arch/arm/vfp/vfpdouble.c:1086 (set (subreg:SI (reg:DI 364) 4)
        (lshiftrt:SI (reg:SI 366 [ vdd.significand+4 ])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 366 [ vdd.significand+4 ])
        (nil)))

(insn 660 659 661 69 arch/arm/vfp/vfpdouble.c:1086 (parallel [
            (set (reg:DI 369)
                (plus:DI (reg:DI 361)
                    (reg:DI 364)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 364)
        (expr_list:REG_DEAD (reg:DI 361)
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 661 660 662 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:DI 0 r0)
        (reg:DI 369)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 369)
        (nil)))

(insn 662 661 663 69 arch/arm/vfp/vfpdouble.c:1086 (set (reg:SI 2 r2)
        (reg/v:SI 192 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 192 [ dd ])
        (nil)))

(call_insn 663 662 900 69 arch/arm/vfp/vfpdouble.c:1086 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(jump_insn 900 663 901 69 arch/arm/vfp/vfpdouble.c:1087 (set (pc)
        (label_ref 730)) -1 (nil))
;; End of basic block 69 -> ( 75)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 185
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; rd  out 	(134)
3, 7, 17, 38, 57, 72, 75, 87, 88, 240, 241, 242, 243, 245, 246, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1250, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1376, 1377, 1378, 1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  75 [100.0%] 

(barrier 901 900 666)

;; Start of basic block ( 21) -> 70
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u747(11){ }u748(13){ }u749(25){ }u750(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 195
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185 370 371 372
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 195
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 185 370 371 372
;; live  kill	 14 [lr]
;; rd  in  	(96)
17, 38, 57, 72, 75, 87, 88, 245, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(5)
3, 1249, 1397, 1398, 1399
;; rd  kill	(44)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1397, 1398, 1399

;; Pred edge  21 [29.0%] 
(code_label 666 901 667 70 172 ("vdm_nan") [1 uses])

(note 667 666 668 70 [bb 70] NOTE_INSN_BASIC_BLOCK)

(insn 668 667 669 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg/f:SI 370)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 669 668 670 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg/f:SI 371)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 670 669 671 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg/f:SI 372)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 671 670 672 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg:SI 0 r0)
        (reg/f:SI 370)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 370)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 672 671 673 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg:SI 1 r1)
        (reg/f:SI 371)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 371)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(insn 673 672 674 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg:SI 2 r2)
        (reg/f:SI 372)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 372)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(insn 674 673 675 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg:SI 3 r3)
        (reg/v:SI 195 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 195 [ fpscr ])
        (nil)))

(call_insn 675 674 676 70 arch/arm/vfp/vfpdouble.c:1090 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 676 675 902 70 arch/arm/vfp/vfpdouble.c:1090 (set (reg/v:SI 185 [ exceptions ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 902 676 903 70 arch/arm/vfp/vfpdouble.c:1091 (set (pc)
        (label_ref 639)) -1 (nil))
;; End of basic block 70 -> ( 69)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(100)
3, 38, 57, 72, 75, 87, 88, 245, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1249, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1397, 1398, 1399, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  69 [100.0%] 

(barrier 903 902 679)

;; Start of basic block ( 26 27) -> 71
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u767(11){ }u768(13){ }u769(25){ }u770(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 185 375
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192
;; live  gen 	 185 375
;; live  kill	
;; rd  in  	(103)
17, 38, 57, 72, 75, 87, 88, 240, 241, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
1247, 1400
;; rd  kill	(8)
1246, 1247, 1248, 1249, 1250, 1251, 1252, 1400

;; Pred edge  26 [50.0%] 
;; Pred edge  27 [50.0%] 
(code_label 679 903 680 71 177 ("zero") [2 uses])

(note 680 679 683 71 [bb 71] NOTE_INSN_BASIC_BLOCK)

(insn 683 680 684 71 arch/arm/vfp/vfpdouble.c:1094 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 vdd.exponent+0 S2 A64])
        (const_int 0 [0x0])) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 684 683 685 71 arch/arm/vfp/vfpdouble.c:1095 (set (reg:DI 375)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 685 684 686 71 arch/arm/vfp/vfpdouble.c:1095 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdd.significand+0 S8 A64])
        (reg:DI 375)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 375)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 686 685 904 71 arch/arm/vfp/vfpdouble.c:1008 (set (reg/v:SI 185 [ exceptions ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 904 686 905 71 arch/arm/vfp/vfpdouble.c:1096 (set (pc)
        (label_ref 639)) -1 (nil))
;; End of basic block 71 -> ( 69)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(105)
17, 38, 57, 72, 75, 87, 88, 240, 241, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1400, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  69 [100.0%] 

(barrier 905 904 689)

;; Start of basic block ( 23) -> 72
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u774(11){ }u775(13){ }u776(25){ }u777(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 271
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 271
;; lr  def 	 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 271
;; live  gen 	 185
;; live  kill	
;; rd  in  	(99)
17, 38, 57, 72, 75, 87, 88, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(1)
1246
;; rd  kill	(7)
1246, 1247, 1248, 1249, 1250, 1251, 1252

;; Pred edge  23 [50.0%] 
(code_label 689 905 690 72 174 "" [1 uses])

(note 690 689 691 72 [bb 72] NOTE_INSN_BASIC_BLOCK)

(insn 691 690 692 72 arch/arm/vfp/vfpdouble.c:1008 (set (reg/v:SI 185 [ exceptions ])
        (reg:SI 271)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 271)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))
;; End of basic block 72 -> ( 73)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(100)
17, 38, 57, 72, 75, 87, 88, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  73 [100.0%]  (fallthru)

;; Start of basic block ( 72 25) -> 73
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u779(11){ }u780(13){ }u781(25){ }u782(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 377 378
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  gen 	 377 378
;; live  kill	
;; rd  in  	(103)
17, 38, 57, 72, 75, 87, 88, 242, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(2)
1401, 1402
;; rd  kill	(2)
1401, 1402

;; Pred edge  72 [100.0%]  (fallthru)
;; Pred edge  25 [100.0%] 
(code_label 692 691 693 73 176 ("infinity") [1 uses])

(note 693 692 694 73 [bb 73] NOTE_INSN_BASIC_BLOCK)

(insn 694 693 696 73 arch/arm/vfp/vfpdouble.c:1101 (set (reg:SI 377)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 696 694 697 73 arch/arm/vfp/vfpdouble.c:1101 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 vdd.exponent+0 S2 A64])
        (subreg:HI (reg:SI 377) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 377)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 697 696 698 73 arch/arm/vfp/vfpdouble.c:1102 (set (reg:DI 378)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 698 697 906 73 arch/arm/vfp/vfpdouble.c:1102 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdd.significand+0 S8 A64])
        (reg:DI 378)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 378)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 906 698 907 73 arch/arm/vfp/vfpdouble.c:1103 (set (pc)
        (label_ref 639)) -1 (nil))
;; End of basic block 73 -> ( 69)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185 192
;; rd  out 	(105)
17, 38, 57, 72, 75, 87, 88, 242, 243, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1252, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1401, 1402, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  69 [100.0%] 

(barrier 907 906 701)

;; Start of basic block ( 22) -> 74
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u787(11){ }u788(13){ }u789(25){ }u790(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 269
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 269
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185 379 381 383 385 386 388 389 393 394 395 396 398
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 192 269
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 185 379 381 383 385 386 388 389 393 394 395 396 398
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(98)
17, 38, 57, 72, 75, 87, 88, 244, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432
;; rd  gen 	(13)
1248, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421
;; rd  kill	(28)
89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1403, 1404, 1408, 1409, 1413, 1418, 1419, 1420, 1421

;; Pred edge  22 [29.0%] 
(code_label 701 907 702 74 173 "" [1 uses])

(note 702 701 703 74 [bb 74] NOTE_INSN_BASIC_BLOCK)

(insn 703 702 705 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg/f:SI 379)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 705 703 867 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 381 [ vfp_double_default_qnan.sign ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 379)
                    (const_int 2 [0x2])) [0 vfp_double_default_qnan.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_EQUAL (zero_extend:SI (mem/s/j/c:HI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 2 [0x2]))) [0 vfp_double_default_qnan.sign+0 S2 A16]))
        (nil)))

(insn 867 705 707 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:DI 383)
        (const_int 0 [0x0])) -1 (nil))

(insn 707 867 708 74 arch/arm/vfp/vfpdouble.c:1106 (set (subreg:SI (reg:DI 383) 4)
        (ashift:SI (reg:SI 381 [ vfp_double_default_qnan.sign ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 381 [ vfp_double_default_qnan.sign ])
        (nil)))

(insn 708 707 711 74 arch/arm/vfp/vfpdouble.c:1106 (set (subreg:SI (reg:DI 383) 0)
        (reg:SI 269)) 167 {*arm_movsi_insn} (nil))

(insn 711 708 712 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 386 [ vfp_double_default_qnan.exponent ])
        (sign_extend:SI (mem/s/j/c:HI (reg/f:SI 379) [0 vfp_double_default_qnan.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (expr_list:REG_EQUAL (sign_extend:SI (mem/s/j/c:HI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 vfp_double_default_qnan.exponent+0 S2 A64]))
        (nil)))

(insn 712 711 868 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:DI 385 [ vfp_double_default_qnan.exponent ])
        (sign_extend:DI (reg:SI 386 [ vfp_double_default_qnan.exponent ]))) 140 {*arm_extendsidi2} (expr_list:REG_DEAD (reg:SI 386 [ vfp_double_default_qnan.exponent ])
        (nil)))

(insn 868 712 713 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:DI 388)
        (const_int 0 [0x0])) -1 (nil))

(insn 713 868 714 74 arch/arm/vfp/vfpdouble.c:1106 (set (subreg:SI (reg:DI 388) 4)
        (ashift:SI (subreg:SI (reg:DI 385 [ vfp_double_default_qnan.exponent ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 385 [ vfp_double_default_qnan.exponent ])
        (nil)))

(insn 714 713 715 74 arch/arm/vfp/vfpdouble.c:1106 (set (subreg:SI (reg:DI 388) 0)
        (reg:SI 269)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 269)
        (nil)))

(insn 715 714 718 74 arch/arm/vfp/vfpdouble.c:1106 (parallel [
            (set (reg:DI 389)
                (plus:DI (reg:DI 383)
                    (reg:DI 388)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 388)
        (expr_list:REG_DEAD (reg:DI 383)
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 718 715 719 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 395 [ vfp_double_default_qnan.significand+4 ])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 379)
                (const_int 12 [0xc])) [0 vfp_double_default_qnan.significand+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 12 [0xc]))) [0 vfp_double_default_qnan.significand+4 S4 A32])
        (nil)))

(insn 719 718 720 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 394)
        (ashift:SI (reg:SI 395 [ vfp_double_default_qnan.significand+4 ])
            (const_int 22 [0x16]))) 117 {*arm_shiftsi3} (nil))

(insn 720 719 869 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 396 [ vfp_double_default_qnan.significand ])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 379)
                (const_int 8 [0x8])) [0 vfp_double_default_qnan.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 379)
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                        (const_int 8 [0x8]))) [0 vfp_double_default_qnan.significand+0 S4 A64])
            (nil))))

(insn 869 720 721 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:DI 393)
        (const_int 0 [0x0])) -1 (nil))

(insn 721 869 722 74 arch/arm/vfp/vfpdouble.c:1106 (set (subreg:SI (reg:DI 393) 0)
        (lshiftrt:SI (reg:SI 396 [ vfp_double_default_qnan.significand ])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 396 [ vfp_double_default_qnan.significand ])
        (nil)))

(insn 722 721 724 74 arch/arm/vfp/vfpdouble.c:1106 (set (subreg:SI (reg:DI 393) 0)
        (ior:SI (reg:SI 394)
            (subreg:SI (reg:DI 393) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 394)
        (nil)))

(insn 724 722 725 74 arch/arm/vfp/vfpdouble.c:1106 (set (subreg:SI (reg:DI 393) 4)
        (lshiftrt:SI (reg:SI 395 [ vfp_double_default_qnan.significand+4 ])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 395 [ vfp_double_default_qnan.significand+4 ])
        (nil)))

(insn 725 724 726 74 arch/arm/vfp/vfpdouble.c:1106 (parallel [
            (set (reg:DI 398)
                (plus:DI (reg:DI 389)
                    (reg:DI 393)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 393)
        (expr_list:REG_DEAD (reg:DI 389)
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 726 725 727 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:DI 0 r0)
        (reg:DI 398)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 398)
        (nil)))

(insn 727 726 728 74 arch/arm/vfp/vfpdouble.c:1106 (set (reg:SI 2 r2)
        (reg/v:SI 192 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 192 [ dd ])
        (nil)))

(call_insn 728 727 729 74 arch/arm/vfp/vfpdouble.c:1106 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 729 728 730 74 arch/arm/vfp/vfpdouble.c:1107 (set (reg/v:SI 185 [ exceptions ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 74 -> ( 75)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 185
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; rd  out 	(111)
17, 38, 57, 72, 75, 87, 88, 244, 259, 260, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1248, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432


;; Succ edge  75 [100.0%]  (fallthru)

;; Start of basic block ( 74 67 69) -> 75
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u822(11){ }u823(13){ }u824(25){ }u825(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 185
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 185
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(254)
3, 7, 9, 17, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 240, 241, 242, 243, 244, 245, 246, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441
;; rd  gen 	(1)
0
;; rd  kill	(22)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21

;; Pred edge  74 [100.0%]  (fallthru)
;; Pred edge  67 [100.0%] 
;; Pred edge  69 [100.0%] 
(code_label 730 729 731 75 209 "" [2 uses])

(note 731 730 736 75 [bb 75] NOTE_INSN_BASIC_BLOCK)

(insn 736 731 742 75 arch/arm/vfp/vfpdouble.c:1108 (set (reg/i:SI 0 r0)
        (reg/v:SI 185 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 185 [ exceptions ])
        (nil)))

(insn 742 736 0 75 arch/arm/vfp/vfpdouble.c:1108 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 75 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(251)
0, 32, 34, 38, 51, 52, 57, 66, 67, 72, 73, 74, 75, 87, 88, 217, 218, 240, 241, 242, 243, 244, 245, 246, 259, 260, 1170, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1348, 1349, 1352, 1354, 1356, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1382, 1383, 1384, 1386, 1388, 1390, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1406, 1408, 1409, 1411, 1413, 1415, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_add (vfp_double_add)[0:172]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 43 n_edges 61 count 83 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 43 n_edges 61 count 84 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 43 n_edges 61 count 84 (    2)


vfp_double_add

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,15u} r1={15d,11u} r2={14d,8u} r3={12d,6u} r11={1d,42u} r12={7d} r13={1d,48u} r14={6d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={32d,23u} r25={1d,42u} r26={1d,41u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,1u} r134={3d,5u} r137={1d,2u} r138={3d,1u} r139={2d,1u} r140={4d,2u} r141={1d,3u,1d} r142={1d,3u,1d} r143={1d,2u} r144={3d,5u} r146={1d,1u} r147={1d,4u} r149={1d,13u} r150={3d,18u} r151={2d,12u} r152={1d,2u} r153={1d,1u} r156={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={2d,2u} r168={1d,2u} r169={1d,1u} r170={2d,2u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={2d,2u} r176={1d,2u} r177={1d,1u} r178={2d,2u} r179={2d,2u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r190={1d,1u} r191={1d,1u} r193={1d,1u} r195={2d,2u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r202={1d,1u,1d} r203={1d,1u} r204={1d,1u} r205={2d,2u} r206={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={3d,3u} r214={3d,3u} r215={1d,2u} 
;;    total ref usage 1227{852d,372u,3e} in 168{162 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,16] 1[16,15] 2[31,14] 3[45,12] 11[57,1] 12[58,7] 13[65,1] 14[66,6] 15[72,6] 16[78,6] 17[84,6] 18[90,6] 19[96,6] 20[102,6] 21[108,6] 22[114,6] 23[120,6] 24[126,32] 25[158,1] 26[159,1] 27[160,6] 28[166,6] 29[172,6] 30[178,6] 31[184,6] 32[190,6] 33[196,6] 34[202,6] 35[208,6] 36[214,6] 37[220,6] 38[226,6] 39[232,6] 40[238,6] 41[244,6] 42[250,6] 43[256,6] 44[262,6] 45[268,6] 46[274,6] 47[280,6] 48[286,6] 49[292,6] 50[298,6] 51[304,6] 52[310,6] 53[316,6] 54[322,6] 55[328,6] 56[334,6] 57[340,6] 58[346,6] 59[352,6] 60[358,6] 61[364,6] 62[370,6] 63[376,6] 64[382,6] 65[388,6] 66[394,6] 67[400,6] 68[406,6] 69[412,6] 70[418,6] 71[424,6] 72[430,6] 73[436,6] 74[442,6] 75[448,6] 76[454,6] 77[460,6] 78[466,6] 79[472,6] 80[478,6] 81[484,6] 82[490,6] 83[496,6] 84[502,6] 85[508,6] 86[514,6] 87[520,6] 88[526,6] 89[532,6] 90[538,6] 91[544,6] 92[550,6] 93[556,6] 94[562,6] 95[568,6] 96[574,6] 97[580,6] 98[586,6] 99[592,6] 100[598,6] 101[604,6] 102[610,6] 103[616,6] 104[622,6] 105[628,6] 106[634,6] 107[640,6] 108[646,6] 109[652,6] 110[658,6] 111[664,6] 112[670,6] 113[676,6] 114[682,6] 115[688,6] 116[694,6] 117[700,6] 118[706,6] 119[712,6] 120[718,6] 121[724,6] 122[730,6] 123[736,6] 124[742,6] 125[748,6] 126[754,6] 127[760,6] 133[766,1] 134[767,3] 137[770,1] 138[771,3] 139[774,2] 140[776,4] 141[780,1] 142[781,1] 143[782,1] 144[783,3] 146[786,1] 147[787,1] 149[788,1] 150[789,3] 151[792,2] 152[794,1] 153[795,1] 156[796,1] 161[797,1] 162[798,1] 163[799,1] 164[800,1] 165[801,1] 166[802,1] 167[803,2] 168[805,1] 169[806,1] 170[807,2] 171[809,1] 172[810,1] 173[811,1] 174[812,1] 175[813,2] 176[815,1] 177[816,1] 178[817,2] 179[819,2] 180[821,1] 181[822,1] 182[823,1] 183[824,1] 184[825,1] 190[826,1] 191[827,1] 193[828,1] 195[829,2] 196[831,1] 197[832,1] 198[833,1] 199[834,1] 202[835,1] 203[836,1] 204[837,1] 205[838,2] 206[840,1] 209[841,1] 210[842,1] 211[843,1] 212[844,1] 213[845,3] 214[848,3] 215[851,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d15(0){ }d30(1){ }d44(2){ }d56(3){ }d57(11){ }d64(12){ }d65(13){ }d71(14){ }d158(25){ }d159(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
15, 30, 44, 56, 57, 64, 65, 71, 158, 159
;; rd  kill	(74)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 158, 159
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
15, 30, 44, 56, 57, 64, 65, 71, 158, 159

( 0 )->[2]->( 4 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d57(bb 0 insn -1) }u1(13){ d65(bb 0 insn -1) }u2(25){ d158(bb 0 insn -1) }u3(26){ d159(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 149 150 151 152 153
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 149 150 151 152 153
;; live  kill	
;; rd  in  	(10)
15, 30, 44, 56, 57, 64, 65, 71, 158, 159
;; rd  gen 	(6)
157, 788, 791, 793, 794, 795
;; rd  kill	(40)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 788, 789, 790, 791, 792, 793, 794, 795
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(16)
15, 30, 44, 56, 57, 64, 65, 71, 157, 158, 159, 788, 791, 793, 794, 795
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d15(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d30(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d44(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d56(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 9
;;      reg 150 { d791(bb 2 insn 3) }
;;   UD chains for insn luid 5 uid 10
;;      reg 153 { d795(bb 2 insn 9) }
;;   UD chains for insn luid 6 uid 11
;;      reg 24 { d157(bb 2 insn 10) }

( 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(11){ d57(bb 0 insn -1) }u12(13){ d65(bb 0 insn -1) }u13(25){ d158(bb 0 insn -1) }u14(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 156
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 24 [cc] 156
;; live  kill	
;; rd  in  	(16)
15, 30, 44, 56, 57, 64, 65, 71, 157, 158, 159, 788, 791, 793, 794, 795
;; rd  gen 	(2)
156, 796
;; rd  kill	(33)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 796
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(17)
15, 30, 44, 56, 57, 64, 65, 71, 156, 158, 159, 788, 791, 793, 794, 795, 796
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 22
;;      reg 151 { d793(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 23
;;      reg 156 { d796(bb 3 insn 22) }
;;   UD chains for insn luid 2 uid 24
;;      reg 24 { d156(bb 3 insn 23) }

( 3 2 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u18(11){ d57(bb 0 insn -1) }u19(13){ d65(bb 0 insn -1) }u20(25){ d158(bb 0 insn -1) }u21(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(18)
15, 30, 44, 56, 57, 64, 65, 71, 156, 157, 158, 159, 788, 791, 793, 794, 795, 796
;; rd  gen 	(1)
14
;; rd  kill	(22)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 66, 67, 68, 69, 70, 71
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(17)
14, 30, 44, 56, 57, 64, 65, 156, 157, 158, 159, 788, 791, 793, 794, 795, 796
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 40
;;      reg 13 { d65(bb 0 insn -1) }
;;      reg 0 { d1(bb 4 insn 38) }
;;      reg 1 { d17(bb 4 insn 39) }

( 4 3 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u25(11){ d57(bb 0 insn -1) }u26(13){ d65(bb 0 insn -1) }u27(25){ d158(bb 0 insn -1) }u28(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 24 [cc] 161 162
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 24 [cc] 161 162
;; live  kill	
;; rd  in  	(19)
14, 15, 30, 44, 56, 57, 64, 65, 71, 156, 157, 158, 159, 788, 791, 793, 794, 795, 796
;; rd  gen 	(3)
154, 797, 798
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 797, 798
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(20)
14, 15, 30, 44, 56, 57, 64, 65, 71, 154, 158, 159, 788, 791, 793, 794, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 43
;;      reg 150 { d791(bb 2 insn 3) }
;;   UD chains for insn luid 1 uid 44
;;      reg 151 { d793(bb 2 insn 4) }
;;   UD chains for insn luid 2 uid 45
;;      reg 161 { d797(bb 5 insn 43) }
;;      reg 162 { d798(bb 5 insn 44) }
;;   UD chains for insn luid 3 uid 46
;;      reg 24 { d154(bb 5 insn 45) }

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u34(11){ d57(bb 0 insn -1) }u35(13){ d65(bb 0 insn -1) }u36(25){ d158(bb 0 insn -1) }u37(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 133 150 151
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 133 150 151
;; live  kill	
;; rd  in  	(20)
14, 15, 30, 44, 56, 57, 64, 65, 71, 154, 158, 159, 788, 791, 793, 794, 795, 796, 797, 798
;; rd  gen 	(3)
766, 790, 792
;; rd  kill	(6)
766, 789, 790, 791, 792, 793
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(21)
14, 15, 30, 44, 56, 57, 64, 65, 71, 154, 158, 159, 766, 788, 790, 792, 794, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 48
;;      reg 150 { d791(bb 2 insn 3) }
;;   UD chains for insn luid 1 uid 49
;;      reg 151 { d793(bb 2 insn 4) }
;;   UD chains for insn luid 2 uid 50
;;      reg 133 { d766(bb 6 insn 48) }

( 5 6 )->[7]->( 8 27 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u41(11){ d57(bb 0 insn -1) }u42(13){ d65(bb 0 insn -1) }u43(25){ d158(bb 0 insn -1) }u44(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  def 	 24 [cc] 163 164 165 166
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 24 [cc] 163 164 165 166
;; live  kill	
;; rd  in  	(23)
14, 15, 30, 44, 56, 57, 64, 65, 71, 154, 158, 159, 766, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798
;; rd  gen 	(5)
153, 799, 800, 801, 802
;; rd  kill	(36)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 799, 800, 801, 802
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(27)
14, 15, 30, 44, 56, 57, 64, 65, 71, 153, 158, 159, 766, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 54
;;      reg 164 { d800(bb 7 insn 53) }
;;   UD chains for insn luid 2 uid 55
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;   UD chains for insn luid 3 uid 56
;;      reg 163 { d799(bb 7 insn 54) }
;;   UD chains for insn luid 4 uid 57
;;      reg 165 { d801(bb 7 insn 55) }
;;      reg 166 { d802(bb 7 insn 56) }
;;   UD chains for insn luid 5 uid 58
;;      reg 24 { d153(bb 7 insn 57) }

( 7 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u51(11){ d57(bb 0 insn -1) }u52(13){ d65(bb 0 insn -1) }u53(25){ d158(bb 0 insn -1) }u54(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  def 	 24 [cc] 141 167
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 24 [cc] 141 167
;; live  kill	
;; rd  in  	(27)
14, 15, 30, 44, 56, 57, 64, 65, 71, 153, 158, 159, 766, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802
;; rd  gen 	(3)
152, 780, 803
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 780, 803, 804
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 149 150 151 152
;; rd  out 	(29)
14, 15, 30, 44, 56, 57, 64, 65, 71, 152, 158, 159, 766, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 60
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;   UD chains for insn luid 1 uid 61
;;      reg 141 { d780(bb 8 insn 60) }
;;   UD chains for insn luid 2 uid 62
;;      reg 141 { d780(bb 8 insn 60) }
;;      reg 167 { d804(bb 8 insn 61) }
;;   UD chains for insn luid 3 uid 63
;;      reg 167 { d803(bb 8 insn 62) }
;;   UD chains for insn luid 4 uid 64
;;      reg 24 { d152(bb 8 insn 63) }

( 8 )->[9]->( 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u61(11){ d57(bb 0 insn -1) }u62(13){ d65(bb 0 insn -1) }u63(25){ d158(bb 0 insn -1) }u64(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 139
;; live  kill	
;; rd  in  	(29)
14, 15, 30, 44, 56, 57, 64, 65, 71, 152, 158, 159, 766, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803
;; rd  gen 	(1)
775
;; rd  kill	(2)
774, 775
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; rd  out 	(30)
14, 15, 30, 44, 56, 57, 64, 65, 71, 152, 158, 159, 766, 775, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }

( 8 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u65(11){ d57(bb 0 insn -1) }u66(13){ d65(bb 0 insn -1) }u67(25){ d158(bb 0 insn -1) }u68(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 139 168 169 170
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 149 150 151 152
;; live  gen 	 24 [cc] 139 168 169 170
;; live  kill	
;; rd  in  	(29)
14, 15, 30, 44, 56, 57, 64, 65, 71, 152, 158, 159, 766, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803
;; rd  gen 	(5)
129, 774, 805, 806, 807
;; rd  kill	(38)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 774, 775, 805, 806, 807, 808
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; rd  out 	(33)
14, 15, 30, 44, 56, 57, 64, 65, 71, 129, 158, 159, 766, 774, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 72
;;      reg 141 { d780(bb 8 insn 60) }
;;      reg 169 { d806(bb 10 insn 71) }
;;   eq_note reg 141 { }
;;   UD chains for insn luid 2 uid 73
;;      reg 168 { d805(bb 10 insn 72) }
;;   UD chains for insn luid 3 uid 74
;;      reg 168 { d805(bb 10 insn 72) }
;;      reg 170 { d808(bb 10 insn 73) }
;;   UD chains for insn luid 4 uid 347
;;      reg 170 { d807(bb 10 insn 74) }
;;   UD chains for insn luid 5 uid 348
;;      reg 24 { d129(bb 10 insn 347) }

( 10 9 )->[11]->( 12 15 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u77(11){ d57(bb 0 insn -1) }u78(13){ d65(bb 0 insn -1) }u79(25){ d158(bb 0 insn -1) }u80(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 143 171 172 173 174
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 24 [cc] 143 171 172 173 174
;; live  kill	
;; rd  in  	(35)
14, 15, 30, 44, 56, 57, 64, 65, 71, 129, 152, 158, 159, 766, 774, 775, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807
;; rd  gen 	(6)
151, 782, 809, 810, 811, 812
;; rd  kill	(37)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 782, 809, 810, 811, 812
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 143 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 143 149 150 151 152
;; rd  out 	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 151, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 86
;;      reg 151 { d793(bb 2 insn 4) d792(bb 6 insn 50) }
;;   UD chains for insn luid 2 uid 88
;;      reg 172 { d810(bb 11 insn 87) }
;;   UD chains for insn luid 3 uid 89
;;      reg 143 { d782(bb 11 insn 86) }
;;   UD chains for insn luid 4 uid 90
;;      reg 171 { d809(bb 11 insn 88) }
;;   UD chains for insn luid 5 uid 91
;;      reg 173 { d811(bb 11 insn 89) }
;;      reg 174 { d812(bb 11 insn 90) }
;;   UD chains for insn luid 6 uid 92
;;      reg 24 { d151(bb 11 insn 91) }

( 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u88(11){ d57(bb 0 insn -1) }u89(13){ d65(bb 0 insn -1) }u90(25){ d158(bb 0 insn -1) }u91(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 142 175
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 24 [cc] 142 175
;; live  kill	
;; rd  in  	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 151, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;; rd  gen 	(3)
150, 781, 813
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 781, 813, 814
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 142 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 142 149 150 151 152
;; rd  out 	(41)
14, 15, 30, 44, 56, 57, 64, 65, 71, 150, 158, 159, 766, 774, 775, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 94
;;      reg 151 { d793(bb 2 insn 4) d792(bb 6 insn 50) }
;;   UD chains for insn luid 1 uid 95
;;      reg 142 { d781(bb 12 insn 94) }
;;   UD chains for insn luid 2 uid 96
;;      reg 142 { d781(bb 12 insn 94) }
;;      reg 175 { d814(bb 12 insn 95) }
;;   UD chains for insn luid 3 uid 97
;;      reg 175 { d813(bb 12 insn 96) }
;;   UD chains for insn luid 4 uid 98
;;      reg 24 { d150(bb 12 insn 97) }

( 12 )->[13]->( 18 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u98(11){ d57(bb 0 insn -1) }u99(13){ d65(bb 0 insn -1) }u100(25){ d158(bb 0 insn -1) }u101(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 140
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 140
;; live  kill	
;; rd  in  	(41)
14, 15, 30, 44, 56, 57, 64, 65, 71, 150, 158, 159, 766, 774, 775, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813
;; rd  gen 	(1)
779
;; rd  kill	(4)
776, 777, 778, 779
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; rd  out 	(42)
14, 15, 30, 44, 56, 57, 64, 65, 71, 150, 158, 159, 766, 774, 775, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }

( 12 )->[14]->( 18 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u102(11){ d57(bb 0 insn -1) }u103(13){ d65(bb 0 insn -1) }u104(25){ d158(bb 0 insn -1) }u105(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 142 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc] 140 176 177 178
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 142 149 150 151 152
;; live  gen 	 24 [cc] 140 176 177 178
;; live  kill	
;; rd  in  	(41)
14, 15, 30, 44, 56, 57, 64, 65, 71, 150, 158, 159, 766, 774, 775, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813
;; rd  gen 	(5)
128, 777, 815, 816, 817
;; rd  kill	(40)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 776, 777, 778, 779, 815, 816, 817, 818
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; rd  out 	(45)
14, 15, 30, 44, 56, 57, 64, 65, 71, 128, 158, 159, 766, 774, 775, 777, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 106
;;      reg 142 { d781(bb 12 insn 94) }
;;      reg 177 { d816(bb 14 insn 105) }
;;   eq_note reg 142 { }
;;   UD chains for insn luid 2 uid 107
;;      reg 176 { d815(bb 14 insn 106) }
;;   UD chains for insn luid 3 uid 108
;;      reg 176 { d815(bb 14 insn 106) }
;;      reg 178 { d818(bb 14 insn 107) }
;;   UD chains for insn luid 4 uid 349
;;      reg 178 { d817(bb 14 insn 108) }
;;   UD chains for insn luid 5 uid 350
;;      reg 24 { d128(bb 14 insn 349) }

( 11 )->[15]->( 17 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u114(11){ d57(bb 0 insn -1) }u115(13){ d65(bb 0 insn -1) }u116(25){ d158(bb 0 insn -1) }u117(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 143 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 143 149 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 151, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;; rd  gen 	(1)
149
;; rd  kill	(32)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; rd  out 	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 149, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 122
;;      reg 143 { d782(bb 11 insn 86) }
;;   UD chains for insn luid 1 uid 123
;;      reg 24 { d149(bb 15 insn 122) }

( 15 )->[16]->( 18 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u120(11){ d57(bb 0 insn -1) }u121(13){ d65(bb 0 insn -1) }u122(25){ d158(bb 0 insn -1) }u123(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 140
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 140
;; live  kill	
;; rd  in  	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 149, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;; rd  gen 	(1)
778
;; rd  kill	(4)
776, 777, 778, 779
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; rd  out 	(40)
14, 15, 30, 44, 56, 57, 64, 65, 71, 149, 158, 159, 766, 774, 775, 778, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }

( 15 )->[17]->( 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u124(11){ d57(bb 0 insn -1) }u125(13){ d65(bb 0 insn -1) }u126(25){ d158(bb 0 insn -1) }u127(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 140 179 180
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 24 [cc] 140 179 180
;; live  kill	
;; rd  in  	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 149, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;; rd  gen 	(4)
127, 776, 819, 821
;; rd  kill	(39)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 776, 777, 778, 779, 819, 820, 821
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; rd  out 	(42)
14, 15, 30, 44, 56, 57, 64, 65, 71, 127, 158, 159, 766, 774, 775, 776, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 819, 821
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 130
;;      reg 151 { d793(bb 2 insn 4) d792(bb 6 insn 50) }
;;   UD chains for insn luid 1 uid 131
;;      reg 151 { d793(bb 2 insn 4) d792(bb 6 insn 50) }
;;   UD chains for insn luid 2 uid 132
;;      reg 179 { d820(bb 17 insn 130) }
;;      reg 180 { d821(bb 17 insn 131) }
;;   UD chains for insn luid 3 uid 351
;;      reg 179 { d819(bb 17 insn 132) }
;;   UD chains for insn luid 4 uid 352
;;      reg 24 { d127(bb 17 insn 351) }

( 17 14 13 16 )->[18]->( 19 21 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u134(11){ d57(bb 0 insn -1) }u135(13){ d65(bb 0 insn -1) }u136(25){ d158(bb 0 insn -1) }u137(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140
;; lr  def 	 24 [cc] 137 181
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  gen 	 24 [cc] 137 181
;; live  kill	
;; rd  in  	(53)
14, 15, 30, 44, 56, 57, 64, 65, 71, 127, 128, 149, 150, 158, 159, 766, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821
;; rd  gen 	(3)
148, 770, 822
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 770, 822
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 149 150 151 152
;; rd  out 	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 148, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 144
;;      reg 139 { d775(bb 9 insn 66) d774(bb 10 insn 348) }
;;   UD chains for insn luid 1 uid 145
;;      reg 137 { d770(bb 18 insn 144) }
;;      reg 140 { d779(bb 13 insn 100) d778(bb 16 insn 125) d777(bb 14 insn 350) d776(bb 17 insn 352) }
;;   UD chains for insn luid 2 uid 146
;;      reg 181 { d822(bb 18 insn 145) }
;;   UD chains for insn luid 3 uid 147
;;      reg 24 { d148(bb 18 insn 146) }

( 18 )->[19]->( 24 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u143(11){ d57(bb 0 insn -1) }u144(13){ d65(bb 0 insn -1) }u145(25){ d158(bb 0 insn -1) }u146(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 24 [cc] 182 183
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151
;; live  gen 	 24 [cc] 182 183
;; live  kill	
;; rd  in  	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 148, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822
;; rd  gen 	(3)
147, 823, 824
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 823, 824
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; rd  out 	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 149
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;   UD chains for insn luid 1 uid 150
;;      reg 151 { d793(bb 2 insn 4) d792(bb 6 insn 50) }
;;   UD chains for insn luid 2 uid 151
;;      reg 182 { d823(bb 19 insn 149) }
;;      reg 183 { d824(bb 19 insn 150) }
;;   UD chains for insn luid 3 uid 152
;;      reg 24 { d147(bb 19 insn 151) }

( 19 )->[20]->( 25 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(11){ d57(bb 0 insn -1) }u-1(13){ d65(bb 0 insn -1) }u-1(25){ d158(bb 0 insn -1) }u-1(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; live  gen 	
;; live  kill	
;; rd  in  	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; rd  out 	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }

( 18 )->[21]->( 22 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u152(11){ d57(bb 0 insn -1) }u153(13){ d65(bb 0 insn -1) }u154(25){ d158(bb 0 insn -1) }u155(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 149 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 148, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822
;; rd  gen 	(1)
146
;; rd  kill	(32)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 149 150 151 152
;; rd  out 	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 146, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 158
;;      reg 137 { d770(bb 18 insn 144) }
;;   UD chains for insn luid 1 uid 159
;;      reg 24 { d146(bb 21 insn 158) }

( 21 )->[22]->( 25 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u158(11){ d57(bb 0 insn -1) }u159(13){ d65(bb 0 insn -1) }u160(25){ d158(bb 0 insn -1) }u161(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc] 184
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 149 150 151 152
;; live  gen 	 24 [cc] 184
;; live  kill	
;; rd  in  	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 146, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822
;; rd  gen 	(2)
145, 825
;; rd  kill	(33)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 825
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(53)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 825
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 161
;;      reg 140 { d779(bb 13 insn 100) d778(bb 16 insn 125) d777(bb 14 insn 350) d776(bb 17 insn 352) }
;;   UD chains for insn luid 1 uid 162
;;      reg 184 { d825(bb 22 insn 161) }
;;   UD chains for insn luid 2 uid 163
;;      reg 24 { d145(bb 22 insn 162) }

( 21 22 )->[23]->( 1 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u165(11){ d57(bb 0 insn -1) }u166(13){ d65(bb 0 insn -1) }u167(25){ d158(bb 0 insn -1) }u168(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; rd  in  	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 146, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 825
;; rd  gen 	(1)
12
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(53)
12, 30, 44, 56, 57, 64, 65, 71, 145, 146, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 825
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 166
;;      reg 149 { d788(bb 2 insn 2) }
;;   UD chains for insn luid 1 uid 167
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;   UD chains for insn luid 2 uid 168
;;      reg 151 { d793(bb 2 insn 4) d792(bb 6 insn 50) }
;;   UD chains for insn luid 3 uid 169
;;      reg 152 { d794(bb 2 insn 5) }
;;   UD chains for insn luid 4 uid 170
;;      reg 13 { d65(bb 0 insn -1) }
;;      reg 0 { d13(bb 23 insn 166) }
;;      reg 1 { d28(bb 23 insn 167) }
;;      reg 2 { d42(bb 23 insn 168) }
;;      reg 3 { d54(bb 23 insn 169) }

( 19 )->[24]->( 26 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u178(11){ d57(bb 0 insn -1) }u179(13){ d65(bb 0 insn -1) }u180(25){ d158(bb 0 insn -1) }u181(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138 150
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; live  gen 	 138 150
;; live  kill	
;; rd  in  	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824
;; rd  gen 	(2)
773, 789
;; rd  kill	(6)
771, 772, 773, 789, 790, 791
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; rd  out 	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }

( 22 20 )->[25]->( 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u182(11){ d57(bb 0 insn -1) }u183(13){ d65(bb 0 insn -1) }u184(25){ d158(bb 0 insn -1) }u185(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; live  gen 	 138
;; live  kill	
;; rd  in  	(56)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825
;; rd  gen 	(1)
772
;; rd  kill	(3)
771, 772, 773
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; rd  out 	(57)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 147, 158, 159, 766, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }

( 25 24 )->[26]->( 42 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u186(11){ d57(bb 0 insn -1) }u187(13){ d65(bb 0 insn -1) }u188(25){ d158(bb 0 insn -1) }u189(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; rd  in  	(59)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 147, 158, 159, 766, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825
;; rd  gen 	(4)
4, 19, 32, 46
;; rd  kill	(57)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; rd  out 	(58)
4, 19, 32, 46, 57, 64, 65, 71, 145, 147, 158, 159, 766, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 187
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) d789(bb 24 insn 176) }
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) d789(bb 24 insn 176) }
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) d789(bb 24 insn 176) }
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) d789(bb 24 insn 176) }
;;   UD chains for insn luid 1 uid 188
;;      reg 0 { d4(bb 26 insn 187) }
;;      reg 1 { d19(bb 26 insn 187) }
;;      reg 2 { d32(bb 26 insn 187) }
;;      reg 3 { d46(bb 26 insn 187) }
;;      reg 149 { d788(bb 2 insn 2) }
;;      reg 149 { d788(bb 2 insn 2) }
;;      reg 149 { d788(bb 2 insn 2) }
;;      reg 149 { d788(bb 2 insn 2) }

( 7 )->[27]->( 28 34 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u202(11){ d57(bb 0 insn -1) }u203(13){ d65(bb 0 insn -1) }u204(25){ d158(bb 0 insn -1) }u205(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 134 147 190 191
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 134 147 190 191
;; live  kill	
;; rd  in  	(27)
14, 15, 30, 44, 56, 57, 64, 65, 71, 153, 158, 159, 766, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802
;; rd  gen 	(9)
3, 18, 31, 45, 133, 769, 787, 826, 827
;; rd  kill	(95)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 767, 768, 769, 787, 826, 827
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; rd  out 	(30)
3, 18, 31, 45, 57, 64, 65, 71, 133, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 195
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;   UD chains for insn luid 1 uid 196
;;      reg 0 { d3(bb 27 insn 195) }
;;      reg 1 { d18(bb 27 insn 195) }
;;      reg 2 { d31(bb 27 insn 195) }
;;      reg 3 { d45(bb 27 insn 195) }
;;      reg 149 { d788(bb 2 insn 2) }
;;      reg 149 { d788(bb 2 insn 2) }
;;      reg 149 { d788(bb 2 insn 2) }
;;      reg 149 { d788(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 197
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;   UD chains for insn luid 3 uid 198
;;      reg 151 { d793(bb 2 insn 4) d792(bb 6 insn 50) }
;;   UD chains for insn luid 4 uid 199
;;      reg 190 { d826(bb 27 insn 197) }
;;      reg 191 { d827(bb 27 insn 198) }
;;   UD chains for insn luid 5 uid 201
;;      reg 151 { d793(bb 2 insn 4) d792(bb 6 insn 50) }
;;   UD chains for insn luid 6 uid 202
;;      reg 147 { d787(bb 27 insn 199) }
;;   UD chains for insn luid 7 uid 203
;;      reg 24 { d133(bb 27 insn 202) }

( 27 )->[28]->( 29 32 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u225(11){ d57(bb 0 insn -1) }u226(13){ d65(bb 0 insn -1) }u227(25){ d158(bb 0 insn -1) }u228(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(30)
3, 18, 31, 45, 57, 64, 65, 71, 133, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827
;; rd  gen 	(1)
132
;; rd  kill	(32)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; rd  out 	(30)
3, 18, 31, 45, 57, 64, 65, 71, 132, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 205
;;      reg 147 { d787(bb 27 insn 199) }
;;   UD chains for insn luid 1 uid 206
;;      reg 24 { d132(bb 28 insn 205) }

( 28 )->[29]->( 31 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u231(11){ d57(bb 0 insn -1) }u232(13){ d65(bb 0 insn -1) }u233(25){ d158(bb 0 insn -1) }u234(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 193 195 196 209 210 211 212 213 214
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 193 195 196 209 210 211 212 213 214
;; live  kill	 14 [lr] 213 214
;; rd  in  	(30)
3, 18, 31, 45, 57, 64, 65, 71, 132, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827
;; rd  gen 	(11)
7, 140, 828, 830, 831, 841, 842, 843, 844, 845, 848
;; rd  kill	(62)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 66, 67, 68, 69, 70, 71, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 828, 829, 830, 831, 841, 842, 843, 844
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; rd  out 	(38)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 830, 831, 841, 842, 843, 844, 845, 848
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 208
;;      reg 134 { d769(bb 27 insn 201) }
;;   UD chains for insn luid 1 uid 209
;;      reg 147 { d787(bb 27 insn 199) }
;;   UD chains for insn luid 2 uid 210
;;      reg 13 { d65(bb 0 insn -1) }
;;      reg 0 { d11(bb 29 insn 208) }
;;      reg 1 { d26(bb 29 insn 208) }
;;      reg 2 { d40(bb 29 insn 209) }
;;   UD chains for insn luid 3 uid 332
;;      reg 0 { d10(bb 29 insn 210) }
;;   UD chains for insn luid 4 uid 333
;;      reg 1 { d25(bb 29 insn 210) }
;;   UD chains for insn luid 6 uid 335
;;      reg 209 { d841(bb 29 insn 332) }
;;      reg 213 read/write { }
;;   UD chains for insn luid 7 uid 336
;;      reg 210 { d842(bb 29 insn 333) }
;;      reg 213 read/write { d846(bb 29 insn 335) }
;;   UD chains for insn luid 8 uid 213
;;      reg 147 { d787(bb 27 insn 199) }
;;   UD chains for insn luid 9 uid 214
;;      reg 134 { d769(bb 27 insn 201) }
;;   UD chains for insn luid 10 uid 215
;;      reg 193 { d828(bb 29 insn 213) }
;;   UD chains for insn luid 11 uid 216
;;      reg 13 { d65(bb 0 insn -1) }
;;      reg 0 { d9(bb 29 insn 214) }
;;      reg 1 { d24(bb 29 insn 214) }
;;      reg 2 { d38(bb 29 insn 215) }
;;   UD chains for insn luid 12 uid 338
;;      reg 0 { d8(bb 29 insn 216) }
;;   UD chains for insn luid 13 uid 339
;;      reg 1 { d23(bb 29 insn 216) }
;;   UD chains for insn luid 15 uid 341
;;      reg 211 { d843(bb 29 insn 338) }
;;      reg 214 read/write { }
;;   UD chains for insn luid 16 uid 342
;;      reg 212 { d844(bb 29 insn 339) }
;;      reg 214 read/write { d849(bb 29 insn 341) }
;;   UD chains for insn luid 17 uid 343
;;      reg 214 { d849(bb 29 insn 341) d848(bb 29 insn 342) }
;;   UD chains for insn luid 18 uid 219
;;      reg 195 { d830(bb 29 insn 343) }
;;   UD chains for insn luid 20 uid 221
;;      reg 13 { d65(bb 0 insn -1) }
;;      reg 0 { d0(bb 29 insn 219) }
;;      reg 1 { d16(bb 29 insn 219) }
;;      reg 2 { d36(bb 29 insn 220) }
;;      reg 3 { d50(bb 29 insn 220) }
;;   UD chains for insn luid 21 uid 222
;;      reg 0 { d7(bb 29 insn 221) }
;;   UD chains for insn luid 22 uid 223
;;      reg 196 { d831(bb 29 insn 222) }
;;   UD chains for insn luid 23 uid 224
;;      reg 24 { d140(bb 29 insn 223) }

( 29 )->[30]->( 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u270(11){ d57(bb 0 insn -1) }u271(13){ d65(bb 0 insn -1) }u272(25){ d158(bb 0 insn -1) }u273(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152 213
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 195
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152 213
;; live  gen 	 195
;; live  kill	
;; rd  in  	(38)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 830, 831, 841, 842, 843, 844, 845, 848
;; rd  gen 	(1)
829
;; rd  kill	(2)
829, 830
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; rd  out 	(38)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 831, 841, 842, 843, 844, 845, 848
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }

( 29 30 )->[31]->( 34 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u274(11){ d57(bb 0 insn -1) }u275(13){ d65(bb 0 insn -1) }u276(25){ d158(bb 0 insn -1) }u277(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 195 213
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; live  gen 	 134
;; live  kill	
;; rd  in  	(39)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 848
;; rd  gen 	(1)
767
;; rd  kill	(3)
767, 768, 769
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; rd  out 	(39)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 767, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 848
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 228
;;      reg 195 { d830(bb 29 insn 343) d829(bb 30 insn 225) }
;;      reg 213 { d845(bb 29 insn 336) }

( 28 )->[32]->( 34 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u280(11){ d57(bb 0 insn -1) }u281(13){ d65(bb 0 insn -1) }u282(25){ d158(bb 0 insn -1) }u283(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 197
;; live  kill	 14 [lr]
;; rd  in  	(30)
3, 18, 31, 45, 57, 64, 65, 71, 132, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827
;; rd  gen 	(3)
5, 138, 832
;; rd  kill	(55)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 66, 67, 68, 69, 70, 71, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 832
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; rd  out 	(30)
5, 18, 31, 45, 57, 64, 65, 138, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 832
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 233
;;      reg 134 { d769(bb 27 insn 201) }
;;   UD chains for insn luid 2 uid 235
;;      reg 13 { d65(bb 0 insn -1) }
;;      reg 0 { d6(bb 32 insn 233) }
;;      reg 1 { d21(bb 32 insn 233) }
;;      reg 2 { d34(bb 32 insn 234) }
;;      reg 3 { d48(bb 32 insn 234) }
;;   UD chains for insn luid 3 uid 236
;;      reg 0 { d5(bb 32 insn 235) }
;;   UD chains for insn luid 4 uid 237
;;      reg 197 { d832(bb 32 insn 236) }
;;   UD chains for insn luid 5 uid 238
;;      reg 24 { d138(bb 32 insn 237) }

( 32 )->[33]->( 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u293(11){ d57(bb 0 insn -1) }u294(13){ d65(bb 0 insn -1) }u295(25){ d158(bb 0 insn -1) }u296(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 134
;; live  kill	
;; rd  in  	(30)
5, 18, 31, 45, 57, 64, 65, 138, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 832
;; rd  gen 	(1)
768
;; rd  kill	(3)
767, 768, 769
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; rd  out 	(30)
5, 18, 31, 45, 57, 64, 65, 138, 158, 159, 766, 768, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 832
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }

( 27 32 33 31 )->[34]->( 35 40 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u297(11){ d57(bb 0 insn -1) }u298(13){ d65(bb 0 insn -1) }u299(25){ d158(bb 0 insn -1) }u300(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 24 [cc] 198 199 215
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  gen 	 24 [cc] 198 199 215
;; live  kill	
;; rd  in  	(47)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 133, 138, 140, 158, 159, 766, 767, 768, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 841, 842, 843, 844, 845, 848
;; rd  gen 	(4)
137, 833, 834, 851
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 833, 834, 851
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 152 215
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 152 215
;; rd  out 	(48)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 137, 158, 159, 766, 767, 768, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 243
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;   UD chains for insn luid 1 uid 244
;;      reg 151 { d793(bb 2 insn 4) d792(bb 6 insn 50) }
;;   UD chains for insn luid 2 uid 245
;;      reg 198 { d833(bb 34 insn 243) }
;;      reg 199 { d834(bb 34 insn 244) }
;;   UD chains for insn luid 3 uid 345
;;      reg 150 { d791(bb 2 insn 3) d790(bb 6 insn 49) }
;;   UD chains for insn luid 4 uid 246
;;      reg 24 { d137(bb 34 insn 245) }

( 34 )->[35]->( 38 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u307(11){ d57(bb 0 insn -1) }u308(13){ d65(bb 0 insn -1) }u309(25){ d158(bb 0 insn -1) }u310(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 152 215
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 215
;; lr  def 	 24 [cc] 144
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 152 215
;; live  gen 	 24 [cc] 144
;; live  kill	 24 [cc]
;; rd  in  	(48)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 137, 158, 159, 766, 767, 768, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(2)
136, 784
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 783, 784, 785
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; rd  out 	(49)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 136, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 249
;;      reg 134 { d769(bb 27 insn 201) d768(bb 33 insn 239) d767(bb 31 insn 228) }
;;      reg 215 { d851(bb 34 insn 345) }
;;   UD chains for insn luid 1 uid 250
;;      reg 144 { d784(bb 35 insn 249) }
;;   UD chains for insn luid 2 uid 251
;;      reg 24 { d136(bb 35 insn 250) }

( 35 )->[36]->( 37 41 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u315(11){ d57(bb 0 insn -1) }u316(13){ d65(bb 0 insn -1) }u317(25){ d158(bb 0 insn -1) }u318(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 205
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  gen 	 24 [cc] 205
;; live  kill	
;; rd  in  	(49)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 136, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(2)
134, 838
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 838, 839
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; rd  out 	(50)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 134, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 270
;;      reg 144 { d784(bb 35 insn 249) }
;;   UD chains for insn luid 1 uid 271
;;      reg 144 { d784(bb 35 insn 249) }
;;      reg 205 { d839(bb 36 insn 270) }
;;   UD chains for insn luid 2 uid 272
;;      reg 205 { d838(bb 36 insn 271) }
;;   UD chains for insn luid 3 uid 273
;;      reg 24 { d134(bb 36 insn 272) }

( 36 )->[37]->( 39 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(11){ d57(bb 0 insn -1) }u-1(13){ d65(bb 0 insn -1) }u-1(25){ d158(bb 0 insn -1) }u-1(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  gen 	
;; live  kill	
;; rd  in  	(50)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 134, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; rd  out 	(50)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 134, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }

( 35 )->[38]->( 41 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u324(11){ d57(bb 0 insn -1) }u325(13){ d65(bb 0 insn -1) }u326(25){ d158(bb 0 insn -1) }u327(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 149
;; lr  def 	 24 [cc] 144 202 203 204
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  gen 	 144 202 203 204
;; live  kill	 24 [cc]
;; rd  in  	(49)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 136, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(4)
785, 835, 836, 837
;; rd  kill	(38)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 783, 784, 785, 835, 836, 837
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; rd  out 	(51)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 158, 159, 766, 767, 768, 769, 785, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 260
;;      reg 149 { d788(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 263
;;      reg 202 { d835(bb 38 insn 260) }
;;      reg 204 { d837(bb 38 insn 262) }
;;   eq_note reg 202 { }
;;   UD chains for insn luid 3 uid 264
;;      reg 149 { d788(bb 2 insn 2) }
;;      reg 203 { d836(bb 38 insn 263) }
;;   UD chains for insn luid 4 uid 265
;;      reg 144 { d784(bb 35 insn 249) }

( 37 )->[39]->( 41 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u335(11){ d57(bb 0 insn -1) }u336(13){ d65(bb 0 insn -1) }u337(25){ d158(bb 0 insn -1) }u338(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 152
;; lr  def 	 24 [cc] 146 206
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  gen 	 24 [cc] 146 206
;; live  kill	
;; rd  in  	(50)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 134, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(3)
126, 786, 840
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 786, 840
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; rd  out 	(52)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 126, 158, 159, 766, 767, 768, 769, 784, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 840, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 275
;;      reg 152 { d794(bb 2 insn 5) }
;;   UD chains for insn luid 1 uid 353
;;      reg 206 { d840(bb 39 insn 275) }
;;   UD chains for insn luid 2 uid 354
;;      reg 24 { d126(bb 39 insn 353) }
;;   UD chains for insn luid 3 uid 287
;;      reg 146 { d786(bb 39 insn 354) }
;;      reg 149 { d788(bb 2 insn 2) }

( 34 )->[40]->( 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u344(11){ d57(bb 0 insn -1) }u345(13){ d65(bb 0 insn -1) }u346(25){ d158(bb 0 insn -1) }u347(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 215
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 215
;; lr  def 	 24 [cc] 144
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 215
;; live  gen 	 144
;; live  kill	 24 [cc]
;; rd  in  	(48)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 137, 158, 159, 766, 767, 768, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(1)
783
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 783, 784, 785
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; rd  out 	(48)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 158, 159, 766, 767, 768, 769, 783, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 293
;;      reg 134 { d769(bb 27 insn 201) d768(bb 33 insn 239) d767(bb 31 insn 228) }
;;      reg 215 { d851(bb 34 insn 345) }

( 36 40 38 39 )->[41]->( 42 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u350(11){ d57(bb 0 insn -1) }u351(13){ d65(bb 0 insn -1) }u352(25){ d158(bb 0 insn -1) }u353(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 149
;; lr  def 	 138
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  gen 	 138
;; live  kill	
;; rd  in  	(58)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 126, 134, 158, 159, 766, 767, 768, 769, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(1)
771
;; rd  kill	(3)
771, 772, 773
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; rd  out 	(59)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 126, 134, 158, 159, 766, 767, 768, 769, 771, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 296
;;      reg 144 { d785(bb 38 insn 265) d784(bb 35 insn 249) d783(bb 40 insn 293) }
;;      reg 149 { d788(bb 2 insn 2) }

( 41 26 )->[42]->( 1 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u356(11){ d57(bb 0 insn -1) }u357(13){ d65(bb 0 insn -1) }u358(25){ d158(bb 0 insn -1) }u359(26){ d159(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(96)
3, 4, 5, 7, 18, 19, 31, 32, 45, 46, 57, 64, 65, 71, 126, 134, 145, 147, 158, 159, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(1)
2
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(93)
2, 18, 19, 31, 32, 45, 46, 57, 64, 65, 71, 126, 134, 145, 147, 158, 159, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }
;;   reg 26 { d159(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 304
;;      reg 138 { d773(bb 24 insn 175) d772(bb 25 insn 182) d771(bb 41 insn 297) }
;;   UD chains for insn luid 1 uid 310
;;      reg 0 { d2(bb 42 insn 304) }

( 23 42 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u362(0){ d12(bb 23 insn 170) d2(bb 42 insn 304) }u363(11){ d57(bb 0 insn -1) }u364(13){ d65(bb 0 insn -1) }u365(14){ d71(bb 0 insn -1) }u366(25){ d158(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(98)
2, 12, 18, 19, 30, 31, 32, 44, 45, 46, 56, 57, 64, 65, 71, 126, 134, 145, 146, 147, 158, 159, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(98)
2, 12, 18, 19, 30, 31, 32, 44, 45, 46, 56, 57, 64, 65, 71, 126, 134, 145, 146, 147, 158, 159, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851
;;  UD chains for artificial uses
;;   reg 0 { d12(bb 23 insn 170) d2(bb 42 insn 304) }
;;   reg 11 { d57(bb 0 insn -1) }
;;   reg 13 { d65(bb 0 insn -1) }
;;   reg 14 { d71(bb 0 insn -1) }
;;   reg 25 { d158(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 11 to worklist
  Adding insn 24 to worklist
  Adding insn 40 to worklist
  Adding insn 46 to worklist
  Adding insn 58 to worklist
  Adding insn 64 to worklist
  Adding insn 355 to worklist
  Adding insn 92 to worklist
  Adding insn 98 to worklist
  Adding insn 357 to worklist
  Adding insn 359 to worklist
  Adding insn 123 to worklist
  Adding insn 361 to worklist
  Adding insn 147 to worklist
  Adding insn 152 to worklist
  Adding insn 364 to worklist
  Adding insn 159 to worklist
  Adding insn 163 to worklist
  Adding insn 170 to worklist
  Adding insn 366 to worklist
  Adding insn 368 to worklist
  Adding insn 188 to worklist
  Adding insn 203 to worklist
  Adding insn 196 to worklist
  Adding insn 206 to worklist
  Adding insn 224 to worklist
  Adding insn 340 to worklist
  Adding insn 334 to worklist
  Adding insn 370 to worklist
  Adding insn 238 to worklist
  Adding insn 246 to worklist
  Adding insn 251 to worklist
  Adding insn 273 to worklist
  Adding insn 374 to worklist
  Adding insn 376 to worklist
  Adding insn 264 to worklist
  Adding insn 378 to worklist
  Adding insn 287 to worklist
  Adding insn 296 to worklist
  Adding insn 310 to worklist
Finished finding needed instructions:
  Adding insn 304 to worklist
Processing use of (reg 138 [ exceptions ]) in insn 304:
  Adding insn 175 to worklist
  Adding insn 182 to worklist
  Adding insn 297 to worklist
Processing use of (reg 0 r0) in insn 310:
Processing use of (reg 144 [ m_sig ]) in insn 296:
  Adding insn 265 to worklist
  Adding insn 249 to worklist
  Adding insn 293 to worklist
Processing use of (reg 149 [ vdd ]) in insn 296:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 134 [ m_sig.774 ]) in insn 293:
  Adding insn 201 to worklist
  Adding insn 239 to worklist
  Adding insn 228 to worklist
Processing use of (reg 215 [ <variable>.significand ]) in insn 293:
  Adding insn 345 to worklist
Processing use of (reg 150 [ vdn ]) in insn 345:
  Adding insn 3 to worklist
  Adding insn 49 to worklist
Processing use of (reg 151 [ vdm ]) in insn 49:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 195 [+4 ]) in insn 228:
  Adding insn 343 to worklist
  Adding insn 225 to worklist
Processing use of (reg 213 [ D.5921 ]) in insn 228:
  Adding insn 336 to worklist
Processing use of (reg 210 [+4 ]) in insn 336:
  Adding insn 333 to worklist
Processing use of (reg 213 [ D.5921 ]) in insn 336:
  Adding insn 335 to worklist
Processing use of (reg 209) in insn 335:
  Adding insn 332 to worklist
Processing use of (reg 213 [ D.5921 ]) in insn 335:
Processing use of (reg 0 r0) in insn 332:
  Adding insn 210 to worklist
Processing use of (reg 13 sp) in insn 210:
Processing use of (reg 0 r0) in insn 210:
  Adding insn 208 to worklist
Processing use of (reg 1 r1) in insn 210:
Processing use of (reg 2 r2) in insn 210:
  Adding insn 209 to worklist
Processing use of (reg 147 [ D.4751 ]) in insn 209:
  Adding insn 199 to worklist
Processing use of (reg 190 [ <variable>.exponent ]) in insn 199:
  Adding insn 197 to worklist
Processing use of (reg 191 [ <variable>.exponent ]) in insn 199:
  Adding insn 198 to worklist
Processing use of (reg 151 [ vdm ]) in insn 198:
  Adding insn 50 to worklist
Processing use of (reg 133 [ vdn.778 ]) in insn 50:
  Adding insn 48 to worklist
Processing use of (reg 150 [ vdn ]) in insn 48:
Processing use of (reg 150 [ vdn ]) in insn 197:
Processing use of (reg 134 [ m_sig.774 ]) in insn 208:
Processing use of (reg 1 r1) in insn 333:
Processing use of (reg 214 [+4 ]) in insn 343:
  Adding insn 341 to worklist
  Adding insn 342 to worklist
Processing use of (reg 212 [+4 ]) in insn 342:
  Adding insn 339 to worklist
Processing use of (reg 214 [+4 ]) in insn 342:
Processing use of (reg 1 r1) in insn 339:
  Adding insn 216 to worklist
Processing use of (reg 13 sp) in insn 216:
Processing use of (reg 0 r0) in insn 216:
  Adding insn 214 to worklist
Processing use of (reg 1 r1) in insn 216:
Processing use of (reg 2 r2) in insn 216:
  Adding insn 215 to worklist
Processing use of (reg 193) in insn 215:
  Adding insn 213 to worklist
Processing use of (reg 147 [ D.4751 ]) in insn 213:
Processing use of (reg 134 [ m_sig.774 ]) in insn 214:
Processing use of (reg 211) in insn 341:
  Adding insn 338 to worklist
Processing use of (reg 214 [+4 ]) in insn 341:
Processing use of (reg 0 r0) in insn 338:
Processing use of (reg 151 [ vdm ]) in insn 201:
Processing use of (reg 134 [ m_sig.774 ]) in insn 249:
Processing use of (reg 215 [ <variable>.significand ]) in insn 249:
Processing use of (reg 144 [ m_sig ]) in insn 265:
Processing use of (subreg (reg 146 [ iftmp.149 ]) 0) in insn 287:
  Adding insn 354 to worklist
Processing use of (reg 149 [ vdd ]) in insn 287:
Processing use of (reg 24 cc) in insn 354:
  Adding insn 353 to worklist
Processing use of (reg 206) in insn 353:
  Adding insn 275 to worklist
Processing use of (reg 152 [ fpscr ]) in insn 275:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 149 [ vdd ]) in insn 264:
Processing use of (subreg (reg 203) 0) in insn 264:
  Adding insn 263 to worklist
Processing use of (reg 202 [ <variable>.sign ]) in insn 263:
  Adding insn 260 to worklist
Processing use of (reg 204) in insn 263:
  Adding insn 262 to worklist
Processing use of (reg 149 [ vdd ]) in insn 260:
Processing use of (reg 24 cc) in insn 273:
  Adding insn 272 to worklist
Processing use of (reg 205 [ m_sig ]) in insn 272:
  Adding insn 271 to worklist
Processing use of (subreg (reg 144 [ m_sig ]) 4) in insn 271:
Processing use of (reg 205 [ m_sig ]) in insn 271:
  Adding insn 270 to worklist
Processing use of (subreg (reg 144 [ m_sig ]) 0) in insn 270:
Processing use of (reg 24 cc) in insn 251:
  Adding insn 250 to worklist
Processing use of (subreg (reg 144 [ m_sig ]) 4) in insn 250:
Processing use of (reg 24 cc) in insn 246:
  Adding insn 245 to worklist
Processing use of (reg 198 [ <variable>.sign ]) in insn 245:
  Adding insn 243 to worklist
Processing use of (reg 199 [ <variable>.sign ]) in insn 245:
  Adding insn 244 to worklist
Processing use of (reg 151 [ vdm ]) in insn 244:
Processing use of (reg 150 [ vdn ]) in insn 243:
Processing use of (reg 24 cc) in insn 238:
  Adding insn 237 to worklist
Processing use of (reg 197) in insn 237:
  Adding insn 236 to worklist
Processing use of (reg 0 r0) in insn 236:
  Adding insn 235 to worklist
Processing use of (reg 13 sp) in insn 235:
Processing use of (reg 0 r0) in insn 235:
  Adding insn 233 to worklist
Processing use of (reg 1 r1) in insn 235:
Processing use of (reg 2 r2) in insn 235:
  Adding insn 234 to worklist
Processing use of (reg 3 r3) in insn 235:
Processing use of (reg 134 [ m_sig.774 ]) in insn 233:
Processing use of (reg 24 cc) in insn 224:
  Adding insn 223 to worklist
Processing use of (reg 196) in insn 223:
  Adding insn 222 to worklist
Processing use of (reg 0 r0) in insn 222:
  Adding insn 221 to worklist
Processing use of (reg 13 sp) in insn 221:
Processing use of (reg 0 r0) in insn 221:
  Adding insn 219 to worklist
Processing use of (reg 1 r1) in insn 221:
Processing use of (reg 2 r2) in insn 221:
  Adding insn 220 to worklist
Processing use of (reg 3 r3) in insn 221:
Processing use of (reg 195 [+4 ]) in insn 219:
Processing use of (reg 24 cc) in insn 206:
  Adding insn 205 to worklist
Processing use of (reg 147 [ D.4751 ]) in insn 205:
Processing use of (reg 0 r0) in insn 196:
  Adding insn 195 to worklist
Processing use of (reg 1 r1) in insn 196:
Processing use of (reg 2 r2) in insn 196:
Processing use of (reg 3 r3) in insn 196:
Processing use of (reg 149 [ vdd ]) in insn 196:
Processing use of (reg 149 [ vdd ]) in insn 196:
Processing use of (reg 149 [ vdd ]) in insn 196:
Processing use of (reg 149 [ vdd ]) in insn 196:
Processing use of (reg 150 [ vdn ]) in insn 195:
Processing use of (reg 150 [ vdn ]) in insn 195:
Processing use of (reg 150 [ vdn ]) in insn 195:
Processing use of (reg 150 [ vdn ]) in insn 195:
Processing use of (reg 24 cc) in insn 203:
  Adding insn 202 to worklist
Processing use of (reg 147 [ D.4751 ]) in insn 202:
Processing use of (reg 0 r0) in insn 188:
  Adding insn 187 to worklist
Processing use of (reg 1 r1) in insn 188:
Processing use of (reg 2 r2) in insn 188:
Processing use of (reg 3 r3) in insn 188:
Processing use of (reg 149 [ vdd ]) in insn 188:
Processing use of (reg 149 [ vdd ]) in insn 188:
Processing use of (reg 149 [ vdd ]) in insn 188:
Processing use of (reg 149 [ vdd ]) in insn 188:
Processing use of (reg 150 [ vdn ]) in insn 187:
  Adding insn 176 to worklist
Processing use of (reg 150 [ vdn ]) in insn 187:
Processing use of (reg 150 [ vdn ]) in insn 187:
Processing use of (reg 150 [ vdn ]) in insn 187:
Processing use of (reg 13 sp) in insn 170:
Processing use of (reg 0 r0) in insn 170:
  Adding insn 166 to worklist
Processing use of (reg 1 r1) in insn 170:
  Adding insn 167 to worklist
Processing use of (reg 2 r2) in insn 170:
  Adding insn 168 to worklist
Processing use of (reg 3 r3) in insn 170:
  Adding insn 169 to worklist
Processing use of (reg 152 [ fpscr ]) in insn 169:
Processing use of (reg 151 [ vdm ]) in insn 168:
Processing use of (reg 150 [ vdn ]) in insn 167:
Processing use of (reg 149 [ vdd ]) in insn 166:
Processing use of (reg 24 cc) in insn 163:
  Adding insn 162 to worklist
Processing use of (reg 184) in insn 162:
  Adding insn 161 to worklist
Processing use of (reg 140 [ tm ]) in insn 161:
  Adding insn 100 to worklist
  Adding insn 125 to worklist
  Adding insn 350 to worklist
  Adding insn 352 to worklist
Processing use of (reg 24 cc) in insn 352:
  Adding insn 351 to worklist
Processing use of (reg 179 [ <variable>.significand ]) in insn 351:
  Adding insn 132 to worklist
Processing use of (reg 179 [ <variable>.significand ]) in insn 132:
  Adding insn 130 to worklist
Processing use of (reg 180 [ <variable>.significand+4 ]) in insn 132:
  Adding insn 131 to worklist
Processing use of (reg 151 [ vdm ]) in insn 131:
Processing use of (reg 151 [ vdm ]) in insn 130:
Processing use of (reg 24 cc) in insn 350:
  Adding insn 349 to worklist
Processing use of (reg 178) in insn 349:
  Adding insn 108 to worklist
Processing use of (subreg (reg 176) 4) in insn 108:
  Adding insn 106 to worklist
Processing use of (reg 178) in insn 108:
  Adding insn 107 to worklist
Processing use of (subreg (reg 176) 0) in insn 107:
Processing use of (reg 142 [ D.5903 ]) in insn 106:
  Adding insn 94 to worklist
Processing use of (reg 177) in insn 106:
  Adding insn 105 to worklist
Processing use of (reg 151 [ vdm ]) in insn 94:
Processing use of (reg 24 cc) in insn 159:
  Adding insn 158 to worklist
Processing use of (reg 137 [ D.5913 ]) in insn 158:
  Adding insn 144 to worklist
Processing use of (reg 139 [ tn ]) in insn 144:
  Adding insn 66 to worklist
  Adding insn 348 to worklist
Processing use of (reg 24 cc) in insn 348:
  Adding insn 347 to worklist
Processing use of (reg 170) in insn 347:
  Adding insn 74 to worklist
Processing use of (subreg (reg 168) 4) in insn 74:
  Adding insn 72 to worklist
Processing use of (reg 170) in insn 74:
  Adding insn 73 to worklist
Processing use of (subreg (reg 168) 0) in insn 73:
Processing use of (reg 141 [ D.5906 ]) in insn 72:
  Adding insn 60 to worklist
Processing use of (reg 169) in insn 72:
  Adding insn 71 to worklist
Processing use of (reg 150 [ vdn ]) in insn 60:
Processing use of (reg 24 cc) in insn 152:
  Adding insn 151 to worklist
Processing use of (reg 182 [ <variable>.sign ]) in insn 151:
  Adding insn 149 to worklist
Processing use of (reg 183 [ <variable>.sign ]) in insn 151:
  Adding insn 150 to worklist
Processing use of (reg 151 [ vdm ]) in insn 150:
Processing use of (reg 150 [ vdn ]) in insn 149:
Processing use of (reg 24 cc) in insn 147:
  Adding insn 146 to worklist
Processing use of (reg 181) in insn 146:
  Adding insn 145 to worklist
Processing use of (reg 137 [ D.5913 ]) in insn 145:
Processing use of (reg 140 [ tm ]) in insn 145:
Processing use of (reg 24 cc) in insn 123:
  Adding insn 122 to worklist
Processing use of (reg 143 [ D.5902 ]) in insn 122:
  Adding insn 86 to worklist
Processing use of (reg 151 [ vdm ]) in insn 86:
Processing use of (reg 24 cc) in insn 98:
  Adding insn 97 to worklist
Processing use of (reg 175 [ D.5903 ]) in insn 97:
  Adding insn 96 to worklist
Processing use of (subreg (reg 142 [ D.5903 ]) 4) in insn 96:
Processing use of (reg 175 [ D.5903 ]) in insn 96:
  Adding insn 95 to worklist
Processing use of (subreg (reg 142 [ D.5903 ]) 0) in insn 95:
Processing use of (reg 24 cc) in insn 92:
  Adding insn 91 to worklist
Processing use of (reg 173 [ D.5902 ]) in insn 91:
  Adding insn 89 to worklist
Processing use of (reg 174) in insn 91:
  Adding insn 90 to worklist
Processing use of (reg 171) in insn 90:
  Adding insn 88 to worklist
Processing use of (subreg (reg 172) 0) in insn 88:
  Adding insn 87 to worklist
Processing use of (subreg (reg 143 [ D.5902 ]) 0) in insn 89:
Processing use of (reg 24 cc) in insn 64:
  Adding insn 63 to worklist
Processing use of (reg 167 [ D.5906 ]) in insn 63:
  Adding insn 62 to worklist
Processing use of (subreg (reg 141 [ D.5906 ]) 4) in insn 62:
Processing use of (reg 167 [ D.5906 ]) in insn 62:
  Adding insn 61 to worklist
Processing use of (subreg (reg 141 [ D.5906 ]) 0) in insn 61:
Processing use of (reg 24 cc) in insn 58:
  Adding insn 57 to worklist
Processing use of (reg 165 [ <variable>.exponent ]) in insn 57:
  Adding insn 55 to worklist
Processing use of (reg 166) in insn 57:
  Adding insn 56 to worklist
Processing use of (reg 163) in insn 56:
  Adding insn 54 to worklist
Processing use of (subreg (reg 164) 0) in insn 54:
  Adding insn 53 to worklist
Processing use of (reg 150 [ vdn ]) in insn 55:
Processing use of (reg 24 cc) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 161 [ <variable>.exponent ]) in insn 45:
  Adding insn 43 to worklist
Processing use of (reg 162 [ <variable>.exponent ]) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 151 [ vdm ]) in insn 44:
Processing use of (reg 150 [ vdn ]) in insn 43:
Processing use of (reg 13 sp) in insn 40:
Processing use of (reg 0 r0) in insn 40:
  Adding insn 38 to worklist
Processing use of (reg 1 r1) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 24 cc) in insn 24:
  Adding insn 23 to worklist
Processing use of (reg 156 [ <variable>.significand+4 ]) in insn 23:
  Adding insn 22 to worklist
Processing use of (reg 151 [ vdm ]) in insn 22:
Processing use of (reg 24 cc) in insn 11:
  Adding insn 10 to worklist
Processing use of (reg 153 [ <variable>.significand+4 ]) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 150 [ vdn ]) in insn 9:


vfp_double_add

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,15u} r1={15d,11u} r2={14d,8u} r3={12d,6u} r11={1d,42u} r12={7d} r13={1d,48u} r14={6d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={32d,23u} r25={1d,42u} r26={1d,41u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,1u} r134={3d,5u} r137={1d,2u} r138={3d,1u} r139={2d,1u} r140={4d,2u} r141={1d,3u,1d} r142={1d,3u,1d} r143={1d,2u} r144={3d,5u} r146={1d,1u} r147={1d,4u} r149={1d,13u} r150={3d,18u} r151={2d,12u} r152={1d,2u} r153={1d,1u} r156={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={2d,2u} r168={1d,2u} r169={1d,1u} r170={2d,2u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={2d,2u} r176={1d,2u} r177={1d,1u} r178={2d,2u} r179={2d,2u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r190={1d,1u} r191={1d,1u} r193={1d,1u} r195={2d,2u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r202={1d,1u,1d} r203={1d,1u} r204={1d,1u} r205={2d,2u} r206={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={3d,3u} r214={3d,3u} r215={1d,2u} 
;;    total ref usage 1227{852d,372u,3e} in 168{162 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	
0[0,16] 1[16,15] 2[31,14] 3[45,12] 11[57,1] 12[58,7] 13[65,1] 14[66,6] 15[72,6] 16[78,6] 17[84,6] 18[90,6] 19[96,6] 20[102,6] 21[108,6] 22[114,6] 23[120,6] 24[126,32] 25[158,1] 26[159,1] 27[160,6] 28[166,6] 29[172,6] 30[178,6] 31[184,6] 32[190,6] 33[196,6] 34[202,6] 35[208,6] 36[214,6] 37[220,6] 38[226,6] 39[232,6] 40[238,6] 41[244,6] 42[250,6] 43[256,6] 44[262,6] 45[268,6] 46[274,6] 47[280,6] 48[286,6] 49[292,6] 50[298,6] 51[304,6] 52[310,6] 53[316,6] 54[322,6] 55[328,6] 56[334,6] 57[340,6] 58[346,6] 59[352,6] 60[358,6] 61[364,6] 62[370,6] 63[376,6] 64[382,6] 65[388,6] 66[394,6] 67[400,6] 68[406,6] 69[412,6] 70[418,6] 71[424,6] 72[430,6] 73[436,6] 74[442,6] 75[448,6] 76[454,6] 77[460,6] 78[466,6] 79[472,6] 80[478,6] 81[484,6] 82[490,6] 83[496,6] 84[502,6] 85[508,6] 86[514,6] 87[520,6] 88[526,6] 89[532,6] 90[538,6] 91[544,6] 92[550,6] 93[556,6] 94[562,6] 95[568,6] 96[574,6] 97[580,6] 98[586,6] 99[592,6] 100[598,6] 101[604,6] 102[610,6] 103[616,6] 104[622,6] 105[628,6] 106[634,6] 107[640,6] 108[646,6] 109[652,6] 110[658,6] 111[664,6] 112[670,6] 113[676,6] 114[682,6] 115[688,6] 116[694,6] 117[700,6] 118[706,6] 119[712,6] 120[718,6] 121[724,6] 122[730,6] 123[736,6] 124[742,6] 125[748,6] 126[754,6] 127[760,6] 133[766,1] 134[767,3] 137[770,1] 138[771,3] 139[774,2] 140[776,4] 141[780,1] 142[781,1] 143[782,1] 144[783,3] 146[786,1] 147[787,1] 149[788,1] 150[789,3] 151[792,2] 152[794,1] 153[795,1] 156[796,1] 161[797,1] 162[798,1] 163[799,1] 164[800,1] 165[801,1] 166[802,1] 167[803,2] 168[805,1] 169[806,1] 170[807,2] 171[809,1] 172[810,1] 173[811,1] 174[812,1] 175[813,2] 176[815,1] 177[816,1] 178[817,2] 179[819,2] 180[821,1] 181[822,1] 182[823,1] 183[824,1] 184[825,1] 190[826,1] 191[827,1] 193[828,1] 195[829,2] 196[831,1] 197[832,1] 198[833,1] 199[834,1] 202[835,1] 203[836,1] 204[837,1] 205[838,2] 206[840,1] 209[841,1] 210[842,1] 211[843,1] 212[844,1] 213[845,3] 214[848,3] 215[851,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 149 150 151 152 153
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 149 150 151 152 153
;; live  kill	
;; rd  in  	(10)
15, 30, 44, 56, 57, 64, 65, 71, 158, 159
;; rd  gen 	(6)
157, 788, 791, 793, 794, 795
;; rd  kill	(40)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 788, 789, 790, 791, 792, 793, 794, 795

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/vfp/vfpdouble.c:727 (set (reg/v/f:SI 149 [ vdd ])
        (reg:SI 0 r0 [ vdd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ vdd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:727 (set (reg/v/f:SI 150 [ vdn ])
        (reg:SI 1 r1 [ vdn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ vdn ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:727 (set (reg/v/f:SI 151 [ vdm ])
        (reg:SI 2 r2 [ vdm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ vdm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:727 (set (reg/v:SI 152 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:731 (set (reg:SI 153 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 150 [ vdn ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:731 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 153 [ <variable>.significand+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 153 [ <variable>.significand+4 ])
        (nil)))

(jump_insn 11 10 312 2 arch/arm/vfp/vfpdouble.c:731 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2100 [0x834])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(16)
15, 30, 44, 56, 57, 64, 65, 71, 157, 158, 159, 788, 791, 793, 794, 795


;; Succ edge  4 [21.0%] 
;; Succ edge  3 [79.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(11){ }u12(13){ }u13(25){ }u14(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 156
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 24 [cc] 156
;; live  kill	
;; rd  in  	(16)
15, 30, 44, 56, 57, 64, 65, 71, 157, 158, 159, 788, 791, 793, 794, 795
;; rd  gen 	(2)
156, 796
;; rd  kill	(33)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 796

;; Pred edge  2 [79.0%]  (fallthru)
(note 312 11 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 22 312 23 3 arch/arm/vfp/vfpdouble.c:732 (set (reg:SI 156 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 151 [ vdm ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 23 22 24 3 arch/arm/vfp/vfpdouble.c:732 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 156 [ <variable>.significand+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 156 [ <variable>.significand+4 ])
        (nil)))

(jump_insn 24 23 34 3 arch/arm/vfp/vfpdouble.c:732 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7900 [0x1edc])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(17)
15, 30, 44, 56, 57, 64, 65, 71, 156, 158, 159, 788, 791, 793, 794, 795, 796


;; Succ edge  4 [21.0%]  (fallthru)
;; Succ edge  5 [79.0%] 

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u18(11){ }u19(13){ }u20(25){ }u21(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(18)
15, 30, 44, 56, 57, 64, 65, 71, 156, 157, 158, 159, 788, 791, 793, 794, 795, 796
;; rd  gen 	(1)
14
;; rd  kill	(22)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 66, 67, 68, 69, 70, 71

;; Pred edge  3 [21.0%]  (fallthru)
;; Pred edge  2 [21.0%] 
(code_label 34 24 35 4 226 "" [1 uses])

(note 35 34 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 38 35 39 4 arch/arm/vfp/vfpdouble.c:733 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10c13140>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x10c13140>)
        (nil)))

(insn 39 38 40 4 arch/arm/vfp/vfpdouble.c:733 (set (reg:SI 1 r1)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(call_insn 40 39 41 4 arch/arm/vfp/vfpdouble.c:733 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(17)
14, 30, 44, 56, 57, 64, 65, 156, 157, 158, 159, 788, 791, 793, 794, 795, 796


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u25(11){ }u26(13){ }u27(25){ }u28(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 24 [cc] 161 162
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 24 [cc] 161 162
;; live  kill	
;; rd  in  	(19)
14, 15, 30, 44, 56, 57, 64, 65, 71, 156, 157, 158, 159, 788, 791, 793, 794, 795, 796
;; rd  gen 	(3)
154, 797, 798
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 797, 798

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [79.0%] 
(code_label 41 40 42 5 228 "" [1 uses])

(note 42 41 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 5 arch/arm/vfp/vfpdouble.c:743 (set (reg:SI 161 [ <variable>.exponent ])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 150 [ vdn ]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 44 43 45 5 arch/arm/vfp/vfpdouble.c:743 (set (reg:SI 162 [ <variable>.exponent ])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 151 [ vdm ]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 45 44 46 5 arch/arm/vfp/vfpdouble.c:743 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ <variable>.exponent ])
            (reg:SI 162 [ <variable>.exponent ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 162 [ <variable>.exponent ])
        (expr_list:REG_DEAD (reg:SI 161 [ <variable>.exponent ])
            (nil))))

(jump_insn 46 45 47 5 arch/arm/vfp/vfpdouble.c:743 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(20)
14, 15, 30, 44, 56, 57, 64, 65, 71, 154, 158, 159, 788, 791, 793, 794, 795, 796, 797, 798


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u34(11){ }u35(13){ }u36(25){ }u37(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 133 150 151
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 133 150 151
;; live  kill	
;; rd  in  	(20)
14, 15, 30, 44, 56, 57, 64, 65, 71, 154, 158, 159, 788, 791, 793, 794, 795, 796, 797, 798
;; rd  gen 	(3)
766, 790, 792
;; rd  kill	(6)
766, 789, 790, 791, 792, 793

;; Pred edge  5 [50.0%]  (fallthru)
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 6 arch/arm/vfp/vfpdouble.c:743 (set (reg/v/f:SI 133 [ vdn.778 ])
        (reg/v/f:SI 150 [ vdn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 150 [ vdn ])
        (nil)))

(insn 49 48 50 6 arch/arm/vfp/vfpdouble.c:745 (set (reg/v/f:SI 150 [ vdn ])
        (reg/v/f:SI 151 [ vdm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 151 [ vdm ])
        (nil)))

(insn 50 49 51 6 arch/arm/vfp/vfpdouble.c:746 (set (reg/v/f:SI 151 [ vdm ])
        (reg/v/f:SI 133 [ vdn.778 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 133 [ vdn.778 ])
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(21)
14, 15, 30, 44, 56, 57, 64, 65, 71, 154, 158, 159, 766, 788, 790, 792, 794, 795, 796, 797, 798


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u41(11){ }u42(13){ }u43(25){ }u44(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  def 	 24 [cc] 163 164 165 166
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 24 [cc] 163 164 165 166
;; live  kill	
;; rd  in  	(23)
14, 15, 30, 44, 56, 57, 64, 65, 71, 154, 158, 159, 766, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798
;; rd  gen 	(5)
153, 799, 800, 801, 802
;; rd  kill	(36)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 799, 800, 801, 802

;; Pred edge  5 [50.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 51 50 52 7 230 "" [1 uses])

(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 7 arch/arm/vfp/vfpdouble.c:753 (set (reg:SI 164)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 54 53 55 7 arch/arm/vfp/vfpdouble.c:753 (set (reg:HI 163)
        (subreg:HI (reg:SI 164) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 164)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 55 54 56 7 arch/arm/vfp/vfpdouble.c:753 (set (reg:SI 165 [ <variable>.exponent ])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 150 [ vdn ]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 56 55 57 7 arch/arm/vfp/vfpdouble.c:753 (set (reg:SI 166)
        (sign_extend:SI (reg:HI 163))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 163)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 57 56 58 7 arch/arm/vfp/vfpdouble.c:753 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 165 [ <variable>.exponent ])
            (reg:SI 166))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 166)
        (expr_list:REG_DEAD (reg:SI 165 [ <variable>.exponent ])
            (nil))))

(jump_insn 58 57 59 7 arch/arm/vfp/vfpdouble.c:753 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 191)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 7 -> ( 8 27)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(27)
14, 15, 30, 44, 56, 57, 64, 65, 71, 153, 158, 159, 766, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802


;; Succ edge  8 [28.0%]  (fallthru)
;; Succ edge  27 [72.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u51(11){ }u52(13){ }u53(25){ }u54(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150
;; lr  def 	 24 [cc] 141 167
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 24 [cc] 141 167
;; live  kill	
;; rd  in  	(27)
14, 15, 30, 44, 56, 57, 64, 65, 71, 153, 158, 159, 766, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802
;; rd  gen 	(3)
152, 780, 803
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 780, 803, 804

;; Pred edge  7 [28.0%]  (fallthru)
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 8 arch/arm/vfp/vfp.h:331 (set (reg:DI 141 [ D.5906 ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 150 [ vdn ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 61 60 62 8 arch/arm/vfp/vfp.h:331 (set (reg:SI 167 [ D.5906 ])
        (subreg:SI (reg:DI 141 [ D.5906 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 62 61 63 8 arch/arm/vfp/vfp.h:331 (set (reg:SI 167 [ D.5906 ])
        (ior:SI (reg:SI 167 [ D.5906 ])
            (subreg:SI (reg:DI 141 [ D.5906 ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 63 62 64 8 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 167 [ D.5906 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 167 [ D.5906 ])
        (nil)))

(jump_insn 64 63 65 8 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 149 150 151 152
;; rd  out 	(29)
14, 15, 30, 44, 56, 57, 64, 65, 71, 152, 158, 159, 766, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u61(11){ }u62(13){ }u63(25){ }u64(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 139
;; live  kill	
;; rd  in  	(29)
14, 15, 30, 44, 56, 57, 64, 65, 71, 152, 158, 159, 766, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803
;; rd  gen 	(1)
775
;; rd  kill	(2)
774, 775

;; Pred edge  8 [50.0%]  (fallthru)
(note 65 64 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 355 9 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 139 [ tn ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 355 66 356 9 (set (pc)
        (label_ref 84)) -1 (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; rd  out 	(30)
14, 15, 30, 44, 56, 57, 64, 65, 71, 152, 158, 159, 766, 775, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803


;; Succ edge  11 [100.0%] 

(barrier 356 355 69)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 139 168 169 170
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 149 150 151 152
;; live  gen 	 24 [cc] 139 168 169 170
;; live  kill	
;; rd  in  	(29)
14, 15, 30, 44, 56, 57, 64, 65, 71, 152, 158, 159, 766, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803
;; rd  gen 	(5)
129, 774, 805, 806, 807
;; rd  kill	(38)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 774, 775, 805, 806, 807, 808

;; Pred edge  8 [50.0%] 
(code_label 69 356 70 10 232 "" [1 uses])

(note 70 69 71 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 72 10 arch/arm/vfp/vfp.h:333 (set (reg:DI 169)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 72 71 73 10 arch/arm/vfp/vfp.h:333 (set (reg:DI 168)
        (and:DI (reg:DI 141 [ D.5906 ])
            (reg:DI 169))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 169)
        (expr_list:REG_DEAD (reg:DI 141 [ D.5906 ])
            (expr_list:REG_EQUAL (and:DI (reg:DI 141 [ D.5906 ])
                    (const_int 2305843009213693952 [0x2000000000000000]))
                (nil)))))

(insn 73 72 74 10 arch/arm/vfp/vfp.h:333 (set (reg:SI 170)
        (subreg:SI (reg:DI 168) 0)) 167 {*arm_movsi_insn} (nil))

(insn 74 73 347 10 arch/arm/vfp/vfp.h:333 (set (reg:SI 170)
        (ior:SI (reg:SI 170)
            (subreg:SI (reg:DI 168) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 168)
        (nil)))

(insn 347 74 348 10 arch/arm/vfp/vfp.h:336 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 170)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 170)
        (nil)))

(insn 348 347 84 10 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 139 [ tn ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 16 [0x10])
            (const_int 48 [0x30]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; rd  out 	(33)
14, 15, 30, 44, 56, 57, 64, 65, 71, 129, 158, 159, 766, 774, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u77(11){ }u78(13){ }u79(25){ }u80(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 143 171 172 173 174
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 24 [cc] 143 171 172 173 174
;; live  kill	
;; rd  in  	(35)
14, 15, 30, 44, 56, 57, 64, 65, 71, 129, 152, 158, 159, 766, 774, 775, 780, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807
;; rd  gen 	(6)
151, 782, 809, 810, 811, 812
;; rd  kill	(37)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 782, 809, 810, 811, 812

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 84 348 85 11 233 "" [1 uses])

(note 85 84 86 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 87 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 143 [ D.5902 ])
        (zero_extend:SI (mem/s/j:HI (reg/v/f:SI 151 [ vdm ]) [0 <variable>.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 87 86 88 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 172)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 88 87 89 11 arch/arm/vfp/vfp.h:330 (set (reg:HI 171)
        (subreg:HI (reg:SI 172) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 172)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 89 88 90 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 173 [ D.5902 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 143 [ D.5902 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 90 89 91 11 arch/arm/vfp/vfp.h:330 (set (reg:SI 174)
        (sign_extend:SI (reg:HI 171))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 171)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 91 90 92 11 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 173 [ D.5902 ])
            (reg:SI 174))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 174)
        (expr_list:REG_DEAD (reg:SI 173 [ D.5902 ])
            (nil))))

(jump_insn 92 91 93 11 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 11 -> ( 12 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 143 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 143 149 150 151 152
;; rd  out 	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 151, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812


;; Succ edge  12 [28.0%]  (fallthru)
;; Succ edge  15 [72.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u88(11){ }u89(13){ }u90(25){ }u91(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 142 175
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 24 [cc] 142 175
;; live  kill	
;; rd  in  	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 151, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;; rd  gen 	(3)
150, 781, 813
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 781, 813, 814

;; Pred edge  11 [28.0%]  (fallthru)
(note 93 92 94 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 12 arch/arm/vfp/vfp.h:331 (set (reg:DI 142 [ D.5903 ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 151 [ vdm ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 95 94 96 12 arch/arm/vfp/vfp.h:331 (set (reg:SI 175 [ D.5903 ])
        (subreg:SI (reg:DI 142 [ D.5903 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 96 95 97 12 arch/arm/vfp/vfp.h:331 (set (reg:SI 175 [ D.5903 ])
        (ior:SI (reg:SI 175 [ D.5903 ])
            (subreg:SI (reg:DI 142 [ D.5903 ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 97 96 98 12 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 175 [ D.5903 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 175 [ D.5903 ])
        (nil)))

(jump_insn 98 97 99 12 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 142 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 142 149 150 151 152
;; rd  out 	(41)
14, 15, 30, 44, 56, 57, 64, 65, 71, 150, 158, 159, 766, 774, 775, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813


;; Succ edge  13 [50.0%]  (fallthru)
;; Succ edge  14 [50.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u98(11){ }u99(13){ }u100(25){ }u101(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 140
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 140
;; live  kill	
;; rd  in  	(41)
14, 15, 30, 44, 56, 57, 64, 65, 71, 150, 158, 159, 766, 774, 775, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813
;; rd  gen 	(1)
779
;; rd  kill	(4)
776, 777, 778, 779

;; Pred edge  12 [50.0%]  (fallthru)
(note 99 98 100 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 100 99 357 13 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 140 [ tm ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 357 100 358 13 (set (pc)
        (label_ref 142)) -1 (nil))
;; End of basic block 13 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; rd  out 	(42)
14, 15, 30, 44, 56, 57, 64, 65, 71, 150, 158, 159, 766, 774, 775, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813


;; Succ edge  18 [100.0%] 

(barrier 358 357 103)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u102(11){ }u103(13){ }u104(25){ }u105(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 142 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc] 140 176 177 178
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 142 149 150 151 152
;; live  gen 	 24 [cc] 140 176 177 178
;; live  kill	
;; rd  in  	(41)
14, 15, 30, 44, 56, 57, 64, 65, 71, 150, 158, 159, 766, 774, 775, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813
;; rd  gen 	(5)
128, 777, 815, 816, 817
;; rd  kill	(40)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 776, 777, 778, 779, 815, 816, 817, 818

;; Pred edge  12 [50.0%] 
(code_label 103 358 104 14 236 "" [1 uses])

(note 104 103 105 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 105 104 106 14 arch/arm/vfp/vfp.h:333 (set (reg:DI 177)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 106 105 107 14 arch/arm/vfp/vfp.h:333 (set (reg:DI 176)
        (and:DI (reg:DI 142 [ D.5903 ])
            (reg:DI 177))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 177)
        (expr_list:REG_DEAD (reg:DI 142 [ D.5903 ])
            (expr_list:REG_EQUAL (and:DI (reg:DI 142 [ D.5903 ])
                    (const_int 2305843009213693952 [0x2000000000000000]))
                (nil)))))

(insn 107 106 108 14 arch/arm/vfp/vfp.h:333 (set (reg:SI 178)
        (subreg:SI (reg:DI 176) 0)) 167 {*arm_movsi_insn} (nil))

(insn 108 107 349 14 arch/arm/vfp/vfp.h:333 (set (reg:SI 178)
        (ior:SI (reg:SI 178)
            (subreg:SI (reg:DI 176) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 176)
        (nil)))

(insn 349 108 350 14 arch/arm/vfp/vfp.h:336 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 178)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 178)
        (nil)))

(insn 350 349 359 14 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 140 [ tm ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 16 [0x10])
            (const_int 48 [0x30]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 359 350 360 14 (set (pc)
        (label_ref 142)) -1 (nil))
;; End of basic block 14 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; rd  out 	(45)
14, 15, 30, 44, 56, 57, 64, 65, 71, 128, 158, 159, 766, 774, 775, 777, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817


;; Succ edge  18 [100.0%] 

(barrier 360 359 120)

;; Start of basic block ( 11) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u114(11){ }u115(13){ }u116(25){ }u117(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 143 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 143 149 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 151, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;; rd  gen 	(1)
149
;; rd  kill	(32)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157

;; Pred edge  11 [72.0%] 
(code_label 120 360 121 15 235 "" [1 uses])

(note 121 120 122 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 122 121 123 15 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 143 [ D.5902 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 143 [ D.5902 ])
        (nil)))

(jump_insn 123 122 124 15 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 15 -> ( 17 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; rd  out 	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 149, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812


;; Succ edge  17 [50.0%] 
;; Succ edge  16 [50.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u120(11){ }u121(13){ }u122(25){ }u123(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 140
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 140
;; live  kill	
;; rd  in  	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 149, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;; rd  gen 	(1)
778
;; rd  kill	(4)
776, 777, 778, 779

;; Pred edge  15 [50.0%]  (fallthru)
(note 124 123 125 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 125 124 361 16 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 140 [ tm ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 361 125 362 16 (set (pc)
        (label_ref 142)) -1 (nil))
;; End of basic block 16 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; rd  out 	(40)
14, 15, 30, 44, 56, 57, 64, 65, 71, 149, 158, 159, 766, 774, 775, 778, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812


;; Succ edge  18 [100.0%] 

(barrier 362 361 128)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u124(11){ }u125(13){ }u126(25){ }u127(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151
;; lr  def 	 24 [cc] 140 179 180
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 149 150 151 152
;; live  gen 	 24 [cc] 140 179 180
;; live  kill	
;; rd  in  	(39)
14, 15, 30, 44, 56, 57, 64, 65, 71, 149, 158, 159, 766, 774, 775, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812
;; rd  gen 	(4)
127, 776, 819, 821
;; rd  kill	(39)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 776, 777, 778, 779, 819, 820, 821

;; Pred edge  15 [50.0%] 
(code_label 128 362 129 17 239 "" [1 uses])

(note 129 128 130 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 130 129 131 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 179 [ <variable>.significand ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 151 [ vdm ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 131 130 132 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 180 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 151 [ vdm ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 132 131 351 17 arch/arm/vfp/vfp.h:338 (set (reg:SI 179 [ <variable>.significand ])
        (ior:SI (reg:SI 179 [ <variable>.significand ])
            (reg:SI 180 [ <variable>.significand+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 180 [ <variable>.significand+4 ])
        (nil)))

(insn 351 132 352 17 arch/arm/vfp/vfp.h:341 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 179 [ <variable>.significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 179 [ <variable>.significand ])
        (nil)))

(insn 352 351 142 17 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 140 [ tm ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 17 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; rd  out 	(42)
14, 15, 30, 44, 56, 57, 64, 65, 71, 127, 158, 159, 766, 774, 775, 776, 780, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 819, 821


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 17 14 13 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u134(11){ }u135(13){ }u136(25){ }u137(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140
;; lr  def 	 24 [cc] 137 181
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 139 140 149 150 151 152
;; live  gen 	 24 [cc] 137 181
;; live  kill	
;; rd  in  	(53)
14, 15, 30, 44, 56, 57, 64, 65, 71, 127, 128, 149, 150, 158, 159, 766, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821
;; rd  gen 	(3)
148, 770, 822
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 770, 822

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  16 [100.0%] 
(code_label 142 352 143 18 237 "" [3 uses])

(note 143 142 144 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 144 143 145 18 arch/arm/vfp/vfpdouble.c:693 (set (reg:SI 137 [ D.5913 ])
        (and:SI (reg/v:SI 139 [ tn ])
            (const_int 8 [0x8]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ tn ])
        (nil)))

(insn 145 144 146 18 arch/arm/vfp/vfpdouble.c:693 (set (reg:SI 181)
        (and:SI (reg/v:SI 140 [ tm ])
            (reg:SI 137 [ D.5913 ]))) 67 {*arm_andsi3_insn} (nil))

(insn 146 145 147 18 arch/arm/vfp/vfpdouble.c:693 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 181)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 181)
        (nil)))

(jump_insn 147 146 148 18 arch/arm/vfp/vfpdouble.c:693 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 156)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 18 -> ( 19 21)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 149 150 151 152
;; rd  out 	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 148, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u143(11){ }u144(13){ }u145(25){ }u146(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 24 [cc] 182 183
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151
;; live  gen 	 24 [cc] 182 183
;; live  kill	
;; rd  in  	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 148, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822
;; rd  gen 	(3)
147, 823, 824
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 823, 824

;; Pred edge  18 [50.0%]  (fallthru)
(note 148 147 149 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 149 148 150 19 arch/arm/vfp/vfpdouble.c:697 (set (reg:SI 182 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 150 [ vdn ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 150 149 151 19 arch/arm/vfp/vfpdouble.c:697 (set (reg:SI 183 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 151 [ vdm ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg/v/f:SI 151 [ vdm ])
        (nil)))

(insn 151 150 152 19 arch/arm/vfp/vfpdouble.c:697 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 182 [ <variable>.sign ])
            (reg:SI 183 [ <variable>.sign ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 183 [ <variable>.sign ])
        (expr_list:REG_DEAD (reg:SI 182 [ <variable>.sign ])
            (nil))))

(jump_insn 152 151 363 19 arch/arm/vfp/vfpdouble.c:697 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 173)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 19 -> ( 24 20)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; rd  out 	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824


;; Succ edge  24 [72.0%] 
;; Succ edge  20 [28.0%]  (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; live  gen 	
;; live  kill	
;; rd  in  	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  19 [28.0%]  (fallthru)
(note 363 152 364 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(jump_insn 364 363 365 20 (set (pc)
        (label_ref 180)) -1 (nil))
;; End of basic block 20 -> ( 25)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; rd  out 	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824


;; Succ edge  25 [100.0%] 

(barrier 365 364 156)

;; Start of basic block ( 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u152(11){ }u153(13){ }u154(25){ }u155(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 149 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 148, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822
;; rd  gen 	(1)
146
;; rd  kill	(32)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157

;; Pred edge  18 [50.0%] 
(code_label 156 365 157 21 241 "" [1 uses])

(note 157 156 158 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 158 157 159 21 arch/arm/vfp/vfpdouble.c:709 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 137 [ D.5913 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 137 [ D.5913 ])
        (nil)))

(jump_insn 159 158 160 21 arch/arm/vfp/vfpdouble.c:709 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 164)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 149 150 151 152
;; rd  out 	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 146, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822


;; Succ edge  22 [71.0%]  (fallthru)
;; Succ edge  23 [29.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u158(11){ }u159(13){ }u160(25){ }u161(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc] 184
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 140 149 150 151 152
;; live  gen 	 24 [cc] 184
;; live  kill	
;; rd  in  	(52)
14, 15, 30, 44, 56, 57, 64, 65, 71, 146, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822
;; rd  gen 	(2)
145, 825
;; rd  kill	(33)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 825

;; Pred edge  21 [71.0%]  (fallthru)
(note 160 159 161 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 161 160 162 22 arch/arm/vfp/vfpdouble.c:709 discrim 1 (set (reg:SI 184)
        (and:SI (reg/v:SI 140 [ tm ])
            (const_int 1 [0x1]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ tm ])
        (nil)))

(insn 162 161 163 22 arch/arm/vfp/vfpdouble.c:709 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 184)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 184)
        (nil)))

(jump_insn 163 162 164 22 arch/arm/vfp/vfpdouble.c:709 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 180)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 22 -> ( 25 23)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; rd  out 	(53)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 825


;; Succ edge  25 [50.0%] 
;; Succ edge  23 [50.0%]  (fallthru)

;; Start of basic block ( 21 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u165(11){ }u166(13){ }u167(25){ }u168(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; rd  in  	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 146, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 825
;; rd  gen 	(1)
12
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15

;; Pred edge  21 [29.0%] 
;; Pred edge  22 [50.0%]  (fallthru)
(code_label 164 163 165 23 244 "" [1 uses])

(note 165 164 166 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 166 165 167 23 arch/arm/vfp/vfpdouble.c:718 (set (reg:SI 0 r0)
        (reg/v/f:SI 149 [ vdd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 149 [ vdd ])
        (nil)))

(insn 167 166 168 23 arch/arm/vfp/vfpdouble.c:718 (set (reg:SI 1 r1)
        (reg/v/f:SI 150 [ vdn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 150 [ vdn ])
        (nil)))

(insn 168 167 169 23 arch/arm/vfp/vfpdouble.c:718 (set (reg:SI 2 r2)
        (reg/v/f:SI 151 [ vdm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 151 [ vdm ])
        (nil)))

(insn 169 168 170 23 arch/arm/vfp/vfpdouble.c:718 (set (reg:SI 3 r3)
        (reg/v:SI 152 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 152 [ fpscr ])
        (nil)))

(call_insn/j 170 169 171 23 arch/arm/vfp/vfpdouble.c:718 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 23 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(53)
12, 30, 44, 56, 57, 64, 65, 71, 145, 146, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 825


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 171 170 173)

;; Start of basic block ( 19) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u178(11){ }u179(13){ }u180(25){ }u181(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138 150
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149
;; live  gen 	 138 150
;; live  kill	
;; rd  in  	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824
;; rd  gen 	(2)
773, 789
;; rd  kill	(6)
771, 772, 773, 789, 790, 791

;; Pred edge  19 [72.0%] 
(code_label 173 171 174 24 242 "" [1 uses])

(note 174 173 175 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 175 174 176 24 arch/arm/vfp/vfpdouble.c:701 (set (reg/v:SI 138 [ exceptions ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 176 175 366 24 arch/arm/vfp/vfpdouble.c:702 (set (reg/v/f:SI 150 [ vdn ])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(jump_insn 366 176 367 24 (set (pc)
        (label_ref 183)) -1 (nil))
;; End of basic block 24 -> ( 26)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; rd  out 	(54)
14, 15, 30, 44, 56, 57, 64, 65, 71, 147, 158, 159, 766, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824


;; Succ edge  26 [100.0%] 

(barrier 367 366 180)

;; Start of basic block ( 22 20) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u182(11){ }u183(13){ }u184(25){ }u185(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150
;; live  gen 	 138
;; live  kill	
;; rd  in  	(56)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 147, 158, 159, 766, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825
;; rd  gen 	(1)
772
;; rd  kill	(3)
771, 772, 773

;; Pred edge  22 [50.0%] 
;; Pred edge  20 [100.0%] 
(code_label 180 367 181 25 243 "" [2 uses])

(note 181 180 182 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 182 181 183 25 arch/arm/vfp/vfpdouble.c:687 (set (reg/v:SI 138 [ exceptions ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; rd  out 	(57)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 147, 158, 159, 766, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825


;; Succ edge  26 [100.0%]  (fallthru)

;; Start of basic block ( 25 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u186(11){ }u187(13){ }u188(25){ }u189(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 149 150
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	
;; rd  in  	(59)
14, 15, 30, 44, 56, 57, 64, 65, 71, 145, 147, 158, 159, 766, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825
;; rd  gen 	(4)
4, 19, 32, 46
;; rd  kill	(57)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56

;; Pred edge  25 [100.0%]  (fallthru)
;; Pred edge  24 [100.0%] 
(code_label 183 182 184 26 245 "" [1 uses])

(note 184 183 187 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 187 184 188 26 arch/arm/vfp/vfpdouble.c:720 (parallel [
            (set (reg:SI 0 r0)
                (mem/s:SI (reg/v/f:SI 150 [ vdn ]) [0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s:SI (plus:SI (reg/v/f:SI 150 [ vdn ])
                        (const_int 4 [0x4])) [0 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s:SI (plus:SI (reg/v/f:SI 150 [ vdn ])
                        (const_int 8 [0x8])) [0 S4 A64]))
            (set (reg:SI 3 r3)
                (mem/s:SI (plus:SI (reg/v/f:SI 150 [ vdn ])
                        (const_int 12 [0xc])) [0 S4 A32]))
        ]) 188 {*ldmsi4} (expr_list:REG_DEAD (reg/v/f:SI 150 [ vdn ])
        (nil)))

(insn 188 187 368 26 arch/arm/vfp/vfpdouble.c:720 (parallel [
            (set (mem/s:SI (reg/v/f:SI 149 [ vdd ]) [0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 149 [ vdd ])
                        (const_int 4 [0x4])) [0 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 149 [ vdd ])
                        (const_int 8 [0x8])) [0 S4 A64])
                (reg:SI 2 r2))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 149 [ vdd ])
                        (const_int 12 [0xc])) [0 S4 A32])
                (reg:SI 3 r3))
        ]) 195 {*stmsi4} (expr_list:REG_DEAD (reg/v/f:SI 149 [ vdd ])
        (expr_list:REG_DEAD (reg:SI 3 r3)
            (expr_list:REG_DEAD (reg:SI 2 r2)
                (expr_list:REG_DEAD (reg:SI 1 r1)
                    (expr_list:REG_DEAD (reg:SI 0 r0)
                        (nil)))))))

(jump_insn 368 188 369 26 (set (pc)
        (label_ref 298)) -1 (nil))
;; End of basic block 26 -> ( 42)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; rd  out 	(58)
4, 19, 32, 46, 57, 64, 65, 71, 145, 147, 158, 159, 766, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825


;; Succ edge  42 [100.0%] 

(barrier 369 368 191)

;; Start of basic block ( 7) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u202(11){ }u203(13){ }u204(25){ }u205(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 134 147 190 191
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 134 147 190 191
;; live  kill	
;; rd  in  	(27)
14, 15, 30, 44, 56, 57, 64, 65, 71, 153, 158, 159, 766, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802
;; rd  gen 	(9)
3, 18, 31, 45, 133, 769, 787, 826, 827
;; rd  kill	(95)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 767, 768, 769, 787, 826, 827

;; Pred edge  7 [72.0%] 
(code_label 191 369 192 27 231 "" [1 uses])

(note 192 191 195 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 195 192 196 27 arch/arm/vfp/vfpdouble.c:761 (parallel [
            (set (reg:SI 0 r0)
                (mem/s:SI (reg/v/f:SI 150 [ vdn ]) [0 S4 A64]))
            (set (reg:SI 1 r1)
                (mem/s:SI (plus:SI (reg/v/f:SI 150 [ vdn ])
                        (const_int 4 [0x4])) [0 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s:SI (plus:SI (reg/v/f:SI 150 [ vdn ])
                        (const_int 8 [0x8])) [0 S4 A64]))
            (set (reg:SI 3 r3)
                (mem/s:SI (plus:SI (reg/v/f:SI 150 [ vdn ])
                        (const_int 12 [0xc])) [0 S4 A32]))
        ]) 188 {*ldmsi4} (nil))

(insn 196 195 197 27 arch/arm/vfp/vfpdouble.c:761 (parallel [
            (set (mem/s:SI (reg/v/f:SI 149 [ vdd ]) [0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 149 [ vdd ])
                        (const_int 4 [0x4])) [0 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 149 [ vdd ])
                        (const_int 8 [0x8])) [0 S4 A64])
                (reg:SI 2 r2))
            (set (mem/s:SI (plus:SI (reg/v/f:SI 149 [ vdd ])
                        (const_int 12 [0xc])) [0 S4 A32])
                (reg:SI 3 r3))
        ]) 195 {*stmsi4} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil))))))

(insn 197 196 198 27 arch/arm/vfp/vfpdouble.c:766 (set (reg:SI 190 [ <variable>.exponent ])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 150 [ vdn ]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 198 197 199 27 arch/arm/vfp/vfpdouble.c:766 (set (reg:SI 191 [ <variable>.exponent ])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 151 [ vdm ]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 199 198 201 27 arch/arm/vfp/vfpdouble.c:766 (set (reg:SI 147 [ D.4751 ])
        (minus:SI (reg:SI 190 [ <variable>.exponent ])
            (reg:SI 191 [ <variable>.exponent ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 191 [ <variable>.exponent ])
        (expr_list:REG_DEAD (reg:SI 190 [ <variable>.exponent ])
            (nil))))

(insn 201 199 202 27 arch/arm/vfp/vfpdouble.c:767 (set (reg/v:DI 134 [ m_sig.774 ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 151 [ vdm ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 202 201 203 27 arch/arm/vfp/vfp.h:25 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 147 [ D.4751 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 203 202 204 27 arch/arm/vfp/vfp.h:25 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 241)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 27 -> ( 28 34)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; rd  out 	(30)
3, 18, 31, 45, 57, 64, 65, 71, 133, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827


;; Succ edge  28 [50.0%]  (fallthru)
;; Succ edge  34 [50.0%] 

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u225(11){ }u226(13){ }u227(25){ }u228(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(30)
3, 18, 31, 45, 57, 64, 65, 71, 133, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827
;; rd  gen 	(1)
132
;; rd  kill	(32)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157

;; Pred edge  27 [50.0%]  (fallthru)
(note 204 203 205 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 205 204 206 28 arch/arm/vfp/vfp.h:26 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 147 [ D.4751 ])
            (const_int 63 [0x3f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 206 205 207 28 arch/arm/vfp/vfp.h:26 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 231)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 28 -> ( 29 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; rd  out 	(30)
3, 18, 31, 45, 57, 64, 65, 71, 132, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827


;; Succ edge  29 [50.0%]  (fallthru)
;; Succ edge  32 [50.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u231(11){ }u232(13){ }u233(25){ }u234(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 193 195 196 209 210 211 212 213 214
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 147 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 193 195 196 209 210 211 212 213 214
;; live  kill	 14 [lr] 213 214
;; rd  in  	(30)
3, 18, 31, 45, 57, 64, 65, 71, 132, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827
;; rd  gen 	(11)
7, 140, 828, 830, 831, 841, 842, 843, 844, 845, 848
;; rd  kill	(62)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 66, 67, 68, 69, 70, 71, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 828, 829, 830, 831, 841, 842, 843, 844

;; Pred edge  28 [50.0%]  (fallthru)
(note 207 206 208 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 208 207 209 29 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg/v:DI 134 [ m_sig.774 ])) 163 {*arm_movdi} (nil))

(insn 209 208 210 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 2 r2)
        (reg:SI 147 [ D.4751 ])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 210 209 332 29 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 332 210 333 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 209)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 333 332 334 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 210 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 334 333 335 29 arch/arm/vfp/vfp.h:27 (clobber (reg:DI 213 [ D.5921 ])) -1 (nil))

(insn 335 334 336 29 arch/arm/vfp/vfp.h:27 (set (subreg:SI (reg:DI 213 [ D.5921 ]) 0)
        (reg:SI 209)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 209)
        (nil)))

(insn 336 335 213 29 arch/arm/vfp/vfp.h:27 (set (subreg:SI (reg:DI 213 [ D.5921 ]) 4)
        (reg:SI 210 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 210 [+4 ])
        (nil)))

(insn 213 336 214 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 193)
        (minus:SI (const_int 64 [0x40])
            (reg:SI 147 [ D.4751 ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 147 [ D.4751 ])
        (nil)))

(insn 214 213 215 29 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg/v:DI 134 [ m_sig.774 ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v:DI 134 [ m_sig.774 ])
        (nil)))

(insn 215 214 216 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 2 r2)
        (reg:SI 193)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 193)
        (nil)))

(call_insn/u 216 215 338 29 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 338 216 339 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 211)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 339 338 340 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 212 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 340 339 341 29 arch/arm/vfp/vfp.h:27 (clobber (reg:DI 214 [+4 ])) -1 (nil))

(insn 341 340 342 29 arch/arm/vfp/vfp.h:27 (set (subreg:SI (reg:DI 214 [+4 ]) 0)
        (reg:SI 211)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 211)
        (nil)))

(insn 342 341 343 29 arch/arm/vfp/vfp.h:27 (set (subreg:SI (reg:DI 214 [+4 ]) 4)
        (reg:SI 212 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 212 [+4 ])
        (nil)))

(insn 343 342 219 29 arch/arm/vfp/vfp.h:27 (set (reg:DI 195 [+4 ])
        (reg:DI 214 [+4 ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 214 [+4 ])
        (nil)))

(insn 219 343 220 29 arch/arm/vfp/vfp.h:27 (set (reg:DI 0 r0)
        (reg:DI 195 [+4 ])) 163 {*arm_movdi} (nil))

(insn 220 219 221 29 arch/arm/vfp/vfp.h:27 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(call_insn/u 221 220 222 29 arch/arm/vfp/vfp.h:27 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_ulcmp") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 222 221 223 29 arch/arm/vfp/vfp.h:27 (set (reg:SI 196)
        (plus:SI (reg:SI 0 r0)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 223 222 224 29 arch/arm/vfp/vfp.h:27 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 196)
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 196)
        (nil)))

(jump_insn 224 223 320 29 arch/arm/vfp/vfp.h:27 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 226)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 29 -> ( 31 30)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; rd  out 	(38)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 830, 831, 841, 842, 843, 844, 845, 848


;; Succ edge  31 [29.0%] 
;; Succ edge  30 [71.0%]  (fallthru)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u270(11){ }u271(13){ }u272(25){ }u273(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152 213
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 195
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152 213
;; live  gen 	 195
;; live  kill	
;; rd  in  	(38)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 830, 831, 841, 842, 843, 844, 845, 848
;; rd  gen 	(1)
829
;; rd  kill	(2)
829, 830

;; Pred edge  29 [71.0%]  (fallthru)
(note 320 224 225 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 225 320 226 30 arch/arm/vfp/vfp.h:27 (set (reg:DI 195 [+4 ])
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 30 -> ( 31)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; rd  out 	(38)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 831, 841, 842, 843, 844, 845, 848


;; Succ edge  31 [100.0%]  (fallthru)

;; Start of basic block ( 29 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u274(11){ }u275(13){ }u276(25){ }u277(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 195 213
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152 195 213
;; live  gen 	 134
;; live  kill	
;; rd  in  	(39)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 848
;; rd  gen 	(1)
767
;; rd  kill	(3)
767, 768, 769

;; Pred edge  29 [29.0%] 
;; Pred edge  30 [100.0%]  (fallthru)
(code_label 226 225 321 31 249 "" [1 uses])

(note 321 226 228 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 228 321 370 31 arch/arm/vfp/vfp.h:27 (set (reg/v:DI 134 [ m_sig.774 ])
        (ior:DI (reg:DI 195 [+4 ])
            (reg:DI 213 [ D.5921 ]))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 213 [ D.5921 ])
        (expr_list:REG_DEAD (reg:DI 195 [+4 ])
            (nil))))

(jump_insn 370 228 371 31 (set (pc)
        (label_ref 241)) -1 (nil))
;; End of basic block 31 -> ( 34)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; rd  out 	(39)
7, 18, 31, 45, 57, 64, 65, 140, 158, 159, 766, 767, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 841, 842, 843, 844, 845, 848


;; Succ edge  34 [100.0%] 

(barrier 371 370 231)

;; Start of basic block ( 28) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u280(11){ }u281(13){ }u282(25){ }u283(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 197
;; live  kill	 14 [lr]
;; rd  in  	(30)
3, 18, 31, 45, 57, 64, 65, 71, 132, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827
;; rd  gen 	(3)
5, 138, 832
;; rd  kill	(55)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 66, 67, 68, 69, 70, 71, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 832

;; Pred edge  28 [50.0%] 
(code_label 231 371 232 32 248 "" [1 uses])

(note 232 231 233 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 233 232 234 32 arch/arm/vfp/vfp.h:29 (set (reg:DI 0 r0)
        (reg/v:DI 134 [ m_sig.774 ])) 163 {*arm_movdi} (nil))

(insn 234 233 235 32 arch/arm/vfp/vfp.h:29 (set (reg:DI 2 r2)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(call_insn/u 235 234 236 32 arch/arm/vfp/vfp.h:29 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_ulcmp") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 236 235 237 32 arch/arm/vfp/vfp.h:29 (set (reg:SI 197)
        (plus:SI (reg:SI 0 r0)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 237 236 238 32 arch/arm/vfp/vfp.h:29 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 197)
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 197)
        (nil)))

(jump_insn 238 237 322 32 arch/arm/vfp/vfp.h:29 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 241)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
            (nil))))
;; End of basic block 32 -> ( 34 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; rd  out 	(30)
5, 18, 31, 45, 57, 64, 65, 138, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 832


;; Succ edge  34 [29.0%] 
;; Succ edge  33 [71.0%]  (fallthru)

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u293(11){ }u294(13){ }u295(25){ }u296(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 150 151 152
;; live  gen 	 134
;; live  kill	
;; rd  in  	(30)
5, 18, 31, 45, 57, 64, 65, 138, 158, 159, 766, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 832
;; rd  gen 	(1)
768
;; rd  kill	(3)
767, 768, 769

;; Pred edge  32 [71.0%]  (fallthru)
(note 322 238 239 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 239 322 241 33 arch/arm/vfp/vfp.h:29 (set (reg/v:DI 134 [ m_sig.774 ])
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 149 150 151 152
;; rd  out 	(30)
5, 18, 31, 45, 57, 64, 65, 138, 158, 159, 766, 768, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 832


;; Succ edge  34 [100.0%]  (fallthru)

;; Start of basic block ( 27 32 33 31) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u297(11){ }u298(13){ }u299(25){ }u300(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 24 [cc] 198 199 215
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 150 151 152
;; live  gen 	 24 [cc] 198 199 215
;; live  kill	
;; rd  in  	(47)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 133, 138, 140, 158, 159, 766, 767, 768, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 841, 842, 843, 844, 845, 848
;; rd  gen 	(4)
137, 833, 834, 851
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 833, 834, 851

;; Pred edge  27 [50.0%] 
;; Pred edge  32 [29.0%] 
;; Pred edge  33 [100.0%]  (fallthru)
;; Pred edge  31 [100.0%] 
(code_label 241 239 242 34 247 "" [3 uses])

(note 242 241 243 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 243 242 244 34 arch/arm/vfp/vfpdouble.c:772 (set (reg:SI 198 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 150 [ vdn ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 244 243 245 34 arch/arm/vfp/vfpdouble.c:772 (set (reg:SI 199 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 151 [ vdm ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg/v/f:SI 151 [ vdm ])
        (nil)))

(insn 245 244 345 34 arch/arm/vfp/vfpdouble.c:772 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 198 [ <variable>.sign ])
            (reg:SI 199 [ <variable>.sign ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 199 [ <variable>.sign ])
        (expr_list:REG_DEAD (reg:SI 198 [ <variable>.sign ])
            (nil))))

(insn 345 245 246 34 (set (reg:DI 215 [ <variable>.significand ])
        (mem/s/j:DI (plus:SI (reg/v/f:SI 150 [ vdn ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])) -1 (expr_list:REG_DEAD (reg/v/f:SI 150 [ vdn ])
        (nil)))

(jump_insn 246 345 247 34 arch/arm/vfp/vfpdouble.c:772 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 290)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 34 -> ( 35 40)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 152 215
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 152 215
;; rd  out 	(48)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 137, 158, 159, 766, 767, 768, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851


;; Succ edge  35 [72.0%]  (fallthru)
;; Succ edge  40 [28.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u307(11){ }u308(13){ }u309(25){ }u310(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 152 215
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 215
;; lr  def 	 24 [cc] 144
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 152 215
;; live  gen 	 24 [cc] 144
;; live  kill	 24 [cc]
;; rd  in  	(48)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 137, 158, 159, 766, 767, 768, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(2)
136, 784
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 783, 784, 785

;; Pred edge  34 [72.0%]  (fallthru)
(note 247 246 249 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 249 247 250 35 arch/arm/vfp/vfpdouble.c:773 (parallel [
            (set (reg/v:DI 144 [ m_sig ])
                (minus:DI (reg:DI 215 [ <variable>.significand ])
                    (reg/v:DI 134 [ m_sig.774 ])))
            (clobber (reg:CC 24 cc))
        ]) 20 {*arm_subdi3} (expr_list:REG_DEAD (reg:DI 215 [ <variable>.significand ])
        (expr_list:REG_DEAD (reg/v:DI 134 [ m_sig.774 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 250 249 251 35 arch/arm/vfp/vfpdouble.c:774 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 144 [ m_sig ]) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 251 250 324 35 arch/arm/vfp/vfpdouble.c:774 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 331)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2100 [0x834])
            (nil))))
;; End of basic block 35 -> ( 38 36)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; rd  out 	(49)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 136, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851


;; Succ edge  38 [21.0%] 
;; Succ edge  36 [79.0%]  (fallthru)

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u315(11){ }u316(13){ }u317(25){ }u318(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc] 205
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  gen 	 24 [cc] 205
;; live  kill	
;; rd  in  	(49)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 136, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(2)
134, 838
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 838, 839

;; Pred edge  35 [79.0%]  (fallthru)
(note 324 251 270 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 270 324 271 36 arch/arm/vfp/vfpdouble.c:777 (set (reg:SI 205 [ m_sig ])
        (subreg:SI (reg/v:DI 144 [ m_sig ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 271 270 272 36 arch/arm/vfp/vfpdouble.c:777 (set (reg:SI 205 [ m_sig ])
        (ior:SI (reg:SI 205 [ m_sig ])
            (subreg:SI (reg/v:DI 144 [ m_sig ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 272 271 273 36 arch/arm/vfp/vfpdouble.c:777 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 205 [ m_sig ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 205 [ m_sig ])
        (nil)))

(jump_insn 273 272 372 36 arch/arm/vfp/vfpdouble.c:777 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 294)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 36 -> ( 37 41)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; rd  out 	(50)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 134, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 842, 843, 844, 845, 848, 851


;; Succ edge  37 [50.0%]  (fallthru)
;; Succ edge  41 [50.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  gen 	
;; live  kill	
;; rd  in  	(50)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 134, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  36 [50.0%]  (fallthru)
(note 372 273 374 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(jump_insn 374 372 375 37 (set (pc)
        (label_ref 373)) -1 (nil))
;; End of basic block 37 -> ( 39)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; rd  out 	(50)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 134, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 842, 843, 844, 845, 848, 851


;; Succ edge  39 [100.0%] 

(barrier 375 374 331)

;; Start of basic block ( 35) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u324(11){ }u325(13){ }u326(25){ }u327(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 149
;; lr  def 	 24 [cc] 144 202 203 204
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  gen 	 144 202 203 204
;; live  kill	 24 [cc]
;; rd  in  	(49)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 136, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(4)
785, 835, 836, 837
;; rd  kill	(38)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 783, 784, 785, 835, 836, 837

;; Pred edge  35 [21.0%] 
(code_label 331 375 259 38 259 "" [1 uses])

(note 259 331 260 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 260 259 262 38 arch/arm/vfp/vfpdouble.c:775 (set (reg:SI 202 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 149 [ vdd ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 262 260 263 38 arch/arm/vfp/vfpdouble.c:775 (set (reg:SI 204)
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (nil))

(insn 263 262 264 38 arch/arm/vfp/vfpdouble.c:775 (set (reg:SI 203)
        (xor:SI (reg:SI 202 [ <variable>.sign ])
            (reg:SI 204))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 204)
        (expr_list:REG_DEAD (reg:SI 202 [ <variable>.sign ])
            (expr_list:REG_EQUAL (xor:SI (reg:SI 202 [ <variable>.sign ])
                    (const_int -32768 [0xffffffffffff8000]))
                (nil)))))

(insn 264 263 265 38 arch/arm/vfp/vfpdouble.c:775 (set (mem/s/j:HI (plus:SI (reg/v/f:SI 149 [ vdd ])
                (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])
        (subreg:HI (reg:SI 203) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 203)
        (nil)))

(insn 265 264 376 38 arch/arm/vfp/vfpdouble.c:776 (parallel [
            (set (reg/v:DI 144 [ m_sig ])
                (neg:DI (reg/v:DI 144 [ m_sig ])))
            (clobber (reg:CC 24 cc))
        ]) 125 {*arm_negdi2} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(jump_insn 376 265 377 38 (set (pc)
        (label_ref 294)) -1 (nil))
;; End of basic block 38 -> ( 41)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; rd  out 	(51)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 158, 159, 766, 767, 768, 769, 785, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 841, 842, 843, 844, 845, 848, 851


;; Succ edge  41 [100.0%] 

(barrier 377 376 373)

;; Start of basic block ( 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u335(11){ }u336(13){ }u337(25){ }u338(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 152
;; lr  def 	 24 [cc] 146 206
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149 152
;; live  gen 	 24 [cc] 146 206
;; live  kill	
;; rd  in  	(50)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 134, 158, 159, 766, 767, 768, 769, 784, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(3)
126, 786, 840
;; rd  kill	(34)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 786, 840

;; Pred edge  37 [100.0%] 
(code_label 373 377 274 39 260 "" [1 uses])

(note 274 373 275 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 275 274 353 39 arch/arm/vfp/vfpdouble.c:778 (set (reg:SI 206)
        (and:SI (reg/v:SI 152 [ fpscr ])
            (const_int 12582912 [0xc00000]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 152 [ fpscr ])
        (nil)))

(insn 353 275 354 39 arch/arm/vfp/vfpdouble.c:778 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 206)
            (const_int 8388608 [0x800000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 206)
        (nil)))

(insn 354 353 287 39 arch/arm/vfp/vfpdouble.c:778 discrim 2 (set (reg:SI 146 [ iftmp.149 ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 32768 [0x8000])
            (const_int 0 [0x0]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 287 354 378 39 arch/arm/vfp/vfpdouble.c:778 discrim 3 (set (mem/s/j:HI (plus:SI (reg/v/f:SI 149 [ vdd ])
                (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16])
        (subreg/s/u:HI (reg:SI 146 [ iftmp.149 ]) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 146 [ iftmp.149 ])
        (nil)))

(jump_insn 378 287 379 39 (set (pc)
        (label_ref 294)) -1 (nil))
;; End of basic block 39 -> ( 41)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; rd  out 	(52)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 126, 158, 159, 766, 767, 768, 769, 784, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 840, 841, 842, 843, 844, 845, 848, 851


;; Succ edge  41 [100.0%] 

(barrier 379 378 290)

;; Start of basic block ( 34) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u344(11){ }u345(13){ }u346(25){ }u347(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 215
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 215
;; lr  def 	 24 [cc] 144
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 149 215
;; live  gen 	 144
;; live  kill	 24 [cc]
;; rd  in  	(48)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 137, 158, 159, 766, 767, 768, 769, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(1)
783
;; rd  kill	(35)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 783, 784, 785

;; Pred edge  34 [28.0%] 
(code_label 290 379 291 40 251 "" [1 uses])

(note 291 290 293 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 293 291 294 40 arch/arm/vfp/vfpdouble.c:782 (parallel [
            (set (reg/v:DI 144 [ m_sig ])
                (plus:DI (reg/v:DI 134 [ m_sig.774 ])
                    (reg:DI 215 [ <variable>.significand ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 215 [ <variable>.significand ])
        (expr_list:REG_DEAD (reg/v:DI 134 [ m_sig.774 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))
;; End of basic block 40 -> ( 41)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; rd  out 	(48)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 158, 159, 766, 767, 768, 769, 783, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 844, 845, 848, 851


;; Succ edge  41 [100.0%]  (fallthru)

;; Start of basic block ( 36 40 38 39) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u350(11){ }u351(13){ }u352(25){ }u353(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 149
;; lr  def 	 138
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 149
;; live  gen 	 138
;; live  kill	
;; rd  in  	(58)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 126, 134, 158, 159, 766, 767, 768, 769, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(1)
771
;; rd  kill	(3)
771, 772, 773

;; Pred edge  36 [50.0%] 
;; Pred edge  40 [100.0%]  (fallthru)
;; Pred edge  38 [100.0%] 
;; Pred edge  39 [100.0%] 
(code_label 294 293 295 41 254 "" [3 uses])

(note 295 294 296 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 296 295 297 41 arch/arm/vfp/vfpdouble.c:784 (set (mem/s/j:DI (plus:SI (reg/v/f:SI 149 [ vdd ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S8 A64])
        (reg/v:DI 144 [ m_sig ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v/f:SI 149 [ vdd ])
        (expr_list:REG_DEAD (reg/v:DI 144 [ m_sig ])
            (nil))))

(insn 297 296 298 41 arch/arm/vfp/vfpdouble.c:786 (set (reg/v:SI 138 [ exceptions ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 41 -> ( 42)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; rd  out 	(59)
3, 5, 7, 18, 31, 45, 57, 64, 65, 71, 126, 134, 158, 159, 766, 767, 768, 769, 771, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851


;; Succ edge  42 [100.0%]  (fallthru)

;; Start of basic block ( 41 26) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u356(11){ }u357(13){ }u358(25){ }u359(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(96)
3, 4, 5, 7, 18, 19, 31, 32, 45, 46, 57, 64, 65, 71, 126, 134, 145, 147, 158, 159, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851
;; rd  gen 	(1)
2
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15

;; Pred edge  41 [100.0%]  (fallthru)
;; Pred edge  26 [100.0%] 
(code_label 298 297 299 42 246 "" [1 uses])

(note 299 298 304 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 304 299 310 42 arch/arm/vfp/vfpdouble.c:787 (set (reg/i:SI 0 r0)
        (reg/v:SI 138 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ exceptions ])
        (nil)))

(insn 310 304 0 42 arch/arm/vfp/vfpdouble.c:787 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 42 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(93)
2, 18, 19, 31, 32, 45, 46, 57, 64, 65, 71, 126, 134, 145, 147, 158, 159, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 851


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fsub (vfp_double_fsub)[0:182]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)


vfp_double_fsub

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={9d,5u} r2={9d,3u} r3={9d,3u} r11={1d,12u} r12={7d} r13={1d,19u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,10u} r25={1d,25u,6d} r26={1d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,3u} r134={5d,8u,1d} r135={1d,3u} r136={5d,8u,1d} r137={1d,1u} r139={1d,5u,1d} r140={1d,5u,1d} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,2u} r162={1d,1u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={2d,2u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r179={1d,1u,1d} r180={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,2u} r189={1d,1u} r190={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={2d,2u} r199={1d,1u} r201={1d,1u,1d} r202={1d,1u} r203={1d,1u} r204={1d,2u} r205={1d,1u} r206={1d,1u} r208={1d,1u} r210={1d,1u} r212={1d,1u} r214={1d,1u} r215={2d,3u} r216={1d,1u} r218={1d,1u} r220={1d,1u} r221={2d,3u} 
;;    total ref usage 1020{808d,199u,13e} in 117{111 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733
0[0,13] 1[13,9] 2[22,9] 3[31,9] 11[40,1] 12[41,7] 13[48,1] 14[49,7] 15[56,6] 16[62,6] 17[68,6] 18[74,6] 19[80,6] 20[86,6] 21[92,6] 22[98,6] 23[104,6] 24[110,16] 25[126,1] 26[127,1] 27[128,6] 28[134,6] 29[140,6] 30[146,6] 31[152,6] 32[158,6] 33[164,6] 34[170,6] 35[176,6] 36[182,6] 37[188,6] 38[194,6] 39[200,6] 40[206,6] 41[212,6] 42[218,6] 43[224,6] 44[230,6] 45[236,6] 46[242,6] 47[248,6] 48[254,6] 49[260,6] 50[266,6] 51[272,6] 52[278,6] 53[284,6] 54[290,6] 55[296,6] 56[302,6] 57[308,6] 58[314,6] 59[320,6] 60[326,6] 61[332,6] 62[338,6] 63[344,6] 64[350,6] 65[356,6] 66[362,6] 67[368,6] 68[374,6] 69[380,6] 70[386,6] 71[392,6] 72[398,6] 73[404,6] 74[410,6] 75[416,6] 76[422,6] 77[428,6] 78[434,6] 79[440,6] 80[446,6] 81[452,6] 82[458,6] 83[464,6] 84[470,6] 85[476,6] 86[482,6] 87[488,6] 88[494,6] 89[500,6] 90[506,6] 91[512,6] 92[518,6] 93[524,6] 94[530,6] 95[536,6] 96[542,6] 97[548,6] 98[554,6] 99[560,6] 100[566,6] 101[572,6] 102[578,6] 103[584,6] 104[590,6] 105[596,6] 106[602,6] 107[608,6] 108[614,6] 109[620,6] 110[626,6] 111[632,6] 112[638,6] 113[644,6] 114[650,6] 115[656,6] 116[662,6] 117[668,6] 118[674,6] 119[680,6] 120[686,6] 121[692,6] 122[698,6] 123[704,6] 124[710,6] 125[716,6] 126[722,6] 127[728,6] 133[734,1] 134[735,5] 135[740,1] 136[741,5] 137[746,1] 139[747,1] 140[748,1] 142[749,1] 143[750,1] 144[751,1] 145[752,1] 146[753,1] 147[754,1] 152[755,1] 153[756,1] 156[757,1] 157[758,1] 159[759,1] 160[760,1] 161[761,1] 162[762,1] 163[763,1] 166[764,1] 167[765,1] 168[766,1] 169[767,1] 170[768,1] 171[769,2] 172[771,1] 173[772,1] 174[773,1] 179[774,1] 180[775,1] 183[776,1] 184[777,1] 186[778,1] 187[779,1] 188[780,1] 189[781,1] 190[782,1] 193[783,1] 194[784,1] 195[785,1] 196[786,1] 197[787,1] 198[788,2] 199[790,1] 201[791,1] 202[792,1] 203[793,1] 204[794,1] 205[795,1] 206[796,1] 208[797,1] 210[798,1] 212[799,1] 214[800,1] 215[801,2] 216[803,1] 218[804,1] 220[805,1] 221[806,2] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d12(0){ }d21(1){ }d30(2){ }d39(3){ }d40(11){ }d47(12){ }d48(13){ }d55(14){ }d126(25){ }d127(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  kill	(58)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 126, 127
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d40(bb 0 insn -1) }u1(13){ d48(bb 0 insn -1) }u2(25){ d126(bb 0 insn -1) }u3(26){ d127(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 210 212 214 215
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 210 212 214 215
;; live  kill	 14 [lr]
;; rd  in  	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  gen 	(29)
10, 20, 123, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801, 802
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d12(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d21(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d30(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 9
;;      reg 143 { d750(bb 2 insn 3) }
;;   UD chains for insn luid 5 uid 10
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d11(bb 2 insn 9) }
;;   UD chains for insn luid 6 uid 11
;;      reg 0 { d10(bb 2 insn 10) }
;;      reg 1 { d20(bb 2 insn 10) }
;;   UD chains for insn luid 8 uid 13
;;      reg 140 { d748(bb 2 insn 11) }
;;      reg 147 { d754(bb 2 insn 12) }
;;   eq_note reg 140 { }
;;   UD chains for insn luid 9 uid 14
;;      reg 146 { d753(bb 2 insn 13) }
;;   UD chains for insn luid 10 uid 16
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 210 { d798(bb 2 insn 14) }
;;   UD chains for insn luid 11 uid 17
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 12 uid 19
;;      reg 212 { d799(bb 2 insn 17) }
;;   UD chains for insn luid 13 uid 20
;;      reg 152 { d755(bb 2 insn 19) }
;;   UD chains for insn luid 14 uid 21
;;      reg 153 { d756(bb 2 insn 20) }
;;   eq_note reg 152 { }
;;   UD chains for insn luid 15 uid 22
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 16 uid 23
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 17 uid 24
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 18 uid 25
;;      reg 156 { d757(bb 2 insn 23) }
;;      reg 215 { d802(bb 2 insn 24) }
;;   UD chains for insn luid 19 uid 26
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 20 uid 27
;;      reg 215 { d801(bb 2 insn 25) }
;;   UD chains for insn luid 22 uid 28
;;      reg 136 read/write { d741(bb 2 insn 160) }
;;      reg 214 { d800(bb 2 insn 26) }
;;   UD chains for insn luid 23 uid 29
;;      reg 136 { d745(bb 2 insn 28) d741(bb 2 insn 160) }
;;      reg 136 read/write { d745(bb 2 insn 28) d741(bb 2 insn 160) }
;;      reg 157 { d758(bb 2 insn 27) }
;;   UD chains for insn luid 24 uid 30
;;      reg 136 read/write { d745(bb 2 insn 28) d744(bb 2 insn 29) d741(bb 2 insn 160) }
;;      reg 215 { d801(bb 2 insn 25) }
;;   UD chains for insn luid 26 uid 32
;;      reg 160 { d760(bb 2 insn 31) }
;;   UD chains for insn luid 27 uid 33
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 28 uid 34
;;      reg 159 { d759(bb 2 insn 32) }
;;   UD chains for insn luid 29 uid 35
;;      reg 161 { d761(bb 2 insn 33) }
;;      reg 162 { d762(bb 2 insn 34) }
;;   UD chains for insn luid 30 uid 36
;;      reg 24 { d124(bb 2 insn 35) }
;;   UD chains for insn luid 31 uid 39
;;      reg 161 { d761(bb 2 insn 33) }
;;   UD chains for insn luid 32 uid 40
;;      reg 24 { d111(bb 2 insn 39) }
;;   UD chains for insn luid 33 uid 42
;;      reg 163 { d763(bb 2 insn 36) }
;;      reg 166 { d764(bb 2 insn 40) }
;;   UD chains for insn luid 34 uid 43
;;      reg 167 { d765(bb 2 insn 42) }
;;   UD chains for insn luid 35 uid 44
;;      reg 168 { d766(bb 2 insn 43) }
;;   UD chains for insn luid 36 uid 45
;;      reg 169 { d767(bb 2 insn 44) }
;;   UD chains for insn luid 37 uid 46
;;      reg 24 { d123(bb 2 insn 45) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ d40(bb 0 insn -1) }u54(13){ d48(bb 0 insn -1) }u55(25){ d126(bb 0 insn -1) }u56(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 136 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 136 170
;; live  kill	
;; rd  in  	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;; rd  gen 	(2)
742, 768
;; rd  kill	(6)
741, 742, 743, 744, 745, 768
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(37)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 49
;;      reg 136 { d743(bb 2 insn 30) }
;;      reg 170 { d768(bb 3 insn 48) }
;;   eq_note reg 136 { }

( 2 3 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ d40(bb 0 insn -1) }u61(13){ d48(bb 0 insn -1) }u62(25){ d126(bb 0 insn -1) }u63(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;; rd  gen 	(1)
122
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; rd  out 	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 52
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 53
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 2 uid 54
;;      reg 24 { d122(bb 4 insn 53) }

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u68(11){ d40(bb 0 insn -1) }u69(13){ d48(bb 0 insn -1) }u70(25){ d126(bb 0 insn -1) }u71(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  gen 	 24 [cc] 171
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;; rd  gen 	(2)
121, 769
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 769, 770
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 56
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 57
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;      reg 171 { d770(bb 5 insn 56) }
;;   UD chains for insn luid 2 uid 58
;;      reg 171 { d769(bb 5 insn 57) }
;;   UD chains for insn luid 3 uid 59
;;      reg 24 { d121(bb 5 insn 58) }

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ d40(bb 0 insn -1) }u78(13){ d48(bb 0 insn -1) }u79(25){ d126(bb 0 insn -1) }u80(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 172
;; live  kill	 14 [lr]
;; rd  in  	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 798, 799, 800, 801
;; rd  gen 	(1)
771
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 771
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(40)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 798, 799, 800, 801
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 61
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 62
;;      reg 172 { d771(bb 6 insn 61) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 63
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d9(bb 6 insn 62) }

( 4 5 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u86(11){ d40(bb 0 insn -1) }u87(13){ d48(bb 0 insn -1) }u88(25){ d126(bb 0 insn -1) }u89(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 216 218 220 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 216 218 220 221
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 20, 30, 39, 40, 47, 48, 121, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 798, 799, 800, 801
;; rd  gen 	(25)
6, 18, 117, 734, 737, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 803, 804, 805, 806
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 734, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 803, 804, 805, 806, 807
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 66
;;      reg 144 { d751(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 67
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d7(bb 7 insn 66) }
;;   UD chains for insn luid 2 uid 68
;;      reg 0 { d6(bb 7 insn 67) }
;;      reg 1 { d18(bb 7 insn 67) }
;;   UD chains for insn luid 4 uid 70
;;      reg 139 { d747(bb 7 insn 68) }
;;      reg 174 { d773(bb 7 insn 69) }
;;   eq_note reg 139 { }
;;   UD chains for insn luid 5 uid 71
;;      reg 173 { d772(bb 7 insn 70) }
;;   UD chains for insn luid 6 uid 73
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 216 { d803(bb 7 insn 71) }
;;   UD chains for insn luid 7 uid 74
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 8 uid 76
;;      reg 218 { d804(bb 7 insn 74) }
;;   UD chains for insn luid 9 uid 77
;;      reg 179 { d774(bb 7 insn 76) }
;;   UD chains for insn luid 10 uid 78
;;      reg 180 { d775(bb 7 insn 77) }
;;   eq_note reg 179 { }
;;   UD chains for insn luid 11 uid 79
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 12 uid 80
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 13 uid 81
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 14 uid 82
;;      reg 183 { d776(bb 7 insn 80) }
;;      reg 221 { d807(bb 7 insn 81) }
;;   UD chains for insn luid 15 uid 83
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 16 uid 84
;;      reg 221 { d806(bb 7 insn 82) }
;;   UD chains for insn luid 18 uid 85
;;      reg 134 read/write { d735(bb 7 insn 161) }
;;      reg 220 { d805(bb 7 insn 83) }
;;   UD chains for insn luid 19 uid 86
;;      reg 134 { d739(bb 7 insn 85) d735(bb 7 insn 161) }
;;      reg 134 read/write { d739(bb 7 insn 85) d735(bb 7 insn 161) }
;;      reg 184 { d777(bb 7 insn 84) }
;;   UD chains for insn luid 20 uid 87
;;      reg 134 read/write { d739(bb 7 insn 85) d738(bb 7 insn 86) d735(bb 7 insn 161) }
;;      reg 221 { d806(bb 7 insn 82) }
;;   UD chains for insn luid 22 uid 89
;;      reg 187 { d779(bb 7 insn 88) }
;;   UD chains for insn luid 23 uid 90
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 24 uid 91
;;      reg 186 { d778(bb 7 insn 89) }
;;   UD chains for insn luid 25 uid 92
;;      reg 188 { d780(bb 7 insn 90) }
;;      reg 189 { d781(bb 7 insn 91) }
;;   UD chains for insn luid 26 uid 93
;;      reg 24 { d118(bb 7 insn 92) }
;;   UD chains for insn luid 27 uid 96
;;      reg 188 { d780(bb 7 insn 90) }
;;   UD chains for insn luid 28 uid 97
;;      reg 24 { d110(bb 7 insn 96) }
;;   UD chains for insn luid 29 uid 99
;;      reg 190 { d782(bb 7 insn 93) }
;;      reg 193 { d783(bb 7 insn 97) }
;;   UD chains for insn luid 30 uid 100
;;      reg 194 { d784(bb 7 insn 99) }
;;   UD chains for insn luid 31 uid 101
;;      reg 195 { d785(bb 7 insn 100) }
;;   UD chains for insn luid 32 uid 102
;;      reg 196 { d786(bb 7 insn 101) }
;;   UD chains for insn luid 33 uid 103
;;      reg 24 { d117(bb 7 insn 102) }

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u135(11){ d40(bb 0 insn -1) }u136(13){ d48(bb 0 insn -1) }u137(25){ d126(bb 0 insn -1) }u138(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 134 197
;; live  kill	
;; rd  in  	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(2)
736, 787
;; rd  kill	(6)
735, 736, 737, 738, 739, 787
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(63)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 106
;;      reg 134 { d737(bb 7 insn 87) }
;;      reg 197 { d787(bb 8 insn 105) }
;;   eq_note reg 134 { }

( 7 8 )->[9]->( 10 12 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u142(11){ d40(bb 0 insn -1) }u143(13){ d48(bb 0 insn -1) }u144(25){ d126(bb 0 insn -1) }u145(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(1)
116
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; rd  out 	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 109
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;   UD chains for insn luid 1 uid 110
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 2 uid 111
;;      reg 24 { d116(bb 9 insn 110) }

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u150(11){ d40(bb 0 insn -1) }u151(13){ d48(bb 0 insn -1) }u152(25){ d126(bb 0 insn -1) }u153(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  gen 	 24 [cc] 198
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(2)
115, 788
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 788, 789
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 113
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;   UD chains for insn luid 1 uid 114
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;      reg 198 { d789(bb 10 insn 113) }
;;   UD chains for insn luid 2 uid 115
;;      reg 198 { d788(bb 10 insn 114) }
;;   UD chains for insn luid 3 uid 116
;;      reg 24 { d115(bb 10 insn 115) }

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u159(11){ d40(bb 0 insn -1) }u160(13){ d48(bb 0 insn -1) }u161(25){ d126(bb 0 insn -1) }u162(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 199
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 199
;; live  kill	 14 [lr]
;; rd  in  	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(1)
790
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 790
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(66)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 118
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 119
;;      reg 199 { d790(bb 11 insn 118) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 120
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d5(bb 11 insn 119) }

( 9 10 11 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u168(11){ d40(bb 0 insn -1) }u169(13){ d48(bb 0 insn -1) }u170(25){ d126(bb 0 insn -1) }u171(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 201 202 203 204 205 206 208
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 137 201 202 203 204 205 206 208
;; live  kill	 14 [lr]
;; rd  in  	(67)
6, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(9)
0, 746, 791, 792, 793, 794, 795, 796, 797
;; rd  kill	(28)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 49, 50, 51, 52, 53, 54, 55, 746, 791, 792, 793, 794, 795, 796, 797
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(75)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 123
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 126
;;      reg 201 { d791(bb 12 insn 123) }
;;      reg 203 { d793(bb 12 insn 125) }
;;   eq_note reg 201 { }
;;   UD chains for insn luid 3 uid 127
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 202 { d792(bb 12 insn 126) }
;;   UD chains for insn luid 4 uid 128
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 129
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 6 uid 130
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 7 uid 131
;;      reg 204 { d794(bb 12 insn 128) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 8 uid 132
;;      reg 205 { d795(bb 12 insn 129) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 9 uid 133
;;      reg 206 { d796(bb 12 insn 130) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 10 uid 134
;;      reg 145 { d752(bb 2 insn 5) }
;;   UD chains for insn luid 11 uid 135
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d3(bb 12 insn 131) }
;;      reg 1 { d16(bb 12 insn 132) }
;;      reg 2 { d25(bb 12 insn 133) }
;;      reg 3 { d34(bb 12 insn 134) }
;;   UD chains for insn luid 12 uid 136
;;      reg 0 { d2(bb 12 insn 135) }
;;   UD chains for insn luid 14 uid 139
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 208 { d797(bb 12 insn 138) }
;;   UD chains for insn luid 15 uid 140
;;      reg 142 { d749(bb 2 insn 2) }
;;   UD chains for insn luid 16 uid 141
;;      reg 204 { d794(bb 12 insn 128) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 17 uid 142
;;      reg 145 { d752(bb 2 insn 5) }
;;   UD chains for insn luid 18 uid 143
;;      reg 137 { d746(bb 12 insn 136) }
;;   UD chains for insn luid 19 uid 144
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d1(bb 12 insn 140) }
;;      reg 1 { d13(bb 12 insn 141) }
;;      reg 2 { d23(bb 12 insn 142) }
;;      reg 3 { d32(bb 12 insn 143) }
;;   UD chains for insn luid 20 uid 156
;;      reg 0 { d0(bb 12 insn 144) }

( 12 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u207(0){ d0(bb 12 insn 144) }u208(11){ d40(bb 0 insn -1) }u209(13){ d48(bb 0 insn -1) }u210(14){ }u211(25){ d126(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(75)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(75)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 12 insn 144) }
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d126(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 46 to worklist
  Adding insn 22 to worklist
  Adding insn 16 to worklist
  Adding insn 10 to worklist
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 59 to worklist
  Adding insn 63 to worklist
  Adding insn 103 to worklist
  Adding insn 79 to worklist
  Adding insn 73 to worklist
  Adding insn 67 to worklist
  Adding insn 111 to worklist
  Adding insn 109 to worklist
  Adding insn 116 to worklist
  Adding insn 120 to worklist
  Adding insn 156 to worklist
  Adding insn 144 to worklist
  Adding insn 139 to worklist
  Adding insn 135 to worklist
  Adding insn 127 to worklist
Finished finding needed instructions:
Processing use of (reg 25 sfp) in insn 127:
Processing use of (subreg (reg 202) 0) in insn 127:
  Adding insn 126 to worklist
Processing use of (reg 201 [ vdm.sign ]) in insn 126:
  Adding insn 123 to worklist
Processing use of (reg 203) in insn 126:
  Adding insn 125 to worklist
Processing use of (reg 25 sfp) in insn 123:
Processing use of (reg 13 sp) in insn 135:
Processing use of (reg 0 r0) in insn 135:
  Adding insn 131 to worklist
Processing use of (reg 1 r1) in insn 135:
  Adding insn 132 to worklist
Processing use of (reg 2 r2) in insn 135:
  Adding insn 133 to worklist
Processing use of (reg 3 r3) in insn 135:
  Adding insn 134 to worklist
Processing use of (reg 145 [ fpscr ]) in insn 134:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 206) in insn 133:
  Adding insn 130 to worklist
Processing use of (reg 25 sfp) in insn 130:
Processing use of (reg 205) in insn 132:
  Adding insn 129 to worklist
Processing use of (reg 25 sfp) in insn 129:
Processing use of (reg 204) in insn 131:
  Adding insn 128 to worklist
Processing use of (reg 25 sfp) in insn 128:
Processing use of (reg 13 sp) in insn 139:
Processing use of (reg 208) in insn 139:
  Adding insn 138 to worklist
Processing use of (reg 13 sp) in insn 144:
Processing use of (reg 0 r0) in insn 144:
  Adding insn 140 to worklist
Processing use of (reg 1 r1) in insn 144:
  Adding insn 141 to worklist
Processing use of (reg 2 r2) in insn 144:
  Adding insn 142 to worklist
Processing use of (reg 3 r3) in insn 144:
  Adding insn 143 to worklist
Processing use of (reg 137 [ exceptions ]) in insn 143:
  Adding insn 136 to worklist
Processing use of (reg 0 r0) in insn 136:
Processing use of (reg 145 [ fpscr ]) in insn 142:
Processing use of (reg 204) in insn 141:
Processing use of (reg 142 [ dd ]) in insn 140:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 0 r0) in insn 156:
Processing use of (reg 13 sp) in insn 120:
Processing use of (reg 0 r0) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 199) in insn 119:
  Adding insn 118 to worklist
Processing use of (reg 25 sfp) in insn 118:
Processing use of (reg 24 cc) in insn 116:
  Adding insn 115 to worklist
Processing use of (reg 198 [ significand ]) in insn 115:
  Adding insn 114 to worklist
Processing use of (subreg (reg 134 [ significand ]) 4) in insn 114:
  Adding insn 87 to worklist
  Adding insn 106 to worklist
Processing use of (reg 198 [ significand ]) in insn 114:
  Adding insn 113 to worklist
Processing use of (subreg (reg 134 [ significand ]) 0) in insn 113:
Processing use of (reg 134 [ significand ]) in insn 106:
Processing use of (reg 197) in insn 106:
  Adding insn 105 to worklist
Processing use of (reg 134 [ significand ]) in insn 87:
  Adding insn 85 to worklist
  Adding insn 86 to worklist
  Adding insn 161 to worklist
Processing use of (reg 221 [+4 ]) in insn 87:
  Adding insn 82 to worklist
Processing use of (reg 183) in insn 82:
  Adding insn 80 to worklist
Processing use of (reg 221 [+4 ]) in insn 82:
  Adding insn 81 to worklist
Processing use of (subreg (reg 139 [ D.5004 ]) 4) in insn 81:
  Adding insn 68 to worklist
Processing use of (reg 0 r0) in insn 68:
Processing use of (reg 1 r1) in insn 68:
Processing use of (subreg (reg 139 [ D.5004 ]) 0) in insn 80:
Processing use of (subreg (reg 134 [ significand ]) 0) in insn 86:
Processing use of (reg 134 [ significand ]) in insn 86:
Processing use of (reg 184) in insn 86:
  Adding insn 84 to worklist
Processing use of (reg 221 [+4 ]) in insn 84:
Processing use of (reg 134 [ significand ]) in insn 85:
Processing use of (reg 220) in insn 85:
  Adding insn 83 to worklist
Processing use of (subreg (reg 139 [ D.5004 ]) 0) in insn 83:
Processing use of (reg 25 sfp) in insn 109:
Processing use of (reg 134 [ significand ]) in insn 109:
Processing use of (reg 24 cc) in insn 111:
  Adding insn 110 to worklist
Processing use of (reg 133 [ D.5946 ]) in insn 110:
  Adding insn 78 to worklist
Processing use of (reg 180) in insn 78:
  Adding insn 77 to worklist
Processing use of (reg 179) in insn 77:
  Adding insn 76 to worklist
Processing use of (subreg (reg 218) 0) in insn 76:
  Adding insn 74 to worklist
Processing use of (subreg (reg 139 [ D.5004 ]) 4) in insn 74:
Processing use of (reg 13 sp) in insn 67:
Processing use of (reg 0 r0) in insn 67:
  Adding insn 66 to worklist
Processing use of (reg 144 [ dm ]) in insn 66:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 25 sfp) in insn 73:
Processing use of (subreg (reg 216) 0) in insn 73:
  Adding insn 71 to worklist
Processing use of (subreg (reg 173) 4) in insn 71:
  Adding insn 70 to worklist
Processing use of (reg 139 [ D.5004 ]) in insn 70:
Processing use of (reg 174) in insn 70:
  Adding insn 69 to worklist
Processing use of (reg 25 sfp) in insn 79:
Processing use of (subreg (reg 133 [ D.5946 ]) 0) in insn 79:
Processing use of (reg 24 cc) in insn 103:
  Adding insn 102 to worklist
Processing use of (reg 196) in insn 102:
  Adding insn 101 to worklist
Processing use of (reg 195) in insn 101:
  Adding insn 100 to worklist
Processing use of (subreg (reg 194) 0) in insn 100:
  Adding insn 99 to worklist
Processing use of (reg 190) in insn 99:
  Adding insn 93 to worklist
Processing use of (reg 193) in insn 99:
  Adding insn 97 to worklist
Processing use of (reg 24 cc) in insn 97:
  Adding insn 96 to worklist
Processing use of (reg 188 [ D.5946 ]) in insn 96:
  Adding insn 90 to worklist
Processing use of (subreg (reg 133 [ D.5946 ]) 0) in insn 90:
Processing use of (reg 24 cc) in insn 93:
  Adding insn 92 to worklist
Processing use of (reg 188 [ D.5946 ]) in insn 92:
Processing use of (reg 189) in insn 92:
  Adding insn 91 to worklist
Processing use of (reg 186) in insn 91:
  Adding insn 89 to worklist
Processing use of (subreg (reg 187) 0) in insn 89:
  Adding insn 88 to worklist
Processing use of (reg 13 sp) in insn 63:
Processing use of (reg 0 r0) in insn 63:
  Adding insn 62 to worklist
Processing use of (reg 172) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 25 sfp) in insn 61:
Processing use of (reg 24 cc) in insn 59:
  Adding insn 58 to worklist
Processing use of (reg 171 [ significand ]) in insn 58:
  Adding insn 57 to worklist
Processing use of (subreg (reg 136 [ significand ]) 4) in insn 57:
  Adding insn 30 to worklist
  Adding insn 49 to worklist
Processing use of (reg 171 [ significand ]) in insn 57:
  Adding insn 56 to worklist
Processing use of (subreg (reg 136 [ significand ]) 0) in insn 56:
Processing use of (reg 136 [ significand ]) in insn 49:
Processing use of (reg 170) in insn 49:
  Adding insn 48 to worklist
Processing use of (reg 136 [ significand ]) in insn 30:
  Adding insn 28 to worklist
  Adding insn 29 to worklist
  Adding insn 160 to worklist
Processing use of (reg 215 [+4 ]) in insn 30:
  Adding insn 25 to worklist
Processing use of (reg 156) in insn 25:
  Adding insn 23 to worklist
Processing use of (reg 215 [+4 ]) in insn 25:
  Adding insn 24 to worklist
Processing use of (subreg (reg 140 [ D.4995 ]) 4) in insn 24:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (subreg (reg 140 [ D.4995 ]) 0) in insn 23:
Processing use of (subreg (reg 136 [ significand ]) 0) in insn 29:
Processing use of (reg 136 [ significand ]) in insn 29:
Processing use of (reg 157) in insn 29:
  Adding insn 27 to worklist
Processing use of (reg 215 [+4 ]) in insn 27:
Processing use of (reg 136 [ significand ]) in insn 28:
Processing use of (reg 214) in insn 28:
  Adding insn 26 to worklist
Processing use of (subreg (reg 140 [ D.4995 ]) 0) in insn 26:
Processing use of (reg 25 sfp) in insn 52:
Processing use of (reg 136 [ significand ]) in insn 52:
Processing use of (reg 24 cc) in insn 54:
  Adding insn 53 to worklist
Processing use of (reg 135 [ D.5931 ]) in insn 53:
  Adding insn 21 to worklist
Processing use of (reg 153) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 152) in insn 20:
  Adding insn 19 to worklist
Processing use of (subreg (reg 212) 0) in insn 19:
  Adding insn 17 to worklist
Processing use of (subreg (reg 140 [ D.4995 ]) 4) in insn 17:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 143 [ dn ]) in insn 9:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 25 sfp) in insn 16:
Processing use of (subreg (reg 210) 0) in insn 16:
  Adding insn 14 to worklist
Processing use of (subreg (reg 146) 4) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 140 [ D.4995 ]) in insn 13:
Processing use of (reg 147) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 25 sfp) in insn 22:
Processing use of (subreg (reg 135 [ D.5931 ]) 0) in insn 22:
Processing use of (reg 24 cc) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 169) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 168) in insn 44:
  Adding insn 43 to worklist
Processing use of (subreg (reg 167) 0) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 163) in insn 42:
  Adding insn 36 to worklist
Processing use of (reg 166) in insn 42:
  Adding insn 40 to worklist
Processing use of (reg 24 cc) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 161 [ D.5931 ]) in insn 39:
  Adding insn 33 to worklist
Processing use of (subreg (reg 135 [ D.5931 ]) 0) in insn 33:
Processing use of (reg 24 cc) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 161 [ D.5931 ]) in insn 35:
Processing use of (reg 162) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 159) in insn 34:
  Adding insn 32 to worklist
Processing use of (subreg (reg 160) 0) in insn 32:
  Adding insn 31 to worklist


vfp_double_fsub

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={9d,5u} r2={9d,3u} r3={9d,3u} r11={1d,12u} r12={7d} r13={1d,19u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,10u} r25={1d,25u,6d} r26={1d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,3u} r134={5d,8u,1d} r135={1d,3u} r136={5d,8u,1d} r137={1d,1u} r139={1d,5u,1d} r140={1d,5u,1d} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,2u} r162={1d,1u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={2d,2u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r179={1d,1u,1d} r180={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,2u} r189={1d,1u} r190={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={2d,2u} r199={1d,1u} r201={1d,1u,1d} r202={1d,1u} r203={1d,1u} r204={1d,2u} r205={1d,1u} r206={1d,1u} r208={1d,1u} r210={1d,1u} r212={1d,1u} r214={1d,1u} r215={2d,3u} r216={1d,1u} r218={1d,1u} r220={1d,1u} r221={2d,3u} 
;;    total ref usage 1020{808d,199u,13e} in 117{111 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733
0[0,13] 1[13,9] 2[22,9] 3[31,9] 11[40,1] 12[41,7] 13[48,1] 14[49,7] 15[56,6] 16[62,6] 17[68,6] 18[74,6] 19[80,6] 20[86,6] 21[92,6] 22[98,6] 23[104,6] 24[110,16] 25[126,1] 26[127,1] 27[128,6] 28[134,6] 29[140,6] 30[146,6] 31[152,6] 32[158,6] 33[164,6] 34[170,6] 35[176,6] 36[182,6] 37[188,6] 38[194,6] 39[200,6] 40[206,6] 41[212,6] 42[218,6] 43[224,6] 44[230,6] 45[236,6] 46[242,6] 47[248,6] 48[254,6] 49[260,6] 50[266,6] 51[272,6] 52[278,6] 53[284,6] 54[290,6] 55[296,6] 56[302,6] 57[308,6] 58[314,6] 59[320,6] 60[326,6] 61[332,6] 62[338,6] 63[344,6] 64[350,6] 65[356,6] 66[362,6] 67[368,6] 68[374,6] 69[380,6] 70[386,6] 71[392,6] 72[398,6] 73[404,6] 74[410,6] 75[416,6] 76[422,6] 77[428,6] 78[434,6] 79[440,6] 80[446,6] 81[452,6] 82[458,6] 83[464,6] 84[470,6] 85[476,6] 86[482,6] 87[488,6] 88[494,6] 89[500,6] 90[506,6] 91[512,6] 92[518,6] 93[524,6] 94[530,6] 95[536,6] 96[542,6] 97[548,6] 98[554,6] 99[560,6] 100[566,6] 101[572,6] 102[578,6] 103[584,6] 104[590,6] 105[596,6] 106[602,6] 107[608,6] 108[614,6] 109[620,6] 110[626,6] 111[632,6] 112[638,6] 113[644,6] 114[650,6] 115[656,6] 116[662,6] 117[668,6] 118[674,6] 119[680,6] 120[686,6] 121[692,6] 122[698,6] 123[704,6] 124[710,6] 125[716,6] 126[722,6] 127[728,6] 133[734,1] 134[735,5] 135[740,1] 136[741,5] 137[746,1] 139[747,1] 140[748,1] 142[749,1] 143[750,1] 144[751,1] 145[752,1] 146[753,1] 147[754,1] 152[755,1] 153[756,1] 156[757,1] 157[758,1] 159[759,1] 160[760,1] 161[761,1] 162[762,1] 163[763,1] 166[764,1] 167[765,1] 168[766,1] 169[767,1] 170[768,1] 171[769,2] 172[771,1] 173[772,1] 174[773,1] 179[774,1] 180[775,1] 183[776,1] 184[777,1] 186[778,1] 187[779,1] 188[780,1] 189[781,1] 190[782,1] 193[783,1] 194[784,1] 195[785,1] 196[786,1] 197[787,1] 198[788,2] 199[790,1] 201[791,1] 202[792,1] 203[793,1] 204[794,1] 205[795,1] 206[796,1] 208[797,1] 210[798,1] 212[799,1] 214[800,1] 215[801,2] 216[803,1] 218[804,1] 220[805,1] 221[806,2] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 210 212 214 215
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 210 212 214 215
;; live  kill	 14 [lr]
;; rd  in  	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  gen 	(29)
10, 20, 123, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801, 802

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/vfp/vfpdouble.c:980 (set (reg/v:SI 142 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:980 (set (reg/v:SI 143 [ dn ])
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ dn ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:980 (set (reg/v:SI 144 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:980 (set (reg/v:SI 145 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:984 (set (reg:SI 0 r0)
        (reg/v:SI 143 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 143 [ dn ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:984 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:984 (set (reg:DI 140 [ D.4995 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 147)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 146)
        (and:DI (reg:DI 140 [ D.4995 ])
            (reg:DI 147))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 147)
        (expr_list:REG_EQUAL (and:DI (reg:DI 140 [ D.4995 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 14 13 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 210)
        (lshiftrt:SI (subreg:SI (reg:DI 146) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 146)
        (nil)))

(insn 16 14 17 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -30 [0xffffffffffffffe2])) [0 vdn.sign+0 S2 A16])
        (subreg:HI (reg:SI 210) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 210)
        (nil)))

(insn 17 16 19 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 212)
        (ashiftrt:SI (subreg:SI (reg:DI 140 [ D.4995 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 19 17 20 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 152)
        (zero_extend:SI (subreg:HI (reg:SI 212) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 212)
        (nil)))

(insn 20 19 21 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 153)
        (ashift:SI (reg:SI 152)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 152)
        (nil)))

(insn 21 20 22 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 135 [ D.5931 ])
        (lshiftrt:SI (reg:SI 153)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_EQUAL (and:SI (reg:SI 152)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 22 21 23 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0])) [0 vdn.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 135 [ D.5931 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 156)
        (lshiftrt:SI (subreg:SI (reg:DI 140 [ D.4995 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 215 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 140 [ D.4995 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 215 [+4 ])
        (ior:SI (reg:SI 156)
            (reg:SI 215 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 214)
        (ashift:SI (subreg:SI (reg:DI 140 [ D.4995 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 140 [ D.4995 ])
        (nil)))

(insn 27 26 160 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 157)
        (ashift:SI (reg:SI 215 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 160 27 28 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 136 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 28 160 29 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 214)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 214)
        (nil)))

(insn 29 28 30 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 0)
        (ior:SI (reg:SI 157)
            (subreg:SI (reg/v:DI 136 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 157)
        (nil)))

(insn 30 29 31 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 215 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 215 [+4 ])
        (nil)))

(insn 31 30 32 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 160)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 32 31 33 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 159)
        (subreg:HI (reg:SI 160) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 160)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 33 32 34 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 161 [ D.5931 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 135 [ D.5931 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 34 33 35 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 162)
        (sign_extend:SI (reg:HI 159))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 159)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 35 34 36 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.5931 ])
            (reg:SI 162))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 162)
        (nil)))

(insn 36 35 39 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 163)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 39 36 40 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.5931 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 161 [ D.5931 ])
        (nil)))

(insn 40 39 42 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 166)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 42 40 43 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 167)
        (and:SI (reg:SI 163)
            (reg:SI 166))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 166)
        (expr_list:REG_DEAD (reg:SI 163)
            (nil))))

(insn 43 42 44 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 168)
        (subreg:QI (reg:SI 167) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 167)
        (nil)))

(insn 44 43 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 169)
        (zero_extend:SI (reg:QI 168))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 168)
        (nil)))

(insn 45 44 46 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 169)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 169)
        (nil)))

(jump_insn 46 45 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ }u54(13){ }u55(25){ }u56(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 136 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 136 170
;; live  kill	
;; rd  in  	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 798, 799, 800, 801
;; rd  gen 	(2)
742, 768
;; rd  kill	(6)
741, 742, 743, 744, 745, 768

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 170)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 136 [ significand ])
        (ior:DI (reg/v:DI 136 [ significand ])
            (reg:DI 170))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 170)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 136 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(37)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;; rd  gen 	(1)
122
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 266 "" [1 uses])

(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 136 [ significand ])) 163 {*arm_movdi} (nil))

(insn 53 52 54 4 arch/arm/vfp/vfpdouble.c:985 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.5931 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.5931 ])
        (nil)))

(jump_insn 54 53 55 4 arch/arm/vfp/vfpdouble.c:985 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; rd  out 	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u68(11){ }u69(13){ }u70(25){ }u71(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  gen 	 24 [cc] 171
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 798, 799, 800, 801
;; rd  gen 	(2)
121, 769
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 769, 770

;; Pred edge  4 [50.0%]  (fallthru)
(note 55 54 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 5 arch/arm/vfp/vfpdouble.c:985 discrim 1 (set (reg:SI 171 [ significand ])
        (subreg:SI (reg/v:DI 136 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 57 56 58 5 arch/arm/vfp/vfpdouble.c:985 discrim 1 (set (reg:SI 171 [ significand ])
        (ior:SI (reg:SI 171 [ significand ])
            (subreg:SI (reg/v:DI 136 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 136 [ significand ])
        (nil)))

(insn 58 57 59 5 arch/arm/vfp/vfpdouble.c:985 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 171 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 171 [ significand ])
        (nil)))

(jump_insn 59 58 60 5 arch/arm/vfp/vfpdouble.c:985 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 798, 799, 800, 801


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ }u78(13){ }u79(25){ }u80(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 172
;; live  kill	 14 [lr]
;; rd  in  	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 798, 799, 800, 801
;; rd  gen 	(1)
771
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 771

;; Pred edge  5 [29.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 6 arch/arm/vfp/vfpdouble.c:986 (set (reg/f:SI 172)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 62 61 63 6 arch/arm/vfp/vfpdouble.c:986 (set (reg:SI 0 r0)
        (reg/f:SI 172)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 172)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(call_insn 63 62 64 6 arch/arm/vfp/vfpdouble.c:986 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(40)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 798, 799, 800, 801


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u86(11){ }u87(13){ }u88(25){ }u89(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 216 218 220 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 216 218 220 221
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 20, 30, 39, 40, 47, 48, 121, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 798, 799, 800, 801
;; rd  gen 	(25)
6, 18, 117, 734, 737, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 803, 804, 805, 806
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 734, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 803, 804, 805, 806, 807

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 64 63 65 7 267 "" [2 uses])

(note 65 64 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 67 7 arch/arm/vfp/vfpdouble.c:988 (set (reg:SI 0 r0)
        (reg/v:SI 144 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 144 [ dm ])
        (nil)))

(call_insn 67 66 68 7 arch/arm/vfp/vfpdouble.c:988 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 68 67 69 7 arch/arm/vfp/vfpdouble.c:988 (set (reg:DI 139 [ D.5004 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 69 68 70 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 174)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 70 69 71 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 173)
        (and:DI (reg:DI 139 [ D.5004 ])
            (reg:DI 174))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 174)
        (expr_list:REG_EQUAL (and:DI (reg:DI 139 [ D.5004 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 71 70 73 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 216)
        (lshiftrt:SI (subreg:SI (reg:DI 173) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 173)
        (nil)))

(insn 73 71 74 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -46 [0xffffffffffffffd2])) [0 vdm.sign+0 S2 A16])
        (subreg:HI (reg:SI 216) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 216)
        (nil)))

(insn 74 73 76 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 218)
        (ashiftrt:SI (subreg:SI (reg:DI 139 [ D.5004 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 76 74 77 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 179)
        (zero_extend:SI (subreg:HI (reg:SI 218) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 218)
        (nil)))

(insn 77 76 78 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 180)
        (ashift:SI (reg:SI 179)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 179)
        (nil)))

(insn 78 77 79 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 133 [ D.5946 ])
        (lshiftrt:SI (reg:SI 180)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 180)
        (expr_list:REG_EQUAL (and:SI (reg:SI 179)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 79 78 80 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0])) [0 vdm.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 133 [ D.5946 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 80 79 81 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 183)
        (lshiftrt:SI (subreg:SI (reg:DI 139 [ D.5004 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 81 80 82 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 221 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 139 [ D.5004 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 82 81 83 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 221 [+4 ])
        (ior:SI (reg:SI 183)
            (reg:SI 221 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 183)
        (nil)))

(insn 83 82 84 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 220)
        (ashift:SI (subreg:SI (reg:DI 139 [ D.5004 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 139 [ D.5004 ])
        (nil)))

(insn 84 83 161 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 184)
        (ashift:SI (reg:SI 221 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 161 84 85 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 134 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 85 161 86 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 220)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 220)
        (nil)))

(insn 86 85 87 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 0)
        (ior:SI (reg:SI 184)
            (subreg:SI (reg/v:DI 134 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 184)
        (nil)))

(insn 87 86 88 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 221 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 221 [+4 ])
        (nil)))

(insn 88 87 89 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 187)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 89 88 90 7 arch/arm/vfp/vfp.h:309 (set (reg:HI 186)
        (subreg:HI (reg:SI 187) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 187)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 90 89 91 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 188 [ D.5946 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 133 [ D.5946 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 91 90 92 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 189)
        (sign_extend:SI (reg:HI 186))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 186)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 92 91 93 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.5946 ])
            (reg:SI 189))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 189)
        (nil)))

(insn 93 92 96 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 190)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 96 93 97 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.5946 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 188 [ D.5946 ])
        (nil)))

(insn 97 96 99 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 193)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 99 97 100 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 194)
        (and:SI (reg:SI 190)
            (reg:SI 193))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 193)
        (expr_list:REG_DEAD (reg:SI 190)
            (nil))))

(insn 100 99 101 7 arch/arm/vfp/vfp.h:309 (set (reg:QI 195)
        (subreg:QI (reg:SI 194) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 194)
        (nil)))

(insn 101 100 102 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 196)
        (zero_extend:SI (reg:QI 195))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 195)
        (nil)))

(insn 102 101 103 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 196)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 196)
        (nil)))

(jump_insn 103 102 104 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u135(11){ }u136(13){ }u137(25){ }u138(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 134 197
;; live  kill	
;; rd  in  	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(2)
736, 787
;; rd  kill	(6)
735, 736, 737, 738, 739, 787

;; Pred edge  7 [50.0%]  (fallthru)
(note 104 103 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 105 104 106 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 197)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 106 105 107 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 134 [ significand ])
        (ior:DI (reg/v:DI 134 [ significand ])
            (reg:DI 197))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 134 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(63)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u142(11){ }u143(13){ }u144(25){ }u145(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(1)
116
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 107 106 108 9 268 "" [1 uses])

(note 108 107 109 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 134 [ significand ])) 163 {*arm_movdi} (nil))

(insn 110 109 111 9 arch/arm/vfp/vfpdouble.c:989 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.5946 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.5946 ])
        (nil)))

(jump_insn 111 110 112 9 arch/arm/vfp/vfpdouble.c:989 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; rd  out 	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  10 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u150(11){ }u151(13){ }u152(25){ }u153(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  gen 	 24 [cc] 198
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(2)
115, 788
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 788, 789

;; Pred edge  9 [61.0%]  (fallthru)
(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 113 112 114 10 arch/arm/vfp/vfpdouble.c:989 discrim 1 (set (reg:SI 198 [ significand ])
        (subreg:SI (reg/v:DI 134 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 114 113 115 10 arch/arm/vfp/vfpdouble.c:989 discrim 1 (set (reg:SI 198 [ significand ])
        (ior:SI (reg:SI 198 [ significand ])
            (subreg:SI (reg/v:DI 134 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 134 [ significand ])
        (nil)))

(insn 115 114 116 10 arch/arm/vfp/vfpdouble.c:989 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 198 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 198 [ significand ])
        (nil)))

(jump_insn 116 115 117 10 arch/arm/vfp/vfpdouble.c:989 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  11 [39.0%]  (fallthru)
;; Succ edge  12 [61.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u159(11){ }u160(13){ }u161(25){ }u162(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 199
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 199
;; live  kill	 14 [lr]
;; rd  in  	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(1)
790
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 790

;; Pred edge  10 [39.0%]  (fallthru)
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 11 arch/arm/vfp/vfpdouble.c:990 (set (reg/f:SI 199)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 119 118 120 11 arch/arm/vfp/vfpdouble.c:990 (set (reg:SI 0 r0)
        (reg/f:SI 199)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 199)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(call_insn 120 119 121 11 arch/arm/vfp/vfpdouble.c:990 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(66)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u168(11){ }u169(13){ }u170(25){ }u171(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 201 202 203 204 205 206 208
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 137 201 202 203 204 205 206 208
;; live  kill	 14 [lr]
;; rd  in  	(67)
6, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 798, 799, 800, 801, 803, 804, 805, 806
;; rd  gen 	(9)
0, 746, 791, 792, 793, 794, 795, 796, 797
;; rd  kill	(28)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 49, 50, 51, 52, 53, 54, 55, 746, 791, 792, 793, 794, 795, 796, 797

;; Pred edge  9 [39.0%] 
;; Pred edge  10 [61.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 121 120 122 12 269 "" [2 uses])

(note 122 121 123 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 123 122 125 12 arch/arm/vfp/vfpdouble.c:995 (set (reg:SI 201 [ vdm.sign ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -46 [0xffffffffffffffd2])) [0 vdm.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 125 123 126 12 arch/arm/vfp/vfpdouble.c:995 (set (reg:SI 203)
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (nil))

(insn 126 125 127 12 arch/arm/vfp/vfpdouble.c:995 (set (reg:SI 202)
        (xor:SI (reg:SI 201 [ vdm.sign ])
            (reg:SI 203))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 203)
        (expr_list:REG_DEAD (reg:SI 201 [ vdm.sign ])
            (expr_list:REG_EQUAL (xor:SI (reg:SI 201 [ vdm.sign ])
                    (const_int -32768 [0xffffffffffff8000]))
                (nil)))))

(insn 127 126 128 12 arch/arm/vfp/vfpdouble.c:995 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -46 [0xffffffffffffffd2])) [0 vdm.sign+0 S2 A16])
        (subreg:HI (reg:SI 202) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 202)
        (nil)))

(insn 128 127 129 12 arch/arm/vfp/vfpdouble.c:997 (set (reg/f:SI 204)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 129 128 130 12 arch/arm/vfp/vfpdouble.c:997 (set (reg/f:SI 205)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 130 129 131 12 arch/arm/vfp/vfpdouble.c:997 (set (reg/f:SI 206)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 131 130 132 12 arch/arm/vfp/vfpdouble.c:997 (set (reg:SI 0 r0)
        (reg/f:SI 204)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 132 131 133 12 arch/arm/vfp/vfpdouble.c:997 (set (reg:SI 1 r1)
        (reg/f:SI 205)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 205)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(insn 133 132 134 12 arch/arm/vfp/vfpdouble.c:997 (set (reg:SI 2 r2)
        (reg/f:SI 206)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 206)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(insn 134 133 135 12 arch/arm/vfp/vfpdouble.c:997 (set (reg:SI 3 r3)
        (reg/v:SI 145 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 135 134 136 12 arch/arm/vfp/vfpdouble.c:997 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_add") [flags 0x3] <function_decl 0x10b08080 vfp_double_add>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 136 135 138 12 arch/arm/vfp/vfpdouble.c:997 (set (reg/v:SI 137 [ exceptions ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 138 136 139 12 arch/arm/vfp/vfpdouble.c:999 (set (reg/f:SI 208)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10e08c40>)) 167 {*arm_movsi_insn} (nil))

(insn 139 138 140 12 arch/arm/vfp/vfpdouble.c:999 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 208)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 208)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x10e08c40>)
            (nil))))

(insn 140 139 141 12 arch/arm/vfp/vfpdouble.c:999 (set (reg:SI 0 r0)
        (reg/v:SI 142 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 142 [ dd ])
        (nil)))

(insn 141 140 142 12 arch/arm/vfp/vfpdouble.c:999 (set (reg:SI 1 r1)
        (reg/f:SI 204)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 204)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 142 141 143 12 arch/arm/vfp/vfpdouble.c:999 (set (reg:SI 2 r2)
        (reg/v:SI 145 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ fpscr ])
        (nil)))

(insn 143 142 144 12 arch/arm/vfp/vfpdouble.c:999 (set (reg:SI 3 r3)
        (reg/v:SI 137 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ exceptions ])
        (nil)))

(call_insn 144 143 156 12 arch/arm/vfp/vfpdouble.c:999 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 156 144 0 12 arch/arm/vfp/vfpdouble.c:1000 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(75)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_multiply_accumulate (vfp_double_multiply_accumulate)[0:174]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 34 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 36 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 19 n_edges 27 count 36 (  1.9)


vfp_double_multiply_accumulate

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={17d,16u} r1={12d,7u} r2={12d,4u} r3={12d,4u} r11={1d,18u} r12={9d} r13={1d,27u} r14={9d,1u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={23d,15u} r25={1d,38u,9d} r26={1d,19u,2d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} r133={1d,2u,1d} r134={1d,2u} r135={5d,6u,1d} r136={1d,3u} r137={5d,8u,1d} r138={1d,3u} r139={5d,8u,1d} r140={1d,1u} r142={1d,1u} r143={1d,5u,1d} r144={1d,5u,1d} r145={1d,5u,1d} r147={1d,2u} r148={1d,1u} r149={1d,1u} r150={1d,3u} r151={1d,2u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r159={1d,1u,1d} r160={1d,1u} r163={1d,1u} r164={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,2u} r169={1d,1u} r170={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={2d,2u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r186={1d,1u,1d} r187={1d,1u} r190={1d,1u} r191={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,2u} r196={1d,1u} r197={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={2d,2u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r212={1d,1u,1d} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r221={1d,1u,1d} r222={1d,1u} r225={1d,1u} r226={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,2u} r231={1d,1u} r232={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,2u} r244={1d,1u} r245={1d,1u} r247={1d,1u} r249={1d,1u} r251={1d,1u} r253={1d,1u} r254={2d,3u} r255={1d,1u} r257={1d,1u} r259={1d,1u} r260={2d,3u} r261={1d,1u} r263={1d,1u} r265={1d,1u} r266={2d,3u} 
;;    total ref usage 1411{1091d,298u,22e} in 175{167 regular + 8 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977
0[0,17] 1[17,12] 2[29,12] 3[41,12] 11[53,1] 12[54,9] 13[63,1] 14[64,9] 15[73,8] 16[81,8] 17[89,8] 18[97,8] 19[105,8] 20[113,8] 21[121,8] 22[129,8] 23[137,8] 24[145,23] 25[168,1] 26[169,1] 27[170,8] 28[178,8] 29[186,8] 30[194,8] 31[202,8] 32[210,8] 33[218,8] 34[226,8] 35[234,8] 36[242,8] 37[250,8] 38[258,8] 39[266,8] 40[274,8] 41[282,8] 42[290,8] 43[298,8] 44[306,8] 45[314,8] 46[322,8] 47[330,8] 48[338,8] 49[346,8] 50[354,8] 51[362,8] 52[370,8] 53[378,8] 54[386,8] 55[394,8] 56[402,8] 57[410,8] 58[418,8] 59[426,8] 60[434,8] 61[442,8] 62[450,8] 63[458,8] 64[466,8] 65[474,8] 66[482,8] 67[490,8] 68[498,8] 69[506,8] 70[514,8] 71[522,8] 72[530,8] 73[538,8] 74[546,8] 75[554,8] 76[562,8] 77[570,8] 78[578,8] 79[586,8] 80[594,8] 81[602,8] 82[610,8] 83[618,8] 84[626,8] 85[634,8] 86[642,8] 87[650,8] 88[658,8] 89[666,8] 90[674,8] 91[682,8] 92[690,8] 93[698,8] 94[706,8] 95[714,8] 96[722,8] 97[730,8] 98[738,8] 99[746,8] 100[754,8] 101[762,8] 102[770,8] 103[778,8] 104[786,8] 105[794,8] 106[802,8] 107[810,8] 108[818,8] 109[826,8] 110[834,8] 111[842,8] 112[850,8] 113[858,8] 114[866,8] 115[874,8] 116[882,8] 117[890,8] 118[898,8] 119[906,8] 120[914,8] 121[922,8] 122[930,8] 123[938,8] 124[946,8] 125[954,8] 126[962,8] 127[970,8] 133[978,1] 134[979,1] 135[980,5] 136[985,1] 137[986,5] 138[991,1] 139[992,5] 140[997,1] 142[998,1] 143[999,1] 144[1000,1] 145[1001,1] 147[1002,1] 148[1003,1] 149[1004,1] 150[1005,1] 151[1006,1] 152[1007,1] 153[1008,1] 154[1009,1] 159[1010,1] 160[1011,1] 163[1012,1] 164[1013,1] 166[1014,1] 167[1015,1] 168[1016,1] 169[1017,1] 170[1018,1] 173[1019,1] 174[1020,1] 175[1021,1] 176[1022,1] 177[1023,1] 178[1024,2] 179[1026,1] 180[1027,1] 181[1028,1] 186[1029,1] 187[1030,1] 190[1031,1] 191[1032,1] 193[1033,1] 194[1034,1] 195[1035,1] 196[1036,1] 197[1037,1] 200[1038,1] 201[1039,1] 202[1040,1] 203[1041,1] 204[1042,1] 205[1043,2] 206[1045,1] 207[1046,1] 208[1047,1] 209[1048,1] 210[1049,1] 212[1050,1] 213[1051,1] 214[1052,1] 215[1053,1] 216[1054,1] 221[1055,1] 222[1056,1] 225[1057,1] 226[1058,1] 228[1059,1] 229[1060,1] 230[1061,1] 231[1062,1] 232[1063,1] 235[1064,1] 236[1065,1] 237[1066,1] 238[1067,1] 239[1068,1] 240[1069,1] 241[1070,1] 242[1071,1] 243[1072,1] 244[1073,1] 245[1074,1] 247[1075,1] 249[1076,1] 251[1077,1] 253[1078,1] 254[1079,2] 255[1081,1] 257[1082,1] 259[1083,1] 260[1084,2] 261[1086,1] 263[1087,1] 265[1088,1] 266[1089,2] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d16(0){ }d28(1){ }d40(2){ }d52(3){ }d53(11){ }d62(12){ }d63(13){ }d72(14){ }d168(25){ }d169(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
16, 28, 40, 52, 53, 62, 63, 72, 168, 169
;; rd  kill	(75)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 168, 169
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
16, 28, 40, 52, 53, 62, 63, 72, 168, 169

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d53(bb 0 insn -1) }u1(13){ d63(bb 0 insn -1) }u2(25){ d168(bb 0 insn -1) }u3(26){ d169(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 139 145 147 148 149 150 151 152 153 154 159 160 163 164 166 167 168 169 170 173 174 175 176 249 251 253 254
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 138 139 145 147 148 149 150 151 152 153 154 159 160 163 164 166 167 168 169 170 173 174 175 176 249 251 253 254
;; live  kill	 14 [lr]
;; rd  in  	(10)
16, 28, 40, 52, 53, 62, 63, 72, 168, 169
;; rd  gen 	(31)
14, 27, 165, 991, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1076, 1077, 1078, 1079
;; rd  kill	(89)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 991, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1076, 1077, 1078, 1079, 1080
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; rd  out 	(38)
14, 27, 40, 52, 53, 62, 63, 165, 168, 169, 991, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1076, 1077, 1078, 1079
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d16(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d28(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d40(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d52(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 6
;;      reg 26 { d169(bb 0 insn -1) }
;;   eq_note reg 26 { }
;;   UD chains for insn luid 5 uid 7
;;      reg 26 { d169(bb 0 insn -1) }
;;   eq_note reg 26 { }
;;   UD chains for insn luid 6 uid 11
;;      reg 148 { d1003(bb 2 insn 3) }
;;   UD chains for insn luid 7 uid 12
;;      reg 13 { d63(bb 0 insn -1) }
;;      reg 0 { d15(bb 2 insn 11) }
;;   UD chains for insn luid 8 uid 13
;;      reg 0 { d14(bb 2 insn 12) }
;;      reg 1 { d27(bb 2 insn 12) }
;;   UD chains for insn luid 10 uid 15
;;      reg 145 { d1001(bb 2 insn 13) }
;;      reg 154 { d1009(bb 2 insn 14) }
;;   eq_note reg 145 { }
;;   UD chains for insn luid 11 uid 16
;;      reg 153 { d1008(bb 2 insn 15) }
;;   UD chains for insn luid 12 uid 18
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 249 { d1076(bb 2 insn 16) }
;;   UD chains for insn luid 13 uid 19
;;      reg 145 { d1001(bb 2 insn 13) }
;;   UD chains for insn luid 14 uid 21
;;      reg 251 { d1077(bb 2 insn 19) }
;;   UD chains for insn luid 15 uid 22
;;      reg 159 { d1010(bb 2 insn 21) }
;;   UD chains for insn luid 16 uid 23
;;      reg 160 { d1011(bb 2 insn 22) }
;;   eq_note reg 159 { }
;;   UD chains for insn luid 17 uid 24
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 138 { d991(bb 2 insn 23) }
;;   UD chains for insn luid 18 uid 25
;;      reg 145 { d1001(bb 2 insn 13) }
;;   UD chains for insn luid 19 uid 26
;;      reg 145 { d1001(bb 2 insn 13) }
;;   UD chains for insn luid 20 uid 27
;;      reg 163 { d1012(bb 2 insn 25) }
;;      reg 254 { d1080(bb 2 insn 26) }
;;   UD chains for insn luid 21 uid 28
;;      reg 145 { d1001(bb 2 insn 13) }
;;   UD chains for insn luid 22 uid 29
;;      reg 254 { d1079(bb 2 insn 27) }
;;   UD chains for insn luid 24 uid 30
;;      reg 139 read/write { d992(bb 2 insn 231) }
;;      reg 253 { d1078(bb 2 insn 28) }
;;   UD chains for insn luid 25 uid 31
;;      reg 139 { d996(bb 2 insn 30) d992(bb 2 insn 231) }
;;      reg 139 read/write { d996(bb 2 insn 30) d992(bb 2 insn 231) }
;;      reg 164 { d1013(bb 2 insn 29) }
;;   UD chains for insn luid 26 uid 32
;;      reg 139 read/write { d996(bb 2 insn 30) d995(bb 2 insn 31) d992(bb 2 insn 231) }
;;      reg 254 { d1079(bb 2 insn 27) }
;;   UD chains for insn luid 28 uid 34
;;      reg 167 { d1015(bb 2 insn 33) }
;;   UD chains for insn luid 29 uid 35
;;      reg 138 { d991(bb 2 insn 23) }
;;   UD chains for insn luid 30 uid 36
;;      reg 166 { d1014(bb 2 insn 34) }
;;   UD chains for insn luid 31 uid 37
;;      reg 168 { d1016(bb 2 insn 35) }
;;      reg 169 { d1017(bb 2 insn 36) }
;;   UD chains for insn luid 32 uid 38
;;      reg 24 { d166(bb 2 insn 37) }
;;   UD chains for insn luid 33 uid 41
;;      reg 168 { d1016(bb 2 insn 35) }
;;   UD chains for insn luid 34 uid 42
;;      reg 24 { d147(bb 2 insn 41) }
;;   UD chains for insn luid 35 uid 44
;;      reg 170 { d1018(bb 2 insn 38) }
;;      reg 173 { d1019(bb 2 insn 42) }
;;   UD chains for insn luid 36 uid 45
;;      reg 174 { d1020(bb 2 insn 44) }
;;   UD chains for insn luid 37 uid 46
;;      reg 175 { d1021(bb 2 insn 45) }
;;   UD chains for insn luid 38 uid 47
;;      reg 176 { d1022(bb 2 insn 46) }
;;   UD chains for insn luid 39 uid 48
;;      reg 24 { d165(bb 2 insn 47) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u57(11){ d53(bb 0 insn -1) }u58(13){ d63(bb 0 insn -1) }u59(25){ d168(bb 0 insn -1) }u60(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 139 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; live  gen 	 139 177
;; live  kill	
;; rd  in  	(38)
14, 27, 40, 52, 53, 62, 63, 165, 168, 169, 991, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1076, 1077, 1078, 1079
;; rd  gen 	(2)
993, 1023
;; rd  kill	(6)
992, 993, 994, 995, 996, 1023
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; rd  out 	(39)
14, 27, 40, 52, 53, 62, 63, 165, 168, 169, 991, 993, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1076, 1077, 1078, 1079
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 51
;;      reg 139 { d994(bb 2 insn 32) }
;;      reg 177 { d1023(bb 3 insn 50) }
;;   eq_note reg 139 { }

( 2 3 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u64(11){ d53(bb 0 insn -1) }u65(13){ d63(bb 0 insn -1) }u66(25){ d168(bb 0 insn -1) }u67(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(40)
14, 27, 40, 52, 53, 62, 63, 165, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1076, 1077, 1078, 1079
;; rd  gen 	(1)
164
;; rd  kill	(23)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 147 149 150 151 152
;; rd  out 	(40)
14, 27, 40, 52, 53, 62, 63, 164, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1076, 1077, 1078, 1079
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 54
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 139 { d994(bb 2 insn 32) d993(bb 3 insn 51) }
;;   UD chains for insn luid 1 uid 55
;;      reg 138 { d991(bb 2 insn 23) }
;;   UD chains for insn luid 2 uid 56
;;      reg 24 { d164(bb 4 insn 55) }

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u72(11){ d53(bb 0 insn -1) }u73(13){ d63(bb 0 insn -1) }u74(25){ d168(bb 0 insn -1) }u75(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 147 149 150 151 152
;; live  gen 	 24 [cc] 178
;; live  kill	
;; rd  in  	(40)
14, 27, 40, 52, 53, 62, 63, 164, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1076, 1077, 1078, 1079
;; rd  gen 	(2)
163, 1024
;; rd  kill	(25)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 1024, 1025
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; rd  out 	(41)
14, 27, 40, 52, 53, 62, 63, 163, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1076, 1077, 1078, 1079
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 58
;;      reg 139 { d994(bb 2 insn 32) d993(bb 3 insn 51) }
;;   UD chains for insn luid 1 uid 59
;;      reg 139 { d994(bb 2 insn 32) d993(bb 3 insn 51) }
;;      reg 178 { d1025(bb 5 insn 58) }
;;   UD chains for insn luid 2 uid 60
;;      reg 178 { d1024(bb 5 insn 59) }
;;   UD chains for insn luid 3 uid 61
;;      reg 24 { d163(bb 5 insn 60) }

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u81(11){ d53(bb 0 insn -1) }u82(13){ d63(bb 0 insn -1) }u83(25){ d168(bb 0 insn -1) }u84(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; live  gen 	 0 [r0] 179
;; live  kill	 14 [lr]
;; rd  in  	(41)
14, 27, 40, 52, 53, 62, 63, 163, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1076, 1077, 1078, 1079
;; rd  gen 	(1)
1026
;; rd  kill	(10)
64, 65, 66, 67, 68, 69, 70, 71, 72, 1026
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; rd  out 	(42)
14, 27, 40, 52, 53, 62, 63, 163, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1076, 1077, 1078, 1079
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 63
;;      reg 25 { d168(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 64
;;      reg 179 { d1026(bb 6 insn 63) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 65
;;      reg 13 { d63(bb 0 insn -1) }
;;      reg 0 { d13(bb 6 insn 64) }

( 4 5 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u90(11){ d53(bb 0 insn -1) }u91(13){ d63(bb 0 insn -1) }u92(25){ d168(bb 0 insn -1) }u93(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 137 144 180 181 186 187 190 191 193 194 195 196 197 200 201 202 203 255 257 259 260
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 136 137 144 180 181 186 187 190 191 193 194 195 196 197 200 201 202 203 255 257 259 260
;; live  kill	 14 [lr]
;; rd  in  	(43)
14, 27, 40, 52, 53, 62, 63, 163, 164, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1076, 1077, 1078, 1079
;; rd  gen 	(25)
10, 25, 159, 985, 988, 1000, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1081, 1082, 1083, 1084
;; rd  kill	(83)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 985, 1000, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1081, 1082, 1083, 1084, 1085
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; rd  out 	(64)
10, 25, 40, 52, 53, 62, 63, 159, 168, 169, 985, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 68
;;      reg 149 { d1004(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 69
;;      reg 13 { d63(bb 0 insn -1) }
;;      reg 0 { d11(bb 7 insn 68) }
;;   UD chains for insn luid 2 uid 70
;;      reg 0 { d10(bb 7 insn 69) }
;;      reg 1 { d25(bb 7 insn 69) }
;;   UD chains for insn luid 4 uid 72
;;      reg 144 { d1000(bb 7 insn 70) }
;;      reg 181 { d1028(bb 7 insn 71) }
;;   eq_note reg 144 { }
;;   UD chains for insn luid 5 uid 73
;;      reg 180 { d1027(bb 7 insn 72) }
;;   UD chains for insn luid 6 uid 75
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 255 { d1081(bb 7 insn 73) }
;;   UD chains for insn luid 7 uid 76
;;      reg 144 { d1000(bb 7 insn 70) }
;;   UD chains for insn luid 8 uid 78
;;      reg 257 { d1082(bb 7 insn 76) }
;;   UD chains for insn luid 9 uid 79
;;      reg 186 { d1029(bb 7 insn 78) }
;;   UD chains for insn luid 10 uid 80
;;      reg 187 { d1030(bb 7 insn 79) }
;;   eq_note reg 186 { }
;;   UD chains for insn luid 11 uid 81
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 136 { d985(bb 7 insn 80) }
;;   UD chains for insn luid 12 uid 82
;;      reg 144 { d1000(bb 7 insn 70) }
;;   UD chains for insn luid 13 uid 83
;;      reg 144 { d1000(bb 7 insn 70) }
;;   UD chains for insn luid 14 uid 84
;;      reg 190 { d1031(bb 7 insn 82) }
;;      reg 260 { d1085(bb 7 insn 83) }
;;   UD chains for insn luid 15 uid 85
;;      reg 144 { d1000(bb 7 insn 70) }
;;   UD chains for insn luid 16 uid 86
;;      reg 260 { d1084(bb 7 insn 84) }
;;   UD chains for insn luid 18 uid 87
;;      reg 137 read/write { d986(bb 7 insn 232) }
;;      reg 259 { d1083(bb 7 insn 85) }
;;   UD chains for insn luid 19 uid 88
;;      reg 137 { d990(bb 7 insn 87) d986(bb 7 insn 232) }
;;      reg 137 read/write { d990(bb 7 insn 87) d986(bb 7 insn 232) }
;;      reg 191 { d1032(bb 7 insn 86) }
;;   UD chains for insn luid 20 uid 89
;;      reg 137 read/write { d990(bb 7 insn 87) d989(bb 7 insn 88) d986(bb 7 insn 232) }
;;      reg 260 { d1084(bb 7 insn 84) }
;;   UD chains for insn luid 22 uid 91
;;      reg 194 { d1034(bb 7 insn 90) }
;;   UD chains for insn luid 23 uid 92
;;      reg 136 { d985(bb 7 insn 80) }
;;   UD chains for insn luid 24 uid 93
;;      reg 193 { d1033(bb 7 insn 91) }
;;   UD chains for insn luid 25 uid 94
;;      reg 195 { d1035(bb 7 insn 92) }
;;      reg 196 { d1036(bb 7 insn 93) }
;;   UD chains for insn luid 26 uid 95
;;      reg 24 { d160(bb 7 insn 94) }
;;   UD chains for insn luid 27 uid 98
;;      reg 195 { d1035(bb 7 insn 92) }
;;   UD chains for insn luid 28 uid 99
;;      reg 24 { d146(bb 7 insn 98) }
;;   UD chains for insn luid 29 uid 101
;;      reg 197 { d1037(bb 7 insn 95) }
;;      reg 200 { d1038(bb 7 insn 99) }
;;   UD chains for insn luid 30 uid 102
;;      reg 201 { d1039(bb 7 insn 101) }
;;   UD chains for insn luid 31 uid 103
;;      reg 202 { d1040(bb 7 insn 102) }
;;   UD chains for insn luid 32 uid 104
;;      reg 203 { d1041(bb 7 insn 103) }
;;   UD chains for insn luid 33 uid 105
;;      reg 24 { d159(bb 7 insn 104) }

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u139(11){ d53(bb 0 insn -1) }u140(13){ d63(bb 0 insn -1) }u141(25){ d168(bb 0 insn -1) }u142(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 137 204
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; live  gen 	 137 204
;; live  kill	
;; rd  in  	(64)
10, 25, 40, 52, 53, 62, 63, 159, 168, 169, 985, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(2)
987, 1042
;; rd  kill	(6)
986, 987, 988, 989, 990, 1042
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; rd  out 	(65)
10, 25, 40, 52, 53, 62, 63, 159, 168, 169, 985, 987, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 108
;;      reg 137 { d988(bb 7 insn 89) }
;;      reg 204 { d1042(bb 8 insn 107) }
;;   eq_note reg 137 { }

( 7 8 )->[9]->( 10 12 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u146(11){ d53(bb 0 insn -1) }u147(13){ d63(bb 0 insn -1) }u148(25){ d168(bb 0 insn -1) }u149(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(66)
10, 25, 40, 52, 53, 62, 63, 159, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(1)
158
;; rd  kill	(23)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147 150 151 152
;; rd  out 	(66)
10, 25, 40, 52, 53, 62, 63, 158, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 111
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 137 { d988(bb 7 insn 89) d987(bb 8 insn 108) }
;;   UD chains for insn luid 1 uid 112
;;      reg 136 { d985(bb 7 insn 80) }
;;   UD chains for insn luid 2 uid 113
;;      reg 24 { d158(bb 9 insn 112) }

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u154(11){ d53(bb 0 insn -1) }u155(13){ d63(bb 0 insn -1) }u156(25){ d168(bb 0 insn -1) }u157(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 205
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147 150 151 152
;; live  gen 	 24 [cc] 205
;; live  kill	
;; rd  in  	(66)
10, 25, 40, 52, 53, 62, 63, 158, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(2)
157, 1043
;; rd  kill	(25)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 1043, 1044
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; rd  out 	(67)
10, 25, 40, 52, 53, 62, 63, 157, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 115
;;      reg 137 { d988(bb 7 insn 89) d987(bb 8 insn 108) }
;;   UD chains for insn luid 1 uid 116
;;      reg 137 { d988(bb 7 insn 89) d987(bb 8 insn 108) }
;;      reg 205 { d1044(bb 10 insn 115) }
;;   UD chains for insn luid 2 uid 117
;;      reg 205 { d1043(bb 10 insn 116) }
;;   UD chains for insn luid 3 uid 118
;;      reg 24 { d157(bb 10 insn 117) }

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u163(11){ d53(bb 0 insn -1) }u164(13){ d63(bb 0 insn -1) }u165(25){ d168(bb 0 insn -1) }u166(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 206
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; live  gen 	 0 [r0] 206
;; live  kill	 14 [lr]
;; rd  in  	(67)
10, 25, 40, 52, 53, 62, 63, 157, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(1)
1045
;; rd  kill	(10)
64, 65, 66, 67, 68, 69, 70, 71, 72, 1045
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; rd  out 	(68)
10, 25, 40, 52, 53, 62, 63, 157, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 120
;;      reg 25 { d168(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 121
;;      reg 206 { d1045(bb 11 insn 120) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 122
;;      reg 13 { d63(bb 0 insn -1) }
;;      reg 0 { d9(bb 11 insn 121) }

( 9 10 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u172(11){ d53(bb 0 insn -1) }u173(13){ d63(bb 0 insn -1) }u174(25){ d168(bb 0 insn -1) }u175(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 140 207 208 209 210
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 140 207 208 209 210
;; live  kill	 14 [lr]
;; rd  in  	(69)
10, 25, 40, 52, 53, 62, 63, 157, 158, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(7)
6, 154, 997, 1046, 1047, 1048, 1049
;; rd  kill	(54)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 997, 1046, 1047, 1048, 1049
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; rd  out 	(73)
6, 25, 40, 52, 53, 62, 63, 154, 168, 169, 985, 987, 988, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 125
;;      reg 25 { d168(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 126
;;      reg 25 { d168(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 127
;;      reg 25 { d168(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 128
;;      reg 207 { d1046(bb 12 insn 125) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 4 uid 129
;;      reg 208 { d1047(bb 12 insn 126) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 130
;;      reg 209 { d1048(bb 12 insn 127) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 6 uid 131
;;      reg 150 { d1005(bb 2 insn 5) }
;;   UD chains for insn luid 7 uid 132
;;      reg 13 { d63(bb 0 insn -1) }
;;      reg 0 { d7(bb 12 insn 128) }
;;      reg 1 { d23(bb 12 insn 129) }
;;      reg 2 { d35(bb 12 insn 130) }
;;      reg 3 { d47(bb 12 insn 131) }
;;   UD chains for insn luid 8 uid 133
;;      reg 0 { d6(bb 12 insn 132) }
;;   UD chains for insn luid 9 uid 134
;;      reg 151 { d1006(bb 2 insn 6) }
;;   UD chains for insn luid 10 uid 135
;;      reg 210 { d1049(bb 12 insn 134) }
;;   UD chains for insn luid 11 uid 136
;;      reg 24 { d154(bb 12 insn 135) }

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u195(11){ d53(bb 0 insn -1) }u196(13){ d63(bb 0 insn -1) }u197(25){ d168(bb 0 insn -1) }u198(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 212 213 214
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; live  gen 	 212 213 214
;; live  kill	
;; rd  in  	(73)
6, 25, 40, 52, 53, 62, 63, 154, 168, 169, 985, 987, 988, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(3)
1050, 1051, 1052
;; rd  kill	(3)
1050, 1051, 1052
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; rd  out 	(76)
6, 25, 40, 52, 53, 62, 63, 154, 168, 169, 985, 987, 988, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 138
;;      reg 25 { d168(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 141
;;      reg 212 { d1050(bb 13 insn 138) }
;;      reg 214 { d1052(bb 13 insn 140) }
;;   eq_note reg 212 { }
;;   UD chains for insn luid 3 uid 142
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 213 { d1051(bb 13 insn 141) }

( 12 13 )->[14]->( 15 16 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u205(11){ d53(bb 0 insn -1) }u206(13){ d63(bb 0 insn -1) }u207(25){ d168(bb 0 insn -1) }u208(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135 143 215 216 221 222 225 226 228 229 230 231 232 235 236 237 238 261 263 265 266
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 135 143 215 216 221 222 225 226 228 229 230 231 232 235 236 237 238 261 263 265 266
;; live  kill	 14 [lr]
;; rd  in  	(76)
6, 25, 40, 52, 53, 62, 63, 154, 168, 169, 985, 987, 988, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(26)
4, 21, 151, 978, 979, 982, 999, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1086, 1087, 1088, 1089
;; rd  kill	(84)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 978, 979, 999, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1086, 1087, 1088, 1089, 1090
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; rd  out 	(99)
4, 21, 40, 52, 53, 62, 63, 151, 168, 169, 978, 979, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 145
;;      reg 147 { d1002(bb 2 insn 2) }
;;   UD chains for insn luid 1 uid 146
;;      reg 13 { d63(bb 0 insn -1) }
;;      reg 0 { d5(bb 14 insn 145) }
;;   UD chains for insn luid 2 uid 147
;;      reg 0 { d4(bb 14 insn 146) }
;;      reg 1 { d21(bb 14 insn 146) }
;;   UD chains for insn luid 4 uid 149
;;      reg 143 { d999(bb 14 insn 147) }
;;      reg 216 { d1054(bb 14 insn 148) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 5 uid 150
;;      reg 215 { d1053(bb 14 insn 149) }
;;   UD chains for insn luid 6 uid 152
;;      reg 261 { d1086(bb 14 insn 150) }
;;   UD chains for insn luid 7 uid 153
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 133 { d978(bb 14 insn 152) }
;;   UD chains for insn luid 8 uid 154
;;      reg 143 { d999(bb 14 insn 147) }
;;   UD chains for insn luid 9 uid 156
;;      reg 263 { d1087(bb 14 insn 154) }
;;   UD chains for insn luid 10 uid 157
;;      reg 221 { d1055(bb 14 insn 156) }
;;   UD chains for insn luid 11 uid 158
;;      reg 222 { d1056(bb 14 insn 157) }
;;   eq_note reg 221 { }
;;   UD chains for insn luid 12 uid 159
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 134 { d979(bb 14 insn 158) }
;;   UD chains for insn luid 13 uid 160
;;      reg 143 { d999(bb 14 insn 147) }
;;   UD chains for insn luid 14 uid 161
;;      reg 143 { d999(bb 14 insn 147) }
;;   UD chains for insn luid 15 uid 162
;;      reg 225 { d1057(bb 14 insn 160) }
;;      reg 266 { d1090(bb 14 insn 161) }
;;   UD chains for insn luid 16 uid 163
;;      reg 143 { d999(bb 14 insn 147) }
;;   UD chains for insn luid 17 uid 164
;;      reg 266 { d1089(bb 14 insn 162) }
;;   UD chains for insn luid 19 uid 165
;;      reg 135 read/write { d980(bb 14 insn 233) }
;;      reg 265 { d1088(bb 14 insn 163) }
;;   UD chains for insn luid 20 uid 166
;;      reg 135 { d984(bb 14 insn 165) d980(bb 14 insn 233) }
;;      reg 135 read/write { d984(bb 14 insn 165) d980(bb 14 insn 233) }
;;      reg 226 { d1058(bb 14 insn 164) }
;;   UD chains for insn luid 21 uid 167
;;      reg 135 read/write { d984(bb 14 insn 165) d983(bb 14 insn 166) d980(bb 14 insn 233) }
;;      reg 266 { d1089(bb 14 insn 162) }
;;   UD chains for insn luid 23 uid 169
;;      reg 229 { d1060(bb 14 insn 168) }
;;   UD chains for insn luid 24 uid 170
;;      reg 134 { d979(bb 14 insn 158) }
;;   UD chains for insn luid 25 uid 171
;;      reg 228 { d1059(bb 14 insn 169) }
;;   UD chains for insn luid 26 uid 172
;;      reg 230 { d1061(bb 14 insn 170) }
;;      reg 231 { d1062(bb 14 insn 171) }
;;   UD chains for insn luid 27 uid 173
;;      reg 24 { d152(bb 14 insn 172) }
;;   UD chains for insn luid 28 uid 176
;;      reg 230 { d1061(bb 14 insn 170) }
;;   UD chains for insn luid 29 uid 177
;;      reg 24 { d145(bb 14 insn 176) }
;;   UD chains for insn luid 30 uid 179
;;      reg 232 { d1063(bb 14 insn 173) }
;;      reg 235 { d1064(bb 14 insn 177) }
;;   UD chains for insn luid 31 uid 180
;;      reg 236 { d1065(bb 14 insn 179) }
;;   UD chains for insn luid 32 uid 181
;;      reg 237 { d1066(bb 14 insn 180) }
;;   UD chains for insn luid 33 uid 182
;;      reg 238 { d1067(bb 14 insn 181) }
;;   UD chains for insn luid 34 uid 183
;;      reg 24 { d151(bb 14 insn 182) }

( 14 )->[15]->( 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u255(11){ d53(bb 0 insn -1) }u256(13){ d63(bb 0 insn -1) }u257(25){ d168(bb 0 insn -1) }u258(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 135 239
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; live  gen 	 135 239
;; live  kill	
;; rd  in  	(99)
4, 21, 40, 52, 53, 62, 63, 151, 168, 169, 978, 979, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;; rd  gen 	(2)
981, 1068
;; rd  kill	(6)
980, 981, 982, 983, 984, 1068
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; rd  out 	(100)
4, 21, 40, 52, 53, 62, 63, 151, 168, 169, 978, 979, 981, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 186
;;      reg 135 { d982(bb 14 insn 167) }
;;      reg 239 { d1068(bb 15 insn 185) }
;;   eq_note reg 135 { }

( 14 15 )->[16]->( 17 18 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u262(11){ d53(bb 0 insn -1) }u263(13){ d63(bb 0 insn -1) }u264(25){ d168(bb 0 insn -1) }u265(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 151
;; lr  def 	 24 [cc] 240
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; live  gen 	 24 [cc] 240
;; live  kill	
;; rd  in  	(101)
4, 21, 40, 52, 53, 62, 63, 151, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;; rd  gen 	(2)
150, 1069
;; rd  kill	(24)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 1069
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 147 150 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 147 150 152
;; rd  out 	(102)
4, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 189
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 135 { d982(bb 14 insn 167) d981(bb 15 insn 186) }
;;   UD chains for insn luid 1 uid 190
;;      reg 151 { d1006(bb 2 insn 6) }
;;   UD chains for insn luid 2 uid 191
;;      reg 240 { d1069(bb 16 insn 190) }
;;   UD chains for insn luid 3 uid 192
;;      reg 24 { d150(bb 16 insn 191) }

( 16 )->[17]->( 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u271(11){ d53(bb 0 insn -1) }u272(13){ d63(bb 0 insn -1) }u273(25){ d168(bb 0 insn -1) }u274(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 147 150 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 241 242
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 147 150 152
;; live  gen 	 241 242
;; live  kill	
;; rd  in  	(102)
4, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;; rd  gen 	(2)
1070, 1071
;; rd  kill	(2)
1070, 1071
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; rd  out 	(104)
4, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 195
;;      reg 133 { d978(bb 14 insn 152) }
;;      reg 242 { d1071(bb 17 insn 194) }
;;   eq_note reg 133 { }
;;   UD chains for insn luid 2 uid 196
;;      reg 25 { d168(bb 0 insn -1) }
;;      reg 241 { d1070(bb 17 insn 195) }

( 16 17 )->[18]->( 1 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u280(11){ d53(bb 0 insn -1) }u281(13){ d63(bb 0 insn -1) }u282(25){ d168(bb 0 insn -1) }u283(26){ d169(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142 243 244 245 247
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 142 243 244 245 247
;; live  kill	 14 [lr]
;; rd  in  	(104)
4, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;; rd  gen 	(6)
0, 998, 1072, 1073, 1074, 1075
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 64, 65, 66, 67, 68, 69, 70, 71, 72, 998, 1072, 1073, 1074, 1075
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(109)
0, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;;  UD chains for artificial uses
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 25 { d168(bb 0 insn -1) }
;;   reg 26 { d169(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 199
;;      reg 25 { d168(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 200
;;      reg 25 { d168(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 201
;;      reg 25 { d168(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 202
;;      reg 243 { d1072(bb 18 insn 199) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 4 uid 203
;;      reg 244 { d1073(bb 18 insn 200) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 204
;;      reg 245 { d1074(bb 18 insn 201) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 6 uid 205
;;      reg 150 { d1005(bb 2 insn 5) }
;;   UD chains for insn luid 7 uid 206
;;      reg 13 { d63(bb 0 insn -1) }
;;      reg 0 { d3(bb 18 insn 202) }
;;      reg 1 { d20(bb 18 insn 203) }
;;      reg 2 { d32(bb 18 insn 204) }
;;      reg 3 { d44(bb 18 insn 205) }
;;   UD chains for insn luid 8 uid 207
;;      reg 0 { d2(bb 18 insn 206) }
;;   UD chains for insn luid 9 uid 209
;;      reg 140 { d997(bb 12 insn 133) }
;;      reg 142 { d998(bb 18 insn 207) }
;;   UD chains for insn luid 10 uid 210
;;      reg 13 { d63(bb 0 insn -1) }
;;      reg 152 { d1007(bb 2 insn 7) }
;;   UD chains for insn luid 11 uid 211
;;      reg 147 { d1002(bb 2 insn 2) }
;;   UD chains for insn luid 12 uid 212
;;      reg 243 { d1072(bb 18 insn 199) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 13 uid 213
;;      reg 150 { d1005(bb 2 insn 5) }
;;   UD chains for insn luid 14 uid 214
;;      reg 247 { d1075(bb 18 insn 209) }
;;   UD chains for insn luid 15 uid 215
;;      reg 13 { d63(bb 0 insn -1) }
;;      reg 0 { d1(bb 18 insn 211) }
;;      reg 1 { d17(bb 18 insn 212) }
;;      reg 2 { d30(bb 18 insn 213) }
;;      reg 3 { d42(bb 18 insn 214) }
;;   UD chains for insn luid 16 uid 227
;;      reg 0 { d0(bb 18 insn 215) }

( 18 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u315(0){ d0(bb 18 insn 215) }u316(11){ d53(bb 0 insn -1) }u317(13){ d63(bb 0 insn -1) }u318(14){ }u319(25){ d168(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(109)
0, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(109)
0, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 18 insn 215) }
;;   reg 11 { d53(bb 0 insn -1) }
;;   reg 13 { d63(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d168(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 48 to worklist
  Adding insn 24 to worklist
  Adding insn 18 to worklist
  Adding insn 12 to worklist
  Adding insn 56 to worklist
  Adding insn 54 to worklist
  Adding insn 61 to worklist
  Adding insn 65 to worklist
  Adding insn 105 to worklist
  Adding insn 81 to worklist
  Adding insn 75 to worklist
  Adding insn 69 to worklist
  Adding insn 113 to worklist
  Adding insn 111 to worklist
  Adding insn 118 to worklist
  Adding insn 122 to worklist
  Adding insn 136 to worklist
  Adding insn 132 to worklist
  Adding insn 142 to worklist
  Adding insn 183 to worklist
  Adding insn 159 to worklist
  Adding insn 153 to worklist
  Adding insn 146 to worklist
  Adding insn 192 to worklist
  Adding insn 189 to worklist
  Adding insn 196 to worklist
  Adding insn 227 to worklist
  Adding insn 215 to worklist
  Adding insn 210 to worklist
  Adding insn 206 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 206:
Processing use of (reg 0 r0) in insn 206:
  Adding insn 202 to worklist
Processing use of (reg 1 r1) in insn 206:
  Adding insn 203 to worklist
Processing use of (reg 2 r2) in insn 206:
  Adding insn 204 to worklist
Processing use of (reg 3 r3) in insn 206:
  Adding insn 205 to worklist
Processing use of (reg 150 [ fpscr ]) in insn 205:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 245) in insn 204:
  Adding insn 201 to worklist
Processing use of (reg 25 sfp) in insn 201:
Processing use of (reg 244) in insn 203:
  Adding insn 200 to worklist
Processing use of (reg 25 sfp) in insn 200:
Processing use of (reg 243) in insn 202:
  Adding insn 199 to worklist
Processing use of (reg 25 sfp) in insn 199:
Processing use of (reg 13 sp) in insn 210:
Processing use of (reg 152 [ func ]) in insn 210:
  Adding insn 7 to worklist
Processing use of (reg 26 afp) in insn 7:
Processing use of (reg 13 sp) in insn 215:
Processing use of (reg 0 r0) in insn 215:
  Adding insn 211 to worklist
Processing use of (reg 1 r1) in insn 215:
  Adding insn 212 to worklist
Processing use of (reg 2 r2) in insn 215:
  Adding insn 213 to worklist
Processing use of (reg 3 r3) in insn 215:
  Adding insn 214 to worklist
Processing use of (reg 247) in insn 214:
  Adding insn 209 to worklist
Processing use of (reg 140 [ exceptions ]) in insn 209:
  Adding insn 133 to worklist
Processing use of (reg 142 [ D.4854 ]) in insn 209:
  Adding insn 207 to worklist
Processing use of (reg 0 r0) in insn 207:
Processing use of (reg 0 r0) in insn 133:
Processing use of (reg 150 [ fpscr ]) in insn 213:
Processing use of (reg 243) in insn 212:
Processing use of (reg 147 [ dd ]) in insn 211:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 0 r0) in insn 227:
Processing use of (reg 25 sfp) in insn 196:
Processing use of (subreg (reg 241) 0) in insn 196:
  Adding insn 195 to worklist
Processing use of (reg 133 [ D.5994 ]) in insn 195:
  Adding insn 152 to worklist
Processing use of (reg 242) in insn 195:
  Adding insn 194 to worklist
Processing use of (subreg (reg 261) 0) in insn 152:
  Adding insn 150 to worklist
Processing use of (subreg (reg 215) 4) in insn 150:
  Adding insn 149 to worklist
Processing use of (reg 143 [ D.4847 ]) in insn 149:
  Adding insn 147 to worklist
Processing use of (reg 216) in insn 149:
  Adding insn 148 to worklist
Processing use of (reg 0 r0) in insn 147:
Processing use of (reg 1 r1) in insn 147:
Processing use of (reg 25 sfp) in insn 189:
Processing use of (reg 135 [ significand ]) in insn 189:
  Adding insn 167 to worklist
  Adding insn 186 to worklist
Processing use of (reg 135 [ significand ]) in insn 186:
Processing use of (reg 239) in insn 186:
  Adding insn 185 to worklist
Processing use of (reg 135 [ significand ]) in insn 167:
  Adding insn 165 to worklist
  Adding insn 166 to worklist
  Adding insn 233 to worklist
Processing use of (reg 266 [+4 ]) in insn 167:
  Adding insn 162 to worklist
Processing use of (reg 225) in insn 162:
  Adding insn 160 to worklist
Processing use of (reg 266 [+4 ]) in insn 162:
  Adding insn 161 to worklist
Processing use of (subreg (reg 143 [ D.4847 ]) 4) in insn 161:
Processing use of (subreg (reg 143 [ D.4847 ]) 0) in insn 160:
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 166:
Processing use of (reg 135 [ significand ]) in insn 166:
Processing use of (reg 226) in insn 166:
  Adding insn 164 to worklist
Processing use of (reg 266 [+4 ]) in insn 164:
Processing use of (reg 135 [ significand ]) in insn 165:
Processing use of (reg 265) in insn 165:
  Adding insn 163 to worklist
Processing use of (subreg (reg 143 [ D.4847 ]) 0) in insn 163:
Processing use of (reg 24 cc) in insn 192:
  Adding insn 191 to worklist
Processing use of (reg 240) in insn 191:
  Adding insn 190 to worklist
Processing use of (reg 151 [ negate ]) in insn 190:
  Adding insn 6 to worklist
Processing use of (reg 26 afp) in insn 6:
Processing use of (reg 13 sp) in insn 146:
Processing use of (reg 0 r0) in insn 146:
  Adding insn 145 to worklist
Processing use of (reg 147 [ dd ]) in insn 145:
Processing use of (reg 25 sfp) in insn 153:
Processing use of (subreg (reg 133 [ D.5994 ]) 0) in insn 153:
Processing use of (reg 25 sfp) in insn 159:
Processing use of (subreg (reg 134 [ D.5991 ]) 0) in insn 159:
  Adding insn 158 to worklist
Processing use of (reg 222) in insn 158:
  Adding insn 157 to worklist
Processing use of (reg 221) in insn 157:
  Adding insn 156 to worklist
Processing use of (subreg (reg 263) 0) in insn 156:
  Adding insn 154 to worklist
Processing use of (subreg (reg 143 [ D.4847 ]) 4) in insn 154:
Processing use of (reg 24 cc) in insn 183:
  Adding insn 182 to worklist
Processing use of (reg 238) in insn 182:
  Adding insn 181 to worklist
Processing use of (reg 237) in insn 181:
  Adding insn 180 to worklist
Processing use of (subreg (reg 236) 0) in insn 180:
  Adding insn 179 to worklist
Processing use of (reg 232) in insn 179:
  Adding insn 173 to worklist
Processing use of (reg 235) in insn 179:
  Adding insn 177 to worklist
Processing use of (reg 24 cc) in insn 177:
  Adding insn 176 to worklist
Processing use of (reg 230 [ D.5991 ]) in insn 176:
  Adding insn 170 to worklist
Processing use of (subreg (reg 134 [ D.5991 ]) 0) in insn 170:
Processing use of (reg 24 cc) in insn 173:
  Adding insn 172 to worklist
Processing use of (reg 230 [ D.5991 ]) in insn 172:
Processing use of (reg 231) in insn 172:
  Adding insn 171 to worklist
Processing use of (reg 228) in insn 171:
  Adding insn 169 to worklist
Processing use of (subreg (reg 229) 0) in insn 169:
  Adding insn 168 to worklist
Processing use of (reg 25 sfp) in insn 142:
Processing use of (subreg (reg 213) 0) in insn 142:
  Adding insn 141 to worklist
Processing use of (reg 212 [ vdp.sign ]) in insn 141:
  Adding insn 138 to worklist
Processing use of (reg 214) in insn 141:
  Adding insn 140 to worklist
Processing use of (reg 25 sfp) in insn 138:
Processing use of (reg 13 sp) in insn 132:
Processing use of (reg 0 r0) in insn 132:
  Adding insn 128 to worklist
Processing use of (reg 1 r1) in insn 132:
  Adding insn 129 to worklist
Processing use of (reg 2 r2) in insn 132:
  Adding insn 130 to worklist
Processing use of (reg 3 r3) in insn 132:
  Adding insn 131 to worklist
Processing use of (reg 150 [ fpscr ]) in insn 131:
Processing use of (reg 209) in insn 130:
  Adding insn 127 to worklist
Processing use of (reg 25 sfp) in insn 127:
Processing use of (reg 208) in insn 129:
  Adding insn 126 to worklist
Processing use of (reg 25 sfp) in insn 126:
Processing use of (reg 207) in insn 128:
  Adding insn 125 to worklist
Processing use of (reg 25 sfp) in insn 125:
Processing use of (reg 24 cc) in insn 136:
  Adding insn 135 to worklist
Processing use of (reg 210) in insn 135:
  Adding insn 134 to worklist
Processing use of (reg 151 [ negate ]) in insn 134:
Processing use of (reg 13 sp) in insn 122:
Processing use of (reg 0 r0) in insn 122:
  Adding insn 121 to worklist
Processing use of (reg 206) in insn 121:
  Adding insn 120 to worklist
Processing use of (reg 25 sfp) in insn 120:
Processing use of (reg 24 cc) in insn 118:
  Adding insn 117 to worklist
Processing use of (reg 205 [ significand ]) in insn 117:
  Adding insn 116 to worklist
Processing use of (subreg (reg 137 [ significand ]) 4) in insn 116:
  Adding insn 89 to worklist
  Adding insn 108 to worklist
Processing use of (reg 205 [ significand ]) in insn 116:
  Adding insn 115 to worklist
Processing use of (subreg (reg 137 [ significand ]) 0) in insn 115:
Processing use of (reg 137 [ significand ]) in insn 108:
Processing use of (reg 204) in insn 108:
  Adding insn 107 to worklist
Processing use of (reg 137 [ significand ]) in insn 89:
  Adding insn 87 to worklist
  Adding insn 88 to worklist
  Adding insn 232 to worklist
Processing use of (reg 260 [+4 ]) in insn 89:
  Adding insn 84 to worklist
Processing use of (reg 190) in insn 84:
  Adding insn 82 to worklist
Processing use of (reg 260 [+4 ]) in insn 84:
  Adding insn 83 to worklist
Processing use of (subreg (reg 144 [ D.4830 ]) 4) in insn 83:
  Adding insn 70 to worklist
Processing use of (reg 0 r0) in insn 70:
Processing use of (reg 1 r1) in insn 70:
Processing use of (subreg (reg 144 [ D.4830 ]) 0) in insn 82:
Processing use of (subreg (reg 137 [ significand ]) 0) in insn 88:
Processing use of (reg 137 [ significand ]) in insn 88:
Processing use of (reg 191) in insn 88:
  Adding insn 86 to worklist
Processing use of (reg 260 [+4 ]) in insn 86:
Processing use of (reg 137 [ significand ]) in insn 87:
Processing use of (reg 259) in insn 87:
  Adding insn 85 to worklist
Processing use of (subreg (reg 144 [ D.4830 ]) 0) in insn 85:
Processing use of (reg 25 sfp) in insn 111:
Processing use of (reg 137 [ significand ]) in insn 111:
Processing use of (reg 24 cc) in insn 113:
  Adding insn 112 to worklist
Processing use of (reg 136 [ D.5976 ]) in insn 112:
  Adding insn 80 to worklist
Processing use of (reg 187) in insn 80:
  Adding insn 79 to worklist
Processing use of (reg 186) in insn 79:
  Adding insn 78 to worklist
Processing use of (subreg (reg 257) 0) in insn 78:
  Adding insn 76 to worklist
Processing use of (subreg (reg 144 [ D.4830 ]) 4) in insn 76:
Processing use of (reg 13 sp) in insn 69:
Processing use of (reg 0 r0) in insn 69:
  Adding insn 68 to worklist
Processing use of (reg 149 [ dm ]) in insn 68:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 25 sfp) in insn 75:
Processing use of (subreg (reg 255) 0) in insn 75:
  Adding insn 73 to worklist
Processing use of (subreg (reg 180) 4) in insn 73:
  Adding insn 72 to worklist
Processing use of (reg 144 [ D.4830 ]) in insn 72:
Processing use of (reg 181) in insn 72:
  Adding insn 71 to worklist
Processing use of (reg 25 sfp) in insn 81:
Processing use of (subreg (reg 136 [ D.5976 ]) 0) in insn 81:
Processing use of (reg 24 cc) in insn 105:
  Adding insn 104 to worklist
Processing use of (reg 203) in insn 104:
  Adding insn 103 to worklist
Processing use of (reg 202) in insn 103:
  Adding insn 102 to worklist
Processing use of (subreg (reg 201) 0) in insn 102:
  Adding insn 101 to worklist
Processing use of (reg 197) in insn 101:
  Adding insn 95 to worklist
Processing use of (reg 200) in insn 101:
  Adding insn 99 to worklist
Processing use of (reg 24 cc) in insn 99:
  Adding insn 98 to worklist
Processing use of (reg 195 [ D.5976 ]) in insn 98:
  Adding insn 92 to worklist
Processing use of (subreg (reg 136 [ D.5976 ]) 0) in insn 92:
Processing use of (reg 24 cc) in insn 95:
  Adding insn 94 to worklist
Processing use of (reg 195 [ D.5976 ]) in insn 94:
Processing use of (reg 196) in insn 94:
  Adding insn 93 to worklist
Processing use of (reg 193) in insn 93:
  Adding insn 91 to worklist
Processing use of (subreg (reg 194) 0) in insn 91:
  Adding insn 90 to worklist
Processing use of (reg 13 sp) in insn 65:
Processing use of (reg 0 r0) in insn 65:
  Adding insn 64 to worklist
Processing use of (reg 179) in insn 64:
  Adding insn 63 to worklist
Processing use of (reg 25 sfp) in insn 63:
Processing use of (reg 24 cc) in insn 61:
  Adding insn 60 to worklist
Processing use of (reg 178 [ significand ]) in insn 60:
  Adding insn 59 to worklist
Processing use of (subreg (reg 139 [ significand ]) 4) in insn 59:
  Adding insn 32 to worklist
  Adding insn 51 to worklist
Processing use of (reg 178 [ significand ]) in insn 59:
  Adding insn 58 to worklist
Processing use of (subreg (reg 139 [ significand ]) 0) in insn 58:
Processing use of (reg 139 [ significand ]) in insn 51:
Processing use of (reg 177) in insn 51:
  Adding insn 50 to worklist
Processing use of (reg 139 [ significand ]) in insn 32:
  Adding insn 30 to worklist
  Adding insn 31 to worklist
  Adding insn 231 to worklist
Processing use of (reg 254 [+4 ]) in insn 32:
  Adding insn 27 to worklist
Processing use of (reg 163) in insn 27:
  Adding insn 25 to worklist
Processing use of (reg 254 [+4 ]) in insn 27:
  Adding insn 26 to worklist
Processing use of (subreg (reg 145 [ D.4821 ]) 4) in insn 26:
  Adding insn 13 to worklist
Processing use of (reg 0 r0) in insn 13:
Processing use of (reg 1 r1) in insn 13:
Processing use of (subreg (reg 145 [ D.4821 ]) 0) in insn 25:
Processing use of (subreg (reg 139 [ significand ]) 0) in insn 31:
Processing use of (reg 139 [ significand ]) in insn 31:
Processing use of (reg 164) in insn 31:
  Adding insn 29 to worklist
Processing use of (reg 254 [+4 ]) in insn 29:
Processing use of (reg 139 [ significand ]) in insn 30:
Processing use of (reg 253) in insn 30:
  Adding insn 28 to worklist
Processing use of (subreg (reg 145 [ D.4821 ]) 0) in insn 28:
Processing use of (reg 25 sfp) in insn 54:
Processing use of (reg 139 [ significand ]) in insn 54:
Processing use of (reg 24 cc) in insn 56:
  Adding insn 55 to worklist
Processing use of (reg 138 [ D.5961 ]) in insn 55:
  Adding insn 23 to worklist
Processing use of (reg 160) in insn 23:
  Adding insn 22 to worklist
Processing use of (reg 159) in insn 22:
  Adding insn 21 to worklist
Processing use of (subreg (reg 251) 0) in insn 21:
  Adding insn 19 to worklist
Processing use of (subreg (reg 145 [ D.4821 ]) 4) in insn 19:
Processing use of (reg 13 sp) in insn 12:
Processing use of (reg 0 r0) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 148 [ dn ]) in insn 11:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 25 sfp) in insn 18:
Processing use of (subreg (reg 249) 0) in insn 18:
  Adding insn 16 to worklist
Processing use of (subreg (reg 153) 4) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 145 [ D.4821 ]) in insn 15:
Processing use of (reg 154) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 25 sfp) in insn 24:
Processing use of (subreg (reg 138 [ D.5961 ]) 0) in insn 24:
Processing use of (reg 24 cc) in insn 48:
  Adding insn 47 to worklist
Processing use of (reg 176) in insn 47:
  Adding insn 46 to worklist
Processing use of (reg 175) in insn 46:
  Adding insn 45 to worklist
Processing use of (subreg (reg 174) 0) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 170) in insn 44:
  Adding insn 38 to worklist
Processing use of (reg 173) in insn 44:
  Adding insn 42 to worklist
Processing use of (reg 24 cc) in insn 42:
  Adding insn 41 to worklist
Processing use of (reg 168 [ D.5961 ]) in insn 41:
  Adding insn 35 to worklist
Processing use of (subreg (reg 138 [ D.5961 ]) 0) in insn 35:
Processing use of (reg 24 cc) in insn 38:
  Adding insn 37 to worklist
Processing use of (reg 168 [ D.5961 ]) in insn 37:
Processing use of (reg 169) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 166) in insn 36:
  Adding insn 34 to worklist
Processing use of (subreg (reg 167) 0) in insn 34:
  Adding insn 33 to worklist


vfp_double_multiply_accumulate

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={17d,16u} r1={12d,7u} r2={12d,4u} r3={12d,4u} r11={1d,18u} r12={9d} r13={1d,27u} r14={9d,1u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={23d,15u} r25={1d,38u,9d} r26={1d,19u,2d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} r133={1d,2u,1d} r134={1d,2u} r135={5d,6u,1d} r136={1d,3u} r137={5d,8u,1d} r138={1d,3u} r139={5d,8u,1d} r140={1d,1u} r142={1d,1u} r143={1d,5u,1d} r144={1d,5u,1d} r145={1d,5u,1d} r147={1d,2u} r148={1d,1u} r149={1d,1u} r150={1d,3u} r151={1d,2u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r159={1d,1u,1d} r160={1d,1u} r163={1d,1u} r164={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,2u} r169={1d,1u} r170={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={2d,2u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r186={1d,1u,1d} r187={1d,1u} r190={1d,1u} r191={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,2u} r196={1d,1u} r197={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={2d,2u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r212={1d,1u,1d} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r221={1d,1u,1d} r222={1d,1u} r225={1d,1u} r226={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,2u} r231={1d,1u} r232={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,2u} r244={1d,1u} r245={1d,1u} r247={1d,1u} r249={1d,1u} r251={1d,1u} r253={1d,1u} r254={2d,3u} r255={1d,1u} r257={1d,1u} r259={1d,1u} r260={2d,3u} r261={1d,1u} r263={1d,1u} r265={1d,1u} r266={2d,3u} 
;;    total ref usage 1411{1091d,298u,22e} in 175{167 regular + 8 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977
0[0,17] 1[17,12] 2[29,12] 3[41,12] 11[53,1] 12[54,9] 13[63,1] 14[64,9] 15[73,8] 16[81,8] 17[89,8] 18[97,8] 19[105,8] 20[113,8] 21[121,8] 22[129,8] 23[137,8] 24[145,23] 25[168,1] 26[169,1] 27[170,8] 28[178,8] 29[186,8] 30[194,8] 31[202,8] 32[210,8] 33[218,8] 34[226,8] 35[234,8] 36[242,8] 37[250,8] 38[258,8] 39[266,8] 40[274,8] 41[282,8] 42[290,8] 43[298,8] 44[306,8] 45[314,8] 46[322,8] 47[330,8] 48[338,8] 49[346,8] 50[354,8] 51[362,8] 52[370,8] 53[378,8] 54[386,8] 55[394,8] 56[402,8] 57[410,8] 58[418,8] 59[426,8] 60[434,8] 61[442,8] 62[450,8] 63[458,8] 64[466,8] 65[474,8] 66[482,8] 67[490,8] 68[498,8] 69[506,8] 70[514,8] 71[522,8] 72[530,8] 73[538,8] 74[546,8] 75[554,8] 76[562,8] 77[570,8] 78[578,8] 79[586,8] 80[594,8] 81[602,8] 82[610,8] 83[618,8] 84[626,8] 85[634,8] 86[642,8] 87[650,8] 88[658,8] 89[666,8] 90[674,8] 91[682,8] 92[690,8] 93[698,8] 94[706,8] 95[714,8] 96[722,8] 97[730,8] 98[738,8] 99[746,8] 100[754,8] 101[762,8] 102[770,8] 103[778,8] 104[786,8] 105[794,8] 106[802,8] 107[810,8] 108[818,8] 109[826,8] 110[834,8] 111[842,8] 112[850,8] 113[858,8] 114[866,8] 115[874,8] 116[882,8] 117[890,8] 118[898,8] 119[906,8] 120[914,8] 121[922,8] 122[930,8] 123[938,8] 124[946,8] 125[954,8] 126[962,8] 127[970,8] 133[978,1] 134[979,1] 135[980,5] 136[985,1] 137[986,5] 138[991,1] 139[992,5] 140[997,1] 142[998,1] 143[999,1] 144[1000,1] 145[1001,1] 147[1002,1] 148[1003,1] 149[1004,1] 150[1005,1] 151[1006,1] 152[1007,1] 153[1008,1] 154[1009,1] 159[1010,1] 160[1011,1] 163[1012,1] 164[1013,1] 166[1014,1] 167[1015,1] 168[1016,1] 169[1017,1] 170[1018,1] 173[1019,1] 174[1020,1] 175[1021,1] 176[1022,1] 177[1023,1] 178[1024,2] 179[1026,1] 180[1027,1] 181[1028,1] 186[1029,1] 187[1030,1] 190[1031,1] 191[1032,1] 193[1033,1] 194[1034,1] 195[1035,1] 196[1036,1] 197[1037,1] 200[1038,1] 201[1039,1] 202[1040,1] 203[1041,1] 204[1042,1] 205[1043,2] 206[1045,1] 207[1046,1] 208[1047,1] 209[1048,1] 210[1049,1] 212[1050,1] 213[1051,1] 214[1052,1] 215[1053,1] 216[1054,1] 221[1055,1] 222[1056,1] 225[1057,1] 226[1058,1] 228[1059,1] 229[1060,1] 230[1061,1] 231[1062,1] 232[1063,1] 235[1064,1] 236[1065,1] 237[1066,1] 238[1067,1] 239[1068,1] 240[1069,1] 241[1070,1] 242[1071,1] 243[1072,1] 244[1073,1] 245[1074,1] 247[1075,1] 249[1076,1] 251[1077,1] 253[1078,1] 254[1079,2] 255[1081,1] 257[1082,1] 259[1083,1] 260[1084,2] 261[1086,1] 263[1087,1] 265[1088,1] 266[1089,2] 
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 139 145 147 148 149 150 151 152 153 154 159 160 163 164 166 167 168 169 170 173 174 175 176 249 251 253 254
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 138 139 145 147 148 149 150 151 152 153 154 159 160 163 164 166 167 168 169 170 173 174 175 176 249 251 253 254
;; live  kill	 14 [lr]
;; rd  in  	(10)
16, 28, 40, 52, 53, 62, 63, 72, 168, 169
;; rd  gen 	(31)
14, 27, 165, 991, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1076, 1077, 1078, 1079
;; rd  kill	(89)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 991, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1076, 1077, 1078, 1079, 1080

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 9 3 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v:SI 147 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v:SI 148 [ dn ])
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ dn ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v:SI 149 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v:SI 150 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(insn 6 5 7 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v:SI 151 [ negate ])
        (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 negate+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 negate+0 S4 A32])
        (nil)))

(insn 7 6 8 2 arch/arm/vfp/vfpdouble.c:852 (set (reg/v/f:SI 152 [ func ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 func+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 8 [0x8])) [0 func+0 S4 A32])
        (nil)))

(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)

(insn 11 8 12 2 arch/arm/vfp/vfpdouble.c:856 (set (reg:SI 0 r0)
        (reg/v:SI 148 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 148 [ dn ])
        (nil)))

(call_insn 12 11 13 2 arch/arm/vfp/vfpdouble.c:856 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 13 12 14 2 arch/arm/vfp/vfpdouble.c:856 (set (reg:DI 145 [ D.4821 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 14 13 15 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 154)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 15 14 16 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 153)
        (and:DI (reg:DI 145 [ D.4821 ])
            (reg:DI 154))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 154)
        (expr_list:REG_EQUAL (and:DI (reg:DI 145 [ D.4821 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 16 15 18 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 249)
        (lshiftrt:SI (subreg:SI (reg:DI 153) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 153)
        (nil)))

(insn 18 16 19 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -46 [0xffffffffffffffd2])) [0 vdn.sign+0 S2 A16])
        (subreg:HI (reg:SI 249) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 249)
        (nil)))

(insn 19 18 21 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 251)
        (ashiftrt:SI (subreg:SI (reg:DI 145 [ D.4821 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 21 19 22 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 159)
        (zero_extend:SI (subreg:HI (reg:SI 251) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 251)
        (nil)))

(insn 22 21 23 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 160)
        (ashift:SI (reg:SI 159)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 159)
        (nil)))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 138 [ D.5961 ])
        (lshiftrt:SI (reg:SI 160)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 160)
        (expr_list:REG_EQUAL (and:SI (reg:SI 159)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0])) [0 vdn.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 138 [ D.5961 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 163)
        (lshiftrt:SI (subreg:SI (reg:DI 145 [ D.4821 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 254 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 145 [ D.4821 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 27 26 28 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 254 [+4 ])
        (ior:SI (reg:SI 163)
            (reg:SI 254 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 163)
        (nil)))

(insn 28 27 29 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 253)
        (ashift:SI (subreg:SI (reg:DI 145 [ D.4821 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 145 [ D.4821 ])
        (nil)))

(insn 29 28 231 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 164)
        (ashift:SI (reg:SI 254 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 231 29 30 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 139 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 30 231 31 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 139 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 253)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 253)
        (nil)))

(insn 31 30 32 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 139 [ significand ]) 0)
        (ior:SI (reg:SI 164)
            (subreg:SI (reg/v:DI 139 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 164)
        (nil)))

(insn 32 31 33 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 139 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 254 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 254 [+4 ])
        (nil)))

(insn 33 32 34 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 167)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 34 33 35 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 166)
        (subreg:HI (reg:SI 167) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 167)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 35 34 36 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 168 [ D.5961 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 138 [ D.5961 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 36 35 37 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 169)
        (sign_extend:SI (reg:HI 166))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 166)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 37 36 38 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 168 [ D.5961 ])
            (reg:SI 169))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 169)
        (nil)))

(insn 38 37 41 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 170)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 41 38 42 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 168 [ D.5961 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 168 [ D.5961 ])
        (nil)))

(insn 42 41 44 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 173)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 44 42 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 174)
        (and:SI (reg:SI 170)
            (reg:SI 173))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 173)
        (expr_list:REG_DEAD (reg:SI 170)
            (nil))))

(insn 45 44 46 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 175)
        (subreg:QI (reg:SI 174) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 174)
        (nil)))

(insn 46 45 47 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 176)
        (zero_extend:SI (reg:QI 175))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 175)
        (nil)))

(insn 47 46 48 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 176)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 176)
        (nil)))

(jump_insn 48 47 49 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; rd  out 	(38)
14, 27, 40, 52, 53, 62, 63, 165, 168, 169, 991, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1076, 1077, 1078, 1079


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u57(11){ }u58(13){ }u59(25){ }u60(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 139 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; live  gen 	 139 177
;; live  kill	
;; rd  in  	(38)
14, 27, 40, 52, 53, 62, 63, 165, 168, 169, 991, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1076, 1077, 1078, 1079
;; rd  gen 	(2)
993, 1023
;; rd  kill	(6)
992, 993, 994, 995, 996, 1023

;; Pred edge  2 [50.0%]  (fallthru)
(note 49 48 50 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 51 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 177)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 51 50 52 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 139 [ significand ])
        (ior:DI (reg/v:DI 139 [ significand ])
            (reg:DI 177))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 177)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 139 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; rd  out 	(39)
14, 27, 40, 52, 53, 62, 63, 165, 168, 169, 991, 993, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1076, 1077, 1078, 1079


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u64(11){ }u65(13){ }u66(25){ }u67(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 147 149 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(40)
14, 27, 40, 52, 53, 62, 63, 165, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1076, 1077, 1078, 1079
;; rd  gen 	(1)
164
;; rd  kill	(23)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 52 51 53 4 274 "" [1 uses])

(note 53 52 54 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 139 [ significand ])) 163 {*arm_movdi} (nil))

(insn 55 54 56 4 arch/arm/vfp/vfpdouble.c:857 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 138 [ D.5961 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 138 [ D.5961 ])
        (nil)))

(jump_insn 56 55 57 4 arch/arm/vfp/vfpdouble.c:857 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 147 149 150 151 152
;; rd  out 	(40)
14, 27, 40, 52, 53, 62, 63, 164, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1076, 1077, 1078, 1079


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u72(11){ }u73(13){ }u74(25){ }u75(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 147 149 150 151 152
;; live  gen 	 24 [cc] 178
;; live  kill	
;; rd  in  	(40)
14, 27, 40, 52, 53, 62, 63, 164, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1076, 1077, 1078, 1079
;; rd  gen 	(2)
163, 1024
;; rd  kill	(25)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 1024, 1025

;; Pred edge  4 [50.0%]  (fallthru)
(note 57 56 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 5 arch/arm/vfp/vfpdouble.c:857 discrim 1 (set (reg:SI 178 [ significand ])
        (subreg:SI (reg/v:DI 139 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 59 58 60 5 arch/arm/vfp/vfpdouble.c:857 discrim 1 (set (reg:SI 178 [ significand ])
        (ior:SI (reg:SI 178 [ significand ])
            (subreg:SI (reg/v:DI 139 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 139 [ significand ])
        (nil)))

(insn 60 59 61 5 arch/arm/vfp/vfpdouble.c:857 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 178 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 178 [ significand ])
        (nil)))

(jump_insn 61 60 62 5 arch/arm/vfp/vfpdouble.c:857 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; rd  out 	(41)
14, 27, 40, 52, 53, 62, 63, 163, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1076, 1077, 1078, 1079


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u81(11){ }u82(13){ }u83(25){ }u84(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; live  gen 	 0 [r0] 179
;; live  kill	 14 [lr]
;; rd  in  	(41)
14, 27, 40, 52, 53, 62, 63, 163, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1076, 1077, 1078, 1079
;; rd  gen 	(1)
1026
;; rd  kill	(10)
64, 65, 66, 67, 68, 69, 70, 71, 72, 1026

;; Pred edge  5 [29.0%]  (fallthru)
(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 63 62 64 6 arch/arm/vfp/vfpdouble.c:858 (set (reg/f:SI 179)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 64 63 65 6 arch/arm/vfp/vfpdouble.c:858 (set (reg:SI 0 r0)
        (reg/f:SI 179)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 179)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(call_insn 65 64 66 6 arch/arm/vfp/vfpdouble.c:858 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; rd  out 	(42)
14, 27, 40, 52, 53, 62, 63, 163, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1076, 1077, 1078, 1079


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u90(11){ }u91(13){ }u92(25){ }u93(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 137 144 180 181 186 187 190 191 193 194 195 196 197 200 201 202 203 255 257 259 260
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 149 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 136 137 144 180 181 186 187 190 191 193 194 195 196 197 200 201 202 203 255 257 259 260
;; live  kill	 14 [lr]
;; rd  in  	(43)
14, 27, 40, 52, 53, 62, 63, 163, 164, 168, 169, 991, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1076, 1077, 1078, 1079
;; rd  gen 	(25)
10, 25, 159, 985, 988, 1000, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1081, 1082, 1083, 1084
;; rd  kill	(83)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 985, 1000, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1081, 1082, 1083, 1084, 1085

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 66 65 67 7 275 "" [2 uses])

(note 67 66 68 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 68 67 69 7 arch/arm/vfp/vfpdouble.c:860 (set (reg:SI 0 r0)
        (reg/v:SI 149 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 149 [ dm ])
        (nil)))

(call_insn 69 68 70 7 arch/arm/vfp/vfpdouble.c:860 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 70 69 71 7 arch/arm/vfp/vfpdouble.c:860 (set (reg:DI 144 [ D.4830 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 71 70 72 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 181)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 72 71 73 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 180)
        (and:DI (reg:DI 144 [ D.4830 ])
            (reg:DI 181))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 181)
        (expr_list:REG_EQUAL (and:DI (reg:DI 144 [ D.4830 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 73 72 75 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 255)
        (lshiftrt:SI (subreg:SI (reg:DI 180) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 180)
        (nil)))

(insn 75 73 76 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -62 [0xffffffffffffffc2])) [0 vdm.sign+0 S2 A16])
        (subreg:HI (reg:SI 255) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 255)
        (nil)))

(insn 76 75 78 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 257)
        (ashiftrt:SI (subreg:SI (reg:DI 144 [ D.4830 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 78 76 79 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 186)
        (zero_extend:SI (subreg:HI (reg:SI 257) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 257)
        (nil)))

(insn 79 78 80 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 187)
        (ashift:SI (reg:SI 186)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 186)
        (nil)))

(insn 80 79 81 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 136 [ D.5976 ])
        (lshiftrt:SI (reg:SI 187)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 187)
        (expr_list:REG_EQUAL (and:SI (reg:SI 186)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 81 80 82 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -64 [0xffffffffffffffc0])) [0 vdm.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 136 [ D.5976 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 82 81 83 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 190)
        (lshiftrt:SI (subreg:SI (reg:DI 144 [ D.4830 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 83 82 84 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 260 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 144 [ D.4830 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 84 83 85 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 260 [+4 ])
        (ior:SI (reg:SI 190)
            (reg:SI 260 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 190)
        (nil)))

(insn 85 84 86 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 259)
        (ashift:SI (subreg:SI (reg:DI 144 [ D.4830 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 144 [ D.4830 ])
        (nil)))

(insn 86 85 232 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 191)
        (ashift:SI (reg:SI 260 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 232 86 87 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 137 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 87 232 88 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 137 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 259)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 259)
        (nil)))

(insn 88 87 89 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 137 [ significand ]) 0)
        (ior:SI (reg:SI 191)
            (subreg:SI (reg/v:DI 137 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 191)
        (nil)))

(insn 89 88 90 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 137 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 260 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 260 [+4 ])
        (nil)))

(insn 90 89 91 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 194)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 91 90 92 7 arch/arm/vfp/vfp.h:309 (set (reg:HI 193)
        (subreg:HI (reg:SI 194) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 194)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 92 91 93 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 195 [ D.5976 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 136 [ D.5976 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 93 92 94 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 196)
        (sign_extend:SI (reg:HI 193))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 193)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 94 93 95 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 195 [ D.5976 ])
            (reg:SI 196))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 196)
        (nil)))

(insn 95 94 98 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 197)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 98 95 99 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 195 [ D.5976 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 195 [ D.5976 ])
        (nil)))

(insn 99 98 101 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 200)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 101 99 102 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 201)
        (and:SI (reg:SI 197)
            (reg:SI 200))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 200)
        (expr_list:REG_DEAD (reg:SI 197)
            (nil))))

(insn 102 101 103 7 arch/arm/vfp/vfp.h:309 (set (reg:QI 202)
        (subreg:QI (reg:SI 201) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 201)
        (nil)))

(insn 103 102 104 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 203)
        (zero_extend:SI (reg:QI 202))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 202)
        (nil)))

(insn 104 103 105 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 203)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 203)
        (nil)))

(jump_insn 105 104 106 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; rd  out 	(64)
10, 25, 40, 52, 53, 62, 63, 159, 168, 169, 985, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u139(11){ }u140(13){ }u141(25){ }u142(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 137 204
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; live  gen 	 137 204
;; live  kill	
;; rd  in  	(64)
10, 25, 40, 52, 53, 62, 63, 159, 168, 169, 985, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(2)
987, 1042
;; rd  kill	(6)
986, 987, 988, 989, 990, 1042

;; Pred edge  7 [50.0%]  (fallthru)
(note 106 105 107 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 107 106 108 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 204)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 108 107 109 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 137 [ significand ])
        (ior:DI (reg/v:DI 137 [ significand ])
            (reg:DI 204))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 204)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 137 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; rd  out 	(65)
10, 25, 40, 52, 53, 62, 63, 159, 168, 169, 985, 987, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u146(11){ }u147(13){ }u148(25){ }u149(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 147 150 151 152
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(66)
10, 25, 40, 52, 53, 62, 63, 159, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(1)
158
;; rd  kill	(23)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 109 108 110 9 276 "" [1 uses])

(note 110 109 111 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 112 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -56 [0xffffffffffffffc8])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 137 [ significand ])) 163 {*arm_movdi} (nil))

(insn 112 111 113 9 arch/arm/vfp/vfpdouble.c:861 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 136 [ D.5976 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 136 [ D.5976 ])
        (nil)))

(jump_insn 113 112 114 9 arch/arm/vfp/vfpdouble.c:861 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147 150 151 152
;; rd  out 	(66)
10, 25, 40, 52, 53, 62, 63, 158, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084


;; Succ edge  10 [50.0%]  (fallthru)
;; Succ edge  12 [50.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u154(11){ }u155(13){ }u156(25){ }u157(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 205
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 147 150 151 152
;; live  gen 	 24 [cc] 205
;; live  kill	
;; rd  in  	(66)
10, 25, 40, 52, 53, 62, 63, 158, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(2)
157, 1043
;; rd  kill	(25)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 1043, 1044

;; Pred edge  9 [50.0%]  (fallthru)
(note 114 113 115 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 115 114 116 10 arch/arm/vfp/vfpdouble.c:861 discrim 1 (set (reg:SI 205 [ significand ])
        (subreg:SI (reg/v:DI 137 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 116 115 117 10 arch/arm/vfp/vfpdouble.c:861 discrim 1 (set (reg:SI 205 [ significand ])
        (ior:SI (reg:SI 205 [ significand ])
            (subreg:SI (reg/v:DI 137 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 137 [ significand ])
        (nil)))

(insn 117 116 118 10 arch/arm/vfp/vfpdouble.c:861 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 205 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 205 [ significand ])
        (nil)))

(jump_insn 118 117 119 10 arch/arm/vfp/vfpdouble.c:861 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; rd  out 	(67)
10, 25, 40, 52, 53, 62, 63, 157, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084


;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  12 [71.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u163(11){ }u164(13){ }u165(25){ }u166(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 206
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; live  gen 	 0 [r0] 206
;; live  kill	 14 [lr]
;; rd  in  	(67)
10, 25, 40, 52, 53, 62, 63, 157, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(1)
1045
;; rd  kill	(10)
64, 65, 66, 67, 68, 69, 70, 71, 72, 1045

;; Pred edge  10 [29.0%]  (fallthru)
(note 119 118 120 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 120 119 121 11 arch/arm/vfp/vfpdouble.c:862 (set (reg/f:SI 206)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -64 [0xffffffffffffffc0]))) 4 {*arm_addsi3} (nil))

(insn 121 120 122 11 arch/arm/vfp/vfpdouble.c:862 (set (reg:SI 0 r0)
        (reg/f:SI 206)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 206)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -64 [0xffffffffffffffc0]))
            (nil))))

(call_insn 122 121 123 11 arch/arm/vfp/vfpdouble.c:862 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; rd  out 	(68)
10, 25, 40, 52, 53, 62, 63, 157, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u172(11){ }u173(13){ }u174(25){ }u175(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 150 151
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 140 207 208 209 210
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 140 207 208 209 210
;; live  kill	 14 [lr]
;; rd  in  	(69)
10, 25, 40, 52, 53, 62, 63, 157, 158, 168, 169, 985, 987, 988, 991, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(7)
6, 154, 997, 1046, 1047, 1048, 1049
;; rd  kill	(54)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 997, 1046, 1047, 1048, 1049

;; Pred edge  9 [50.0%] 
;; Pred edge  10 [71.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 123 122 124 12 277 "" [2 uses])

(note 124 123 125 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 125 124 126 12 arch/arm/vfp/vfpdouble.c:864 (set (reg/f:SI 207)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 126 125 127 12 arch/arm/vfp/vfpdouble.c:864 (set (reg/f:SI 208)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 127 126 128 12 arch/arm/vfp/vfpdouble.c:864 (set (reg/f:SI 209)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -64 [0xffffffffffffffc0]))) 4 {*arm_addsi3} (nil))

(insn 128 127 129 12 arch/arm/vfp/vfpdouble.c:864 (set (reg:SI 0 r0)
        (reg/f:SI 207)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 207)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(insn 129 128 130 12 arch/arm/vfp/vfpdouble.c:864 (set (reg:SI 1 r1)
        (reg/f:SI 208)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 208)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(insn 130 129 131 12 arch/arm/vfp/vfpdouble.c:864 (set (reg:SI 2 r2)
        (reg/f:SI 209)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 209)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -64 [0xffffffffffffffc0]))
            (nil))))

(insn 131 130 132 12 arch/arm/vfp/vfpdouble.c:864 (set (reg:SI 3 r3)
        (reg/v:SI 150 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 132 131 133 12 arch/arm/vfp/vfpdouble.c:864 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply") [flags 0x3] <function_decl 0x10b08180 vfp_double_multiply>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 133 132 134 12 arch/arm/vfp/vfpdouble.c:864 (set (reg/v:SI 140 [ exceptions ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 134 133 135 12 arch/arm/vfp/vfpdouble.c:865 (set (reg:SI 210)
        (and:SI (reg/v:SI 151 [ negate ])
            (const_int 1 [0x1]))) 67 {*arm_andsi3_insn} (nil))

(insn 135 134 136 12 arch/arm/vfp/vfpdouble.c:865 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 210)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 210)
        (nil)))

(jump_insn 136 135 137 12 arch/arm/vfp/vfpdouble.c:865 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 143)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; rd  out 	(73)
6, 25, 40, 52, 53, 62, 63, 154, 168, 169, 985, 987, 988, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084


;; Succ edge  13 [50.0%]  (fallthru)
;; Succ edge  14 [50.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u195(11){ }u196(13){ }u197(25){ }u198(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 212 213 214
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; live  gen 	 212 213 214
;; live  kill	
;; rd  in  	(73)
6, 25, 40, 52, 53, 62, 63, 154, 168, 169, 985, 987, 988, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(3)
1050, 1051, 1052
;; rd  kill	(3)
1050, 1051, 1052

;; Pred edge  12 [50.0%]  (fallthru)
(note 137 136 138 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 138 137 140 13 arch/arm/vfp/vfpdouble.c:866 (set (reg:SI 212 [ vdp.sign ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -30 [0xffffffffffffffe2])) [0 vdp.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 140 138 141 13 arch/arm/vfp/vfpdouble.c:866 (set (reg:SI 214)
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (nil))

(insn 141 140 142 13 arch/arm/vfp/vfpdouble.c:866 (set (reg:SI 213)
        (xor:SI (reg:SI 212 [ vdp.sign ])
            (reg:SI 214))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 214)
        (expr_list:REG_DEAD (reg:SI 212 [ vdp.sign ])
            (expr_list:REG_EQUAL (xor:SI (reg:SI 212 [ vdp.sign ])
                    (const_int -32768 [0xffffffffffff8000]))
                (nil)))))

(insn 142 141 143 13 arch/arm/vfp/vfpdouble.c:866 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -30 [0xffffffffffffffe2])) [0 vdp.sign+0 S2 A16])
        (subreg:HI (reg:SI 213) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 213)
        (nil)))
;; End of basic block 13 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; rd  out 	(76)
6, 25, 40, 52, 53, 62, 63, 154, 168, 169, 985, 987, 988, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 12 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u205(11){ }u206(13){ }u207(25){ }u208(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135 143 215 216 221 222 225 226 228 229 230 231 232 235 236 237 238 261 263 265 266
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 151 152
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 135 143 215 216 221 222 225 226 228 229 230 231 232 235 236 237 238 261 263 265 266
;; live  kill	 14 [lr]
;; rd  in  	(76)
6, 25, 40, 52, 53, 62, 63, 154, 168, 169, 985, 987, 988, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084
;; rd  gen 	(26)
4, 21, 151, 978, 979, 982, 999, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1086, 1087, 1088, 1089
;; rd  kill	(84)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 64, 65, 66, 67, 68, 69, 70, 71, 72, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 978, 979, 999, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1086, 1087, 1088, 1089, 1090

;; Pred edge  12 [50.0%] 
;; Pred edge  13 [100.0%]  (fallthru)
(code_label 143 142 144 14 278 "" [1 uses])

(note 144 143 145 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 145 144 146 14 arch/arm/vfp/vfpdouble.c:868 (set (reg:SI 0 r0)
        (reg/v:SI 147 [ dd ])) 167 {*arm_movsi_insn} (nil))

(call_insn 146 145 147 14 arch/arm/vfp/vfpdouble.c:868 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 147 146 148 14 arch/arm/vfp/vfpdouble.c:868 (set (reg:DI 143 [ D.4847 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 148 147 149 14 arch/arm/vfp/vfp.h:304 (set (reg:DI 216)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 149 148 150 14 arch/arm/vfp/vfp.h:304 (set (reg:DI 215)
        (and:DI (reg:DI 143 [ D.4847 ])
            (reg:DI 216))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 216)
        (expr_list:REG_EQUAL (and:DI (reg:DI 143 [ D.4847 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 150 149 152 14 arch/arm/vfp/vfp.h:304 (set (reg:SI 261)
        (lshiftrt:SI (subreg:SI (reg:DI 215) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 215)
        (nil)))

(insn 152 150 153 14 arch/arm/vfp/vfp.h:304 (set (reg:SI 133 [ D.5994 ])
        (zero_extend:SI (subreg:HI (reg:SI 261) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 261)
        (nil)))

(insn 153 152 154 14 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -46 [0xffffffffffffffd2])) [0 vdn.sign+0 S2 A16])
        (subreg/s/u:HI (reg:SI 133 [ D.5994 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 154 153 156 14 arch/arm/vfp/vfp.h:305 (set (reg:SI 263)
        (ashiftrt:SI (subreg:SI (reg:DI 143 [ D.4847 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 156 154 157 14 arch/arm/vfp/vfp.h:305 (set (reg:SI 221)
        (zero_extend:SI (subreg:HI (reg:SI 263) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 263)
        (nil)))

(insn 157 156 158 14 arch/arm/vfp/vfp.h:305 (set (reg:SI 222)
        (ashift:SI (reg:SI 221)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 221)
        (nil)))

(insn 158 157 159 14 arch/arm/vfp/vfp.h:305 (set (reg:SI 134 [ D.5991 ])
        (lshiftrt:SI (reg:SI 222)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 222)
        (expr_list:REG_EQUAL (and:SI (reg:SI 221)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 159 158 160 14 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0])) [0 vdn.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 134 [ D.5991 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 160 159 161 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 225)
        (lshiftrt:SI (subreg:SI (reg:DI 143 [ D.4847 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 161 160 162 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 266 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 143 [ D.4847 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 162 161 163 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 266 [+4 ])
        (ior:SI (reg:SI 225)
            (reg:SI 266 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 225)
        (nil)))

(insn 163 162 164 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 265)
        (ashift:SI (subreg:SI (reg:DI 143 [ D.4847 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 143 [ D.4847 ])
        (nil)))

(insn 164 163 233 14 arch/arm/vfp/vfp.h:308 (set (reg:SI 226)
        (ashift:SI (reg:SI 266 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 233 164 165 14 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 135 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 165 233 166 14 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 265)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 265)
        (nil)))

(insn 166 165 167 14 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 0)
        (ior:SI (reg:SI 226)
            (subreg:SI (reg/v:DI 135 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 226)
        (nil)))

(insn 167 166 168 14 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 266 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 266 [+4 ])
        (nil)))

(insn 168 167 169 14 arch/arm/vfp/vfp.h:309 (set (reg:SI 229)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 169 168 170 14 arch/arm/vfp/vfp.h:309 (set (reg:HI 228)
        (subreg:HI (reg:SI 229) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 229)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 170 169 171 14 arch/arm/vfp/vfp.h:309 (set (reg:SI 230 [ D.5991 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 134 [ D.5991 ]) 0))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 134 [ D.5991 ])
        (nil)))

(insn 171 170 172 14 arch/arm/vfp/vfp.h:309 (set (reg:SI 231)
        (sign_extend:SI (reg:HI 228))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 228)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 172 171 173 14 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 230 [ D.5991 ])
            (reg:SI 231))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 231)
        (nil)))

(insn 173 172 176 14 arch/arm/vfp/vfp.h:309 (set (reg:SI 232)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 176 173 177 14 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 230 [ D.5991 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 230 [ D.5991 ])
        (nil)))

(insn 177 176 179 14 arch/arm/vfp/vfp.h:309 (set (reg:SI 235)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 179 177 180 14 arch/arm/vfp/vfp.h:309 (set (reg:SI 236)
        (and:SI (reg:SI 232)
            (reg:SI 235))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 235)
        (expr_list:REG_DEAD (reg:SI 232)
            (nil))))

(insn 180 179 181 14 arch/arm/vfp/vfp.h:309 (set (reg:QI 237)
        (subreg:QI (reg:SI 236) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 236)
        (nil)))

(insn 181 180 182 14 arch/arm/vfp/vfp.h:309 (set (reg:SI 238)
        (zero_extend:SI (reg:QI 237))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 237)
        (nil)))

(insn 182 181 183 14 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 238)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 238)
        (nil)))

(jump_insn 183 182 184 14 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 187)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; rd  out 	(99)
4, 21, 40, 52, 53, 62, 63, 151, 168, 169, 978, 979, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u255(11){ }u256(13){ }u257(25){ }u258(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 135 239
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; live  gen 	 135 239
;; live  kill	
;; rd  in  	(99)
4, 21, 40, 52, 53, 62, 63, 151, 168, 169, 978, 979, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;; rd  gen 	(2)
981, 1068
;; rd  kill	(6)
980, 981, 982, 983, 984, 1068

;; Pred edge  14 [50.0%]  (fallthru)
(note 184 183 185 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 185 184 186 15 arch/arm/vfp/vfp.h:310 (set (reg:DI 239)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 186 185 187 15 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 135 [ significand ])
        (ior:DI (reg/v:DI 135 [ significand ])
            (reg:DI 239))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 239)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 135 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 15 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; rd  out 	(100)
4, 21, 40, 52, 53, 62, 63, 151, 168, 169, 978, 979, 981, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 14 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u262(11){ }u263(13){ }u264(25){ }u265(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 151
;; lr  def 	 24 [cc] 240
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 147 150 151 152
;; live  gen 	 24 [cc] 240
;; live  kill	
;; rd  in  	(101)
4, 21, 40, 52, 53, 62, 63, 151, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;; rd  gen 	(2)
150, 1069
;; rd  kill	(24)
145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 1069

;; Pred edge  14 [50.0%] 
;; Pred edge  15 [100.0%]  (fallthru)
(code_label 187 186 188 16 279 "" [1 uses])

(note 188 187 189 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 189 188 190 16 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 135 [ significand ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v:DI 135 [ significand ])
        (nil)))

(insn 190 189 191 16 arch/arm/vfp/vfpdouble.c:869 (set (reg:SI 240)
        (and:SI (reg/v:SI 151 [ negate ])
            (const_int 2 [0x2]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 151 [ negate ])
        (nil)))

(insn 191 190 192 16 arch/arm/vfp/vfpdouble.c:869 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 240)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 240)
        (nil)))

(jump_insn 192 191 193 16 arch/arm/vfp/vfpdouble.c:869 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 197)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 147 150 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 147 150 152
;; rd  out 	(102)
4, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089


;; Succ edge  17 [61.0%]  (fallthru)
;; Succ edge  18 [39.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u271(11){ }u272(13){ }u273(25){ }u274(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 147 150 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 241 242
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 147 150 152
;; live  gen 	 241 242
;; live  kill	
;; rd  in  	(102)
4, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;; rd  gen 	(2)
1070, 1071
;; rd  kill	(2)
1070, 1071

;; Pred edge  16 [61.0%]  (fallthru)
(note 193 192 194 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 194 193 195 17 arch/arm/vfp/vfpdouble.c:870 (set (reg:SI 242)
        (const_int -32768 [0xffffffffffff8000])) 167 {*arm_movsi_insn} (nil))

(insn 195 194 196 17 arch/arm/vfp/vfpdouble.c:870 (set (reg:SI 241)
        (xor:SI (reg:SI 133 [ D.5994 ])
            (reg:SI 242))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 242)
        (expr_list:REG_DEAD (reg:SI 133 [ D.5994 ])
            (expr_list:REG_EQUAL (xor:SI (reg:SI 133 [ D.5994 ])
                    (const_int -32768 [0xffffffffffff8000]))
                (nil)))))

(insn 196 195 197 17 arch/arm/vfp/vfpdouble.c:870 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -46 [0xffffffffffffffd2])) [0 vdn.sign+0 S2 A16])
        (subreg:HI (reg:SI 241) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 241)
        (nil)))
;; End of basic block 17 -> ( 18)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; rd  out 	(104)
4, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u280(11){ }u281(13){ }u282(25){ }u283(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142 243 244 245 247
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 147 150 152
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 142 243 244 245 247
;; live  kill	 14 [lr]
;; rd  in  	(104)
4, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089
;; rd  gen 	(6)
0, 998, 1072, 1073, 1074, 1075
;; rd  kill	(31)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 64, 65, 66, 67, 68, 69, 70, 71, 72, 998, 1072, 1073, 1074, 1075

;; Pred edge  16 [39.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
(code_label 197 196 198 18 280 "" [1 uses])

(note 198 197 199 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 199 198 200 18 arch/arm/vfp/vfpdouble.c:872 (set (reg/f:SI 243)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 200 199 201 18 arch/arm/vfp/vfpdouble.c:872 (set (reg/f:SI 244)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 201 200 202 18 arch/arm/vfp/vfpdouble.c:872 (set (reg/f:SI 245)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 202 201 203 18 arch/arm/vfp/vfpdouble.c:872 (set (reg:SI 0 r0)
        (reg/f:SI 243)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 203 202 204 18 arch/arm/vfp/vfpdouble.c:872 (set (reg:SI 1 r1)
        (reg/f:SI 244)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 244)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(insn 204 203 205 18 arch/arm/vfp/vfpdouble.c:872 (set (reg:SI 2 r2)
        (reg/f:SI 245)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 245)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(insn 205 204 206 18 arch/arm/vfp/vfpdouble.c:872 (set (reg:SI 3 r3)
        (reg/v:SI 150 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 206 205 207 18 arch/arm/vfp/vfpdouble.c:872 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_add") [flags 0x3] <function_decl 0x10b08080 vfp_double_add>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 207 206 209 18 arch/arm/vfp/vfpdouble.c:872 (set (reg:SI 142 [ D.4854 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 209 207 210 18 arch/arm/vfp/vfpdouble.c:874 (set (reg:SI 247)
        (ior:SI (reg:SI 142 [ D.4854 ])
            (reg/v:SI 140 [ exceptions ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 142 [ D.4854 ])
        (expr_list:REG_DEAD (reg/v:SI 140 [ exceptions ])
            (nil))))

(insn 210 209 211 18 arch/arm/vfp/vfpdouble.c:874 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v/f:SI 152 [ func ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 152 [ func ])
        (nil)))

(insn 211 210 212 18 arch/arm/vfp/vfpdouble.c:874 (set (reg:SI 0 r0)
        (reg/v:SI 147 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 147 [ dd ])
        (nil)))

(insn 212 211 213 18 arch/arm/vfp/vfpdouble.c:874 (set (reg:SI 1 r1)
        (reg/f:SI 243)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 243)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 213 212 214 18 arch/arm/vfp/vfpdouble.c:874 (set (reg:SI 2 r2)
        (reg/v:SI 150 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 150 [ fpscr ])
        (nil)))

(insn 214 213 215 18 arch/arm/vfp/vfpdouble.c:874 (set (reg:SI 3 r3)
        (reg:SI 247)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 247)
        (nil)))

(call_insn 215 214 227 18 arch/arm/vfp/vfpdouble.c:874 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 227 215 0 18 arch/arm/vfp/vfpdouble.c:875 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 18 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(109)
0, 21, 40, 52, 53, 62, 63, 150, 168, 169, 978, 979, 981, 982, 985, 987, 988, 991, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fnmsc (vfp_double_fnmsc)[0:178]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fnmsc

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 148{129d,19u,0e} in 6{5 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 139[127,1] 140[128,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d3(1){ }d5(2){ }d7(3){ }d8(11){ }d10(12){ }d11(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d8(bb 0 insn -1) }u1(13){ d11(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(3)
0, 127, 128
;; rd  kill	(6)
0, 1, 12, 13, 127, 128
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;;  UD chains for artificial uses
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 10
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 139 { d127(bb 2 insn 9) }
;;   UD chains for insn luid 3 uid 12
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 140 { d128(bb 2 insn 11) }
;;   UD chains for insn luid 4 uid 17
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 0 insn -1) }
;;      reg 2 { d5(bb 0 insn -1) }
;;      reg 3 { d7(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 29
;;      reg 0 { d0(bb 2 insn 17) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u14(0){ d0(bb 2 insn 17) }u15(11){ d8(bb 0 insn -1) }u16(13){ d11(bb 0 insn -1) }u17(14){ }u18(25){ d24(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 17) }
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 29 to worklist
  Adding insn 17 to worklist
  Adding insn 12 to worklist
  Adding insn 10 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 139) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 13 sp) in insn 12:
Processing use of (reg 140) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 13 sp) in insn 17:
Processing use of (reg 0 r0) in insn 17:
Processing use of (reg 1 r1) in insn 17:
Processing use of (reg 2 r2) in insn 17:
Processing use of (reg 3 r3) in insn 17:
Processing use of (reg 0 r0) in insn 29:


vfp_double_fnmsc

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 148{129d,19u,0e} in 6{5 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 139[127,1] 140[128,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(3)
0, 127, 128
;; rd  kill	(6)
0, 1, 12, 13, 127, 128

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:910 (set (reg:SI 139)
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:910 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 139)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_EQUAL (const_int 3 [0x3])
            (nil))))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:910 (set (reg/f:SI 140)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10e32ea0>)) 167 {*arm_movsi_insn} (nil))

(insn 12 11 17 2 arch/arm/vfp/vfpdouble.c:910 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 140)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x10e32ea0>)
            (nil))))

(call_insn 17 12 29 2 arch/arm/vfp/vfpdouble.c:910 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply_accumulate") [flags 0x3] <function_decl 0x10b08280 vfp_double_multiply_accumulate>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 29 17 0 2 arch/arm/vfp/vfpdouble.c:911 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fnmac (vfp_double_fnmac)[0:176]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fnmac

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 148{129d,19u,0e} in 6{5 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 139[127,1] 140[128,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d3(1){ }d5(2){ }d7(3){ }d8(11){ }d10(12){ }d11(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d8(bb 0 insn -1) }u1(13){ d11(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(3)
0, 127, 128
;; rd  kill	(6)
0, 1, 12, 13, 127, 128
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;;  UD chains for artificial uses
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 10
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 139 { d127(bb 2 insn 9) }
;;   UD chains for insn luid 3 uid 12
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 140 { d128(bb 2 insn 11) }
;;   UD chains for insn luid 4 uid 17
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 0 insn -1) }
;;      reg 2 { d5(bb 0 insn -1) }
;;      reg 3 { d7(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 29
;;      reg 0 { d0(bb 2 insn 17) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u14(0){ d0(bb 2 insn 17) }u15(11){ d8(bb 0 insn -1) }u16(13){ d11(bb 0 insn -1) }u17(14){ }u18(25){ d24(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 17) }
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 29 to worklist
  Adding insn 17 to worklist
  Adding insn 12 to worklist
  Adding insn 10 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 139) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 13 sp) in insn 12:
Processing use of (reg 140) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 13 sp) in insn 17:
Processing use of (reg 0 r0) in insn 17:
Processing use of (reg 1 r1) in insn 17:
Processing use of (reg 2 r2) in insn 17:
Processing use of (reg 3 r3) in insn 17:
Processing use of (reg 0 r0) in insn 29:


vfp_double_fnmac

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 148{129d,19u,0e} in 6{5 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 139[127,1] 140[128,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(3)
0, 127, 128
;; rd  kill	(6)
0, 1, 12, 13, 127, 128

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:894 (set (reg:SI 139)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:894 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 139)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:894 (set (reg/f:SI 140)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x10e374a0>)) 167 {*arm_movsi_insn} (nil))

(insn 12 11 17 2 arch/arm/vfp/vfpdouble.c:894 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 140)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x10e374a0>)
            (nil))))

(call_insn 17 12 29 2 arch/arm/vfp/vfpdouble.c:894 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply_accumulate") [flags 0x3] <function_decl 0x10b08280 vfp_double_multiply_accumulate>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 29 17 0 2 arch/arm/vfp/vfpdouble.c:895 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fmsc (vfp_double_fmsc)[0:177]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fmsc

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 148{129d,19u,0e} in 6{5 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 139[127,1] 140[128,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d3(1){ }d5(2){ }d7(3){ }d8(11){ }d10(12){ }d11(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d8(bb 0 insn -1) }u1(13){ d11(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(3)
0, 127, 128
;; rd  kill	(6)
0, 1, 12, 13, 127, 128
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;;  UD chains for artificial uses
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 10
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 139 { d127(bb 2 insn 9) }
;;   UD chains for insn luid 3 uid 12
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 140 { d128(bb 2 insn 11) }
;;   UD chains for insn luid 4 uid 17
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 0 insn -1) }
;;      reg 2 { d5(bb 0 insn -1) }
;;      reg 3 { d7(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 29
;;      reg 0 { d0(bb 2 insn 17) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u14(0){ d0(bb 2 insn 17) }u15(11){ d8(bb 0 insn -1) }u16(13){ d11(bb 0 insn -1) }u17(14){ }u18(25){ d24(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 17) }
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 29 to worklist
  Adding insn 17 to worklist
  Adding insn 12 to worklist
  Adding insn 10 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 139) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 13 sp) in insn 12:
Processing use of (reg 140) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 13 sp) in insn 17:
Processing use of (reg 0 r0) in insn 17:
Processing use of (reg 1 r1) in insn 17:
Processing use of (reg 2 r2) in insn 17:
Processing use of (reg 3 r3) in insn 17:
Processing use of (reg 0 r0) in insn 29:


vfp_double_fmsc

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 148{129d,19u,0e} in 6{5 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 139[127,1] 140[128,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(3)
0, 127, 128
;; rd  kill	(6)
0, 1, 12, 13, 127, 128

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:902 (set (reg:SI 139)
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:902 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 139)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_EQUAL (const_int 2 [0x2])
            (nil))))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:902 (set (reg/f:SI 140)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x10e37f00>)) 167 {*arm_movsi_insn} (nil))

(insn 12 11 17 2 arch/arm/vfp/vfpdouble.c:902 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 140)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x10e37f00>)
            (nil))))

(call_insn 17 12 29 2 arch/arm/vfp/vfpdouble.c:902 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply_accumulate") [flags 0x3] <function_decl 0x10b08280 vfp_double_multiply_accumulate>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 29 17 0 2 arch/arm/vfp/vfpdouble.c:903 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fmac (vfp_double_fmac)[0:175]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fmac

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 148{129d,19u,0e} in 6{5 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 139[127,1] 140[128,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d3(1){ }d5(2){ }d7(3){ }d8(11){ }d10(12){ }d11(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d8(bb 0 insn -1) }u1(13){ d11(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(3)
0, 127, 128
;; rd  kill	(6)
0, 1, 12, 13, 127, 128
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;;  UD chains for artificial uses
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 10
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 139 { d127(bb 2 insn 9) }
;;   UD chains for insn luid 3 uid 12
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 140 { d128(bb 2 insn 11) }
;;   UD chains for insn luid 4 uid 17
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 0 insn -1) }
;;      reg 2 { d5(bb 0 insn -1) }
;;      reg 3 { d7(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 29
;;      reg 0 { d0(bb 2 insn 17) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u14(0){ d0(bb 2 insn 17) }u15(11){ d8(bb 0 insn -1) }u16(13){ d11(bb 0 insn -1) }u17(14){ }u18(25){ d24(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 17) }
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 29 to worklist
  Adding insn 17 to worklist
  Adding insn 12 to worklist
  Adding insn 10 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 139) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 13 sp) in insn 12:
Processing use of (reg 140) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 13 sp) in insn 17:
Processing use of (reg 0 r0) in insn 17:
Processing use of (reg 1 r1) in insn 17:
Processing use of (reg 2 r2) in insn 17:
Processing use of (reg 3 r3) in insn 17:
Processing use of (reg 0 r0) in insn 29:


vfp_double_fmac

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,5u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 148{129d,19u,0e} in 6{5 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 139[127,1] 140[128,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 139 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(3)
0, 127, 128
;; rd  kill	(6)
0, 1, 12, 13, 127, 128

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:886 (set (reg:SI 139)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:886 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 139)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:886 (set (reg/f:SI 140)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x10e3d4e0>)) 167 {*arm_movsi_insn} (nil))

(insn 12 11 17 2 arch/arm/vfp/vfpdouble.c:886 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 140)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x10e3d4e0>)
            (nil))))

(call_insn 17 12 29 2 arch/arm/vfp/vfpdouble.c:886 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_multiply_accumulate") [flags 0x3] <function_decl 0x10b08280 vfp_double_multiply_accumulate>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 29 17 0 2 arch/arm/vfp/vfpdouble.c:887 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(11)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127, 128


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fadd (vfp_double_fadd)[0:181]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 22 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 18 count 24 (  1.8)


vfp_double_fadd

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={9d,5u} r2={9d,3u} r3={9d,3u} r11={1d,12u} r12={7d} r13={1d,19u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,10u} r25={1d,23u,6d} r26={1d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,3u} r134={5d,8u,1d} r135={1d,3u} r136={5d,8u,1d} r137={1d,1u} r139={1d,5u,1d} r140={1d,5u,1d} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,2u} r162={1d,1u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={2d,2u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r179={1d,1u,1d} r180={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,2u} r189={1d,1u} r190={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={2d,2u} r199={1d,1u} r200={1d,2u} r201={1d,1u} r202={1d,1u} r204={1d,1u} r206={1d,1u} r208={1d,1u} r210={1d,1u} r211={2d,3u} r212={1d,1u} r214={1d,1u} r216={1d,1u} r217={2d,3u} 
;;    total ref usage 1011{805d,194u,12e} in 113{107 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733
0[0,13] 1[13,9] 2[22,9] 3[31,9] 11[40,1] 12[41,7] 13[48,1] 14[49,7] 15[56,6] 16[62,6] 17[68,6] 18[74,6] 19[80,6] 20[86,6] 21[92,6] 22[98,6] 23[104,6] 24[110,16] 25[126,1] 26[127,1] 27[128,6] 28[134,6] 29[140,6] 30[146,6] 31[152,6] 32[158,6] 33[164,6] 34[170,6] 35[176,6] 36[182,6] 37[188,6] 38[194,6] 39[200,6] 40[206,6] 41[212,6] 42[218,6] 43[224,6] 44[230,6] 45[236,6] 46[242,6] 47[248,6] 48[254,6] 49[260,6] 50[266,6] 51[272,6] 52[278,6] 53[284,6] 54[290,6] 55[296,6] 56[302,6] 57[308,6] 58[314,6] 59[320,6] 60[326,6] 61[332,6] 62[338,6] 63[344,6] 64[350,6] 65[356,6] 66[362,6] 67[368,6] 68[374,6] 69[380,6] 70[386,6] 71[392,6] 72[398,6] 73[404,6] 74[410,6] 75[416,6] 76[422,6] 77[428,6] 78[434,6] 79[440,6] 80[446,6] 81[452,6] 82[458,6] 83[464,6] 84[470,6] 85[476,6] 86[482,6] 87[488,6] 88[494,6] 89[500,6] 90[506,6] 91[512,6] 92[518,6] 93[524,6] 94[530,6] 95[536,6] 96[542,6] 97[548,6] 98[554,6] 99[560,6] 100[566,6] 101[572,6] 102[578,6] 103[584,6] 104[590,6] 105[596,6] 106[602,6] 107[608,6] 108[614,6] 109[620,6] 110[626,6] 111[632,6] 112[638,6] 113[644,6] 114[650,6] 115[656,6] 116[662,6] 117[668,6] 118[674,6] 119[680,6] 120[686,6] 121[692,6] 122[698,6] 123[704,6] 124[710,6] 125[716,6] 126[722,6] 127[728,6] 133[734,1] 134[735,5] 135[740,1] 136[741,5] 137[746,1] 139[747,1] 140[748,1] 142[749,1] 143[750,1] 144[751,1] 145[752,1] 146[753,1] 147[754,1] 152[755,1] 153[756,1] 156[757,1] 157[758,1] 159[759,1] 160[760,1] 161[761,1] 162[762,1] 163[763,1] 166[764,1] 167[765,1] 168[766,1] 169[767,1] 170[768,1] 171[769,2] 172[771,1] 173[772,1] 174[773,1] 179[774,1] 180[775,1] 183[776,1] 184[777,1] 186[778,1] 187[779,1] 188[780,1] 189[781,1] 190[782,1] 193[783,1] 194[784,1] 195[785,1] 196[786,1] 197[787,1] 198[788,2] 199[790,1] 200[791,1] 201[792,1] 202[793,1] 204[794,1] 206[795,1] 208[796,1] 210[797,1] 211[798,2] 212[800,1] 214[801,1] 216[802,1] 217[803,2] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d12(0){ }d21(1){ }d30(2){ }d39(3){ }d40(11){ }d47(12){ }d48(13){ }d55(14){ }d126(25){ }d127(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  kill	(58)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 126, 127
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d40(bb 0 insn -1) }u1(13){ d48(bb 0 insn -1) }u2(25){ d126(bb 0 insn -1) }u3(26){ d127(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 206 208 210 211
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 206 208 210 211
;; live  kill	 14 [lr]
;; rd  in  	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  gen 	(29)
10, 20, 123, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798, 799
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d12(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d21(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d30(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d39(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 9
;;      reg 143 { d750(bb 2 insn 3) }
;;   UD chains for insn luid 5 uid 10
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d11(bb 2 insn 9) }
;;   UD chains for insn luid 6 uid 11
;;      reg 0 { d10(bb 2 insn 10) }
;;      reg 1 { d20(bb 2 insn 10) }
;;   UD chains for insn luid 8 uid 13
;;      reg 140 { d748(bb 2 insn 11) }
;;      reg 147 { d754(bb 2 insn 12) }
;;   eq_note reg 140 { }
;;   UD chains for insn luid 9 uid 14
;;      reg 146 { d753(bb 2 insn 13) }
;;   UD chains for insn luid 10 uid 16
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 206 { d795(bb 2 insn 14) }
;;   UD chains for insn luid 11 uid 17
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 12 uid 19
;;      reg 208 { d796(bb 2 insn 17) }
;;   UD chains for insn luid 13 uid 20
;;      reg 152 { d755(bb 2 insn 19) }
;;   UD chains for insn luid 14 uid 21
;;      reg 153 { d756(bb 2 insn 20) }
;;   eq_note reg 152 { }
;;   UD chains for insn luid 15 uid 22
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 16 uid 23
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 17 uid 24
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 18 uid 25
;;      reg 156 { d757(bb 2 insn 23) }
;;      reg 211 { d799(bb 2 insn 24) }
;;   UD chains for insn luid 19 uid 26
;;      reg 140 { d748(bb 2 insn 11) }
;;   UD chains for insn luid 20 uid 27
;;      reg 211 { d798(bb 2 insn 25) }
;;   UD chains for insn luid 22 uid 28
;;      reg 136 read/write { d741(bb 2 insn 155) }
;;      reg 210 { d797(bb 2 insn 26) }
;;   UD chains for insn luid 23 uid 29
;;      reg 136 { d745(bb 2 insn 28) d741(bb 2 insn 155) }
;;      reg 136 read/write { d745(bb 2 insn 28) d741(bb 2 insn 155) }
;;      reg 157 { d758(bb 2 insn 27) }
;;   UD chains for insn luid 24 uid 30
;;      reg 136 read/write { d745(bb 2 insn 28) d744(bb 2 insn 29) d741(bb 2 insn 155) }
;;      reg 211 { d798(bb 2 insn 25) }
;;   UD chains for insn luid 26 uid 32
;;      reg 160 { d760(bb 2 insn 31) }
;;   UD chains for insn luid 27 uid 33
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 28 uid 34
;;      reg 159 { d759(bb 2 insn 32) }
;;   UD chains for insn luid 29 uid 35
;;      reg 161 { d761(bb 2 insn 33) }
;;      reg 162 { d762(bb 2 insn 34) }
;;   UD chains for insn luid 30 uid 36
;;      reg 24 { d124(bb 2 insn 35) }
;;   UD chains for insn luid 31 uid 39
;;      reg 161 { d761(bb 2 insn 33) }
;;   UD chains for insn luid 32 uid 40
;;      reg 24 { d111(bb 2 insn 39) }
;;   UD chains for insn luid 33 uid 42
;;      reg 163 { d763(bb 2 insn 36) }
;;      reg 166 { d764(bb 2 insn 40) }
;;   UD chains for insn luid 34 uid 43
;;      reg 167 { d765(bb 2 insn 42) }
;;   UD chains for insn luid 35 uid 44
;;      reg 168 { d766(bb 2 insn 43) }
;;   UD chains for insn luid 36 uid 45
;;      reg 169 { d767(bb 2 insn 44) }
;;   UD chains for insn luid 37 uid 46
;;      reg 24 { d123(bb 2 insn 45) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ d40(bb 0 insn -1) }u54(13){ d48(bb 0 insn -1) }u55(25){ d126(bb 0 insn -1) }u56(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 136 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 136 170
;; live  kill	
;; rd  in  	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;; rd  gen 	(2)
742, 768
;; rd  kill	(6)
741, 742, 743, 744, 745, 768
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(37)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 49
;;      reg 136 { d743(bb 2 insn 30) }
;;      reg 170 { d768(bb 3 insn 48) }
;;   eq_note reg 136 { }

( 2 3 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ d40(bb 0 insn -1) }u61(13){ d48(bb 0 insn -1) }u62(25){ d126(bb 0 insn -1) }u63(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;; rd  gen 	(1)
122
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; rd  out 	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 52
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 53
;;      reg 135 { d740(bb 2 insn 21) }
;;   UD chains for insn luid 2 uid 54
;;      reg 24 { d122(bb 4 insn 53) }

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u68(11){ d40(bb 0 insn -1) }u69(13){ d48(bb 0 insn -1) }u70(25){ d126(bb 0 insn -1) }u71(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  gen 	 24 [cc] 171
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;; rd  gen 	(2)
121, 769
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 769, 770
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 56
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 57
;;      reg 136 { d743(bb 2 insn 30) d742(bb 3 insn 49) }
;;      reg 171 { d770(bb 5 insn 56) }
;;   UD chains for insn luid 2 uid 58
;;      reg 171 { d769(bb 5 insn 57) }
;;   UD chains for insn luid 3 uid 59
;;      reg 24 { d121(bb 5 insn 58) }

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ d40(bb 0 insn -1) }u78(13){ d48(bb 0 insn -1) }u79(25){ d126(bb 0 insn -1) }u80(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 172
;; live  kill	 14 [lr]
;; rd  in  	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 795, 796, 797, 798
;; rd  gen 	(1)
771
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 771
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(40)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 795, 796, 797, 798
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 61
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 62
;;      reg 172 { d771(bb 6 insn 61) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 63
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d9(bb 6 insn 62) }

( 4 5 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u86(11){ d40(bb 0 insn -1) }u87(13){ d48(bb 0 insn -1) }u88(25){ d126(bb 0 insn -1) }u89(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 212 214 216 217
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 212 214 216 217
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 20, 30, 39, 40, 47, 48, 121, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 795, 796, 797, 798
;; rd  gen 	(25)
6, 18, 117, 734, 737, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 800, 801, 802, 803
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 734, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 800, 801, 802, 803, 804
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 66
;;      reg 144 { d751(bb 2 insn 4) }
;;   UD chains for insn luid 1 uid 67
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d7(bb 7 insn 66) }
;;   UD chains for insn luid 2 uid 68
;;      reg 0 { d6(bb 7 insn 67) }
;;      reg 1 { d18(bb 7 insn 67) }
;;   UD chains for insn luid 4 uid 70
;;      reg 139 { d747(bb 7 insn 68) }
;;      reg 174 { d773(bb 7 insn 69) }
;;   eq_note reg 139 { }
;;   UD chains for insn luid 5 uid 71
;;      reg 173 { d772(bb 7 insn 70) }
;;   UD chains for insn luid 6 uid 73
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 212 { d800(bb 7 insn 71) }
;;   UD chains for insn luid 7 uid 74
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 8 uid 76
;;      reg 214 { d801(bb 7 insn 74) }
;;   UD chains for insn luid 9 uid 77
;;      reg 179 { d774(bb 7 insn 76) }
;;   UD chains for insn luid 10 uid 78
;;      reg 180 { d775(bb 7 insn 77) }
;;   eq_note reg 179 { }
;;   UD chains for insn luid 11 uid 79
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 12 uid 80
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 13 uid 81
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 14 uid 82
;;      reg 183 { d776(bb 7 insn 80) }
;;      reg 217 { d804(bb 7 insn 81) }
;;   UD chains for insn luid 15 uid 83
;;      reg 139 { d747(bb 7 insn 68) }
;;   UD chains for insn luid 16 uid 84
;;      reg 217 { d803(bb 7 insn 82) }
;;   UD chains for insn luid 18 uid 85
;;      reg 134 read/write { d735(bb 7 insn 156) }
;;      reg 216 { d802(bb 7 insn 83) }
;;   UD chains for insn luid 19 uid 86
;;      reg 134 { d739(bb 7 insn 85) d735(bb 7 insn 156) }
;;      reg 134 read/write { d739(bb 7 insn 85) d735(bb 7 insn 156) }
;;      reg 184 { d777(bb 7 insn 84) }
;;   UD chains for insn luid 20 uid 87
;;      reg 134 read/write { d739(bb 7 insn 85) d738(bb 7 insn 86) d735(bb 7 insn 156) }
;;      reg 217 { d803(bb 7 insn 82) }
;;   UD chains for insn luid 22 uid 89
;;      reg 187 { d779(bb 7 insn 88) }
;;   UD chains for insn luid 23 uid 90
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 24 uid 91
;;      reg 186 { d778(bb 7 insn 89) }
;;   UD chains for insn luid 25 uid 92
;;      reg 188 { d780(bb 7 insn 90) }
;;      reg 189 { d781(bb 7 insn 91) }
;;   UD chains for insn luid 26 uid 93
;;      reg 24 { d118(bb 7 insn 92) }
;;   UD chains for insn luid 27 uid 96
;;      reg 188 { d780(bb 7 insn 90) }
;;   UD chains for insn luid 28 uid 97
;;      reg 24 { d110(bb 7 insn 96) }
;;   UD chains for insn luid 29 uid 99
;;      reg 190 { d782(bb 7 insn 93) }
;;      reg 193 { d783(bb 7 insn 97) }
;;   UD chains for insn luid 30 uid 100
;;      reg 194 { d784(bb 7 insn 99) }
;;   UD chains for insn luid 31 uid 101
;;      reg 195 { d785(bb 7 insn 100) }
;;   UD chains for insn luid 32 uid 102
;;      reg 196 { d786(bb 7 insn 101) }
;;   UD chains for insn luid 33 uid 103
;;      reg 24 { d117(bb 7 insn 102) }

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u135(11){ d40(bb 0 insn -1) }u136(13){ d48(bb 0 insn -1) }u137(25){ d126(bb 0 insn -1) }u138(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 134 197
;; live  kill	
;; rd  in  	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(2)
736, 787
;; rd  kill	(6)
735, 736, 737, 738, 739, 787
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(63)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 106
;;      reg 134 { d737(bb 7 insn 87) }
;;      reg 197 { d787(bb 8 insn 105) }
;;   eq_note reg 134 { }

( 7 8 )->[9]->( 10 12 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u142(11){ d40(bb 0 insn -1) }u143(13){ d48(bb 0 insn -1) }u144(25){ d126(bb 0 insn -1) }u145(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(1)
116
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; rd  out 	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 109
;;      reg 25 { d126(bb 0 insn -1) }
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;   UD chains for insn luid 1 uid 110
;;      reg 133 { d734(bb 7 insn 78) }
;;   UD chains for insn luid 2 uid 111
;;      reg 24 { d116(bb 9 insn 110) }

( 9 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u150(11){ d40(bb 0 insn -1) }u151(13){ d48(bb 0 insn -1) }u152(25){ d126(bb 0 insn -1) }u153(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  gen 	 24 [cc] 198
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(2)
115, 788
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 788, 789
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 113
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;   UD chains for insn luid 1 uid 114
;;      reg 134 { d737(bb 7 insn 87) d736(bb 8 insn 106) }
;;      reg 198 { d789(bb 10 insn 113) }
;;   UD chains for insn luid 2 uid 115
;;      reg 198 { d788(bb 10 insn 114) }
;;   UD chains for insn luid 3 uid 116
;;      reg 24 { d115(bb 10 insn 115) }

( 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u159(11){ d40(bb 0 insn -1) }u160(13){ d48(bb 0 insn -1) }u161(25){ d126(bb 0 insn -1) }u162(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 199
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 199
;; live  kill	 14 [lr]
;; rd  in  	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(1)
790
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 790
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(66)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 118
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 119
;;      reg 199 { d790(bb 11 insn 118) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 120
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d5(bb 11 insn 119) }

( 9 10 11 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u168(11){ d40(bb 0 insn -1) }u169(13){ d48(bb 0 insn -1) }u170(25){ d126(bb 0 insn -1) }u171(26){ d127(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 200 201 202 204
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 137 200 201 202 204
;; live  kill	 14 [lr]
;; rd  in  	(67)
6, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(6)
0, 746, 791, 792, 793, 794
;; rd  kill	(25)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 49, 50, 51, 52, 53, 54, 55, 746, 791, 792, 793, 794
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(72)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 25 { d126(bb 0 insn -1) }
;;   reg 26 { d127(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 123
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 124
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 125
;;      reg 25 { d126(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 126
;;      reg 200 { d791(bb 12 insn 123) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 4 uid 127
;;      reg 201 { d792(bb 12 insn 124) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 128
;;      reg 202 { d793(bb 12 insn 125) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 6 uid 129
;;      reg 145 { d752(bb 2 insn 5) }
;;   UD chains for insn luid 7 uid 130
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d3(bb 12 insn 126) }
;;      reg 1 { d16(bb 12 insn 127) }
;;      reg 2 { d25(bb 12 insn 128) }
;;      reg 3 { d34(bb 12 insn 129) }
;;   UD chains for insn luid 8 uid 131
;;      reg 0 { d2(bb 12 insn 130) }
;;   UD chains for insn luid 10 uid 134
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 204 { d794(bb 12 insn 133) }
;;   UD chains for insn luid 11 uid 135
;;      reg 142 { d749(bb 2 insn 2) }
;;   UD chains for insn luid 12 uid 136
;;      reg 200 { d791(bb 12 insn 123) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 13 uid 137
;;      reg 145 { d752(bb 2 insn 5) }
;;   UD chains for insn luid 14 uid 138
;;      reg 137 { d746(bb 12 insn 131) }
;;   UD chains for insn luid 15 uid 139
;;      reg 13 { d48(bb 0 insn -1) }
;;      reg 0 { d1(bb 12 insn 135) }
;;      reg 1 { d13(bb 12 insn 136) }
;;      reg 2 { d23(bb 12 insn 137) }
;;      reg 3 { d32(bb 12 insn 138) }
;;   UD chains for insn luid 16 uid 151
;;      reg 0 { d0(bb 12 insn 139) }

( 12 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u201(0){ d0(bb 12 insn 139) }u202(11){ d40(bb 0 insn -1) }u203(13){ d48(bb 0 insn -1) }u204(14){ }u205(25){ d126(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(72)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(72)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 12 insn 139) }
;;   reg 11 { d40(bb 0 insn -1) }
;;   reg 13 { d48(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d126(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 46 to worklist
  Adding insn 22 to worklist
  Adding insn 16 to worklist
  Adding insn 10 to worklist
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 59 to worklist
  Adding insn 63 to worklist
  Adding insn 103 to worklist
  Adding insn 79 to worklist
  Adding insn 73 to worklist
  Adding insn 67 to worklist
  Adding insn 111 to worklist
  Adding insn 109 to worklist
  Adding insn 116 to worklist
  Adding insn 120 to worklist
  Adding insn 151 to worklist
  Adding insn 139 to worklist
  Adding insn 134 to worklist
  Adding insn 130 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 130:
Processing use of (reg 0 r0) in insn 130:
  Adding insn 126 to worklist
Processing use of (reg 1 r1) in insn 130:
  Adding insn 127 to worklist
Processing use of (reg 2 r2) in insn 130:
  Adding insn 128 to worklist
Processing use of (reg 3 r3) in insn 130:
  Adding insn 129 to worklist
Processing use of (reg 145 [ fpscr ]) in insn 129:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 202) in insn 128:
  Adding insn 125 to worklist
Processing use of (reg 25 sfp) in insn 125:
Processing use of (reg 201) in insn 127:
  Adding insn 124 to worklist
Processing use of (reg 25 sfp) in insn 124:
Processing use of (reg 200) in insn 126:
  Adding insn 123 to worklist
Processing use of (reg 25 sfp) in insn 123:
Processing use of (reg 13 sp) in insn 134:
Processing use of (reg 204) in insn 134:
  Adding insn 133 to worklist
Processing use of (reg 13 sp) in insn 139:
Processing use of (reg 0 r0) in insn 139:
  Adding insn 135 to worklist
Processing use of (reg 1 r1) in insn 139:
  Adding insn 136 to worklist
Processing use of (reg 2 r2) in insn 139:
  Adding insn 137 to worklist
Processing use of (reg 3 r3) in insn 139:
  Adding insn 138 to worklist
Processing use of (reg 137 [ exceptions ]) in insn 138:
  Adding insn 131 to worklist
Processing use of (reg 0 r0) in insn 131:
Processing use of (reg 145 [ fpscr ]) in insn 137:
Processing use of (reg 200) in insn 136:
Processing use of (reg 142 [ dd ]) in insn 135:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 0 r0) in insn 151:
Processing use of (reg 13 sp) in insn 120:
Processing use of (reg 0 r0) in insn 120:
  Adding insn 119 to worklist
Processing use of (reg 199) in insn 119:
  Adding insn 118 to worklist
Processing use of (reg 25 sfp) in insn 118:
Processing use of (reg 24 cc) in insn 116:
  Adding insn 115 to worklist
Processing use of (reg 198 [ significand ]) in insn 115:
  Adding insn 114 to worklist
Processing use of (subreg (reg 134 [ significand ]) 4) in insn 114:
  Adding insn 87 to worklist
  Adding insn 106 to worklist
Processing use of (reg 198 [ significand ]) in insn 114:
  Adding insn 113 to worklist
Processing use of (subreg (reg 134 [ significand ]) 0) in insn 113:
Processing use of (reg 134 [ significand ]) in insn 106:
Processing use of (reg 197) in insn 106:
  Adding insn 105 to worklist
Processing use of (reg 134 [ significand ]) in insn 87:
  Adding insn 85 to worklist
  Adding insn 86 to worklist
  Adding insn 156 to worklist
Processing use of (reg 217 [+4 ]) in insn 87:
  Adding insn 82 to worklist
Processing use of (reg 183) in insn 82:
  Adding insn 80 to worklist
Processing use of (reg 217 [+4 ]) in insn 82:
  Adding insn 81 to worklist
Processing use of (subreg (reg 139 [ D.4973 ]) 4) in insn 81:
  Adding insn 68 to worklist
Processing use of (reg 0 r0) in insn 68:
Processing use of (reg 1 r1) in insn 68:
Processing use of (subreg (reg 139 [ D.4973 ]) 0) in insn 80:
Processing use of (subreg (reg 134 [ significand ]) 0) in insn 86:
Processing use of (reg 134 [ significand ]) in insn 86:
Processing use of (reg 184) in insn 86:
  Adding insn 84 to worklist
Processing use of (reg 217 [+4 ]) in insn 84:
Processing use of (reg 134 [ significand ]) in insn 85:
Processing use of (reg 216) in insn 85:
  Adding insn 83 to worklist
Processing use of (subreg (reg 139 [ D.4973 ]) 0) in insn 83:
Processing use of (reg 25 sfp) in insn 109:
Processing use of (reg 134 [ significand ]) in insn 109:
Processing use of (reg 24 cc) in insn 111:
  Adding insn 110 to worklist
Processing use of (reg 133 [ D.6021 ]) in insn 110:
  Adding insn 78 to worklist
Processing use of (reg 180) in insn 78:
  Adding insn 77 to worklist
Processing use of (reg 179) in insn 77:
  Adding insn 76 to worklist
Processing use of (subreg (reg 214) 0) in insn 76:
  Adding insn 74 to worklist
Processing use of (subreg (reg 139 [ D.4973 ]) 4) in insn 74:
Processing use of (reg 13 sp) in insn 67:
Processing use of (reg 0 r0) in insn 67:
  Adding insn 66 to worklist
Processing use of (reg 144 [ dm ]) in insn 66:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 25 sfp) in insn 73:
Processing use of (subreg (reg 212) 0) in insn 73:
  Adding insn 71 to worklist
Processing use of (subreg (reg 173) 4) in insn 71:
  Adding insn 70 to worklist
Processing use of (reg 139 [ D.4973 ]) in insn 70:
Processing use of (reg 174) in insn 70:
  Adding insn 69 to worklist
Processing use of (reg 25 sfp) in insn 79:
Processing use of (subreg (reg 133 [ D.6021 ]) 0) in insn 79:
Processing use of (reg 24 cc) in insn 103:
  Adding insn 102 to worklist
Processing use of (reg 196) in insn 102:
  Adding insn 101 to worklist
Processing use of (reg 195) in insn 101:
  Adding insn 100 to worklist
Processing use of (subreg (reg 194) 0) in insn 100:
  Adding insn 99 to worklist
Processing use of (reg 190) in insn 99:
  Adding insn 93 to worklist
Processing use of (reg 193) in insn 99:
  Adding insn 97 to worklist
Processing use of (reg 24 cc) in insn 97:
  Adding insn 96 to worklist
Processing use of (reg 188 [ D.6021 ]) in insn 96:
  Adding insn 90 to worklist
Processing use of (subreg (reg 133 [ D.6021 ]) 0) in insn 90:
Processing use of (reg 24 cc) in insn 93:
  Adding insn 92 to worklist
Processing use of (reg 188 [ D.6021 ]) in insn 92:
Processing use of (reg 189) in insn 92:
  Adding insn 91 to worklist
Processing use of (reg 186) in insn 91:
  Adding insn 89 to worklist
Processing use of (subreg (reg 187) 0) in insn 89:
  Adding insn 88 to worklist
Processing use of (reg 13 sp) in insn 63:
Processing use of (reg 0 r0) in insn 63:
  Adding insn 62 to worklist
Processing use of (reg 172) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 25 sfp) in insn 61:
Processing use of (reg 24 cc) in insn 59:
  Adding insn 58 to worklist
Processing use of (reg 171 [ significand ]) in insn 58:
  Adding insn 57 to worklist
Processing use of (subreg (reg 136 [ significand ]) 4) in insn 57:
  Adding insn 30 to worklist
  Adding insn 49 to worklist
Processing use of (reg 171 [ significand ]) in insn 57:
  Adding insn 56 to worklist
Processing use of (subreg (reg 136 [ significand ]) 0) in insn 56:
Processing use of (reg 136 [ significand ]) in insn 49:
Processing use of (reg 170) in insn 49:
  Adding insn 48 to worklist
Processing use of (reg 136 [ significand ]) in insn 30:
  Adding insn 28 to worklist
  Adding insn 29 to worklist
  Adding insn 155 to worklist
Processing use of (reg 211 [+4 ]) in insn 30:
  Adding insn 25 to worklist
Processing use of (reg 156) in insn 25:
  Adding insn 23 to worklist
Processing use of (reg 211 [+4 ]) in insn 25:
  Adding insn 24 to worklist
Processing use of (subreg (reg 140 [ D.4964 ]) 4) in insn 24:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (subreg (reg 140 [ D.4964 ]) 0) in insn 23:
Processing use of (subreg (reg 136 [ significand ]) 0) in insn 29:
Processing use of (reg 136 [ significand ]) in insn 29:
Processing use of (reg 157) in insn 29:
  Adding insn 27 to worklist
Processing use of (reg 211 [+4 ]) in insn 27:
Processing use of (reg 136 [ significand ]) in insn 28:
Processing use of (reg 210) in insn 28:
  Adding insn 26 to worklist
Processing use of (subreg (reg 140 [ D.4964 ]) 0) in insn 26:
Processing use of (reg 25 sfp) in insn 52:
Processing use of (reg 136 [ significand ]) in insn 52:
Processing use of (reg 24 cc) in insn 54:
  Adding insn 53 to worklist
Processing use of (reg 135 [ D.6006 ]) in insn 53:
  Adding insn 21 to worklist
Processing use of (reg 153) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 152) in insn 20:
  Adding insn 19 to worklist
Processing use of (subreg (reg 208) 0) in insn 19:
  Adding insn 17 to worklist
Processing use of (subreg (reg 140 [ D.4964 ]) 4) in insn 17:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 143 [ dn ]) in insn 9:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 25 sfp) in insn 16:
Processing use of (subreg (reg 206) 0) in insn 16:
  Adding insn 14 to worklist
Processing use of (subreg (reg 146) 4) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 140 [ D.4964 ]) in insn 13:
Processing use of (reg 147) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 25 sfp) in insn 22:
Processing use of (subreg (reg 135 [ D.6006 ]) 0) in insn 22:
Processing use of (reg 24 cc) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 169) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 168) in insn 44:
  Adding insn 43 to worklist
Processing use of (subreg (reg 167) 0) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 163) in insn 42:
  Adding insn 36 to worklist
Processing use of (reg 166) in insn 42:
  Adding insn 40 to worklist
Processing use of (reg 24 cc) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 161 [ D.6006 ]) in insn 39:
  Adding insn 33 to worklist
Processing use of (subreg (reg 135 [ D.6006 ]) 0) in insn 33:
Processing use of (reg 24 cc) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 161 [ D.6006 ]) in insn 35:
Processing use of (reg 162) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 159) in insn 34:
  Adding insn 32 to worklist
Processing use of (subreg (reg 160) 0) in insn 32:
  Adding insn 31 to worklist


vfp_double_fadd

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={13d,12u} r1={9d,5u} r2={9d,3u} r3={9d,3u} r11={1d,12u} r12={7d} r13={1d,19u} r14={7d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={16d,10u} r25={1d,23u,6d} r26={1d,11u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} r133={1d,3u} r134={5d,8u,1d} r135={1d,3u} r136={5d,8u,1d} r137={1d,1u} r139={1d,5u,1d} r140={1d,5u,1d} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,2u} r146={1d,1u} r147={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,2u} r162={1d,1u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={2d,2u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r179={1d,1u,1d} r180={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,2u} r189={1d,1u} r190={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={2d,2u} r199={1d,1u} r200={1d,2u} r201={1d,1u} r202={1d,1u} r204={1d,1u} r206={1d,1u} r208={1d,1u} r210={1d,1u} r211={2d,3u} r212={1d,1u} r214={1d,1u} r216={1d,1u} r217={2d,3u} 
;;    total ref usage 1011{805d,194u,12e} in 113{107 regular + 6 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733
0[0,13] 1[13,9] 2[22,9] 3[31,9] 11[40,1] 12[41,7] 13[48,1] 14[49,7] 15[56,6] 16[62,6] 17[68,6] 18[74,6] 19[80,6] 20[86,6] 21[92,6] 22[98,6] 23[104,6] 24[110,16] 25[126,1] 26[127,1] 27[128,6] 28[134,6] 29[140,6] 30[146,6] 31[152,6] 32[158,6] 33[164,6] 34[170,6] 35[176,6] 36[182,6] 37[188,6] 38[194,6] 39[200,6] 40[206,6] 41[212,6] 42[218,6] 43[224,6] 44[230,6] 45[236,6] 46[242,6] 47[248,6] 48[254,6] 49[260,6] 50[266,6] 51[272,6] 52[278,6] 53[284,6] 54[290,6] 55[296,6] 56[302,6] 57[308,6] 58[314,6] 59[320,6] 60[326,6] 61[332,6] 62[338,6] 63[344,6] 64[350,6] 65[356,6] 66[362,6] 67[368,6] 68[374,6] 69[380,6] 70[386,6] 71[392,6] 72[398,6] 73[404,6] 74[410,6] 75[416,6] 76[422,6] 77[428,6] 78[434,6] 79[440,6] 80[446,6] 81[452,6] 82[458,6] 83[464,6] 84[470,6] 85[476,6] 86[482,6] 87[488,6] 88[494,6] 89[500,6] 90[506,6] 91[512,6] 92[518,6] 93[524,6] 94[530,6] 95[536,6] 96[542,6] 97[548,6] 98[554,6] 99[560,6] 100[566,6] 101[572,6] 102[578,6] 103[584,6] 104[590,6] 105[596,6] 106[602,6] 107[608,6] 108[614,6] 109[620,6] 110[626,6] 111[632,6] 112[638,6] 113[644,6] 114[650,6] 115[656,6] 116[662,6] 117[668,6] 118[674,6] 119[680,6] 120[686,6] 121[692,6] 122[698,6] 123[704,6] 124[710,6] 125[716,6] 126[722,6] 127[728,6] 133[734,1] 134[735,5] 135[740,1] 136[741,5] 137[746,1] 139[747,1] 140[748,1] 142[749,1] 143[750,1] 144[751,1] 145[752,1] 146[753,1] 147[754,1] 152[755,1] 153[756,1] 156[757,1] 157[758,1] 159[759,1] 160[760,1] 161[761,1] 162[762,1] 163[763,1] 166[764,1] 167[765,1] 168[766,1] 169[767,1] 170[768,1] 171[769,2] 172[771,1] 173[772,1] 174[773,1] 179[774,1] 180[775,1] 183[776,1] 184[777,1] 186[778,1] 187[779,1] 188[780,1] 189[781,1] 190[782,1] 193[783,1] 194[784,1] 195[785,1] 196[786,1] 197[787,1] 198[788,2] 199[790,1] 200[791,1] 201[792,1] 202[793,1] 204[794,1] 206[795,1] 208[796,1] 210[797,1] 211[798,2] 212[800,1] 214[801,1] 216[802,1] 217[803,2] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 206 208 210 211
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 135 136 140 142 143 144 145 146 147 152 153 156 157 159 160 161 162 163 166 167 168 169 206 208 210 211
;; live  kill	 14 [lr]
;; rd  in  	(10)
12, 21, 30, 39, 40, 47, 48, 55, 126, 127
;; rd  gen 	(29)
10, 20, 123, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 740, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798, 799

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/vfp/vfpdouble.c:959 (set (reg/v:SI 142 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 3 2 4 2 arch/arm/vfp/vfpdouble.c:959 (set (reg/v:SI 143 [ dn ])
        (reg:SI 1 r1 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ dn ])
        (nil)))

(insn 4 3 5 2 arch/arm/vfp/vfpdouble.c:959 (set (reg/v:SI 144 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:959 (set (reg/v:SI 145 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:963 (set (reg:SI 0 r0)
        (reg/v:SI 143 [ dn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 143 [ dn ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:963 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:963 (set (reg:DI 140 [ D.4964 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 147)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 146)
        (and:DI (reg:DI 140 [ D.4964 ])
            (reg:DI 147))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 147)
        (expr_list:REG_EQUAL (and:DI (reg:DI 140 [ D.4964 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 14 13 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 206)
        (lshiftrt:SI (subreg:SI (reg:DI 146) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 146)
        (nil)))

(insn 16 14 17 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -30 [0xffffffffffffffe2])) [0 vdn.sign+0 S2 A16])
        (subreg:HI (reg:SI 206) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 206)
        (nil)))

(insn 17 16 19 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 208)
        (ashiftrt:SI (subreg:SI (reg:DI 140 [ D.4964 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 19 17 20 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 152)
        (zero_extend:SI (subreg:HI (reg:SI 208) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 208)
        (nil)))

(insn 20 19 21 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 153)
        (ashift:SI (reg:SI 152)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 152)
        (nil)))

(insn 21 20 22 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 135 [ D.6006 ])
        (lshiftrt:SI (reg:SI 153)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_EQUAL (and:SI (reg:SI 152)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 22 21 23 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0])) [0 vdn.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 135 [ D.6006 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 156)
        (lshiftrt:SI (subreg:SI (reg:DI 140 [ D.4964 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 211 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 140 [ D.4964 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 211 [+4 ])
        (ior:SI (reg:SI 156)
            (reg:SI 211 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 210)
        (ashift:SI (subreg:SI (reg:DI 140 [ D.4964 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 140 [ D.4964 ])
        (nil)))

(insn 27 26 155 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 157)
        (ashift:SI (reg:SI 211 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 155 27 28 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 136 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 28 155 29 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 210)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 210)
        (nil)))

(insn 29 28 30 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 0)
        (ior:SI (reg:SI 157)
            (subreg:SI (reg/v:DI 136 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 157)
        (nil)))

(insn 30 29 31 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 136 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 211 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 211 [+4 ])
        (nil)))

(insn 31 30 32 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 160)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 32 31 33 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 159)
        (subreg:HI (reg:SI 160) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 160)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 33 32 34 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 161 [ D.6006 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 135 [ D.6006 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 34 33 35 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 162)
        (sign_extend:SI (reg:HI 159))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 159)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 35 34 36 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.6006 ])
            (reg:SI 162))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 162)
        (nil)))

(insn 36 35 39 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 163)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 39 36 40 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.6006 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 161 [ D.6006 ])
        (nil)))

(insn 40 39 42 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 166)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 42 40 43 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 167)
        (and:SI (reg:SI 163)
            (reg:SI 166))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 166)
        (expr_list:REG_DEAD (reg:SI 163)
            (nil))))

(insn 43 42 44 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 168)
        (subreg:QI (reg:SI 167) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 167)
        (nil)))

(insn 44 43 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 169)
        (zero_extend:SI (reg:QI 168))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 168)
        (nil)))

(insn 45 44 46 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 169)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 169)
        (nil)))

(jump_insn 46 45 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ }u54(13){ }u55(25){ }u56(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 136 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 136 170
;; live  kill	
;; rd  in  	(36)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 795, 796, 797, 798
;; rd  gen 	(2)
742, 768
;; rd  kill	(6)
741, 742, 743, 744, 745, 768

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 170)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 136 [ significand ])
        (ior:DI (reg/v:DI 136 [ significand ])
            (reg:DI 170))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 170)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 136 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; rd  out 	(37)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 142 144 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 123, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;; rd  gen 	(1)
122
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 301 "" [1 uses])

(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdn.significand+0 S8 A64])
        (reg/v:DI 136 [ significand ])) 163 {*arm_movdi} (nil))

(insn 53 52 54 4 arch/arm/vfp/vfpdouble.c:964 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.6006 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.6006 ])
        (nil)))

(jump_insn 54 53 55 4 arch/arm/vfp/vfpdouble.c:964 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; rd  out 	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u68(11){ }u69(13){ }u70(25){ }u71(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 24 [cc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 142 144 145
;; live  gen 	 24 [cc] 171
;; live  kill	
;; rd  in  	(38)
10, 20, 30, 39, 40, 47, 48, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 795, 796, 797, 798
;; rd  gen 	(2)
121, 769
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 769, 770

;; Pred edge  4 [50.0%]  (fallthru)
(note 55 54 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 57 5 arch/arm/vfp/vfpdouble.c:964 discrim 1 (set (reg:SI 171 [ significand ])
        (subreg:SI (reg/v:DI 136 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 57 56 58 5 arch/arm/vfp/vfpdouble.c:964 discrim 1 (set (reg:SI 171 [ significand ])
        (ior:SI (reg:SI 171 [ significand ])
            (subreg:SI (reg/v:DI 136 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 136 [ significand ])
        (nil)))

(insn 58 57 59 5 arch/arm/vfp/vfpdouble.c:964 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 171 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 171 [ significand ])
        (nil)))

(jump_insn 59 58 60 5 arch/arm/vfp/vfpdouble.c:964 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 795, 796, 797, 798


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u77(11){ }u78(13){ }u79(25){ }u80(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 172
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 172
;; live  kill	 14 [lr]
;; rd  in  	(39)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 795, 796, 797, 798
;; rd  gen 	(1)
771
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 771

;; Pred edge  5 [29.0%]  (fallthru)
(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 6 arch/arm/vfp/vfpdouble.c:965 (set (reg/f:SI 172)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 62 61 63 6 arch/arm/vfp/vfpdouble.c:965 (set (reg:SI 0 r0)
        (reg/f:SI 172)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 172)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(call_insn 63 62 64 6 arch/arm/vfp/vfpdouble.c:965 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; rd  out 	(40)
10, 20, 30, 39, 40, 47, 48, 121, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 795, 796, 797, 798


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 4 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u86(11){ }u87(13){ }u88(25){ }u89(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 212 214 216 217
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144 145
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 133 134 139 173 174 179 180 183 184 186 187 188 189 190 193 194 195 196 212 214 216 217
;; live  kill	 14 [lr]
;; rd  in  	(41)
10, 20, 30, 39, 40, 47, 48, 121, 122, 126, 127, 740, 742, 743, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 795, 796, 797, 798
;; rd  gen 	(25)
6, 18, 117, 734, 737, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 800, 801, 802, 803
;; rd  kill	(67)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 49, 50, 51, 52, 53, 54, 55, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 734, 747, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 800, 801, 802, 803, 804

;; Pred edge  4 [50.0%] 
;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 64 63 65 7 302 "" [2 uses])

(note 65 64 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 67 7 arch/arm/vfp/vfpdouble.c:967 (set (reg:SI 0 r0)
        (reg/v:SI 144 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 144 [ dm ])
        (nil)))

(call_insn 67 66 68 7 arch/arm/vfp/vfpdouble.c:967 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 68 67 69 7 arch/arm/vfp/vfpdouble.c:967 (set (reg:DI 139 [ D.4973 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 69 68 70 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 174)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 70 69 71 7 arch/arm/vfp/vfp.h:304 (set (reg:DI 173)
        (and:DI (reg:DI 139 [ D.4973 ])
            (reg:DI 174))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 174)
        (expr_list:REG_EQUAL (and:DI (reg:DI 139 [ D.4973 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 71 70 73 7 arch/arm/vfp/vfp.h:304 (set (reg:SI 212)
        (lshiftrt:SI (subreg:SI (reg:DI 173) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 173)
        (nil)))

(insn 73 71 74 7 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -46 [0xffffffffffffffd2])) [0 vdm.sign+0 S2 A16])
        (subreg:HI (reg:SI 212) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 212)
        (nil)))

(insn 74 73 76 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 214)
        (ashiftrt:SI (subreg:SI (reg:DI 139 [ D.4973 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 76 74 77 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 179)
        (zero_extend:SI (subreg:HI (reg:SI 214) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 214)
        (nil)))

(insn 77 76 78 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 180)
        (ashift:SI (reg:SI 179)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 179)
        (nil)))

(insn 78 77 79 7 arch/arm/vfp/vfp.h:305 (set (reg:SI 133 [ D.6021 ])
        (lshiftrt:SI (reg:SI 180)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 180)
        (expr_list:REG_EQUAL (and:SI (reg:SI 179)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 79 78 80 7 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0])) [0 vdm.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 133 [ D.6021 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 80 79 81 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 183)
        (lshiftrt:SI (subreg:SI (reg:DI 139 [ D.4973 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 81 80 82 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 217 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 139 [ D.4973 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 82 81 83 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 217 [+4 ])
        (ior:SI (reg:SI 183)
            (reg:SI 217 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 183)
        (nil)))

(insn 83 82 84 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 216)
        (ashift:SI (subreg:SI (reg:DI 139 [ D.4973 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 139 [ D.4973 ])
        (nil)))

(insn 84 83 156 7 arch/arm/vfp/vfp.h:308 (set (reg:SI 184)
        (ashift:SI (reg:SI 217 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 156 84 85 7 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 134 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 85 156 86 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 216)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 216)
        (nil)))

(insn 86 85 87 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 0)
        (ior:SI (reg:SI 184)
            (subreg:SI (reg/v:DI 134 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 184)
        (nil)))

(insn 87 86 88 7 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 134 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 217 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 217 [+4 ])
        (nil)))

(insn 88 87 89 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 187)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 89 88 90 7 arch/arm/vfp/vfp.h:309 (set (reg:HI 186)
        (subreg:HI (reg:SI 187) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 187)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 90 89 91 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 188 [ D.6021 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 133 [ D.6021 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 91 90 92 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 189)
        (sign_extend:SI (reg:HI 186))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 186)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 92 91 93 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.6021 ])
            (reg:SI 189))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 189)
        (nil)))

(insn 93 92 96 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 190)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 96 93 97 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.6021 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 188 [ D.6021 ])
        (nil)))

(insn 97 96 99 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 193)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 99 97 100 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 194)
        (and:SI (reg:SI 190)
            (reg:SI 193))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 193)
        (expr_list:REG_DEAD (reg:SI 190)
            (nil))))

(insn 100 99 101 7 arch/arm/vfp/vfp.h:309 (set (reg:QI 195)
        (subreg:QI (reg:SI 194) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 194)
        (nil)))

(insn 101 100 102 7 arch/arm/vfp/vfp.h:309 (set (reg:SI 196)
        (zero_extend:SI (reg:QI 195))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 195)
        (nil)))

(insn 102 101 103 7 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 196)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 196)
        (nil)))

(jump_insn 103 102 104 7 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 107)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u135(11){ }u136(13){ }u137(25){ }u138(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134 197
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 134 197
;; live  kill	
;; rd  in  	(62)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(2)
736, 787
;; rd  kill	(6)
735, 736, 737, 738, 739, 787

;; Pred edge  7 [50.0%]  (fallthru)
(note 104 103 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 105 104 106 8 arch/arm/vfp/vfp.h:310 (set (reg:DI 197)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 106 105 107 8 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 134 [ significand ])
        (ior:DI (reg/v:DI 134 [ significand ])
            (reg:DI 197))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 134 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; rd  out 	(63)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u142(11){ }u143(13){ }u144(25){ }u145(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 142 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 117, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(1)
116
;; rd  kill	(16)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125

;; Pred edge  7 [50.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 107 106 108 9 303 "" [1 uses])

(note 108 107 109 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 9 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -40 [0xffffffffffffffd8])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 134 [ significand ])) 163 {*arm_movdi} (nil))

(insn 110 109 111 9 arch/arm/vfp/vfpdouble.c:968 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.6021 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.6021 ])
        (nil)))

(jump_insn 111 110 112 9 arch/arm/vfp/vfpdouble.c:968 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; rd  out 	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  10 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u150(11){ }u151(13){ }u152(25){ }u153(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 145
;; live  gen 	 24 [cc] 198
;; live  kill	
;; rd  in  	(64)
6, 18, 30, 39, 40, 47, 48, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(2)
115, 788
;; rd  kill	(18)
110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 788, 789

;; Pred edge  9 [61.0%]  (fallthru)
(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 113 112 114 10 arch/arm/vfp/vfpdouble.c:968 discrim 1 (set (reg:SI 198 [ significand ])
        (subreg:SI (reg/v:DI 134 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 114 113 115 10 arch/arm/vfp/vfpdouble.c:968 discrim 1 (set (reg:SI 198 [ significand ])
        (ior:SI (reg:SI 198 [ significand ])
            (subreg:SI (reg/v:DI 134 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 134 [ significand ])
        (nil)))

(insn 115 114 116 10 arch/arm/vfp/vfpdouble.c:968 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 198 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 198 [ significand ])
        (nil)))

(jump_insn 116 115 117 10 arch/arm/vfp/vfpdouble.c:968 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 121)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  11 [39.0%]  (fallthru)
;; Succ edge  12 [61.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u159(11){ }u160(13){ }u161(25){ }u162(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 199
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 199
;; live  kill	 14 [lr]
;; rd  in  	(65)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(1)
790
;; rd  kill	(8)
49, 50, 51, 52, 53, 54, 55, 790

;; Pred edge  10 [39.0%]  (fallthru)
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 11 arch/arm/vfp/vfpdouble.c:969 (set (reg/f:SI 199)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 119 118 120 11 arch/arm/vfp/vfpdouble.c:969 (set (reg:SI 0 r0)
        (reg/f:SI 199)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 199)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(call_insn 120 119 121 11 arch/arm/vfp/vfpdouble.c:969 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; rd  out 	(66)
6, 18, 30, 39, 40, 47, 48, 115, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 9 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u168(11){ }u169(13){ }u170(25){ }u171(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137 200 201 202 204
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 145
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 137 200 201 202 204
;; live  kill	 14 [lr]
;; rd  in  	(67)
6, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 795, 796, 797, 798, 800, 801, 802, 803
;; rd  gen 	(6)
0, 746, 791, 792, 793, 794
;; rd  kill	(25)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 49, 50, 51, 52, 53, 54, 55, 746, 791, 792, 793, 794

;; Pred edge  9 [39.0%] 
;; Pred edge  10 [61.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 121 120 122 12 304 "" [2 uses])

(note 122 121 123 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 123 122 124 12 arch/arm/vfp/vfpdouble.c:971 (set (reg/f:SI 200)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 124 123 125 12 arch/arm/vfp/vfpdouble.c:971 (set (reg/f:SI 201)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 125 124 126 12 arch/arm/vfp/vfpdouble.c:971 (set (reg/f:SI 202)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -48 [0xffffffffffffffd0]))) 4 {*arm_addsi3} (nil))

(insn 126 125 127 12 arch/arm/vfp/vfpdouble.c:971 (set (reg:SI 0 r0)
        (reg/f:SI 200)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))

(insn 127 126 128 12 arch/arm/vfp/vfpdouble.c:971 (set (reg:SI 1 r1)
        (reg/f:SI 201)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 201)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(insn 128 127 129 12 arch/arm/vfp/vfpdouble.c:971 (set (reg:SI 2 r2)
        (reg/f:SI 202)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 202)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -48 [0xffffffffffffffd0]))
            (nil))))

(insn 129 128 130 12 arch/arm/vfp/vfpdouble.c:971 (set (reg:SI 3 r3)
        (reg/v:SI 145 [ fpscr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 130 129 131 12 arch/arm/vfp/vfpdouble.c:971 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_add") [flags 0x3] <function_decl 0x10b08080 vfp_double_add>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 131 130 133 12 arch/arm/vfp/vfpdouble.c:971 (set (reg/v:SI 137 [ exceptions ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 133 131 134 12 arch/arm/vfp/vfpdouble.c:973 (set (reg/f:SI 204)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x10e47b20>)) 167 {*arm_movsi_insn} (nil))

(insn 134 133 135 12 arch/arm/vfp/vfpdouble.c:973 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 204)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 204)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x10e47b20>)
            (nil))))

(insn 135 134 136 12 arch/arm/vfp/vfpdouble.c:973 (set (reg:SI 0 r0)
        (reg/v:SI 142 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 142 [ dd ])
        (nil)))

(insn 136 135 137 12 arch/arm/vfp/vfpdouble.c:973 (set (reg:SI 1 r1)
        (reg/f:SI 200)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 200)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 137 136 138 12 arch/arm/vfp/vfpdouble.c:973 (set (reg:SI 2 r2)
        (reg/v:SI 145 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ fpscr ])
        (nil)))

(insn 138 137 139 12 arch/arm/vfp/vfpdouble.c:973 (set (reg:SI 3 r3)
        (reg/v:SI 137 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ exceptions ])
        (nil)))

(call_insn 139 138 151 12 arch/arm/vfp/vfpdouble.c:973 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 151 139 0 12 arch/arm/vfp/vfpdouble.c:974 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(72)
0, 18, 30, 39, 40, 47, 48, 115, 116, 126, 127, 734, 736, 737, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_ftosi (vfp_double_ftosi)[0:169]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 81 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 88 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 88 (    2)


vfp_double_ftosi

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,10u} r1={8d,5u} r2={7d,3u} r3={5d,1u} r11={1d,44u} r12={5d} r13={1d,48u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={39d,34u} r25={1d,44u} r26={1d,43u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={1d,7u} r134={1d,3u} r135={5d,14u,2d} r136={4d,1u} r138={1d,2u} r139={4d,2u} r140={1d,5u} r141={6d,6u} r142={9d,6u} r143={1d,1u} r144={1d,5u,1d} r146={1d,1u} r148={1d,1u} r149={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,3u,1d} r162={1d,2u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r175={2d,2u} r176={1d,2u} r177={1d,1u} r178={2d,2u} r179={2d,2u} r180={1d,2u} r181={1d,1u} r182={1d,1u} r183={1d,2u} r187={1d,1u} r188={1d,4u,3d} r191={1d,1u} r195={1d,1u} r196={1d,1u} r201={1d,1u} r203={1d,1u} r205={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={2d,1u} r213={1d,2u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={2d,2u} r221={1d,1u} r223={1d,2u} r224={2d,2u} r226={1d,1u} r228={1d,1u} r229={2d,3u} r230={1d,1u} r234={1d,1u} r235={1d,1u} r236={3d,7u} 
;;    total ref usage 993{621d,364u,8e} in 180{176 regular + 4 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522
0[0,10] 1[10,8] 2[18,7] 3[25,5] 11[30,1] 12[31,5] 13[36,1] 14[37,5] 15[42,4] 16[46,4] 17[50,4] 18[54,4] 19[58,4] 20[62,4] 21[66,4] 22[70,4] 23[74,4] 24[78,39] 25[117,1] 26[118,1] 27[119,4] 28[123,4] 29[127,4] 30[131,4] 31[135,4] 32[139,4] 33[143,4] 34[147,4] 35[151,4] 36[155,4] 37[159,4] 38[163,4] 39[167,4] 40[171,4] 41[175,4] 42[179,4] 43[183,4] 44[187,4] 45[191,4] 46[195,4] 47[199,4] 48[203,4] 49[207,4] 50[211,4] 51[215,4] 52[219,4] 53[223,4] 54[227,4] 55[231,4] 56[235,4] 57[239,4] 58[243,4] 59[247,4] 60[251,4] 61[255,4] 62[259,4] 63[263,4] 64[267,4] 65[271,4] 66[275,4] 67[279,4] 68[283,4] 69[287,4] 70[291,4] 71[295,4] 72[299,4] 73[303,4] 74[307,4] 75[311,4] 76[315,4] 77[319,4] 78[323,4] 79[327,4] 80[331,4] 81[335,4] 82[339,4] 83[343,4] 84[347,4] 85[351,4] 86[355,4] 87[359,4] 88[363,4] 89[367,4] 90[371,4] 91[375,4] 92[379,4] 93[383,4] 94[387,4] 95[391,4] 96[395,4] 97[399,4] 98[403,4] 99[407,4] 100[411,4] 101[415,4] 102[419,4] 103[423,4] 104[427,4] 105[431,4] 106[435,4] 107[439,4] 108[443,4] 109[447,4] 110[451,4] 111[455,4] 112[459,4] 113[463,4] 114[467,4] 115[471,4] 116[475,4] 117[479,4] 118[483,4] 119[487,4] 120[491,4] 121[495,4] 122[499,4] 123[503,4] 124[507,4] 125[511,4] 126[515,4] 127[519,4] 133[523,1] 134[524,1] 135[525,5] 136[530,4] 138[534,1] 139[535,4] 140[539,1] 141[540,6] 142[546,9] 143[555,1] 144[556,1] 146[557,1] 148[558,1] 149[559,1] 152[560,1] 153[561,1] 156[562,1] 157[563,1] 159[564,1] 160[565,1] 161[566,1] 162[567,1] 163[568,1] 166[569,1] 167[570,1] 168[571,1] 169[572,1] 170[573,1] 175[574,2] 176[576,1] 177[577,1] 178[578,2] 179[580,2] 180[582,1] 181[583,1] 182[584,1] 183[585,1] 187[586,1] 188[587,1] 191[588,1] 195[589,1] 196[590,1] 201[591,1] 203[592,1] 205[593,1] 207[594,1] 208[595,1] 209[596,1] 210[597,1] 211[598,2] 213[600,1] 216[601,1] 217[602,1] 218[603,1] 219[604,1] 220[605,2] 221[607,1] 223[608,1] 224[609,2] 226[611,1] 228[612,1] 229[613,2] 230[615,1] 234[616,1] 235[617,1] 236[618,3] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d9(0){ }d17(1){ }d24(2){ }d29(3){ }d30(11){ }d35(12){ }d36(13){ }d41(14){ }d117(25){ }d118(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
9, 17, 24, 29, 30, 35, 36, 41, 117, 118
;; rd  kill	(44)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 117, 118
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
9, 17, 24, 29, 30, 35, 36, 41, 117, 118

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d30(bb 0 insn -1) }u1(13){ d36(bb 0 insn -1) }u2(25){ d117(bb 0 insn -1) }u3(26){ d118(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 144 146 148 149 152 153 156 157 159 160 161 162 163 166 167 168 169 226 228 229
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 135 144 146 148 149 152 153 156 157 159 160 161 162 163 166 167 168 169 226 228 229
;; live  kill	 14 [lr]
;; rd  in  	(10)
9, 17, 24, 29, 30, 35, 36, 41, 117, 118
;; rd  gen 	(25)
7, 16, 114, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;; rd  kill	(45)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 37, 38, 39, 40, 41, 524, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613, 614
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149 161 162
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149 161 162
;; rd  out 	(32)
7, 16, 24, 29, 30, 35, 36, 114, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d9(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 2 { d24(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 5
;;      reg 3 { d29(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 9
;;      reg 148 { d558(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 10
;;      reg 13 { d36(bb 0 insn -1) }
;;      reg 0 { d8(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 11
;;      reg 0 { d7(bb 2 insn 10) }
;;      reg 1 { d16(bb 2 insn 10) }
;;   UD chains for insn luid 6 uid 12
;;      reg 144 { d556(bb 2 insn 11) }
;;   UD chains for insn luid 7 uid 14
;;      reg 226 { d611(bb 2 insn 12) }
;;   UD chains for insn luid 8 uid 15
;;      reg 152 { d560(bb 2 insn 14) }
;;   UD chains for insn luid 9 uid 16
;;      reg 153 { d561(bb 2 insn 15) }
;;   eq_note reg 152 { }
;;   UD chains for insn luid 10 uid 17
;;      reg 144 { d556(bb 2 insn 11) }
;;   UD chains for insn luid 11 uid 18
;;      reg 144 { d556(bb 2 insn 11) }
;;   UD chains for insn luid 12 uid 19
;;      reg 156 { d562(bb 2 insn 17) }
;;      reg 229 { d614(bb 2 insn 18) }
;;   UD chains for insn luid 13 uid 20
;;      reg 144 { d556(bb 2 insn 11) }
;;   UD chains for insn luid 14 uid 21
;;      reg 229 { d613(bb 2 insn 19) }
;;   UD chains for insn luid 16 uid 22
;;      reg 135 read/write { d525(bb 2 insn 369) }
;;      reg 228 { d612(bb 2 insn 20) }
;;   UD chains for insn luid 17 uid 23
;;      reg 135 { d529(bb 2 insn 22) d525(bb 2 insn 369) }
;;      reg 135 read/write { d529(bb 2 insn 22) d525(bb 2 insn 369) }
;;      reg 157 { d563(bb 2 insn 21) }
;;   UD chains for insn luid 18 uid 24
;;      reg 135 read/write { d529(bb 2 insn 22) d528(bb 2 insn 23) d525(bb 2 insn 369) }
;;      reg 229 { d613(bb 2 insn 19) }
;;   UD chains for insn luid 20 uid 26
;;      reg 160 { d565(bb 2 insn 25) }
;;   UD chains for insn luid 21 uid 27
;;      reg 134 { d524(bb 2 insn 16) }
;;   UD chains for insn luid 22 uid 28
;;      reg 159 { d564(bb 2 insn 26) }
;;   UD chains for insn luid 23 uid 29
;;      reg 161 { d566(bb 2 insn 27) }
;;      reg 162 { d567(bb 2 insn 28) }
;;   UD chains for insn luid 24 uid 30
;;      reg 24 { d115(bb 2 insn 29) }
;;   UD chains for insn luid 25 uid 33
;;      reg 161 { d566(bb 2 insn 27) }
;;   UD chains for insn luid 26 uid 34
;;      reg 24 { d84(bb 2 insn 33) }
;;   UD chains for insn luid 27 uid 36
;;      reg 163 { d568(bb 2 insn 30) }
;;      reg 166 { d569(bb 2 insn 34) }
;;   UD chains for insn luid 28 uid 37
;;      reg 167 { d570(bb 2 insn 36) }
;;   UD chains for insn luid 29 uid 38
;;      reg 168 { d571(bb 2 insn 37) }
;;   UD chains for insn luid 30 uid 39
;;      reg 169 { d572(bb 2 insn 38) }
;;   UD chains for insn luid 31 uid 40
;;      reg 24 { d114(bb 2 insn 39) }

( 2 )->[3]->( 8 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u44(11){ d30(bb 0 insn -1) }u45(13){ d36(bb 0 insn -1) }u46(25){ d117(bb 0 insn -1) }u47(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 135 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 135 170
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 114, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;; rd  gen 	(2)
526, 573
;; rd  kill	(6)
525, 526, 527, 528, 529, 573
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; rd  out 	(33)
7, 16, 24, 29, 30, 35, 36, 114, 117, 118, 524, 526, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 43
;;      reg 135 { d527(bb 2 insn 24) }
;;      reg 170 { d573(bb 3 insn 42) }
;;   eq_note reg 135 { }

( 2 )->[4]->( 5 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u51(11){ d30(bb 0 insn -1) }u52(13){ d36(bb 0 insn -1) }u53(25){ d117(bb 0 insn -1) }u54(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149 161 162
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 162
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149 161 162
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 114, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;; rd  gen 	(1)
83
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; rd  out 	(32)
7, 16, 24, 29, 30, 35, 36, 83, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 52
;;      reg 161 { d566(bb 2 insn 27) }
;;      reg 162 { d567(bb 2 insn 28) }
;;   eq_note reg 161 { }
;;   UD chains for insn luid 1 uid 53
;;      reg 24 { d83(bb 4 insn 52) }

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u59(11){ d30(bb 0 insn -1) }u60(13){ d36(bb 0 insn -1) }u61(25){ d117(bb 0 insn -1) }u62(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 175
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 24 [cc] 175
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 83, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;; rd  gen 	(2)
113, 574
;; rd  kill	(2)
574, 575
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; rd  out 	(33)
7, 16, 24, 29, 30, 35, 36, 113, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 55
;;      reg 135 { d527(bb 2 insn 24) }
;;   UD chains for insn luid 1 uid 56
;;      reg 135 { d527(bb 2 insn 24) }
;;      reg 175 { d575(bb 5 insn 55) }
;;   UD chains for insn luid 2 uid 57
;;      reg 175 { d574(bb 5 insn 56) }
;;   UD chains for insn luid 3 uid 58
;;      reg 24 { d113(bb 5 insn 57) }

( 5 )->[6]->( 11 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u68(11){ d30(bb 0 insn -1) }u69(13){ d36(bb 0 insn -1) }u70(25){ d117(bb 0 insn -1) }u71(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 139
;; live  kill	
;; rd  in  	(33)
7, 16, 24, 29, 30, 35, 36, 113, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 611, 612, 613
;; rd  gen 	(1)
538
;; rd  kill	(4)
535, 536, 537, 538
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; rd  out 	(34)
7, 16, 24, 29, 30, 35, 36, 113, 117, 118, 524, 527, 538, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }

( 5 )->[7]->( 11 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u72(11){ d30(bb 0 insn -1) }u73(13){ d36(bb 0 insn -1) }u74(25){ d117(bb 0 insn -1) }u75(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 139 176 177 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 24 [cc] 139 176 177 178
;; live  kill	
;; rd  in  	(33)
7, 16, 24, 29, 30, 35, 36, 113, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 611, 612, 613
;; rd  gen 	(5)
112, 536, 576, 577, 578
;; rd  kill	(8)
535, 536, 537, 538, 576, 577, 578, 579
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; rd  out 	(37)
7, 16, 24, 29, 30, 35, 36, 112, 117, 118, 524, 527, 536, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 578, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 66
;;      reg 135 { d527(bb 2 insn 24) }
;;      reg 177 { d577(bb 7 insn 65) }
;;   eq_note reg 135 { }
;;   UD chains for insn luid 2 uid 67
;;      reg 176 { d576(bb 7 insn 66) }
;;   UD chains for insn luid 3 uid 68
;;      reg 176 { d576(bb 7 insn 66) }
;;      reg 178 { d579(bb 7 insn 67) }
;;   UD chains for insn luid 4 uid 69
;;      reg 178 { d578(bb 7 insn 68) }
;;   UD chains for insn luid 5 uid 358
;;      reg 24 { d112(bb 7 insn 69) }

( 4 3 )->[8]->( 10 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u84(11){ d30(bb 0 insn -1) }u85(13){ d36(bb 0 insn -1) }u86(25){ d117(bb 0 insn -1) }u87(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(35)
7, 16, 24, 29, 30, 35, 36, 83, 114, 117, 118, 524, 526, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613
;; rd  gen 	(1)
111
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; rd  out 	(34)
7, 16, 24, 29, 30, 35, 36, 111, 117, 118, 524, 526, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 82
;;      reg 134 { d524(bb 2 insn 16) }
;;   UD chains for insn luid 1 uid 83
;;      reg 24 { d111(bb 8 insn 82) }

( 8 )->[9]->( 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u90(11){ d30(bb 0 insn -1) }u91(13){ d36(bb 0 insn -1) }u92(25){ d117(bb 0 insn -1) }u93(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 139
;; live  kill	
;; rd  in  	(34)
7, 16, 24, 29, 30, 35, 36, 111, 117, 118, 524, 526, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613
;; rd  gen 	(1)
537
;; rd  kill	(4)
535, 536, 537, 538
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; rd  out 	(35)
7, 16, 24, 29, 30, 35, 36, 111, 117, 118, 524, 526, 527, 537, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }

( 8 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u94(11){ d30(bb 0 insn -1) }u95(13){ d36(bb 0 insn -1) }u96(25){ d117(bb 0 insn -1) }u97(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 139 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 24 [cc] 139 179
;; live  kill	
;; rd  in  	(34)
7, 16, 24, 29, 30, 35, 36, 111, 117, 118, 524, 526, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613
;; rd  gen 	(3)
110, 535, 580
;; rd  kill	(6)
535, 536, 537, 538, 580, 581
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; rd  out 	(36)
7, 16, 24, 29, 30, 35, 36, 110, 117, 118, 524, 526, 527, 535, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 90
;;      reg 135 { d527(bb 2 insn 24) d526(bb 3 insn 43) }
;;   UD chains for insn luid 1 uid 91
;;      reg 135 { d527(bb 2 insn 24) d526(bb 3 insn 43) }
;;      reg 179 { d581(bb 10 insn 90) }
;;   UD chains for insn luid 2 uid 92
;;      reg 179 { d580(bb 10 insn 91) }
;;   UD chains for insn luid 3 uid 360
;;      reg 24 { d110(bb 10 insn 92) }

( 10 7 6 9 )->[11]->( 12 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u103(11){ d30(bb 0 insn -1) }u104(13){ d36(bb 0 insn -1) }u105(25){ d117(bb 0 insn -1) }u106(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 141 180 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  gen 	 24 [cc] 141 180 181
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 110, 111, 112, 113, 117, 118, 524, 526, 527, 535, 536, 537, 538, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 611, 612, 613
;; rd  gen 	(4)
108, 540, 582, 583
;; rd  kill	(8)
540, 541, 542, 543, 544, 545, 582, 583
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144 146 149
;; rd  out 	(46)
7, 16, 24, 29, 30, 35, 36, 108, 117, 118, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 103
;;      reg 139 { d538(bb 6 insn 60) d537(bb 9 insn 85) d536(bb 7 insn 358) d535(bb 10 insn 360) }
;;   UD chains for insn luid 1 uid 104
;;      reg 180 { d582(bb 11 insn 103) }
;;   UD chains for insn luid 2 uid 362
;;      reg 24 { d109(bb 11 insn 104) }
;;      reg 180 { d582(bb 11 insn 103) }
;;   UD chains for insn luid 3 uid 115
;;      reg 139 { d538(bb 6 insn 60) d537(bb 9 insn 85) d536(bb 7 insn 358) d535(bb 10 insn 360) }
;;   UD chains for insn luid 4 uid 116
;;      reg 181 { d583(bb 11 insn 115) }
;;   UD chains for insn luid 5 uid 117
;;      reg 24 { d108(bb 11 insn 116) }

( 11 )->[12]->( 44 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u114(11){ d30(bb 0 insn -1) }u115(13){ d36(bb 0 insn -1) }u116(25){ d117(bb 0 insn -1) }u117(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  gen 	 141 142
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 108, 117, 118, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 611, 612, 613
;; rd  gen 	(2)
545, 554
;; rd  kill	(15)
540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(47)
7, 16, 24, 29, 30, 35, 36, 108, 117, 118, 524, 526, 527, 535, 536, 537, 538, 545, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 611, 612, 613
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 119
;;      reg 141 { d540(bb 11 insn 362) }

( 11 )->[13]->( 14 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u119(11){ d30(bb 0 insn -1) }u120(13){ d36(bb 0 insn -1) }u121(25){ d117(bb 0 insn -1) }u122(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 144
;; lr  def 	 24 [cc] 133 182 183 187 188 230
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144 146 149
;; live  gen 	 24 [cc] 133 182 183 187 188 230
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 108, 117, 118, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 611, 612, 613
;; rd  gen 	(7)
82, 523, 584, 585, 586, 587, 615
;; rd  kill	(6)
523, 584, 585, 586, 587, 615
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 146 149 183 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 146 149 183 188
;; rd  out 	(52)
7, 16, 24, 29, 30, 35, 36, 82, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 126
;;      reg 144 { d556(bb 2 insn 11) }
;;      reg 183 { d585(bb 13 insn 125) }
;;   eq_note reg 144 { }
;;   UD chains for insn luid 2 uid 127
;;      reg 182 { d584(bb 13 insn 126) }
;;   UD chains for insn luid 3 uid 129
;;      reg 230 { d615(bb 13 insn 127) }
;;   UD chains for insn luid 5 uid 132
;;      reg 134 { d524(bb 2 insn 16) }
;;   UD chains for insn luid 6 uid 134
;;      reg 187 { d586(bb 13 insn 130) }
;;      reg 188 { d587(bb 13 insn 132) }
;;   eq_note reg 188 { }
;;   UD chains for insn luid 7 uid 135
;;      reg 24 { d82(bb 13 insn 134) }

( 13 )->[14]->( 44 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u133(11){ d30(bb 0 insn -1) }u134(13){ d36(bb 0 insn -1) }u135(25){ d117(bb 0 insn -1) }u136(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141
;; lr  def 	 24 [cc] 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  gen 	 24 [cc] 141 142
;; live  kill	
;; rd  in  	(52)
7, 16, 24, 29, 30, 35, 36, 82, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 611, 612, 613, 615
;; rd  gen 	(3)
107, 544, 547
;; rd  kill	(15)
540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(53)
7, 16, 24, 29, 30, 35, 36, 107, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 544, 547, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 137
;;      reg 133 { d523(bb 13 insn 129) }
;;   UD chains for insn luid 1 uid 364
;;      reg 24 { d107(bb 14 insn 137) }
;;   UD chains for insn luid 2 uid 148
;;      reg 141 { d540(bb 11 insn 362) }

( 13 )->[15]->( 16 36 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u140(11){ d30(bb 0 insn -1) }u141(13){ d36(bb 0 insn -1) }u142(25){ d117(bb 0 insn -1) }u143(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 146 149 183 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 188
;; lr  def 	 24 [cc] 140 191
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 146 149 183 188
;; live  gen 	 24 [cc] 140 191
;; live  kill	
;; rd  in  	(52)
7, 16, 24, 29, 30, 35, 36, 82, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 611, 612, 613, 615
;; rd  gen 	(3)
81, 539, 588
;; rd  kill	(2)
539, 588
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 183 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 183 188
;; rd  out 	(54)
7, 16, 24, 29, 30, 35, 36, 81, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 153
;;      reg 149 { d559(bb 2 insn 5) }
;;   UD chains for insn luid 2 uid 158
;;      reg 188 { d587(bb 13 insn 132) }
;;      reg 191 { d588(bb 15 insn 154) }
;;   eq_note reg 188 { }
;;   UD chains for insn luid 3 uid 159
;;      reg 24 { d81(bb 15 insn 158) }

( 15 )->[16]->( 17 20 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u149(11){ d30(bb 0 insn -1) }u150(13){ d36(bb 0 insn -1) }u151(25){ d117(bb 0 insn -1) }u152(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 183 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 142 195 196 201 234 235 236
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 183 188
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 138 142 195 196 201 234 235 236
;; live  kill	 14 [lr] 24 [cc] 236
;; rd  in  	(54)
7, 16, 24, 29, 30, 35, 36, 81, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 611, 612, 613, 615
;; rd  gen 	(11)
3, 12, 103, 534, 548, 589, 590, 591, 616, 617, 618
;; rd  kill	(38)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 37, 38, 39, 40, 41, 534, 546, 547, 548, 549, 550, 551, 552, 553, 554, 589, 590, 591, 616, 617
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 183 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 183 236
;; rd  out 	(62)
3, 12, 24, 29, 30, 35, 36, 103, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 162
;;      reg 188 { d587(bb 13 insn 132) }
;;   UD chains for insn luid 1 uid 163
;;      reg 195 { d589(bb 16 insn 162) }
;;   eq_note reg 188 { }
;;   UD chains for insn luid 2 uid 164
;;      reg 135 { d527(bb 2 insn 24) d526(bb 3 insn 43) }
;;      reg 135 { d527(bb 2 insn 24) d526(bb 3 insn 43) }
;;   UD chains for insn luid 3 uid 165
;;      reg 196 { d590(bb 16 insn 164) }
;;   UD chains for insn luid 4 uid 166
;;      reg 138 { d534(bb 16 insn 163) }
;;   UD chains for insn luid 5 uid 167
;;      reg 13 { d36(bb 0 insn -1) }
;;      reg 0 { d6(bb 16 insn 165) }
;;      reg 1 { d15(bb 16 insn 165) }
;;      reg 2 { d22(bb 16 insn 166) }
;;   UD chains for insn luid 6 uid 349
;;      reg 0 { d5(bb 16 insn 167) }
;;   UD chains for insn luid 7 uid 170
;;      reg 138 { d534(bb 16 insn 163) }
;;   UD chains for insn luid 8 uid 171
;;      reg 135 { d527(bb 2 insn 24) d526(bb 3 insn 43) }
;;   UD chains for insn luid 9 uid 172
;;      reg 201 { d591(bb 16 insn 170) }
;;   UD chains for insn luid 10 uid 173
;;      reg 13 { d36(bb 0 insn -1) }
;;      reg 0 { d4(bb 16 insn 171) }
;;      reg 1 { d13(bb 16 insn 171) }
;;      reg 2 { d20(bb 16 insn 172) }
;;   UD chains for insn luid 11 uid 351
;;      reg 0 { d3(bb 16 insn 173) }
;;   UD chains for insn luid 12 uid 352
;;      reg 1 { d12(bb 16 insn 173) }
;;   UD chains for insn luid 14 uid 354
;;      reg 234 { d616(bb 16 insn 351) }
;;      reg 236 read/write { }
;;   UD chains for insn luid 15 uid 355
;;      reg 235 { d617(bb 16 insn 352) }
;;      reg 236 read/write { d619(bb 16 insn 354) }
;;   UD chains for insn luid 16 uid 176
;;      reg 140 { d539(bb 15 insn 153) }
;;   UD chains for insn luid 17 uid 177
;;      reg 24 { d103(bb 16 insn 176) }

( 16 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u180(11){ d30(bb 0 insn -1) }u181(13){ d36(bb 0 insn -1) }u182(25){ d117(bb 0 insn -1) }u183(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc] 203
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; live  gen 	 24 [cc] 203
;; live  kill	
;; rd  in  	(62)
3, 12, 24, 29, 30, 35, 36, 103, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(2)
102, 592
;; rd  kill	(1)
592
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; rd  out 	(63)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 179
;;      reg 142 { d548(bb 16 insn 349) }
;;   UD chains for insn luid 1 uid 180
;;      reg 203 { d592(bb 17 insn 179) }
;;   UD chains for insn luid 2 uid 181
;;      reg 24 { d102(bb 17 insn 180) }

( 17 )->[18]->( 24 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u187(11){ d30(bb 0 insn -1) }u188(13){ d36(bb 0 insn -1) }u189(25){ d117(bb 0 insn -1) }u190(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 136
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
533
;; rd  kill	(4)
530, 531, 532, 533
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; rd  out 	(64)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }

( 17 )->[19]->( 24 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u191(11){ d30(bb 0 insn -1) }u192(13){ d36(bb 0 insn -1) }u193(25){ d117(bb 0 insn -1) }u194(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; live  gen 	 136
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
530
;; rd  kill	(4)
530, 531, 532, 533
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; rd  out 	(64)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 530, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 188
;;      reg 183 { d585(bb 13 insn 125) }

( 16 )->[20]->( 23 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u196(11){ d30(bb 0 insn -1) }u197(13){ d36(bb 0 insn -1) }u198(25){ d117(bb 0 insn -1) }u199(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(62)
3, 12, 24, 29, 30, 35, 36, 103, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
101
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; rd  out 	(62)
3, 12, 24, 29, 30, 35, 36, 101, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 193
;;      reg 140 { d539(bb 15 insn 153) }
;;   UD chains for insn luid 1 uid 194
;;      reg 24 { d101(bb 20 insn 193) }

( 20 )->[21]->( 22 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u202(11){ d30(bb 0 insn -1) }u203(13){ d36(bb 0 insn -1) }u204(25){ d117(bb 0 insn -1) }u205(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140
;; lr  def 	 24 [cc] 205 207 208 209 210
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; live  gen 	 24 [cc] 205 207 208 209 210
;; live  kill	
;; rd  in  	(62)
3, 12, 24, 29, 30, 35, 36, 101, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(6)
98, 593, 594, 595, 596, 597
;; rd  kill	(5)
593, 594, 595, 596, 597
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; rd  out 	(67)
3, 12, 24, 29, 30, 35, 36, 98, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 196
;;      reg 133 { d523(bb 13 insn 129) }
;;   UD chains for insn luid 1 uid 197
;;      reg 24 { d100(bb 21 insn 196) }
;;   UD chains for insn luid 2 uid 199
;;      reg 140 { d539(bb 15 insn 153) }
;;   UD chains for insn luid 3 uid 200
;;      reg 24 { d99(bb 21 insn 199) }
;;   UD chains for insn luid 4 uid 202
;;      reg 205 { d593(bb 21 insn 197) }
;;      reg 207 { d594(bb 21 insn 200) }
;;   UD chains for insn luid 5 uid 203
;;      reg 208 { d595(bb 21 insn 202) }
;;   UD chains for insn luid 6 uid 204
;;      reg 209 { d596(bb 21 insn 203) }
;;   UD chains for insn luid 7 uid 205
;;      reg 210 { d597(bb 21 insn 204) }
;;   UD chains for insn luid 8 uid 206
;;      reg 24 { d98(bb 21 insn 205) }

( 21 )->[22]->( 24 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u216(11){ d30(bb 0 insn -1) }u217(13){ d36(bb 0 insn -1) }u218(25){ d117(bb 0 insn -1) }u219(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 136
;; live  kill	
;; rd  in  	(67)
3, 12, 24, 29, 30, 35, 36, 98, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
532
;; rd  kill	(4)
530, 531, 532, 533
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; rd  out 	(68)
3, 12, 24, 29, 30, 35, 36, 98, 117, 118, 523, 524, 526, 527, 532, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }

( 21 20 )->[23]->( 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u220(11){ d30(bb 0 insn -1) }u221(13){ d36(bb 0 insn -1) }u222(25){ d117(bb 0 insn -1) }u223(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 136
;; live  kill	
;; rd  in  	(68)
3, 12, 24, 29, 30, 35, 36, 98, 101, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
531
;; rd  kill	(4)
530, 531, 532, 533
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; rd  out 	(69)
3, 12, 24, 29, 30, 35, 36, 98, 101, 117, 118, 523, 524, 526, 527, 531, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }

( 23 19 18 22 )->[24]->( 27 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u224(11){ d30(bb 0 insn -1) }u225(13){ d36(bb 0 insn -1) }u226(25){ d117(bb 0 insn -1) }u227(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 236
;; lr  def 	 24 [cc] 211 213
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  gen 	 24 [cc] 211 213
;; live  kill	 24 [cc]
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 98, 101, 102, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(3)
79, 599, 600
;; rd  kill	(3)
598, 599, 600
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 218
;;      reg 136 { d533(bb 18 insn 183) d532(bb 22 insn 208) d531(bb 23 insn 213) d530(bb 19 insn 188) }
;;      reg 236 { d618(bb 16 insn 355) }
;;   UD chains for insn luid 2 uid 219
;;      reg 213 { d600(bb 24 insn 218) }
;;      reg 236 { d618(bb 16 insn 355) }
;;   UD chains for insn luid 3 uid 220
;;      reg 24 { d79(bb 24 insn 219) }

( 24 )->[25]->( 28 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u233(11){ d30(bb 0 insn -1) }u234(13){ d36(bb 0 insn -1) }u235(25){ d117(bb 0 insn -1) }u236(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; live  gen 	
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 222
;;      reg 24 { d79(bb 24 insn 219) }

( 25 )->[26]->( 27 28 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u238(11){ d30(bb 0 insn -1) }u239(13){ d36(bb 0 insn -1) }u240(25){ d117(bb 0 insn -1) }u241(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 213 236
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
78
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 78, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 223
;;      reg 213 { d600(bb 24 insn 218) }
;;      reg 236 { d618(bb 16 insn 355) }
;;   UD chains for insn luid 1 uid 224
;;      reg 24 { d78(bb 26 insn 223) }

( 24 26 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u245(11){ d30(bb 0 insn -1) }u246(13){ d36(bb 0 insn -1) }u247(25){ d117(bb 0 insn -1) }u248(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 211
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 211
;; live  kill	
;; rd  in  	(75)
3, 12, 24, 29, 30, 35, 36, 78, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
598
;; rd  kill	(2)
598, 599
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; rd  out 	(75)
3, 12, 24, 29, 30, 35, 36, 78, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }

( 25 26 27 )->[28]->( 29 30 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u249(11){ d30(bb 0 insn -1) }u250(13){ d36(bb 0 insn -1) }u251(25){ d117(bb 0 insn -1) }u252(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 211
;; lr  def 	 24 [cc] 216 217 218 219
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; live  gen 	 24 [cc] 216 217 218 219
;; live  kill	
;; rd  in  	(76)
3, 12, 24, 29, 30, 35, 36, 78, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(5)
96, 601, 602, 603, 604
;; rd  kill	(4)
601, 602, 603, 604
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; rd  out 	(79)
3, 12, 24, 29, 30, 35, 36, 96, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 233
;;      reg 142 { d548(bb 16 insn 349) }
;;   UD chains for insn luid 1 uid 234
;;      reg 24 { d97(bb 28 insn 233) }
;;   UD chains for insn luid 2 uid 236
;;      reg 211 { d599(bb 24 insn 217) d598(bb 27 insn 231) }
;;      reg 216 { d601(bb 28 insn 234) }
;;   UD chains for insn luid 3 uid 237
;;      reg 217 { d602(bb 28 insn 236) }
;;   UD chains for insn luid 4 uid 238
;;      reg 218 { d603(bb 28 insn 237) }
;;   UD chains for insn luid 5 uid 239
;;      reg 219 { d604(bb 28 insn 238) }
;;   UD chains for insn luid 6 uid 240
;;      reg 24 { d96(bb 28 insn 239) }

( 28 )->[29]->( 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u261(11){ d30(bb 0 insn -1) }u262(13){ d36(bb 0 insn -1) }u263(25){ d117(bb 0 insn -1) }u264(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 142
;; live  kill	
;; rd  in  	(79)
3, 12, 24, 29, 30, 35, 36, 96, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
553
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; rd  out 	(79)
3, 12, 24, 29, 30, 35, 36, 96, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 242
;;      reg 142 { d548(bb 16 insn 349) }

( 28 29 )->[30]->( 31 32 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u266(11){ d30(bb 0 insn -1) }u267(13){ d36(bb 0 insn -1) }u268(25){ d117(bb 0 insn -1) }u269(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 142
;; lr  def 	 24 [cc] 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 24 [cc] 143
;; live  kill	
;; rd  in  	(80)
3, 12, 24, 29, 30, 35, 36, 96, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(2)
94, 555
;; rd  kill	(1)
555
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; rd  out 	(81)
3, 12, 24, 29, 30, 35, 36, 94, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 245
;;      reg 133 { d523(bb 13 insn 129) }
;;   UD chains for insn luid 1 uid 366
;;      reg 24 { d95(bb 30 insn 245) }
;;   UD chains for insn luid 2 uid 256
;;      reg 142 { d553(bb 29 insn 242) d548(bb 16 insn 349) }
;;      reg 143 { d555(bb 30 insn 366) }
;;   UD chains for insn luid 3 uid 257
;;      reg 24 { d94(bb 30 insn 256) }

( 30 )->[31]->( 34 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u275(11){ d30(bb 0 insn -1) }u276(13){ d36(bb 0 insn -1) }u277(25){ d117(bb 0 insn -1) }u278(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141
;; lr  def 	 24 [cc] 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  gen 	 24 [cc] 141 142
;; live  kill	
;; rd  in  	(81)
3, 12, 24, 29, 30, 35, 36, 94, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(3)
93, 543, 546
;; rd  kill	(15)
540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; rd  out 	(80)
3, 12, 24, 29, 30, 35, 36, 93, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 543, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 259
;;      reg 133 { d523(bb 13 insn 129) }
;;   UD chains for insn luid 1 uid 368
;;      reg 24 { d93(bb 31 insn 259) }
;;   UD chains for insn luid 2 uid 270
;;      reg 141 { d540(bb 11 insn 362) }

( 30 )->[32]->( 33 34 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u282(11){ d30(bb 0 insn -1) }u283(13){ d36(bb 0 insn -1) }u284(25){ d117(bb 0 insn -1) }u285(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 236
;; lr  def 	 24 [cc] 220
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 24 [cc] 220
;; live  kill	
;; rd  in  	(81)
3, 12, 24, 29, 30, 35, 36, 94, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(2)
92, 605
;; rd  kill	(2)
605, 606
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; rd  out 	(82)
3, 12, 24, 29, 30, 35, 36, 92, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 275
;;      reg 236 { d618(bb 16 insn 355) }
;;   UD chains for insn luid 1 uid 276
;;      reg 220 { d606(bb 32 insn 275) }
;;      reg 236 { d618(bb 16 insn 355) }
;;   UD chains for insn luid 2 uid 277
;;      reg 220 { d605(bb 32 insn 276) }
;;   UD chains for insn luid 3 uid 278
;;      reg 24 { d92(bb 32 insn 277) }

( 32 )->[33]->( 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u291(11){ d30(bb 0 insn -1) }u292(13){ d36(bb 0 insn -1) }u293(25){ d117(bb 0 insn -1) }u294(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  gen 	 141
;; live  kill	
;; rd  in  	(82)
3, 12, 24, 29, 30, 35, 36, 92, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
542
;; rd  kill	(6)
540, 541, 542, 543, 544, 545
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; rd  out 	(82)
3, 12, 24, 29, 30, 35, 36, 92, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 280
;;      reg 141 { d540(bb 11 insn 362) }

( 33 32 31 )->[34]->( 35 44 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u296(11){ d30(bb 0 insn -1) }u297(13){ d36(bb 0 insn -1) }u298(25){ d117(bb 0 insn -1) }u299(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(86)
3, 12, 24, 29, 30, 35, 36, 92, 93, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
91
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(85)
3, 12, 24, 29, 30, 35, 36, 91, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 283
;;      reg 133 { d523(bb 13 insn 129) }
;;   UD chains for insn luid 1 uid 284
;;      reg 24 { d91(bb 34 insn 283) }

( 34 )->[35]->( 44 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u302(11){ d30(bb 0 insn -1) }u303(13){ d36(bb 0 insn -1) }u304(25){ d117(bb 0 insn -1) }u305(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  gen 	 142
;; live  kill	
;; rd  in  	(85)
3, 12, 24, 29, 30, 35, 36, 91, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
552
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(83)
3, 12, 24, 29, 30, 35, 36, 91, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 286
;;      reg 142 { d553(bb 29 insn 242) d548(bb 16 insn 349) d546(bb 31 insn 368) }

( 15 )->[36]->( 37 43 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u307(11){ d30(bb 0 insn -1) }u308(13){ d36(bb 0 insn -1) }u309(25){ d117(bb 0 insn -1) }u310(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 188
;; lr  def 	 24 [cc] 221 223 224
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 188
;; live  gen 	 24 [cc] 221 223 224
;; live  kill	
;; rd  in  	(54)
7, 16, 24, 29, 30, 35, 36, 81, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 611, 612, 613, 615
;; rd  gen 	(4)
90, 607, 608, 609
;; rd  kill	(4)
607, 608, 609, 610
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 90, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 293
;;      reg 188 { d587(bb 13 insn 132) }
;;   UD chains for insn luid 1 uid 294
;;      reg 135 { d527(bb 2 insn 24) d526(bb 3 insn 43) }
;;      reg 221 { d607(bb 36 insn 293) }
;;   UD chains for insn luid 2 uid 295
;;      reg 223 { d608(bb 36 insn 294) }
;;   UD chains for insn luid 3 uid 296
;;      reg 223 { d608(bb 36 insn 294) }
;;      reg 224 { d610(bb 36 insn 295) }
;;   UD chains for insn luid 4 uid 297
;;      reg 224 { d609(bb 36 insn 296) }
;;   UD chains for insn luid 5 uid 298
;;      reg 24 { d90(bb 36 insn 297) }

( 36 )->[37]->( 38 40 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u319(11){ d30(bb 0 insn -1) }u320(13){ d36(bb 0 insn -1) }u321(25){ d117(bb 0 insn -1) }u322(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; live  gen 	 24 [cc] 141
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 90, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(2)
89, 541
;; rd  kill	(6)
540, 541, 542, 543, 544, 545
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 89, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 300
;;      reg 141 { d540(bb 11 insn 362) }
;;   UD chains for insn luid 1 uid 301
;;      reg 140 { d539(bb 15 insn 153) }
;;   UD chains for insn luid 2 uid 302
;;      reg 24 { d89(bb 37 insn 301) }

( 37 )->[38]->( 39 43 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u326(11){ d30(bb 0 insn -1) }u327(13){ d36(bb 0 insn -1) }u328(25){ d117(bb 0 insn -1) }u329(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 89, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
88
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 88, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 304
;;      reg 133 { d523(bb 13 insn 129) }
;;   UD chains for insn luid 1 uid 305
;;      reg 24 { d88(bb 38 insn 304) }

( 38 )->[39]->( 44 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u332(11){ d30(bb 0 insn -1) }u333(13){ d36(bb 0 insn -1) }u334(25){ d117(bb 0 insn -1) }u335(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  gen 	 142
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 88, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
551
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 88, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }

( 37 )->[40]->( 41 43 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u336(11){ d30(bb 0 insn -1) }u337(13){ d36(bb 0 insn -1) }u338(25){ d117(bb 0 insn -1) }u339(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 89, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
87
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 87, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 312
;;      reg 140 { d539(bb 15 insn 153) }
;;   UD chains for insn luid 1 uid 313
;;      reg 24 { d87(bb 40 insn 312) }

( 40 )->[41]->( 42 43 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u342(11){ d30(bb 0 insn -1) }u343(13){ d36(bb 0 insn -1) }u344(25){ d117(bb 0 insn -1) }u345(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 87, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
86
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 86, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 315
;;      reg 133 { d523(bb 13 insn 129) }
;;   UD chains for insn luid 1 uid 316
;;      reg 24 { d86(bb 41 insn 315) }

( 41 )->[42]->( 44 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u348(11){ d30(bb 0 insn -1) }u349(13){ d36(bb 0 insn -1) }u350(25){ d117(bb 0 insn -1) }u351(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  gen 	 142
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 86, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
550
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 86, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }

( 38 41 40 36 )->[43]->( 44 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u352(11){ d30(bb 0 insn -1) }u353(13){ d36(bb 0 insn -1) }u354(25){ d117(bb 0 insn -1) }u355(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  gen 	 142
;; live  kill	
;; rd  in  	(61)
7, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
549
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(62)
7, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 541, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }

( 43 35 12 34 39 14 42 )->[44]->( 1 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u356(11){ d30(bb 0 insn -1) }u357(13){ d36(bb 0 insn -1) }u358(25){ d117(bb 0 insn -1) }u359(26){ d118(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(105)
3, 7, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 107, 108, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
0
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 37, 38, 39, 40, 41
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(104)
0, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 107, 108, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d117(bb 0 insn -1) }
;;   reg 26 { d118(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 326
;;      reg 142 { d554(bb 12 insn 120) d553(bb 29 insn 242) d552(bb 35 insn 286) d551(bb 39 insn 307) d550(bb 42 insn 318) d549(bb 43 insn 323) d548(bb 16 insn 349) d547(bb 14 insn 364) d546(bb 31 insn 368) }
;;   UD chains for insn luid 1 uid 327
;;      reg 146 { d557(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 328
;;      reg 13 { d36(bb 0 insn -1) }
;;      reg 0 { d2(bb 44 insn 326) }
;;      reg 1 { d11(bb 44 insn 327) }
;;   UD chains for insn luid 3 uid 333
;;      reg 141 { d545(bb 12 insn 119) d544(bb 14 insn 148) d543(bb 31 insn 270) d542(bb 33 insn 280) d541(bb 37 insn 300) d540(bb 11 insn 362) }
;;   UD chains for insn luid 4 uid 339
;;      reg 0 { d0(bb 44 insn 333) }

( 44 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u367(0){ d0(bb 44 insn 333) }u368(11){ d30(bb 0 insn -1) }u369(13){ d36(bb 0 insn -1) }u370(14){ }u371(25){ d117(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(104)
0, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 107, 108, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(104)
0, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 107, 108, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 44 insn 333) }
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d117(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 40 to worklist
  Adding insn 10 to worklist
  Adding insn 370 to worklist
  Adding insn 53 to worklist
  Adding insn 58 to worklist
  Adding insn 372 to worklist
  Adding insn 374 to worklist
  Adding insn 83 to worklist
  Adding insn 376 to worklist
  Adding insn 117 to worklist
  Adding insn 378 to worklist
  Adding insn 135 to worklist
  Adding insn 380 to worklist
  Adding insn 159 to worklist
  Adding insn 177 to worklist
  Adding insn 353 to worklist
  Adding insn 181 to worklist
  Adding insn 382 to worklist
  Adding insn 384 to worklist
  Adding insn 194 to worklist
  Adding insn 206 to worklist
  Adding insn 386 to worklist
  Adding insn 220 to worklist
  Adding insn 222 to worklist
  Adding insn 224 to worklist
  Adding insn 240 to worklist
  Adding insn 257 to worklist
  Adding insn 388 to worklist
  Adding insn 278 to worklist
  Adding insn 284 to worklist
  Adding insn 390 to worklist
  Adding insn 298 to worklist
  Adding insn 302 to worklist
  Adding insn 305 to worklist
  Adding insn 392 to worklist
  Adding insn 313 to worklist
  Adding insn 316 to worklist
  Adding insn 394 to worklist
  Adding insn 339 to worklist
  Adding insn 328 to worklist
Finished finding needed instructions:
  Adding insn 333 to worklist
Processing use of (reg 141 [ exceptions ]) in insn 333:
  Adding insn 119 to worklist
  Adding insn 148 to worklist
  Adding insn 270 to worklist
  Adding insn 280 to worklist
  Adding insn 300 to worklist
  Adding insn 362 to worklist
Processing use of (reg 24 cc) in insn 362:
  Adding insn 104 to worklist
Processing use of (reg 180) in insn 362:
  Adding insn 103 to worklist
Processing use of (reg 139 [ tm ]) in insn 103:
  Adding insn 60 to worklist
  Adding insn 85 to worklist
  Adding insn 358 to worklist
  Adding insn 360 to worklist
Processing use of (reg 24 cc) in insn 360:
  Adding insn 92 to worklist
Processing use of (reg 179 [ significand ]) in insn 92:
  Adding insn 91 to worklist
Processing use of (subreg (reg 135 [ significand ]) 4) in insn 91:
  Adding insn 24 to worklist
  Adding insn 43 to worklist
Processing use of (reg 179 [ significand ]) in insn 91:
  Adding insn 90 to worklist
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 90:
Processing use of (reg 135 [ significand ]) in insn 43:
Processing use of (reg 170) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 135 [ significand ]) in insn 24:
  Adding insn 22 to worklist
  Adding insn 23 to worklist
  Adding insn 369 to worklist
Processing use of (reg 229 [+4 ]) in insn 24:
  Adding insn 19 to worklist
Processing use of (reg 156) in insn 19:
  Adding insn 17 to worklist
Processing use of (reg 229 [+4 ]) in insn 19:
  Adding insn 18 to worklist
Processing use of (subreg (reg 144 [ D.4609 ]) 4) in insn 18:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (subreg (reg 144 [ D.4609 ]) 0) in insn 17:
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 23:
Processing use of (reg 135 [ significand ]) in insn 23:
Processing use of (reg 157) in insn 23:
  Adding insn 21 to worklist
Processing use of (reg 229 [+4 ]) in insn 21:
Processing use of (reg 135 [ significand ]) in insn 22:
Processing use of (reg 228) in insn 22:
  Adding insn 20 to worklist
Processing use of (subreg (reg 144 [ D.4609 ]) 0) in insn 20:
Processing use of (reg 24 cc) in insn 358:
  Adding insn 69 to worklist
Processing use of (reg 178) in insn 69:
  Adding insn 68 to worklist
Processing use of (subreg (reg 176) 4) in insn 68:
  Adding insn 66 to worklist
Processing use of (reg 178) in insn 68:
  Adding insn 67 to worklist
Processing use of (subreg (reg 176) 0) in insn 67:
Processing use of (reg 135 [ significand ]) in insn 66:
Processing use of (reg 177) in insn 66:
  Adding insn 65 to worklist
Processing use of (reg 180) in insn 104:
Processing use of (reg 141 [ exceptions ]) in insn 300:
Processing use of (reg 141 [ exceptions ]) in insn 280:
Processing use of (reg 141 [ exceptions ]) in insn 270:
Processing use of (reg 141 [ exceptions ]) in insn 148:
Processing use of (reg 141 [ exceptions ]) in insn 119:
Processing use of (reg 13 sp) in insn 328:
Processing use of (reg 0 r0) in insn 328:
  Adding insn 326 to worklist
Processing use of (reg 1 r1) in insn 328:
  Adding insn 327 to worklist
Processing use of (reg 146 [ sd ]) in insn 327:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 142 [ d ]) in insn 326:
  Adding insn 120 to worklist
  Adding insn 242 to worklist
  Adding insn 286 to worklist
  Adding insn 307 to worklist
  Adding insn 318 to worklist
  Adding insn 323 to worklist
  Adding insn 349 to worklist
  Adding insn 364 to worklist
  Adding insn 368 to worklist
Processing use of (reg 24 cc) in insn 368:
  Adding insn 259 to worklist
Processing use of (reg 133 [ D.6039 ]) in insn 259:
  Adding insn 129 to worklist
Processing use of (subreg (reg 230) 0) in insn 129:
  Adding insn 127 to worklist
Processing use of (subreg (reg 182) 4) in insn 127:
  Adding insn 126 to worklist
Processing use of (reg 144 [ D.4609 ]) in insn 126:
Processing use of (reg 183) in insn 126:
  Adding insn 125 to worklist
Processing use of (reg 24 cc) in insn 364:
  Adding insn 137 to worklist
Processing use of (reg 133 [ D.6039 ]) in insn 137:
Processing use of (reg 0 r0) in insn 349:
  Adding insn 167 to worklist
Processing use of (reg 13 sp) in insn 167:
Processing use of (reg 0 r0) in insn 167:
  Adding insn 165 to worklist
Processing use of (reg 1 r1) in insn 167:
Processing use of (reg 2 r2) in insn 167:
  Adding insn 166 to worklist
Processing use of (reg 138 [ shift ]) in insn 166:
  Adding insn 163 to worklist
Processing use of (reg 195) in insn 163:
  Adding insn 162 to worklist
Processing use of (reg 188 [ D.6036 ]) in insn 162:
  Adding insn 132 to worklist
Processing use of (subreg (reg 134 [ D.6036 ]) 0) in insn 132:
  Adding insn 16 to worklist
Processing use of (reg 153) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 152) in insn 15:
  Adding insn 14 to worklist
Processing use of (subreg (reg 226) 0) in insn 14:
  Adding insn 12 to worklist
Processing use of (subreg (reg 144 [ D.4609 ]) 4) in insn 12:
Processing use of (reg 196) in insn 165:
  Adding insn 164 to worklist
Processing use of (reg 135 [ significand ]) in insn 164:
Processing use of (reg 135 [ significand ]) in insn 164:
Processing use of (reg 142 [ d ]) in insn 286:
Processing use of (reg 142 [ d ]) in insn 242:
Processing use of (reg 0 r0) in insn 339:
Processing use of (reg 24 cc) in insn 316:
  Adding insn 315 to worklist
Processing use of (reg 133 [ D.6039 ]) in insn 315:
Processing use of (reg 24 cc) in insn 313:
  Adding insn 312 to worklist
Processing use of (reg 140 [ rmode ]) in insn 312:
  Adding insn 153 to worklist
Processing use of (reg 149 [ fpscr ]) in insn 153:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 24 cc) in insn 305:
  Adding insn 304 to worklist
Processing use of (reg 133 [ D.6039 ]) in insn 304:
Processing use of (reg 24 cc) in insn 302:
  Adding insn 301 to worklist
Processing use of (reg 140 [ rmode ]) in insn 301:
Processing use of (reg 24 cc) in insn 298:
  Adding insn 297 to worklist
Processing use of (reg 224) in insn 297:
  Adding insn 296 to worklist
Processing use of (subreg (reg 223) 4) in insn 296:
  Adding insn 294 to worklist
Processing use of (reg 224) in insn 296:
  Adding insn 295 to worklist
Processing use of (subreg (reg 223) 0) in insn 295:
Processing use of (reg 135 [ significand ]) in insn 294:
Processing use of (reg 221 [ D.6036 ]) in insn 294:
  Adding insn 293 to worklist
Processing use of (reg 188 [ D.6036 ]) in insn 293:
Processing use of (reg 24 cc) in insn 284:
  Adding insn 283 to worklist
Processing use of (reg 133 [ D.6039 ]) in insn 283:
Processing use of (reg 24 cc) in insn 278:
  Adding insn 277 to worklist
Processing use of (reg 220 [ rem ]) in insn 277:
  Adding insn 276 to worklist
Processing use of (reg 220 [ rem ]) in insn 276:
  Adding insn 275 to worklist
Processing use of (subreg (reg 236 [ rem ]) 4) in insn 276:
  Adding insn 355 to worklist
Processing use of (reg 235 [+4 ]) in insn 355:
  Adding insn 352 to worklist
Processing use of (reg 236 [ rem ]) in insn 355:
  Adding insn 354 to worklist
Processing use of (reg 234) in insn 354:
  Adding insn 351 to worklist
Processing use of (reg 236 [ rem ]) in insn 354:
Processing use of (reg 0 r0) in insn 351:
  Adding insn 173 to worklist
Processing use of (reg 13 sp) in insn 173:
Processing use of (reg 0 r0) in insn 173:
  Adding insn 171 to worklist
Processing use of (reg 1 r1) in insn 173:
Processing use of (reg 2 r2) in insn 173:
  Adding insn 172 to worklist
Processing use of (reg 201) in insn 172:
  Adding insn 170 to worklist
Processing use of (reg 138 [ shift ]) in insn 170:
Processing use of (reg 135 [ significand ]) in insn 171:
Processing use of (reg 1 r1) in insn 352:
Processing use of (subreg (reg 236 [ rem ]) 0) in insn 275:
Processing use of (reg 24 cc) in insn 257:
  Adding insn 256 to worklist
Processing use of (reg 142 [ d ]) in insn 256:
Processing use of (reg 143 [ iftmp.141 ]) in insn 256:
  Adding insn 366 to worklist
Processing use of (reg 24 cc) in insn 366:
  Adding insn 245 to worklist
Processing use of (reg 133 [ D.6039 ]) in insn 245:
Processing use of (reg 24 cc) in insn 240:
  Adding insn 239 to worklist
Processing use of (reg 219) in insn 239:
  Adding insn 238 to worklist
Processing use of (reg 218) in insn 238:
  Adding insn 237 to worklist
Processing use of (subreg (reg 217) 0) in insn 237:
  Adding insn 236 to worklist
Processing use of (subreg (reg 211) 0) in insn 236:
  Adding insn 217 to worklist
  Adding insn 231 to worklist
Processing use of (reg 216) in insn 236:
  Adding insn 234 to worklist
Processing use of (reg 24 cc) in insn 234:
  Adding insn 233 to worklist
Processing use of (reg 142 [ d ]) in insn 233:
Processing use of (reg 24 cc) in insn 224:
  Adding insn 223 to worklist
Processing use of (subreg (reg 213) 0) in insn 223:
  Adding insn 218 to worklist
Processing use of (subreg (reg 236 [ rem ]) 0) in insn 223:
Processing use of (reg 136 [ incr ]) in insn 218:
  Adding insn 183 to worklist
  Adding insn 208 to worklist
  Adding insn 213 to worklist
  Adding insn 188 to worklist
Processing use of (reg 236 [ rem ]) in insn 218:
Processing use of (reg 183) in insn 188:
Processing use of (reg 24 cc) in insn 222:
  Adding insn 219 to worklist
Processing use of (subreg (reg 213) 4) in insn 219:
Processing use of (subreg (reg 236 [ rem ]) 4) in insn 219:
Processing use of (reg 24 cc) in insn 220:
Processing use of (reg 24 cc) in insn 206:
  Adding insn 205 to worklist
Processing use of (reg 210) in insn 205:
  Adding insn 204 to worklist
Processing use of (reg 209) in insn 204:
  Adding insn 203 to worklist
Processing use of (subreg (reg 208) 0) in insn 203:
  Adding insn 202 to worklist
Processing use of (reg 205) in insn 202:
  Adding insn 197 to worklist
Processing use of (reg 207) in insn 202:
  Adding insn 200 to worklist
Processing use of (reg 24 cc) in insn 200:
  Adding insn 199 to worklist
Processing use of (reg 140 [ rmode ]) in insn 199:
Processing use of (reg 24 cc) in insn 197:
  Adding insn 196 to worklist
Processing use of (reg 133 [ D.6039 ]) in insn 196:
Processing use of (reg 24 cc) in insn 194:
  Adding insn 193 to worklist
Processing use of (reg 140 [ rmode ]) in insn 193:
Processing use of (reg 24 cc) in insn 181:
  Adding insn 180 to worklist
Processing use of (reg 203) in insn 180:
  Adding insn 179 to worklist
Processing use of (reg 142 [ d ]) in insn 179:
Processing use of (reg 24 cc) in insn 177:
  Adding insn 176 to worklist
Processing use of (reg 140 [ rmode ]) in insn 176:
Processing use of (reg 24 cc) in insn 159:
  Adding insn 158 to worklist
Processing use of (reg 188 [ D.6036 ]) in insn 158:
Processing use of (reg 191) in insn 158:
  Adding insn 154 to worklist
Processing use of (reg 24 cc) in insn 135:
  Adding insn 134 to worklist
Processing use of (reg 187) in insn 134:
  Adding insn 130 to worklist
Processing use of (reg 188 [ D.6036 ]) in insn 134:
Processing use of (reg 24 cc) in insn 117:
  Adding insn 116 to worklist
Processing use of (reg 181) in insn 116:
  Adding insn 115 to worklist
Processing use of (reg 139 [ tm ]) in insn 115:
Processing use of (reg 24 cc) in insn 83:
  Adding insn 82 to worklist
Processing use of (reg 134 [ D.6036 ]) in insn 82:
Processing use of (reg 24 cc) in insn 58:
  Adding insn 57 to worklist
Processing use of (reg 175 [ significand ]) in insn 57:
  Adding insn 56 to worklist
Processing use of (subreg (reg 135 [ significand ]) 4) in insn 56:
Processing use of (reg 175 [ significand ]) in insn 56:
  Adding insn 55 to worklist
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 55:
Processing use of (reg 24 cc) in insn 53:
  Adding insn 52 to worklist
Processing use of (reg 161 [ D.6036 ]) in insn 52:
  Adding insn 27 to worklist
Processing use of (reg 162) in insn 52:
  Adding insn 28 to worklist
Processing use of (reg 159) in insn 28:
  Adding insn 26 to worklist
Processing use of (subreg (reg 160) 0) in insn 26:
  Adding insn 25 to worklist
Processing use of (subreg (reg 134 [ D.6036 ]) 0) in insn 27:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 148 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 24 cc) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 169) in insn 39:
  Adding insn 38 to worklist
Processing use of (reg 168) in insn 38:
  Adding insn 37 to worklist
Processing use of (subreg (reg 167) 0) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 163) in insn 36:
  Adding insn 30 to worklist
Processing use of (reg 166) in insn 36:
  Adding insn 34 to worklist
Processing use of (reg 24 cc) in insn 34:
  Adding insn 33 to worklist
Processing use of (reg 161 [ D.6036 ]) in insn 33:
Processing use of (reg 24 cc) in insn 30:
  Adding insn 29 to worklist
Processing use of (reg 161 [ D.6036 ]) in insn 29:
Processing use of (reg 162) in insn 29:


vfp_double_ftosi

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,10u} r1={8d,5u} r2={7d,3u} r3={5d,1u} r11={1d,44u} r12={5d} r13={1d,48u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={39d,34u} r25={1d,44u} r26={1d,43u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={1d,7u} r134={1d,3u} r135={5d,14u,2d} r136={4d,1u} r138={1d,2u} r139={4d,2u} r140={1d,5u} r141={6d,6u} r142={9d,6u} r143={1d,1u} r144={1d,5u,1d} r146={1d,1u} r148={1d,1u} r149={1d,1u} r152={1d,1u,1d} r153={1d,1u} r156={1d,1u} r157={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,3u,1d} r162={1d,2u} r163={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r175={2d,2u} r176={1d,2u} r177={1d,1u} r178={2d,2u} r179={2d,2u} r180={1d,2u} r181={1d,1u} r182={1d,1u} r183={1d,2u} r187={1d,1u} r188={1d,4u,3d} r191={1d,1u} r195={1d,1u} r196={1d,1u} r201={1d,1u} r203={1d,1u} r205={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={2d,1u} r213={1d,2u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={2d,2u} r221={1d,1u} r223={1d,2u} r224={2d,2u} r226={1d,1u} r228={1d,1u} r229={2d,3u} r230={1d,1u} r234={1d,1u} r235={1d,1u} r236={3d,7u} 
;;    total ref usage 993{621d,364u,8e} in 180{176 regular + 4 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522
0[0,10] 1[10,8] 2[18,7] 3[25,5] 11[30,1] 12[31,5] 13[36,1] 14[37,5] 15[42,4] 16[46,4] 17[50,4] 18[54,4] 19[58,4] 20[62,4] 21[66,4] 22[70,4] 23[74,4] 24[78,39] 25[117,1] 26[118,1] 27[119,4] 28[123,4] 29[127,4] 30[131,4] 31[135,4] 32[139,4] 33[143,4] 34[147,4] 35[151,4] 36[155,4] 37[159,4] 38[163,4] 39[167,4] 40[171,4] 41[175,4] 42[179,4] 43[183,4] 44[187,4] 45[191,4] 46[195,4] 47[199,4] 48[203,4] 49[207,4] 50[211,4] 51[215,4] 52[219,4] 53[223,4] 54[227,4] 55[231,4] 56[235,4] 57[239,4] 58[243,4] 59[247,4] 60[251,4] 61[255,4] 62[259,4] 63[263,4] 64[267,4] 65[271,4] 66[275,4] 67[279,4] 68[283,4] 69[287,4] 70[291,4] 71[295,4] 72[299,4] 73[303,4] 74[307,4] 75[311,4] 76[315,4] 77[319,4] 78[323,4] 79[327,4] 80[331,4] 81[335,4] 82[339,4] 83[343,4] 84[347,4] 85[351,4] 86[355,4] 87[359,4] 88[363,4] 89[367,4] 90[371,4] 91[375,4] 92[379,4] 93[383,4] 94[387,4] 95[391,4] 96[395,4] 97[399,4] 98[403,4] 99[407,4] 100[411,4] 101[415,4] 102[419,4] 103[423,4] 104[427,4] 105[431,4] 106[435,4] 107[439,4] 108[443,4] 109[447,4] 110[451,4] 111[455,4] 112[459,4] 113[463,4] 114[467,4] 115[471,4] 116[475,4] 117[479,4] 118[483,4] 119[487,4] 120[491,4] 121[495,4] 122[499,4] 123[503,4] 124[507,4] 125[511,4] 126[515,4] 127[519,4] 133[523,1] 134[524,1] 135[525,5] 136[530,4] 138[534,1] 139[535,4] 140[539,1] 141[540,6] 142[546,9] 143[555,1] 144[556,1] 146[557,1] 148[558,1] 149[559,1] 152[560,1] 153[561,1] 156[562,1] 157[563,1] 159[564,1] 160[565,1] 161[566,1] 162[567,1] 163[568,1] 166[569,1] 167[570,1] 168[571,1] 169[572,1] 170[573,1] 175[574,2] 176[576,1] 177[577,1] 178[578,2] 179[580,2] 180[582,1] 181[583,1] 182[584,1] 183[585,1] 187[586,1] 188[587,1] 191[588,1] 195[589,1] 196[590,1] 201[591,1] 203[592,1] 205[593,1] 207[594,1] 208[595,1] 209[596,1] 210[597,1] 211[598,2] 213[600,1] 216[601,1] 217[602,1] 218[603,1] 219[604,1] 220[605,2] 221[607,1] 223[608,1] 224[609,2] 226[611,1] 228[612,1] 229[613,2] 230[615,1] 234[616,1] 235[617,1] 236[618,3] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 144 146 148 149 152 153 156 157 159 160 161 162 163 166 167 168 169 226 228 229
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 135 144 146 148 149 152 153 156 157 159 160 161 162 163 166 167 168 169 226 228 229
;; live  kill	 14 [lr]
;; rd  in  	(10)
9, 17, 24, 29, 30, 35, 36, 41, 117, 118
;; rd  gen 	(25)
7, 16, 114, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;; rd  kill	(45)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 37, 38, 39, 40, 41, 524, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613, 614

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 4 2 arch/arm/vfp/vfpdouble.c:586 (set (reg/v:SI 146 [ sd ])
        (reg:SI 0 r0 [ sd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ sd ])
        (nil)))

(insn 4 2 5 2 arch/arm/vfp/vfpdouble.c:586 (set (reg/v:SI 148 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:586 (set (reg/v:SI 149 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:592 (set (reg:SI 0 r0)
        (reg/v:SI 148 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 148 [ dm ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:592 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:592 (set (reg:DI 144 [ D.4609 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 14 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 226)
        (ashiftrt:SI (subreg:SI (reg:DI 144 [ D.4609 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 14 12 15 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 152)
        (zero_extend:SI (subreg:HI (reg:SI 226) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 226)
        (nil)))

(insn 15 14 16 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 153)
        (ashift:SI (reg:SI 152)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 152)
        (nil)))

(insn 16 15 17 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 134 [ D.6036 ])
        (lshiftrt:SI (reg:SI 153)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_EQUAL (and:SI (reg:SI 152)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 17 16 18 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 156)
        (lshiftrt:SI (subreg:SI (reg:DI 144 [ D.4609 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 18 17 19 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 229 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 144 [ D.4609 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 19 18 20 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 229 [+4 ])
        (ior:SI (reg:SI 156)
            (reg:SI 229 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(insn 20 19 21 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 228)
        (ashift:SI (subreg:SI (reg:DI 144 [ D.4609 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 21 20 369 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 157)
        (ashift:SI (reg:SI 229 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 369 21 22 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 135 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 22 369 23 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 228)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 228)
        (nil)))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 0)
        (ior:SI (reg:SI 157)
            (subreg:SI (reg/v:DI 135 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 157)
        (nil)))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 229 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 229 [+4 ])
        (nil)))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 160)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 159)
        (subreg:HI (reg:SI 160) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 160)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 27 26 28 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 161 [ D.6036 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 134 [ D.6036 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 28 27 29 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 162)
        (sign_extend:SI (reg:HI 159))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 159)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 29 28 30 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.6036 ])
            (reg:SI 162))) 219 {*arm_cmpsi_insn} (nil))

(insn 30 29 33 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 163)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 33 30 34 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.6036 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 34 33 36 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 166)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 36 34 37 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 167)
        (and:SI (reg:SI 163)
            (reg:SI 166))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 166)
        (expr_list:REG_DEAD (reg:SI 163)
            (nil))))

(insn 37 36 38 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 168)
        (subreg:QI (reg:SI 167) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 167)
        (nil)))

(insn 38 37 39 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 169)
        (zero_extend:SI (reg:QI 168))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 168)
        (nil)))

(insn 39 38 40 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 169)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 169)
        (nil)))

(jump_insn 40 39 41 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149 161 162
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149 161 162
;; rd  out 	(32)
7, 16, 24, 29, 30, 35, 36, 114, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u44(11){ }u45(13){ }u46(25){ }u47(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 135 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 135 170
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 114, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;; rd  gen 	(2)
526, 573
;; rd  kill	(6)
525, 526, 527, 528, 529, 573

;; Pred edge  2 [50.0%]  (fallthru)
(note 41 40 42 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 170)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 43 42 370 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 135 [ significand ])
        (ior:DI (reg/v:DI 135 [ significand ])
            (reg:DI 170))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 170)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 135 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))

(jump_insn 370 43 371 3 (set (pc)
        (label_ref 80)) -1 (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; rd  out 	(33)
7, 16, 24, 29, 30, 35, 36, 114, 117, 118, 524, 526, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613


;; Succ edge  8 [100.0%] 

(barrier 371 370 46)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u51(11){ }u52(13){ }u53(25){ }u54(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149 161 162
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 161 162
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149 161 162
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 114, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;; rd  gen 	(1)
83
;; rd  kill	(0)


;; Pred edge  2 [50.0%] 
(code_label 46 371 47 4 309 "" [1 uses])

(note 47 46 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 47 53 4 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161 [ D.6036 ])
            (reg:SI 162))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 162)
        (expr_list:REG_DEAD (reg:SI 161 [ D.6036 ])
            (expr_list:REG_EQUAL (compare:CC (reg:SI 161 [ D.6036 ])
                    (const_int 2047 [0x7ff]))
                (nil)))))

(jump_insn 53 52 54 4 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4400 [0x1130])
            (nil))))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; rd  out 	(32)
7, 16, 24, 29, 30, 35, 36, 83, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613


;; Succ edge  5 [56.0%]  (fallthru)
;; Succ edge  8 [44.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u59(11){ }u60(13){ }u61(25){ }u62(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 175
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 24 [cc] 175
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 83, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 611, 612, 613
;; rd  gen 	(2)
113, 574
;; rd  kill	(2)
574, 575

;; Pred edge  4 [56.0%]  (fallthru)
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 5 arch/arm/vfp/vfp.h:331 (set (reg:SI 175 [ significand ])
        (subreg:SI (reg/v:DI 135 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 56 55 57 5 arch/arm/vfp/vfp.h:331 (set (reg:SI 175 [ significand ])
        (ior:SI (reg:SI 175 [ significand ])
            (subreg:SI (reg/v:DI 135 [ significand ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 57 56 58 5 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 175 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 175 [ significand ])
        (nil)))

(jump_insn 58 57 59 5 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; rd  out 	(33)
7, 16, 24, 29, 30, 35, 36, 113, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 611, 612, 613


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u68(11){ }u69(13){ }u70(25){ }u71(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 139
;; live  kill	
;; rd  in  	(33)
7, 16, 24, 29, 30, 35, 36, 113, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 611, 612, 613
;; rd  gen 	(1)
538
;; rd  kill	(4)
535, 536, 537, 538

;; Pred edge  5 [50.0%]  (fallthru)
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 372 6 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 139 [ tm ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 372 60 373 6 (set (pc)
        (label_ref 101)) -1 (nil))
;; End of basic block 6 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; rd  out 	(34)
7, 16, 24, 29, 30, 35, 36, 113, 117, 118, 524, 527, 538, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 611, 612, 613


;; Succ edge  11 [100.0%] 

(barrier 373 372 63)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u72(11){ }u73(13){ }u74(25){ }u75(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 139 176 177 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 24 [cc] 139 176 177 178
;; live  kill	
;; rd  in  	(33)
7, 16, 24, 29, 30, 35, 36, 113, 117, 118, 524, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 611, 612, 613
;; rd  gen 	(5)
112, 536, 576, 577, 578
;; rd  kill	(8)
535, 536, 537, 538, 576, 577, 578, 579

;; Pred edge  5 [50.0%] 
(code_label 63 373 64 7 311 "" [1 uses])

(note 64 63 65 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 65 64 66 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 177)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 66 65 67 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 176)
        (and:DI (reg/v:DI 135 [ significand ])
            (reg:DI 177))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 177)
        (expr_list:REG_EQUAL (and:DI (reg/v:DI 135 [ significand ])
                (const_int 2305843009213693952 [0x2000000000000000]))
            (nil))))

(insn 67 66 68 7 arch/arm/vfp/vfp.h:333 (set (reg:SI 178)
        (subreg:SI (reg:DI 176) 0)) 167 {*arm_movsi_insn} (nil))

(insn 68 67 69 7 arch/arm/vfp/vfp.h:333 (set (reg:SI 178)
        (ior:SI (reg:SI 178)
            (subreg:SI (reg:DI 176) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 176)
        (nil)))

(insn 69 68 358 7 arch/arm/vfp/vfp.h:333 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 178)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 178)
        (nil)))

(insn 358 69 374 7 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 139 [ tm ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 16 [0x10])
            (const_int 48 [0x30]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 374 358 375 7 (set (pc)
        (label_ref 101)) -1 (nil))
;; End of basic block 7 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; rd  out 	(37)
7, 16, 24, 29, 30, 35, 36, 112, 117, 118, 524, 527, 536, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 578, 611, 612, 613


;; Succ edge  11 [100.0%] 

(barrier 375 374 80)

;; Start of basic block ( 4 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u84(11){ }u85(13){ }u86(25){ }u87(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(35)
7, 16, 24, 29, 30, 35, 36, 83, 114, 117, 118, 524, 526, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613
;; rd  gen 	(1)
111
;; rd  kill	(0)


;; Pred edge  4 [44.0%] 
;; Pred edge  3 [100.0%] 
(code_label 80 375 81 8 310 "" [2 uses])

(note 81 80 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 82 81 83 8 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.6036 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 83 82 84 8 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; rd  out 	(34)
7, 16, 24, 29, 30, 35, 36, 111, 117, 118, 524, 526, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u90(11){ }u91(13){ }u92(25){ }u93(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 139
;; live  kill	
;; rd  in  	(34)
7, 16, 24, 29, 30, 35, 36, 111, 117, 118, 524, 526, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613
;; rd  gen 	(1)
537
;; rd  kill	(4)
535, 536, 537, 538

;; Pred edge  8 [50.0%]  (fallthru)
(note 84 83 85 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 376 9 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 139 [ tm ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 376 85 377 9 (set (pc)
        (label_ref 101)) -1 (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; rd  out 	(35)
7, 16, 24, 29, 30, 35, 36, 111, 117, 118, 524, 526, 527, 537, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613


;; Succ edge  11 [100.0%] 

(barrier 377 376 88)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u94(11){ }u95(13){ }u96(25){ }u97(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 139 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 144 146 149
;; live  gen 	 24 [cc] 139 179
;; live  kill	
;; rd  in  	(34)
7, 16, 24, 29, 30, 35, 36, 111, 117, 118, 524, 526, 527, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 611, 612, 613
;; rd  gen 	(3)
110, 535, 580
;; rd  kill	(6)
535, 536, 537, 538, 580, 581

;; Pred edge  8 [50.0%] 
(code_label 88 377 89 10 314 "" [1 uses])

(note 89 88 90 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 90 89 91 10 arch/arm/vfp/vfp.h:338 (set (reg:SI 179 [ significand ])
        (subreg:SI (reg/v:DI 135 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 91 90 92 10 arch/arm/vfp/vfp.h:338 (set (reg:SI 179 [ significand ])
        (ior:SI (reg:SI 179 [ significand ])
            (subreg:SI (reg/v:DI 135 [ significand ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 92 91 360 10 arch/arm/vfp/vfp.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 179 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 179 [ significand ])
        (nil)))

(insn 360 92 101 10 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 139 [ tm ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; rd  out 	(36)
7, 16, 24, 29, 30, 35, 36, 110, 117, 118, 524, 526, 527, 535, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 580, 611, 612, 613


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 7 6 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u103(11){ }u104(13){ }u105(25){ }u106(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 141 180 181
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 144 146 149
;; live  gen 	 24 [cc] 141 180 181
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 110, 111, 112, 113, 117, 118, 524, 526, 527, 535, 536, 537, 538, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 611, 612, 613
;; rd  gen 	(4)
108, 540, 582, 583
;; rd  kill	(8)
540, 541, 542, 543, 544, 545, 582, 583

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 101 360 102 11 312 "" [3 uses])

(note 102 101 103 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 103 102 104 11 arch/arm/vfp/vfpdouble.c:599 (set (reg:SI 180)
        (and:SI (reg/v:SI 139 [ tm ])
            (const_int 4 [0x4]))) 67 {*arm_andsi3_insn} (nil))

(insn 104 103 362 11 arch/arm/vfp/vfpdouble.c:599 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 180)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 362 104 115 11 arch/arm/vfp/vfpdouble.c:588 (set (reg/v:SI 141 [ exceptions ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 180)
            (const_int 128 [0x80]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:SI 180)
        (expr_list:REG_DEAD (reg:CC 24 cc)
            (nil))))

(insn 115 362 116 11 arch/arm/vfp/vfpdouble.c:602 (set (reg:SI 181)
        (and:SI (reg/v:SI 139 [ tm ])
            (const_int 16 [0x10]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ tm ])
        (nil)))

(insn 116 115 117 11 arch/arm/vfp/vfpdouble.c:602 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 181)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 181)
        (nil)))

(jump_insn 117 116 118 11 arch/arm/vfp/vfpdouble.c:602 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 123)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144 146 149
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144 146 149
;; rd  out 	(46)
7, 16, 24, 29, 30, 35, 36, 108, 117, 118, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 611, 612, 613


;; Succ edge  12 [39.0%]  (fallthru)
;; Succ edge  13 [61.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u114(11){ }u115(13){ }u116(25){ }u117(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  gen 	 141 142
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 108, 117, 118, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 611, 612, 613
;; rd  gen 	(2)
545, 554
;; rd  kill	(15)
540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554

;; Pred edge  11 [39.0%]  (fallthru)
(note 118 117 119 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 119 118 120 12 arch/arm/vfp/vfpdouble.c:604 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 120 119 378 12 arch/arm/vfp/vfpdouble.c:603 (set (reg/v:SI 142 [ d ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 378 120 379 12 (set (pc)
        (label_ref 324)) -1 (nil))
;; End of basic block 12 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(47)
7, 16, 24, 29, 30, 35, 36, 108, 117, 118, 524, 526, 527, 535, 536, 537, 538, 545, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 611, 612, 613


;; Succ edge  44 [100.0%] 

(barrier 379 378 123)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u119(11){ }u120(13){ }u121(25){ }u122(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144 146 149
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 144
;; lr  def 	 24 [cc] 133 182 183 187 188 230
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144 146 149
;; live  gen 	 24 [cc] 133 182 183 187 188 230
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 108, 117, 118, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 611, 612, 613
;; rd  gen 	(7)
82, 523, 584, 585, 586, 587, 615
;; rd  kill	(6)
523, 584, 585, 586, 587, 615

;; Pred edge  11 [61.0%] 
(code_label 123 379 124 13 318 "" [1 uses])

(note 124 123 125 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 125 124 126 13 arch/arm/vfp/vfp.h:304 (set (reg:DI 183)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 126 125 127 13 arch/arm/vfp/vfp.h:304 (set (reg:DI 182)
        (and:DI (reg:DI 144 [ D.4609 ])
            (reg:DI 183))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 144 [ D.4609 ])
        (expr_list:REG_EQUAL (and:DI (reg:DI 144 [ D.4609 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 127 126 129 13 arch/arm/vfp/vfp.h:304 (set (reg:SI 230)
        (lshiftrt:SI (subreg:SI (reg:DI 182) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 182)
        (nil)))

(insn 129 127 130 13 arch/arm/vfp/vfp.h:304 (set (reg:SI 133 [ D.6039 ])
        (zero_extend:SI (subreg:HI (reg:SI 230) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 230)
        (nil)))

(insn 130 129 132 13 arch/arm/vfp/vfpdouble.c:605 (set (reg:SI 187)
        (const_int 1054 [0x41e])) 167 {*arm_movsi_insn} (nil))

(insn 132 130 134 13 arch/arm/vfp/vfpdouble.c:605 (set (reg:SI 188 [ D.6036 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 134 [ D.6036 ]) 0))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 134 [ D.6036 ])
        (nil)))

(insn 134 132 135 13 arch/arm/vfp/vfpdouble.c:605 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.6036 ])
            (reg:SI 187))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 187)
        (expr_list:REG_EQUAL (compare:CC (reg:SI 188 [ D.6036 ])
                (const_int 1054 [0x41e]))
            (nil))))

(jump_insn 135 134 136 13 arch/arm/vfp/vfpdouble.c:605 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 151)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 146 149 183 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 146 149 183 188
;; rd  out 	(52)
7, 16, 24, 29, 30, 35, 36, 82, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 611, 612, 613, 615


;; Succ edge  14 [50.0%]  (fallthru)
;; Succ edge  15 [50.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u133(11){ }u134(13){ }u135(25){ }u136(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141
;; lr  def 	 24 [cc] 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  gen 	 24 [cc] 141 142
;; live  kill	
;; rd  in  	(52)
7, 16, 24, 29, 30, 35, 36, 82, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 611, 612, 613, 615
;; rd  gen 	(3)
107, 544, 547
;; rd  kill	(15)
540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554

;; Pred edge  13 [50.0%]  (fallthru)
(note 136 135 137 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 137 136 364 14 arch/arm/vfp/vfpdouble.c:607 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.6039 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.6039 ])
        (nil)))

(insn 364 137 148 14 arch/arm/vfp/vfpdouble.c:608 (set (reg/v:SI 142 [ d ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 2147483647 [0x7fffffff])
            (const_int -2147483648 [0xffffffff80000000]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 148 364 380 14 arch/arm/vfp/vfpdouble.c:609 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(jump_insn 380 148 381 14 (set (pc)
        (label_ref 324)) -1 (nil))
;; End of basic block 14 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(53)
7, 16, 24, 29, 30, 35, 36, 107, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 544, 547, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 611, 612, 613, 615


;; Succ edge  44 [100.0%] 

(barrier 381 380 151)

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u140(11){ }u141(13){ }u142(25){ }u143(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 146 149 183 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 149 188
;; lr  def 	 24 [cc] 140 191
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 146 149 183 188
;; live  gen 	 24 [cc] 140 191
;; live  kill	
;; rd  in  	(52)
7, 16, 24, 29, 30, 35, 36, 82, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 611, 612, 613, 615
;; rd  gen 	(3)
81, 539, 588
;; rd  kill	(2)
539, 588

;; Pred edge  13 [50.0%] 
(code_label 151 381 152 15 320 "" [1 uses])

(note 152 151 153 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 153 152 154 15 arch/arm/vfp/vfpdouble.c:589 (set (reg/v:SI 140 [ rmode ])
        (and:SI (reg/v:SI 149 [ fpscr ])
            (const_int 12582912 [0xc00000]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 149 [ fpscr ])
        (nil)))

(insn 154 153 158 15 arch/arm/vfp/vfpdouble.c:610 (set (reg:SI 191)
        (const_int 1021 [0x3fd])) 167 {*arm_movsi_insn} (nil))

(insn 158 154 159 15 arch/arm/vfp/vfpdouble.c:610 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 188 [ D.6036 ])
            (reg:SI 191))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 191)
        (expr_list:REG_EQUAL (compare:CC (reg:SI 188 [ D.6036 ])
                (const_int 1021 [0x3fd]))
            (nil))))

(jump_insn 159 158 160 15 arch/arm/vfp/vfpdouble.c:610 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 289)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 15 -> ( 16 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 183 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 183 188
;; rd  out 	(54)
7, 16, 24, 29, 30, 35, 36, 81, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 611, 612, 613, 615


;; Succ edge  16 [50.0%]  (fallthru)
;; Succ edge  36 [50.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u149(11){ }u150(13){ }u151(25){ }u152(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 183 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 142 195 196 201 234 235 236
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 183 188
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 138 142 195 196 201 234 235 236
;; live  kill	 14 [lr] 24 [cc] 236
;; rd  in  	(54)
7, 16, 24, 29, 30, 35, 36, 81, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 611, 612, 613, 615
;; rd  gen 	(11)
3, 12, 103, 534, 548, 589, 590, 591, 616, 617, 618
;; rd  kill	(38)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 37, 38, 39, 40, 41, 534, 546, 547, 548, 549, 550, 551, 552, 553, 554, 589, 590, 591, 616, 617

;; Pred edge  15 [50.0%]  (fallthru)
(note 160 159 162 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 162 160 163 16 arch/arm/vfp/vfpdouble.c:611 (set (reg:SI 195)
        (minus:SI (const_int 1072 [0x430])
            (reg:SI 188 [ D.6036 ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 188 [ D.6036 ])
        (nil)))

(insn 163 162 164 16 arch/arm/vfp/vfpdouble.c:611 (set (reg/v:SI 138 [ shift ])
        (plus:SI (reg:SI 195)
            (const_int 14 [0xe]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 195)
        (expr_list:REG_EQUAL (minus:SI (const_int 1086 [0x43e])
                (reg:SI 188 [ D.6036 ]))
            (nil))))

(insn 164 163 165 16 arch/arm/vfp/vfpdouble.c:614 (parallel [
            (set (reg:DI 196)
                (plus:DI (reg/v:DI 135 [ significand ])
                    (reg/v:DI 135 [ significand ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 165 164 166 16 arch/arm/vfp/vfpdouble.c:614 (set (reg:DI 0 r0)
        (reg:DI 196)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 196)
        (nil)))

(insn 166 165 167 16 arch/arm/vfp/vfpdouble.c:614 (set (reg:SI 2 r2)
        (reg/v:SI 138 [ shift ])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 167 166 349 16 arch/arm/vfp/vfpdouble.c:614 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_UNUSED (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 349 167 170 16 arch/arm/vfp/vfpdouble.c:614 (set (reg/v:SI 142 [ d ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 170 349 171 16 arch/arm/vfp/vfpdouble.c:615 (set (reg:SI 201)
        (minus:SI (const_int 65 [0x41])
            (reg/v:SI 138 [ shift ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ shift ])
        (nil)))

(insn 171 170 172 16 arch/arm/vfp/vfpdouble.c:615 (set (reg:DI 0 r0)
        (reg/v:DI 135 [ significand ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v:DI 135 [ significand ])
        (nil)))

(insn 172 171 173 16 arch/arm/vfp/vfpdouble.c:615 (set (reg:SI 2 r2)
        (reg:SI 201)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 201)
        (nil)))

(call_insn/u 173 172 351 16 arch/arm/vfp/vfpdouble.c:615 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 351 173 352 16 arch/arm/vfp/vfpdouble.c:615 (set (reg:SI 234)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 352 351 353 16 arch/arm/vfp/vfpdouble.c:615 (set (reg:SI 235 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 353 352 354 16 arch/arm/vfp/vfpdouble.c:615 (clobber (reg:DI 236 [ rem ])) -1 (nil))

(insn 354 353 355 16 arch/arm/vfp/vfpdouble.c:615 (set (subreg:SI (reg:DI 236 [ rem ]) 0)
        (reg:SI 234)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 234)
        (nil)))

(insn 355 354 176 16 arch/arm/vfp/vfpdouble.c:615 (set (subreg:SI (reg:DI 236 [ rem ]) 4)
        (reg:SI 235 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 235 [+4 ])
        (nil)))

(insn 176 355 177 16 arch/arm/vfp/vfpdouble.c:617 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 177 176 178 16 arch/arm/vfp/vfpdouble.c:617 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 191)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 16 -> ( 17 20)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 183 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 183 236
;; rd  out 	(62)
3, 12, 24, 29, 30, 35, 36, 103, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  20 [50.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u180(11){ }u181(13){ }u182(25){ }u183(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc] 203
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; live  gen 	 24 [cc] 203
;; live  kill	
;; rd  in  	(62)
3, 12, 24, 29, 30, 35, 36, 103, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(2)
102, 592
;; rd  kill	(1)
592

;; Pred edge  16 [50.0%]  (fallthru)
(note 178 177 179 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 179 178 180 17 arch/arm/vfp/vfpdouble.c:619 (set (reg:SI 203)
        (and:SI (reg/v:SI 142 [ d ])
            (const_int 1 [0x1]))) 67 {*arm_andsi3_insn} (nil))

(insn 180 179 181 17 arch/arm/vfp/vfpdouble.c:619 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 203)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 203)
        (nil)))

(jump_insn 181 180 182 17 arch/arm/vfp/vfpdouble.c:619 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 186)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; rd  out 	(63)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  18 [50.0%]  (fallthru)
;; Succ edge  19 [50.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u187(11){ }u188(13){ }u189(25){ }u190(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 136
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
533
;; rd  kill	(4)
530, 531, 532, 533

;; Pred edge  17 [50.0%]  (fallthru)
(note 182 181 183 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 183 182 382 18 arch/arm/vfp/vfpdouble.c:620 (set (reg/v:DI 136 [ incr ])
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (nil))

(jump_insn 382 183 383 18 (set (pc)
        (label_ref 214)) -1 (nil))
;; End of basic block 18 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; rd  out 	(64)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  24 [100.0%] 

(barrier 383 382 186)

;; Start of basic block ( 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u191(11){ }u192(13){ }u193(25){ }u194(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 183
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 183 236
;; live  gen 	 136
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
530
;; rd  kill	(4)
530, 531, 532, 533

;; Pred edge  17 [50.0%] 
(code_label 186 383 187 19 325 "" [1 uses])

(note 187 186 188 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 188 187 384 19 arch/arm/vfp/vfpdouble.c:618 (set (reg/v:DI 136 [ incr ])
        (reg:DI 183)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 183)
        (expr_list:REG_EQUAL (const_int -9223372036854775808 [0x8000000000000000])
            (nil))))

(jump_insn 384 188 385 19 (set (pc)
        (label_ref 214)) -1 (nil))
;; End of basic block 19 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; rd  out 	(64)
3, 12, 24, 29, 30, 35, 36, 102, 117, 118, 523, 524, 526, 527, 530, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  24 [100.0%] 

(barrier 385 384 191)

;; Start of basic block ( 16) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u196(11){ }u197(13){ }u198(25){ }u199(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(62)
3, 12, 24, 29, 30, 35, 36, 103, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
101
;; rd  kill	(0)


;; Pred edge  16 [50.0%] 
(code_label 191 385 192 20 324 "" [1 uses])

(note 192 191 193 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 193 192 194 20 arch/arm/vfp/vfpdouble.c:621 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 12582912 [0xc00000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 194 193 195 20 arch/arm/vfp/vfpdouble.c:621 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 20 -> ( 23 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; rd  out 	(62)
3, 12, 24, 29, 30, 35, 36, 101, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  23 [28.0%] 
;; Succ edge  21 [72.0%]  (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u202(11){ }u203(13){ }u204(25){ }u205(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140
;; lr  def 	 24 [cc] 205 207 208 209 210
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 146 236
;; live  gen 	 24 [cc] 205 207 208 209 210
;; live  kill	
;; rd  in  	(62)
3, 12, 24, 29, 30, 35, 36, 101, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(6)
98, 593, 594, 595, 596, 597
;; rd  kill	(5)
593, 594, 595, 596, 597

;; Pred edge  20 [72.0%]  (fallthru)
(note 195 194 196 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 196 195 197 21 arch/arm/vfp/vfpdouble.c:623 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.6039 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 197 196 199 21 arch/arm/vfp/vfpdouble.c:623 (set (reg:SI 205)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 199 197 200 21 arch/arm/vfp/vfpdouble.c:623 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ rmode ])
        (nil)))

(insn 200 199 202 21 arch/arm/vfp/vfpdouble.c:623 (set (reg:SI 207)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 202 200 203 21 arch/arm/vfp/vfpdouble.c:623 (set (reg:SI 208)
        (xor:SI (reg:SI 205)
            (reg:SI 207))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 207)
        (expr_list:REG_DEAD (reg:SI 205)
            (nil))))

(insn 203 202 204 21 arch/arm/vfp/vfpdouble.c:623 (set (reg:QI 209)
        (subreg:QI (reg:SI 208) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 208)
        (nil)))

(insn 204 203 205 21 arch/arm/vfp/vfpdouble.c:623 (set (reg:SI 210)
        (zero_extend:SI (reg:QI 209))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 209)
        (nil)))

(insn 205 204 206 21 arch/arm/vfp/vfpdouble.c:623 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 210)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 210)
        (nil)))

(jump_insn 206 205 207 21 arch/arm/vfp/vfpdouble.c:623 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 21 -> ( 22 23)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; rd  out 	(67)
3, 12, 24, 29, 30, 35, 36, 98, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  22 [50.0%]  (fallthru)
;; Succ edge  23 [50.0%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u216(11){ }u217(13){ }u218(25){ }u219(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 136
;; live  kill	
;; rd  in  	(67)
3, 12, 24, 29, 30, 35, 36, 98, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
532
;; rd  kill	(4)
530, 531, 532, 533

;; Pred edge  21 [50.0%]  (fallthru)
(note 207 206 208 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 208 207 386 22 arch/arm/vfp/vfpdouble.c:624 (set (reg/v:DI 136 [ incr ])
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(jump_insn 386 208 387 22 (set (pc)
        (label_ref 214)) -1 (nil))
;; End of basic block 22 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; rd  out 	(68)
3, 12, 24, 29, 30, 35, 36, 98, 117, 118, 523, 524, 526, 527, 532, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  24 [100.0%] 

(barrier 387 386 211)

;; Start of basic block ( 21 20) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u220(11){ }u221(13){ }u222(25){ }u223(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 136
;; live  kill	
;; rd  in  	(68)
3, 12, 24, 29, 30, 35, 36, 98, 101, 117, 118, 523, 524, 526, 527, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
531
;; rd  kill	(4)
530, 531, 532, 533

;; Pred edge  21 [50.0%] 
;; Pred edge  20 [28.0%] 
(code_label 211 387 212 23 327 "" [2 uses])

(note 212 211 213 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 213 212 214 23 arch/arm/vfp/vfpdouble.c:622 (set (reg/v:DI 136 [ incr ])
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))
;; End of basic block 23 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; rd  out 	(69)
3, 12, 24, 29, 30, 35, 36, 98, 101, 117, 118, 523, 524, 526, 527, 531, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 23 19 18 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u224(11){ }u225(13){ }u226(25){ }u227(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 236
;; lr  def 	 24 [cc] 211 213
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 146 236
;; live  gen 	 24 [cc] 211 213
;; live  kill	 24 [cc]
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 98, 101, 102, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(3)
79, 599, 600
;; rd  kill	(3)
598, 599, 600

;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  19 [100.0%] 
;; Pred edge  18 [100.0%] 
;; Pred edge  22 [100.0%] 
(code_label 214 213 215 24 326 "" [3 uses])

(note 215 214 217 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 217 215 218 24 arch/arm/vfp/vfpdouble.c:627 (set (reg:QI 211)
        (const_int 0 [0x0])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 218 217 219 24 arch/arm/vfp/vfpdouble.c:627 (parallel [
            (set (reg:DI 213)
                (plus:DI (reg/v:DI 136 [ incr ])
                    (reg:DI 236 [ rem ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 136 [ incr ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 219 218 220 24 arch/arm/vfp/vfpdouble.c:627 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 236 [ rem ]) 4)
            (subreg:SI (reg:DI 213) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 220 219 341 24 arch/arm/vfp/vfpdouble.c:627 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 229)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 24 -> ( 27 25)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  27 [50.0%] 
;; Succ edge  25 [50.0%]  (fallthru)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u233(11){ }u234(13){ }u235(25){ }u236(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; live  gen 	
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  24 [50.0%]  (fallthru)
(note 341 220 222 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(jump_insn 222 341 342 25 arch/arm/vfp/vfpdouble.c:627 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 232)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 25 -> ( 28 26)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  28 [71.0%] 
;; Succ edge  26 [29.0%]  (fallthru)

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u238(11){ }u239(13){ }u240(25){ }u241(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 213 236
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 213 236
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
78
;; rd  kill	(0)


;; Pred edge  25 [29.0%]  (fallthru)
(note 342 222 223 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 223 342 224 26 arch/arm/vfp/vfpdouble.c:627 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 236 [ rem ]) 0)
            (subreg:SI (reg:DI 213) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 213)
        (nil)))

(jump_insn 224 223 229 26 arch/arm/vfp/vfpdouble.c:627 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 232)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 26 -> ( 27 28)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 78, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  27 [50.0%]  (fallthru)
;; Succ edge  28 [50.0%] 

;; Start of basic block ( 24 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u245(11){ }u246(13){ }u247(25){ }u248(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 211
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 211
;; live  kill	
;; rd  in  	(75)
3, 12, 24, 29, 30, 35, 36, 78, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
598
;; rd  kill	(2)
598, 599

;; Pred edge  24 [50.0%] 
;; Pred edge  26 [50.0%]  (fallthru)
(code_label 229 224 345 27 330 "" [1 uses])

(note 345 229 231 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 231 345 232 27 arch/arm/vfp/vfpdouble.c:627 (set (reg:QI 211)
        (const_int 1 [0x1])) 178 {*arm_movqi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 27 -> ( 28)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; rd  out 	(75)
3, 12, 24, 29, 30, 35, 36, 78, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 25 26 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u249(11){ }u250(13){ }u251(25){ }u252(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 211
;; lr  def 	 24 [cc] 216 217 218 219
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 211 236
;; live  gen 	 24 [cc] 216 217 218 219
;; live  kill	
;; rd  in  	(76)
3, 12, 24, 29, 30, 35, 36, 78, 79, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(5)
96, 601, 602, 603, 604
;; rd  kill	(4)
601, 602, 603, 604

;; Pred edge  25 [71.0%] 
;; Pred edge  26 [50.0%] 
;; Pred edge  27 [100.0%]  (fallthru)
(code_label 232 231 346 28 329 "" [2 uses])

(note 346 232 233 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 233 346 234 28 arch/arm/vfp/vfpdouble.c:627 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 142 [ d ])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn 234 233 236 28 arch/arm/vfp/vfpdouble.c:627 (set (reg:SI 216)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 236 234 237 28 arch/arm/vfp/vfpdouble.c:627 (set (reg:SI 217)
        (and:SI (subreg:SI (reg:QI 211) 0)
            (reg:SI 216))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 216)
        (expr_list:REG_DEAD (reg:QI 211)
            (nil))))

(insn 237 236 238 28 arch/arm/vfp/vfpdouble.c:627 (set (reg:QI 218)
        (subreg:QI (reg:SI 217) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 217)
        (nil)))

(insn 238 237 239 28 arch/arm/vfp/vfpdouble.c:627 (set (reg:SI 219)
        (zero_extend:SI (reg:QI 218))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 218)
        (nil)))

(insn 239 238 240 28 arch/arm/vfp/vfpdouble.c:627 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 219)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 219)
        (nil)))

(jump_insn 240 239 241 28 arch/arm/vfp/vfpdouble.c:627 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 243)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; rd  out 	(79)
3, 12, 24, 29, 30, 35, 36, 96, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  29 [50.0%]  (fallthru)
;; Succ edge  30 [50.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u261(11){ }u262(13){ }u263(25){ }u264(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 142
;; live  kill	
;; rd  in  	(79)
3, 12, 24, 29, 30, 35, 36, 96, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
553
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554

;; Pred edge  28 [50.0%]  (fallthru)
(note 241 240 242 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 242 241 243 29 arch/arm/vfp/vfpdouble.c:628 (set (reg/v:SI 142 [ d ])
        (plus:SI (reg/v:SI 142 [ d ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 29 -> ( 30)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; rd  out 	(79)
3, 12, 24, 29, 30, 35, 36, 96, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  30 [100.0%]  (fallthru)

;; Start of basic block ( 28 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u266(11){ }u267(13){ }u268(25){ }u269(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 142
;; lr  def 	 24 [cc] 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 24 [cc] 143
;; live  kill	
;; rd  in  	(80)
3, 12, 24, 29, 30, 35, 36, 96, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(2)
94, 555
;; rd  kill	(1)
555

;; Pred edge  28 [50.0%] 
;; Pred edge  29 [100.0%]  (fallthru)
(code_label 243 242 244 30 328 "" [1 uses])

(note 244 243 245 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 245 244 366 30 arch/arm/vfp/vfpdouble.c:629 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.6039 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 366 245 256 30 arch/arm/vfp/vfpdouble.c:629 discrim 2 (set (reg:SI 143 [ iftmp.141 ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int -2147483648 [0xffffffff80000000])
            (const_int 2147483647 [0x7fffffff]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 256 366 257 30 arch/arm/vfp/vfpdouble.c:629 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 142 [ d ])
            (reg:SI 143 [ iftmp.141 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 143 [ iftmp.141 ])
        (nil)))

(jump_insn 257 256 258 30 arch/arm/vfp/vfpdouble.c:629 discrim 3 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 273)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 30 -> ( 31 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; rd  out 	(81)
3, 12, 24, 29, 30, 35, 36, 94, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  31 [50.0%]  (fallthru)
;; Succ edge  32 [50.0%] 

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u275(11){ }u276(13){ }u277(25){ }u278(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141
;; lr  def 	 24 [cc] 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  gen 	 24 [cc] 141 142
;; live  kill	
;; rd  in  	(81)
3, 12, 24, 29, 30, 35, 36, 94, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(3)
93, 543, 546
;; rd  kill	(15)
540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554

;; Pred edge  30 [50.0%]  (fallthru)
(note 258 257 259 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 259 258 368 31 arch/arm/vfp/vfpdouble.c:630 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.6039 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 368 259 270 31 arch/arm/vfp/vfpdouble.c:630 discrim 2 (set (reg/v:SI 142 [ d ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int -2147483648 [0xffffffff80000000])
            (const_int 2147483647 [0x7fffffff]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 270 368 388 31 arch/arm/vfp/vfpdouble.c:631 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(jump_insn 388 270 389 31 (set (pc)
        (label_ref 281)) -1 (nil))
;; End of basic block 31 -> ( 34)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; rd  out 	(80)
3, 12, 24, 29, 30, 35, 36, 93, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 543, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  34 [100.0%] 

(barrier 389 388 273)

;; Start of basic block ( 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u282(11){ }u283(13){ }u284(25){ }u285(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 236
;; lr  def 	 24 [cc] 220
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146 236
;; live  gen 	 24 [cc] 220
;; live  kill	
;; rd  in  	(81)
3, 12, 24, 29, 30, 35, 36, 94, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(2)
92, 605
;; rd  kill	(2)
605, 606

;; Pred edge  30 [50.0%] 
(code_label 273 389 274 32 333 "" [1 uses])

(note 274 273 275 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 275 274 276 32 arch/arm/vfp/vfpdouble.c:632 (set (reg:SI 220 [ rem ])
        (subreg:SI (reg:DI 236 [ rem ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 276 275 277 32 arch/arm/vfp/vfpdouble.c:632 (set (reg:SI 220 [ rem ])
        (ior:SI (reg:SI 220 [ rem ])
            (subreg:SI (reg:DI 236 [ rem ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 236 [ rem ])
        (nil)))

(insn 277 276 278 32 arch/arm/vfp/vfpdouble.c:632 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 220 [ rem ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 220 [ rem ])
        (nil)))

(jump_insn 278 277 279 32 arch/arm/vfp/vfpdouble.c:632 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 281)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 32 -> ( 33 34)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; rd  out 	(82)
3, 12, 24, 29, 30, 35, 36, 92, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  33 [50.0%]  (fallthru)
;; Succ edge  34 [50.0%] 

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u291(11){ }u292(13){ }u293(25){ }u294(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  gen 	 141
;; live  kill	
;; rd  in  	(82)
3, 12, 24, 29, 30, 35, 36, 92, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
542
;; rd  kill	(6)
540, 541, 542, 543, 544, 545

;; Pred edge  32 [50.0%]  (fallthru)
(note 279 278 280 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 280 279 281 33 arch/arm/vfp/vfpdouble.c:633 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; rd  out 	(82)
3, 12, 24, 29, 30, 35, 36, 92, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  34 [100.0%]  (fallthru)

;; Start of basic block ( 33 32 31) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u296(11){ }u297(13){ }u298(25){ }u299(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(86)
3, 12, 24, 29, 30, 35, 36, 92, 93, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
91
;; rd  kill	(0)


;; Pred edge  33 [100.0%]  (fallthru)
;; Pred edge  32 [50.0%] 
;; Pred edge  31 [100.0%] 
(code_label 281 280 282 34 336 "" [2 uses])

(note 282 281 283 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 283 282 284 34 arch/arm/vfp/vfpdouble.c:635 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.6039 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.6039 ])
        (nil)))

(jump_insn 284 283 285 34 arch/arm/vfp/vfpdouble.c:635 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 324)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 34 -> ( 35 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(85)
3, 12, 24, 29, 30, 35, 36, 91, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  35 [50.0%]  (fallthru)
;; Succ edge  44 [50.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u302(11){ }u303(13){ }u304(25){ }u305(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  gen 	 142
;; live  kill	
;; rd  in  	(85)
3, 12, 24, 29, 30, 35, 36, 91, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 548, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
552
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554

;; Pred edge  34 [50.0%]  (fallthru)
(note 285 284 286 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 286 285 390 35 arch/arm/vfp/vfpdouble.c:636 (set (reg/v:SI 142 [ d ])
        (neg:SI (reg/v:SI 142 [ d ]))) 127 {*arm_negsi2} (nil))

(jump_insn 390 286 391 35 (set (pc)
        (label_ref 324)) -1 (nil))
;; End of basic block 35 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(83)
3, 12, 24, 29, 30, 35, 36, 91, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  44 [100.0%] 

(barrier 391 390 289)

;; Start of basic block ( 15) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u307(11){ }u308(13){ }u309(25){ }u310(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 188
;; lr  def 	 24 [cc] 221 223 224
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 146 188
;; live  gen 	 24 [cc] 221 223 224
;; live  kill	
;; rd  in  	(54)
7, 16, 24, 29, 30, 35, 36, 81, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 611, 612, 613, 615
;; rd  gen 	(4)
90, 607, 608, 609
;; rd  kill	(4)
607, 608, 609, 610

;; Pred edge  15 [50.0%] 
(code_label 289 391 290 36 323 "" [1 uses])

(note 290 289 293 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 293 290 294 36 arch/arm/vfp/vfpdouble.c:639 (set (reg:DI 221 [ D.6036 ])
        (sign_extend:DI (reg:SI 188 [ D.6036 ]))) 140 {*arm_extendsidi2} (expr_list:REG_DEAD (reg:SI 188 [ D.6036 ])
        (nil)))

(insn 294 293 295 36 arch/arm/vfp/vfpdouble.c:639 (set (reg:DI 223)
        (ior:DI (reg/v:DI 135 [ significand ])
            (reg:DI 221 [ D.6036 ]))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 221 [ D.6036 ])
        (expr_list:REG_DEAD (reg/v:DI 135 [ significand ])
            (nil))))

(insn 295 294 296 36 arch/arm/vfp/vfpdouble.c:639 (set (reg:SI 224)
        (subreg:SI (reg:DI 223) 0)) 167 {*arm_movsi_insn} (nil))

(insn 296 295 297 36 arch/arm/vfp/vfpdouble.c:639 (set (reg:SI 224)
        (ior:SI (reg:SI 224)
            (subreg:SI (reg:DI 223) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 223)
        (nil)))

(insn 297 296 298 36 arch/arm/vfp/vfpdouble.c:639 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 224)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 224)
        (nil)))

(jump_insn 298 297 299 36 arch/arm/vfp/vfpdouble.c:639 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 321)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 36 -> ( 37 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 90, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615


;; Succ edge  37 [61.0%]  (fallthru)
;; Succ edge  43 [39.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u319(11){ }u320(13){ }u321(25){ }u322(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; live  gen 	 24 [cc] 141
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 90, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(2)
89, 541
;; rd  kill	(6)
540, 541, 542, 543, 544, 545

;; Pred edge  36 [61.0%]  (fallthru)
(note 299 298 300 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 300 299 301 37 arch/arm/vfp/vfpdouble.c:640 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))

(insn 301 300 302 37 arch/arm/vfp/vfpdouble.c:641 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 302 301 303 37 arch/arm/vfp/vfpdouble.c:641 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 310)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 37 -> ( 38 40)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 89, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615


;; Succ edge  38 [28.0%]  (fallthru)
;; Succ edge  40 [72.0%] 

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u326(11){ }u327(13){ }u328(25){ }u329(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 89, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
88
;; rd  kill	(0)


;; Pred edge  37 [28.0%]  (fallthru)
(note 303 302 304 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 304 303 305 38 arch/arm/vfp/vfpdouble.c:641 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.6039 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.6039 ])
        (nil)))

(jump_insn 305 304 306 38 arch/arm/vfp/vfpdouble.c:641 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 321)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 38 -> ( 39 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 88, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615


;; Succ edge  39 [39.0%]  (fallthru)
;; Succ edge  43 [61.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u332(11){ }u333(13){ }u334(25){ }u335(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  gen 	 142
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 88, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
551
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554

;; Pred edge  38 [39.0%]  (fallthru)
(note 306 305 307 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 307 306 392 39 arch/arm/vfp/vfpdouble.c:642 (set (reg/v:SI 142 [ d ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 392 307 393 39 (set (pc)
        (label_ref 324)) -1 (nil))
;; End of basic block 39 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 88, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615


;; Succ edge  44 [100.0%] 

(barrier 393 392 310)

;; Start of basic block ( 37) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u336(11){ }u337(13){ }u338(25){ }u339(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 89, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
87
;; rd  kill	(0)


;; Pred edge  37 [72.0%] 
(code_label 310 393 311 40 338 "" [1 uses])

(note 311 310 312 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 312 311 313 40 arch/arm/vfp/vfpdouble.c:643 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 8388608 [0x800000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ rmode ])
        (nil)))

(jump_insn 313 312 314 40 arch/arm/vfp/vfpdouble.c:643 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 321)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5321 [0x14c9])
            (nil))))
;; End of basic block 40 -> ( 41 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 87, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615


;; Succ edge  41 [46.8%]  (fallthru)
;; Succ edge  43 [53.2%] 

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u342(11){ }u343(13){ }u344(25){ }u345(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 146
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 87, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
86
;; rd  kill	(0)


;; Pred edge  40 [46.8%]  (fallthru)
(note 314 313 315 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 315 314 316 41 arch/arm/vfp/vfpdouble.c:643 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.6039 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.6039 ])
        (nil)))

(jump_insn 316 315 317 41 arch/arm/vfp/vfpdouble.c:643 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 321)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 41 -> ( 42 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; rd  out 	(57)
7, 16, 24, 29, 30, 35, 36, 86, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615


;; Succ edge  42 [61.0%]  (fallthru)
;; Succ edge  43 [39.0%] 

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u348(11){ }u349(13){ }u350(25){ }u351(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  gen 	 142
;; live  kill	
;; rd  in  	(57)
7, 16, 24, 29, 30, 35, 36, 86, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
550
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554

;; Pred edge  41 [61.0%]  (fallthru)
(note 317 316 318 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 318 317 394 42 arch/arm/vfp/vfpdouble.c:644 (set (reg/v:SI 142 [ d ])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(jump_insn 394 318 395 42 (set (pc)
        (label_ref 324)) -1 (nil))
;; End of basic block 42 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 86, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 541, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615


;; Succ edge  44 [100.0%] 

(barrier 395 394 321)

;; Start of basic block ( 38 41 40 36) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u352(11){ }u353(13){ }u354(25){ }u355(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 146
;; live  gen 	 142
;; live  kill	
;; rd  in  	(61)
7, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 541, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615
;; rd  gen 	(1)
549
;; rd  kill	(9)
546, 547, 548, 549, 550, 551, 552, 553, 554

;; Pred edge  38 [61.0%] 
;; Pred edge  41 [39.0%] 
;; Pred edge  40 [53.2%] 
;; Pred edge  36 [39.0%] 
(code_label 321 395 322 43 337 "" [4 uses])

(note 322 321 323 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 323 322 324 43 arch/arm/vfp/vfpdouble.c:638 (set (reg/v:SI 142 [ d ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 43 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; rd  out 	(62)
7, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 117, 118, 523, 524, 526, 527, 535, 536, 537, 538, 539, 540, 541, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 607, 608, 609, 611, 612, 613, 615


;; Succ edge  44 [100.0%]  (fallthru)

;; Start of basic block ( 43 35 12 34 39 14 42) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u356(11){ }u357(13){ }u358(25){ }u359(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 146
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(105)
3, 7, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 107, 108, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618
;; rd  gen 	(1)
0
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 37, 38, 39, 40, 41

;; Pred edge  43 [100.0%]  (fallthru)
;; Pred edge  35 [100.0%] 
;; Pred edge  12 [100.0%] 
;; Pred edge  34 [50.0%] 
;; Pred edge  39 [100.0%] 
;; Pred edge  14 [100.0%] 
;; Pred edge  42 [100.0%] 
(code_label 324 323 325 44 319 "" [6 uses])

(note 325 324 326 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 326 325 327 44 arch/arm/vfp/vfpdouble.c:650 (set (reg:SI 0 r0)
        (reg/v:SI 142 [ d ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 142 [ d ])
        (nil)))

(insn 327 326 328 44 arch/arm/vfp/vfpdouble.c:650 (set (reg:SI 1 r1)
        (reg/v:SI 146 [ sd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 146 [ sd ])
        (nil)))

(call_insn 328 327 333 44 arch/arm/vfp/vfpdouble.c:650 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_float") [flags 0x41] <function_decl 0x10a9d180 vfp_put_float>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 333 328 339 44 arch/arm/vfp/vfpdouble.c:653 (set (reg/i:SI 0 r0)
        (reg/v:SI 141 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ exceptions ])
        (nil)))

(insn 339 333 0 44 arch/arm/vfp/vfpdouble.c:653 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 44 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(104)
0, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 107, 108, 117, 118, 523, 524, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_ftosiz (vfp_double_ftosiz)[0:170]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_ftosiz

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,1u} r2={2d,1u} r3={3d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{127d,14u,0e} in 2{1 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,3] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d3(1){ }d5(2){ }d8(3){ }d9(11){ }d11(12){ }d12(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 3, 5, 8, 9, 11, 12, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 3, 5, 8, 9, 11, 12, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d9(bb 0 insn -1) }u1(13){ d12(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	
;; rd  in  	(10)
1, 3, 5, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 3, 5, 8, 9, 11, 12, 13, 24, 25
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 13
;;      reg 13 { d12(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 0 insn -1) }
;;      reg 2 { d5(bb 0 insn -1) }
;;      reg 3 { d7(bb 2 insn 12) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u9(0){ d0(bb 2 insn 13) }u10(11){ d9(bb 0 insn -1) }u11(13){ d12(bb 0 insn -1) }u12(14){ d13(bb 0 insn -1) }u13(25){ d24(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 3, 5, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(10)
0, 3, 5, 8, 9, 11, 12, 13, 24, 25
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 13) }
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 14 { d13(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 13:
Processing use of (reg 0 r0) in insn 13:
Processing use of (reg 1 r1) in insn 13:
Processing use of (reg 2 r2) in insn 13:
Processing use of (reg 3 r3) in insn 13:
  Adding insn 12 to worklist


vfp_double_ftosiz

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,1u} r2={2d,1u} r3={3d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{127d,14u,0e} in 2{1 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,3] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	
;; rd  in  	(10)
1, 3, 5, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 12 2 NOTE_INSN_FUNCTION_BEG)

(insn 12 6 13 2 arch/arm/vfp/vfpdouble.c:657 (set (reg:SI 3 r3)
        (const_int 12582912 [0xc00000])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 12 14 2 arch/arm/vfp/vfpdouble.c:657 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_ftosi") [flags 0x3] <function_decl 0x10ad5d80 vfp_double_ftosi>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 3, 5, 8, 9, 11, 12, 13, 24, 25


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_ftoui (vfp_double_ftoui)[0:167]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 81 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 88 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 67 count 88 (    2)


vfp_double_ftoui

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,10u} r1={8d,5u} r2={7d,3u} r3={5d,1u} r11={1d,44u} r12={5d} r13={1d,48u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={36d,31u} r25={1d,44u} r26={1d,43u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={2d,5u} r134={1d,3u} r135={5d,14u,2d} r136={4d,1u} r138={1d,2u} r139={4d,2u} r140={1d,5u} r141={7d,6u} r142={7d,5u} r143={1d,5u,1d} r145={1d,1u} r147={1d,1u} r148={1d,1u} r151={1d,1u,1d} r152={1d,1u} r155={1d,1u} r156={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,3u,1d} r161={1d,2u} r162={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r174={2d,2u} r175={1d,2u} r176={1d,1u} r177={2d,2u} r178={2d,2u} r179={1d,2u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r186={1d,1u} r187={1d,4u,3d} r190={1d,1u} r194={1d,1u} r195={1d,1u} r200={1d,1u} r202={1d,1u} r204={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,2u} r211={2d,2u} r212={1d,1u} r214={1d,2u} r215={2d,2u} r217={1d,1u} r219={1d,1u} r220={2d,3u} r221={1d,1u} r225={1d,1u} r226={1d,1u} r227={3d,7u} 
;;    total ref usage 970{611d,351u,8e} in 172{168 regular + 4 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519
0[0,10] 1[10,8] 2[18,7] 3[25,5] 11[30,1] 12[31,5] 13[36,1] 14[37,5] 15[42,4] 16[46,4] 17[50,4] 18[54,4] 19[58,4] 20[62,4] 21[66,4] 22[70,4] 23[74,4] 24[78,36] 25[114,1] 26[115,1] 27[116,4] 28[120,4] 29[124,4] 30[128,4] 31[132,4] 32[136,4] 33[140,4] 34[144,4] 35[148,4] 36[152,4] 37[156,4] 38[160,4] 39[164,4] 40[168,4] 41[172,4] 42[176,4] 43[180,4] 44[184,4] 45[188,4] 46[192,4] 47[196,4] 48[200,4] 49[204,4] 50[208,4] 51[212,4] 52[216,4] 53[220,4] 54[224,4] 55[228,4] 56[232,4] 57[236,4] 58[240,4] 59[244,4] 60[248,4] 61[252,4] 62[256,4] 63[260,4] 64[264,4] 65[268,4] 66[272,4] 67[276,4] 68[280,4] 69[284,4] 70[288,4] 71[292,4] 72[296,4] 73[300,4] 74[304,4] 75[308,4] 76[312,4] 77[316,4] 78[320,4] 79[324,4] 80[328,4] 81[332,4] 82[336,4] 83[340,4] 84[344,4] 85[348,4] 86[352,4] 87[356,4] 88[360,4] 89[364,4] 90[368,4] 91[372,4] 92[376,4] 93[380,4] 94[384,4] 95[388,4] 96[392,4] 97[396,4] 98[400,4] 99[404,4] 100[408,4] 101[412,4] 102[416,4] 103[420,4] 104[424,4] 105[428,4] 106[432,4] 107[436,4] 108[440,4] 109[444,4] 110[448,4] 111[452,4] 112[456,4] 113[460,4] 114[464,4] 115[468,4] 116[472,4] 117[476,4] 118[480,4] 119[484,4] 120[488,4] 121[492,4] 122[496,4] 123[500,4] 124[504,4] 125[508,4] 126[512,4] 127[516,4] 133[520,2] 134[522,1] 135[523,5] 136[528,4] 138[532,1] 139[533,4] 140[537,1] 141[538,7] 142[545,7] 143[552,1] 145[553,1] 147[554,1] 148[555,1] 151[556,1] 152[557,1] 155[558,1] 156[559,1] 158[560,1] 159[561,1] 160[562,1] 161[563,1] 162[564,1] 165[565,1] 166[566,1] 167[567,1] 168[568,1] 169[569,1] 174[570,2] 175[572,1] 176[573,1] 177[574,2] 178[576,2] 179[578,1] 180[579,1] 181[580,1] 182[581,1] 186[582,1] 187[583,1] 190[584,1] 194[585,1] 195[586,1] 200[587,1] 202[588,1] 204[589,1] 206[590,1] 207[591,1] 208[592,1] 209[593,1] 210[594,1] 211[595,2] 212[597,1] 214[598,1] 215[599,2] 217[601,1] 219[602,1] 220[603,2] 221[605,1] 225[606,1] 226[607,1] 227[608,3] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d9(0){ }d17(1){ }d24(2){ }d29(3){ }d30(11){ }d35(12){ }d36(13){ }d41(14){ }d114(25){ }d115(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
9, 17, 24, 29, 30, 35, 36, 41, 114, 115
;; rd  kill	(44)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 114, 115
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
9, 17, 24, 29, 30, 35, 36, 41, 114, 115

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d30(bb 0 insn -1) }u1(13){ d36(bb 0 insn -1) }u2(25){ d114(bb 0 insn -1) }u3(26){ d115(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 143 145 147 148 151 152 155 156 158 159 160 161 162 165 166 167 168 217 219 220
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 135 143 145 147 148 151 152 155 156 158 159 160 161 162 165 166 167 168 217 219 220
;; live  kill	 14 [lr]
;; rd  in  	(10)
9, 17, 24, 29, 30, 35, 36, 41, 114, 115
;; rd  gen 	(25)
7, 16, 111, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;; rd  kill	(45)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 37, 38, 39, 40, 41, 522, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603, 604
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148 160 161
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148 160 161
;; rd  out 	(32)
7, 16, 24, 29, 30, 35, 36, 111, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d9(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 2 { d24(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 5
;;      reg 3 { d29(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 9
;;      reg 147 { d554(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 10
;;      reg 13 { d36(bb 0 insn -1) }
;;      reg 0 { d8(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 11
;;      reg 0 { d7(bb 2 insn 10) }
;;      reg 1 { d16(bb 2 insn 10) }
;;   UD chains for insn luid 6 uid 12
;;      reg 143 { d552(bb 2 insn 11) }
;;   UD chains for insn luid 7 uid 14
;;      reg 217 { d601(bb 2 insn 12) }
;;   UD chains for insn luid 8 uid 15
;;      reg 151 { d556(bb 2 insn 14) }
;;   UD chains for insn luid 9 uid 16
;;      reg 152 { d557(bb 2 insn 15) }
;;   eq_note reg 151 { }
;;   UD chains for insn luid 10 uid 17
;;      reg 143 { d552(bb 2 insn 11) }
;;   UD chains for insn luid 11 uid 18
;;      reg 143 { d552(bb 2 insn 11) }
;;   UD chains for insn luid 12 uid 19
;;      reg 155 { d558(bb 2 insn 17) }
;;      reg 220 { d604(bb 2 insn 18) }
;;   UD chains for insn luid 13 uid 20
;;      reg 143 { d552(bb 2 insn 11) }
;;   UD chains for insn luid 14 uid 21
;;      reg 220 { d603(bb 2 insn 19) }
;;   UD chains for insn luid 16 uid 22
;;      reg 135 read/write { d523(bb 2 insn 342) }
;;      reg 219 { d602(bb 2 insn 20) }
;;   UD chains for insn luid 17 uid 23
;;      reg 135 { d527(bb 2 insn 22) d523(bb 2 insn 342) }
;;      reg 135 read/write { d527(bb 2 insn 22) d523(bb 2 insn 342) }
;;      reg 156 { d559(bb 2 insn 21) }
;;   UD chains for insn luid 18 uid 24
;;      reg 135 read/write { d527(bb 2 insn 22) d526(bb 2 insn 23) d523(bb 2 insn 342) }
;;      reg 220 { d603(bb 2 insn 19) }
;;   UD chains for insn luid 20 uid 26
;;      reg 159 { d561(bb 2 insn 25) }
;;   UD chains for insn luid 21 uid 27
;;      reg 134 { d522(bb 2 insn 16) }
;;   UD chains for insn luid 22 uid 28
;;      reg 158 { d560(bb 2 insn 26) }
;;   UD chains for insn luid 23 uid 29
;;      reg 160 { d562(bb 2 insn 27) }
;;      reg 161 { d563(bb 2 insn 28) }
;;   UD chains for insn luid 24 uid 30
;;      reg 24 { d112(bb 2 insn 29) }
;;   UD chains for insn luid 25 uid 33
;;      reg 160 { d562(bb 2 insn 27) }
;;   UD chains for insn luid 26 uid 34
;;      reg 24 { d84(bb 2 insn 33) }
;;   UD chains for insn luid 27 uid 36
;;      reg 162 { d564(bb 2 insn 30) }
;;      reg 165 { d565(bb 2 insn 34) }
;;   UD chains for insn luid 28 uid 37
;;      reg 166 { d566(bb 2 insn 36) }
;;   UD chains for insn luid 29 uid 38
;;      reg 167 { d567(bb 2 insn 37) }
;;   UD chains for insn luid 30 uid 39
;;      reg 168 { d568(bb 2 insn 38) }
;;   UD chains for insn luid 31 uid 40
;;      reg 24 { d111(bb 2 insn 39) }

( 2 )->[3]->( 8 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u44(11){ d30(bb 0 insn -1) }u45(13){ d36(bb 0 insn -1) }u46(25){ d114(bb 0 insn -1) }u47(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 135 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 135 169
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 111, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;; rd  gen 	(2)
524, 569
;; rd  kill	(6)
523, 524, 525, 526, 527, 569
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; rd  out 	(33)
7, 16, 24, 29, 30, 35, 36, 111, 114, 115, 522, 524, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 43
;;      reg 135 { d525(bb 2 insn 24) }
;;      reg 169 { d569(bb 3 insn 42) }
;;   eq_note reg 135 { }

( 2 )->[4]->( 5 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u51(11){ d30(bb 0 insn -1) }u52(13){ d36(bb 0 insn -1) }u53(25){ d114(bb 0 insn -1) }u54(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148 160 161
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148 160 161
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 111, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;; rd  gen 	(1)
83
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; rd  out 	(32)
7, 16, 24, 29, 30, 35, 36, 83, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 52
;;      reg 160 { d562(bb 2 insn 27) }
;;      reg 161 { d563(bb 2 insn 28) }
;;   eq_note reg 160 { }
;;   UD chains for insn luid 1 uid 53
;;      reg 24 { d83(bb 4 insn 52) }

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u59(11){ d30(bb 0 insn -1) }u60(13){ d36(bb 0 insn -1) }u61(25){ d114(bb 0 insn -1) }u62(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 174
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 24 [cc] 174
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 83, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;; rd  gen 	(2)
110, 570
;; rd  kill	(2)
570, 571
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; rd  out 	(33)
7, 16, 24, 29, 30, 35, 36, 110, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 55
;;      reg 135 { d525(bb 2 insn 24) }
;;   UD chains for insn luid 1 uid 56
;;      reg 135 { d525(bb 2 insn 24) }
;;      reg 174 { d571(bb 5 insn 55) }
;;   UD chains for insn luid 2 uid 57
;;      reg 174 { d570(bb 5 insn 56) }
;;   UD chains for insn luid 3 uid 58
;;      reg 24 { d110(bb 5 insn 57) }

( 5 )->[6]->( 11 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u68(11){ d30(bb 0 insn -1) }u69(13){ d36(bb 0 insn -1) }u70(25){ d114(bb 0 insn -1) }u71(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 139
;; live  kill	
;; rd  in  	(33)
7, 16, 24, 29, 30, 35, 36, 110, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 601, 602, 603
;; rd  gen 	(1)
536
;; rd  kill	(4)
533, 534, 535, 536
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; rd  out 	(34)
7, 16, 24, 29, 30, 35, 36, 110, 114, 115, 522, 525, 536, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }

( 5 )->[7]->( 11 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u72(11){ d30(bb 0 insn -1) }u73(13){ d36(bb 0 insn -1) }u74(25){ d114(bb 0 insn -1) }u75(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 139 175 176 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 24 [cc] 139 175 176 177
;; live  kill	
;; rd  in  	(33)
7, 16, 24, 29, 30, 35, 36, 110, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 601, 602, 603
;; rd  gen 	(5)
109, 534, 572, 573, 574
;; rd  kill	(8)
533, 534, 535, 536, 572, 573, 574, 575
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; rd  out 	(37)
7, 16, 24, 29, 30, 35, 36, 109, 114, 115, 522, 525, 534, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 574, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 66
;;      reg 135 { d525(bb 2 insn 24) }
;;      reg 176 { d573(bb 7 insn 65) }
;;   eq_note reg 135 { }
;;   UD chains for insn luid 2 uid 67
;;      reg 175 { d572(bb 7 insn 66) }
;;   UD chains for insn luid 3 uid 68
;;      reg 175 { d572(bb 7 insn 66) }
;;      reg 177 { d575(bb 7 insn 67) }
;;   UD chains for insn luid 4 uid 69
;;      reg 177 { d574(bb 7 insn 68) }
;;   UD chains for insn luid 5 uid 333
;;      reg 24 { d109(bb 7 insn 69) }

( 4 3 )->[8]->( 10 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u84(11){ d30(bb 0 insn -1) }u85(13){ d36(bb 0 insn -1) }u86(25){ d114(bb 0 insn -1) }u87(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(35)
7, 16, 24, 29, 30, 35, 36, 83, 111, 114, 115, 522, 524, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603
;; rd  gen 	(1)
108
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; rd  out 	(34)
7, 16, 24, 29, 30, 35, 36, 108, 114, 115, 522, 524, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 82
;;      reg 134 { d522(bb 2 insn 16) }
;;   UD chains for insn luid 1 uid 83
;;      reg 24 { d108(bb 8 insn 82) }

( 8 )->[9]->( 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u90(11){ d30(bb 0 insn -1) }u91(13){ d36(bb 0 insn -1) }u92(25){ d114(bb 0 insn -1) }u93(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 139
;; live  kill	
;; rd  in  	(34)
7, 16, 24, 29, 30, 35, 36, 108, 114, 115, 522, 524, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603
;; rd  gen 	(1)
535
;; rd  kill	(4)
533, 534, 535, 536
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; rd  out 	(35)
7, 16, 24, 29, 30, 35, 36, 108, 114, 115, 522, 524, 525, 535, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }

( 8 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u94(11){ d30(bb 0 insn -1) }u95(13){ d36(bb 0 insn -1) }u96(25){ d114(bb 0 insn -1) }u97(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 139 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 24 [cc] 139 178
;; live  kill	
;; rd  in  	(34)
7, 16, 24, 29, 30, 35, 36, 108, 114, 115, 522, 524, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603
;; rd  gen 	(3)
107, 533, 576
;; rd  kill	(6)
533, 534, 535, 536, 576, 577
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; rd  out 	(36)
7, 16, 24, 29, 30, 35, 36, 107, 114, 115, 522, 524, 525, 533, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 90
;;      reg 135 { d525(bb 2 insn 24) d524(bb 3 insn 43) }
;;   UD chains for insn luid 1 uid 91
;;      reg 135 { d525(bb 2 insn 24) d524(bb 3 insn 43) }
;;      reg 178 { d577(bb 10 insn 90) }
;;   UD chains for insn luid 2 uid 92
;;      reg 178 { d576(bb 10 insn 91) }
;;   UD chains for insn luid 3 uid 335
;;      reg 24 { d107(bb 10 insn 92) }

( 10 7 6 9 )->[11]->( 12 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u103(11){ d30(bb 0 insn -1) }u104(13){ d36(bb 0 insn -1) }u105(25){ d114(bb 0 insn -1) }u106(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 141 179 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  gen 	 24 [cc] 141 179 180
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 107, 108, 109, 110, 114, 115, 522, 524, 525, 533, 534, 535, 536, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 601, 602, 603
;; rd  gen 	(4)
105, 539, 578, 579
;; rd  kill	(9)
538, 539, 540, 541, 542, 543, 544, 578, 579
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 143 145 148
;; rd  out 	(46)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 103
;;      reg 139 { d536(bb 6 insn 60) d535(bb 9 insn 85) d534(bb 7 insn 333) d533(bb 10 insn 335) }
;;   UD chains for insn luid 1 uid 104
;;      reg 179 { d578(bb 11 insn 103) }
;;   UD chains for insn luid 2 uid 337
;;      reg 24 { d106(bb 11 insn 104) }
;;      reg 179 { d578(bb 11 insn 103) }
;;   UD chains for insn luid 3 uid 115
;;      reg 139 { d536(bb 6 insn 60) d535(bb 9 insn 85) d534(bb 7 insn 333) d533(bb 10 insn 335) }
;;   UD chains for insn luid 4 uid 116
;;      reg 180 { d579(bb 11 insn 115) }
;;   UD chains for insn luid 5 uid 117
;;      reg 24 { d105(bb 11 insn 116) }

( 11 )->[12]->( 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u114(11){ d30(bb 0 insn -1) }u115(13){ d36(bb 0 insn -1) }u116(25){ d114(bb 0 insn -1) }u117(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 145 148
;; live  gen 	 133
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 601, 602, 603
;; rd  gen 	(1)
521
;; rd  kill	(2)
520, 521
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; rd  out 	(47)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 601, 602, 603
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }

( 11 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u118(11){ d30(bb 0 insn -1) }u119(13){ d36(bb 0 insn -1) }u120(25){ d114(bb 0 insn -1) }u121(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 133 181 182 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 143 145 148
;; live  gen 	 133 181 182 221
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 601, 602, 603
;; rd  gen 	(4)
520, 580, 581, 605
;; rd  kill	(5)
520, 521, 580, 581, 605
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; rd  out 	(50)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 520, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 125
;;      reg 143 { d552(bb 2 insn 11) }
;;      reg 182 { d581(bb 13 insn 124) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 2 uid 126
;;      reg 181 { d580(bb 13 insn 125) }
;;   UD chains for insn luid 3 uid 128
;;      reg 221 { d605(bb 13 insn 126) }

( 13 12 )->[14]->( 15 16 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u127(11){ d30(bb 0 insn -1) }u128(13){ d36(bb 0 insn -1) }u129(25){ d114(bb 0 insn -1) }u130(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 186 187
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; live  gen 	 24 [cc] 186 187
;; live  kill	
;; rd  in  	(51)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 601, 602, 603, 605
;; rd  gen 	(3)
82, 582, 583
;; rd  kill	(2)
582, 583
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 145 148 187
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 145 148 187
;; rd  out 	(53)
7, 16, 24, 29, 30, 35, 36, 82, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 133
;;      reg 134 { d522(bb 2 insn 16) }
;;   UD chains for insn luid 2 uid 135
;;      reg 186 { d582(bb 14 insn 131) }
;;      reg 187 { d583(bb 14 insn 133) }
;;   eq_note reg 187 { }
;;   UD chains for insn luid 3 uid 136
;;      reg 24 { d82(bb 14 insn 135) }

( 14 )->[15]->( 44 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u136(11){ d30(bb 0 insn -1) }u137(13){ d36(bb 0 insn -1) }u138(25){ d114(bb 0 insn -1) }u139(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc] 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 145
;; live  gen 	 24 [cc] 141 142
;; live  kill	
;; rd  in  	(53)
7, 16, 24, 29, 30, 35, 36, 82, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 601, 602, 603, 605
;; rd  gen 	(3)
104, 538, 545
;; rd  kill	(14)
538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(54)
7, 16, 24, 29, 30, 35, 36, 104, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 538, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 138
;;      reg 133 { d521(bb 12 insn 119) d520(bb 13 insn 128) }
;;   UD chains for insn luid 2 uid 341
;;      reg 24 { d104(bb 15 insn 138) }

( 14 )->[16]->( 17 36 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u142(11){ d30(bb 0 insn -1) }u143(13){ d36(bb 0 insn -1) }u144(25){ d114(bb 0 insn -1) }u145(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 145 148 187
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 187
;; lr  def 	 24 [cc] 140 190
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 145 148 187
;; live  gen 	 24 [cc] 140 190
;; live  kill	
;; rd  in  	(53)
7, 16, 24, 29, 30, 35, 36, 82, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 601, 602, 603, 605
;; rd  gen 	(3)
81, 537, 584
;; rd  kill	(2)
537, 584
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; rd  out 	(55)
7, 16, 24, 29, 30, 35, 36, 81, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 153
;;      reg 148 { d555(bb 2 insn 5) }
;;   UD chains for insn luid 2 uid 158
;;      reg 187 { d583(bb 14 insn 133) }
;;      reg 190 { d584(bb 16 insn 154) }
;;   eq_note reg 187 { }
;;   UD chains for insn luid 3 uid 159
;;      reg 24 { d81(bb 16 insn 158) }

( 16 )->[17]->( 18 21 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u151(11){ d30(bb 0 insn -1) }u152(13){ d36(bb 0 insn -1) }u153(25){ d114(bb 0 insn -1) }u154(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 187
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 142 194 195 200 225 226 227
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 138 142 194 195 200 225 226 227
;; live  kill	 14 [lr] 24 [cc] 227
;; rd  in  	(55)
7, 16, 24, 29, 30, 35, 36, 81, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 601, 602, 603, 605
;; rd  gen 	(11)
3, 12, 100, 532, 546, 585, 586, 587, 606, 607, 608
;; rd  kill	(36)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 37, 38, 39, 40, 41, 532, 545, 546, 547, 548, 549, 550, 551, 585, 586, 587, 606, 607
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; rd  out 	(63)
3, 12, 24, 29, 30, 35, 36, 100, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 162
;;      reg 187 { d583(bb 14 insn 133) }
;;   UD chains for insn luid 1 uid 163
;;      reg 194 { d585(bb 17 insn 162) }
;;   eq_note reg 187 { }
;;   UD chains for insn luid 2 uid 164
;;      reg 135 { d525(bb 2 insn 24) d524(bb 3 insn 43) }
;;      reg 135 { d525(bb 2 insn 24) d524(bb 3 insn 43) }
;;   UD chains for insn luid 3 uid 165
;;      reg 195 { d586(bb 17 insn 164) }
;;   UD chains for insn luid 4 uid 166
;;      reg 138 { d532(bb 17 insn 163) }
;;   UD chains for insn luid 5 uid 167
;;      reg 13 { d36(bb 0 insn -1) }
;;      reg 0 { d6(bb 17 insn 165) }
;;      reg 1 { d15(bb 17 insn 165) }
;;      reg 2 { d22(bb 17 insn 166) }
;;   UD chains for insn luid 6 uid 324
;;      reg 0 { d5(bb 17 insn 167) }
;;   UD chains for insn luid 7 uid 170
;;      reg 138 { d532(bb 17 insn 163) }
;;   UD chains for insn luid 8 uid 171
;;      reg 135 { d525(bb 2 insn 24) d524(bb 3 insn 43) }
;;   UD chains for insn luid 9 uid 172
;;      reg 200 { d587(bb 17 insn 170) }
;;   UD chains for insn luid 10 uid 173
;;      reg 13 { d36(bb 0 insn -1) }
;;      reg 0 { d4(bb 17 insn 171) }
;;      reg 1 { d13(bb 17 insn 171) }
;;      reg 2 { d20(bb 17 insn 172) }
;;   UD chains for insn luid 11 uid 326
;;      reg 0 { d3(bb 17 insn 173) }
;;   UD chains for insn luid 12 uid 327
;;      reg 1 { d12(bb 17 insn 173) }
;;   UD chains for insn luid 14 uid 329
;;      reg 225 { d606(bb 17 insn 326) }
;;      reg 227 read/write { }
;;   UD chains for insn luid 15 uid 330
;;      reg 226 { d607(bb 17 insn 327) }
;;      reg 227 read/write { d609(bb 17 insn 329) }
;;   UD chains for insn luid 16 uid 176
;;      reg 140 { d537(bb 16 insn 153) }
;;   UD chains for insn luid 17 uid 177
;;      reg 24 { d100(bb 17 insn 176) }

( 17 )->[18]->( 19 20 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u182(11){ d30(bb 0 insn -1) }u183(13){ d36(bb 0 insn -1) }u184(25){ d114(bb 0 insn -1) }u185(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc] 202
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 24 [cc] 202
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 100, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(2)
99, 588
;; rd  kill	(1)
588
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(64)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 179
;;      reg 142 { d546(bb 17 insn 324) }
;;   UD chains for insn luid 1 uid 180
;;      reg 202 { d588(bb 18 insn 179) }
;;   UD chains for insn luid 2 uid 181
;;      reg 24 { d99(bb 18 insn 180) }

( 18 )->[19]->( 25 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u189(11){ d30(bb 0 insn -1) }u190(13){ d36(bb 0 insn -1) }u191(25){ d114(bb 0 insn -1) }u192(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 136
;; live  kill	
;; rd  in  	(64)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
531
;; rd  kill	(4)
528, 529, 530, 531
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; rd  out 	(65)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }

( 18 )->[20]->( 25 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u193(11){ d30(bb 0 insn -1) }u194(13){ d36(bb 0 insn -1) }u195(25){ d114(bb 0 insn -1) }u196(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 136
;; live  kill	
;; rd  in  	(64)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
530
;; rd  kill	(4)
528, 529, 530, 531
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; rd  out 	(65)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 530, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }

( 17 )->[21]->( 24 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u197(11){ d30(bb 0 insn -1) }u198(13){ d36(bb 0 insn -1) }u199(25){ d114(bb 0 insn -1) }u200(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 100, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
98
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; rd  out 	(63)
3, 12, 24, 29, 30, 35, 36, 98, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 193
;;      reg 140 { d537(bb 16 insn 153) }
;;   UD chains for insn luid 1 uid 194
;;      reg 24 { d98(bb 21 insn 193) }

( 21 )->[22]->( 23 24 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u203(11){ d30(bb 0 insn -1) }u204(13){ d36(bb 0 insn -1) }u205(25){ d114(bb 0 insn -1) }u206(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140
;; lr  def 	 24 [cc] 204 206 207 208 209
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; live  gen 	 24 [cc] 204 206 207 208 209
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 98, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(6)
95, 589, 590, 591, 592, 593
;; rd  kill	(5)
589, 590, 591, 592, 593
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(68)
3, 12, 24, 29, 30, 35, 36, 95, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 196
;;      reg 133 { d521(bb 12 insn 119) d520(bb 13 insn 128) }
;;   UD chains for insn luid 1 uid 197
;;      reg 24 { d97(bb 22 insn 196) }
;;   UD chains for insn luid 2 uid 199
;;      reg 140 { d537(bb 16 insn 153) }
;;   UD chains for insn luid 3 uid 200
;;      reg 24 { d96(bb 22 insn 199) }
;;   UD chains for insn luid 4 uid 202
;;      reg 204 { d589(bb 22 insn 197) }
;;      reg 206 { d590(bb 22 insn 200) }
;;   UD chains for insn luid 5 uid 203
;;      reg 207 { d591(bb 22 insn 202) }
;;   UD chains for insn luid 6 uid 204
;;      reg 208 { d592(bb 22 insn 203) }
;;   UD chains for insn luid 7 uid 205
;;      reg 209 { d593(bb 22 insn 204) }
;;   UD chains for insn luid 8 uid 206
;;      reg 24 { d95(bb 22 insn 205) }

( 22 )->[23]->( 25 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u217(11){ d30(bb 0 insn -1) }u218(13){ d36(bb 0 insn -1) }u219(25){ d114(bb 0 insn -1) }u220(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 136
;; live  kill	
;; rd  in  	(68)
3, 12, 24, 29, 30, 35, 36, 95, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
529
;; rd  kill	(4)
528, 529, 530, 531
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; rd  out 	(69)
3, 12, 24, 29, 30, 35, 36, 95, 114, 115, 520, 521, 522, 524, 525, 529, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }

( 22 21 )->[24]->( 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u221(11){ d30(bb 0 insn -1) }u222(13){ d36(bb 0 insn -1) }u223(25){ d114(bb 0 insn -1) }u224(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 136
;; live  kill	
;; rd  in  	(69)
3, 12, 24, 29, 30, 35, 36, 95, 98, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
528
;; rd  kill	(4)
528, 529, 530, 531
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; rd  out 	(70)
3, 12, 24, 29, 30, 35, 36, 95, 98, 114, 115, 520, 521, 522, 524, 525, 528, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }

( 24 20 19 23 )->[25]->( 28 26 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u225(11){ d30(bb 0 insn -1) }u226(13){ d36(bb 0 insn -1) }u227(25){ d114(bb 0 insn -1) }u228(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 227
;; lr  def 	 24 [cc] 210
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  gen 	 24 [cc] 210
;; live  kill	 24 [cc]
;; rd  in  	(75)
3, 12, 24, 29, 30, 35, 36, 95, 98, 99, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(2)
79, 594
;; rd  kill	(1)
594
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 216
;;      reg 136 { d531(bb 19 insn 183) d530(bb 20 insn 188) d529(bb 23 insn 208) d528(bb 24 insn 213) }
;;      reg 227 { d608(bb 17 insn 330) }
;;   UD chains for insn luid 1 uid 217
;;      reg 210 { d594(bb 25 insn 216) }
;;      reg 227 { d608(bb 17 insn 330) }
;;   UD chains for insn luid 2 uid 218
;;      reg 24 { d79(bb 25 insn 217) }

( 25 )->[26]->( 31 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u234(11){ d30(bb 0 insn -1) }u235(13){ d36(bb 0 insn -1) }u236(25){ d114(bb 0 insn -1) }u237(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; live  gen 	
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 220
;;      reg 24 { d79(bb 25 insn 217) }

( 26 )->[27]->( 28 31 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u239(11){ d30(bb 0 insn -1) }u240(13){ d36(bb 0 insn -1) }u241(25){ d114(bb 0 insn -1) }u242(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 210 227
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
78
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 78, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 221
;;      reg 210 { d594(bb 25 insn 216) }
;;      reg 227 { d608(bb 17 insn 330) }
;;   UD chains for insn luid 1 uid 222
;;      reg 24 { d78(bb 27 insn 221) }

( 27 25 )->[28]->( 29 30 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u246(11){ d30(bb 0 insn -1) }u247(13){ d36(bb 0 insn -1) }u248(25){ d114(bb 0 insn -1) }u249(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(75)
3, 12, 24, 29, 30, 35, 36, 78, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
94
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 229
;;      reg 142 { d546(bb 17 insn 324) }
;;   UD chains for insn luid 1 uid 230
;;      reg 24 { d94(bb 28 insn 229) }

( 28 )->[29]->( 32 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u252(11){ d30(bb 0 insn -1) }u253(13){ d36(bb 0 insn -1) }u254(25){ d114(bb 0 insn -1) }u255(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 142
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
551
;; rd  kill	(7)
545, 546, 547, 548, 549, 550, 551
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 232
;;      reg 142 { d546(bb 17 insn 324) }

( 28 )->[30]->( 32 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u257(11){ d30(bb 0 insn -1) }u258(13){ d36(bb 0 insn -1) }u259(25){ d114(bb 0 insn -1) }u260(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 141
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
544
;; rd  kill	(7)
538, 539, 540, 541, 542, 543, 544
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 544, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 237
;;      reg 141 { d539(bb 11 insn 337) }

( 26 27 )->[31]->( 32 34 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u262(11){ d30(bb 0 insn -1) }u263(13){ d36(bb 0 insn -1) }u264(25){ d114(bb 0 insn -1) }u265(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(75)
3, 12, 24, 29, 30, 35, 36, 78, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
93
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 93, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 242
;;      reg 142 { d546(bb 17 insn 324) }
;;   UD chains for insn luid 1 uid 243
;;      reg 24 { d93(bb 31 insn 242) }

( 31 29 30 )->[32]->( 33 34 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u268(11){ d30(bb 0 insn -1) }u269(13){ d36(bb 0 insn -1) }u270(25){ d114(bb 0 insn -1) }u271(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(77)
3, 12, 24, 29, 30, 35, 36, 93, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
92
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145 227
;; rd  out 	(76)
3, 12, 24, 29, 30, 35, 36, 92, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 246
;;      reg 133 { d521(bb 12 insn 119) d520(bb 13 insn 128) }
;;   UD chains for insn luid 1 uid 247
;;      reg 24 { d92(bb 32 insn 246) }

( 32 )->[33]->( 44 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u274(11){ d30(bb 0 insn -1) }u275(13){ d36(bb 0 insn -1) }u276(25){ d114(bb 0 insn -1) }u277(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  gen 	 141 142
;; live  kill	
;; rd  in  	(76)
3, 12, 24, 29, 30, 35, 36, 92, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(2)
543, 550
;; rd  kill	(14)
538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 92, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 543, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 249
;;      reg 141 { d544(bb 30 insn 237) d539(bb 11 insn 337) }

( 31 32 )->[34]->( 35 44 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u279(11){ d30(bb 0 insn -1) }u280(13){ d36(bb 0 insn -1) }u281(25){ d114(bb 0 insn -1) }u282(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 227
;; lr  def 	 24 [cc] 211
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145 227
;; live  gen 	 24 [cc] 211
;; live  kill	
;; rd  in  	(77)
3, 12, 24, 29, 30, 35, 36, 92, 93, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(2)
91, 595
;; rd  kill	(2)
595, 596
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(77)
3, 12, 24, 29, 30, 35, 36, 91, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 255
;;      reg 227 { d608(bb 17 insn 330) }
;;   UD chains for insn luid 1 uid 256
;;      reg 211 { d596(bb 34 insn 255) }
;;      reg 227 { d608(bb 17 insn 330) }
;;   UD chains for insn luid 2 uid 257
;;      reg 211 { d595(bb 34 insn 256) }
;;   UD chains for insn luid 3 uid 258
;;      reg 24 { d91(bb 34 insn 257) }

( 34 )->[35]->( 44 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u288(11){ d30(bb 0 insn -1) }u289(13){ d36(bb 0 insn -1) }u290(25){ d114(bb 0 insn -1) }u291(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  gen 	 141
;; live  kill	
;; rd  in  	(77)
3, 12, 24, 29, 30, 35, 36, 91, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
542
;; rd  kill	(7)
538, 539, 540, 541, 542, 543, 544
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(76)
3, 12, 24, 29, 30, 35, 36, 91, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 260
;;      reg 141 { d544(bb 30 insn 237) d539(bb 11 insn 337) }

( 16 )->[36]->( 37 43 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u293(11){ d30(bb 0 insn -1) }u294(13){ d36(bb 0 insn -1) }u295(25){ d114(bb 0 insn -1) }u296(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 187
;; lr  def 	 24 [cc] 212 214 215
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; live  gen 	 24 [cc] 212 214 215
;; live  kill	
;; rd  in  	(55)
7, 16, 24, 29, 30, 35, 36, 81, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 601, 602, 603, 605
;; rd  gen 	(4)
90, 597, 598, 599
;; rd  kill	(4)
597, 598, 599, 600
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 90, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 267
;;      reg 187 { d583(bb 14 insn 133) }
;;   UD chains for insn luid 1 uid 268
;;      reg 135 { d525(bb 2 insn 24) d524(bb 3 insn 43) }
;;      reg 212 { d597(bb 36 insn 267) }
;;   UD chains for insn luid 2 uid 269
;;      reg 214 { d598(bb 36 insn 268) }
;;   UD chains for insn luid 3 uid 270
;;      reg 214 { d598(bb 36 insn 268) }
;;      reg 215 { d600(bb 36 insn 269) }
;;   UD chains for insn luid 4 uid 271
;;      reg 215 { d599(bb 36 insn 270) }
;;   UD chains for insn luid 5 uid 272
;;      reg 24 { d90(bb 36 insn 271) }

( 36 )->[37]->( 38 40 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u305(11){ d30(bb 0 insn -1) }u306(13){ d36(bb 0 insn -1) }u307(25){ d114(bb 0 insn -1) }u308(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; live  gen 	 24 [cc] 141
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 90, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(2)
89, 541
;; rd  kill	(7)
538, 539, 540, 541, 542, 543, 544
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 89, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 274
;;      reg 141 { d539(bb 11 insn 337) }
;;   UD chains for insn luid 1 uid 275
;;      reg 140 { d537(bb 16 insn 153) }
;;   UD chains for insn luid 2 uid 276
;;      reg 24 { d89(bb 37 insn 275) }

( 37 )->[38]->( 39 43 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u312(11){ d30(bb 0 insn -1) }u313(13){ d36(bb 0 insn -1) }u314(25){ d114(bb 0 insn -1) }u315(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 89, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
88
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 88, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 278
;;      reg 133 { d521(bb 12 insn 119) d520(bb 13 insn 128) }
;;   UD chains for insn luid 1 uid 279
;;      reg 24 { d88(bb 38 insn 278) }

( 38 )->[39]->( 44 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u318(11){ d30(bb 0 insn -1) }u319(13){ d36(bb 0 insn -1) }u320(25){ d114(bb 0 insn -1) }u321(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  gen 	 142
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 88, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
549
;; rd  kill	(7)
545, 546, 547, 548, 549, 550, 551
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(59)
7, 16, 24, 29, 30, 35, 36, 88, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }

( 37 )->[40]->( 41 43 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u322(11){ d30(bb 0 insn -1) }u323(13){ d36(bb 0 insn -1) }u324(25){ d114(bb 0 insn -1) }u325(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 89, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
87
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 87, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 286
;;      reg 140 { d537(bb 16 insn 153) }
;;   UD chains for insn luid 1 uid 287
;;      reg 24 { d87(bb 40 insn 286) }

( 40 )->[41]->( 42 43 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u328(11){ d30(bb 0 insn -1) }u329(13){ d36(bb 0 insn -1) }u330(25){ d114(bb 0 insn -1) }u331(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 87, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
86
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 86, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 289
;;      reg 133 { d521(bb 12 insn 119) d520(bb 13 insn 128) }
;;   UD chains for insn luid 1 uid 290
;;      reg 24 { d86(bb 41 insn 289) }

( 41 )->[42]->( 44 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u334(11){ d30(bb 0 insn -1) }u335(13){ d36(bb 0 insn -1) }u336(25){ d114(bb 0 insn -1) }u337(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  gen 	 141 142
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 86, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(2)
540, 548
;; rd  kill	(14)
538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(59)
7, 16, 24, 29, 30, 35, 36, 86, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 540, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 292
;;      reg 141 { d541(bb 37 insn 274) }

( 38 41 36 40 )->[43]->( 44 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u339(11){ d30(bb 0 insn -1) }u340(13){ d36(bb 0 insn -1) }u341(25){ d114(bb 0 insn -1) }u342(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  gen 	 142
;; live  kill	
;; rd  in  	(62)
7, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
547
;; rd  kill	(7)
545, 546, 547, 548, 549, 550, 551
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(63)
7, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 541, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }

( 43 39 34 35 33 15 42 )->[44]->( 1 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u343(11){ d30(bb 0 insn -1) }u344(13){ d36(bb 0 insn -1) }u345(25){ d114(bb 0 insn -1) }u346(26){ d115(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(98)
3, 7, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 92, 104, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
0
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 37, 38, 39, 40, 41
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(97)
0, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 92, 104, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 25 { d114(bb 0 insn -1) }
;;   reg 26 { d115(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 301
;;      reg 142 { d551(bb 29 insn 232) d550(bb 33 insn 250) d549(bb 39 insn 281) d548(bb 42 insn 293) d547(bb 43 insn 298) d546(bb 17 insn 324) d545(bb 15 insn 341) }
;;   UD chains for insn luid 1 uid 302
;;      reg 145 { d553(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 303
;;      reg 13 { d36(bb 0 insn -1) }
;;      reg 0 { d2(bb 44 insn 301) }
;;      reg 1 { d11(bb 44 insn 302) }
;;   UD chains for insn luid 3 uid 308
;;      reg 141 { d544(bb 30 insn 237) d543(bb 33 insn 249) d542(bb 35 insn 260) d541(bb 37 insn 274) d540(bb 42 insn 292) d539(bb 11 insn 337) d538(bb 15 insn 339) }
;;   UD chains for insn luid 4 uid 314
;;      reg 0 { d0(bb 44 insn 308) }

( 44 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u354(0){ d0(bb 44 insn 308) }u355(11){ d30(bb 0 insn -1) }u356(13){ d36(bb 0 insn -1) }u357(14){ }u358(25){ d114(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(97)
0, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 92, 104, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(97)
0, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 92, 104, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 605, 606, 607, 608
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 44 insn 308) }
;;   reg 11 { d30(bb 0 insn -1) }
;;   reg 13 { d36(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d114(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 40 to worklist
  Adding insn 10 to worklist
  Adding insn 343 to worklist
  Adding insn 53 to worklist
  Adding insn 58 to worklist
  Adding insn 345 to worklist
  Adding insn 347 to worklist
  Adding insn 83 to worklist
  Adding insn 349 to worklist
  Adding insn 117 to worklist
  Adding insn 351 to worklist
  Adding insn 136 to worklist
  Adding insn 353 to worklist
  Adding insn 159 to worklist
  Adding insn 177 to worklist
  Adding insn 328 to worklist
  Adding insn 181 to worklist
  Adding insn 355 to worklist
  Adding insn 357 to worklist
  Adding insn 194 to worklist
  Adding insn 206 to worklist
  Adding insn 359 to worklist
  Adding insn 218 to worklist
  Adding insn 220 to worklist
  Adding insn 222 to worklist
  Adding insn 230 to worklist
  Adding insn 361 to worklist
  Adding insn 363 to worklist
  Adding insn 243 to worklist
  Adding insn 247 to worklist
  Adding insn 365 to worklist
  Adding insn 258 to worklist
  Adding insn 367 to worklist
  Adding insn 272 to worklist
  Adding insn 276 to worklist
  Adding insn 279 to worklist
  Adding insn 369 to worklist
  Adding insn 287 to worklist
  Adding insn 290 to worklist
  Adding insn 371 to worklist
  Adding insn 314 to worklist
  Adding insn 303 to worklist
Finished finding needed instructions:
  Adding insn 308 to worklist
Processing use of (reg 141 [ exceptions ]) in insn 308:
  Adding insn 237 to worklist
  Adding insn 249 to worklist
  Adding insn 260 to worklist
  Adding insn 274 to worklist
  Adding insn 292 to worklist
  Adding insn 337 to worklist
  Adding insn 339 to worklist
Processing use of (reg 24 cc) in insn 337:
  Adding insn 104 to worklist
Processing use of (reg 179) in insn 337:
  Adding insn 103 to worklist
Processing use of (reg 139 [ tm ]) in insn 103:
  Adding insn 60 to worklist
  Adding insn 85 to worklist
  Adding insn 333 to worklist
  Adding insn 335 to worklist
Processing use of (reg 24 cc) in insn 335:
  Adding insn 92 to worklist
Processing use of (reg 178 [ significand ]) in insn 92:
  Adding insn 91 to worklist
Processing use of (subreg (reg 135 [ significand ]) 4) in insn 91:
  Adding insn 24 to worklist
  Adding insn 43 to worklist
Processing use of (reg 178 [ significand ]) in insn 91:
  Adding insn 90 to worklist
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 90:
Processing use of (reg 135 [ significand ]) in insn 43:
Processing use of (reg 169) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 135 [ significand ]) in insn 24:
  Adding insn 22 to worklist
  Adding insn 23 to worklist
  Adding insn 342 to worklist
Processing use of (reg 220 [+4 ]) in insn 24:
  Adding insn 19 to worklist
Processing use of (reg 155) in insn 19:
  Adding insn 17 to worklist
Processing use of (reg 220 [+4 ]) in insn 19:
  Adding insn 18 to worklist
Processing use of (subreg (reg 143 [ D.4518 ]) 4) in insn 18:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (subreg (reg 143 [ D.4518 ]) 0) in insn 17:
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 23:
Processing use of (reg 135 [ significand ]) in insn 23:
Processing use of (reg 156) in insn 23:
  Adding insn 21 to worklist
Processing use of (reg 220 [+4 ]) in insn 21:
Processing use of (reg 135 [ significand ]) in insn 22:
Processing use of (reg 219) in insn 22:
  Adding insn 20 to worklist
Processing use of (subreg (reg 143 [ D.4518 ]) 0) in insn 20:
Processing use of (reg 24 cc) in insn 333:
  Adding insn 69 to worklist
Processing use of (reg 177) in insn 69:
  Adding insn 68 to worklist
Processing use of (subreg (reg 175) 4) in insn 68:
  Adding insn 66 to worklist
Processing use of (reg 177) in insn 68:
  Adding insn 67 to worklist
Processing use of (subreg (reg 175) 0) in insn 67:
Processing use of (reg 135 [ significand ]) in insn 66:
Processing use of (reg 176) in insn 66:
  Adding insn 65 to worklist
Processing use of (reg 179) in insn 104:
Processing use of (reg 141 [ exceptions ]) in insn 292:
Processing use of (reg 141 [ exceptions ]) in insn 274:
Processing use of (reg 141 [ exceptions ]) in insn 260:
Processing use of (reg 141 [ exceptions ]) in insn 249:
Processing use of (reg 141 [ exceptions ]) in insn 237:
Processing use of (reg 13 sp) in insn 303:
Processing use of (reg 0 r0) in insn 303:
  Adding insn 301 to worklist
Processing use of (reg 1 r1) in insn 303:
  Adding insn 302 to worklist
Processing use of (reg 145 [ sd ]) in insn 302:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 142 [ d ]) in insn 301:
  Adding insn 232 to worklist
  Adding insn 250 to worklist
  Adding insn 281 to worklist
  Adding insn 293 to worklist
  Adding insn 298 to worklist
  Adding insn 324 to worklist
  Adding insn 341 to worklist
Processing use of (reg 24 cc) in insn 341:
  Adding insn 138 to worklist
Processing use of (reg 133 [ vdm$sign ]) in insn 138:
  Adding insn 119 to worklist
  Adding insn 128 to worklist
Processing use of (subreg (reg 221) 0) in insn 128:
  Adding insn 126 to worklist
Processing use of (subreg (reg 181) 4) in insn 126:
  Adding insn 125 to worklist
Processing use of (reg 143 [ D.4518 ]) in insn 125:
Processing use of (reg 182) in insn 125:
  Adding insn 124 to worklist
Processing use of (reg 0 r0) in insn 324:
  Adding insn 167 to worklist
Processing use of (reg 13 sp) in insn 167:
Processing use of (reg 0 r0) in insn 167:
  Adding insn 165 to worklist
Processing use of (reg 1 r1) in insn 167:
Processing use of (reg 2 r2) in insn 167:
  Adding insn 166 to worklist
Processing use of (reg 138 [ shift ]) in insn 166:
  Adding insn 163 to worklist
Processing use of (reg 194) in insn 163:
  Adding insn 162 to worklist
Processing use of (reg 187 [ D.6071 ]) in insn 162:
  Adding insn 133 to worklist
Processing use of (subreg (reg 134 [ D.6071 ]) 0) in insn 133:
  Adding insn 16 to worklist
Processing use of (reg 152) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 151) in insn 15:
  Adding insn 14 to worklist
Processing use of (subreg (reg 217) 0) in insn 14:
  Adding insn 12 to worklist
Processing use of (subreg (reg 143 [ D.4518 ]) 4) in insn 12:
Processing use of (reg 195) in insn 165:
  Adding insn 164 to worklist
Processing use of (reg 135 [ significand ]) in insn 164:
Processing use of (reg 135 [ significand ]) in insn 164:
Processing use of (reg 142 [ d ]) in insn 232:
Processing use of (reg 0 r0) in insn 314:
Processing use of (reg 24 cc) in insn 290:
  Adding insn 289 to worklist
Processing use of (reg 133 [ vdm$sign ]) in insn 289:
Processing use of (reg 24 cc) in insn 287:
  Adding insn 286 to worklist
Processing use of (reg 140 [ rmode ]) in insn 286:
  Adding insn 153 to worklist
Processing use of (reg 148 [ fpscr ]) in insn 153:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 24 cc) in insn 279:
  Adding insn 278 to worklist
Processing use of (reg 133 [ vdm$sign ]) in insn 278:
Processing use of (reg 24 cc) in insn 276:
  Adding insn 275 to worklist
Processing use of (reg 140 [ rmode ]) in insn 275:
Processing use of (reg 24 cc) in insn 272:
  Adding insn 271 to worklist
Processing use of (reg 215) in insn 271:
  Adding insn 270 to worklist
Processing use of (subreg (reg 214) 4) in insn 270:
  Adding insn 268 to worklist
Processing use of (reg 215) in insn 270:
  Adding insn 269 to worklist
Processing use of (subreg (reg 214) 0) in insn 269:
Processing use of (reg 135 [ significand ]) in insn 268:
Processing use of (reg 212 [ D.6071 ]) in insn 268:
  Adding insn 267 to worklist
Processing use of (reg 187 [ D.6071 ]) in insn 267:
Processing use of (reg 24 cc) in insn 258:
  Adding insn 257 to worklist
Processing use of (reg 211 [ rem ]) in insn 257:
  Adding insn 256 to worklist
Processing use of (reg 211 [ rem ]) in insn 256:
  Adding insn 255 to worklist
Processing use of (subreg (reg 227 [ rem ]) 4) in insn 256:
  Adding insn 330 to worklist
Processing use of (reg 226 [+4 ]) in insn 330:
  Adding insn 327 to worklist
Processing use of (reg 227 [ rem ]) in insn 330:
  Adding insn 329 to worklist
Processing use of (reg 225) in insn 329:
  Adding insn 326 to worklist
Processing use of (reg 227 [ rem ]) in insn 329:
Processing use of (reg 0 r0) in insn 326:
  Adding insn 173 to worklist
Processing use of (reg 13 sp) in insn 173:
Processing use of (reg 0 r0) in insn 173:
  Adding insn 171 to worklist
Processing use of (reg 1 r1) in insn 173:
Processing use of (reg 2 r2) in insn 173:
  Adding insn 172 to worklist
Processing use of (reg 200) in insn 172:
  Adding insn 170 to worklist
Processing use of (reg 138 [ shift ]) in insn 170:
Processing use of (reg 135 [ significand ]) in insn 171:
Processing use of (reg 1 r1) in insn 327:
Processing use of (subreg (reg 227 [ rem ]) 0) in insn 255:
Processing use of (reg 24 cc) in insn 247:
  Adding insn 246 to worklist
Processing use of (reg 133 [ vdm$sign ]) in insn 246:
Processing use of (reg 24 cc) in insn 243:
  Adding insn 242 to worklist
Processing use of (reg 142 [ d ]) in insn 242:
Processing use of (reg 24 cc) in insn 230:
  Adding insn 229 to worklist
Processing use of (reg 142 [ d ]) in insn 229:
Processing use of (reg 24 cc) in insn 222:
  Adding insn 221 to worklist
Processing use of (subreg (reg 210) 0) in insn 221:
  Adding insn 216 to worklist
Processing use of (subreg (reg 227 [ rem ]) 0) in insn 221:
Processing use of (reg 136 [ incr ]) in insn 216:
  Adding insn 183 to worklist
  Adding insn 188 to worklist
  Adding insn 208 to worklist
  Adding insn 213 to worklist
Processing use of (reg 227 [ rem ]) in insn 216:
Processing use of (reg 24 cc) in insn 220:
  Adding insn 217 to worklist
Processing use of (subreg (reg 210) 4) in insn 217:
Processing use of (subreg (reg 227 [ rem ]) 4) in insn 217:
Processing use of (reg 24 cc) in insn 218:
Processing use of (reg 24 cc) in insn 206:
  Adding insn 205 to worklist
Processing use of (reg 209) in insn 205:
  Adding insn 204 to worklist
Processing use of (reg 208) in insn 204:
  Adding insn 203 to worklist
Processing use of (subreg (reg 207) 0) in insn 203:
  Adding insn 202 to worklist
Processing use of (reg 204) in insn 202:
  Adding insn 197 to worklist
Processing use of (reg 206) in insn 202:
  Adding insn 200 to worklist
Processing use of (reg 24 cc) in insn 200:
  Adding insn 199 to worklist
Processing use of (reg 140 [ rmode ]) in insn 199:
Processing use of (reg 24 cc) in insn 197:
  Adding insn 196 to worklist
Processing use of (reg 133 [ vdm$sign ]) in insn 196:
Processing use of (reg 24 cc) in insn 194:
  Adding insn 193 to worklist
Processing use of (reg 140 [ rmode ]) in insn 193:
Processing use of (reg 24 cc) in insn 181:
  Adding insn 180 to worklist
Processing use of (reg 202) in insn 180:
  Adding insn 179 to worklist
Processing use of (reg 142 [ d ]) in insn 179:
Processing use of (reg 24 cc) in insn 177:
  Adding insn 176 to worklist
Processing use of (reg 140 [ rmode ]) in insn 176:
Processing use of (reg 24 cc) in insn 159:
  Adding insn 158 to worklist
Processing use of (reg 187 [ D.6071 ]) in insn 158:
Processing use of (reg 190) in insn 158:
  Adding insn 154 to worklist
Processing use of (reg 24 cc) in insn 136:
  Adding insn 135 to worklist
Processing use of (reg 186) in insn 135:
  Adding insn 131 to worklist
Processing use of (reg 187 [ D.6071 ]) in insn 135:
Processing use of (reg 24 cc) in insn 117:
  Adding insn 116 to worklist
Processing use of (reg 180) in insn 116:
  Adding insn 115 to worklist
Processing use of (reg 139 [ tm ]) in insn 115:
Processing use of (reg 24 cc) in insn 83:
  Adding insn 82 to worklist
Processing use of (reg 134 [ D.6071 ]) in insn 82:
Processing use of (reg 24 cc) in insn 58:
  Adding insn 57 to worklist
Processing use of (reg 174 [ significand ]) in insn 57:
  Adding insn 56 to worklist
Processing use of (subreg (reg 135 [ significand ]) 4) in insn 56:
Processing use of (reg 174 [ significand ]) in insn 56:
  Adding insn 55 to worklist
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 55:
Processing use of (reg 24 cc) in insn 53:
  Adding insn 52 to worklist
Processing use of (reg 160 [ D.6071 ]) in insn 52:
  Adding insn 27 to worklist
Processing use of (reg 161) in insn 52:
  Adding insn 28 to worklist
Processing use of (reg 158) in insn 28:
  Adding insn 26 to worklist
Processing use of (subreg (reg 159) 0) in insn 26:
  Adding insn 25 to worklist
Processing use of (subreg (reg 134 [ D.6071 ]) 0) in insn 27:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 147 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 24 cc) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 168) in insn 39:
  Adding insn 38 to worklist
Processing use of (reg 167) in insn 38:
  Adding insn 37 to worklist
Processing use of (subreg (reg 166) 0) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 162) in insn 36:
  Adding insn 30 to worklist
Processing use of (reg 165) in insn 36:
  Adding insn 34 to worklist
Processing use of (reg 24 cc) in insn 34:
  Adding insn 33 to worklist
Processing use of (reg 160 [ D.6071 ]) in insn 33:
Processing use of (reg 24 cc) in insn 30:
  Adding insn 29 to worklist
Processing use of (reg 160 [ D.6071 ]) in insn 29:
Processing use of (reg 161) in insn 29:


vfp_double_ftoui

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,10u} r1={8d,5u} r2={7d,3u} r3={5d,1u} r11={1d,44u} r12={5d} r13={1d,48u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={36d,31u} r25={1d,44u} r26={1d,43u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={2d,5u} r134={1d,3u} r135={5d,14u,2d} r136={4d,1u} r138={1d,2u} r139={4d,2u} r140={1d,5u} r141={7d,6u} r142={7d,5u} r143={1d,5u,1d} r145={1d,1u} r147={1d,1u} r148={1d,1u} r151={1d,1u,1d} r152={1d,1u} r155={1d,1u} r156={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,3u,1d} r161={1d,2u} r162={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r174={2d,2u} r175={1d,2u} r176={1d,1u} r177={2d,2u} r178={2d,2u} r179={1d,2u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r186={1d,1u} r187={1d,4u,3d} r190={1d,1u} r194={1d,1u} r195={1d,1u} r200={1d,1u} r202={1d,1u} r204={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,2u} r211={2d,2u} r212={1d,1u} r214={1d,2u} r215={2d,2u} r217={1d,1u} r219={1d,1u} r220={2d,3u} r221={1d,1u} r225={1d,1u} r226={1d,1u} r227={3d,7u} 
;;    total ref usage 970{611d,351u,8e} in 172{168 regular + 4 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519
0[0,10] 1[10,8] 2[18,7] 3[25,5] 11[30,1] 12[31,5] 13[36,1] 14[37,5] 15[42,4] 16[46,4] 17[50,4] 18[54,4] 19[58,4] 20[62,4] 21[66,4] 22[70,4] 23[74,4] 24[78,36] 25[114,1] 26[115,1] 27[116,4] 28[120,4] 29[124,4] 30[128,4] 31[132,4] 32[136,4] 33[140,4] 34[144,4] 35[148,4] 36[152,4] 37[156,4] 38[160,4] 39[164,4] 40[168,4] 41[172,4] 42[176,4] 43[180,4] 44[184,4] 45[188,4] 46[192,4] 47[196,4] 48[200,4] 49[204,4] 50[208,4] 51[212,4] 52[216,4] 53[220,4] 54[224,4] 55[228,4] 56[232,4] 57[236,4] 58[240,4] 59[244,4] 60[248,4] 61[252,4] 62[256,4] 63[260,4] 64[264,4] 65[268,4] 66[272,4] 67[276,4] 68[280,4] 69[284,4] 70[288,4] 71[292,4] 72[296,4] 73[300,4] 74[304,4] 75[308,4] 76[312,4] 77[316,4] 78[320,4] 79[324,4] 80[328,4] 81[332,4] 82[336,4] 83[340,4] 84[344,4] 85[348,4] 86[352,4] 87[356,4] 88[360,4] 89[364,4] 90[368,4] 91[372,4] 92[376,4] 93[380,4] 94[384,4] 95[388,4] 96[392,4] 97[396,4] 98[400,4] 99[404,4] 100[408,4] 101[412,4] 102[416,4] 103[420,4] 104[424,4] 105[428,4] 106[432,4] 107[436,4] 108[440,4] 109[444,4] 110[448,4] 111[452,4] 112[456,4] 113[460,4] 114[464,4] 115[468,4] 116[472,4] 117[476,4] 118[480,4] 119[484,4] 120[488,4] 121[492,4] 122[496,4] 123[500,4] 124[504,4] 125[508,4] 126[512,4] 127[516,4] 133[520,2] 134[522,1] 135[523,5] 136[528,4] 138[532,1] 139[533,4] 140[537,1] 141[538,7] 142[545,7] 143[552,1] 145[553,1] 147[554,1] 148[555,1] 151[556,1] 152[557,1] 155[558,1] 156[559,1] 158[560,1] 159[561,1] 160[562,1] 161[563,1] 162[564,1] 165[565,1] 166[566,1] 167[567,1] 168[568,1] 169[569,1] 174[570,2] 175[572,1] 176[573,1] 177[574,2] 178[576,2] 179[578,1] 180[579,1] 181[580,1] 182[581,1] 186[582,1] 187[583,1] 190[584,1] 194[585,1] 195[586,1] 200[587,1] 202[588,1] 204[589,1] 206[590,1] 207[591,1] 208[592,1] 209[593,1] 210[594,1] 211[595,2] 212[597,1] 214[598,1] 215[599,2] 217[601,1] 219[602,1] 220[603,2] 221[605,1] 225[606,1] 226[607,1] 227[608,3] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 143 145 147 148 151 152 155 156 158 159 160 161 162 165 166 167 168 217 219 220
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 135 143 145 147 148 151 152 155 156 158 159 160 161 162 165 166 167 168 217 219 220
;; live  kill	 14 [lr]
;; rd  in  	(10)
9, 17, 24, 29, 30, 35, 36, 41, 114, 115
;; rd  gen 	(25)
7, 16, 111, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;; rd  kill	(45)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 37, 38, 39, 40, 41, 522, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603, 604

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 4 2 arch/arm/vfp/vfpdouble.c:507 (set (reg/v:SI 145 [ sd ])
        (reg:SI 0 r0 [ sd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ sd ])
        (nil)))

(insn 4 2 5 2 arch/arm/vfp/vfpdouble.c:507 (set (reg/v:SI 147 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:507 (set (reg/v:SI 148 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:513 (set (reg:SI 0 r0)
        (reg/v:SI 147 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 147 [ dm ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:513 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:513 (set (reg:DI 143 [ D.4518 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 14 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 217)
        (ashiftrt:SI (subreg:SI (reg:DI 143 [ D.4518 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 14 12 15 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 151)
        (zero_extend:SI (subreg:HI (reg:SI 217) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 217)
        (nil)))

(insn 15 14 16 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 152)
        (ashift:SI (reg:SI 151)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 151)
        (nil)))

(insn 16 15 17 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 134 [ D.6071 ])
        (lshiftrt:SI (reg:SI 152)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 152)
        (expr_list:REG_EQUAL (and:SI (reg:SI 151)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 17 16 18 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 155)
        (lshiftrt:SI (subreg:SI (reg:DI 143 [ D.4518 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 18 17 19 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 220 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 143 [ D.4518 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 19 18 20 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 220 [+4 ])
        (ior:SI (reg:SI 155)
            (reg:SI 220 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 155)
        (nil)))

(insn 20 19 21 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 219)
        (ashift:SI (subreg:SI (reg:DI 143 [ D.4518 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 21 20 342 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 156)
        (ashift:SI (reg:SI 220 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 342 21 22 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 135 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 22 342 23 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 219)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 219)
        (nil)))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 0)
        (ior:SI (reg:SI 156)
            (subreg:SI (reg/v:DI 135 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 220 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 220 [+4 ])
        (nil)))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 159)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 158)
        (subreg:HI (reg:SI 159) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 159)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 27 26 28 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 160 [ D.6071 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 134 [ D.6071 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 28 27 29 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 161)
        (sign_extend:SI (reg:HI 158))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 158)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 29 28 30 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 160 [ D.6071 ])
            (reg:SI 161))) 219 {*arm_cmpsi_insn} (nil))

(insn 30 29 33 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 162)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 33 30 34 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 160 [ D.6071 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 34 33 36 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 165)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 36 34 37 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 166)
        (and:SI (reg:SI 162)
            (reg:SI 165))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 165)
        (expr_list:REG_DEAD (reg:SI 162)
            (nil))))

(insn 37 36 38 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 167)
        (subreg:QI (reg:SI 166) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 166)
        (nil)))

(insn 38 37 39 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 168)
        (zero_extend:SI (reg:QI 167))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 167)
        (nil)))

(insn 39 38 40 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 168)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(jump_insn 40 39 41 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148 160 161
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148 160 161
;; rd  out 	(32)
7, 16, 24, 29, 30, 35, 36, 111, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u44(11){ }u45(13){ }u46(25){ }u47(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 135 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 135 169
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 111, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;; rd  gen 	(2)
524, 569
;; rd  kill	(6)
523, 524, 525, 526, 527, 569

;; Pred edge  2 [50.0%]  (fallthru)
(note 41 40 42 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 169)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 43 42 343 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 135 [ significand ])
        (ior:DI (reg/v:DI 135 [ significand ])
            (reg:DI 169))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 169)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 135 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))

(jump_insn 343 43 344 3 (set (pc)
        (label_ref 80)) -1 (nil))
;; End of basic block 3 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; rd  out 	(33)
7, 16, 24, 29, 30, 35, 36, 111, 114, 115, 522, 524, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603


;; Succ edge  8 [100.0%] 

(barrier 344 343 46)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u51(11){ }u52(13){ }u53(25){ }u54(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148 160 161
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160 161
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148 160 161
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 111, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;; rd  gen 	(1)
83
;; rd  kill	(0)


;; Pred edge  2 [50.0%] 
(code_label 46 344 47 4 343 "" [1 uses])

(note 47 46 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 47 53 4 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 160 [ D.6071 ])
            (reg:SI 161))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 161)
        (expr_list:REG_DEAD (reg:SI 160 [ D.6071 ])
            (expr_list:REG_EQUAL (compare:CC (reg:SI 160 [ D.6071 ])
                    (const_int 2047 [0x7ff]))
                (nil)))))

(jump_insn 53 52 54 4 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4400 [0x1130])
            (nil))))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; rd  out 	(32)
7, 16, 24, 29, 30, 35, 36, 83, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603


;; Succ edge  5 [56.0%]  (fallthru)
;; Succ edge  8 [44.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u59(11){ }u60(13){ }u61(25){ }u62(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 174
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 24 [cc] 174
;; live  kill	
;; rd  in  	(32)
7, 16, 24, 29, 30, 35, 36, 83, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 601, 602, 603
;; rd  gen 	(2)
110, 570
;; rd  kill	(2)
570, 571

;; Pred edge  4 [56.0%]  (fallthru)
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 5 arch/arm/vfp/vfp.h:331 (set (reg:SI 174 [ significand ])
        (subreg:SI (reg/v:DI 135 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 56 55 57 5 arch/arm/vfp/vfp.h:331 (set (reg:SI 174 [ significand ])
        (ior:SI (reg:SI 174 [ significand ])
            (subreg:SI (reg/v:DI 135 [ significand ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 57 56 58 5 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 174 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 174 [ significand ])
        (nil)))

(jump_insn 58 57 59 5 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; rd  out 	(33)
7, 16, 24, 29, 30, 35, 36, 110, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 601, 602, 603


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u68(11){ }u69(13){ }u70(25){ }u71(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 139
;; live  kill	
;; rd  in  	(33)
7, 16, 24, 29, 30, 35, 36, 110, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 601, 602, 603
;; rd  gen 	(1)
536
;; rd  kill	(4)
533, 534, 535, 536

;; Pred edge  5 [50.0%]  (fallthru)
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 345 6 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 139 [ tm ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 345 60 346 6 (set (pc)
        (label_ref 101)) -1 (nil))
;; End of basic block 6 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; rd  out 	(34)
7, 16, 24, 29, 30, 35, 36, 110, 114, 115, 522, 525, 536, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 601, 602, 603


;; Succ edge  11 [100.0%] 

(barrier 346 345 63)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u72(11){ }u73(13){ }u74(25){ }u75(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 139 175 176 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 24 [cc] 139 175 176 177
;; live  kill	
;; rd  in  	(33)
7, 16, 24, 29, 30, 35, 36, 110, 114, 115, 522, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 601, 602, 603
;; rd  gen 	(5)
109, 534, 572, 573, 574
;; rd  kill	(8)
533, 534, 535, 536, 572, 573, 574, 575

;; Pred edge  5 [50.0%] 
(code_label 63 346 64 7 345 "" [1 uses])

(note 64 63 65 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 65 64 66 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 176)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 66 65 67 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 175)
        (and:DI (reg/v:DI 135 [ significand ])
            (reg:DI 176))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 176)
        (expr_list:REG_EQUAL (and:DI (reg/v:DI 135 [ significand ])
                (const_int 2305843009213693952 [0x2000000000000000]))
            (nil))))

(insn 67 66 68 7 arch/arm/vfp/vfp.h:333 (set (reg:SI 177)
        (subreg:SI (reg:DI 175) 0)) 167 {*arm_movsi_insn} (nil))

(insn 68 67 69 7 arch/arm/vfp/vfp.h:333 (set (reg:SI 177)
        (ior:SI (reg:SI 177)
            (subreg:SI (reg:DI 175) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 175)
        (nil)))

(insn 69 68 333 7 arch/arm/vfp/vfp.h:333 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 177)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 177)
        (nil)))

(insn 333 69 347 7 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 139 [ tm ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 16 [0x10])
            (const_int 48 [0x30]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 347 333 348 7 (set (pc)
        (label_ref 101)) -1 (nil))
;; End of basic block 7 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; rd  out 	(37)
7, 16, 24, 29, 30, 35, 36, 109, 114, 115, 522, 525, 534, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 574, 601, 602, 603


;; Succ edge  11 [100.0%] 

(barrier 348 347 80)

;; Start of basic block ( 4 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u84(11){ }u85(13){ }u86(25){ }u87(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(35)
7, 16, 24, 29, 30, 35, 36, 83, 111, 114, 115, 522, 524, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603
;; rd  gen 	(1)
108
;; rd  kill	(0)


;; Pred edge  4 [44.0%] 
;; Pred edge  3 [100.0%] 
(code_label 80 348 81 8 344 "" [2 uses])

(note 81 80 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 82 81 83 8 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.6071 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 83 82 84 8 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; rd  out 	(34)
7, 16, 24, 29, 30, 35, 36, 108, 114, 115, 522, 524, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u90(11){ }u91(13){ }u92(25){ }u93(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 139
;; live  kill	
;; rd  in  	(34)
7, 16, 24, 29, 30, 35, 36, 108, 114, 115, 522, 524, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603
;; rd  gen 	(1)
535
;; rd  kill	(4)
533, 534, 535, 536

;; Pred edge  8 [50.0%]  (fallthru)
(note 84 83 85 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 349 9 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 139 [ tm ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 349 85 350 9 (set (pc)
        (label_ref 101)) -1 (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; rd  out 	(35)
7, 16, 24, 29, 30, 35, 36, 108, 114, 115, 522, 524, 525, 535, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603


;; Succ edge  11 [100.0%] 

(barrier 350 349 88)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u94(11){ }u95(13){ }u96(25){ }u97(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 139 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 143 145 148
;; live  gen 	 24 [cc] 139 178
;; live  kill	
;; rd  in  	(34)
7, 16, 24, 29, 30, 35, 36, 108, 114, 115, 522, 524, 525, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 601, 602, 603
;; rd  gen 	(3)
107, 533, 576
;; rd  kill	(6)
533, 534, 535, 536, 576, 577

;; Pred edge  8 [50.0%] 
(code_label 88 350 89 10 348 "" [1 uses])

(note 89 88 90 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 90 89 91 10 arch/arm/vfp/vfp.h:338 (set (reg:SI 178 [ significand ])
        (subreg:SI (reg/v:DI 135 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 91 90 92 10 arch/arm/vfp/vfp.h:338 (set (reg:SI 178 [ significand ])
        (ior:SI (reg:SI 178 [ significand ])
            (subreg:SI (reg/v:DI 135 [ significand ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 92 91 335 10 arch/arm/vfp/vfp.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 178 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 178 [ significand ])
        (nil)))

(insn 335 92 101 10 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 139 [ tm ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; rd  out 	(36)
7, 16, 24, 29, 30, 35, 36, 107, 114, 115, 522, 524, 525, 533, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 576, 601, 602, 603


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 7 6 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u103(11){ }u104(13){ }u105(25){ }u106(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 141 179 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 139 143 145 148
;; live  gen 	 24 [cc] 141 179 180
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 107, 108, 109, 110, 114, 115, 522, 524, 525, 533, 534, 535, 536, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 601, 602, 603
;; rd  gen 	(4)
105, 539, 578, 579
;; rd  kill	(9)
538, 539, 540, 541, 542, 543, 544, 578, 579

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 101 335 102 11 346 "" [3 uses])

(note 102 101 103 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 103 102 104 11 arch/arm/vfp/vfpdouble.c:519 (set (reg:SI 179)
        (and:SI (reg/v:SI 139 [ tm ])
            (const_int 4 [0x4]))) 67 {*arm_andsi3_insn} (nil))

(insn 104 103 337 11 arch/arm/vfp/vfpdouble.c:519 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 179)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 337 104 115 11 arch/arm/vfp/vfpdouble.c:509 (set (reg/v:SI 141 [ exceptions ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 179)
            (const_int 128 [0x80]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:SI 179)
        (expr_list:REG_DEAD (reg:CC 24 cc)
            (nil))))

(insn 115 337 116 11 arch/arm/vfp/vfpdouble.c:522 (set (reg:SI 180)
        (and:SI (reg/v:SI 139 [ tm ])
            (const_int 16 [0x10]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ tm ])
        (nil)))

(insn 116 115 117 11 arch/arm/vfp/vfpdouble.c:522 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 180)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 180)
        (nil)))

(jump_insn 117 116 118 11 arch/arm/vfp/vfpdouble.c:522 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 122)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 143 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 143 145 148
;; rd  out 	(46)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 601, 602, 603


;; Succ edge  12 [50.0%]  (fallthru)
;; Succ edge  13 [50.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u114(11){ }u115(13){ }u116(25){ }u117(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 145 148
;; live  gen 	 133
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 601, 602, 603
;; rd  gen 	(1)
521
;; rd  kill	(2)
520, 521

;; Pred edge  11 [50.0%]  (fallthru)
(note 118 117 119 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 119 118 351 12 arch/arm/vfp/vfpdouble.c:523 (set (reg:SI 133 [ vdm$sign ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 351 119 352 12 (set (pc)
        (label_ref 129)) -1 (nil))
;; End of basic block 12 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; rd  out 	(47)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 601, 602, 603


;; Succ edge  14 [100.0%] 

(barrier 352 351 122)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u118(11){ }u119(13){ }u120(25){ }u121(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 143 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 133 181 182 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 143 145 148
;; live  gen 	 133 181 182 221
;; live  kill	
;; rd  in  	(46)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 601, 602, 603
;; rd  gen 	(4)
520, 580, 581, 605
;; rd  kill	(5)
520, 521, 580, 581, 605

;; Pred edge  11 [50.0%] 
(code_label 122 352 123 13 352 "" [1 uses])

(note 123 122 124 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 124 123 125 13 arch/arm/vfp/vfp.h:304 (set (reg:DI 182)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 125 124 126 13 arch/arm/vfp/vfp.h:304 (set (reg:DI 181)
        (and:DI (reg:DI 143 [ D.4518 ])
            (reg:DI 182))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 182)
        (expr_list:REG_DEAD (reg:DI 143 [ D.4518 ])
            (expr_list:REG_EQUAL (and:DI (reg:DI 143 [ D.4518 ])
                    (const_int -9223372036854775808 [0x8000000000000000]))
                (nil)))))

(insn 126 125 128 13 arch/arm/vfp/vfp.h:304 (set (reg:SI 221)
        (lshiftrt:SI (subreg:SI (reg:DI 181) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 181)
        (nil)))

(insn 128 126 129 13 arch/arm/vfp/vfp.h:304 (set (reg:SI 133 [ vdm$sign ])
        (zero_extend:SI (subreg:HI (reg:SI 221) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 221)
        (nil)))
;; End of basic block 13 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; rd  out 	(50)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 520, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 601, 602, 603, 605


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u127(11){ }u128(13){ }u129(25){ }u130(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc] 186 187
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 141 145 148
;; live  gen 	 24 [cc] 186 187
;; live  kill	
;; rd  in  	(51)
7, 16, 24, 29, 30, 35, 36, 105, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 601, 602, 603, 605
;; rd  gen 	(3)
82, 582, 583
;; rd  kill	(2)
582, 583

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 129 128 130 14 353 "" [1 uses])

(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 131 130 133 14 arch/arm/vfp/vfpdouble.c:525 (set (reg:SI 186)
        (const_int 1054 [0x41e])) 167 {*arm_movsi_insn} (nil))

(insn 133 131 135 14 arch/arm/vfp/vfpdouble.c:525 (set (reg:SI 187 [ D.6071 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 134 [ D.6071 ]) 0))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 134 [ D.6071 ])
        (nil)))

(insn 135 133 136 14 arch/arm/vfp/vfpdouble.c:525 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 187 [ D.6071 ])
            (reg:SI 186))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 186)
        (expr_list:REG_EQUAL (compare:CC (reg:SI 187 [ D.6071 ])
                (const_int 1054 [0x41e]))
            (nil))))

(jump_insn 136 135 137 14 arch/arm/vfp/vfpdouble.c:525 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 151)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 145 148 187
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 145 148 187
;; rd  out 	(53)
7, 16, 24, 29, 30, 35, 36, 82, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 601, 602, 603, 605


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u136(11){ }u137(13){ }u138(25){ }u139(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc] 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 145
;; live  gen 	 24 [cc] 141 142
;; live  kill	
;; rd  in  	(53)
7, 16, 24, 29, 30, 35, 36, 82, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 601, 602, 603, 605
;; rd  gen 	(3)
104, 538, 545
;; rd  kill	(14)
538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551

;; Pred edge  14 [50.0%]  (fallthru)
(note 137 136 138 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 138 137 339 15 arch/arm/vfp/vfpdouble.c:526 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ vdm$sign ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ vdm$sign ])
        (nil)))

(insn 339 138 341 15 arch/arm/vfp/vfpdouble.c:527 (set (reg/v:SI 141 [ exceptions ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 341 339 353 15 arch/arm/vfp/vfpdouble.c:527 (set (reg/v:SI 142 [ d ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 0 [0x0])
            (const_int -1 [0xffffffffffffffff]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 353 341 354 15 (set (pc)
        (label_ref 299)) -1 (nil))
;; End of basic block 15 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(54)
7, 16, 24, 29, 30, 35, 36, 104, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 538, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 601, 602, 603, 605


;; Succ edge  44 [100.0%] 

(barrier 354 353 151)

;; Start of basic block ( 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u142(11){ }u143(13){ }u144(25){ }u145(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 145 148 187
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 187
;; lr  def 	 24 [cc] 140 190
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 141 145 148 187
;; live  gen 	 24 [cc] 140 190
;; live  kill	
;; rd  in  	(53)
7, 16, 24, 29, 30, 35, 36, 82, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 601, 602, 603, 605
;; rd  gen 	(3)
81, 537, 584
;; rd  kill	(2)
537, 584

;; Pred edge  14 [50.0%] 
(code_label 151 354 152 16 354 "" [1 uses])

(note 152 151 153 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 153 152 154 16 arch/arm/vfp/vfpdouble.c:510 (set (reg/v:SI 140 [ rmode ])
        (and:SI (reg/v:SI 148 [ fpscr ])
            (const_int 12582912 [0xc00000]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 148 [ fpscr ])
        (nil)))

(insn 154 153 158 16 arch/arm/vfp/vfpdouble.c:528 (set (reg:SI 190)
        (const_int 1021 [0x3fd])) 167 {*arm_movsi_insn} (nil))

(insn 158 154 159 16 arch/arm/vfp/vfpdouble.c:528 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 187 [ D.6071 ])
            (reg:SI 190))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 190)
        (expr_list:REG_EQUAL (compare:CC (reg:SI 187 [ D.6071 ])
                (const_int 1021 [0x3fd]))
            (nil))))

(jump_insn 159 158 160 16 arch/arm/vfp/vfpdouble.c:528 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 263)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 16 -> ( 17 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; rd  out 	(55)
7, 16, 24, 29, 30, 35, 36, 81, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 601, 602, 603, 605


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  36 [50.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u151(11){ }u152(13){ }u153(25){ }u154(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 187
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 142 194 195 200 225 226 227
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 138 142 194 195 200 225 226 227
;; live  kill	 14 [lr] 24 [cc] 227
;; rd  in  	(55)
7, 16, 24, 29, 30, 35, 36, 81, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 601, 602, 603, 605
;; rd  gen 	(11)
3, 12, 100, 532, 546, 585, 586, 587, 606, 607, 608
;; rd  kill	(36)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 37, 38, 39, 40, 41, 532, 545, 546, 547, 548, 549, 550, 551, 585, 586, 587, 606, 607

;; Pred edge  16 [50.0%]  (fallthru)
(note 160 159 162 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 162 160 163 17 arch/arm/vfp/vfpdouble.c:529 (set (reg:SI 194)
        (minus:SI (const_int 1072 [0x430])
            (reg:SI 187 [ D.6071 ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 187 [ D.6071 ])
        (nil)))

(insn 163 162 164 17 arch/arm/vfp/vfpdouble.c:529 (set (reg/v:SI 138 [ shift ])
        (plus:SI (reg:SI 194)
            (const_int 14 [0xe]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 194)
        (expr_list:REG_EQUAL (minus:SI (const_int 1086 [0x43e])
                (reg:SI 187 [ D.6071 ]))
            (nil))))

(insn 164 163 165 17 arch/arm/vfp/vfpdouble.c:535 (parallel [
            (set (reg:DI 195)
                (plus:DI (reg/v:DI 135 [ significand ])
                    (reg/v:DI 135 [ significand ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 165 164 166 17 arch/arm/vfp/vfpdouble.c:535 (set (reg:DI 0 r0)
        (reg:DI 195)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 195)
        (nil)))

(insn 166 165 167 17 arch/arm/vfp/vfpdouble.c:535 (set (reg:SI 2 r2)
        (reg/v:SI 138 [ shift ])) 167 {*arm_movsi_insn} (nil))

(call_insn/u 167 166 324 17 arch/arm/vfp/vfpdouble.c:535 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_UNUSED (reg:SI 1 r1)
            (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 324 167 170 17 arch/arm/vfp/vfpdouble.c:535 (set (reg/v:SI 142 [ d ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 170 324 171 17 arch/arm/vfp/vfpdouble.c:536 (set (reg:SI 200)
        (minus:SI (const_int 65 [0x41])
            (reg/v:SI 138 [ shift ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ shift ])
        (nil)))

(insn 171 170 172 17 arch/arm/vfp/vfpdouble.c:536 (set (reg:DI 0 r0)
        (reg/v:DI 135 [ significand ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v:DI 135 [ significand ])
        (nil)))

(insn 172 171 173 17 arch/arm/vfp/vfpdouble.c:536 (set (reg:SI 2 r2)
        (reg:SI 200)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 200)
        (nil)))

(call_insn/u 173 172 326 17 arch/arm/vfp/vfpdouble.c:536 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsl") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 326 173 327 17 arch/arm/vfp/vfpdouble.c:536 (set (reg:SI 225)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 327 326 328 17 arch/arm/vfp/vfpdouble.c:536 (set (reg:SI 226 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 328 327 329 17 arch/arm/vfp/vfpdouble.c:536 (clobber (reg:DI 227 [ rem ])) -1 (nil))

(insn 329 328 330 17 arch/arm/vfp/vfpdouble.c:536 (set (subreg:SI (reg:DI 227 [ rem ]) 0)
        (reg:SI 225)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 225)
        (nil)))

(insn 330 329 176 17 arch/arm/vfp/vfpdouble.c:536 (set (subreg:SI (reg:DI 227 [ rem ]) 4)
        (reg:SI 226 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 226 [+4 ])
        (nil)))

(insn 176 330 177 17 arch/arm/vfp/vfpdouble.c:538 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 177 176 178 17 arch/arm/vfp/vfpdouble.c:538 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 191)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 18 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; rd  out 	(63)
3, 12, 24, 29, 30, 35, 36, 100, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  18 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u182(11){ }u183(13){ }u184(25){ }u185(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc] 202
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 24 [cc] 202
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 100, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(2)
99, 588
;; rd  kill	(1)
588

;; Pred edge  17 [50.0%]  (fallthru)
(note 178 177 179 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 179 178 180 18 arch/arm/vfp/vfpdouble.c:540 (set (reg:SI 202)
        (and:SI (reg/v:SI 142 [ d ])
            (const_int 1 [0x1]))) 67 {*arm_andsi3_insn} (nil))

(insn 180 179 181 18 arch/arm/vfp/vfpdouble.c:540 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 202)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 202)
        (nil)))

(jump_insn 181 180 182 18 arch/arm/vfp/vfpdouble.c:540 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 186)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(64)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  20 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u189(11){ }u190(13){ }u191(25){ }u192(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 136
;; live  kill	
;; rd  in  	(64)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
531
;; rd  kill	(4)
528, 529, 530, 531

;; Pred edge  18 [50.0%]  (fallthru)
(note 182 181 183 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 183 182 355 19 arch/arm/vfp/vfpdouble.c:541 (set (reg/v:DI 136 [ incr ])
        (const_int 9223372036854775807 [0x7fffffffffffffff])) 163 {*arm_movdi} (nil))

(jump_insn 355 183 356 19 (set (pc)
        (label_ref 214)) -1 (nil))
;; End of basic block 19 -> ( 25)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; rd  out 	(65)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  25 [100.0%] 

(barrier 356 355 186)

;; Start of basic block ( 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u193(11){ }u194(13){ }u195(25){ }u196(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 136
;; live  kill	
;; rd  in  	(64)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
530
;; rd  kill	(4)
528, 529, 530, 531

;; Pred edge  18 [50.0%] 
(code_label 186 356 187 20 359 "" [1 uses])

(note 187 186 188 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 188 187 357 20 arch/arm/vfp/vfpdouble.c:539 (set (reg/v:DI 136 [ incr ])
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(jump_insn 357 188 358 20 (set (pc)
        (label_ref 214)) -1 (nil))
;; End of basic block 20 -> ( 25)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; rd  out 	(65)
3, 12, 24, 29, 30, 35, 36, 99, 114, 115, 520, 521, 522, 524, 525, 530, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  25 [100.0%] 

(barrier 358 357 191)

;; Start of basic block ( 17) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u197(11){ }u198(13){ }u199(25){ }u200(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 100, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
98
;; rd  kill	(0)


;; Pred edge  17 [50.0%] 
(code_label 191 358 192 21 358 "" [1 uses])

(note 192 191 193 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 193 192 194 21 arch/arm/vfp/vfpdouble.c:542 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 12582912 [0xc00000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 194 193 195 21 arch/arm/vfp/vfpdouble.c:542 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 21 -> ( 24 22)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; rd  out 	(63)
3, 12, 24, 29, 30, 35, 36, 98, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  24 [28.0%] 
;; Succ edge  22 [72.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u203(11){ }u204(13){ }u205(25){ }u206(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140
;; lr  def 	 24 [cc] 204 206 207 208 209
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 142 145 227
;; live  gen 	 24 [cc] 204 206 207 208 209
;; live  kill	
;; rd  in  	(63)
3, 12, 24, 29, 30, 35, 36, 98, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(6)
95, 589, 590, 591, 592, 593
;; rd  kill	(5)
589, 590, 591, 592, 593

;; Pred edge  21 [72.0%]  (fallthru)
(note 195 194 196 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 196 195 197 22 arch/arm/vfp/vfpdouble.c:544 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ vdm$sign ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 197 196 199 22 arch/arm/vfp/vfpdouble.c:544 (set (reg:SI 204)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 199 197 200 22 arch/arm/vfp/vfpdouble.c:544 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ rmode ])
        (nil)))

(insn 200 199 202 22 arch/arm/vfp/vfpdouble.c:544 (set (reg:SI 206)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 202 200 203 22 arch/arm/vfp/vfpdouble.c:544 (set (reg:SI 207)
        (xor:SI (reg:SI 204)
            (reg:SI 206))) 96 {*arm_xorsi3} (expr_list:REG_DEAD (reg:SI 206)
        (expr_list:REG_DEAD (reg:SI 204)
            (nil))))

(insn 203 202 204 22 arch/arm/vfp/vfpdouble.c:544 (set (reg:QI 208)
        (subreg:QI (reg:SI 207) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 207)
        (nil)))

(insn 204 203 205 22 arch/arm/vfp/vfpdouble.c:544 (set (reg:SI 209)
        (zero_extend:SI (reg:QI 208))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 208)
        (nil)))

(insn 205 204 206 22 arch/arm/vfp/vfpdouble.c:544 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 209)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 209)
        (nil)))

(jump_insn 206 205 207 22 arch/arm/vfp/vfpdouble.c:544 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 211)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 22 -> ( 23 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(68)
3, 12, 24, 29, 30, 35, 36, 95, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  23 [50.0%]  (fallthru)
;; Succ edge  24 [50.0%] 

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u217(11){ }u218(13){ }u219(25){ }u220(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 136
;; live  kill	
;; rd  in  	(68)
3, 12, 24, 29, 30, 35, 36, 95, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
529
;; rd  kill	(4)
528, 529, 530, 531

;; Pred edge  22 [50.0%]  (fallthru)
(note 207 206 208 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 208 207 359 23 arch/arm/vfp/vfpdouble.c:545 (set (reg/v:DI 136 [ incr ])
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(jump_insn 359 208 360 23 (set (pc)
        (label_ref 214)) -1 (nil))
;; End of basic block 23 -> ( 25)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; rd  out 	(69)
3, 12, 24, 29, 30, 35, 36, 95, 114, 115, 520, 521, 522, 524, 525, 529, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  25 [100.0%] 

(barrier 360 359 211)

;; Start of basic block ( 22 21) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u221(11){ }u222(13){ }u223(25){ }u224(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 136
;; live  kill	
;; rd  in  	(69)
3, 12, 24, 29, 30, 35, 36, 95, 98, 114, 115, 520, 521, 522, 524, 525, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
528
;; rd  kill	(4)
528, 529, 530, 531

;; Pred edge  22 [50.0%] 
;; Pred edge  21 [28.0%] 
(code_label 211 360 212 24 361 "" [2 uses])

(note 212 211 213 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 213 212 214 24 arch/arm/vfp/vfpdouble.c:543 (set (reg/v:DI 136 [ incr ])
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))
;; End of basic block 24 -> ( 25)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; rd  out 	(70)
3, 12, 24, 29, 30, 35, 36, 95, 98, 114, 115, 520, 521, 522, 524, 525, 528, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  25 [100.0%]  (fallthru)

;; Start of basic block ( 24 20 19 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u225(11){ }u226(13){ }u227(25){ }u228(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 227
;; lr  def 	 24 [cc] 210
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 141 142 145 227
;; live  gen 	 24 [cc] 210
;; live  kill	 24 [cc]
;; rd  in  	(75)
3, 12, 24, 29, 30, 35, 36, 95, 98, 99, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(2)
79, 594
;; rd  kill	(1)
594

;; Pred edge  24 [100.0%]  (fallthru)
;; Pred edge  20 [100.0%] 
;; Pred edge  19 [100.0%] 
;; Pred edge  23 [100.0%] 
(code_label 214 213 215 25 360 "" [3 uses])

(note 215 214 216 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 216 215 217 25 arch/arm/vfp/vfpdouble.c:548 (parallel [
            (set (reg:DI 210)
                (plus:DI (reg/v:DI 136 [ incr ])
                    (reg:DI 227 [ rem ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 136 [ incr ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 217 216 218 25 arch/arm/vfp/vfpdouble.c:548 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 227 [ rem ]) 4)
            (subreg:SI (reg:DI 210) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 218 217 316 25 arch/arm/vfp/vfpdouble.c:548 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 323)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 25 -> ( 28 26)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  28 [50.0%] 
;; Succ edge  26 [50.0%]  (fallthru)

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u234(11){ }u235(13){ }u236(25){ }u237(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; live  gen 	
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  25 [50.0%]  (fallthru)
(note 316 218 220 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(jump_insn 220 316 317 26 arch/arm/vfp/vfpdouble.c:548 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 240)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 26 -> ( 31 27)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  31 [71.0%] 
;; Succ edge  27 [29.0%]  (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u239(11){ }u240(13){ }u241(25){ }u242(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 210 227
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 210 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
78
;; rd  kill	(0)


;; Pred edge  26 [29.0%]  (fallthru)
(note 317 220 221 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 221 317 222 27 arch/arm/vfp/vfpdouble.c:548 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 227 [ rem ]) 0)
            (subreg:SI (reg:DI 210) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 210)
        (nil)))

(jump_insn 222 221 323 27 arch/arm/vfp/vfpdouble.c:548 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 240)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 27 -> ( 28 31)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 78, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  28 [50.0%]  (fallthru)
;; Succ edge  31 [50.0%] 

;; Start of basic block ( 27 25) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u246(11){ }u247(13){ }u248(25){ }u249(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(75)
3, 12, 24, 29, 30, 35, 36, 78, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
94
;; rd  kill	(0)


;; Pred edge  27 [50.0%]  (fallthru)
;; Pred edge  25 [50.0%] 
(code_label 323 222 228 28 370 "" [1 uses])

(note 228 323 229 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 229 228 230 28 arch/arm/vfp/vfpdouble.c:549 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 142 [ d ])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 230 229 231 28 arch/arm/vfp/vfpdouble.c:549 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 235)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  29 [72.0%]  (fallthru)
;; Succ edge  30 [28.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u252(11){ }u253(13){ }u254(25){ }u255(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 142
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
551
;; rd  kill	(7)
545, 546, 547, 548, 549, 550, 551

;; Pred edge  28 [72.0%]  (fallthru)
(note 231 230 232 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 232 231 361 29 arch/arm/vfp/vfpdouble.c:550 (set (reg/v:SI 142 [ d ])
        (plus:SI (reg/v:SI 142 [ d ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 361 232 362 29 (set (pc)
        (label_ref 244)) -1 (nil))
;; End of basic block 29 -> ( 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  32 [100.0%] 

(barrier 362 361 235)

;; Start of basic block ( 28) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u257(11){ }u258(13){ }u259(25){ }u260(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 141
;; live  kill	
;; rd  in  	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
544
;; rd  kill	(7)
538, 539, 540, 541, 542, 543, 544

;; Pred edge  28 [28.0%] 
(code_label 235 362 236 30 364 "" [1 uses])

(note 236 235 237 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 237 236 363 30 arch/arm/vfp/vfpdouble.c:552 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(jump_insn 363 237 364 30 (set (pc)
        (label_ref 244)) -1 (nil))
;; End of basic block 30 -> ( 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 544, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  32 [100.0%] 

(barrier 364 363 240)

;; Start of basic block ( 26 27) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u262(11){ }u263(13){ }u264(25){ }u265(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(75)
3, 12, 24, 29, 30, 35, 36, 78, 79, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
93
;; rd  kill	(0)


;; Pred edge  26 [71.0%] 
;; Pred edge  27 [50.0%] 
(code_label 240 364 241 31 362 "" [2 uses])

(note 241 240 242 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 242 241 243 31 arch/arm/vfp/vfpdouble.c:555 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 142 [ d ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 243 242 244 31 arch/arm/vfp/vfpdouble.c:555 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 253)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
            (nil))))
;; End of basic block 31 -> ( 32 34)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 93, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  32 (fallthru)
;; Succ edge  34 [100.0%] 

;; Start of basic block ( 31 29 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u268(11){ }u269(13){ }u270(25){ }u271(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 142 145 227
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(77)
3, 12, 24, 29, 30, 35, 36, 93, 94, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
92
;; rd  kill	(0)


;; Pred edge  31 (fallthru)
;; Pred edge  29 [100.0%] 
;; Pred edge  30 [100.0%] 
(code_label 244 243 245 32 365 "" [2 uses])

(note 245 244 246 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 246 245 247 32 arch/arm/vfp/vfpdouble.c:555 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ vdm$sign ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ vdm$sign ])
        (nil)))

(jump_insn 247 246 248 32 arch/arm/vfp/vfpdouble.c:555 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 253)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 32 -> ( 33 34)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145 227
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145 227
;; rd  out 	(76)
3, 12, 24, 29, 30, 35, 36, 92, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  33 [39.0%]  (fallthru)
;; Succ edge  34 [61.0%] 

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u274(11){ }u275(13){ }u276(25){ }u277(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  gen 	 141 142
;; live  kill	
;; rd  in  	(76)
3, 12, 24, 29, 30, 35, 36, 92, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(2)
543, 550
;; rd  kill	(14)
538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551

;; Pred edge  32 [39.0%]  (fallthru)
(note 248 247 249 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 249 248 250 33 arch/arm/vfp/vfpdouble.c:557 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 250 249 365 33 arch/arm/vfp/vfpdouble.c:556 (set (reg/v:SI 142 [ d ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 365 250 366 33 arch/arm/vfp/vfpdouble.c:555 discrim 2 (set (pc)
        (label_ref 299)) -1 (nil))
;; End of basic block 33 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(74)
3, 12, 24, 29, 30, 35, 36, 92, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 543, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  44 [100.0%] 

(barrier 366 365 253)

;; Start of basic block ( 31 32) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u279(11){ }u280(13){ }u281(25){ }u282(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145 227
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 227
;; lr  def 	 24 [cc] 211
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145 227
;; live  gen 	 24 [cc] 211
;; live  kill	
;; rd  in  	(77)
3, 12, 24, 29, 30, 35, 36, 92, 93, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(2)
91, 595
;; rd  kill	(2)
595, 596

;; Pred edge  31 [100.0%] 
;; Pred edge  32 [61.0%] 
(code_label 253 366 254 34 366 "" [2 uses])

(note 254 253 255 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 255 254 256 34 arch/arm/vfp/vfpdouble.c:558 (set (reg:SI 211 [ rem ])
        (subreg:SI (reg:DI 227 [ rem ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 256 255 257 34 arch/arm/vfp/vfpdouble.c:558 (set (reg:SI 211 [ rem ])
        (ior:SI (reg:SI 211 [ rem ])
            (subreg:SI (reg:DI 227 [ rem ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 227 [ rem ])
        (nil)))

(insn 257 256 258 34 arch/arm/vfp/vfpdouble.c:558 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 211 [ rem ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 211 [ rem ])
        (nil)))

(jump_insn 258 257 259 34 arch/arm/vfp/vfpdouble.c:558 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 299)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 34 -> ( 35 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(77)
3, 12, 24, 29, 30, 35, 36, 91, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  35 [50.0%]  (fallthru)
;; Succ edge  44 [50.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u288(11){ }u289(13){ }u290(25){ }u291(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  gen 	 141
;; live  kill	
;; rd  in  	(77)
3, 12, 24, 29, 30, 35, 36, 91, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 544, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
542
;; rd  kill	(7)
538, 539, 540, 541, 542, 543, 544

;; Pred edge  34 [50.0%]  (fallthru)
(note 259 258 260 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 260 259 367 35 arch/arm/vfp/vfpdouble.c:559 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))

(jump_insn 367 260 368 35 (set (pc)
        (label_ref 299)) -1 (nil))
;; End of basic block 35 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(76)
3, 12, 24, 29, 30, 35, 36, 91, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 542, 546, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  44 [100.0%] 

(barrier 368 367 263)

;; Start of basic block ( 16) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u293(11){ }u294(13){ }u295(25){ }u296(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 187
;; lr  def 	 24 [cc] 212 214 215
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140 141 145 187
;; live  gen 	 24 [cc] 212 214 215
;; live  kill	
;; rd  in  	(55)
7, 16, 24, 29, 30, 35, 36, 81, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 601, 602, 603, 605
;; rd  gen 	(4)
90, 597, 598, 599
;; rd  kill	(4)
597, 598, 599, 600

;; Pred edge  16 [50.0%] 
(code_label 263 368 264 36 357 "" [1 uses])

(note 264 263 267 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 267 264 268 36 arch/arm/vfp/vfpdouble.c:562 (set (reg:DI 212 [ D.6071 ])
        (sign_extend:DI (reg:SI 187 [ D.6071 ]))) 140 {*arm_extendsidi2} (expr_list:REG_DEAD (reg:SI 187 [ D.6071 ])
        (nil)))

(insn 268 267 269 36 arch/arm/vfp/vfpdouble.c:562 (set (reg:DI 214)
        (ior:DI (reg/v:DI 135 [ significand ])
            (reg:DI 212 [ D.6071 ]))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 212 [ D.6071 ])
        (expr_list:REG_DEAD (reg/v:DI 135 [ significand ])
            (nil))))

(insn 269 268 270 36 arch/arm/vfp/vfpdouble.c:562 (set (reg:SI 215)
        (subreg:SI (reg:DI 214) 0)) 167 {*arm_movsi_insn} (nil))

(insn 270 269 271 36 arch/arm/vfp/vfpdouble.c:562 (set (reg:SI 215)
        (ior:SI (reg:SI 215)
            (subreg:SI (reg:DI 214) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 214)
        (nil)))

(insn 271 270 272 36 arch/arm/vfp/vfpdouble.c:562 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 215)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 215)
        (nil)))

(jump_insn 272 271 273 36 arch/arm/vfp/vfpdouble.c:562 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 296)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 36 -> ( 37 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 90, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605


;; Succ edge  37 [61.0%]  (fallthru)
;; Succ edge  43 [39.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u305(11){ }u306(13){ }u307(25){ }u308(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 141
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; live  gen 	 24 [cc] 141
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 90, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(2)
89, 541
;; rd  kill	(7)
538, 539, 540, 541, 542, 543, 544

;; Pred edge  36 [61.0%]  (fallthru)
(note 273 272 274 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 274 273 275 37 arch/arm/vfp/vfpdouble.c:563 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 16 [0x10]))) 89 {*arm_iorsi3} (nil))

(insn 275 274 276 37 arch/arm/vfp/vfpdouble.c:564 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 4194304 [0x400000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 276 275 277 37 arch/arm/vfp/vfpdouble.c:564 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 284)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 37 -> ( 38 40)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 89, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605


;; Succ edge  38 [28.0%]  (fallthru)
;; Succ edge  40 [72.0%] 

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u312(11){ }u313(13){ }u314(25){ }u315(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 89, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
88
;; rd  kill	(0)


;; Pred edge  37 [28.0%]  (fallthru)
(note 277 276 278 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 278 277 279 38 arch/arm/vfp/vfpdouble.c:564 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ vdm$sign ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ vdm$sign ])
        (nil)))

(jump_insn 279 278 280 38 arch/arm/vfp/vfpdouble.c:564 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 296)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 38 -> ( 39 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 88, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605


;; Succ edge  39 [39.0%]  (fallthru)
;; Succ edge  43 [61.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u318(11){ }u319(13){ }u320(25){ }u321(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  gen 	 142
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 88, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
549
;; rd  kill	(7)
545, 546, 547, 548, 549, 550, 551

;; Pred edge  38 [39.0%]  (fallthru)
(note 280 279 281 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 281 280 369 39 arch/arm/vfp/vfpdouble.c:565 (set (reg/v:SI 142 [ d ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 369 281 370 39 (set (pc)
        (label_ref 299)) -1 (nil))
;; End of basic block 39 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(59)
7, 16, 24, 29, 30, 35, 36, 88, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605


;; Succ edge  44 [100.0%] 

(barrier 370 369 284)

;; Start of basic block ( 37) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u322(11){ }u323(13){ }u324(25){ }u325(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 140 141 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 89, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
87
;; rd  kill	(0)


;; Pred edge  37 [72.0%] 
(code_label 284 370 285 40 368 "" [1 uses])

(note 285 284 286 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 286 285 287 40 arch/arm/vfp/vfpdouble.c:566 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ rmode ])
            (const_int 8388608 [0x800000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ rmode ])
        (nil)))

(jump_insn 287 286 288 40 arch/arm/vfp/vfpdouble.c:566 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 296)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5323 [0x14cb])
            (nil))))
;; End of basic block 40 -> ( 41 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 87, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605


;; Succ edge  41 [46.8%]  (fallthru)
;; Succ edge  43 [53.2%] 

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u328(11){ }u329(13){ }u330(25){ }u331(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 141 145
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 87, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
86
;; rd  kill	(0)


;; Pred edge  40 [46.8%]  (fallthru)
(note 288 287 289 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 289 288 290 41 arch/arm/vfp/vfpdouble.c:566 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ vdm$sign ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ vdm$sign ])
        (nil)))

(jump_insn 290 289 291 41 arch/arm/vfp/vfpdouble.c:566 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 296)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 41 -> ( 42 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; rd  out 	(58)
7, 16, 24, 29, 30, 35, 36, 86, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605


;; Succ edge  42 [61.0%]  (fallthru)
;; Succ edge  43 [39.0%] 

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u334(11){ }u335(13){ }u336(25){ }u337(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 141 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  gen 	 141 142
;; live  kill	
;; rd  in  	(58)
7, 16, 24, 29, 30, 35, 36, 86, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(2)
540, 548
;; rd  kill	(14)
538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551

;; Pred edge  41 [61.0%]  (fallthru)
(note 291 290 292 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 292 291 293 42 arch/arm/vfp/vfpdouble.c:568 (set (reg/v:SI 141 [ exceptions ])
        (ior:SI (reg/v:SI 141 [ exceptions ])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(insn 293 292 371 42 arch/arm/vfp/vfpdouble.c:567 (set (reg/v:SI 142 [ d ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 371 293 372 42 (set (pc)
        (label_ref 299)) -1 (nil))
;; End of basic block 42 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(59)
7, 16, 24, 29, 30, 35, 36, 86, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 540, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605


;; Succ edge  44 [100.0%] 

(barrier 372 371 296)

;; Start of basic block ( 38 41 36 40) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u339(11){ }u340(13){ }u341(25){ }u342(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 145
;; live  gen 	 142
;; live  kill	
;; rd  in  	(62)
7, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 541, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605
;; rd  gen 	(1)
547
;; rd  kill	(7)
545, 546, 547, 548, 549, 550, 551

;; Pred edge  38 [61.0%] 
;; Pred edge  41 [39.0%] 
;; Pred edge  36 [39.0%] 
;; Pred edge  40 [53.2%] 
(code_label 296 372 297 43 367 "" [4 uses])

(note 297 296 298 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 298 297 299 43 arch/arm/vfp/vfpdouble.c:561 (set (reg/v:SI 142 [ d ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 43 -> ( 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; rd  out 	(63)
7, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 114, 115, 520, 521, 522, 524, 525, 533, 534, 535, 536, 537, 539, 541, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 597, 598, 599, 601, 602, 603, 605


;; Succ edge  44 [100.0%]  (fallthru)

;; Start of basic block ( 43 39 34 35 33 15 42) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u343(11){ }u344(13){ }u345(25){ }u346(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 142 145
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; rd  in  	(98)
3, 7, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 92, 104, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 605, 606, 607, 608
;; rd  gen 	(1)
0
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 37, 38, 39, 40, 41

;; Pred edge  43 [100.0%]  (fallthru)
;; Pred edge  39 [100.0%] 
;; Pred edge  34 [50.0%] 
;; Pred edge  35 [100.0%] 
;; Pred edge  33 [100.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  42 [100.0%] 
(code_label 299 298 300 44 356 "" [6 uses])

(note 300 299 301 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 301 300 302 44 arch/arm/vfp/vfpdouble.c:575 (set (reg:SI 0 r0)
        (reg/v:SI 142 [ d ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 142 [ d ])
        (nil)))

(insn 302 301 303 44 arch/arm/vfp/vfpdouble.c:575 (set (reg:SI 1 r1)
        (reg/v:SI 145 [ sd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ sd ])
        (nil)))

(call_insn 303 302 308 44 arch/arm/vfp/vfpdouble.c:575 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_float") [flags 0x41] <function_decl 0x10a9d180 vfp_put_float>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 308 303 314 44 arch/arm/vfp/vfpdouble.c:578 (set (reg/i:SI 0 r0)
        (reg/v:SI 141 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ exceptions ])
        (nil)))

(insn 314 308 0 44 arch/arm/vfp/vfpdouble.c:578 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 44 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(97)
0, 12, 16, 24, 29, 30, 35, 36, 86, 87, 88, 90, 91, 92, 104, 114, 115, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 605, 606, 607, 608


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_ftouiz (vfp_double_ftouiz)[0:168]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_ftouiz

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,1u} r2={2d,1u} r3={3d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{127d,14u,0e} in 2{1 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,3] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d3(1){ }d5(2){ }d8(3){ }d9(11){ }d11(12){ }d12(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 3, 5, 8, 9, 11, 12, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 3, 5, 8, 9, 11, 12, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d9(bb 0 insn -1) }u1(13){ d12(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	
;; rd  in  	(10)
1, 3, 5, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 3, 5, 8, 9, 11, 12, 13, 24, 25
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 13
;;      reg 13 { d12(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 0 insn -1) }
;;      reg 2 { d5(bb 0 insn -1) }
;;      reg 3 { d7(bb 2 insn 12) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u9(0){ d0(bb 2 insn 13) }u10(11){ d9(bb 0 insn -1) }u11(13){ d12(bb 0 insn -1) }u12(14){ d13(bb 0 insn -1) }u13(25){ d24(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 3, 5, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(10)
0, 3, 5, 8, 9, 11, 12, 13, 24, 25
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 13) }
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 14 { d13(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 13 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 13:
Processing use of (reg 0 r0) in insn 13:
Processing use of (reg 1 r1) in insn 13:
Processing use of (reg 2 r2) in insn 13:
Processing use of (reg 3 r3) in insn 13:
  Adding insn 12 to worklist


vfp_double_ftouiz

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,1u} r2={2d,1u} r3={3d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 141{127d,14u,0e} in 2{1 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,3] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	
;; rd  in  	(10)
1, 3, 5, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(1)
0
;; rd  kill	(2)
0, 1

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 12 2 NOTE_INSN_FUNCTION_BEG)

(insn 12 6 13 2 arch/arm/vfp/vfpdouble.c:582 (set (reg:SI 3 r3)
        (const_int 12582912 [0xc00000])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 13 12 14 2 arch/arm/vfp/vfpdouble.c:582 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_ftoui") [flags 0x3] <function_decl 0x10ad5b80 vfp_double_ftoui>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 3, 5, 8, 9, 11, 12, 13, 24, 25


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 14 13 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fsito (vfp_double_fsito)[0:166]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


vfp_double_fsito

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,6u} r1={4d,1u} r2={4d,2u} r3={4d,2u} r11={1d,4u} r12={3d} r13={1d,7u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r25={1d,9u,1d} r26={1d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={2d,3u} r135={1d,2u} r138={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r145={1d,1u} r147={1d,1u} r148={1d,1u} r151={1d,2u} 
;;    total ref usage 314{262d,51u,1e} in 27{25 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249
0[0,5] 1[5,4] 2[9,4] 3[13,4] 11[17,1] 12[18,3] 13[21,1] 14[22,3] 15[25,2] 16[27,2] 17[29,2] 18[31,2] 19[33,2] 20[35,2] 21[37,2] 22[39,2] 23[41,2] 24[43,3] 25[46,1] 26[47,1] 27[48,2] 28[50,2] 29[52,2] 30[54,2] 31[56,2] 32[58,2] 33[60,2] 34[62,2] 35[64,2] 36[66,2] 37[68,2] 38[70,2] 39[72,2] 40[74,2] 41[76,2] 42[78,2] 43[80,2] 44[82,2] 45[84,2] 46[86,2] 47[88,2] 48[90,2] 49[92,2] 50[94,2] 51[96,2] 52[98,2] 53[100,2] 54[102,2] 55[104,2] 56[106,2] 57[108,2] 58[110,2] 59[112,2] 60[114,2] 61[116,2] 62[118,2] 63[120,2] 64[122,2] 65[124,2] 66[126,2] 67[128,2] 68[130,2] 69[132,2] 70[134,2] 71[136,2] 72[138,2] 73[140,2] 74[142,2] 75[144,2] 76[146,2] 77[148,2] 78[150,2] 79[152,2] 80[154,2] 81[156,2] 82[158,2] 83[160,2] 84[162,2] 85[164,2] 86[166,2] 87[168,2] 88[170,2] 89[172,2] 90[174,2] 91[176,2] 92[178,2] 93[180,2] 94[182,2] 95[184,2] 96[186,2] 97[188,2] 98[190,2] 99[192,2] 100[194,2] 101[196,2] 102[198,2] 103[200,2] 104[202,2] 105[204,2] 106[206,2] 107[208,2] 108[210,2] 109[212,2] 110[214,2] 111[216,2] 112[218,2] 113[220,2] 114[222,2] 115[224,2] 116[226,2] 117[228,2] 118[230,2] 119[232,2] 120[234,2] 121[236,2] 122[238,2] 123[240,2] 124[242,2] 125[244,2] 126[246,2] 127[248,2] 133[250,2] 135[252,1] 138[253,1] 140[254,1] 141[255,1] 142[256,1] 143[257,1] 145[258,1] 147[259,1] 148[260,1] 151[261,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d4(0){ }d8(1){ }d12(2){ }d16(3){ }d17(11){ }d20(12){ }d21(13){ }d24(14){ }d46(25){ }d47(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
4, 8, 12, 16, 17, 20, 21, 24, 46, 47
;; rd  kill	(27)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 46, 47
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
4, 8, 12, 16, 17, 20, 21, 24, 46, 47

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d17(bb 0 insn -1) }u1(13){ d21(bb 0 insn -1) }u2(25){ d46(bb 0 insn -1) }u3(26){ d47(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 135 138 140 141 142 143 145
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 24 [cc] 133 135 138 140 141 142 143 145
;; live  kill	 14 [lr]
;; rd  in  	(10)
4, 8, 12, 16, 17, 20, 21, 24, 46, 47
;; rd  gen 	(10)
2, 44, 250, 252, 253, 254, 255, 256, 257, 258
;; rd  kill	(20)
0, 1, 2, 3, 4, 22, 23, 24, 43, 44, 45, 250, 251, 252, 253, 254, 255, 256, 257, 258
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; rd  out 	(18)
2, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 252, 253, 254, 255, 256, 257, 258
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 25 { d46(bb 0 insn -1) }
;;   reg 26 { d47(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d4(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 2 { d12(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 5
;;      reg 3 { d16(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 9
;;      reg 140 { d254(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 10
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 0 { d3(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 11
;;      reg 0 { d2(bb 2 insn 10) }
;;   UD chains for insn luid 6 uid 13
;;      reg 133 { d250(bb 2 insn 11) }
;;   UD chains for insn luid 7 uid 14
;;      reg 142 { d256(bb 2 insn 13) }
;;   UD chains for insn luid 8 uid 15
;;      reg 143 { d257(bb 2 insn 14) }
;;   UD chains for insn luid 9 uid 16
;;      reg 25 { d46(bb 0 insn -1) }
;;      reg 135 { d252(bb 2 insn 15) }
;;   UD chains for insn luid 11 uid 19
;;      reg 25 { d46(bb 0 insn -1) }
;;      reg 145 { d258(bb 2 insn 17) }
;;   UD chains for insn luid 12 uid 20
;;      reg 135 { d252(bb 2 insn 15) }
;;   UD chains for insn luid 13 uid 21
;;      reg 24 { d44(bb 2 insn 20) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(11){ d17(bb 0 insn -1) }u21(13){ d21(bb 0 insn -1) }u22(25){ d46(bb 0 insn -1) }u23(26){ d47(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; live  gen 	 133
;; live  kill	
;; rd  in  	(18)
2, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 252, 253, 254, 255, 256, 257, 258
;; rd  gen 	(1)
251
;; rd  kill	(2)
250, 251
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; rd  out 	(18)
2, 8, 12, 16, 17, 20, 21, 44, 46, 47, 251, 252, 253, 254, 255, 256, 257, 258
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 25 { d46(bb 0 insn -1) }
;;   reg 26 { d47(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 23
;;      reg 133 { d250(bb 2 insn 11) }

( 3 2 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u25(11){ d17(bb 0 insn -1) }u26(13){ d21(bb 0 insn -1) }u27(25){ d46(bb 0 insn -1) }u28(26){ d47(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 147 148 151
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 147 148 151
;; live  kill	 14 [lr]
;; rd  in  	(19)
2, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 251, 252, 253, 254, 255, 256, 257, 258
;; rd  gen 	(4)
0, 259, 260, 261
;; rd  kill	(11)
0, 1, 2, 3, 4, 22, 23, 24, 259, 260, 261
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(22)
0, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 25 { d46(bb 0 insn -1) }
;;   reg 26 { d47(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 53
;;      reg 25 { d46(bb 0 insn -1) }
;;      reg 133 { d251(bb 3 insn 23) d250(bb 2 insn 11) }
;;   UD chains for insn luid 2 uid 54
;;      reg 25 { d46(bb 0 insn -1) }
;;      reg 151 { d261(bb 4 insn 52) }
;;   UD chains for insn luid 3 uid 28
;;      reg 25 { d46(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 30
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 148 { d260(bb 4 insn 29) }
;;   UD chains for insn luid 6 uid 31
;;      reg 138 { d253(bb 2 insn 2) }
;;   UD chains for insn luid 7 uid 32
;;      reg 147 { d259(bb 4 insn 28) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 8 uid 33
;;      reg 141 { d255(bb 2 insn 5) }
;;   UD chains for insn luid 9 uid 34
;;      reg 151 { d261(bb 4 insn 52) }
;;   UD chains for insn luid 10 uid 35
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 0 { d1(bb 4 insn 31) }
;;      reg 1 { d6(bb 4 insn 32) }
;;      reg 2 { d10(bb 4 insn 33) }
;;      reg 3 { d13(bb 4 insn 34) }
;;   UD chains for insn luid 11 uid 47
;;      reg 0 { d0(bb 4 insn 35) }

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u47(0){ d0(bb 4 insn 35) }u48(11){ d17(bb 0 insn -1) }u49(13){ d21(bb 0 insn -1) }u50(14){ }u51(25){ d46(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(22)
0, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(22)
0, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 4 insn 35) }
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d46(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 21 to worklist
  Adding insn 19 to worklist
  Adding insn 16 to worklist
  Adding insn 10 to worklist
  Adding insn 47 to worklist
  Adding insn 35 to worklist
  Adding insn 30 to worklist
  Adding insn 54 to worklist
  Adding insn 53 to worklist
Finished finding needed instructions:
Processing use of (reg 25 sfp) in insn 53:
Processing use of (reg 133 [ m ]) in insn 53:
  Adding insn 23 to worklist
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 133 [ m ]) in insn 23:
Processing use of (reg 25 sfp) in insn 54:
Processing use of (reg 151 [+4 ]) in insn 54:
  Adding insn 52 to worklist
Processing use of (reg 13 sp) in insn 30:
Processing use of (reg 148) in insn 30:
  Adding insn 29 to worklist
Processing use of (reg 13 sp) in insn 35:
Processing use of (reg 0 r0) in insn 35:
  Adding insn 31 to worklist
Processing use of (reg 1 r1) in insn 35:
  Adding insn 32 to worklist
Processing use of (reg 2 r2) in insn 35:
  Adding insn 33 to worklist
Processing use of (reg 3 r3) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 151 [+4 ]) in insn 34:
Processing use of (reg 141 [ fpscr ]) in insn 33:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 147) in insn 32:
  Adding insn 28 to worklist
Processing use of (reg 25 sfp) in insn 28:
Processing use of (reg 138 [ dd ]) in insn 31:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 0 r0) in insn 47:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 140 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 25 sfp) in insn 16:
Processing use of (subreg (reg 135 [ D.4493 ]) 0) in insn 16:
  Adding insn 15 to worklist
Processing use of (subreg (reg 143) 0) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 142) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 133 [ m ]) in insn 13:
Processing use of (reg 25 sfp) in insn 19:
Processing use of (subreg (reg 145) 0) in insn 19:
  Adding insn 17 to worklist
Processing use of (reg 24 cc) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 135 [ D.4493 ]) in insn 20:


vfp_double_fsito

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,6u} r1={4d,1u} r2={4d,2u} r3={4d,2u} r11={1d,4u} r12={3d} r13={1d,7u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r25={1d,9u,1d} r26={1d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={2d,3u} r135={1d,2u} r138={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r145={1d,1u} r147={1d,1u} r148={1d,1u} r151={1d,2u} 
;;    total ref usage 314{262d,51u,1e} in 27{25 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249
0[0,5] 1[5,4] 2[9,4] 3[13,4] 11[17,1] 12[18,3] 13[21,1] 14[22,3] 15[25,2] 16[27,2] 17[29,2] 18[31,2] 19[33,2] 20[35,2] 21[37,2] 22[39,2] 23[41,2] 24[43,3] 25[46,1] 26[47,1] 27[48,2] 28[50,2] 29[52,2] 30[54,2] 31[56,2] 32[58,2] 33[60,2] 34[62,2] 35[64,2] 36[66,2] 37[68,2] 38[70,2] 39[72,2] 40[74,2] 41[76,2] 42[78,2] 43[80,2] 44[82,2] 45[84,2] 46[86,2] 47[88,2] 48[90,2] 49[92,2] 50[94,2] 51[96,2] 52[98,2] 53[100,2] 54[102,2] 55[104,2] 56[106,2] 57[108,2] 58[110,2] 59[112,2] 60[114,2] 61[116,2] 62[118,2] 63[120,2] 64[122,2] 65[124,2] 66[126,2] 67[128,2] 68[130,2] 69[132,2] 70[134,2] 71[136,2] 72[138,2] 73[140,2] 74[142,2] 75[144,2] 76[146,2] 77[148,2] 78[150,2] 79[152,2] 80[154,2] 81[156,2] 82[158,2] 83[160,2] 84[162,2] 85[164,2] 86[166,2] 87[168,2] 88[170,2] 89[172,2] 90[174,2] 91[176,2] 92[178,2] 93[180,2] 94[182,2] 95[184,2] 96[186,2] 97[188,2] 98[190,2] 99[192,2] 100[194,2] 101[196,2] 102[198,2] 103[200,2] 104[202,2] 105[204,2] 106[206,2] 107[208,2] 108[210,2] 109[212,2] 110[214,2] 111[216,2] 112[218,2] 113[220,2] 114[222,2] 115[224,2] 116[226,2] 117[228,2] 118[230,2] 119[232,2] 120[234,2] 121[236,2] 122[238,2] 123[240,2] 124[242,2] 125[244,2] 126[246,2] 127[248,2] 133[250,2] 135[252,1] 138[253,1] 140[254,1] 141[255,1] 142[256,1] 143[257,1] 145[258,1] 147[259,1] 148[260,1] 151[261,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 135 138 140 141 142 143 145
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 24 [cc] 133 135 138 140 141 142 143 145
;; live  kill	 14 [lr]
;; rd  in  	(10)
4, 8, 12, 16, 17, 20, 21, 24, 46, 47
;; rd  gen 	(10)
2, 44, 250, 252, 253, 254, 255, 256, 257, 258
;; rd  kill	(20)
0, 1, 2, 3, 4, 22, 23, 24, 43, 44, 45, 250, 251, 252, 253, 254, 255, 256, 257, 258

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 4 2 arch/arm/vfp/vfpdouble.c:495 (set (reg/v:SI 138 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 4 2 5 2 arch/arm/vfp/vfpdouble.c:495 (set (reg/v:SI 140 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:495 (set (reg/v:SI 141 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:497 (set (reg:SI 0 r0)
        (reg/v:SI 140 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ dm ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:497 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_float") [flags 0x41] <function_decl 0x10a9d100 vfp_get_float>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 13 2 arch/arm/vfp/vfpdouble.c:497 (set (reg/v:SI 133 [ m ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 13 11 14 2 arch/arm/vfp/vfpdouble.c:499 (set (reg:SI 142)
        (and:SI (reg/v:SI 133 [ m ])
            (const_int -2147483648 [0xffffffff80000000]))) 67 {*arm_andsi3_insn} (nil))

(insn 14 13 15 2 arch/arm/vfp/vfpdouble.c:499 (set (reg:SI 143)
        (lshiftrt:SI (reg:SI 142)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 142)
        (nil)))

(insn 15 14 16 2 arch/arm/vfp/vfpdouble.c:499 (set (reg:SI 135 [ D.4493 ])
        (zero_extend:SI (subreg:HI (reg:SI 143) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 143)
        (nil)))

(insn 16 15 17 2 arch/arm/vfp/vfpdouble.c:499 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -14 [0xfffffffffffffff2])) [0 vdm.sign+0 S2 A16])
        (subreg/s/u:HI (reg:SI 135 [ D.4493 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 17 16 19 2 arch/arm/vfp/vfpdouble.c:500 (set (reg:SI 145)
        (const_int 1085 [0x43d])) 167 {*arm_movsi_insn} (nil))

(insn 19 17 20 2 arch/arm/vfp/vfpdouble.c:500 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 vdm.exponent+0 S2 A64])
        (subreg:HI (reg:SI 145) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 145)
        (expr_list:REG_EQUAL (const_int 1085 [0x43d])
            (nil))))

(insn 20 19 21 2 arch/arm/vfp/vfpdouble.c:501 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.4493 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.4493 ])
        (nil)))

(jump_insn 21 20 22 2 arch/arm/vfp/vfpdouble.c:501 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; rd  out 	(18)
2, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 252, 253, 254, 255, 256, 257, 258


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  4 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u20(11){ }u21(13){ }u22(25){ }u23(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; live  gen 	 133
;; live  kill	
;; rd  in  	(18)
2, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 252, 253, 254, 255, 256, 257, 258
;; rd  gen 	(1)
251
;; rd  kill	(2)
250, 251

;; Pred edge  2 [61.0%]  (fallthru)
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 3 arch/arm/vfp/vfpdouble.c:501 discrim 1 (set (reg/v:SI 133 [ m ])
        (neg:SI (reg/v:SI 133 [ m ]))) 127 {*arm_negsi2} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; rd  out 	(18)
2, 8, 12, 16, 17, 20, 21, 44, 46, 47, 251, 252, 253, 254, 255, 256, 257, 258


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u25(11){ }u26(13){ }u27(25){ }u28(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 147 148 151
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 141
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 147 148 151
;; live  kill	 14 [lr]
;; rd  in  	(19)
2, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 251, 252, 253, 254, 255, 256, 257, 258
;; rd  gen 	(4)
0, 259, 260, 261
;; rd  kill	(11)
0, 1, 2, 3, 4, 22, 23, 24, 259, 260, 261

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
(code_label 24 23 25 4 375 "" [1 uses])

(note 25 24 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 25 53 4 arch/arm/vfp/vfpdouble.c:501 discrim 3 (set (reg:SI 151 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 53 52 54 4 arch/arm/vfp/vfpdouble.c:501 discrim 3 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdm.significand+0 S4 A64])
        (reg/v:SI 133 [ m ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 133 [ m ])
        (nil)))

(insn 54 53 28 4 arch/arm/vfp/vfpdouble.c:501 discrim 3 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 vdm.significand+4 S4 A32])
        (reg:SI 151 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 28 54 29 4 arch/arm/vfp/vfpdouble.c:503 (set (reg/f:SI 147)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 29 28 30 4 arch/arm/vfp/vfpdouble.c:503 (set (reg/f:SI 148)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x10ea85e0>)) 167 {*arm_movsi_insn} (nil))

(insn 30 29 31 4 arch/arm/vfp/vfpdouble.c:503 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 148)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 148)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x10ea85e0>)
            (nil))))

(insn 31 30 32 4 arch/arm/vfp/vfpdouble.c:503 (set (reg:SI 0 r0)
        (reg/v:SI 138 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ dd ])
        (nil)))

(insn 32 31 33 4 arch/arm/vfp/vfpdouble.c:503 (set (reg:SI 1 r1)
        (reg/f:SI 147)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 147)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 33 32 34 4 arch/arm/vfp/vfpdouble.c:503 (set (reg:SI 2 r2)
        (reg/v:SI 141 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ fpscr ])
        (nil)))

(insn 34 33 35 4 arch/arm/vfp/vfpdouble.c:503 (set (reg:SI 3 r3)
        (reg:SI 151 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 151 [+4 ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn 35 34 47 4 arch/arm/vfp/vfpdouble.c:503 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 47 35 0 4 arch/arm/vfp/vfpdouble.c:504 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(22)
0, 8, 12, 16, 17, 20, 21, 44, 46, 47, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fuito (vfp_double_fuito)[0:165]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


vfp_double_fuito

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={5d,6u} r1={4d,1u} r2={4d,2u} r3={4d,2u} r11={1d,2u} r12={3d} r13={1d,5u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,7u,1d} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r134={1d,1u} r136={1d,1u} r138={1d,1u} r139={1d,1u} r141={1d,3u} r143={1d,1u} r145={1d,1u} r146={1d,1u} 
;;    total ref usage 295{257d,37u,1e} in 21{19 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248
0[0,5] 1[5,4] 2[9,4] 3[13,4] 11[17,1] 12[18,3] 13[21,1] 14[22,3] 15[25,2] 16[27,2] 17[29,2] 18[31,2] 19[33,2] 20[35,2] 21[37,2] 22[39,2] 23[41,2] 24[43,2] 25[45,1] 26[46,1] 27[47,2] 28[49,2] 29[51,2] 30[53,2] 31[55,2] 32[57,2] 33[59,2] 34[61,2] 35[63,2] 36[65,2] 37[67,2] 38[69,2] 39[71,2] 40[73,2] 41[75,2] 42[77,2] 43[79,2] 44[81,2] 45[83,2] 46[85,2] 47[87,2] 48[89,2] 49[91,2] 50[93,2] 51[95,2] 52[97,2] 53[99,2] 54[101,2] 55[103,2] 56[105,2] 57[107,2] 58[109,2] 59[111,2] 60[113,2] 61[115,2] 62[117,2] 63[119,2] 64[121,2] 65[123,2] 66[125,2] 67[127,2] 68[129,2] 69[131,2] 70[133,2] 71[135,2] 72[137,2] 73[139,2] 74[141,2] 75[143,2] 76[145,2] 77[147,2] 78[149,2] 79[151,2] 80[153,2] 81[155,2] 82[157,2] 83[159,2] 84[161,2] 85[163,2] 86[165,2] 87[167,2] 88[169,2] 89[171,2] 90[173,2] 91[175,2] 92[177,2] 93[179,2] 94[181,2] 95[183,2] 96[185,2] 97[187,2] 98[189,2] 99[191,2] 100[193,2] 101[195,2] 102[197,2] 103[199,2] 104[201,2] 105[203,2] 106[205,2] 107[207,2] 108[209,2] 109[211,2] 110[213,2] 111[215,2] 112[217,2] 113[219,2] 114[221,2] 115[223,2] 116[225,2] 117[227,2] 118[229,2] 119[231,2] 120[233,2] 121[235,2] 122[237,2] 123[239,2] 124[241,2] 125[243,2] 126[245,2] 127[247,2] 134[249,1] 136[250,1] 138[251,1] 139[252,1] 141[253,1] 143[254,1] 145[255,1] 146[256,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d4(0){ }d8(1){ }d12(2){ }d16(3){ }d17(11){ }d20(12){ }d21(13){ }d24(14){ }d45(25){ }d46(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
4, 8, 12, 16, 17, 20, 21, 24, 45, 46
;; rd  kill	(27)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 45, 46
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
4, 8, 12, 16, 17, 20, 21, 24, 45, 46

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d17(bb 0 insn -1) }u1(13){ d21(bb 0 insn -1) }u2(25){ d45(bb 0 insn -1) }u3(26){ d46(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 136 138 139 141 143 145 146
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 134 136 138 139 141 143 145 146
;; live  kill	 14 [lr]
;; rd  in  	(10)
4, 8, 12, 16, 17, 20, 21, 24, 45, 46
;; rd  gen 	(9)
0, 249, 250, 251, 252, 253, 254, 255, 256
;; rd  kill	(16)
0, 1, 2, 3, 4, 22, 23, 24, 249, 250, 251, 252, 253, 254, 255, 256
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(17)
0, 8, 12, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254, 255, 256
;;  UD chains for artificial uses
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 25 { d45(bb 0 insn -1) }
;;   reg 26 { d46(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d4(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 2 { d12(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 5
;;      reg 3 { d16(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 9
;;      reg 138 { d251(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 10
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 0 { d3(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 11
;;      reg 0 { d2(bb 2 insn 10) }
;;   UD chains for insn luid 7 uid 14
;;      reg 25 { d45(bb 0 insn -1) }
;;      reg 141 { d253(bb 2 insn 12) }
;;   UD chains for insn luid 9 uid 17
;;      reg 25 { d45(bb 0 insn -1) }
;;      reg 143 { d254(bb 2 insn 15) }
;;   UD chains for insn luid 10 uid 45
;;      reg 25 { d45(bb 0 insn -1) }
;;      reg 134 { d249(bb 2 insn 11) }
;;   UD chains for insn luid 11 uid 46
;;      reg 25 { d45(bb 0 insn -1) }
;;      reg 141 { d253(bb 2 insn 12) }
;;   UD chains for insn luid 12 uid 20
;;      reg 25 { d45(bb 0 insn -1) }
;;   UD chains for insn luid 14 uid 22
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 146 { d256(bb 2 insn 21) }
;;   UD chains for insn luid 15 uid 23
;;      reg 136 { d250(bb 2 insn 2) }
;;   UD chains for insn luid 16 uid 24
;;      reg 145 { d255(bb 2 insn 20) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 17 uid 25
;;      reg 139 { d252(bb 2 insn 5) }
;;   UD chains for insn luid 18 uid 26
;;      reg 141 { d253(bb 2 insn 12) }
;;   UD chains for insn luid 19 uid 27
;;      reg 13 { d21(bb 0 insn -1) }
;;      reg 0 { d1(bb 2 insn 23) }
;;      reg 1 { d6(bb 2 insn 24) }
;;      reg 2 { d10(bb 2 insn 25) }
;;      reg 3 { d13(bb 2 insn 26) }
;;   UD chains for insn luid 20 uid 39
;;      reg 0 { d0(bb 2 insn 27) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u33(0){ d0(bb 2 insn 27) }u34(11){ d17(bb 0 insn -1) }u35(13){ d21(bb 0 insn -1) }u36(14){ }u37(25){ d45(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(17)
0, 8, 12, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254, 255, 256
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(17)
0, 8, 12, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254, 255, 256
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 27) }
;;   reg 11 { d17(bb 0 insn -1) }
;;   reg 13 { d21(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d45(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 39 to worklist
  Adding insn 27 to worklist
  Adding insn 22 to worklist
  Adding insn 46 to worklist
  Adding insn 45 to worklist
  Adding insn 17 to worklist
  Adding insn 14 to worklist
  Adding insn 10 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 138 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 25 sfp) in insn 14:
Processing use of (subreg (reg 141) 0) in insn 14:
  Adding insn 12 to worklist
Processing use of (reg 25 sfp) in insn 17:
Processing use of (subreg (reg 143) 0) in insn 17:
  Adding insn 15 to worklist
Processing use of (reg 25 sfp) in insn 45:
Processing use of (reg 134 [ D.4477 ]) in insn 45:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 25 sfp) in insn 46:
Processing use of (reg 141) in insn 46:
Processing use of (reg 13 sp) in insn 22:
Processing use of (reg 146) in insn 22:
  Adding insn 21 to worklist
Processing use of (reg 13 sp) in insn 27:
Processing use of (reg 0 r0) in insn 27:
  Adding insn 23 to worklist
Processing use of (reg 1 r1) in insn 27:
  Adding insn 24 to worklist
Processing use of (reg 2 r2) in insn 27:
  Adding insn 25 to worklist
Processing use of (reg 3 r3) in insn 27:
  Adding insn 26 to worklist
Processing use of (reg 141) in insn 26:
Processing use of (reg 139 [ fpscr ]) in insn 25:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 145) in insn 24:
  Adding insn 20 to worklist
Processing use of (reg 25 sfp) in insn 20:
Processing use of (reg 136 [ dd ]) in insn 23:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 0 r0) in insn 39:


vfp_double_fuito

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={5d,6u} r1={4d,1u} r2={4d,2u} r3={4d,2u} r11={1d,2u} r12={3d} r13={1d,5u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={1d,7u,1d} r26={1d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r134={1d,1u} r136={1d,1u} r138={1d,1u} r139={1d,1u} r141={1d,3u} r143={1d,1u} r145={1d,1u} r146={1d,1u} 
;;    total ref usage 295{257d,37u,1e} in 21{19 regular + 2 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248
0[0,5] 1[5,4] 2[9,4] 3[13,4] 11[17,1] 12[18,3] 13[21,1] 14[22,3] 15[25,2] 16[27,2] 17[29,2] 18[31,2] 19[33,2] 20[35,2] 21[37,2] 22[39,2] 23[41,2] 24[43,2] 25[45,1] 26[46,1] 27[47,2] 28[49,2] 29[51,2] 30[53,2] 31[55,2] 32[57,2] 33[59,2] 34[61,2] 35[63,2] 36[65,2] 37[67,2] 38[69,2] 39[71,2] 40[73,2] 41[75,2] 42[77,2] 43[79,2] 44[81,2] 45[83,2] 46[85,2] 47[87,2] 48[89,2] 49[91,2] 50[93,2] 51[95,2] 52[97,2] 53[99,2] 54[101,2] 55[103,2] 56[105,2] 57[107,2] 58[109,2] 59[111,2] 60[113,2] 61[115,2] 62[117,2] 63[119,2] 64[121,2] 65[123,2] 66[125,2] 67[127,2] 68[129,2] 69[131,2] 70[133,2] 71[135,2] 72[137,2] 73[139,2] 74[141,2] 75[143,2] 76[145,2] 77[147,2] 78[149,2] 79[151,2] 80[153,2] 81[155,2] 82[157,2] 83[159,2] 84[161,2] 85[163,2] 86[165,2] 87[167,2] 88[169,2] 89[171,2] 90[173,2] 91[175,2] 92[177,2] 93[179,2] 94[181,2] 95[183,2] 96[185,2] 97[187,2] 98[189,2] 99[191,2] 100[193,2] 101[195,2] 102[197,2] 103[199,2] 104[201,2] 105[203,2] 106[205,2] 107[207,2] 108[209,2] 109[211,2] 110[213,2] 111[215,2] 112[217,2] 113[219,2] 114[221,2] 115[223,2] 116[225,2] 117[227,2] 118[229,2] 119[231,2] 120[233,2] 121[235,2] 122[237,2] 123[239,2] 124[241,2] 125[243,2] 126[245,2] 127[247,2] 134[249,1] 136[250,1] 138[251,1] 139[252,1] 141[253,1] 143[254,1] 145[255,1] 146[256,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 136 138 139 141 143 145 146
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 134 136 138 139 141 143 145 146
;; live  kill	 14 [lr]
;; rd  in  	(10)
4, 8, 12, 16, 17, 20, 21, 24, 45, 46
;; rd  gen 	(9)
0, 249, 250, 251, 252, 253, 254, 255, 256
;; rd  kill	(16)
0, 1, 2, 3, 4, 22, 23, 24, 249, 250, 251, 252, 253, 254, 255, 256

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 4 2 arch/arm/vfp/vfpdouble.c:483 (set (reg/v:SI 136 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 4 2 5 2 arch/arm/vfp/vfpdouble.c:483 (set (reg/v:SI 138 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:483 (set (reg/v:SI 139 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:485 (set (reg:SI 0 r0)
        (reg/v:SI 138 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ dm ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:485 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_float") [flags 0x41] <function_decl 0x10a9d100 vfp_get_float>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:485 (set (reg:SI 134 [ D.4477 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 12 11 14 2 arch/arm/vfp/vfpdouble.c:487 (set (reg:SI 141)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 14 12 15 2 arch/arm/vfp/vfpdouble.c:487 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -14 [0xfffffffffffffff2])) [0 vdm.sign+0 S2 A16])
        (subreg:HI (reg:SI 141) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 15 14 17 2 arch/arm/vfp/vfpdouble.c:488 (set (reg:SI 143)
        (const_int 1085 [0x43d])) 167 {*arm_movsi_insn} (nil))

(insn 17 15 45 2 arch/arm/vfp/vfpdouble.c:488 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 vdm.exponent+0 S2 A64])
        (subreg:HI (reg:SI 143) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 143)
        (expr_list:REG_EQUAL (const_int 1085 [0x43d])
            (nil))))

(insn 45 17 46 2 arch/arm/vfp/vfpdouble.c:489 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdm.significand+0 S4 A64])
        (reg:SI 134 [ D.4477 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ D.4477 ])
        (nil)))

(insn 46 45 20 2 arch/arm/vfp/vfpdouble.c:489 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 vdm.significand+4 S4 A32])
        (reg:SI 141)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 20 46 21 2 arch/arm/vfp/vfpdouble.c:491 (set (reg/f:SI 145)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 21 20 22 2 arch/arm/vfp/vfpdouble.c:491 (set (reg/f:SI 146)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x10ea8640>)) 167 {*arm_movsi_insn} (nil))

(insn 22 21 23 2 arch/arm/vfp/vfpdouble.c:491 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 146)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 146)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x10ea8640>)
            (nil))))

(insn 23 22 24 2 arch/arm/vfp/vfpdouble.c:491 (set (reg:SI 0 r0)
        (reg/v:SI 136 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 136 [ dd ])
        (nil)))

(insn 24 23 25 2 arch/arm/vfp/vfpdouble.c:491 (set (reg:SI 1 r1)
        (reg/f:SI 145)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 145)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 25 24 26 2 arch/arm/vfp/vfpdouble.c:491 (set (reg:SI 2 r2)
        (reg/v:SI 139 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ fpscr ])
        (nil)))

(insn 26 25 27 2 arch/arm/vfp/vfpdouble.c:491 (set (reg:SI 3 r3)
        (reg:SI 141)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 141)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn 27 26 39 2 arch/arm/vfp/vfpdouble.c:491 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 39 27 0 2 arch/arm/vfp/vfpdouble.c:492 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(17)
0, 8, 12, 16, 17, 20, 21, 45, 46, 249, 250, 251, 252, 253, 254, 255, 256


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fcvts (vfp_double_fcvts)[0:164]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 33 count 45 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 33 count 48 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 33 count 48 (  1.9)


vfp_double_fcvts

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,9u} r1={7d,3u} r2={6d,2u} r3={6d,2u} r11={1d,24u} r12={5d} r13={1d,28u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={17d,12u} r25={1d,39u,2d} r26={1d,23u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={1d,2u} r134={1d,4u} r135={5d,11u,2d} r136={3d,2u} r137={5d,4u} r138={1d,2u} r139={1d,5u,1d} r141={1d,2u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r151={1d,1u,1d} r152={1d,1u} r155={1d,1u} r156={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,2u} r161={1d,1u} r162={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={2d,2u} r175={1d,2u} r176={1d,1u} r177={2d,2u} r178={2d,2u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,2u} r185={1d,1u} r186={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u,1d} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r200={1d,1u} r202={1d,1u} r204={1d,1u} r205={2d,3u} 
;;    total ref usage 804{568d,229u,7e} in 119{115 regular + 4 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499
0[0,10] 1[10,7] 2[17,6] 3[23,6] 11[29,1] 12[30,5] 13[35,1] 14[36,5] 15[41,4] 16[45,4] 17[49,4] 18[53,4] 19[57,4] 20[61,4] 21[65,4] 22[69,4] 23[73,4] 24[77,17] 25[94,1] 26[95,1] 27[96,4] 28[100,4] 29[104,4] 30[108,4] 31[112,4] 32[116,4] 33[120,4] 34[124,4] 35[128,4] 36[132,4] 37[136,4] 38[140,4] 39[144,4] 40[148,4] 41[152,4] 42[156,4] 43[160,4] 44[164,4] 45[168,4] 46[172,4] 47[176,4] 48[180,4] 49[184,4] 50[188,4] 51[192,4] 52[196,4] 53[200,4] 54[204,4] 55[208,4] 56[212,4] 57[216,4] 58[220,4] 59[224,4] 60[228,4] 61[232,4] 62[236,4] 63[240,4] 64[244,4] 65[248,4] 66[252,4] 67[256,4] 68[260,4] 69[264,4] 70[268,4] 71[272,4] 72[276,4] 73[280,4] 74[284,4] 75[288,4] 76[292,4] 77[296,4] 78[300,4] 79[304,4] 80[308,4] 81[312,4] 82[316,4] 83[320,4] 84[324,4] 85[328,4] 86[332,4] 87[336,4] 88[340,4] 89[344,4] 90[348,4] 91[352,4] 92[356,4] 93[360,4] 94[364,4] 95[368,4] 96[372,4] 97[376,4] 98[380,4] 99[384,4] 100[388,4] 101[392,4] 102[396,4] 103[400,4] 104[404,4] 105[408,4] 106[412,4] 107[416,4] 108[420,4] 109[424,4] 110[428,4] 111[432,4] 112[436,4] 113[440,4] 114[444,4] 115[448,4] 116[452,4] 117[456,4] 118[460,4] 119[464,4] 120[468,4] 121[472,4] 122[476,4] 123[480,4] 124[484,4] 125[488,4] 126[492,4] 127[496,4] 133[500,1] 134[501,1] 135[502,5] 136[507,3] 137[510,5] 138[515,1] 139[516,1] 141[517,1] 143[518,1] 144[519,1] 145[520,1] 146[521,1] 151[522,1] 152[523,1] 155[524,1] 156[525,1] 158[526,1] 159[527,1] 160[528,1] 161[529,1] 162[530,1] 165[531,1] 166[532,1] 167[533,1] 168[534,1] 169[535,1] 170[536,1] 171[537,1] 172[538,1] 173[539,1] 174[540,2] 175[542,1] 176[543,1] 177[544,2] 178[546,2] 179[548,1] 180[549,1] 181[550,1] 182[551,1] 185[552,1] 186[553,1] 190[554,1] 191[555,1] 192[556,1] 193[557,1] 194[558,1] 195[559,1] 196[560,1] 197[561,1] 198[562,1] 200[563,1] 202[564,1] 204[565,1] 205[566,2] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d9(0){ }d16(1){ }d22(2){ }d28(3){ }d29(11){ }d34(12){ }d35(13){ }d40(14){ }d94(25){ }d95(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
9, 16, 22, 28, 29, 34, 35, 40, 94, 95
;; rd  kill	(43)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 94, 95
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
9, 16, 22, 28, 29, 34, 35, 40, 94, 95

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d29(bb 0 insn -1) }u1(13){ d35(bb 0 insn -1) }u2(25){ d94(bb 0 insn -1) }u3(26){ d95(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 139 141 143 144 145 146 151 152 155 156 158 159 160 161 162 165 166 167 168 200 202 204 205
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 135 139 141 143 144 145 146 151 152 155 156 158 159 160 161 162 165 166 167 168 200 202 204 205
;; live  kill	 14 [lr]
;; rd  in  	(10)
9, 16, 22, 28, 29, 34, 35, 40, 94, 95
;; rd  gen 	(28)
7, 15, 91, 501, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 563, 564, 565, 566
;; rd  kill	(64)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 36, 37, 38, 39, 40, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 501, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 563, 564, 565, 566, 567
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; rd  out 	(35)
7, 15, 22, 28, 29, 34, 35, 91, 94, 95, 501, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d9(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 2 { d22(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 5
;;      reg 3 { d28(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 9
;;      reg 143 { d518(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 10
;;      reg 13 { d35(bb 0 insn -1) }
;;      reg 0 { d8(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 11
;;      reg 0 { d7(bb 2 insn 10) }
;;      reg 1 { d15(bb 2 insn 10) }
;;   UD chains for insn luid 7 uid 13
;;      reg 139 { d516(bb 2 insn 11) }
;;      reg 146 { d521(bb 2 insn 12) }
;;   eq_note reg 139 { }
;;   UD chains for insn luid 8 uid 14
;;      reg 145 { d520(bb 2 insn 13) }
;;   UD chains for insn luid 9 uid 16
;;      reg 25 { d94(bb 0 insn -1) }
;;      reg 200 { d563(bb 2 insn 14) }
;;   UD chains for insn luid 10 uid 17
;;      reg 139 { d516(bb 2 insn 11) }
;;   UD chains for insn luid 11 uid 19
;;      reg 202 { d564(bb 2 insn 17) }
;;   UD chains for insn luid 12 uid 20
;;      reg 151 { d522(bb 2 insn 19) }
;;   UD chains for insn luid 13 uid 21
;;      reg 152 { d523(bb 2 insn 20) }
;;   eq_note reg 151 { }
;;   UD chains for insn luid 14 uid 22
;;      reg 25 { d94(bb 0 insn -1) }
;;      reg 134 { d501(bb 2 insn 21) }
;;   UD chains for insn luid 15 uid 23
;;      reg 139 { d516(bb 2 insn 11) }
;;   UD chains for insn luid 16 uid 24
;;      reg 139 { d516(bb 2 insn 11) }
;;   UD chains for insn luid 17 uid 25
;;      reg 155 { d524(bb 2 insn 23) }
;;      reg 205 { d567(bb 2 insn 24) }
;;   UD chains for insn luid 18 uid 26
;;      reg 139 { d516(bb 2 insn 11) }
;;   UD chains for insn luid 19 uid 27
;;      reg 205 { d566(bb 2 insn 25) }
;;   UD chains for insn luid 21 uid 28
;;      reg 135 read/write { d502(bb 2 insn 197) }
;;      reg 204 { d565(bb 2 insn 26) }
;;   UD chains for insn luid 22 uid 29
;;      reg 135 { d506(bb 2 insn 28) d502(bb 2 insn 197) }
;;      reg 135 read/write { d506(bb 2 insn 28) d502(bb 2 insn 197) }
;;      reg 156 { d525(bb 2 insn 27) }
;;   UD chains for insn luid 23 uid 30
;;      reg 135 read/write { d506(bb 2 insn 28) d505(bb 2 insn 29) d502(bb 2 insn 197) }
;;      reg 205 { d566(bb 2 insn 25) }
;;   UD chains for insn luid 25 uid 32
;;      reg 159 { d527(bb 2 insn 31) }
;;   UD chains for insn luid 26 uid 33
;;      reg 134 { d501(bb 2 insn 21) }
;;   UD chains for insn luid 27 uid 34
;;      reg 158 { d526(bb 2 insn 32) }
;;   UD chains for insn luid 28 uid 35
;;      reg 160 { d528(bb 2 insn 33) }
;;      reg 161 { d529(bb 2 insn 34) }
;;   UD chains for insn luid 29 uid 36
;;      reg 24 { d92(bb 2 insn 35) }
;;   UD chains for insn luid 30 uid 39
;;      reg 160 { d528(bb 2 insn 33) }
;;   UD chains for insn luid 31 uid 40
;;      reg 24 { d77(bb 2 insn 39) }
;;   UD chains for insn luid 32 uid 42
;;      reg 162 { d530(bb 2 insn 36) }
;;      reg 165 { d531(bb 2 insn 40) }
;;   UD chains for insn luid 33 uid 43
;;      reg 166 { d532(bb 2 insn 42) }
;;   UD chains for insn luid 34 uid 44
;;      reg 167 { d533(bb 2 insn 43) }
;;   UD chains for insn luid 35 uid 45
;;      reg 168 { d534(bb 2 insn 44) }
;;   UD chains for insn luid 36 uid 46
;;      reg 24 { d91(bb 2 insn 45) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u52(11){ d29(bb 0 insn -1) }u53(13){ d35(bb 0 insn -1) }u54(25){ d94(bb 0 insn -1) }u55(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 135 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  gen 	 135 169
;; live  kill	
;; rd  in  	(35)
7, 15, 22, 28, 29, 34, 35, 91, 94, 95, 501, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 563, 564, 565, 566
;; rd  gen 	(2)
503, 535
;; rd  kill	(6)
502, 503, 504, 505, 506, 535
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; rd  out 	(36)
7, 15, 22, 28, 29, 34, 35, 91, 94, 95, 501, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 49
;;      reg 135 { d504(bb 2 insn 30) }
;;      reg 169 { d535(bb 3 insn 48) }
;;   eq_note reg 135 { }

( 2 3 )->[4]->( 5 10 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u59(11){ d29(bb 0 insn -1) }u60(13){ d35(bb 0 insn -1) }u61(25){ d94(bb 0 insn -1) }u62(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135
;; lr  def 	 24 [cc] 170 171 172 173
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  gen 	 24 [cc] 170 171 172 173
;; live  kill	
;; rd  in  	(37)
7, 15, 22, 28, 29, 34, 35, 91, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 563, 564, 565, 566
;; rd  gen 	(5)
90, 536, 537, 538, 539
;; rd  kill	(21)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 536, 537, 538, 539
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; rd  out 	(41)
7, 15, 22, 28, 29, 34, 35, 90, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 52
;;      reg 25 { d94(bb 0 insn -1) }
;;      reg 135 { d504(bb 2 insn 30) d503(bb 3 insn 49) }
;;   UD chains for insn luid 2 uid 54
;;      reg 171 { d537(bb 4 insn 53) }
;;   UD chains for insn luid 3 uid 55
;;      reg 134 { d501(bb 2 insn 21) }
;;   UD chains for insn luid 4 uid 56
;;      reg 170 { d536(bb 4 insn 54) }
;;   UD chains for insn luid 5 uid 57
;;      reg 172 { d538(bb 4 insn 55) }
;;      reg 173 { d539(bb 4 insn 56) }
;;   UD chains for insn luid 6 uid 58
;;      reg 24 { d90(bb 4 insn 57) }

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u71(11){ d29(bb 0 insn -1) }u72(13){ d35(bb 0 insn -1) }u73(25){ d94(bb 0 insn -1) }u74(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 174
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  gen 	 24 [cc] 174
;; live  kill	
;; rd  in  	(41)
7, 15, 22, 28, 29, 34, 35, 90, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;; rd  gen 	(2)
89, 540
;; rd  kill	(19)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 540, 541
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; rd  out 	(42)
7, 15, 22, 28, 29, 34, 35, 89, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 60
;;      reg 135 { d504(bb 2 insn 30) d503(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 61
;;      reg 135 { d504(bb 2 insn 30) d503(bb 3 insn 49) }
;;      reg 174 { d541(bb 5 insn 60) }
;;   UD chains for insn luid 2 uid 62
;;      reg 174 { d540(bb 5 insn 61) }
;;   UD chains for insn luid 3 uid 63
;;      reg 24 { d89(bb 5 insn 62) }

( 5 )->[6]->( 13 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u80(11){ d29(bb 0 insn -1) }u81(13){ d35(bb 0 insn -1) }u82(25){ d94(bb 0 insn -1) }u83(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  gen 	 137
;; live  kill	
;; rd  in  	(42)
7, 15, 22, 28, 29, 34, 35, 89, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 564, 565, 566
;; rd  gen 	(1)
514
;; rd  kill	(5)
510, 511, 512, 513, 514
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; rd  out 	(43)
7, 15, 22, 28, 29, 34, 35, 89, 94, 95, 501, 503, 504, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }

( 5 )->[7]->( 9 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u84(11){ d29(bb 0 insn -1) }u85(13){ d35(bb 0 insn -1) }u86(25){ d94(bb 0 insn -1) }u87(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 175 176 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  gen 	 24 [cc] 175 176 177
;; live  kill	
;; rd  in  	(42)
7, 15, 22, 28, 29, 34, 35, 89, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 564, 565, 566
;; rd  gen 	(4)
88, 542, 543, 544
;; rd  kill	(21)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 542, 543, 544, 545
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; rd  out 	(45)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 71
;;      reg 135 { d504(bb 2 insn 30) d503(bb 3 insn 49) }
;;      reg 176 { d543(bb 7 insn 70) }
;;   eq_note reg 135 { }
;;   UD chains for insn luid 2 uid 72
;;      reg 175 { d542(bb 7 insn 71) }
;;   UD chains for insn luid 3 uid 73
;;      reg 175 { d542(bb 7 insn 71) }
;;      reg 177 { d545(bb 7 insn 72) }
;;   UD chains for insn luid 4 uid 74
;;      reg 177 { d544(bb 7 insn 73) }
;;   UD chains for insn luid 5 uid 75
;;      reg 24 { d88(bb 7 insn 74) }

( 7 )->[8]->( 14 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u96(11){ d29(bb 0 insn -1) }u97(13){ d35(bb 0 insn -1) }u98(25){ d94(bb 0 insn -1) }u99(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  gen 	 136 137
;; live  kill	
;; rd  in  	(45)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566
;; rd  gen 	(2)
509, 513
;; rd  kill	(8)
507, 508, 509, 510, 511, 512, 513, 514
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; rd  out 	(47)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 509, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }

( 7 )->[9]->( 13 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u100(11){ d29(bb 0 insn -1) }u101(13){ d35(bb 0 insn -1) }u102(25){ d94(bb 0 insn -1) }u103(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  gen 	 137
;; live  kill	
;; rd  in  	(45)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566
;; rd  gen 	(1)
512
;; rd  kill	(5)
510, 511, 512, 513, 514
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; rd  out 	(46)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }

( 4 )->[10]->( 12 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u104(11){ d29(bb 0 insn -1) }u105(13){ d35(bb 0 insn -1) }u106(25){ d94(bb 0 insn -1) }u107(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(41)
7, 15, 22, 28, 29, 34, 35, 90, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;; rd  gen 	(1)
87
;; rd  kill	(17)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; rd  out 	(41)
7, 15, 22, 28, 29, 34, 35, 87, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 88
;;      reg 134 { d501(bb 2 insn 21) }
;;   UD chains for insn luid 1 uid 89
;;      reg 24 { d87(bb 10 insn 88) }

( 10 )->[11]->( 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u110(11){ d29(bb 0 insn -1) }u111(13){ d35(bb 0 insn -1) }u112(25){ d94(bb 0 insn -1) }u113(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  gen 	 137
;; live  kill	
;; rd  in  	(41)
7, 15, 22, 28, 29, 34, 35, 87, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;; rd  gen 	(1)
511
;; rd  kill	(5)
510, 511, 512, 513, 514
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; rd  out 	(42)
7, 15, 22, 28, 29, 34, 35, 87, 94, 95, 501, 503, 504, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }

( 10 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u114(11){ d29(bb 0 insn -1) }u115(13){ d35(bb 0 insn -1) }u116(25){ d94(bb 0 insn -1) }u117(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 137 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  gen 	 24 [cc] 137 178
;; live  kill	
;; rd  in  	(41)
7, 15, 22, 28, 29, 34, 35, 87, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;; rd  gen 	(3)
86, 510, 546
;; rd  kill	(24)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 510, 511, 512, 513, 514, 546, 547
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; rd  out 	(43)
7, 15, 22, 28, 29, 34, 35, 86, 94, 95, 501, 503, 504, 510, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 546, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 96
;;      reg 135 { d504(bb 2 insn 30) d503(bb 3 insn 49) }
;;   UD chains for insn luid 1 uid 97
;;      reg 135 { d504(bb 2 insn 30) d503(bb 3 insn 49) }
;;      reg 178 { d547(bb 12 insn 96) }
;;   UD chains for insn luid 2 uid 98
;;      reg 178 { d546(bb 12 insn 97) }
;;   UD chains for insn luid 3 uid 196
;;      reg 24 { d86(bb 12 insn 98) }

( 12 6 9 11 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u123(11){ d29(bb 0 insn -1) }u124(13){ d35(bb 0 insn -1) }u125(25){ d94(bb 0 insn -1) }u126(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  gen 	 136
;; live  kill	
;; rd  in  	(53)
7, 15, 22, 28, 29, 34, 35, 86, 87, 88, 89, 94, 95, 501, 503, 504, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 563, 564, 565, 566
;; rd  gen 	(1)
508
;; rd  kill	(3)
507, 508, 509
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; rd  out 	(54)
7, 15, 22, 28, 29, 34, 35, 86, 87, 88, 89, 94, 95, 501, 503, 504, 508, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }

( 13 8 )->[14]->( 15 16 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u127(11){ d29(bb 0 insn -1) }u128(13){ d35(bb 0 insn -1) }u129(25){ d94(bb 0 insn -1) }u130(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  gen 	 24 [cc] 179
;; live  kill	
;; rd  in  	(56)
7, 15, 22, 28, 29, 34, 35, 86, 87, 88, 89, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 563, 564, 565, 566
;; rd  gen 	(2)
85, 548
;; rd  kill	(18)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 548
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; rd  out 	(54)
7, 15, 22, 28, 29, 34, 35, 85, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 112
;;      reg 137 { d514(bb 6 insn 65) d513(bb 8 insn 77) d512(bb 9 insn 83) d511(bb 11 insn 91) d510(bb 12 insn 196) }
;;   UD chains for insn luid 1 uid 113
;;      reg 179 { d548(bb 14 insn 112) }
;;   UD chains for insn luid 2 uid 114
;;      reg 24 { d85(bb 14 insn 113) }

( 14 )->[15]->( 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u134(11){ d29(bb 0 insn -1) }u135(13){ d35(bb 0 insn -1) }u136(25){ d94(bb 0 insn -1) }u137(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  gen 	 0 [r0] 180
;; live  kill	 14 [lr]
;; rd  in  	(54)
7, 15, 22, 28, 29, 34, 35, 85, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 563, 564, 565, 566
;; rd  gen 	(1)
549
;; rd  kill	(6)
36, 37, 38, 39, 40, 549
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; rd  out 	(55)
7, 15, 22, 28, 29, 34, 35, 85, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 116
;;      reg 25 { d94(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 117
;;      reg 180 { d549(bb 15 insn 116) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 118
;;      reg 13 { d35(bb 0 insn -1) }
;;      reg 0 { d6(bb 15 insn 117) }

( 14 15 )->[16]->( 17 19 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u143(11){ d29(bb 0 insn -1) }u144(13){ d35(bb 0 insn -1) }u145(25){ d94(bb 0 insn -1) }u146(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 133 138 181 182
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  gen 	 24 [cc] 133 138 181 182
;; live  kill	 24 [cc]
;; rd  in  	(55)
7, 15, 22, 28, 29, 34, 35, 85, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 563, 564, 565, 566
;; rd  gen 	(5)
82, 500, 515, 550, 551
;; rd  kill	(21)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 500, 515, 550, 551
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 138 141 144 182
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 138 141 144 182
;; rd  out 	(59)
7, 15, 22, 28, 29, 34, 35, 82, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 121
;;      reg 25 { d94(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 122
;;      reg 25 { d94(bb 0 insn -1) }
;;      reg 138 { d515(bb 16 insn 121) }
;;   UD chains for insn luid 2 uid 123
;;      reg 25 { d94(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 124
;;      reg 181 { d550(bb 16 insn 123) }
;;   UD chains for insn luid 4 uid 125
;;      reg 25 { d94(bb 0 insn -1) }
;;      reg 133 { d500(bb 16 insn 124) }
;;   UD chains for insn luid 5 uid 126
;;      reg 137 { d514(bb 6 insn 65) d513(bb 8 insn 77) d512(bb 9 insn 83) d511(bb 11 insn 91) d510(bb 12 insn 196) }
;;   UD chains for insn luid 6 uid 127
;;      reg 182 { d551(bb 16 insn 126) }
;;   UD chains for insn luid 7 uid 128
;;      reg 24 { d82(bb 16 insn 127) }

( 16 )->[17]->( 18 23 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u157(11){ d29(bb 0 insn -1) }u158(13){ d35(bb 0 insn -1) }u159(25){ d94(bb 0 insn -1) }u160(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 138 141
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(59)
7, 15, 22, 28, 29, 34, 35, 82, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566
;; rd  gen 	(1)
81
;; rd  kill	(17)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138 141
;; rd  out 	(59)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 132
;;      reg 25 { d94(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 133
;;      reg 137 { d514(bb 6 insn 65) d513(bb 8 insn 77) d512(bb 9 insn 83) d511(bb 11 insn 91) d510(bb 12 insn 196) }
;;   UD chains for insn luid 2 uid 134
;;      reg 24 { d81(bb 17 insn 133) }

( 17 )->[18]->( 23 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u164(11){ d29(bb 0 insn -1) }u165(13){ d35(bb 0 insn -1) }u166(25){ d94(bb 0 insn -1) }u167(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138 141
;; live  gen 	 185
;; live  kill	
;; rd  in  	(59)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566
;; rd  gen 	(1)
552
;; rd  kill	(1)
552
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 141
;; rd  out 	(60)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 136
;;      reg 133 { d500(bb 16 insn 124) }
;;   UD chains for insn luid 1 uid 137
;;      reg 25 { d94(bb 0 insn -1) }
;;      reg 185 { d552(bb 18 insn 136) }

( 16 )->[19]->( 20 21 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u171(11){ d29(bb 0 insn -1) }u172(13){ d35(bb 0 insn -1) }u173(25){ d94(bb 0 insn -1) }u174(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144 182
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 186
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144 182
;; live  gen 	 24 [cc] 186
;; live  kill	
;; rd  in  	(59)
7, 15, 22, 28, 29, 34, 35, 82, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566
;; rd  gen 	(2)
80, 553
;; rd  kill	(18)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 553
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144 182
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144 182
;; rd  out 	(60)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 142
;;      reg 137 { d514(bb 6 insn 65) d513(bb 8 insn 77) d512(bb 9 insn 83) d511(bb 11 insn 91) d510(bb 12 insn 196) }
;;   UD chains for insn luid 1 uid 143
;;      reg 186 { d553(bb 19 insn 142) }
;;   UD chains for insn luid 2 uid 144
;;      reg 24 { d80(bb 19 insn 143) }

( 19 )->[20]->( 22 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u178(11){ d29(bb 0 insn -1) }u179(13){ d35(bb 0 insn -1) }u180(25){ d94(bb 0 insn -1) }u181(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144 182
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 182
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144 182
;; live  gen 	
;; live  kill	
;; rd  in  	(60)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 563, 564, 565, 566
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; rd  out 	(60)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 148
;;      reg 25 { d94(bb 0 insn -1) }
;;      reg 182 { d551(bb 16 insn 126) }

( 19 )->[21]->( 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u184(11){ d29(bb 0 insn -1) }u185(13){ d35(bb 0 insn -1) }u186(25){ d94(bb 0 insn -1) }u187(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 190 191
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; live  gen 	 190 191
;; live  kill	
;; rd  in  	(60)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 563, 564, 565, 566
;; rd  gen 	(2)
554, 555
;; rd  kill	(2)
554, 555
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; rd  out 	(62)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 554, 555, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 153
;;      reg 25 { d94(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 155
;;      reg 190 { d554(bb 21 insn 153) }
;;   UD chains for insn luid 2 uid 156
;;      reg 25 { d94(bb 0 insn -1) }
;;      reg 191 { d555(bb 21 insn 155) }

( 21 20 )->[22]->( 24 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u192(11){ d29(bb 0 insn -1) }u193(13){ d35(bb 0 insn -1) }u194(25){ d94(bb 0 insn -1) }u195(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 192
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 136 192
;; live  kill	 14 [lr]
;; rd  in  	(62)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 554, 555, 563, 564, 565, 566
;; rd  gen 	(3)
3, 507, 556
;; rd  kill	(19)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 36, 37, 38, 39, 40, 507, 508, 509, 556
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; rd  out 	(62)
3, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 554, 555, 556, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 159
;;      reg 25 { d94(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 160
;;      reg 141 { d517(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 161
;;      reg 192 { d556(bb 22 insn 159) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 3 uid 162
;;      reg 144 { d519(bb 2 insn 5) }
;;   UD chains for insn luid 4 uid 163
;;      reg 136 { d509(bb 8 insn 78) d508(bb 13 insn 109) }
;;   UD chains for insn luid 5 uid 164
;;      reg 13 { d35(bb 0 insn -1) }
;;      reg 0 { d4(bb 22 insn 160) }
;;      reg 1 { d13(bb 22 insn 161) }
;;      reg 2 { d19(bb 22 insn 162) }
;;      reg 3 { d25(bb 22 insn 163) }
;;   UD chains for insn luid 6 uid 165
;;      reg 0 { d3(bb 22 insn 164) }

( 17 18 )->[23]->( 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u208(11){ d29(bb 0 insn -1) }u209(13){ d35(bb 0 insn -1) }u210(25){ d94(bb 0 insn -1) }u211(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 193 194 195 196 197 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 141
;; live  gen 	 0 [r0] 1 [r1] 193 194 195 196 197 198
;; live  kill	 14 [lr]
;; rd  in  	(60)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 563, 564, 565, 566
;; rd  gen 	(6)
557, 558, 559, 560, 561, 562
;; rd  kill	(11)
36, 37, 38, 39, 40, 557, 558, 559, 560, 561, 562
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; rd  out 	(66)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 170
;;      reg 138 { d515(bb 16 insn 121) }
;;   UD chains for insn luid 1 uid 171
;;      reg 193 { d557(bb 23 insn 170) }
;;   UD chains for insn luid 2 uid 172
;;      reg 195 { d559(bb 23 insn 171) }
;;   eq_note reg 193 { }
;;   UD chains for insn luid 3 uid 173
;;      reg 25 { d94(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 174
;;      reg 197 { d561(bb 23 insn 173) }
;;   UD chains for insn luid 5 uid 175
;;      reg 194 { d558(bb 23 insn 172) }
;;      reg 196 { d560(bb 23 insn 174) }
;;   UD chains for insn luid 6 uid 176
;;      reg 198 { d562(bb 23 insn 175) }
;;   UD chains for insn luid 7 uid 177
;;      reg 141 { d517(bb 2 insn 2) }
;;   UD chains for insn luid 8 uid 178
;;      reg 13 { d35(bb 0 insn -1) }
;;      reg 0 { d2(bb 23 insn 176) }
;;      reg 1 { d11(bb 23 insn 177) }

( 23 22 )->[24]->( 1 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u225(11){ d29(bb 0 insn -1) }u226(13){ d35(bb 0 insn -1) }u227(25){ d94(bb 0 insn -1) }u228(26){ d95(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(73)
3, 7, 15, 22, 28, 29, 34, 35, 80, 81, 94, 95, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566
;; rd  gen 	(1)
0
;; rd  kill	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(72)
0, 15, 22, 28, 29, 34, 35, 80, 81, 94, 95, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 25 { d94(bb 0 insn -1) }
;;   reg 26 { d95(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 185
;;      reg 136 { d509(bb 8 insn 78) d508(bb 13 insn 109) d507(bb 22 insn 165) }
;;   UD chains for insn luid 1 uid 191
;;      reg 0 { d0(bb 24 insn 185) }

( 24 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u231(0){ d0(bb 24 insn 185) }u232(11){ d29(bb 0 insn -1) }u233(13){ d35(bb 0 insn -1) }u234(14){ }u235(25){ d94(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(72)
0, 15, 22, 28, 29, 34, 35, 80, 81, 94, 95, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(72)
0, 15, 22, 28, 29, 34, 35, 80, 81, 94, 95, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 24 insn 185) }
;;   reg 11 { d29(bb 0 insn -1) }
;;   reg 13 { d35(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d94(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 46 to worklist
  Adding insn 22 to worklist
  Adding insn 16 to worklist
  Adding insn 10 to worklist
  Adding insn 58 to worklist
  Adding insn 52 to worklist
  Adding insn 63 to worklist
  Adding insn 198 to worklist
  Adding insn 75 to worklist
  Adding insn 200 to worklist
  Adding insn 202 to worklist
  Adding insn 89 to worklist
  Adding insn 204 to worklist
  Adding insn 114 to worklist
  Adding insn 118 to worklist
  Adding insn 128 to worklist
  Adding insn 125 to worklist
  Adding insn 122 to worklist
  Adding insn 134 to worklist
  Adding insn 132 to worklist
  Adding insn 206 to worklist
  Adding insn 137 to worklist
  Adding insn 144 to worklist
  Adding insn 208 to worklist
  Adding insn 148 to worklist
  Adding insn 156 to worklist
  Adding insn 210 to worklist
  Adding insn 164 to worklist
  Adding insn 178 to worklist
  Adding insn 191 to worklist
Finished finding needed instructions:
  Adding insn 185 to worklist
Processing use of (reg 136 [ exceptions ]) in insn 185:
  Adding insn 78 to worklist
  Adding insn 109 to worklist
  Adding insn 165 to worklist
Processing use of (reg 0 r0) in insn 165:
Processing use of (reg 0 r0) in insn 191:
Processing use of (reg 13 sp) in insn 178:
Processing use of (reg 0 r0) in insn 178:
  Adding insn 176 to worklist
Processing use of (reg 1 r1) in insn 178:
  Adding insn 177 to worklist
Processing use of (reg 141 [ sd ]) in insn 177:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 198) in insn 176:
  Adding insn 175 to worklist
Processing use of (reg 194) in insn 175:
  Adding insn 172 to worklist
Processing use of (reg 196) in insn 175:
  Adding insn 174 to worklist
Processing use of (reg 197 [ vsd.significand ]) in insn 174:
  Adding insn 173 to worklist
Processing use of (reg 25 sfp) in insn 173:
Processing use of (reg 195) in insn 172:
  Adding insn 171 to worklist
Processing use of (reg 193) in insn 171:
  Adding insn 170 to worklist
Processing use of (reg 138 [ D.4446 ]) in insn 170:
  Adding insn 121 to worklist
Processing use of (reg 25 sfp) in insn 121:
Processing use of (reg 13 sp) in insn 164:
Processing use of (reg 0 r0) in insn 164:
  Adding insn 160 to worklist
Processing use of (reg 1 r1) in insn 164:
  Adding insn 161 to worklist
Processing use of (reg 2 r2) in insn 164:
  Adding insn 162 to worklist
Processing use of (reg 3 r3) in insn 164:
  Adding insn 163 to worklist
Processing use of (reg 136 [ exceptions ]) in insn 163:
Processing use of (reg 144 [ fpscr ]) in insn 162:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 192) in insn 161:
  Adding insn 159 to worklist
Processing use of (reg 25 sfp) in insn 159:
Processing use of (reg 141 [ sd ]) in insn 160:
Processing use of (reg 25 sfp) in insn 156:
Processing use of (subreg (reg 191) 0) in insn 156:
  Adding insn 155 to worklist
Processing use of (reg 190 [ vdm.exponent ]) in insn 155:
  Adding insn 153 to worklist
Processing use of (reg 25 sfp) in insn 153:
Processing use of (reg 25 sfp) in insn 148:
Processing use of (subreg (reg 182) 0) in insn 148:
  Adding insn 126 to worklist
Processing use of (reg 137 [ tm ]) in insn 126:
  Adding insn 65 to worklist
  Adding insn 77 to worklist
  Adding insn 83 to worklist
  Adding insn 91 to worklist
  Adding insn 196 to worklist
Processing use of (reg 24 cc) in insn 196:
  Adding insn 98 to worklist
Processing use of (reg 178 [ significand ]) in insn 98:
  Adding insn 97 to worklist
Processing use of (subreg (reg 135 [ significand ]) 4) in insn 97:
  Adding insn 30 to worklist
  Adding insn 49 to worklist
Processing use of (reg 178 [ significand ]) in insn 97:
  Adding insn 96 to worklist
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 96:
Processing use of (reg 135 [ significand ]) in insn 49:
Processing use of (reg 169) in insn 49:
  Adding insn 48 to worklist
Processing use of (reg 135 [ significand ]) in insn 30:
  Adding insn 28 to worklist
  Adding insn 29 to worklist
  Adding insn 197 to worklist
Processing use of (reg 205 [+4 ]) in insn 30:
  Adding insn 25 to worklist
Processing use of (reg 155) in insn 25:
  Adding insn 23 to worklist
Processing use of (reg 205 [+4 ]) in insn 25:
  Adding insn 24 to worklist
Processing use of (subreg (reg 139 [ D.4438 ]) 4) in insn 24:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (subreg (reg 139 [ D.4438 ]) 0) in insn 23:
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 29:
Processing use of (reg 135 [ significand ]) in insn 29:
Processing use of (reg 156) in insn 29:
  Adding insn 27 to worklist
Processing use of (reg 205 [+4 ]) in insn 27:
Processing use of (reg 135 [ significand ]) in insn 28:
Processing use of (reg 204) in insn 28:
  Adding insn 26 to worklist
Processing use of (subreg (reg 139 [ D.4438 ]) 0) in insn 26:
Processing use of (reg 24 cc) in insn 144:
  Adding insn 143 to worklist
Processing use of (reg 186) in insn 143:
  Adding insn 142 to worklist
Processing use of (reg 137 [ tm ]) in insn 142:
Processing use of (reg 25 sfp) in insn 137:
Processing use of (reg 185) in insn 137:
  Adding insn 136 to worklist
Processing use of (reg 133 [ v ]) in insn 136:
  Adding insn 124 to worklist
Processing use of (reg 181 [ vdm.significand ]) in insn 124:
  Adding insn 123 to worklist
Processing use of (reg 25 sfp) in insn 123:
Processing use of (reg 25 sfp) in insn 132:
Processing use of (reg 24 cc) in insn 134:
  Adding insn 133 to worklist
Processing use of (reg 137 [ tm ]) in insn 133:
Processing use of (reg 25 sfp) in insn 122:
Processing use of (subreg (reg 138 [ D.4446 ]) 0) in insn 122:
Processing use of (reg 25 sfp) in insn 125:
Processing use of (reg 133 [ v ]) in insn 125:
Processing use of (reg 24 cc) in insn 128:
  Adding insn 127 to worklist
Processing use of (reg 182) in insn 127:
Processing use of (reg 13 sp) in insn 118:
Processing use of (reg 0 r0) in insn 118:
  Adding insn 117 to worklist
Processing use of (reg 180) in insn 117:
  Adding insn 116 to worklist
Processing use of (reg 25 sfp) in insn 116:
Processing use of (reg 24 cc) in insn 114:
  Adding insn 113 to worklist
Processing use of (reg 179) in insn 113:
  Adding insn 112 to worklist
Processing use of (reg 137 [ tm ]) in insn 112:
Processing use of (reg 24 cc) in insn 89:
  Adding insn 88 to worklist
Processing use of (reg 134 [ D.6097 ]) in insn 88:
  Adding insn 21 to worklist
Processing use of (reg 152) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 151) in insn 20:
  Adding insn 19 to worklist
Processing use of (subreg (reg 202) 0) in insn 19:
  Adding insn 17 to worklist
Processing use of (subreg (reg 139 [ D.4438 ]) 4) in insn 17:
Processing use of (reg 24 cc) in insn 75:
  Adding insn 74 to worklist
Processing use of (reg 177) in insn 74:
  Adding insn 73 to worklist
Processing use of (subreg (reg 175) 4) in insn 73:
  Adding insn 71 to worklist
Processing use of (reg 177) in insn 73:
  Adding insn 72 to worklist
Processing use of (subreg (reg 175) 0) in insn 72:
Processing use of (reg 135 [ significand ]) in insn 71:
Processing use of (reg 176) in insn 71:
  Adding insn 70 to worklist
Processing use of (reg 24 cc) in insn 63:
  Adding insn 62 to worklist
Processing use of (reg 174 [ significand ]) in insn 62:
  Adding insn 61 to worklist
Processing use of (subreg (reg 135 [ significand ]) 4) in insn 61:
Processing use of (reg 174 [ significand ]) in insn 61:
  Adding insn 60 to worklist
Processing use of (subreg (reg 135 [ significand ]) 0) in insn 60:
Processing use of (reg 25 sfp) in insn 52:
Processing use of (reg 135 [ significand ]) in insn 52:
Processing use of (reg 24 cc) in insn 58:
  Adding insn 57 to worklist
Processing use of (reg 172 [ D.6097 ]) in insn 57:
  Adding insn 55 to worklist
Processing use of (reg 173) in insn 57:
  Adding insn 56 to worklist
Processing use of (reg 170) in insn 56:
  Adding insn 54 to worklist
Processing use of (subreg (reg 171) 0) in insn 54:
  Adding insn 53 to worklist
Processing use of (subreg (reg 134 [ D.6097 ]) 0) in insn 55:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 143 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 25 sfp) in insn 16:
Processing use of (subreg (reg 200) 0) in insn 16:
  Adding insn 14 to worklist
Processing use of (subreg (reg 145) 4) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 139 [ D.4438 ]) in insn 13:
Processing use of (reg 146) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 25 sfp) in insn 22:
Processing use of (subreg (reg 134 [ D.6097 ]) 0) in insn 22:
Processing use of (reg 24 cc) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 168) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 167) in insn 44:
  Adding insn 43 to worklist
Processing use of (subreg (reg 166) 0) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 162) in insn 42:
  Adding insn 36 to worklist
Processing use of (reg 165) in insn 42:
  Adding insn 40 to worklist
Processing use of (reg 24 cc) in insn 40:
  Adding insn 39 to worklist
Processing use of (reg 160 [ D.6097 ]) in insn 39:
  Adding insn 33 to worklist
Processing use of (subreg (reg 134 [ D.6097 ]) 0) in insn 33:
Processing use of (reg 24 cc) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 160 [ D.6097 ]) in insn 35:
Processing use of (reg 161) in insn 35:
  Adding insn 34 to worklist
Processing use of (reg 158) in insn 34:
  Adding insn 32 to worklist
Processing use of (subreg (reg 159) 0) in insn 32:
  Adding insn 31 to worklist


vfp_double_fcvts

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,9u} r1={7d,3u} r2={6d,2u} r3={6d,2u} r11={1d,24u} r12={5d} r13={1d,28u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={17d,12u} r25={1d,39u,2d} r26={1d,23u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={1d,2u} r134={1d,4u} r135={5d,11u,2d} r136={3d,2u} r137={5d,4u} r138={1d,2u} r139={1d,5u,1d} r141={1d,2u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r151={1d,1u,1d} r152={1d,1u} r155={1d,1u} r156={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,2u} r161={1d,1u} r162={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={2d,2u} r175={1d,2u} r176={1d,1u} r177={2d,2u} r178={2d,2u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,2u} r185={1d,1u} r186={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u,1d} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r200={1d,1u} r202={1d,1u} r204={1d,1u} r205={2d,3u} 
;;    total ref usage 804{568d,229u,7e} in 119{115 regular + 4 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499
0[0,10] 1[10,7] 2[17,6] 3[23,6] 11[29,1] 12[30,5] 13[35,1] 14[36,5] 15[41,4] 16[45,4] 17[49,4] 18[53,4] 19[57,4] 20[61,4] 21[65,4] 22[69,4] 23[73,4] 24[77,17] 25[94,1] 26[95,1] 27[96,4] 28[100,4] 29[104,4] 30[108,4] 31[112,4] 32[116,4] 33[120,4] 34[124,4] 35[128,4] 36[132,4] 37[136,4] 38[140,4] 39[144,4] 40[148,4] 41[152,4] 42[156,4] 43[160,4] 44[164,4] 45[168,4] 46[172,4] 47[176,4] 48[180,4] 49[184,4] 50[188,4] 51[192,4] 52[196,4] 53[200,4] 54[204,4] 55[208,4] 56[212,4] 57[216,4] 58[220,4] 59[224,4] 60[228,4] 61[232,4] 62[236,4] 63[240,4] 64[244,4] 65[248,4] 66[252,4] 67[256,4] 68[260,4] 69[264,4] 70[268,4] 71[272,4] 72[276,4] 73[280,4] 74[284,4] 75[288,4] 76[292,4] 77[296,4] 78[300,4] 79[304,4] 80[308,4] 81[312,4] 82[316,4] 83[320,4] 84[324,4] 85[328,4] 86[332,4] 87[336,4] 88[340,4] 89[344,4] 90[348,4] 91[352,4] 92[356,4] 93[360,4] 94[364,4] 95[368,4] 96[372,4] 97[376,4] 98[380,4] 99[384,4] 100[388,4] 101[392,4] 102[396,4] 103[400,4] 104[404,4] 105[408,4] 106[412,4] 107[416,4] 108[420,4] 109[424,4] 110[428,4] 111[432,4] 112[436,4] 113[440,4] 114[444,4] 115[448,4] 116[452,4] 117[456,4] 118[460,4] 119[464,4] 120[468,4] 121[472,4] 122[476,4] 123[480,4] 124[484,4] 125[488,4] 126[492,4] 127[496,4] 133[500,1] 134[501,1] 135[502,5] 136[507,3] 137[510,5] 138[515,1] 139[516,1] 141[517,1] 143[518,1] 144[519,1] 145[520,1] 146[521,1] 151[522,1] 152[523,1] 155[524,1] 156[525,1] 158[526,1] 159[527,1] 160[528,1] 161[529,1] 162[530,1] 165[531,1] 166[532,1] 167[533,1] 168[534,1] 169[535,1] 170[536,1] 171[537,1] 172[538,1] 173[539,1] 174[540,2] 175[542,1] 176[543,1] 177[544,2] 178[546,2] 179[548,1] 180[549,1] 181[550,1] 182[551,1] 185[552,1] 186[553,1] 190[554,1] 191[555,1] 192[556,1] 193[557,1] 194[558,1] 195[559,1] 196[560,1] 197[561,1] 198[562,1] 200[563,1] 202[564,1] 204[565,1] 205[566,2] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135 139 141 143 144 145 146 151 152 155 156 158 159 160 161 162 165 166 167 168 200 202 204 205
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 135 139 141 143 144 145 146 151 152 155 156 158 159 160 161 162 165 166 167 168 200 202 204 205
;; live  kill	 14 [lr]
;; rd  in  	(10)
9, 16, 22, 28, 29, 34, 35, 40, 94, 95
;; rd  gen 	(28)
7, 15, 91, 501, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 563, 564, 565, 566
;; rd  kill	(64)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 36, 37, 38, 39, 40, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 501, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 563, 564, 565, 566, 567

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 4 2 arch/arm/vfp/vfpdouble.c:440 (set (reg/v:SI 141 [ sd ])
        (reg:SI 0 r0 [ sd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ sd ])
        (nil)))

(insn 4 2 5 2 arch/arm/vfp/vfpdouble.c:440 (set (reg/v:SI 143 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:440 (set (reg/v:SI 144 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:446 (set (reg:SI 0 r0)
        (reg/v:SI 143 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 143 [ dm ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:446 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:446 (set (reg:DI 139 [ D.4438 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 146)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 145)
        (and:DI (reg:DI 139 [ D.4438 ])
            (reg:DI 146))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 146)
        (expr_list:REG_EQUAL (and:DI (reg:DI 139 [ D.4438 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 14 13 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 200)
        (lshiftrt:SI (subreg:SI (reg:DI 145) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 145)
        (nil)))

(insn 16 14 17 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -22 [0xffffffffffffffea])) [0 vdm.sign+0 S2 A16])
        (subreg:HI (reg:SI 200) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 200)
        (nil)))

(insn 17 16 19 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 202)
        (ashiftrt:SI (subreg:SI (reg:DI 139 [ D.4438 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 19 17 20 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 151)
        (zero_extend:SI (subreg:HI (reg:SI 202) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 202)
        (nil)))

(insn 20 19 21 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 152)
        (ashift:SI (reg:SI 151)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 151)
        (nil)))

(insn 21 20 22 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 134 [ D.6097 ])
        (lshiftrt:SI (reg:SI 152)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 152)
        (expr_list:REG_EQUAL (and:SI (reg:SI 151)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 22 21 23 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdm.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 134 [ D.6097 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 155)
        (lshiftrt:SI (subreg:SI (reg:DI 139 [ D.4438 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 205 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 139 [ D.4438 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 205 [+4 ])
        (ior:SI (reg:SI 155)
            (reg:SI 205 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 155)
        (nil)))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 204)
        (ashift:SI (subreg:SI (reg:DI 139 [ D.4438 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 139 [ D.4438 ])
        (nil)))

(insn 27 26 197 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 156)
        (ashift:SI (reg:SI 205 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 197 27 28 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 135 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 28 197 29 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 204)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 204)
        (nil)))

(insn 29 28 30 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 0)
        (ior:SI (reg:SI 156)
            (subreg:SI (reg/v:DI 135 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(insn 30 29 31 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 135 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 205 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 205 [+4 ])
        (nil)))

(insn 31 30 32 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 159)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 32 31 33 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 158)
        (subreg:HI (reg:SI 159) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 159)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 33 32 34 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 160 [ D.6097 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 134 [ D.6097 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 34 33 35 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 161)
        (sign_extend:SI (reg:HI 158))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 158)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 35 34 36 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 160 [ D.6097 ])
            (reg:SI 161))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 161)
        (nil)))

(insn 36 35 39 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 162)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 39 36 40 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 160 [ D.6097 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 160 [ D.6097 ])
        (nil)))

(insn 40 39 42 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 165)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 42 40 43 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 166)
        (and:SI (reg:SI 162)
            (reg:SI 165))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 165)
        (expr_list:REG_DEAD (reg:SI 162)
            (nil))))

(insn 43 42 44 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 167)
        (subreg:QI (reg:SI 166) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 166)
        (nil)))

(insn 44 43 45 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 168)
        (zero_extend:SI (reg:QI 167))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 167)
        (nil)))

(insn 45 44 46 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 168)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(jump_insn 46 45 47 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; rd  out 	(35)
7, 15, 22, 28, 29, 34, 35, 91, 94, 95, 501, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 563, 564, 565, 566


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u52(11){ }u53(13){ }u54(25){ }u55(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 135 169
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  gen 	 135 169
;; live  kill	
;; rd  in  	(35)
7, 15, 22, 28, 29, 34, 35, 91, 94, 95, 501, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 563, 564, 565, 566
;; rd  gen 	(2)
503, 535
;; rd  kill	(6)
502, 503, 504, 505, 506, 535

;; Pred edge  2 [50.0%]  (fallthru)
(note 47 46 48 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 169)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 135 [ significand ])
        (ior:DI (reg/v:DI 135 [ significand ])
            (reg:DI 169))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 169)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 135 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; rd  out 	(36)
7, 15, 22, 28, 29, 34, 35, 91, 94, 95, 501, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 563, 564, 565, 566


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u59(11){ }u60(13){ }u61(25){ }u62(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135
;; lr  def 	 24 [cc] 170 171 172 173
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  gen 	 24 [cc] 170 171 172 173
;; live  kill	
;; rd  in  	(37)
7, 15, 22, 28, 29, 34, 35, 91, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 563, 564, 565, 566
;; rd  gen 	(5)
90, 536, 537, 538, 539
;; rd  kill	(21)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 536, 537, 538, 539

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 50 49 51 4 384 "" [1 uses])

(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 135 [ significand ])) 163 {*arm_movdi} (nil))

(insn 53 52 54 4 arch/arm/vfp/vfp.h:330 (set (reg:SI 171)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 54 53 55 4 arch/arm/vfp/vfp.h:330 (set (reg:HI 170)
        (subreg:HI (reg:SI 171) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 171)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 55 54 56 4 arch/arm/vfp/vfp.h:330 (set (reg:SI 172 [ D.6097 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 134 [ D.6097 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 56 55 57 4 arch/arm/vfp/vfp.h:330 (set (reg:SI 173)
        (sign_extend:SI (reg:HI 170))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 170)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 57 56 58 4 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 172 [ D.6097 ])
            (reg:SI 173))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 173)
        (expr_list:REG_DEAD (reg:SI 172 [ D.6097 ])
            (nil))))

(jump_insn 58 57 59 4 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 86)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 4 -> ( 5 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; rd  out 	(41)
7, 15, 22, 28, 29, 34, 35, 90, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566


;; Succ edge  5 [28.0%]  (fallthru)
;; Succ edge  10 [72.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u71(11){ }u72(13){ }u73(25){ }u74(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 174
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  gen 	 24 [cc] 174
;; live  kill	
;; rd  in  	(41)
7, 15, 22, 28, 29, 34, 35, 90, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;; rd  gen 	(2)
89, 540
;; rd  kill	(19)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 540, 541

;; Pred edge  4 [28.0%]  (fallthru)
(note 59 58 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 5 arch/arm/vfp/vfp.h:331 (set (reg:SI 174 [ significand ])
        (subreg:SI (reg/v:DI 135 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 61 60 62 5 arch/arm/vfp/vfp.h:331 (set (reg:SI 174 [ significand ])
        (ior:SI (reg:SI 174 [ significand ])
            (subreg:SI (reg/v:DI 135 [ significand ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 62 61 63 5 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 174 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 174 [ significand ])
        (nil)))

(jump_insn 63 62 64 5 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; rd  out 	(42)
7, 15, 22, 28, 29, 34, 35, 89, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 564, 565, 566


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u80(11){ }u81(13){ }u82(25){ }u83(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  gen 	 137
;; live  kill	
;; rd  in  	(42)
7, 15, 22, 28, 29, 34, 35, 89, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 564, 565, 566
;; rd  gen 	(1)
514
;; rd  kill	(5)
510, 511, 512, 513, 514

;; Pred edge  5 [50.0%]  (fallthru)
(note 64 63 65 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 65 64 198 6 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 137 [ tm ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 198 65 199 6 (set (pc)
        (label_ref 107)) -1 (nil))
;; End of basic block 6 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; rd  out 	(43)
7, 15, 22, 28, 29, 34, 35, 89, 94, 95, 501, 503, 504, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 564, 565, 566


;; Succ edge  13 [100.0%] 

(barrier 199 198 68)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u84(11){ }u85(13){ }u86(25){ }u87(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 175 176 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  gen 	 24 [cc] 175 176 177
;; live  kill	
;; rd  in  	(42)
7, 15, 22, 28, 29, 34, 35, 89, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 563, 564, 565, 566
;; rd  gen 	(4)
88, 542, 543, 544
;; rd  kill	(21)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 542, 543, 544, 545

;; Pred edge  5 [50.0%] 
(code_label 68 199 69 7 386 "" [1 uses])

(note 69 68 70 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 71 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 176)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 71 70 72 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 175)
        (and:DI (reg/v:DI 135 [ significand ])
            (reg:DI 176))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 176)
        (expr_list:REG_DEAD (reg/v:DI 135 [ significand ])
            (expr_list:REG_EQUAL (and:DI (reg/v:DI 135 [ significand ])
                    (const_int 2305843009213693952 [0x2000000000000000]))
                (nil)))))

(insn 72 71 73 7 arch/arm/vfp/vfp.h:333 (set (reg:SI 177)
        (subreg:SI (reg:DI 175) 0)) 167 {*arm_movsi_insn} (nil))

(insn 73 72 74 7 arch/arm/vfp/vfp.h:333 (set (reg:SI 177)
        (ior:SI (reg:SI 177)
            (subreg:SI (reg:DI 175) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 175)
        (nil)))

(insn 74 73 75 7 arch/arm/vfp/vfp.h:333 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 177)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 177)
        (nil)))

(jump_insn 75 74 76 7 arch/arm/vfp/vfp.h:333 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; rd  out 	(45)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566


;; Succ edge  9 [50.0%] 
;; Succ edge  8 [50.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u96(11){ }u97(13){ }u98(25){ }u99(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  gen 	 136 137
;; live  kill	
;; rd  in  	(45)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566
;; rd  gen 	(2)
509, 513
;; rd  kill	(8)
507, 508, 509, 510, 511, 512, 513, 514

;; Pred edge  7 [50.0%]  (fallthru)
(note 76 75 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 77 76 78 8 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 137 [ tm ])
        (const_int 48 [0x30])) 167 {*arm_movsi_insn} (nil))

(insn 78 77 200 8 arch/arm/vfp/vfpdouble.c:454 (set (reg/v:SI 136 [ exceptions ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 200 78 201 8 (set (pc)
        (label_ref 110)) -1 (nil))
;; End of basic block 8 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; rd  out 	(47)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 509, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566


;; Succ edge  14 [100.0%] 

(barrier 201 200 81)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u100(11){ }u101(13){ }u102(25){ }u103(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  gen 	 137
;; live  kill	
;; rd  in  	(45)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566
;; rd  gen 	(1)
512
;; rd  kill	(5)
510, 511, 512, 513, 514

;; Pred edge  7 [50.0%] 
(code_label 81 201 82 9 388 "" [1 uses])

(note 82 81 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 83 82 202 9 arch/arm/vfp/vfp.h:334 (set (reg/v:SI 137 [ tm ])
        (const_int 16 [0x10])) 167 {*arm_movsi_insn} (nil))

(jump_insn 202 83 203 9 (set (pc)
        (label_ref 107)) -1 (nil))
;; End of basic block 9 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; rd  out 	(46)
7, 15, 22, 28, 29, 34, 35, 88, 94, 95, 501, 503, 504, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 563, 564, 565, 566


;; Succ edge  13 [100.0%] 

(barrier 203 202 86)

;; Start of basic block ( 4) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u104(11){ }u105(13){ }u106(25){ }u107(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 141 144
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(41)
7, 15, 22, 28, 29, 34, 35, 90, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;; rd  gen 	(1)
87
;; rd  kill	(17)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93

;; Pred edge  4 [72.0%] 
(code_label 86 203 87 10 385 "" [1 uses])

(note 87 86 88 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 88 87 89 10 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.6097 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ D.6097 ])
        (nil)))

(jump_insn 89 88 90 10 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; rd  out 	(41)
7, 15, 22, 28, 29, 34, 35, 87, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566


;; Succ edge  12 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u110(11){ }u111(13){ }u112(25){ }u113(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 144
;; live  gen 	 137
;; live  kill	
;; rd  in  	(41)
7, 15, 22, 28, 29, 34, 35, 87, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;; rd  gen 	(1)
511
;; rd  kill	(5)
510, 511, 512, 513, 514

;; Pred edge  10 [50.0%]  (fallthru)
(note 90 89 91 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 204 11 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 137 [ tm ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 204 91 205 11 (set (pc)
        (label_ref 107)) -1 (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; rd  out 	(42)
7, 15, 22, 28, 29, 34, 35, 87, 94, 95, 501, 503, 504, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566


;; Succ edge  13 [100.0%] 

(barrier 205 204 94)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u114(11){ }u115(13){ }u116(25){ }u117(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 137 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 141 144
;; live  gen 	 24 [cc] 137 178
;; live  kill	
;; rd  in  	(41)
7, 15, 22, 28, 29, 34, 35, 87, 94, 95, 501, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 563, 564, 565, 566
;; rd  gen 	(3)
86, 510, 546
;; rd  kill	(24)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 510, 511, 512, 513, 514, 546, 547

;; Pred edge  10 [50.0%] 
(code_label 94 205 95 12 390 "" [1 uses])

(note 95 94 96 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 96 95 97 12 arch/arm/vfp/vfp.h:338 (set (reg:SI 178 [ significand ])
        (subreg:SI (reg/v:DI 135 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 97 96 98 12 arch/arm/vfp/vfp.h:338 (set (reg:SI 178 [ significand ])
        (ior:SI (reg:SI 178 [ significand ])
            (subreg:SI (reg/v:DI 135 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 135 [ significand ])
        (nil)))

(insn 98 97 196 12 arch/arm/vfp/vfp.h:338 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 178 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 178 [ significand ])
        (nil)))

(insn 196 98 107 12 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 137 [ tm ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; rd  out 	(43)
7, 15, 22, 28, 29, 34, 35, 86, 94, 95, 501, 503, 504, 510, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 546, 563, 564, 565, 566


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 6 9 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u123(11){ }u124(13){ }u125(25){ }u126(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 141 144
;; live  gen 	 136
;; live  kill	
;; rd  in  	(53)
7, 15, 22, 28, 29, 34, 35, 86, 87, 88, 89, 94, 95, 501, 503, 504, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 563, 564, 565, 566
;; rd  gen 	(1)
508
;; rd  kill	(3)
507, 508, 509

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  11 [100.0%] 
(code_label 107 196 108 13 387 "" [3 uses])

(note 108 107 109 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 13 arch/arm/vfp/vfpdouble.c:444 (set (reg/v:SI 136 [ exceptions ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; rd  out 	(54)
7, 15, 22, 28, 29, 34, 35, 86, 87, 88, 89, 94, 95, 501, 503, 504, 508, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 563, 564, 565, 566


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 8) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u127(11){ }u128(13){ }u129(25){ }u130(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 179
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  gen 	 24 [cc] 179
;; live  kill	
;; rd  in  	(56)
7, 15, 22, 28, 29, 34, 35, 86, 87, 88, 89, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 563, 564, 565, 566
;; rd  gen 	(2)
85, 548
;; rd  kill	(18)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 548

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 110 109 111 14 389 "" [1 uses])

(note 111 110 112 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 112 111 113 14 arch/arm/vfp/vfpdouble.c:456 (set (reg:SI 179)
        (and:SI (reg/v:SI 137 [ tm ])
            (const_int 4 [0x4]))) 67 {*arm_andsi3_insn} (nil))

(insn 113 112 114 14 arch/arm/vfp/vfpdouble.c:456 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 179)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 179)
        (nil)))

(jump_insn 114 113 115 14 arch/arm/vfp/vfpdouble.c:456 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 119)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; rd  out 	(54)
7, 15, 22, 28, 29, 34, 35, 85, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 563, 564, 565, 566


;; Succ edge  15 [29.0%]  (fallthru)
;; Succ edge  16 [71.0%] 

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u134(11){ }u135(13){ }u136(25){ }u137(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 180
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  gen 	 0 [r0] 180
;; live  kill	 14 [lr]
;; rd  in  	(54)
7, 15, 22, 28, 29, 34, 35, 85, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 563, 564, 565, 566
;; rd  gen 	(1)
549
;; rd  kill	(6)
36, 37, 38, 39, 40, 549

;; Pred edge  14 [29.0%]  (fallthru)
(note 115 114 116 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 116 115 117 15 arch/arm/vfp/vfpdouble.c:457 (set (reg/f:SI 180)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -24 [0xffffffffffffffe8]))) 4 {*arm_addsi3} (nil))

(insn 117 116 118 15 arch/arm/vfp/vfpdouble.c:457 (set (reg:SI 0 r0)
        (reg/f:SI 180)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 180)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8]))
            (nil))))

(call_insn 118 117 119 15 arch/arm/vfp/vfpdouble.c:457 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; rd  out 	(55)
7, 15, 22, 28, 29, 34, 35, 85, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 563, 564, 565, 566


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 14 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u143(11){ }u144(13){ }u145(25){ }u146(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 133 138 181 182
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144
;; live  gen 	 24 [cc] 133 138 181 182
;; live  kill	 24 [cc]
;; rd  in  	(55)
7, 15, 22, 28, 29, 34, 35, 85, 94, 95, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 563, 564, 565, 566
;; rd  gen 	(5)
82, 500, 515, 550, 551
;; rd  kill	(21)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 500, 515, 550, 551

;; Pred edge  14 [71.0%] 
;; Pred edge  15 [100.0%]  (fallthru)
(code_label 119 118 120 16 392 "" [1 uses])

(note 120 119 121 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 121 120 122 16 arch/arm/vfp/vfpdouble.c:459 (set (reg:SI 138 [ D.4446 ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -22 [0xffffffffffffffea])) [0 vdm.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 122 121 123 16 arch/arm/vfp/vfpdouble.c:459 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -6 [0xfffffffffffffffa])) [0 vsd.sign+0 S2 A16])
        (subreg/s/u:HI (reg:SI 138 [ D.4446 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 123 122 124 16 arch/arm/vfp/vfp.h:38 (set (reg:DI 181 [ vdm.significand ])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 vdm.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 124 123 125 16 arch/arm/vfp/vfp.h:38 (parallel [
            (set (reg/v:SI 133 [ v ])
                (asm_operands:SI ("cmp	%Q1, #1		@ vfp_hi64to32jamming
	movcc	%0, %R1
	orrcs	%0, %R1, #1") ("=r") 0 [
                        (reg:DI 181 [ vdm.significand ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                    ] 1586691))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:DI 181 [ vdm.significand ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))

(insn 125 124 126 16 arch/arm/vfp/vfpdouble.c:460 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 vsd.significand+0 S4 A32])
        (reg/v:SI 133 [ v ])) 167 {*arm_movsi_insn} (nil))

(insn 126 125 127 16 arch/arm/vfp/vfpdouble.c:465 (set (reg:SI 182)
        (and:SI (reg/v:SI 137 [ tm ])
            (const_int 24 [0x18]))) 67 {*arm_andsi3_insn} (nil))

(insn 127 126 128 16 arch/arm/vfp/vfpdouble.c:465 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 182)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 128 127 129 16 arch/arm/vfp/vfpdouble.c:465 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 140)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 16 -> ( 17 19)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 138 141 144 182
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 138 141 144 182
;; rd  out 	(59)
7, 15, 22, 28, 29, 34, 35, 82, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  19 [50.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u157(11){ }u158(13){ }u159(25){ }u160(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 137 138 141
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(59)
7, 15, 22, 28, 29, 34, 35, 82, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566
;; rd  gen 	(1)
81
;; rd  kill	(17)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93

;; Pred edge  16 [50.0%]  (fallthru)
(note 129 128 132 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 132 129 133 17 arch/arm/vfp/vfpdouble.c:466 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vsd.exponent+0 S2 A64])
        (const_int 255 [0xff])) 176 {*movhi_insn_arch4} (expr_list:REG_EQUAL (const_int 255 [0xff])
        (nil)))

(insn 133 132 134 17 arch/arm/vfp/vfpdouble.c:467 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 137 [ tm ])
            (const_int 16 [0x10]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ tm ])
        (nil)))

(jump_insn 134 133 135 17 arch/arm/vfp/vfpdouble.c:467 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 168)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 17 -> ( 18 23)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138 141
;; rd  out 	(59)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566


;; Succ edge  18 [28.0%]  (fallthru)
;; Succ edge  23 [72.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u164(11){ }u165(13){ }u166(25){ }u167(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 136 138 141
;; live  gen 	 185
;; live  kill	
;; rd  in  	(59)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566
;; rd  gen 	(1)
552
;; rd  kill	(1)
552

;; Pred edge  17 [28.0%]  (fallthru)
(note 135 134 136 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 136 135 137 18 arch/arm/vfp/vfpdouble.c:468 (set (reg:SI 185)
        (ior:SI (reg/v:SI 133 [ v ])
            (const_int 536870912 [0x20000000]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:SI 133 [ v ])
        (nil)))

(insn 137 136 206 18 arch/arm/vfp/vfpdouble.c:468 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 vsd.significand+0 S4 A32])
        (reg:SI 185)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 185)
        (nil)))

(jump_insn 206 137 207 18 (set (pc)
        (label_ref 168)) -1 (nil))
;; End of basic block 18 -> ( 23)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 141
;; rd  out 	(60)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 563, 564, 565, 566


;; Succ edge  23 [100.0%] 

(barrier 207 206 140)

;; Start of basic block ( 16) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u171(11){ }u172(13){ }u173(25){ }u174(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144 182
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc] 186
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 141 144 182
;; live  gen 	 24 [cc] 186
;; live  kill	
;; rd  in  	(59)
7, 15, 22, 28, 29, 34, 35, 82, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 563, 564, 565, 566
;; rd  gen 	(2)
80, 553
;; rd  kill	(18)
77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 553

;; Pred edge  16 [50.0%] 
(code_label 140 207 141 19 393 "" [1 uses])

(note 141 140 142 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 142 141 143 19 arch/arm/vfp/vfpdouble.c:470 (set (reg:SI 186)
        (and:SI (reg/v:SI 137 [ tm ])
            (const_int 2 [0x2]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ tm ])
        (nil)))

(insn 143 142 144 19 arch/arm/vfp/vfpdouble.c:470 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 186)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 186)
        (nil)))

(jump_insn 144 143 145 19 arch/arm/vfp/vfpdouble.c:470 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 151)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 19 -> ( 20 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144 182
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144 182
;; rd  out 	(60)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 563, 564, 565, 566


;; Succ edge  20 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u178(11){ }u179(13){ }u180(25){ }u181(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144 182
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 182
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144 182
;; live  gen 	
;; live  kill	
;; rd  in  	(60)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 563, 564, 565, 566
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  19 [50.0%]  (fallthru)
(note 145 144 148 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 148 145 208 20 arch/arm/vfp/vfpdouble.c:471 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vsd.exponent+0 S2 A64])
        (subreg:HI (reg:SI 182) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 182)
        (nil)))

(jump_insn 208 148 209 20 (set (pc)
        (label_ref 157)) -1 (nil))
;; End of basic block 20 -> ( 22)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; rd  out 	(60)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 563, 564, 565, 566


;; Succ edge  22 [100.0%] 

(barrier 209 208 151)

;; Start of basic block ( 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u184(11){ }u185(13){ }u186(25){ }u187(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 190 191
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; live  gen 	 190 191
;; live  kill	
;; rd  in  	(60)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 563, 564, 565, 566
;; rd  gen 	(2)
554, 555
;; rd  kill	(2)
554, 555

;; Pred edge  19 [50.0%] 
(code_label 151 209 152 21 395 "" [1 uses])

(note 152 151 153 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 153 152 155 21 arch/arm/vfp/vfpdouble.c:473 (set (reg:SI 190 [ vdm.exponent ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 vdm.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 155 153 156 21 arch/arm/vfp/vfpdouble.c:473 (set (reg:SI 191)
        (plus:SI (reg:SI 190 [ vdm.exponent ])
            (const_int -896 [0xfffffffffffffc80]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 190 [ vdm.exponent ])
        (nil)))

(insn 156 155 157 21 arch/arm/vfp/vfpdouble.c:473 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vsd.exponent+0 S2 A64])
        (subreg:HI (reg:SI 191) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 191)
        (nil)))
;; End of basic block 21 -> ( 22)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; rd  out 	(62)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 554, 555, 563, 564, 565, 566


;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21 20) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u192(11){ }u193(13){ }u194(25){ }u195(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 192
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 136 192
;; live  kill	 14 [lr]
;; rd  in  	(62)
7, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 554, 555, 563, 564, 565, 566
;; rd  gen 	(3)
3, 507, 556
;; rd  kill	(19)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 36, 37, 38, 39, 40, 507, 508, 509, 556

;; Pred edge  21 [100.0%]  (fallthru)
;; Pred edge  20 [100.0%] 
(code_label 157 156 158 22 396 "" [1 uses])

(note 158 157 159 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 159 158 160 22 arch/arm/vfp/vfpdouble.c:475 (set (reg/f:SI 192)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -8 [0xfffffffffffffff8]))) 4 {*arm_addsi3} (nil))

(insn 160 159 161 22 arch/arm/vfp/vfpdouble.c:475 (set (reg:SI 0 r0)
        (reg/v:SI 141 [ sd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ sd ])
        (nil)))

(insn 161 160 162 22 arch/arm/vfp/vfpdouble.c:475 (set (reg:SI 1 r1)
        (reg/f:SI 192)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 192)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8]))
            (nil))))

(insn 162 161 163 22 arch/arm/vfp/vfpdouble.c:475 (set (reg:SI 2 r2)
        (reg/v:SI 144 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 144 [ fpscr ])
        (nil)))

(insn 163 162 164 22 arch/arm/vfp/vfpdouble.c:475 (set (reg:SI 3 r3)
        (reg/v:SI 136 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 136 [ exceptions ])
        (nil)))

(call_insn 164 163 165 22 arch/arm/vfp/vfpdouble.c:475 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__vfp_single_normaliseround") [flags 0x41] <function_decl 0x10a9d580 __vfp_single_normaliseround>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 165 164 210 22 arch/arm/vfp/vfpdouble.c:475 (set (reg/v:SI 136 [ exceptions ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 210 165 211 22 arch/arm/vfp/vfpdouble.c:475 (set (pc)
        (label_ref 179)) -1 (nil))
;; End of basic block 22 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; rd  out 	(62)
3, 15, 22, 28, 29, 34, 35, 80, 94, 95, 500, 501, 503, 504, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 553, 554, 555, 556, 563, 564, 565, 566


;; Succ edge  24 [100.0%] 

(barrier 211 210 168)

;; Start of basic block ( 17 18) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u208(11){ }u209(13){ }u210(25){ }u211(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 193 194 195 196 197 198
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 141
;; live  gen 	 0 [r0] 1 [r1] 193 194 195 196 197 198
;; live  kill	 14 [lr]
;; rd  in  	(60)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 563, 564, 565, 566
;; rd  gen 	(6)
557, 558, 559, 560, 561, 562
;; rd  kill	(11)
36, 37, 38, 39, 40, 557, 558, 559, 560, 561, 562

;; Pred edge  17 [72.0%] 
;; Pred edge  18 [100.0%] 
(code_label 168 211 169 23 394 "" [2 uses])

(note 169 168 170 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 170 169 171 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 193)
        (ashift:SI (reg:SI 138 [ D.4446 ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 138 [ D.4446 ])
        (nil)))

(insn 171 170 172 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 195)
        (plus:SI (reg:SI 193)
            (const_int 2130706432 [0x7f000000]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 193)
        (nil)))

(insn 172 171 173 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 194)
        (plus:SI (reg:SI 195)
            (const_int 8388608 [0x800000]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 195)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 193)
                (const_int 2139095040 [0x7f800000]))
            (nil))))

(insn 173 172 174 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 197 [ vsd.significand ])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 vsd.significand+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 174 173 175 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 196)
        (lshiftrt:SI (reg:SI 197 [ vsd.significand ])
            (const_int 7 [0x7]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 197 [ vsd.significand ])
        (nil)))

(insn 175 174 176 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 198)
        (plus:SI (reg:SI 194)
            (reg:SI 196))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 196)
        (expr_list:REG_DEAD (reg:SI 194)
            (nil))))

(insn 176 175 177 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 0 r0)
        (reg:SI 198)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 198)
        (nil)))

(insn 177 176 178 23 arch/arm/vfp/vfpdouble.c:478 (set (reg:SI 1 r1)
        (reg/v:SI 141 [ sd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ sd ])
        (nil)))

(call_insn 178 177 179 23 arch/arm/vfp/vfpdouble.c:478 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_float") [flags 0x41] <function_decl 0x10a9d180 vfp_put_float>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 23 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; rd  out 	(66)
7, 15, 22, 28, 29, 34, 35, 81, 94, 95, 500, 501, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 23 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u225(11){ }u226(13){ }u227(25){ }u228(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(73)
3, 7, 15, 22, 28, 29, 34, 35, 80, 81, 94, 95, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566
;; rd  gen 	(1)
0
;; rd  kill	(10)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9

;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  22 [100.0%] 
(code_label 179 178 180 24 397 "" [1 uses])

(note 180 179 185 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 185 180 191 24 arch/arm/vfp/vfpdouble.c:480 (set (reg/i:SI 0 r0)
        (reg/v:SI 136 [ exceptions ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 136 [ exceptions ])
        (nil)))

(insn 191 185 0 24 arch/arm/vfp/vfpdouble.c:480 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 24 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(72)
0, 15, 22, 28, 29, 34, 35, 80, 81, 94, 95, 500, 501, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function vfp_double_fsqrt (vfp_double_fsqrt)[0:158]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 60 n_edges 88 count 116 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 60 n_edges 88 count 120 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 60 n_edges 88 count 120 (    2)


vfp_double_fsqrt

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={18d,17u} r1={17d,9u} r2={14d,7u} r3={12d,4u} r4={2d,2u} r11={1d,59u} r12={10d} r13={1d,67u} r14={10d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={64d,35u} r25={1d,81u,5d} r26={1d,58u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} r133={1d,2u} r134={3d,5u} r135={1d,1u} r136={1d,4u} r137={3d,1u} r138={1d,1u} r139={1d,2u} r140={3d,6u} r141={1d,1u} r142={1d,4u} r143={5d,7u,2d} r144={2d,11u,3d} r147={2d,1u} r148={1d,1u} r149={1d,1u} r150={1d,4u} r151={1d,1u} r153={3d,7u} r154={3d,3u} r155={2d,3u} r156={2d,2u} r159={1d,2u} r160={1d,3u} r161={1d,1u} r162={1d,3u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={2d,1u} r171={1d,2u} r172={1d,4u} r173={5d,11u,2d} r174={2d,2u} r175={2d,3u} r176={3d,4u} r177={4d,4u} r178={3d,1u} r179={4d,6u} r180={1d,2u} r181={4d,9u,1d} r182={1d,2u} r183={1d,1u} r184={2d,1u} r186={1d,5u,1d} r188={1d,2u} r190={1d,1u} r191={1d,2u} r192={1d,1u} r193={1d,1u} r198={1d,1u,1d} r199={1d,1u} r202={1d,1u} r203={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,2u} r208={1d,1u} r209={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={2d,2u} r222={1d,2u} r223={1d,1u} r224={2d,2u} r225={2d,2u} r226={1d,1u} r227={1d,1u} r228={1d,2u} r229={1d,1u} r232={1d,1u} r234={3d,4u} r235={1d,1u} r236={1d,1u} r238={3d,3u} r239={1d,1u} r242={4d,5u} r243={1d,1u} r244={1d,2u} r245={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,3u} r254={1d,2u,1d} r255={1d,1u} r256={1d,1u} r257={1d,1u,1d} r259={1d,1u} r260={1d,1u} r265={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r275={1d,2u} r276={1d,2u} r289={3d,3u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r295={3d,4u} r297={3d,3u} r298={1d,1u} r299={1d,1u} r300={1d,1u} r301={1d,2u} r302={1d,1u} r303={1d,1u} r304={1d,1u} r305={1d,3u} r316={3d,3u} r317={1d,1u} r318={1d,1u} r319={1d,1u} r320={1d,1u,1d} r321={1d,1u} r324={2d,3u} r326={2d,1u} r327={1d,2u} r328={2d,2u} r329={1d,1u} r330={1d,1u} r331={1d,1u} r332={2d,1u} r336={1d,1u} r337={1d,1u} r338={1d,1u} r339={1d,1u} r346={1d,2u} r347={1d,1u} r357={1d,1u} r359={1d,1u} r361={1d,1u} r362={2d,3u} r369={1d,1u} r370={1d,1u} r371={1d,2u} r373={1d,3u} r376={1d,1u} r377={3d,11u} r378={1d,1u} r379={1d,1u} r380={1d,1u} r381={1d,1u} r382={1d,1u} 
;;    total ref usage 1798{1138d,642u,18e} in 331{324 regular + 7 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920
0[0,18] 1[18,17] 2[35,14] 3[49,12] 4[61,2] 11[63,1] 12[64,10] 13[74,1] 14[75,10] 15[85,7] 16[92,7] 17[99,7] 18[106,7] 19[113,7] 20[120,7] 21[127,7] 22[134,7] 23[141,7] 24[148,64] 25[212,1] 26[213,1] 27[214,7] 28[221,7] 29[228,7] 30[235,7] 31[242,7] 32[249,7] 33[256,7] 34[263,7] 35[270,7] 36[277,7] 37[284,7] 38[291,7] 39[298,7] 40[305,7] 41[312,7] 42[319,7] 43[326,7] 44[333,7] 45[340,7] 46[347,7] 47[354,7] 48[361,7] 49[368,7] 50[375,7] 51[382,7] 52[389,7] 53[396,7] 54[403,7] 55[410,7] 56[417,7] 57[424,7] 58[431,7] 59[438,7] 60[445,7] 61[452,7] 62[459,7] 63[466,7] 64[473,7] 65[480,7] 66[487,7] 67[494,7] 68[501,7] 69[508,7] 70[515,7] 71[522,7] 72[529,7] 73[536,7] 74[543,7] 75[550,7] 76[557,7] 77[564,7] 78[571,7] 79[578,7] 80[585,7] 81[592,7] 82[599,7] 83[606,7] 84[613,7] 85[620,7] 86[627,7] 87[634,7] 88[641,7] 89[648,7] 90[655,7] 91[662,7] 92[669,7] 93[676,7] 94[683,7] 95[690,7] 96[697,7] 97[704,7] 98[711,7] 99[718,7] 100[725,7] 101[732,7] 102[739,7] 103[746,7] 104[753,7] 105[760,7] 106[767,7] 107[774,7] 108[781,7] 109[788,7] 110[795,7] 111[802,7] 112[809,7] 113[816,7] 114[823,7] 115[830,7] 116[837,7] 117[844,7] 118[851,7] 119[858,7] 120[865,7] 121[872,7] 122[879,7] 123[886,7] 124[893,7] 125[900,7] 126[907,7] 127[914,7] 133[921,1] 134[922,3] 135[925,1] 136[926,1] 137[927,3] 138[930,1] 139[931,1] 140[932,3] 141[935,1] 142[936,1] 143[937,5] 144[942,2] 147[944,2] 148[946,1] 149[947,1] 150[948,1] 151[949,1] 153[950,3] 154[953,3] 155[956,2] 156[958,2] 159[960,1] 160[961,1] 161[962,1] 162[963,1] 163[964,1] 164[965,1] 165[966,1] 166[967,2] 171[969,1] 172[970,1] 173[971,5] 174[976,2] 175[978,2] 176[980,3] 177[983,4] 178[987,3] 179[990,4] 180[994,1] 181[995,4] 182[999,1] 183[1000,1] 184[1001,2] 186[1003,1] 188[1004,1] 190[1005,1] 191[1006,1] 192[1007,1] 193[1008,1] 198[1009,1] 199[1010,1] 202[1011,1] 203[1012,1] 205[1013,1] 206[1014,1] 207[1015,1] 208[1016,1] 209[1017,1] 212[1018,1] 213[1019,1] 214[1020,1] 215[1021,1] 216[1022,1] 217[1023,1] 218[1024,1] 219[1025,1] 220[1026,1] 221[1027,2] 222[1029,1] 223[1030,1] 224[1031,2] 225[1033,2] 226[1035,1] 227[1036,1] 228[1037,1] 229[1038,1] 232[1039,1] 234[1040,3] 235[1043,1] 236[1044,1] 238[1045,3] 239[1048,1] 242[1049,4] 243[1053,1] 244[1054,1] 245[1055,1] 247[1056,1] 248[1057,1] 249[1058,1] 250[1059,1] 251[1060,1] 254[1061,1] 255[1062,1] 256[1063,1] 257[1064,1] 259[1065,1] 260[1066,1] 265[1067,1] 267[1068,1] 268[1069,1] 269[1070,1] 270[1071,1] 275[1072,1] 276[1073,1] 289[1074,3] 290[1077,1] 291[1078,1] 292[1079,1] 295[1080,3] 297[1083,3] 298[1086,1] 299[1087,1] 300[1088,1] 301[1089,1] 302[1090,1] 303[1091,1] 304[1092,1] 305[1093,1] 316[1094,3] 317[1097,1] 318[1098,1] 319[1099,1] 320[1100,1] 321[1101,1] 324[1102,2] 326[1104,2] 327[1106,1] 328[1107,2] 329[1109,1] 330[1110,1] 331[1111,1] 332[1112,2] 336[1114,1] 337[1115,1] 338[1116,1] 339[1117,1] 346[1118,1] 347[1119,1] 357[1120,1] 359[1121,1] 361[1122,1] 362[1123,2] 369[1125,1] 370[1126,1] 371[1127,1] 373[1128,1] 376[1129,1] 377[1130,3] 378[1133,1] 379[1134,1] 380[1135,1] 381[1136,1] 382[1137,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d17(0){ }d34(1){ }d48(2){ }d60(3){ }d63(11){ }d73(12){ }d74(13){ }d84(14){ }d212(25){ }d213(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	 324
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
17, 34, 48, 60, 63, 73, 74, 84, 212, 213
;; rd  kill	(85)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 212, 213
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 324
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
17, 34, 48, 60, 63, 73, 74, 84, 212, 213

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d63(bb 0 insn -1) }u1(13){ d74(bb 0 insn -1) }u2(25){ d212(bb 0 insn -1) }u3(26){ d213(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 324
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 171 172 173 186 188 190 191 192 193 198 199 202 203 205 206 207 208 209 212 213 214 215 357 359 361 362
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 171 172 173 186 188 190 191 192 193 198 199 202 203 205 206 207 208 209 212 213 214 215 357 359 361 362
;; live  kill	 14 [lr]
;; rd  in  	(10)
17, 34, 48, 60, 63, 73, 74, 84, 212, 213
;; rd  gen 	(29)
15, 33, 209, 969, 970, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1120, 1121, 1122, 1123
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 969, 970, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1120, 1121, 1122, 1123, 1124
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; rd  out 	(36)
15, 33, 48, 60, 63, 73, 74, 209, 212, 213, 969, 970, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d17(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 4
;;      reg 2 { d48(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 5
;;      reg 3 { d60(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 9
;;      reg 190 { d1005(bb 2 insn 4) }
;;   UD chains for insn luid 4 uid 10
;;      reg 13 { d74(bb 0 insn -1) }
;;      reg 0 { d16(bb 2 insn 9) }
;;   UD chains for insn luid 5 uid 11
;;      reg 0 { d15(bb 2 insn 10) }
;;      reg 1 { d33(bb 2 insn 10) }
;;   UD chains for insn luid 7 uid 13
;;      reg 186 { d1003(bb 2 insn 11) }
;;      reg 193 { d1008(bb 2 insn 12) }
;;   eq_note reg 186 { }
;;   UD chains for insn luid 8 uid 14
;;      reg 192 { d1007(bb 2 insn 13) }
;;   UD chains for insn luid 9 uid 16
;;      reg 357 { d1120(bb 2 insn 14) }
;;   UD chains for insn luid 10 uid 17
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 171 { d969(bb 2 insn 16) }
;;   UD chains for insn luid 11 uid 18
;;      reg 186 { d1003(bb 2 insn 11) }
;;   UD chains for insn luid 12 uid 20
;;      reg 359 { d1121(bb 2 insn 18) }
;;   UD chains for insn luid 13 uid 21
;;      reg 198 { d1009(bb 2 insn 20) }
;;   UD chains for insn luid 14 uid 22
;;      reg 199 { d1010(bb 2 insn 21) }
;;   eq_note reg 198 { }
;;   UD chains for insn luid 15 uid 23
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 172 { d970(bb 2 insn 22) }
;;   UD chains for insn luid 16 uid 24
;;      reg 186 { d1003(bb 2 insn 11) }
;;   UD chains for insn luid 17 uid 25
;;      reg 186 { d1003(bb 2 insn 11) }
;;   UD chains for insn luid 18 uid 26
;;      reg 202 { d1011(bb 2 insn 24) }
;;      reg 362 { d1124(bb 2 insn 25) }
;;   UD chains for insn luid 19 uid 27
;;      reg 186 { d1003(bb 2 insn 11) }
;;   UD chains for insn luid 20 uid 28
;;      reg 362 { d1123(bb 2 insn 26) }
;;   UD chains for insn luid 22 uid 29
;;      reg 173 read/write { d971(bb 2 insn 704) }
;;      reg 361 { d1122(bb 2 insn 27) }
;;   UD chains for insn luid 23 uid 30
;;      reg 173 { d975(bb 2 insn 29) d971(bb 2 insn 704) }
;;      reg 173 read/write { d975(bb 2 insn 29) d971(bb 2 insn 704) }
;;      reg 203 { d1012(bb 2 insn 28) }
;;   UD chains for insn luid 24 uid 31
;;      reg 173 read/write { d975(bb 2 insn 29) d974(bb 2 insn 30) d971(bb 2 insn 704) }
;;      reg 362 { d1123(bb 2 insn 26) }
;;   UD chains for insn luid 26 uid 33
;;      reg 206 { d1014(bb 2 insn 32) }
;;   UD chains for insn luid 27 uid 34
;;      reg 172 { d970(bb 2 insn 22) }
;;   UD chains for insn luid 28 uid 35
;;      reg 205 { d1013(bb 2 insn 33) }
;;   UD chains for insn luid 29 uid 36
;;      reg 207 { d1015(bb 2 insn 34) }
;;      reg 208 { d1016(bb 2 insn 35) }
;;   UD chains for insn luid 30 uid 37
;;      reg 24 { d210(bb 2 insn 36) }
;;   UD chains for insn luid 31 uid 40
;;      reg 207 { d1015(bb 2 insn 34) }
;;   UD chains for insn luid 32 uid 41
;;      reg 24 { d159(bb 2 insn 40) }
;;   UD chains for insn luid 33 uid 43
;;      reg 209 { d1017(bb 2 insn 37) }
;;      reg 212 { d1018(bb 2 insn 41) }
;;   UD chains for insn luid 34 uid 44
;;      reg 213 { d1019(bb 2 insn 43) }
;;   UD chains for insn luid 35 uid 45
;;      reg 214 { d1020(bb 2 insn 44) }
;;   UD chains for insn luid 36 uid 46
;;      reg 215 { d1021(bb 2 insn 45) }
;;   UD chains for insn luid 37 uid 47
;;      reg 24 { d209(bb 2 insn 46) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ d63(bb 0 insn -1) }u54(13){ d74(bb 0 insn -1) }u55(25){ d212(bb 0 insn -1) }u56(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173
;; lr  def 	 173 216
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; live  gen 	 173 216
;; live  kill	
;; rd  in  	(36)
15, 33, 48, 60, 63, 73, 74, 209, 212, 213, 969, 970, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
972, 1022
;; rd  kill	(6)
971, 972, 973, 974, 975, 1022
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; rd  out 	(37)
15, 33, 48, 60, 63, 73, 74, 209, 212, 213, 969, 970, 972, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 50
;;      reg 173 { d973(bb 2 insn 31) }
;;      reg 216 { d1022(bb 3 insn 49) }
;;   eq_note reg 173 { }

( 2 3 )->[4]->( 5 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ d63(bb 0 insn -1) }u61(13){ d74(bb 0 insn -1) }u62(25){ d212(bb 0 insn -1) }u63(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 172 173
;; lr  def 	 24 [cc] 217 218 219 220
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; live  gen 	 24 [cc] 217 218 219 220
;; live  kill	
;; rd  in  	(38)
15, 33, 48, 60, 63, 73, 74, 209, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1120, 1121, 1122, 1123
;; rd  gen 	(5)
208, 1023, 1024, 1025, 1026
;; rd  kill	(4)
1023, 1024, 1025, 1026
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; rd  out 	(42)
15, 33, 48, 60, 63, 73, 74, 208, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 53
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 173 { d973(bb 2 insn 31) d972(bb 3 insn 50) }
;;   UD chains for insn luid 2 uid 55
;;      reg 218 { d1024(bb 4 insn 54) }
;;   UD chains for insn luid 3 uid 56
;;      reg 172 { d970(bb 2 insn 22) }
;;   UD chains for insn luid 4 uid 57
;;      reg 217 { d1023(bb 4 insn 55) }
;;   UD chains for insn luid 5 uid 58
;;      reg 219 { d1025(bb 4 insn 56) }
;;      reg 220 { d1026(bb 4 insn 57) }
;;   UD chains for insn luid 6 uid 59
;;      reg 24 { d208(bb 4 insn 58) }

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u72(11){ d63(bb 0 insn -1) }u73(13){ d74(bb 0 insn -1) }u74(25){ d212(bb 0 insn -1) }u75(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173
;; lr  def 	 24 [cc] 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; live  gen 	 24 [cc] 221
;; live  kill	
;; rd  in  	(42)
15, 33, 48, 60, 63, 73, 74, 208, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
207, 1027
;; rd  kill	(2)
1027, 1028
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; rd  out 	(43)
15, 33, 48, 60, 63, 73, 74, 207, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 61
;;      reg 173 { d973(bb 2 insn 31) d972(bb 3 insn 50) }
;;   UD chains for insn luid 1 uid 62
;;      reg 173 { d973(bb 2 insn 31) d972(bb 3 insn 50) }
;;      reg 221 { d1028(bb 5 insn 61) }
;;   UD chains for insn luid 2 uid 63
;;      reg 221 { d1027(bb 5 insn 62) }
;;   UD chains for insn luid 3 uid 64
;;      reg 24 { d207(bb 5 insn 63) }

( 5 )->[6]->( 11 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u81(11){ d63(bb 0 insn -1) }u82(13){ d74(bb 0 insn -1) }u83(25){ d212(bb 0 insn -1) }u84(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191
;; live  gen 	 177
;; live  kill	
;; rd  in  	(43)
15, 33, 48, 60, 63, 73, 74, 207, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
986
;; rd  kill	(4)
983, 984, 985, 986
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(44)
15, 33, 48, 60, 63, 73, 74, 207, 212, 213, 969, 970, 972, 973, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 5 )->[7]->( 11 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u85(11){ d63(bb 0 insn -1) }u86(13){ d74(bb 0 insn -1) }u87(25){ d212(bb 0 insn -1) }u88(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173
;; lr  def 	 24 [cc] 177 222 223 224
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; live  gen 	 24 [cc] 177 222 223 224
;; live  kill	
;; rd  in  	(43)
15, 33, 48, 60, 63, 73, 74, 207, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1120, 1121, 1122, 1123
;; rd  gen 	(5)
153, 984, 1029, 1030, 1031
;; rd  kill	(8)
983, 984, 985, 986, 1029, 1030, 1031, 1032
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(47)
15, 33, 48, 60, 63, 73, 74, 153, 212, 213, 969, 970, 972, 973, 984, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 72
;;      reg 173 { d973(bb 2 insn 31) d972(bb 3 insn 50) }
;;      reg 223 { d1030(bb 7 insn 71) }
;;   eq_note reg 173 { }
;;   UD chains for insn luid 2 uid 73
;;      reg 222 { d1029(bb 7 insn 72) }
;;   UD chains for insn luid 3 uid 74
;;      reg 222 { d1029(bb 7 insn 72) }
;;      reg 224 { d1032(bb 7 insn 73) }
;;   UD chains for insn luid 4 uid 691
;;      reg 224 { d1031(bb 7 insn 74) }
;;   UD chains for insn luid 5 uid 692
;;      reg 24 { d153(bb 7 insn 691) }

( 4 )->[8]->( 10 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u97(11){ d63(bb 0 insn -1) }u98(13){ d74(bb 0 insn -1) }u99(25){ d212(bb 0 insn -1) }u100(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 172
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(42)
15, 33, 48, 60, 63, 73, 74, 208, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
206
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; rd  out 	(42)
15, 33, 48, 60, 63, 73, 74, 206, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 88
;;      reg 172 { d970(bb 2 insn 22) }
;;   UD chains for insn luid 1 uid 89
;;      reg 24 { d206(bb 8 insn 88) }

( 8 )->[9]->( 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u103(11){ d63(bb 0 insn -1) }u104(13){ d74(bb 0 insn -1) }u105(25){ d212(bb 0 insn -1) }u106(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191
;; live  gen 	 177
;; live  kill	
;; rd  in  	(42)
15, 33, 48, 60, 63, 73, 74, 206, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
985
;; rd  kill	(4)
983, 984, 985, 986
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(43)
15, 33, 48, 60, 63, 73, 74, 206, 212, 213, 969, 970, 972, 973, 985, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 8 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u107(11){ d63(bb 0 insn -1) }u108(13){ d74(bb 0 insn -1) }u109(25){ d212(bb 0 insn -1) }u110(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173
;; lr  def 	 24 [cc] 177 225
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; live  gen 	 24 [cc] 177 225
;; live  kill	
;; rd  in  	(42)
15, 33, 48, 60, 63, 73, 74, 206, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;; rd  gen 	(3)
152, 983, 1033
;; rd  kill	(6)
983, 984, 985, 986, 1033, 1034
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(44)
15, 33, 48, 60, 63, 73, 74, 152, 212, 213, 969, 970, 972, 973, 983, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1033, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 96
;;      reg 173 { d973(bb 2 insn 31) d972(bb 3 insn 50) }
;;   UD chains for insn luid 1 uid 97
;;      reg 173 { d973(bb 2 insn 31) d972(bb 3 insn 50) }
;;      reg 225 { d1034(bb 10 insn 96) }
;;   UD chains for insn luid 2 uid 693
;;      reg 225 { d1033(bb 10 insn 97) }
;;   UD chains for insn luid 3 uid 694
;;      reg 24 { d152(bb 10 insn 693) }

( 10 7 6 9 )->[11]->( 12 18 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u116(11){ d63(bb 0 insn -1) }u117(13){ d74(bb 0 insn -1) }u118(25){ d212(bb 0 insn -1) }u119(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 226
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; live  gen 	 24 [cc] 226
;; live  kill	
;; rd  in  	(54)
15, 33, 48, 60, 63, 73, 74, 152, 153, 206, 207, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
205, 1035
;; rd  kill	(1)
1035
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(52)
15, 33, 48, 60, 63, 73, 74, 205, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 109
;;      reg 177 { d986(bb 6 insn 66) d985(bb 9 insn 91) d984(bb 7 insn 692) d983(bb 10 insn 694) }
;;   UD chains for insn luid 1 uid 110
;;      reg 226 { d1035(bb 11 insn 109) }
;;   UD chains for insn luid 2 uid 111
;;      reg 24 { d205(bb 11 insn 110) }

( 11 )->[12]->( 13 14 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u123(11){ d63(bb 0 insn -1) }u124(13){ d74(bb 0 insn -1) }u125(25){ d212(bb 0 insn -1) }u126(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 227
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; live  gen 	 24 [cc] 227
;; live  kill	
;; rd  in  	(52)
15, 33, 48, 60, 63, 73, 74, 205, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
204, 1036
;; rd  kill	(1)
1036
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191
;; rd  out 	(53)
15, 33, 48, 60, 63, 73, 74, 204, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 113
;;      reg 177 { d986(bb 6 insn 66) d985(bb 9 insn 91) d984(bb 7 insn 692) d983(bb 10 insn 694) }
;;   UD chains for insn luid 1 uid 114
;;      reg 227 { d1036(bb 12 insn 113) }
;;   UD chains for insn luid 2 uid 115
;;      reg 24 { d204(bb 12 insn 114) }

( 12 )->[13]->( 17 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u130(11){ d63(bb 0 insn -1) }u131(13){ d74(bb 0 insn -1) }u132(25){ d212(bb 0 insn -1) }u133(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 176 178 228 229
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 176 178 228 229
;; live  kill	 14 [lr]
;; rd  in  	(53)
15, 33, 48, 60, 63, 73, 74, 204, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1120, 1121, 1122, 1123
;; rd  gen 	(5)
13, 981, 987, 1037, 1038
;; rd  kill	(36)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 980, 981, 982, 987, 988, 989, 1037, 1038
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; rd  out 	(57)
13, 33, 48, 60, 63, 73, 74, 204, 212, 213, 969, 970, 972, 973, 981, 983, 984, 985, 986, 987, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 117
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 118
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 119
;;      reg 228 { d1037(bb 13 insn 117) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 3 uid 120
;;      reg 229 { d1038(bb 13 insn 118) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 5 uid 122
;;      reg 191 { d1006(bb 2 insn 5) }
;;   UD chains for insn luid 6 uid 123
;;      reg 13 { d74(bb 0 insn -1) }
;;      reg 0 { d14(bb 13 insn 119) }
;;      reg 1 { d32(bb 13 insn 120) }
;;      reg 2 { d46(bb 13 insn 121) }
;;      reg 3 { d58(bb 13 insn 122) }
;;   UD chains for insn luid 7 uid 124
;;      reg 0 { d13(bb 13 insn 123) }
;;   UD chains for insn luid 8 uid 126
;;      reg 228 { d1037(bb 13 insn 117) }
;;   eq_note reg 25 { }

( 12 )->[14]->( 15 16 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u149(11){ d63(bb 0 insn -1) }u150(13){ d74(bb 0 insn -1) }u151(25){ d212(bb 0 insn -1) }u152(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(53)
15, 33, 48, 60, 63, 73, 74, 204, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
202
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; rd  out 	(53)
15, 33, 48, 60, 63, 73, 74, 202, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 131
;;      reg 171 { d969(bb 2 insn 16) }
;;   UD chains for insn luid 1 uid 132
;;      reg 24 { d202(bb 14 insn 131) }

( 14 18 )->[15]->( 17 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u155(11){ d63(bb 0 insn -1) }u156(13){ d74(bb 0 insn -1) }u157(25){ d212(bb 0 insn -1) }u158(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 176 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 176 178
;; live  kill	
;; rd  in  	(55)
15, 33, 48, 60, 63, 73, 74, 198, 202, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1057, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
982, 989
;; rd  kill	(6)
980, 981, 982, 987, 988, 989
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; rd  out 	(57)
15, 33, 48, 60, 63, 73, 74, 198, 202, 212, 213, 969, 970, 972, 973, 982, 983, 984, 985, 986, 989, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1057, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 134
;;      reg 25 { d212(bb 0 insn -1) }

( 21 14 )->[16]->( 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u160(11){ d63(bb 0 insn -1) }u161(13){ d74(bb 0 insn -1) }u162(25){ d212(bb 0 insn -1) }u163(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 176 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 176 178
;; live  kill	
;; rd  in  	(58)
15, 33, 48, 60, 63, 73, 74, 195, 202, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
980, 988
;; rd  kill	(6)
980, 981, 982, 987, 988, 989
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; rd  out 	(60)
15, 33, 48, 60, 63, 73, 74, 195, 202, 212, 213, 969, 970, 972, 973, 980, 983, 984, 985, 986, 988, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 16 13 15 )->[17]->( 59 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u164(11){ d63(bb 0 insn -1) }u165(13){ d74(bb 0 insn -1) }u166(25){ d212(bb 0 insn -1) }u167(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 184 232 234 235 236 238 239 242 243 244 245 247
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 184 232 234 235 236 238 239 242 243 244 245 247
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(69)
13, 15, 33, 48, 60, 63, 73, 74, 195, 198, 202, 204, 212, 213, 969, 970, 972, 973, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123
;; rd  gen 	(12)
1002, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056
;; rd  kill	(20)
75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1001, 1002, 1039, 1043, 1044, 1048, 1053, 1054, 1055, 1056
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 184
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; rd  out 	(81)
13, 15, 33, 48, 60, 63, 73, 74, 195, 198, 202, 204, 212, 213, 969, 970, 972, 973, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 146
;;      reg 176 { d982(bb 15 insn 134) d981(bb 13 insn 126) d980(bb 16 insn 140) }
;;   UD chains for insn luid 2 uid 148
;;      reg 232 { d1039(bb 17 insn 146) }
;;      reg 234 read/write { d1040(bb 17 insn 705) }
;;   UD chains for insn luid 3 uid 149
;;      reg 234 read/write { d1041(bb 17 insn 148) d1040(bb 17 insn 705) }
;;   UD chains for insn luid 4 uid 151
;;      reg 176 { d982(bb 15 insn 134) d981(bb 13 insn 126) d980(bb 16 insn 140) }
;;   UD chains for insn luid 5 uid 152
;;      reg 236 { d1044(bb 17 insn 151) }
;;   UD chains for insn luid 7 uid 153
;;      reg 235 { d1043(bb 17 insn 152) }
;;      reg 238 read/write { d1045(bb 17 insn 706) }
;;   UD chains for insn luid 8 uid 154
;;      reg 234 { d1042(bb 17 insn 149) d1041(bb 17 insn 148) d1040(bb 17 insn 705) }
;;      reg 238 read/write { d1047(bb 17 insn 153) d1045(bb 17 insn 706) }
;;   UD chains for insn luid 9 uid 155
;;      reg 234 { d1042(bb 17 insn 149) d1041(bb 17 insn 148) d1040(bb 17 insn 705) }
;;      reg 238 { d1047(bb 17 insn 153) d1046(bb 17 insn 154) d1045(bb 17 insn 706) }
;;   UD chains for insn luid 10 uid 157
;;      reg 176 { d982(bb 15 insn 134) d981(bb 13 insn 126) d980(bb 16 insn 140) }
;;   UD chains for insn luid 11 uid 158
;;      reg 244 { d1054(bb 17 insn 157) }
;;   UD chains for insn luid 12 uid 159
;;      reg 176 { d982(bb 15 insn 134) d981(bb 13 insn 126) d980(bb 16 insn 140) }
;;   UD chains for insn luid 14 uid 160
;;      reg 242 read/write { d1049(bb 17 insn 707) }
;;      reg 245 { d1055(bb 17 insn 159) }
;;   UD chains for insn luid 15 uid 161
;;      reg 242 { d1052(bb 17 insn 160) d1049(bb 17 insn 707) }
;;      reg 242 read/write { d1052(bb 17 insn 160) d1049(bb 17 insn 707) }
;;      reg 243 { d1053(bb 17 insn 158) }
;;   UD chains for insn luid 16 uid 163
;;      reg 242 read/write { d1052(bb 17 insn 160) d1051(bb 17 insn 161) d1049(bb 17 insn 707) }
;;      reg 244 { d1054(bb 17 insn 157) }
;;   UD chains for insn luid 17 uid 164
;;      reg 239 { d1048(bb 17 insn 155) }
;;      reg 242 { d1052(bb 17 insn 160) d1051(bb 17 insn 161) d1050(bb 17 insn 163) d1049(bb 17 insn 707) }
;;   UD chains for insn luid 18 uid 165
;;      reg 247 { d1056(bb 17 insn 164) }
;;   UD chains for insn luid 19 uid 166
;;      reg 188 { d1004(bb 2 insn 2) }
;;   UD chains for insn luid 20 uid 167
;;      reg 13 { d74(bb 0 insn -1) }
;;      reg 0 { d12(bb 17 insn 165) }
;;      reg 1 { d30(bb 17 insn 165) }
;;      reg 2 { d44(bb 17 insn 166) }
;;   UD chains for insn luid 21 uid 168
;;      reg 178 { d989(bb 15 insn 135) d988(bb 16 insn 142) d987(bb 13 insn 124) }

( 11 )->[18]->( 15 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u199(11){ d63(bb 0 insn -1) }u200(13){ d74(bb 0 insn -1) }u201(25){ d212(bb 0 insn -1) }u202(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 248
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191
;; live  gen 	 24 [cc] 248
;; live  kill	
;; rd  in  	(52)
15, 33, 48, 60, 63, 73, 74, 205, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
198, 1057
;; rd  kill	(1)
1057
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191
;; rd  out 	(53)
15, 33, 48, 60, 63, 73, 74, 198, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 174
;;      reg 177 { d986(bb 6 insn 66) d985(bb 9 insn 91) d984(bb 7 insn 692) d983(bb 10 insn 694) }
;;   UD chains for insn luid 1 uid 175
;;      reg 248 { d1057(bb 18 insn 174) }
;;   UD chains for insn luid 2 uid 176
;;      reg 24 { d198(bb 18 insn 175) }

( 18 )->[19]->( 20 21 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u206(11){ d63(bb 0 insn -1) }u207(13){ d74(bb 0 insn -1) }u208(25){ d212(bb 0 insn -1) }u209(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 249
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191
;; live  gen 	 24 [cc] 249
;; live  kill	
;; rd  in  	(53)
15, 33, 48, 60, 63, 73, 74, 198, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
197, 1058
;; rd  kill	(1)
1058
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; rd  out 	(54)
15, 33, 48, 60, 63, 73, 74, 197, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 178
;;      reg 177 { d986(bb 6 insn 66) d985(bb 9 insn 91) d984(bb 7 insn 692) d983(bb 10 insn 694) }
;;   UD chains for insn luid 1 uid 179
;;      reg 249 { d1058(bb 19 insn 178) }
;;   UD chains for insn luid 2 uid 180
;;      reg 24 { d197(bb 19 insn 179) }

( 19 )->[20]->( 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u213(11){ d63(bb 0 insn -1) }u214(13){ d74(bb 0 insn -1) }u215(25){ d212(bb 0 insn -1) }u216(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 250
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 0 [r0] 250
;; live  kill	 14 [lr]
;; rd  in  	(54)
15, 33, 48, 60, 63, 73, 74, 197, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
1059
;; rd  kill	(11)
75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1059
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; rd  out 	(55)
15, 33, 48, 60, 63, 73, 74, 197, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 182
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 183
;;      reg 250 { d1059(bb 20 insn 182) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 2 uid 184
;;      reg 13 { d74(bb 0 insn -1) }
;;      reg 0 { d10(bb 20 insn 183) }

( 19 20 )->[21]->( 16 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u222(11){ d63(bb 0 insn -1) }u223(13){ d74(bb 0 insn -1) }u224(25){ d212(bb 0 insn -1) }u225(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 251
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 251
;; live  kill	
;; rd  in  	(55)
15, 33, 48, 60, 63, 73, 74, 197, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
195, 1060
;; rd  kill	(1)
1060
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 251 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 251
;; rd  out 	(56)
15, 33, 48, 60, 63, 73, 74, 195, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 187
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 188
;;      reg 251 { d1060(bb 21 insn 187) }
;;   UD chains for insn luid 2 uid 189
;;      reg 24 { d195(bb 21 insn 188) }

( 21 )->[22]->( 26 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u229(11){ d63(bb 0 insn -1) }u230(13){ d74(bb 0 insn -1) }u231(25){ d212(bb 0 insn -1) }u232(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 251 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 251
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181 182 183 254 255 256 257 259 260 265 267 268 269 270 369 370 377
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 251
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 181 182 183 254 255 256 257 259 260 265 267 268 269 270 369 370 377
;; live  kill	 14 [lr] 377
;; rd  in  	(56)
15, 33, 48, 60, 63, 73, 74, 195, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123
;; rd  gen 	(20)
6, 25, 157, 996, 999, 1000, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1125, 1126, 1130
;; rd  kill	(60)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 999, 1000, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1125, 1126
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 181 188 191 377
;; rd  out 	(73)
6, 25, 48, 60, 63, 73, 74, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 193
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 251 { d1060(bb 21 insn 187) }
;;   UD chains for insn luid 1 uid 194
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 195
;;      reg 183 { d1000(bb 22 insn 194) }
;;   UD chains for insn luid 3 uid 196
;;      reg 254 { d1061(bb 22 insn 195) }
;;   UD chains for insn luid 4 uid 197
;;      reg 256 { d1063(bb 22 insn 196) }
;;   eq_note reg 254 { }
;;   UD chains for insn luid 5 uid 198
;;      reg 255 { d1062(bb 22 insn 197) }
;;   UD chains for insn luid 6 uid 200
;;      reg 257 { d1064(bb 22 insn 198) }
;;   UD chains for insn luid 7 uid 201
;;      reg 260 { d1066(bb 22 insn 200) }
;;   eq_note reg 257 { }
;;   UD chains for insn luid 8 uid 202
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 259 { d1065(bb 22 insn 201) }
;;   UD chains for insn luid 9 uid 205
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 10 uid 208
;;      reg 254 { d1061(bb 22 insn 195) }
;;   UD chains for insn luid 11 uid 209
;;      reg 265 { d1067(bb 22 insn 205) }
;;   UD chains for insn luid 12 uid 210
;;      reg 13 { d74(bb 0 insn -1) }
;;      reg 0 { d2(bb 22 insn 208) }
;;      reg 1 { d19(bb 22 insn 209) }
;;   UD chains for insn luid 13 uid 211
;;      reg 0 { d8(bb 22 insn 210) }
;;   UD chains for insn luid 14 uid 213
;;      reg 182 { d999(bb 22 insn 211) }
;;   UD chains for insn luid 16 uid 214
;;      reg 181 read/write { d995(bb 22 insn 708) }
;;      reg 251 { d1060(bb 21 insn 187) }
;;   UD chains for insn luid 17 uid 215
;;      reg 181 read/write { d998(bb 22 insn 214) d995(bb 22 insn 708) }
;;      reg 267 { d1068(bb 22 insn 213) }
;;   UD chains for insn luid 18 uid 216
;;      reg 181 read/write { d998(bb 22 insn 214) d997(bb 22 insn 215) d995(bb 22 insn 708) }
;;      reg 182 { d999(bb 22 insn 211) }
;;   UD chains for insn luid 19 uid 217
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 20 uid 218
;;      reg 268 { d1069(bb 22 insn 217) }
;;   UD chains for insn luid 21 uid 219
;;      reg 269 { d1070(bb 22 insn 218) }
;;   UD chains for insn luid 22 uid 223
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 23 uid 224
;;      reg 270 { d1071(bb 22 insn 219) }
;;   UD chains for insn luid 24 uid 225
;;      reg 13 { d74(bb 0 insn -1) }
;;      reg 0 { d7(bb 22 insn 223) }
;;      reg 1 { d26(bb 22 insn 223) }
;;      reg 2 { d40(bb 22 insn 224) }
;;   UD chains for insn luid 25 uid 671
;;      reg 0 { d6(bb 22 insn 225) }
;;   UD chains for insn luid 26 uid 672
;;      reg 1 { d25(bb 22 insn 225) }
;;   UD chains for insn luid 28 uid 674
;;      reg 369 { d1125(bb 22 insn 671) }
;;      reg 377 read/write { }
;;   UD chains for insn luid 29 uid 675
;;      reg 370 { d1126(bb 22 insn 672) }
;;      reg 377 read/write { d1131(bb 22 insn 674) }
;;   UD chains for insn luid 30 uid 228
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 377 { d1131(bb 22 insn 674) d1130(bb 22 insn 675) }
;;   UD chains for insn luid 31 uid 229
;;      reg 181 { d998(bb 22 insn 214) d997(bb 22 insn 215) d996(bb 22 insn 216) d995(bb 22 insn 708) }
;;      reg 377 { d1131(bb 22 insn 674) d1130(bb 22 insn 675) }
;;   UD chains for insn luid 32 uid 230
;;      reg 24 { d157(bb 22 insn 229) }

( 22 )->[23]->( 25 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u280(11){ d63(bb 0 insn -1) }u281(13){ d74(bb 0 insn -1) }u282(25){ d212(bb 0 insn -1) }u283(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 181 188 191 377
;; live  gen 	
;; live  kill	
;; rd  in  	(73)
6, 25, 48, 60, 63, 73, 74, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; rd  out 	(73)
6, 25, 48, 60, 63, 73, 74, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 232
;;      reg 24 { d157(bb 22 insn 229) }

( 23 )->[24]->( 26 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u285(11){ d63(bb 0 insn -1) }u286(13){ d74(bb 0 insn -1) }u287(25){ d212(bb 0 insn -1) }u288(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 377
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(73)
6, 25, 48, 60, 63, 73, 74, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(1)
156
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; rd  out 	(73)
6, 25, 48, 60, 63, 73, 74, 156, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 233
;;      reg 181 { d996(bb 22 insn 216) }
;;      reg 377 { d1130(bb 22 insn 675) }
;;   UD chains for insn luid 1 uid 234
;;      reg 24 { d156(bb 24 insn 233) }

( 24 23 )->[25]->( 40 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u292(11){ d63(bb 0 insn -1) }u293(13){ d74(bb 0 insn -1) }u294(25){ d212(bb 0 insn -1) }u295(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; live  gen 	 137
;; live  kill	
;; rd  in  	(74)
6, 25, 48, 60, 63, 73, 74, 156, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(1)
929
;; rd  kill	(3)
927, 928, 929
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 377
;; rd  out 	(75)
6, 25, 48, 60, 63, 73, 74, 156, 157, 212, 213, 929, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 22 24 )->[26]->( 28 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u296(11){ d63(bb 0 insn -1) }u297(13){ d74(bb 0 insn -1) }u298(25){ d212(bb 0 insn -1) }u299(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 377
;; lr  def 	 24 [cc] 153 346
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; live  gen 	 24 [cc] 153 346
;; live  kill	
;; rd  in  	(74)
6, 25, 48, 60, 63, 73, 74, 156, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(3)
155, 952, 1118
;; rd  kill	(1)
1118
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 346 377
;; rd  out 	(75)
6, 25, 48, 60, 63, 73, 74, 155, 212, 213, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 246
;;      reg 153 read/write { d950(bb 26 insn 709) }
;;      reg 181 { d996(bb 22 insn 216) }
;;   UD chains for insn luid 2 uid 247
;;      reg 153 read/write { d951(bb 26 insn 246) d950(bb 26 insn 709) }
;;   UD chains for insn luid 3 uid 248
;;      reg 153 { d952(bb 26 insn 247) d951(bb 26 insn 246) d950(bb 26 insn 709) }
;;   UD chains for insn luid 4 uid 250
;;      reg 346 { d1118(bb 26 insn 248) }
;;      reg 377 { d1130(bb 22 insn 675) }
;;   UD chains for insn luid 5 uid 251
;;      reg 24 { d155(bb 26 insn 250) }

( 26 )->[27]->( 29 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u307(11){ d63(bb 0 insn -1) }u308(13){ d74(bb 0 insn -1) }u309(25){ d212(bb 0 insn -1) }u310(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 346 377
;; live  gen 	 143
;; live  kill	
;; rd  in  	(75)
6, 25, 48, 60, 63, 73, 74, 155, 212, 213, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(1)
941
;; rd  kill	(5)
937, 938, 939, 940, 941
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 346 377
;; rd  out 	(76)
6, 25, 48, 60, 63, 73, 74, 155, 212, 213, 941, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 26 )->[28]->( 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u311(11){ d63(bb 0 insn -1) }u312(13){ d74(bb 0 insn -1) }u313(25){ d212(bb 0 insn -1) }u314(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 377
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc] 143 347
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 346 377
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 143 347
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; rd  in  	(75)
6, 25, 48, 60, 63, 73, 74, 155, 212, 213, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(7)
0, 24, 38, 52, 62, 938, 1119
;; rd  kill	(84)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1119
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 346 377
;; rd  out 	(76)
0, 24, 38, 52, 62, 63, 74, 212, 213, 938, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 267
;;      reg 153 { d952(bb 26 insn 247) }
;;   UD chains for insn luid 1 uid 268
;;      reg 377 { d1130(bb 22 insn 675) }
;;   UD chains for insn luid 2 uid 269
;;      reg 0 { d0(bb 28 insn 268) }
;;      reg 1 { d18(bb 28 insn 268) }
;;      reg 4 { d62(bb 28 insn 267) }
;;   UD chains for insn luid 3 uid 677
;;      reg 2 { d38(bb 28 insn 269) }
;;   UD chains for insn luid 5 uid 271
;;      reg 143 read/write { d937(bb 28 insn 710) }
;;      reg 347 { d1119(bb 28 insn 677) }
;;   UD chains for insn luid 6 uid 272
;;      reg 143 read/write { d940(bb 28 insn 271) d937(bb 28 insn 710) }
;;      reg 153 { d952(bb 26 insn 247) }

( 28 27 )->[29]->( 33 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u325(11){ d63(bb 0 insn -1) }u326(13){ d74(bb 0 insn -1) }u327(25){ d212(bb 0 insn -1) }u328(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181
;; lr  def 	 24 [cc] 142 160 161 162 163 164 275 276 371
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 346 377
;; live  gen 	 24 [cc] 142 160 161 162 163 164 275 276 371
;; live  kill	 24 [cc]
;; rd  in  	(83)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 155, 212, 213, 938, 941, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(10)
190, 936, 961, 962, 963, 964, 965, 1072, 1073, 1127
;; rd  kill	(9)
936, 961, 962, 963, 964, 965, 1072, 1073, 1127
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 346 377
;; rd  out 	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 275
;;      reg 181 { d996(bb 22 insn 216) }
;;   UD chains for insn luid 1 uid 277
;;      reg 143 { d941(bb 27 insn 262) d938(bb 28 insn 272) }
;;   UD chains for insn luid 2 uid 282
;;      reg 275 { d1072(bb 29 insn 275) }
;;      reg 276 { d1073(bb 29 insn 277) }
;;   UD chains for insn luid 3 uid 286
;;      reg 153 { d952(bb 26 insn 247) }
;;   UD chains for insn luid 4 uid 291
;;      reg 160 { d961(bb 29 insn 286) }
;;      reg 276 { d1073(bb 29 insn 277) }
;;   UD chains for insn luid 5 uid 295
;;      reg 143 { d941(bb 27 insn 262) d938(bb 28 insn 272) }
;;   UD chains for insn luid 6 uid 302
;;      reg 275 { d1072(bb 29 insn 275) }
;;      reg 371 { d1127(bb 29 insn 295) }
;;   UD chains for insn luid 7 uid 306
;;      reg 162 { d963(bb 29 insn 302) }
;;      reg 163 { d964(bb 29 insn 291) }
;;   UD chains for insn luid 8 uid 310
;;      reg 160 { d961(bb 29 insn 286) }
;;      reg 371 { d1127(bb 29 insn 295) }
;;   UD chains for insn luid 9 uid 314
;;      reg 142 { d936(bb 29 insn 306) }
;;      reg 162 { d963(bb 29 insn 302) }
;;   UD chains for insn luid 10 uid 315
;;      reg 24 { d190(bb 29 insn 314) }

( 29 )->[30]->( 32 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u346(11){ d63(bb 0 insn -1) }u347(13){ d74(bb 0 insn -1) }u348(25){ d212(bb 0 insn -1) }u349(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 346 377
;; live  gen 	
;; live  kill	
;; rd  in  	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 346 377
;; rd  out 	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 317
;;      reg 24 { d190(bb 29 insn 314) }

( 30 )->[31]->( 33 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u351(11){ d63(bb 0 insn -1) }u352(13){ d74(bb 0 insn -1) }u353(25){ d212(bb 0 insn -1) }u354(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 162
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 346 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(1)
189
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 346 377
;; rd  out 	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 318
;;      reg 142 { d936(bb 29 insn 306) }
;;      reg 162 { d963(bb 29 insn 302) }
;;   UD chains for insn luid 1 uid 319
;;      reg 24 { d189(bb 31 insn 318) }

( 31 30 )->[32]->( 34 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u358(11){ d63(bb 0 insn -1) }u359(13){ d74(bb 0 insn -1) }u360(25){ d212(bb 0 insn -1) }u361(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 166
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 346 377
;; live  gen 	 166
;; live  kill	
;; rd  in  	(93)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(1)
968
;; rd  kill	(2)
967, 968
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 346 377
;; rd  out 	(94)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 29 31 )->[33]->( 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u362(11){ d63(bb 0 insn -1) }u363(13){ d74(bb 0 insn -1) }u364(25){ d212(bb 0 insn -1) }u365(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 166
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 346 377
;; live  gen 	 166
;; live  kill	
;; rd  in  	(93)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(1)
967
;; rd  kill	(2)
967, 968
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 346 377
;; rd  out 	(94)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 967, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 33 32 )->[34]->( 36 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u366(11){ d63(bb 0 insn -1) }u367(13){ d74(bb 0 insn -1) }u368(25){ d212(bb 0 insn -1) }u369(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 161 164 166 181 377
;; lr  def 	 24 [cc] 139 140 141 154 155 156 165 289 290 291 292 378 382
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 346 377
;; live  gen 	 24 [cc] 139 140 141 154 155 156 165 289 290 291 292 378 382
;; live  kill	 24 [cc]
;; rd  in  	(95)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(13)
931, 934, 935, 954, 956, 958, 966, 1075, 1077, 1078, 1079, 1133, 1137
;; rd  kill	(12)
931, 935, 956, 957, 958, 959, 966, 1077, 1078, 1079, 1133, 1137
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; rd  out 	(106)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 212, 213, 931, 934, 935, 936, 938, 941, 952, 954, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 334
;;      reg 140 read/write { d932(bb 34 insn 711) }
;;      reg 142 { d936(bb 29 insn 306) }
;;   UD chains for insn luid 2 uid 335
;;      reg 140 read/write { d933(bb 34 insn 334) d932(bb 34 insn 711) }
;;   UD chains for insn luid 3 uid 336
;;      reg 140 { d934(bb 34 insn 335) d933(bb 34 insn 334) d932(bb 34 insn 711) }
;;      reg 161 { d962(bb 29 insn 282) }
;;   UD chains for insn luid 5 uid 337
;;      reg 142 { d936(bb 29 insn 306) }
;;      reg 289 read/write { d1074(bb 34 insn 712) }
;;   UD chains for insn luid 6 uid 338
;;      reg 140 { d934(bb 34 insn 335) d933(bb 34 insn 334) d932(bb 34 insn 711) }
;;      reg 289 read/write { d1076(bb 34 insn 337) d1074(bb 34 insn 712) }
;;   UD chains for insn luid 7 uid 339
;;      reg 164 { d965(bb 29 insn 310) }
;;      reg 289 { d1076(bb 34 insn 337) d1075(bb 34 insn 338) d1074(bb 34 insn 712) }
;;   UD chains for insn luid 8 uid 695
;;      reg 139 { d931(bb 34 insn 336) }
;;      reg 140 { d934(bb 34 insn 335) d933(bb 34 insn 334) d932(bb 34 insn 711) }
;;   UD chains for insn luid 9 uid 696
;;      reg 24 { d151(bb 34 insn 695) }
;;   UD chains for insn luid 10 uid 697
;;      reg 378 { d1133(bb 34 insn 696) }
;;   UD chains for insn luid 11 uid 354
;;      reg 165 { d966(bb 34 insn 339) }
;;      reg 290 { d1077(bb 34 insn 697) }
;;   UD chains for insn luid 13 uid 356
;;      reg 141 { d935(bb 34 insn 354) }
;;      reg 166 { d968(bb 32 insn 326) d967(bb 33 insn 331) }
;;   UD chains for insn luid 14 uid 357
;;      reg 139 { d931(bb 34 insn 336) }
;;      reg 291 { d1078(bb 34 insn 355) }
;;      reg 292 { d1079(bb 34 insn 356) }
;;      reg 377 { d1130(bb 22 insn 675) }
;;   UD chains for insn luid 16 uid 358
;;      reg 154 read/write { d953(bb 34 insn 713) }
;;      reg 181 { d996(bb 22 insn 216) }
;;   UD chains for insn luid 17 uid 359
;;      reg 140 { d934(bb 34 insn 335) d933(bb 34 insn 334) d932(bb 34 insn 711) }
;;      reg 154 read/write { d955(bb 34 insn 358) d953(bb 34 insn 713) }

( 36 )->[35]->( 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u397(11){ d63(bb 0 insn -1) }u398(13){ d74(bb 0 insn -1) }u399(25){ d212(bb 0 insn -1) }u400(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 382
;; lr  def 	 24 [cc] 143 155 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; live  gen 	 143 155 156
;; live  kill	 24 [cc]
;; rd  in  	(110)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 183, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(3)
939, 957, 959
;; rd  kill	(9)
937, 938, 939, 940, 941, 956, 957, 958, 959
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; rd  out 	(105)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 212, 213, 931, 934, 935, 936, 939, 952, 954, 957, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 364
;;      reg 143 { d941(bb 27 insn 262) d939(bb 35 insn 364) d938(bb 28 insn 272) }
;;      reg 382 { d1137(bb 34 insn 363) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 1 uid 365
;;      reg 153 { d952(bb 26 insn 247) }
;;      reg 154 { d954(bb 34 insn 359) }
;;      reg 155 { d957(bb 35 insn 365) d956(bb 34 insn 357) }
;;      reg 156 { d959(bb 35 insn 365) d958(bb 34 insn 357) }

( 35 34 )->[36]->( 35 37 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u408(11){ d63(bb 0 insn -1) }u409(13){ d74(bb 0 insn -1) }u410(25){ d212(bb 0 insn -1) }u411(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(109)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
183
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; rd  out 	(110)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 183, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 369
;;      reg 155 { d957(bb 35 insn 365) d956(bb 34 insn 357) }
;;   UD chains for insn luid 1 uid 370
;;      reg 24 { d183(bb 36 insn 369) }

( 36 )->[37]->( 39 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u414(11){ d63(bb 0 insn -1) }u415(13){ d74(bb 0 insn -1) }u416(25){ d212(bb 0 insn -1) }u417(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 155 156 160 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 156 346
;; lr  def 	 24 [cc] 159 295 297
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 155 156 160 181 188 191 346 377
;; live  gen 	 24 [cc] 159 295 297
;; live  kill	
;; rd  in  	(110)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 183, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(4)
182, 960, 1082, 1084
;; rd  kill	(1)
960
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160 181 188 191 377
;; rd  out 	(113)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 182, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 379
;;      reg 156 { d959(bb 35 insn 365) d958(bb 34 insn 357) }
;;      reg 295 read/write { d1080(bb 37 insn 714) }
;;   UD chains for insn luid 2 uid 380
;;      reg 295 read/write { d1081(bb 37 insn 379) d1080(bb 37 insn 714) }
;;   UD chains for insn luid 4 uid 381
;;      reg 155 { d957(bb 35 insn 365) d956(bb 34 insn 357) }
;;      reg 297 read/write { d1083(bb 37 insn 715) }
;;   UD chains for insn luid 5 uid 382
;;      reg 295 { d1082(bb 37 insn 380) d1081(bb 37 insn 379) d1080(bb 37 insn 714) }
;;      reg 297 read/write { d1085(bb 37 insn 381) d1083(bb 37 insn 715) }
;;   UD chains for insn luid 6 uid 383
;;      reg 295 { d1082(bb 37 insn 380) d1081(bb 37 insn 379) d1080(bb 37 insn 714) }
;;      reg 297 { d1085(bb 37 insn 381) d1084(bb 37 insn 382) d1083(bb 37 insn 715) }
;;   UD chains for insn luid 7 uid 384
;;      reg 159 { d960(bb 37 insn 383) }
;;      reg 346 { d1118(bb 26 insn 248) }
;;   UD chains for insn luid 8 uid 385
;;      reg 24 { d182(bb 37 insn 384) }

( 37 )->[38]->( 40 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u430(11){ d63(bb 0 insn -1) }u431(13){ d74(bb 0 insn -1) }u432(25){ d212(bb 0 insn -1) }u433(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 137 298
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 181 188 191 377
;; live  gen 	 137 298
;; live  kill	
;; rd  in  	(113)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 182, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(2)
928, 1086
;; rd  kill	(4)
927, 928, 929, 1086
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 377
;; rd  out 	(115)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 182, 212, 213, 928, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 397
;;      reg 143 { d941(bb 27 insn 262) d939(bb 35 insn 364) d938(bb 28 insn 272) }
;;      reg 298 { d1086(bb 38 insn 396) }
;;   eq_note reg 143 { }

( 37 )->[39]->( 40 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u437(11){ d63(bb 0 insn -1) }u438(13){ d74(bb 0 insn -1) }u439(25){ d212(bb 0 insn -1) }u440(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc] 137 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160 181 188 191 377
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 137 138
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; rd  in  	(113)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 182, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(7)
5, 22, 37, 51, 61, 927, 930
;; rd  kill	(87)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 927, 928, 929, 930
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 377
;; rd  out 	(109)
5, 22, 37, 51, 61, 63, 74, 212, 213, 927, 930, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 402
;;      reg 160 { d961(bb 29 insn 286) }
;;   UD chains for insn luid 1 uid 403
;;      reg 159 { d960(bb 37 insn 383) }
;;   UD chains for insn luid 2 uid 404
;;      reg 0 { d5(bb 39 insn 403) }
;;      reg 1 { d23(bb 39 insn 403) }
;;      reg 4 { d61(bb 39 insn 402) }
;;   UD chains for insn luid 3 uid 405
;;      reg 2 { d37(bb 39 insn 404) }
;;      reg 3 { d51(bb 39 insn 404) }
;;   UD chains for insn luid 4 uid 406
;;      reg 138 { d930(bb 39 insn 405) }
;;      reg 143 { d941(bb 27 insn 262) d939(bb 35 insn 364) d938(bb 28 insn 272) }

( 25 39 38 )->[40]->( 56 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u450(11){ d63(bb 0 insn -1) }u451(13){ d74(bb 0 insn -1) }u452(25){ d212(bb 0 insn -1) }u453(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181
;; lr  def 	 24 [cc] 144 299 300 301 302
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 377
;; live  gen 	 24 [cc] 144 299 300 301 302
;; live  kill	 24 [cc]
;; rd  in  	(125)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 156, 157, 182, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(6)
178, 943, 1087, 1088, 1089, 1090
;; rd  kill	(6)
942, 943, 1087, 1088, 1089, 1090
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 301 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 301 377
;; rd  out 	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 178, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 410
;;      reg 181 { d996(bb 22 insn 216) }
;;      reg 300 { d1088(bb 40 insn 409) }
;;   eq_note reg 181 { }
;;   UD chains for insn luid 2 uid 411
;;      reg 137 { d929(bb 25 insn 241) d928(bb 38 insn 397) d927(bb 39 insn 406) }
;;      reg 299 { d1087(bb 40 insn 410) }
;;   UD chains for insn luid 3 uid 412
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 144 { d943(bb 40 insn 411) }
;;   UD chains for insn luid 5 uid 414
;;      reg 144 { d943(bb 40 insn 411) }
;;      reg 302 { d1090(bb 40 insn 413) }
;;   eq_note reg 144 { }
;;   UD chains for insn luid 6 uid 415
;;      reg 301 { d1089(bb 40 insn 414) }
;;   UD chains for insn luid 7 uid 416
;;      reg 24 { d178(bb 40 insn 415) }

( 40 )->[41]->( 56 42 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u466(11){ d63(bb 0 insn -1) }u467(13){ d74(bb 0 insn -1) }u468(25){ d212(bb 0 insn -1) }u469(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 301 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 301
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 301 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 178, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
177
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; rd  out 	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 177, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 419
;;      reg 301 { d1089(bb 40 insn 414) }
;;   UD chains for insn luid 1 uid 420
;;      reg 24 { d177(bb 41 insn 419) }

( 41 )->[42]->( 45 43 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u472(11){ d63(bb 0 insn -1) }u473(13){ d74(bb 0 insn -1) }u474(25){ d212(bb 0 insn -1) }u475(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 177, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
176
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; rd  out 	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 176, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 427
;;      reg 144 { d943(bb 40 insn 411) }
;;   UD chains for insn luid 1 uid 428
;;      reg 24 { d176(bb 42 insn 427) }

( 42 )->[43]->( 45 44 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u478(11){ d63(bb 0 insn -1) }u479(13){ d74(bb 0 insn -1) }u480(25){ d212(bb 0 insn -1) }u481(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 176, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
175
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; rd  out 	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 431
;;      reg 144 { d943(bb 40 insn 411) }
;;   UD chains for insn luid 1 uid 432
;;      reg 24 { d175(bb 43 insn 431) }

( 43 )->[44]->( 56 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u484(11){ d63(bb 0 insn -1) }u485(13){ d74(bb 0 insn -1) }u486(25){ d212(bb 0 insn -1) }u487(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 303
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 303
;; live  kill	
;; rd  in  	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
1091
;; rd  kill	(1)
1091
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; rd  out 	(129)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 440
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 303 { d1091(bb 44 insn 439) }

( 42 43 )->[45]->( 49 46 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u490(11){ d63(bb 0 insn -1) }u491(13){ d74(bb 0 insn -1) }u492(25){ d212(bb 0 insn -1) }u493(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 377
;; lr  def 	 24 [cc] 136 149 150 151 179 304 305 373
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; live  gen 	 24 [cc] 136 149 150 151 179 304 305 373
;; live  kill	 24 [cc]
;; rd  in  	(129)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 176, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(9)
173, 926, 947, 948, 949, 991, 1092, 1093, 1128
;; rd  kill	(7)
926, 947, 948, 949, 1092, 1093, 1128
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191
;; rd  out 	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 445
;;      reg 377 { d1130(bb 22 insn 675) }
;;   UD chains for insn luid 2 uid 446
;;      reg 179 read/write { d990(bb 45 insn 716) }
;;      reg 377 { d1130(bb 22 insn 675) }
;;   UD chains for insn luid 3 uid 447
;;      reg 179 { d992(bb 45 insn 446) d990(bb 45 insn 716) }
;;      reg 179 read/write { d992(bb 45 insn 446) d990(bb 45 insn 716) }
;;      reg 304 { d1092(bb 45 insn 445) }
;;   UD chains for insn luid 4 uid 448
;;      reg 179 read/write { d993(bb 45 insn 447) d992(bb 45 insn 446) d990(bb 45 insn 716) }
;;      reg 377 { d1130(bb 22 insn 675) }
;;   UD chains for insn luid 5 uid 449
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 179 { d993(bb 45 insn 447) d992(bb 45 insn 446) d991(bb 45 insn 448) d990(bb 45 insn 716) }
;;   UD chains for insn luid 6 uid 450
;;      reg 144 { d943(bb 40 insn 411) }
;;   UD chains for insn luid 7 uid 455
;;      reg 305 { d1093(bb 45 insn 450) }
;;      reg 305 { d1093(bb 45 insn 450) }
;;   UD chains for insn luid 8 uid 459
;;      reg 144 { d943(bb 40 insn 411) }
;;   UD chains for insn luid 9 uid 466
;;      reg 305 { d1093(bb 45 insn 450) }
;;      reg 373 { d1128(bb 45 insn 459) }
;;   UD chains for insn luid 10 uid 470
;;      reg 150 { d948(bb 45 insn 466) }
;;      reg 150 { d948(bb 45 insn 466) }
;;   UD chains for insn luid 11 uid 474
;;      reg 373 { d1128(bb 45 insn 459) }
;;      reg 373 { d1128(bb 45 insn 459) }
;;   UD chains for insn luid 12 uid 478
;;      reg 136 { d926(bb 45 insn 470) }
;;      reg 150 { d948(bb 45 insn 466) }
;;   UD chains for insn luid 13 uid 479
;;      reg 24 { d173(bb 45 insn 478) }

( 45 )->[46]->( 48 47 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u517(11){ d63(bb 0 insn -1) }u518(13){ d74(bb 0 insn -1) }u519(25){ d212(bb 0 insn -1) }u520(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191
;; live  gen 	
;; live  kill	
;; rd  in  	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191
;; rd  out 	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 481
;;      reg 24 { d173(bb 45 insn 478) }

( 46 )->[47]->( 49 48 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u522(11){ d63(bb 0 insn -1) }u523(13){ d74(bb 0 insn -1) }u524(25){ d212(bb 0 insn -1) }u525(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 150
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(1)
172
;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191
;; rd  out 	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 482
;;      reg 136 { d926(bb 45 insn 470) }
;;      reg 150 { d948(bb 45 insn 466) }
;;   UD chains for insn luid 1 uid 483
;;      reg 24 { d172(bb 47 insn 482) }

( 47 46 )->[48]->( 50 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u529(11){ d63(bb 0 insn -1) }u530(13){ d74(bb 0 insn -1) }u531(25){ d212(bb 0 insn -1) }u532(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191
;; live  gen 	 147
;; live  kill	
;; rd  in  	(137)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(1)
945
;; rd  kill	(2)
944, 945
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191
;; rd  out 	(138)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 945, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 45 47 )->[49]->( 50 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u533(11){ d63(bb 0 insn -1) }u534(13){ d74(bb 0 insn -1) }u535(25){ d212(bb 0 insn -1) }u536(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191
;; live  gen 	 147
;; live  kill	
;; rd  in  	(137)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(1)
944
;; rd  kill	(2)
944, 945
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191
;; rd  out 	(138)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 944, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 49 48 )->[50]->( 52 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u537(11){ d63(bb 0 insn -1) }u538(13){ d74(bb 0 insn -1) }u539(25){ d212(bb 0 insn -1) }u540(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 147 149 151 179
;; lr  def 	 24 [cc] 133 134 135 148 174 175 316 317 318 319 379 380 381
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191
;; live  gen 	 24 [cc] 133 134 135 148 174 175 316 317 318 319 379 380 381
;; live  kill	 24 [cc]
;; rd  in  	(139)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 944, 945, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(13)
921, 924, 925, 946, 977, 979, 1095, 1097, 1098, 1099, 1134, 1135, 1136
;; rd  kill	(13)
921, 925, 946, 976, 977, 978, 979, 1097, 1098, 1099, 1134, 1135, 1136
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 380 381
;; rd  out 	(150)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 977, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 498
;;      reg 134 read/write { d922(bb 50 insn 717) }
;;      reg 136 { d926(bb 45 insn 470) }
;;   UD chains for insn luid 2 uid 499
;;      reg 134 read/write { d923(bb 50 insn 498) d922(bb 50 insn 717) }
;;   UD chains for insn luid 3 uid 500
;;      reg 134 { d924(bb 50 insn 499) d923(bb 50 insn 498) d922(bb 50 insn 717) }
;;      reg 151 { d949(bb 45 insn 455) }
;;   UD chains for insn luid 5 uid 501
;;      reg 136 { d926(bb 45 insn 470) }
;;      reg 316 read/write { d1094(bb 50 insn 718) }
;;   UD chains for insn luid 6 uid 502
;;      reg 134 { d924(bb 50 insn 499) d923(bb 50 insn 498) d922(bb 50 insn 717) }
;;      reg 316 read/write { d1096(bb 50 insn 501) d1094(bb 50 insn 718) }
;;   UD chains for insn luid 7 uid 503
;;      reg 149 { d947(bb 45 insn 474) }
;;      reg 316 { d1096(bb 50 insn 501) d1095(bb 50 insn 502) d1094(bb 50 insn 718) }
;;   UD chains for insn luid 8 uid 698
;;      reg 133 { d921(bb 50 insn 500) }
;;      reg 134 { d924(bb 50 insn 499) d923(bb 50 insn 498) d922(bb 50 insn 717) }
;;   UD chains for insn luid 9 uid 699
;;      reg 24 { d150(bb 50 insn 698) }
;;   UD chains for insn luid 10 uid 700
;;      reg 379 { d1134(bb 50 insn 699) }
;;   UD chains for insn luid 11 uid 518
;;      reg 148 { d946(bb 50 insn 503) }
;;      reg 317 { d1097(bb 50 insn 700) }
;;   UD chains for insn luid 13 uid 520
;;      reg 135 { d925(bb 50 insn 518) }
;;      reg 147 { d945(bb 48 insn 490) d944(bb 49 insn 495) }
;;   UD chains for insn luid 14 uid 521
;;      reg 133 { d921(bb 50 insn 500) }
;;      reg 179 { d991(bb 45 insn 448) }
;;      reg 318 { d1098(bb 50 insn 519) }
;;      reg 319 { d1099(bb 50 insn 520) }

( 52 )->[51]->( 52 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u564(11){ d63(bb 0 insn -1) }u565(13){ d74(bb 0 insn -1) }u566(25){ d212(bb 0 insn -1) }u567(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 324 381
;; lr  def 	 24 [cc] 174 175 320 321
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  gen 	 174 175 320 321 324
;; live  kill	 24 [cc]
;; rd  in  	(156)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 164, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(5)
976, 978, 1100, 1101, 1102
;; rd  kill	(6)
976, 977, 978, 979, 1100, 1101
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; rd  out 	(153)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 978, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 525
;;      reg 144 { d942(bb 52 insn 534) }
;;      reg 144 { d942(bb 52 insn 534) }
;;   UD chains for insn luid 1 uid 527
;;      reg 320 { d1100(bb 51 insn 525) }
;;      reg 381 { d1136(bb 50 insn 526) }
;;   eq_note reg 320 { }
;;   UD chains for insn luid 2 uid 528
;;      reg 144 { d942(bb 52 insn 534) }
;;      reg 324 read/write { d1102(bb 51 insn 529) }
;;   UD chains for insn luid 3 uid 529
;;      reg 324 read/write { d1103(bb 51 insn 528) d1102(bb 51 insn 529) }
;;   UD chains for insn luid 4 uid 530
;;      reg 174 { d977(bb 50 insn 521) d976(bb 51 insn 530) }
;;      reg 175 { d979(bb 50 insn 521) d978(bb 51 insn 530) }
;;      reg 321 { d1101(bb 51 insn 527) }
;;      reg 324 { d1103(bb 51 insn 528) d1102(bb 51 insn 529) }

( 51 50 )->[52]->( 51 53 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u580(11){ d63(bb 0 insn -1) }u581(13){ d74(bb 0 insn -1) }u582(25){ d212(bb 0 insn -1) }u583(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 175 380
;; lr  def 	 24 [cc] 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  gen 	 24 [cc] 144
;; live  kill	 24 [cc]
;; rd  in  	(156)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(2)
164, 942
;; rd  kill	(2)
942, 943
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; rd  out 	(156)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 164, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 534
;;      reg 144 { d943(bb 40 insn 411) d942(bb 52 insn 534) }
;;      reg 380 { d1135(bb 50 insn 533) }
;;   eq_note reg 144 { }
;;   UD chains for insn luid 1 uid 536
;;      reg 175 { d979(bb 50 insn 521) d978(bb 51 insn 530) }
;;   UD chains for insn luid 2 uid 537
;;      reg 24 { d164(bb 52 insn 536) }

( 52 )->[53]->( 55 54 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u589(11){ d63(bb 0 insn -1) }u590(13){ d74(bb 0 insn -1) }u591(25){ d212(bb 0 insn -1) }u592(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 175
;; lr  def 	 24 [cc] 326 327 328
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191
;; live  gen 	 24 [cc] 326 327 328
;; live  kill	
;; rd  in  	(156)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 164, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(4)
163, 1105, 1106, 1107
;; rd  kill	(5)
1104, 1105, 1106, 1107, 1108
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; rd  out 	(159)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 163, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1105, 1106, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 547
;;      reg 174 { d977(bb 50 insn 521) d976(bb 51 insn 530) }
;;      reg 175 { d979(bb 50 insn 521) d978(bb 51 insn 530) }
;;   UD chains for insn luid 2 uid 548
;;      reg 327 { d1106(bb 53 insn 547) }
;;   UD chains for insn luid 3 uid 549
;;      reg 327 { d1106(bb 53 insn 547) }
;;      reg 328 { d1108(bb 53 insn 548) }
;;   UD chains for insn luid 4 uid 550
;;      reg 328 { d1107(bb 53 insn 549) }
;;   UD chains for insn luid 5 uid 551
;;      reg 24 { d163(bb 53 insn 550) }

( 53 )->[54]->( 55 )
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u600(11){ d63(bb 0 insn -1) }u601(13){ d74(bb 0 insn -1) }u602(25){ d212(bb 0 insn -1) }u603(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 326
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191
;; live  gen 	 326
;; live  kill	
;; rd  in  	(159)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 163, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1105, 1106, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(1)
1104
;; rd  kill	(2)
1104, 1105
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; rd  out 	(159)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 163, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1106, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 53 54 )->[55]->( 56 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u604(11){ d63(bb 0 insn -1) }u605(13){ d74(bb 0 insn -1) }u606(25){ d212(bb 0 insn -1) }u607(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 326
;; lr  def 	 24 [cc] 329 330 331
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; live  gen 	 329 330 331
;; live  kill	 24 [cc]
;; rd  in  	(160)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 163, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(3)
1109, 1110, 1111
;; rd  kill	(3)
1109, 1110, 1111
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; rd  out 	(162)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 555
;;      reg 144 { d942(bb 52 insn 534) }
;;      reg 330 { d1110(bb 55 insn 554) }
;;   eq_note reg 144 { }
;;   UD chains for insn luid 2 uid 556
;;      reg 326 { d1105(bb 53 insn 546) d1104(bb 54 insn 552) }
;;      reg 329 { d1109(bb 55 insn 555) }
;;   UD chains for insn luid 3 uid 557
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 331 { d1111(bb 55 insn 556) }

( 55 41 40 44 )->[56]->( 58 57 )
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u615(11){ d63(bb 0 insn -1) }u616(13){ d74(bb 0 insn -1) }u617(25){ d212(bb 0 insn -1) }u618(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 180 332 376
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 180 332 376
;; live  kill	
;; rd  in  	(167)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 177, 178, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(4)
158, 994, 1113, 1129
;; rd  kill	(4)
994, 1112, 1113, 1129
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; rd  out 	(168)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 560
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 562
;;      reg 180 { d994(bb 56 insn 560) }
;;   UD chains for insn luid 3 uid 566
;;      reg 376 { d1129(bb 56 insn 562) }
;;   UD chains for insn luid 4 uid 567
;;      reg 24 { d158(bb 56 insn 566) }

( 56 )->[57]->( 58 )
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u623(11){ d63(bb 0 insn -1) }u624(13){ d74(bb 0 insn -1) }u625(25){ d212(bb 0 insn -1) }u626(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 332
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191
;; live  gen 	 332
;; live  kill	
;; rd  in  	(168)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(1)
1112
;; rd  kill	(2)
1112, 1113
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; rd  out 	(168)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }

( 56 57 )->[58]->( 59 )
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u627(11){ d63(bb 0 insn -1) }u628(13){ d74(bb 0 insn -1) }u629(25){ d212(bb 0 insn -1) }u630(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 184 336 337 338 339
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 184 336 337 338 339
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(169)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(6)
3, 1001, 1114, 1115, 1116, 1117
;; rd  kill	(34)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1001, 1002, 1114, 1115, 1116, 1117
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 184
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; rd  out 	(172)
3, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 570
;;      reg 180 { d994(bb 56 insn 560) }
;;   UD chains for insn luid 1 uid 571
;;      reg 332 { d1113(bb 56 insn 561) d1112(bb 57 insn 568) }
;;      reg 336 { d1114(bb 58 insn 570) }
;;   UD chains for insn luid 2 uid 572
;;      reg 25 { d212(bb 0 insn -1) }
;;      reg 337 { d1115(bb 58 insn 571) }
;;   UD chains for insn luid 3 uid 573
;;      reg 25 { d212(bb 0 insn -1) }
;;   UD chains for insn luid 5 uid 575
;;      reg 13 { d74(bb 0 insn -1) }
;;      reg 339 { d1117(bb 58 insn 574) }
;;   UD chains for insn luid 6 uid 576
;;      reg 188 { d1004(bb 2 insn 2) }
;;   UD chains for insn luid 7 uid 577
;;      reg 338 { d1116(bb 58 insn 573) }
;;   eq_note reg 25 { }
;;   UD chains for insn luid 8 uid 578
;;      reg 191 { d1006(bb 2 insn 5) }
;;   UD chains for insn luid 10 uid 580
;;      reg 13 { d74(bb 0 insn -1) }
;;      reg 0 { d4(bb 58 insn 576) }
;;      reg 1 { d21(bb 58 insn 577) }
;;      reg 2 { d36(bb 58 insn 578) }
;;      reg 3 { d50(bb 58 insn 579) }
;;   UD chains for insn luid 11 uid 581
;;      reg 0 { d3(bb 58 insn 580) }

( 58 17 )->[59]->( 1 )
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u649(11){ d63(bb 0 insn -1) }u650(13){ d74(bb 0 insn -1) }u651(25){ d212(bb 0 insn -1) }u652(26){ d213(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 184
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(200)
3, 13, 15, 22, 24, 25, 33, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 195, 198, 202, 204, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(1)
1
;; rd  kill	(18)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(198)
1, 22, 24, 25, 33, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 195, 198, 202, 204, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 25 { d212(bb 0 insn -1) }
;;   reg 26 { d213(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 588
;;      reg 184 { d1002(bb 17 insn 168) d1001(bb 58 insn 581) }
;;   UD chains for insn luid 1 uid 594
;;      reg 0 { d1(bb 59 insn 588) }

( 59 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u655(0){ d1(bb 59 insn 588) }u656(11){ d63(bb 0 insn -1) }u657(13){ d74(bb 0 insn -1) }u658(14){ }u659(25){ d212(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(198)
1, 22, 24, 25, 33, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 195, 198, 202, 204, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(198)
1, 22, 24, 25, 33, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 195, 198, 202, 204, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;;  UD chains for artificial uses
;;   reg 0 { d1(bb 59 insn 588) }
;;   reg 11 { d63(bb 0 insn -1) }
;;   reg 13 { d74(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d212(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 47 to worklist
  Adding insn 23 to worklist
  Adding insn 17 to worklist
  Adding insn 10 to worklist
  Adding insn 59 to worklist
  Adding insn 53 to worklist
  Adding insn 64 to worklist
  Adding insn 719 to worklist
  Adding insn 721 to worklist
  Adding insn 89 to worklist
  Adding insn 723 to worklist
  Adding insn 111 to worklist
  Adding insn 115 to worklist
  Adding insn 725 to worklist
  Adding insn 123 to worklist
  Adding insn 132 to worklist
  Adding insn 727 to worklist
  Adding insn 729 to worklist
  Adding insn 167 to worklist
  Adding insn 176 to worklist
  Adding insn 180 to worklist
  Adding insn 184 to worklist
  Adding insn 189 to worklist
  Adding insn 230 to worklist
  Adding insn 228 to worklist
  Adding insn 673 to worklist
  Adding insn 210 to worklist
  Adding insn 202 to worklist
  Adding insn 193 to worklist
  Adding insn 232 to worklist
  Adding insn 234 to worklist
  Adding insn 731 to worklist
  Adding insn 251 to worklist
  Adding insn 733 to worklist
  Adding insn 315 to worklist
  Adding insn 317 to worklist
  Adding insn 319 to worklist
  Adding insn 735 to worklist
  Adding insn 737 to worklist
  Adding insn 370 to worklist
  Adding insn 385 to worklist
  Adding insn 739 to worklist
  Adding insn 416 to worklist
  Adding insn 412 to worklist
  Adding insn 420 to worklist
  Adding insn 428 to worklist
  Adding insn 432 to worklist
  Adding insn 741 to worklist
  Adding insn 440 to worklist
  Adding insn 479 to worklist
  Adding insn 449 to worklist
  Adding insn 481 to worklist
  Adding insn 483 to worklist
  Adding insn 743 to worklist
  Adding insn 745 to worklist
  Adding insn 537 to worklist
  Adding insn 551 to worklist
  Adding insn 557 to worklist
  Adding insn 567 to worklist
  Adding insn 580 to worklist
  Adding insn 575 to worklist
  Adding insn 572 to worklist
  Adding insn 594 to worklist
Finished finding needed instructions:
  Adding insn 588 to worklist
Processing use of (reg 184 [ D.4281 ]) in insn 588:
  Adding insn 168 to worklist
  Adding insn 581 to worklist
Processing use of (reg 0 r0) in insn 581:
Processing use of (reg 178 [ ret ]) in insn 168:
  Adding insn 135 to worklist
  Adding insn 142 to worklist
  Adding insn 124 to worklist
Processing use of (reg 0 r0) in insn 124:
Processing use of (reg 0 r0) in insn 594:
Processing use of (reg 25 sfp) in insn 572:
Processing use of (reg 337) in insn 572:
  Adding insn 571 to worklist
Processing use of (reg 332) in insn 571:
  Adding insn 561 to worklist
  Adding insn 568 to worklist
Processing use of (reg 336) in insn 571:
  Adding insn 570 to worklist
Processing use of (reg 180 [ D.4307 ]) in insn 570:
  Adding insn 560 to worklist
Processing use of (reg 25 sfp) in insn 560:
Processing use of (reg 13 sp) in insn 575:
Processing use of (reg 339) in insn 575:
  Adding insn 574 to worklist
Processing use of (reg 13 sp) in insn 580:
Processing use of (reg 0 r0) in insn 580:
  Adding insn 576 to worklist
Processing use of (reg 1 r1) in insn 580:
  Adding insn 577 to worklist
Processing use of (reg 2 r2) in insn 580:
  Adding insn 578 to worklist
Processing use of (reg 3 r3) in insn 580:
  Adding insn 579 to worklist
Processing use of (reg 191 [ fpscr ]) in insn 578:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 338) in insn 577:
  Adding insn 573 to worklist
Processing use of (reg 25 sfp) in insn 573:
Processing use of (reg 188 [ dd ]) in insn 576:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 24 cc) in insn 567:
  Adding insn 566 to worklist
Processing use of (reg 376 [+4 ]) in insn 566:
  Adding insn 562 to worklist
Processing use of (subreg (reg 180 [ D.4307 ]) 0) in insn 562:
Processing use of (reg 25 sfp) in insn 557:
Processing use of (reg 331) in insn 557:
  Adding insn 556 to worklist
Processing use of (reg 326) in insn 556:
  Adding insn 546 to worklist
  Adding insn 552 to worklist
Processing use of (reg 329) in insn 556:
  Adding insn 555 to worklist
Processing use of (reg 144 [ ivtmp.1234 ]) in insn 555:
  Adding insn 534 to worklist
Processing use of (reg 330) in insn 555:
  Adding insn 554 to worklist
Processing use of (reg 144 [ ivtmp.1234 ]) in insn 534:
  Adding insn 411 to worklist
Processing use of (reg 380) in insn 534:
  Adding insn 533 to worklist
Processing use of (reg 137 [ z.1257 ]) in insn 411:
  Adding insn 241 to worklist
  Adding insn 397 to worklist
  Adding insn 406 to worklist
Processing use of (reg 299) in insn 411:
  Adding insn 410 to worklist
Processing use of (reg 181 [ D.4301 ]) in insn 410:
  Adding insn 216 to worklist
Processing use of (reg 300) in insn 410:
  Adding insn 409 to worklist
Processing use of (reg 181 [ D.4301 ]) in insn 216:
  Adding insn 214 to worklist
  Adding insn 215 to worklist
  Adding insn 708 to worklist
Processing use of (reg 182 [ D.4299 ]) in insn 216:
  Adding insn 211 to worklist
Processing use of (reg 0 r0) in insn 211:
Processing use of (reg 181 [ D.4301 ]) in insn 215:
Processing use of (reg 267) in insn 215:
  Adding insn 213 to worklist
Processing use of (reg 182 [ D.4299 ]) in insn 213:
Processing use of (reg 181 [ D.4301 ]) in insn 214:
Processing use of (reg 251 [ vdm.sign ]) in insn 214:
  Adding insn 187 to worklist
Processing use of (reg 25 sfp) in insn 187:
Processing use of (reg 138 [ remh.1256 ]) in insn 406:
  Adding insn 405 to worklist
Processing use of (reg 143 [ z.1250 ]) in insn 406:
  Adding insn 262 to worklist
  Adding insn 364 to worklist
  Adding insn 272 to worklist
Processing use of (reg 143 [ z.1250 ]) in insn 272:
  Adding insn 271 to worklist
  Adding insn 710 to worklist
Processing use of (subreg (reg 153 [ mh ]) 4) in insn 272:
  Adding insn 247 to worklist
Processing use of (reg 153 [ mh ]) in insn 247:
  Adding insn 246 to worklist
  Adding insn 709 to worklist
Processing use of (reg 153 [ mh ]) in insn 246:
Processing use of (subreg (reg 181 [ D.4301 ]) 4) in insn 246:
Processing use of (reg 143 [ z.1250 ]) in insn 271:
Processing use of (reg 347 [ z ]) in insn 271:
  Adding insn 677 to worklist
Processing use of (reg 2 r2) in insn 677:
  Adding insn 269 to worklist
Processing use of (reg 0 r0) in insn 269:
  Adding insn 268 to worklist
Processing use of (reg 1 r1) in insn 269:
Processing use of (reg 4 r4) in insn 269:
  Adding insn 267 to worklist
Processing use of (subreg (reg 153 [ mh ]) 0) in insn 267:
Processing use of (reg 377 [ __n ]) in insn 268:
  Adding insn 675 to worklist
Processing use of (reg 370 [+4 ]) in insn 675:
  Adding insn 672 to worklist
Processing use of (reg 377 [ __n ]) in insn 675:
  Adding insn 674 to worklist
Processing use of (reg 369) in insn 674:
  Adding insn 671 to worklist
Processing use of (reg 377 [ __n ]) in insn 674:
Processing use of (reg 0 r0) in insn 671:
  Adding insn 225 to worklist
Processing use of (reg 13 sp) in insn 225:
Processing use of (reg 0 r0) in insn 225:
  Adding insn 223 to worklist
Processing use of (reg 1 r1) in insn 225:
Processing use of (reg 2 r2) in insn 225:
  Adding insn 224 to worklist
Processing use of (reg 270) in insn 224:
  Adding insn 219 to worklist
Processing use of (reg 269) in insn 219:
  Adding insn 218 to worklist
Processing use of (reg 268 [ vdm.exponent ]) in insn 218:
  Adding insn 217 to worklist
Processing use of (reg 25 sfp) in insn 217:
Processing use of (reg 25 sfp) in insn 223:
Processing use of (reg 1 r1) in insn 672:
Processing use of (reg 143 [ z.1250 ]) in insn 364:
Processing use of (reg 382) in insn 364:
  Adding insn 363 to worklist
Processing use of (reg 2 r2) in insn 405:
  Adding insn 404 to worklist
Processing use of (reg 3 r3) in insn 405:
Processing use of (reg 0 r0) in insn 404:
  Adding insn 403 to worklist
Processing use of (reg 1 r1) in insn 404:
Processing use of (reg 4 r4) in insn 404:
  Adding insn 402 to worklist
Processing use of (reg 160 [ __left ]) in insn 402:
  Adding insn 286 to worklist
Processing use of (subreg (reg 153 [ mh ]) 0) in insn 286:
Processing use of (reg 159 [ __n ]) in insn 403:
  Adding insn 383 to worklist
Processing use of (reg 295) in insn 383:
  Adding insn 380 to worklist
  Adding insn 379 to worklist
  Adding insn 714 to worklist
Processing use of (reg 297 [ remh ]) in insn 383:
  Adding insn 381 to worklist
  Adding insn 382 to worklist
  Adding insn 715 to worklist
Processing use of (subreg (reg 295) 4) in insn 382:
Processing use of (reg 297 [ remh ]) in insn 382:
Processing use of (subreg (reg 155 [ remh ]) 0) in insn 381:
  Adding insn 365 to worklist
  Adding insn 357 to worklist
Processing use of (reg 297 [ remh ]) in insn 381:
Processing use of (reg 139 [ rl.1254 ]) in insn 357:
  Adding insn 336 to worklist
Processing use of (reg 291) in insn 357:
  Adding insn 355 to worklist
Processing use of (reg 292) in insn 357:
  Adding insn 356 to worklist
Processing use of (reg 377 [ __n ]) in insn 357:
Processing use of (reg 141 [ rh.1252 ]) in insn 356:
  Adding insn 354 to worklist
Processing use of (reg 166 [ iftmp.83 ]) in insn 356:
  Adding insn 326 to worklist
  Adding insn 331 to worklist
Processing use of (reg 165 [ D.6250 ]) in insn 354:
  Adding insn 339 to worklist
Processing use of (reg 290) in insn 354:
  Adding insn 697 to worklist
Processing use of (reg 378) in insn 697:
  Adding insn 696 to worklist
Processing use of (reg 24 cc) in insn 696:
  Adding insn 695 to worklist
Processing use of (subreg (reg 139 [ rl.1254 ]) 4) in insn 695:
Processing use of (subreg (reg 140 [ rma.1253 ]) 4) in insn 695:
  Adding insn 335 to worklist
  Adding insn 334 to worklist
  Adding insn 711 to worklist
Processing use of (reg 140 [ rma.1253 ]) in insn 334:
Processing use of (subreg (reg 142 [ rma.1251 ]) 0) in insn 334:
  Adding insn 306 to worklist
Processing use of (reg 162 [ rmb ]) in insn 306:
  Adding insn 302 to worklist
Processing use of (reg 163 [ rma ]) in insn 306:
  Adding insn 291 to worklist
Processing use of (reg 160 [ __left ]) in insn 291:
Processing use of (reg 276 [ z.1250 ]) in insn 291:
  Adding insn 277 to worklist
Processing use of (subreg (reg 143 [ z.1250 ]) 0) in insn 277:
Processing use of (reg 275 [ D.4301 ]) in insn 302:
  Adding insn 275 to worklist
Processing use of (reg 371) in insn 302:
  Adding insn 295 to worklist
Processing use of (subreg (reg 143 [ z.1250 ]) 4) in insn 295:
Processing use of (subreg (reg 181 [ D.4301 ]) 0) in insn 275:
Processing use of (reg 140 [ rma.1253 ]) in insn 335:
Processing use of (reg 164 [ rh ]) in insn 339:
  Adding insn 310 to worklist
Processing use of (reg 289 [ rma.1253 ]) in insn 339:
  Adding insn 337 to worklist
  Adding insn 338 to worklist
  Adding insn 712 to worklist
Processing use of (subreg (reg 140 [ rma.1253 ]) 0) in insn 338:
Processing use of (reg 289 [ rma.1253 ]) in insn 338:
Processing use of (subreg (reg 142 [ rma.1251 ]) 4) in insn 337:
Processing use of (reg 289 [ rma.1253 ]) in insn 337:
Processing use of (reg 160 [ __left ]) in insn 310:
Processing use of (reg 371) in insn 310:
Processing use of (reg 140 [ rma.1253 ]) in insn 336:
Processing use of (reg 161 [ rl ]) in insn 336:
  Adding insn 282 to worklist
Processing use of (reg 275 [ D.4301 ]) in insn 282:
Processing use of (reg 276 [ z.1250 ]) in insn 282:
Processing use of (reg 153 [ mh ]) in insn 365:
Processing use of (reg 154 [ ml ]) in insn 365:
  Adding insn 359 to worklist
Processing use of (reg 155 [ remh ]) in insn 365:
Processing use of (reg 156 [ reml ]) in insn 365:
Processing use of (subreg (reg 140 [ rma.1253 ]) 0) in insn 359:
Processing use of (reg 154 [ ml ]) in insn 359:
  Adding insn 358 to worklist
  Adding insn 713 to worklist
Processing use of (reg 154 [ ml ]) in insn 358:
Processing use of (subreg (reg 181 [ D.4301 ]) 0) in insn 358:
Processing use of (subreg (reg 156 [ reml ]) 4) in insn 379:
Processing use of (reg 295) in insn 379:
Processing use of (reg 295) in insn 380:
Processing use of (reg 143 [ z.1250 ]) in insn 397:
Processing use of (reg 298) in insn 397:
  Adding insn 396 to worklist
Processing use of (reg 24 cc) in insn 551:
  Adding insn 550 to worklist
Processing use of (reg 328) in insn 550:
  Adding insn 549 to worklist
Processing use of (subreg (reg 327) 4) in insn 549:
  Adding insn 547 to worklist
Processing use of (reg 328) in insn 549:
  Adding insn 548 to worklist
Processing use of (subreg (reg 327) 0) in insn 548:
Processing use of (reg 174 [ reml ]) in insn 547:
  Adding insn 521 to worklist
  Adding insn 530 to worklist
Processing use of (reg 175 [ remh ]) in insn 547:
Processing use of (reg 174 [ reml ]) in insn 530:
Processing use of (reg 175 [ remh ]) in insn 530:
Processing use of (reg 321) in insn 530:
  Adding insn 527 to worklist
Processing use of (reg 324) in insn 530:
  Adding insn 528 to worklist
  Adding insn 529 to worklist
Processing use of (reg 324) in insn 529:
Processing use of (subreg (reg 144 [ ivtmp.1234 ]) 4) in insn 528:
Processing use of (reg 324) in insn 528:
Processing use of (reg 320) in insn 527:
  Adding insn 525 to worklist
Processing use of (reg 381) in insn 527:
  Adding insn 526 to worklist
Processing use of (reg 144 [ ivtmp.1234 ]) in insn 525:
Processing use of (reg 144 [ ivtmp.1234 ]) in insn 525:
Processing use of (reg 133 [ rl.1261 ]) in insn 521:
  Adding insn 500 to worklist
Processing use of (reg 179 [ D.4317 ]) in insn 521:
  Adding insn 448 to worklist
Processing use of (reg 318) in insn 521:
  Adding insn 519 to worklist
Processing use of (reg 319) in insn 521:
  Adding insn 520 to worklist
Processing use of (reg 135 [ rh.1259 ]) in insn 520:
  Adding insn 518 to worklist
Processing use of (reg 147 [ iftmp.83 ]) in insn 520:
  Adding insn 490 to worklist
  Adding insn 495 to worklist
Processing use of (reg 148 [ D.6403 ]) in insn 518:
  Adding insn 503 to worklist
Processing use of (reg 317) in insn 518:
  Adding insn 700 to worklist
Processing use of (reg 379) in insn 700:
  Adding insn 699 to worklist
Processing use of (reg 24 cc) in insn 699:
  Adding insn 698 to worklist
Processing use of (subreg (reg 133 [ rl.1261 ]) 4) in insn 698:
Processing use of (subreg (reg 134 [ rma.1260 ]) 4) in insn 698:
  Adding insn 499 to worklist
  Adding insn 498 to worklist
  Adding insn 717 to worklist
Processing use of (reg 134 [ rma.1260 ]) in insn 498:
Processing use of (subreg (reg 136 [ rma.1258 ]) 0) in insn 498:
  Adding insn 470 to worklist
Processing use of (reg 150 [ rma ]) in insn 470:
  Adding insn 466 to worklist
Processing use of (reg 150 [ rma ]) in insn 470:
Processing use of (reg 305 [ ivtmp.1234 ]) in insn 466:
  Adding insn 450 to worklist
Processing use of (reg 373) in insn 466:
  Adding insn 459 to worklist
Processing use of (subreg (reg 144 [ ivtmp.1234 ]) 4) in insn 459:
Processing use of (subreg (reg 144 [ ivtmp.1234 ]) 0) in insn 450:
Processing use of (reg 134 [ rma.1260 ]) in insn 499:
Processing use of (reg 149 [ rh ]) in insn 503:
  Adding insn 474 to worklist
Processing use of (reg 316 [ rma.1260 ]) in insn 503:
  Adding insn 501 to worklist
  Adding insn 502 to worklist
  Adding insn 718 to worklist
Processing use of (subreg (reg 134 [ rma.1260 ]) 0) in insn 502:
Processing use of (reg 316 [ rma.1260 ]) in insn 502:
Processing use of (subreg (reg 136 [ rma.1258 ]) 4) in insn 501:
Processing use of (reg 316 [ rma.1260 ]) in insn 501:
Processing use of (reg 373) in insn 474:
Processing use of (reg 373) in insn 474:
Processing use of (reg 179 [ D.4317 ]) in insn 448:
  Adding insn 447 to worklist
  Adding insn 446 to worklist
  Adding insn 716 to worklist
Processing use of (subreg (reg 377 [ __n ]) 0) in insn 448:
Processing use of (reg 179 [ D.4317 ]) in insn 446:
Processing use of (subreg (reg 377 [ __n ]) 4) in insn 446:
Processing use of (subreg (reg 179 [ D.4317 ]) 4) in insn 447:
Processing use of (reg 179 [ D.4317 ]) in insn 447:
Processing use of (reg 304) in insn 447:
  Adding insn 445 to worklist
Processing use of (subreg (reg 377 [ __n ]) 0) in insn 445:
Processing use of (reg 134 [ rma.1260 ]) in insn 500:
Processing use of (reg 151 [ rl ]) in insn 500:
  Adding insn 455 to worklist
Processing use of (reg 305 [ ivtmp.1234 ]) in insn 455:
Processing use of (reg 305 [ ivtmp.1234 ]) in insn 455:
Processing use of (reg 24 cc) in insn 537:
  Adding insn 536 to worklist
Processing use of (subreg (reg 175 [ remh ]) 4) in insn 536:
Processing use of (reg 24 cc) in insn 483:
  Adding insn 482 to worklist
Processing use of (subreg (reg 136 [ rma.1258 ]) 0) in insn 482:
Processing use of (subreg (reg 150 [ rma ]) 0) in insn 482:
Processing use of (reg 24 cc) in insn 481:
  Adding insn 478 to worklist
Processing use of (subreg (reg 136 [ rma.1258 ]) 4) in insn 478:
Processing use of (subreg (reg 150 [ rma ]) 4) in insn 478:
Processing use of (reg 25 sfp) in insn 449:
Processing use of (reg 179 [ D.4317 ]) in insn 449:
Processing use of (reg 24 cc) in insn 479:
Processing use of (reg 25 sfp) in insn 440:
Processing use of (reg 303) in insn 440:
  Adding insn 439 to worklist
Processing use of (reg 24 cc) in insn 432:
  Adding insn 431 to worklist
Processing use of (subreg (reg 144 [ ivtmp.1234 ]) 0) in insn 431:
Processing use of (reg 24 cc) in insn 428:
  Adding insn 427 to worklist
Processing use of (subreg (reg 144 [ ivtmp.1234 ]) 4) in insn 427:
Processing use of (reg 24 cc) in insn 420:
  Adding insn 419 to worklist
Processing use of (subreg (reg 301) 0) in insn 419:
  Adding insn 414 to worklist
Processing use of (reg 144 [ ivtmp.1234 ]) in insn 414:
Processing use of (reg 302) in insn 414:
  Adding insn 413 to worklist
Processing use of (reg 25 sfp) in insn 412:
Processing use of (reg 144 [ ivtmp.1234 ]) in insn 412:
Processing use of (reg 24 cc) in insn 416:
  Adding insn 415 to worklist
Processing use of (subreg (reg 301) 4) in insn 415:
Processing use of (reg 24 cc) in insn 385:
  Adding insn 384 to worklist
Processing use of (subreg (reg 159 [ __n ]) 4) in insn 384:
Processing use of (reg 346 [ D.6380+4 ]) in insn 384:
  Adding insn 248 to worklist
Processing use of (subreg (reg 153 [ mh ]) 0) in insn 248:
Processing use of (reg 24 cc) in insn 370:
  Adding insn 369 to worklist
Processing use of (subreg (reg 155 [ remh ]) 4) in insn 369:
Processing use of (reg 24 cc) in insn 319:
  Adding insn 318 to worklist
Processing use of (subreg (reg 142 [ rma.1251 ]) 0) in insn 318:
Processing use of (subreg (reg 162 [ rmb ]) 0) in insn 318:
Processing use of (reg 24 cc) in insn 317:
  Adding insn 314 to worklist
Processing use of (subreg (reg 142 [ rma.1251 ]) 4) in insn 314:
Processing use of (subreg (reg 162 [ rmb ]) 4) in insn 314:
Processing use of (reg 24 cc) in insn 315:
Processing use of (reg 24 cc) in insn 251:
  Adding insn 250 to worklist
Processing use of (reg 346 [ D.6380+4 ]) in insn 250:
Processing use of (subreg (reg 377 [ __n ]) 4) in insn 250:
Processing use of (reg 24 cc) in insn 234:
  Adding insn 233 to worklist
Processing use of (subreg (reg 181 [ D.4301 ]) 0) in insn 233:
Processing use of (subreg (reg 377 [ __n ]) 0) in insn 233:
Processing use of (reg 24 cc) in insn 232:
  Adding insn 229 to worklist
Processing use of (subreg (reg 181 [ D.4301 ]) 4) in insn 229:
Processing use of (subreg (reg 377 [ __n ]) 4) in insn 229:
Processing use of (reg 25 sfp) in insn 193:
Processing use of (subreg (reg 251 [ vdm.sign ]) 0) in insn 193:
Processing use of (reg 25 sfp) in insn 202:
Processing use of (subreg (reg 259) 0) in insn 202:
  Adding insn 201 to worklist
Processing use of (reg 260) in insn 201:
  Adding insn 200 to worklist
Processing use of (reg 257) in insn 200:
  Adding insn 198 to worklist
Processing use of (reg 255) in insn 198:
  Adding insn 197 to worklist
Processing use of (reg 256) in insn 197:
  Adding insn 196 to worklist
Processing use of (reg 254 [ D.4288 ]) in insn 196:
  Adding insn 195 to worklist
Processing use of (subreg (reg 183 [ D.4288 ]) 0) in insn 195:
  Adding insn 194 to worklist
Processing use of (reg 25 sfp) in insn 194:
Processing use of (reg 13 sp) in insn 210:
Processing use of (reg 0 r0) in insn 210:
  Adding insn 208 to worklist
Processing use of (reg 1 r1) in insn 210:
  Adding insn 209 to worklist
Processing use of (reg 265 [ vdm.significand+4 ]) in insn 209:
  Adding insn 205 to worklist
Processing use of (reg 25 sfp) in insn 205:
Processing use of (reg 254 [ D.4288 ]) in insn 208:
Processing use of (reg 25 sfp) in insn 228:
Processing use of (reg 377 [ __n ]) in insn 228:
Processing use of (reg 24 cc) in insn 230:
Processing use of (reg 24 cc) in insn 189:
  Adding insn 188 to worklist
Processing use of (reg 251 [ vdm.sign ]) in insn 188:
Processing use of (reg 13 sp) in insn 184:
Processing use of (reg 0 r0) in insn 184:
  Adding insn 183 to worklist
Processing use of (reg 250) in insn 183:
  Adding insn 182 to worklist
Processing use of (reg 25 sfp) in insn 182:
Processing use of (reg 24 cc) in insn 180:
  Adding insn 179 to worklist
Processing use of (reg 249) in insn 179:
  Adding insn 178 to worklist
Processing use of (reg 177 [ tm ]) in insn 178:
  Adding insn 66 to worklist
  Adding insn 91 to worklist
  Adding insn 692 to worklist
  Adding insn 694 to worklist
Processing use of (reg 24 cc) in insn 694:
  Adding insn 693 to worklist
Processing use of (reg 225 [ significand ]) in insn 693:
  Adding insn 97 to worklist
Processing use of (subreg (reg 173 [ significand ]) 4) in insn 97:
  Adding insn 31 to worklist
  Adding insn 50 to worklist
Processing use of (reg 225 [ significand ]) in insn 97:
  Adding insn 96 to worklist
Processing use of (subreg (reg 173 [ significand ]) 0) in insn 96:
Processing use of (reg 173 [ significand ]) in insn 50:
Processing use of (reg 216) in insn 50:
  Adding insn 49 to worklist
Processing use of (reg 173 [ significand ]) in insn 31:
  Adding insn 29 to worklist
  Adding insn 30 to worklist
  Adding insn 704 to worklist
Processing use of (reg 362 [+4 ]) in insn 31:
  Adding insn 26 to worklist
Processing use of (reg 202) in insn 26:
  Adding insn 24 to worklist
Processing use of (reg 362 [+4 ]) in insn 26:
  Adding insn 25 to worklist
Processing use of (subreg (reg 186 [ D.4263 ]) 4) in insn 25:
  Adding insn 11 to worklist
Processing use of (reg 0 r0) in insn 11:
Processing use of (reg 1 r1) in insn 11:
Processing use of (subreg (reg 186 [ D.4263 ]) 0) in insn 24:
Processing use of (subreg (reg 173 [ significand ]) 0) in insn 30:
Processing use of (reg 173 [ significand ]) in insn 30:
Processing use of (reg 203) in insn 30:
  Adding insn 28 to worklist
Processing use of (reg 362 [+4 ]) in insn 28:
Processing use of (reg 173 [ significand ]) in insn 29:
Processing use of (reg 361) in insn 29:
  Adding insn 27 to worklist
Processing use of (subreg (reg 186 [ D.4263 ]) 0) in insn 27:
Processing use of (reg 24 cc) in insn 692:
  Adding insn 691 to worklist
Processing use of (reg 224) in insn 691:
  Adding insn 74 to worklist
Processing use of (subreg (reg 222) 4) in insn 74:
  Adding insn 72 to worklist
Processing use of (reg 224) in insn 74:
  Adding insn 73 to worklist
Processing use of (subreg (reg 222) 0) in insn 73:
Processing use of (reg 173 [ significand ]) in insn 72:
Processing use of (reg 223) in insn 72:
  Adding insn 71 to worklist
Processing use of (reg 24 cc) in insn 176:
  Adding insn 175 to worklist
Processing use of (reg 248) in insn 175:
  Adding insn 174 to worklist
Processing use of (reg 177 [ tm ]) in insn 174:
Processing use of (reg 13 sp) in insn 167:
Processing use of (reg 0 r0) in insn 167:
  Adding insn 165 to worklist
Processing use of (reg 1 r1) in insn 167:
Processing use of (reg 2 r2) in insn 167:
  Adding insn 166 to worklist
Processing use of (reg 188 [ dd ]) in insn 166:
Processing use of (reg 247) in insn 165:
  Adding insn 164 to worklist
Processing use of (reg 239) in insn 164:
  Adding insn 155 to worklist
Processing use of (reg 242) in insn 164:
  Adding insn 160 to worklist
  Adding insn 161 to worklist
  Adding insn 163 to worklist
  Adding insn 707 to worklist
Processing use of (reg 242) in insn 163:
Processing use of (reg 244 [ <variable>.significand+4 ]) in insn 163:
  Adding insn 157 to worklist
Processing use of (reg 176 [ vdp ]) in insn 157:
  Adding insn 134 to worklist
  Adding insn 126 to worklist
  Adding insn 140 to worklist
Processing use of (reg 228) in insn 126:
  Adding insn 117 to worklist
Processing use of (reg 25 sfp) in insn 117:
Processing use of (reg 25 sfp) in insn 134:
Processing use of (subreg (reg 242) 0) in insn 161:
Processing use of (reg 242) in insn 161:
Processing use of (reg 243) in insn 161:
  Adding insn 158 to worklist
Processing use of (reg 244 [ <variable>.significand+4 ]) in insn 158:
Processing use of (reg 242) in insn 160:
Processing use of (reg 245 [ <variable>.significand ]) in insn 160:
  Adding insn 159 to worklist
Processing use of (reg 176 [ vdp ]) in insn 159:
Processing use of (reg 234) in insn 155:
  Adding insn 149 to worklist
  Adding insn 148 to worklist
  Adding insn 705 to worklist
Processing use of (reg 238) in insn 155:
  Adding insn 153 to worklist
  Adding insn 154 to worklist
  Adding insn 706 to worklist
Processing use of (subreg (reg 234) 0) in insn 154:
Processing use of (reg 238) in insn 154:
Processing use of (subreg (reg 235 [ <variable>.exponent ]) 0) in insn 153:
  Adding insn 152 to worklist
Processing use of (reg 238) in insn 153:
Processing use of (reg 236 [ <variable>.exponent ]) in insn 152:
  Adding insn 151 to worklist
Processing use of (reg 176 [ vdp ]) in insn 151:
Processing use of (reg 232 [ <variable>.sign ]) in insn 148:
  Adding insn 146 to worklist
Processing use of (reg 234) in insn 148:
Processing use of (reg 176 [ vdp ]) in insn 146:
Processing use of (reg 234) in insn 149:
Processing use of (reg 24 cc) in insn 132:
  Adding insn 131 to worklist
Processing use of (reg 171 [ D.6138 ]) in insn 131:
  Adding insn 16 to worklist
Processing use of (subreg (reg 357) 0) in insn 16:
  Adding insn 14 to worklist
Processing use of (subreg (reg 192) 4) in insn 14:
  Adding insn 13 to worklist
Processing use of (reg 186 [ D.4263 ]) in insn 13:
Processing use of (reg 193) in insn 13:
  Adding insn 12 to worklist
Processing use of (reg 13 sp) in insn 123:
Processing use of (reg 0 r0) in insn 123:
  Adding insn 119 to worklist
Processing use of (reg 1 r1) in insn 123:
  Adding insn 120 to worklist
Processing use of (reg 2 r2) in insn 123:
  Adding insn 121 to worklist
Processing use of (reg 3 r3) in insn 123:
  Adding insn 122 to worklist
Processing use of (reg 191 [ fpscr ]) in insn 122:
Processing use of (reg 229) in insn 120:
  Adding insn 118 to worklist
Processing use of (reg 25 sfp) in insn 118:
Processing use of (reg 228) in insn 119:
Processing use of (reg 24 cc) in insn 115:
  Adding insn 114 to worklist
Processing use of (reg 227) in insn 114:
  Adding insn 113 to worklist
Processing use of (reg 177 [ tm ]) in insn 113:
Processing use of (reg 24 cc) in insn 111:
  Adding insn 110 to worklist
Processing use of (reg 226) in insn 110:
  Adding insn 109 to worklist
Processing use of (reg 177 [ tm ]) in insn 109:
Processing use of (reg 24 cc) in insn 89:
  Adding insn 88 to worklist
Processing use of (reg 172 [ D.6135 ]) in insn 88:
  Adding insn 22 to worklist
Processing use of (reg 199) in insn 22:
  Adding insn 21 to worklist
Processing use of (reg 198) in insn 21:
  Adding insn 20 to worklist
Processing use of (subreg (reg 359) 0) in insn 20:
  Adding insn 18 to worklist
Processing use of (subreg (reg 186 [ D.4263 ]) 4) in insn 18:
Processing use of (reg 24 cc) in insn 64:
  Adding insn 63 to worklist
Processing use of (reg 221 [ significand ]) in insn 63:
  Adding insn 62 to worklist
Processing use of (subreg (reg 173 [ significand ]) 4) in insn 62:
Processing use of (reg 221 [ significand ]) in insn 62:
  Adding insn 61 to worklist
Processing use of (subreg (reg 173 [ significand ]) 0) in insn 61:
Processing use of (reg 25 sfp) in insn 53:
Processing use of (reg 173 [ significand ]) in insn 53:
Processing use of (reg 24 cc) in insn 59:
  Adding insn 58 to worklist
Processing use of (reg 219 [ D.6135 ]) in insn 58:
  Adding insn 56 to worklist
Processing use of (reg 220) in insn 58:
  Adding insn 57 to worklist
Processing use of (reg 217) in insn 57:
  Adding insn 55 to worklist
Processing use of (subreg (reg 218) 0) in insn 55:
  Adding insn 54 to worklist
Processing use of (subreg (reg 172 [ D.6135 ]) 0) in insn 56:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 0 r0) in insn 10:
  Adding insn 9 to worklist
Processing use of (reg 190 [ dm ]) in insn 9:
  Adding insn 4 to worklist
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 25 sfp) in insn 17:
Processing use of (subreg (reg 171 [ D.6138 ]) 0) in insn 17:
Processing use of (reg 25 sfp) in insn 23:
Processing use of (subreg (reg 172 [ D.6135 ]) 0) in insn 23:
Processing use of (reg 24 cc) in insn 47:
  Adding insn 46 to worklist
Processing use of (reg 215) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 214) in insn 45:
  Adding insn 44 to worklist
Processing use of (subreg (reg 213) 0) in insn 44:
  Adding insn 43 to worklist
Processing use of (reg 209) in insn 43:
  Adding insn 37 to worklist
Processing use of (reg 212) in insn 43:
  Adding insn 41 to worklist
Processing use of (reg 24 cc) in insn 41:
  Adding insn 40 to worklist
Processing use of (reg 207 [ D.6135 ]) in insn 40:
  Adding insn 34 to worklist
Processing use of (subreg (reg 172 [ D.6135 ]) 0) in insn 34:
Processing use of (reg 24 cc) in insn 37:
  Adding insn 36 to worklist
Processing use of (reg 207 [ D.6135 ]) in insn 36:
Processing use of (reg 208) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 205) in insn 35:
  Adding insn 33 to worklist
Processing use of (subreg (reg 206) 0) in insn 33:
  Adding insn 32 to worklist


vfp_double_fsqrt

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={18d,17u} r1={17d,9u} r2={14d,7u} r3={12d,4u} r4={2d,2u} r11={1d,59u} r12={10d} r13={1d,67u} r14={10d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={64d,35u} r25={1d,81u,5d} r26={1d,58u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} r133={1d,2u} r134={3d,5u} r135={1d,1u} r136={1d,4u} r137={3d,1u} r138={1d,1u} r139={1d,2u} r140={3d,6u} r141={1d,1u} r142={1d,4u} r143={5d,7u,2d} r144={2d,11u,3d} r147={2d,1u} r148={1d,1u} r149={1d,1u} r150={1d,4u} r151={1d,1u} r153={3d,7u} r154={3d,3u} r155={2d,3u} r156={2d,2u} r159={1d,2u} r160={1d,3u} r161={1d,1u} r162={1d,3u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={2d,1u} r171={1d,2u} r172={1d,4u} r173={5d,11u,2d} r174={2d,2u} r175={2d,3u} r176={3d,4u} r177={4d,4u} r178={3d,1u} r179={4d,6u} r180={1d,2u} r181={4d,9u,1d} r182={1d,2u} r183={1d,1u} r184={2d,1u} r186={1d,5u,1d} r188={1d,2u} r190={1d,1u} r191={1d,2u} r192={1d,1u} r193={1d,1u} r198={1d,1u,1d} r199={1d,1u} r202={1d,1u} r203={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,2u} r208={1d,1u} r209={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={2d,2u} r222={1d,2u} r223={1d,1u} r224={2d,2u} r225={2d,2u} r226={1d,1u} r227={1d,1u} r228={1d,2u} r229={1d,1u} r232={1d,1u} r234={3d,4u} r235={1d,1u} r236={1d,1u} r238={3d,3u} r239={1d,1u} r242={4d,5u} r243={1d,1u} r244={1d,2u} r245={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,3u} r254={1d,2u,1d} r255={1d,1u} r256={1d,1u} r257={1d,1u,1d} r259={1d,1u} r260={1d,1u} r265={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r275={1d,2u} r276={1d,2u} r289={3d,3u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r295={3d,4u} r297={3d,3u} r298={1d,1u} r299={1d,1u} r300={1d,1u} r301={1d,2u} r302={1d,1u} r303={1d,1u} r304={1d,1u} r305={1d,3u} r316={3d,3u} r317={1d,1u} r318={1d,1u} r319={1d,1u} r320={1d,1u,1d} r321={1d,1u} r324={2d,3u} r326={2d,1u} r327={1d,2u} r328={2d,2u} r329={1d,1u} r330={1d,1u} r331={1d,1u} r332={2d,1u} r336={1d,1u} r337={1d,1u} r338={1d,1u} r339={1d,1u} r346={1d,2u} r347={1d,1u} r357={1d,1u} r359={1d,1u} r361={1d,1u} r362={2d,3u} r369={1d,1u} r370={1d,1u} r371={1d,2u} r373={1d,3u} r376={1d,1u} r377={3d,11u} r378={1d,1u} r379={1d,1u} r380={1d,1u} r381={1d,1u} r382={1d,1u} 
;;    total ref usage 1798{1138d,642u,18e} in 331{324 regular + 7 call} insns.
;; Reaching defs:

  sparse invalidated 	24
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920
0[0,18] 1[18,17] 2[35,14] 3[49,12] 4[61,2] 11[63,1] 12[64,10] 13[74,1] 14[75,10] 15[85,7] 16[92,7] 17[99,7] 18[106,7] 19[113,7] 20[120,7] 21[127,7] 22[134,7] 23[141,7] 24[148,64] 25[212,1] 26[213,1] 27[214,7] 28[221,7] 29[228,7] 30[235,7] 31[242,7] 32[249,7] 33[256,7] 34[263,7] 35[270,7] 36[277,7] 37[284,7] 38[291,7] 39[298,7] 40[305,7] 41[312,7] 42[319,7] 43[326,7] 44[333,7] 45[340,7] 46[347,7] 47[354,7] 48[361,7] 49[368,7] 50[375,7] 51[382,7] 52[389,7] 53[396,7] 54[403,7] 55[410,7] 56[417,7] 57[424,7] 58[431,7] 59[438,7] 60[445,7] 61[452,7] 62[459,7] 63[466,7] 64[473,7] 65[480,7] 66[487,7] 67[494,7] 68[501,7] 69[508,7] 70[515,7] 71[522,7] 72[529,7] 73[536,7] 74[543,7] 75[550,7] 76[557,7] 77[564,7] 78[571,7] 79[578,7] 80[585,7] 81[592,7] 82[599,7] 83[606,7] 84[613,7] 85[620,7] 86[627,7] 87[634,7] 88[641,7] 89[648,7] 90[655,7] 91[662,7] 92[669,7] 93[676,7] 94[683,7] 95[690,7] 96[697,7] 97[704,7] 98[711,7] 99[718,7] 100[725,7] 101[732,7] 102[739,7] 103[746,7] 104[753,7] 105[760,7] 106[767,7] 107[774,7] 108[781,7] 109[788,7] 110[795,7] 111[802,7] 112[809,7] 113[816,7] 114[823,7] 115[830,7] 116[837,7] 117[844,7] 118[851,7] 119[858,7] 120[865,7] 121[872,7] 122[879,7] 123[886,7] 124[893,7] 125[900,7] 126[907,7] 127[914,7] 133[921,1] 134[922,3] 135[925,1] 136[926,1] 137[927,3] 138[930,1] 139[931,1] 140[932,3] 141[935,1] 142[936,1] 143[937,5] 144[942,2] 147[944,2] 148[946,1] 149[947,1] 150[948,1] 151[949,1] 153[950,3] 154[953,3] 155[956,2] 156[958,2] 159[960,1] 160[961,1] 161[962,1] 162[963,1] 163[964,1] 164[965,1] 165[966,1] 166[967,2] 171[969,1] 172[970,1] 173[971,5] 174[976,2] 175[978,2] 176[980,3] 177[983,4] 178[987,3] 179[990,4] 180[994,1] 181[995,4] 182[999,1] 183[1000,1] 184[1001,2] 186[1003,1] 188[1004,1] 190[1005,1] 191[1006,1] 192[1007,1] 193[1008,1] 198[1009,1] 199[1010,1] 202[1011,1] 203[1012,1] 205[1013,1] 206[1014,1] 207[1015,1] 208[1016,1] 209[1017,1] 212[1018,1] 213[1019,1] 214[1020,1] 215[1021,1] 216[1022,1] 217[1023,1] 218[1024,1] 219[1025,1] 220[1026,1] 221[1027,2] 222[1029,1] 223[1030,1] 224[1031,2] 225[1033,2] 226[1035,1] 227[1036,1] 228[1037,1] 229[1038,1] 232[1039,1] 234[1040,3] 235[1043,1] 236[1044,1] 238[1045,3] 239[1048,1] 242[1049,4] 243[1053,1] 244[1054,1] 245[1055,1] 247[1056,1] 248[1057,1] 249[1058,1] 250[1059,1] 251[1060,1] 254[1061,1] 255[1062,1] 256[1063,1] 257[1064,1] 259[1065,1] 260[1066,1] 265[1067,1] 267[1068,1] 268[1069,1] 269[1070,1] 270[1071,1] 275[1072,1] 276[1073,1] 289[1074,3] 290[1077,1] 291[1078,1] 292[1079,1] 295[1080,3] 297[1083,3] 298[1086,1] 299[1087,1] 300[1088,1] 301[1089,1] 302[1090,1] 303[1091,1] 304[1092,1] 305[1093,1] 316[1094,3] 317[1097,1] 318[1098,1] 319[1099,1] 320[1100,1] 321[1101,1] 324[1102,2] 326[1104,2] 327[1106,1] 328[1107,2] 329[1109,1] 330[1110,1] 331[1111,1] 332[1112,2] 336[1114,1] 337[1115,1] 338[1116,1] 339[1117,1] 346[1118,1] 347[1119,1] 357[1120,1] 359[1121,1] 361[1122,1] 362[1123,2] 369[1125,1] 370[1126,1] 371[1127,1] 373[1128,1] 376[1129,1] 377[1130,3] 378[1133,1] 379[1134,1] 380[1135,1] 381[1136,1] 382[1137,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 324
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 171 172 173 186 188 190 191 192 193 198 199 202 203 205 206 207 208 209 212 213 214 215 357 359 361 362
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 171 172 173 186 188 190 191 192 193 198 199 202 203 205 206 207 208 209 212 213 214 215 357 359 361 362
;; live  kill	 14 [lr]
;; rd  in  	(10)
17, 34, 48, 60, 63, 73, 74, 84, 212, 213
;; rd  gen 	(29)
15, 33, 209, 969, 970, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1120, 1121, 1122, 1123
;; rd  kill	(71)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 969, 970, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1120, 1121, 1122, 1123, 1124

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 4 2 arch/arm/vfp/vfpdouble.c:269 (set (reg/v:SI 188 [ dd ])
        (reg:SI 0 r0 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dd ])
        (nil)))

(insn 4 2 5 2 arch/arm/vfp/vfpdouble.c:269 (set (reg/v:SI 190 [ dm ])
        (reg:SI 2 r2 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dm ])
        (nil)))

(insn 5 4 6 2 arch/arm/vfp/vfpdouble.c:269 (set (reg/v:SI 191 [ fpscr ])
        (reg:SI 3 r3 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ fpscr ])
        (nil)))

(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/vfp/vfpdouble.c:273 (set (reg:SI 0 r0)
        (reg/v:SI 190 [ dm ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 190 [ dm ])
        (nil)))

(call_insn 10 9 11 2 arch/arm/vfp/vfpdouble.c:273 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_get_double") [flags 0x41] <function_decl 0x10a9d600 vfp_get_double>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 2 arch/arm/vfp/vfpdouble.c:273 (set (reg:DI 186 [ D.4263 ])
        (reg:DI 0 r0)) 163 {*arm_movdi} (nil))

(insn 12 11 13 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 193)
        (const_int -9223372036854775808 [0x8000000000000000])) 163 {*arm_movdi} (nil))

(insn 13 12 14 2 arch/arm/vfp/vfp.h:304 (set (reg:DI 192)
        (and:DI (reg:DI 186 [ D.4263 ])
            (reg:DI 193))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 193)
        (expr_list:REG_EQUAL (and:DI (reg:DI 186 [ D.4263 ])
                (const_int -9223372036854775808 [0x8000000000000000]))
            (nil))))

(insn 14 13 16 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 357)
        (lshiftrt:SI (subreg:SI (reg:DI 192) 4)
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 192)
        (nil)))

(insn 16 14 17 2 arch/arm/vfp/vfp.h:304 (set (reg:SI 171 [ D.6138 ])
        (zero_extend:SI (subreg:HI (reg:SI 357) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 357)
        (nil)))

(insn 17 16 18 2 arch/arm/vfp/vfp.h:304 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -14 [0xfffffffffffffff2])) [0 vdm.sign+0 S2 A16])
        (subreg/s/u:HI (reg:SI 171 [ D.6138 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 18 17 20 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 359)
        (ashiftrt:SI (subreg:SI (reg:DI 186 [ D.4263 ]) 4)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 20 18 21 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 198)
        (zero_extend:SI (subreg:HI (reg:SI 359) 0))) 144 {*arm_zero_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 359)
        (nil)))

(insn 21 20 22 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 199)
        (ashift:SI (reg:SI 198)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 198)
        (nil)))

(insn 22 21 23 2 arch/arm/vfp/vfp.h:305 (set (reg:SI 172 [ D.6135 ])
        (lshiftrt:SI (reg:SI 199)
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 199)
        (expr_list:REG_EQUAL (and:SI (reg:SI 198)
                (const_int 2047 [0x7ff]))
            (nil))))

(insn 23 22 24 2 arch/arm/vfp/vfp.h:305 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0])) [0 vdm.exponent+0 S2 A64])
        (subreg/s/u:HI (reg:SI 172 [ D.6135 ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 24 23 25 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 202)
        (lshiftrt:SI (subreg:SI (reg:DI 186 [ D.4263 ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 26 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 362 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 186 [ D.4263 ]) 4)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 26 25 27 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 362 [+4 ])
        (ior:SI (reg:SI 202)
            (reg:SI 362 [+4 ]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 202)
        (nil)))

(insn 27 26 28 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 361)
        (ashift:SI (subreg:SI (reg:DI 186 [ D.4263 ]) 0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 186 [ D.4263 ])
        (nil)))

(insn 28 27 704 2 arch/arm/vfp/vfp.h:308 (set (reg:SI 203)
        (ashift:SI (reg:SI 362 [+4 ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 704 28 29 2 arch/arm/vfp/vfp.h:308 (set (reg/v:DI 173 [ significand ])
        (const_int 0 [0x0])) -1 (nil))

(insn 29 704 30 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 173 [ significand ]) 0)
        (lshiftrt:SI (reg:SI 361)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 361)
        (nil)))

(insn 30 29 31 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 173 [ significand ]) 0)
        (ior:SI (reg:SI 203)
            (subreg:SI (reg/v:DI 173 [ significand ]) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 203)
        (nil)))

(insn 31 30 32 2 arch/arm/vfp/vfp.h:308 (set (subreg:SI (reg/v:DI 173 [ significand ]) 4)
        (lshiftrt:SI (reg:SI 362 [+4 ])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 362 [+4 ])
        (nil)))

(insn 32 31 33 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 206)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 33 32 34 2 arch/arm/vfp/vfp.h:309 (set (reg:HI 205)
        (subreg:HI (reg:SI 206) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 206)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 34 33 35 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 207 [ D.6135 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 172 [ D.6135 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 35 34 36 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 208)
        (sign_extend:SI (reg:HI 205))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 205)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 36 35 37 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 207 [ D.6135 ])
            (reg:SI 208))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 208)
        (nil)))

(insn 37 36 40 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 209)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 40 37 41 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 207 [ D.6135 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 207 [ D.6135 ])
        (nil)))

(insn 41 40 43 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 212)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 43 41 44 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 213)
        (and:SI (reg:SI 209)
            (reg:SI 212))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 212)
        (expr_list:REG_DEAD (reg:SI 209)
            (nil))))

(insn 44 43 45 2 arch/arm/vfp/vfp.h:309 (set (reg:QI 214)
        (subreg:QI (reg:SI 213) 0)) 178 {*arm_movqi_insn} (expr_list:REG_DEAD (reg:SI 213)
        (nil)))

(insn 45 44 46 2 arch/arm/vfp/vfp.h:309 (set (reg:SI 215)
        (zero_extend:SI (reg:QI 214))) 149 {*arm_zero_extendqisi2_v6} (expr_list:REG_DEAD (reg:QI 214)
        (nil)))

(insn 46 45 47 2 arch/arm/vfp/vfp.h:309 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 215)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 215)
        (nil)))

(jump_insn 47 46 48 2 arch/arm/vfp/vfp.h:309 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; rd  out 	(36)
15, 33, 48, 60, 63, 73, 74, 209, 212, 213, 969, 970, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1120, 1121, 1122, 1123


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u53(11){ }u54(13){ }u55(25){ }u56(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173
;; lr  def 	 173 216
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; live  gen 	 173 216
;; live  kill	
;; rd  in  	(36)
15, 33, 48, 60, 63, 73, 74, 209, 212, 213, 969, 970, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
972, 1022
;; rd  kill	(6)
971, 972, 973, 974, 975, 1022

;; Pred edge  2 [50.0%]  (fallthru)
(note 48 47 49 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 3 arch/arm/vfp/vfp.h:310 (set (reg:DI 216)
        (const_int 4611686018427387904 [0x4000000000000000])) 163 {*arm_movdi} (nil))

(insn 50 49 51 3 arch/arm/vfp/vfp.h:310 (set (reg/v:DI 173 [ significand ])
        (ior:DI (reg/v:DI 173 [ significand ])
            (reg:DI 216))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 216)
        (expr_list:REG_EQUAL (ior:DI (reg/v:DI 173 [ significand ])
                (const_int 4611686018427387904 [0x4000000000000000]))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; rd  out 	(37)
15, 33, 48, 60, 63, 73, 74, 209, 212, 213, 969, 970, 972, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1120, 1121, 1122, 1123


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 172 173
;; lr  def 	 24 [cc] 217 218 219 220
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; live  gen 	 24 [cc] 217 218 219 220
;; live  kill	
;; rd  in  	(38)
15, 33, 48, 60, 63, 73, 74, 209, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1120, 1121, 1122, 1123
;; rd  gen 	(5)
208, 1023, 1024, 1025, 1026
;; rd  kill	(4)
1023, 1024, 1025, 1026

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 51 50 52 4 400 "" [1 uses])

(note 52 51 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 4 arch/arm/vfp/vfp.h:311 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdm.significand+0 S8 A64])
        (reg/v:DI 173 [ significand ])) 163 {*arm_movdi} (nil))

(insn 54 53 55 4 arch/arm/vfp/vfp.h:330 (set (reg:SI 218)
        (const_int -63489 [0xffffffffffff07ff])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 56 4 arch/arm/vfp/vfp.h:330 (set (reg:HI 217)
        (subreg:HI (reg:SI 218) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 218)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 56 55 57 4 arch/arm/vfp/vfp.h:330 (set (reg:SI 219 [ D.6135 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 172 [ D.6135 ]) 0))) 155 {*arm_extendhisi2_v6} (nil))

(insn 57 56 58 4 arch/arm/vfp/vfp.h:330 (set (reg:SI 220)
        (sign_extend:SI (reg:HI 217))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:HI 217)
        (expr_list:REG_EQUAL (const_int 2047 [0x7ff])
            (nil))))

(insn 58 57 59 4 arch/arm/vfp/vfp.h:330 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 219 [ D.6135 ])
            (reg:SI 220))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 220)
        (expr_list:REG_DEAD (reg:SI 219 [ D.6135 ])
            (nil))))

(jump_insn 59 58 60 4 arch/arm/vfp/vfp.h:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 86)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; rd  out 	(42)
15, 33, 48, 60, 63, 73, 74, 208, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123


;; Succ edge  5 [28.0%]  (fallthru)
;; Succ edge  8 [72.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u72(11){ }u73(13){ }u74(25){ }u75(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173
;; lr  def 	 24 [cc] 221
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; live  gen 	 24 [cc] 221
;; live  kill	
;; rd  in  	(42)
15, 33, 48, 60, 63, 73, 74, 208, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
207, 1027
;; rd  kill	(2)
1027, 1028

;; Pred edge  4 [28.0%]  (fallthru)
(note 60 59 61 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 5 arch/arm/vfp/vfp.h:331 (set (reg:SI 221 [ significand ])
        (subreg:SI (reg/v:DI 173 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 62 61 63 5 arch/arm/vfp/vfp.h:331 (set (reg:SI 221 [ significand ])
        (ior:SI (reg:SI 221 [ significand ])
            (subreg:SI (reg/v:DI 173 [ significand ]) 4))) 89 {*arm_iorsi3} (nil))

(insn 63 62 64 5 arch/arm/vfp/vfp.h:331 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 221 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 221 [ significand ])
        (nil)))

(jump_insn 64 63 65 5 arch/arm/vfp/vfp.h:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 69)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; rd  out 	(43)
15, 33, 48, 60, 63, 73, 74, 207, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1120, 1121, 1122, 1123


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  7 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u81(11){ }u82(13){ }u83(25){ }u84(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191
;; live  gen 	 177
;; live  kill	
;; rd  in  	(43)
15, 33, 48, 60, 63, 73, 74, 207, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
986
;; rd  kill	(4)
983, 984, 985, 986

;; Pred edge  5 [50.0%]  (fallthru)
(note 65 64 66 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 719 6 arch/arm/vfp/vfp.h:332 (set (reg/v:SI 177 [ tm ])
        (const_int 8 [0x8])) 167 {*arm_movsi_insn} (nil))

(jump_insn 719 66 720 6 (set (pc)
        (label_ref 107)) -1 (nil))
;; End of basic block 6 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(44)
15, 33, 48, 60, 63, 73, 74, 207, 212, 213, 969, 970, 972, 973, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1120, 1121, 1122, 1123


;; Succ edge  11 [100.0%] 

(barrier 720 719 69)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u85(11){ }u86(13){ }u87(25){ }u88(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173
;; lr  def 	 24 [cc] 177 222 223 224
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; live  gen 	 24 [cc] 177 222 223 224
;; live  kill	
;; rd  in  	(43)
15, 33, 48, 60, 63, 73, 74, 207, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1120, 1121, 1122, 1123
;; rd  gen 	(5)
153, 984, 1029, 1030, 1031
;; rd  kill	(8)
983, 984, 985, 986, 1029, 1030, 1031, 1032

;; Pred edge  5 [50.0%] 
(code_label 69 720 70 7 402 "" [1 uses])

(note 70 69 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 72 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 223)
        (const_int 2305843009213693952 [0x2000000000000000])) 163 {*arm_movdi} (nil))

(insn 72 71 73 7 arch/arm/vfp/vfp.h:333 (set (reg:DI 222)
        (and:DI (reg/v:DI 173 [ significand ])
            (reg:DI 223))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 223)
        (expr_list:REG_DEAD (reg/v:DI 173 [ significand ])
            (expr_list:REG_EQUAL (and:DI (reg/v:DI 173 [ significand ])
                    (const_int 2305843009213693952 [0x2000000000000000]))
                (nil)))))

(insn 73 72 74 7 arch/arm/vfp/vfp.h:333 (set (reg:SI 224)
        (subreg:SI (reg:DI 222) 0)) 167 {*arm_movsi_insn} (nil))

(insn 74 73 691 7 arch/arm/vfp/vfp.h:333 (set (reg:SI 224)
        (ior:SI (reg:SI 224)
            (subreg:SI (reg:DI 222) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 222)
        (nil)))

(insn 691 74 692 7 arch/arm/vfp/vfp.h:336 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 224)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 224)
        (nil)))

(insn 692 691 721 7 arch/arm/vfp/vfp.h:336 (set (reg/v:SI 177 [ tm ])
        (if_then_else:SI (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 16 [0x10])
            (const_int 48 [0x30]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(jump_insn 721 692 722 7 (set (pc)
        (label_ref 107)) -1 (nil))
;; End of basic block 7 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(47)
15, 33, 48, 60, 63, 73, 74, 153, 212, 213, 969, 970, 972, 973, 984, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1120, 1121, 1122, 1123


;; Succ edge  11 [100.0%] 

(barrier 722 721 86)

;; Start of basic block ( 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u97(11){ }u98(13){ }u99(25){ }u100(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 172
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 172 173 188 191
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(42)
15, 33, 48, 60, 63, 73, 74, 208, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
206
;; rd  kill	(0)


;; Pred edge  4 [72.0%] 
(code_label 86 722 87 8 401 "" [1 uses])

(note 87 86 88 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 88 87 89 8 arch/arm/vfp/vfp.h:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 172 [ D.6135 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 172 [ D.6135 ])
        (nil)))

(jump_insn 89 88 90 8 arch/arm/vfp/vfp.h:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; rd  out 	(42)
15, 33, 48, 60, 63, 73, 74, 206, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123


;; Succ edge  10 [50.0%] 
;; Succ edge  9 [50.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u103(11){ }u104(13){ }u105(25){ }u106(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 177
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191
;; live  gen 	 177
;; live  kill	
;; rd  in  	(42)
15, 33, 48, 60, 63, 73, 74, 206, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
985
;; rd  kill	(4)
983, 984, 985, 986

;; Pred edge  8 [50.0%]  (fallthru)
(note 90 89 91 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 723 9 arch/arm/vfp/vfp.h:329 (set (reg/v:SI 177 [ tm ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(jump_insn 723 91 724 9 (set (pc)
        (label_ref 107)) -1 (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(43)
15, 33, 48, 60, 63, 73, 74, 206, 212, 213, 969, 970, 972, 973, 985, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123


;; Succ edge  11 [100.0%] 

(barrier 724 723 94)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u107(11){ }u108(13){ }u109(25){ }u110(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 173
;; lr  def 	 24 [cc] 177 225
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 173 188 191
;; live  gen 	 24 [cc] 177 225
;; live  kill	
;; rd  in  	(42)
15, 33, 48, 60, 63, 73, 74, 206, 212, 213, 969, 970, 972, 973, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1120, 1121, 1122, 1123
;; rd  gen 	(3)
152, 983, 1033
;; rd  kill	(6)
983, 984, 985, 986, 1033, 1034

;; Pred edge  8 [50.0%] 
(code_label 94 724 95 10 405 "" [1 uses])

(note 95 94 96 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 96 95 97 10 arch/arm/vfp/vfp.h:338 (set (reg:SI 225 [ significand ])
        (subreg:SI (reg/v:DI 173 [ significand ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 97 96 693 10 arch/arm/vfp/vfp.h:338 (set (reg:SI 225 [ significand ])
        (ior:SI (reg:SI 225 [ significand ])
            (subreg:SI (reg/v:DI 173 [ significand ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg/v:DI 173 [ significand ])
        (nil)))

(insn 693 97 694 10 arch/arm/vfp/vfp.h:341 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 225 [ significand ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 225 [ significand ])
        (nil)))

(insn 694 693 107 10 arch/arm/vfp/vfp.h:341 (set (reg/v:SI 177 [ tm ])
        (if_then_else:SI (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (const_int 3 [0x3])
            (const_int 5 [0x5]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(44)
15, 33, 48, 60, 63, 73, 74, 152, 212, 213, 969, 970, 972, 973, 983, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1033, 1120, 1121, 1122, 1123


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 7 6 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u116(11){ }u117(13){ }u118(25){ }u119(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 226
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; live  gen 	 24 [cc] 226
;; live  kill	
;; rd  in  	(54)
15, 33, 48, 60, 63, 73, 74, 152, 153, 206, 207, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
205, 1035
;; rd  kill	(1)
1035

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 107 694 108 11 403 "" [3 uses])

(note 108 107 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 11 arch/arm/vfp/vfpdouble.c:275 (set (reg:SI 226)
        (and:SI (reg/v:SI 177 [ tm ])
            (const_int 24 [0x18]))) 67 {*arm_andsi3_insn} (nil))

(insn 110 109 111 11 arch/arm/vfp/vfpdouble.c:275 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 226)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 226)
        (nil)))

(jump_insn 111 110 112 11 arch/arm/vfp/vfpdouble.c:275 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 171)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 11 -> ( 12 18)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; rd  out 	(52)
15, 33, 48, 60, 63, 73, 74, 205, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1120, 1121, 1122, 1123


;; Succ edge  12 [50.0%]  (fallthru)
;; Succ edge  18 [50.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u123(11){ }u124(13){ }u125(25){ }u126(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 227
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 177 188 191
;; live  gen 	 24 [cc] 227
;; live  kill	
;; rd  in  	(52)
15, 33, 48, 60, 63, 73, 74, 205, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
204, 1036
;; rd  kill	(1)
1036

;; Pred edge  11 [50.0%]  (fallthru)
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 113 112 114 12 arch/arm/vfp/vfpdouble.c:278 (set (reg:SI 227)
        (and:SI (reg/v:SI 177 [ tm ])
            (const_int 16 [0x10]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 177 [ tm ])
        (nil)))

(insn 114 113 115 12 arch/arm/vfp/vfpdouble.c:278 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 227)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 227)
        (nil)))

(jump_insn 115 114 116 12 arch/arm/vfp/vfpdouble.c:278 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 129)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188 191
;; rd  out 	(53)
15, 33, 48, 60, 63, 73, 74, 204, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1120, 1121, 1122, 1123


;; Succ edge  13 [29.0%]  (fallthru)
;; Succ edge  14 [71.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u130(11){ }u131(13){ }u132(25){ }u133(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 191
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 176 178 228 229
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 176 178 228 229
;; live  kill	 14 [lr]
;; rd  in  	(53)
15, 33, 48, 60, 63, 73, 74, 204, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1120, 1121, 1122, 1123
;; rd  gen 	(5)
13, 981, 987, 1037, 1038
;; rd  kill	(36)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 980, 981, 982, 987, 988, 989, 1037, 1038

;; Pred edge  12 [29.0%]  (fallthru)
(note 116 115 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 117 116 118 13 arch/arm/vfp/vfpdouble.c:279 (set (reg/f:SI 228)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 118 117 119 13 arch/arm/vfp/vfpdouble.c:279 (set (reg/f:SI 229)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 119 118 120 13 arch/arm/vfp/vfpdouble.c:279 (set (reg:SI 0 r0)
        (reg/f:SI 228)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))
        (nil)))

(insn 120 119 121 13 arch/arm/vfp/vfpdouble.c:279 (set (reg:SI 1 r1)
        (reg/f:SI 229)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 229)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(insn 121 120 122 13 arch/arm/vfp/vfpdouble.c:279 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 122 121 123 13 arch/arm/vfp/vfpdouble.c:279 (set (reg:SI 3 r3)
        (reg/v:SI 191 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ fpscr ])
        (nil)))

(call_insn 123 122 124 13 arch/arm/vfp/vfpdouble.c:279 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_propagate_nan") [flags 0x3] <function_decl 0x10a9de80 vfp_propagate_nan>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 124 123 126 13 arch/arm/vfp/vfpdouble.c:279 (set (reg/v:SI 178 [ ret ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 126 124 725 13 arch/arm/vfp/vfpdouble.c:276 (set (reg/v/f:SI 176 [ vdp ])
        (reg/f:SI 228)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 228)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(jump_insn 725 126 726 13 (set (pc)
        (label_ref 143)) -1 (nil))
;; End of basic block 13 -> ( 17)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; rd  out 	(57)
13, 33, 48, 60, 63, 73, 74, 204, 212, 213, 969, 970, 972, 973, 981, 983, 984, 985, 986, 987, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1120, 1121, 1122, 1123


;; Succ edge  17 [100.0%] 

(barrier 726 725 129)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u149(11){ }u150(13){ }u151(25){ }u152(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171 188
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(53)
15, 33, 48, 60, 63, 73, 74, 204, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
202
;; rd  kill	(0)


;; Pred edge  12 [71.0%] 
(code_label 129 726 130 14 408 "" [1 uses])

(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 131 130 132 14 arch/arm/vfp/vfpdouble.c:280 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 171 [ D.6138 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 171 [ D.6138 ])
        (nil)))

(jump_insn 132 131 173 14 arch/arm/vfp/vfpdouble.c:280 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 138)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
            (nil))))
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; rd  out 	(53)
15, 33, 48, 60, 63, 73, 74, 202, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1120, 1121, 1122, 1123


;; Succ edge  15 [39.0%]  (fallthru)
;; Succ edge  16 [61.0%] 

;; Start of basic block ( 14 18) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u155(11){ }u156(13){ }u157(25){ }u158(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 176 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 176 178
;; live  kill	
;; rd  in  	(55)
15, 33, 48, 60, 63, 73, 74, 198, 202, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1057, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
982, 989
;; rd  kill	(6)
980, 981, 982, 987, 988, 989

;; Pred edge  14 [39.0%]  (fallthru)
;; Pred edge  18 [39.0%] 
(code_label 173 132 133 15 412 "" [1 uses])

(note 133 173 134 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 134 133 135 15 arch/arm/vfp/vfpdouble.c:282 (set (reg/v/f:SI 176 [ vdp ])
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 135 134 727 15 arch/arm/vfp/vfpdouble.c:283 (set (reg/v:SI 178 [ ret ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 727 135 728 15 (set (pc)
        (label_ref 143)) -1 (nil))
;; End of basic block 15 -> ( 17)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; rd  out 	(57)
15, 33, 48, 60, 63, 73, 74, 198, 202, 212, 213, 969, 970, 972, 973, 982, 983, 984, 985, 986, 989, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1057, 1120, 1121, 1122, 1123


;; Succ edge  17 [100.0%] 

(barrier 728 727 138)

;; Start of basic block ( 21 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u160(11){ }u161(13){ }u162(25){ }u163(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 176 178
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188
;; live  gen 	 176 178
;; live  kill	
;; rd  in  	(58)
15, 33, 48, 60, 63, 73, 74, 195, 202, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
980, 988
;; rd  kill	(6)
980, 981, 982, 987, 988, 989

;; Pred edge  21 [71.0%] 
;; Pred edge  14 [61.0%] 
(code_label 138 728 139 16 410 "" [2 uses])

(note 139 138 140 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 140 139 142 16 arch/arm/vfp/vfpdouble.c:286 (set (reg/v/f:SI 176 [ vdp ])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 142 140 143 16 arch/arm/vfp/vfpdouble.c:287 (set (reg/v:SI 178 [ ret ])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; rd  out 	(60)
15, 33, 48, 60, 63, 73, 74, 195, 202, 212, 213, 969, 970, 972, 973, 980, 983, 984, 985, 986, 988, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 13 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u164(11){ }u165(13){ }u166(25){ }u167(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 184 232 234 235 236 238 239 242 243 244 245 247
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 176 178 188
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 184 232 234 235 236 238 239 242 243 244 245 247
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(69)
13, 15, 33, 48, 60, 63, 73, 74, 195, 198, 202, 204, 212, 213, 969, 970, 972, 973, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123
;; rd  gen 	(12)
1002, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056
;; rd  kill	(20)
75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1001, 1002, 1039, 1043, 1044, 1048, 1053, 1054, 1055, 1056

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  13 [100.0%] 
;; Pred edge  15 [100.0%] 
(code_label 143 142 144 17 409 "" [2 uses])

(note 144 143 146 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 146 144 705 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 232 [ <variable>.sign ])
        (zero_extend:SI (mem/s/j:HI (plus:SI (reg/v/f:SI 176 [ vdp ])
                    (const_int 2 [0x2])) [0 <variable>.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 705 146 148 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:DI 234)
        (const_int 0 [0x0])) -1 (nil))

(insn 148 705 149 17 arch/arm/vfp/vfpdouble.c:289 (set (subreg:SI (reg:DI 234) 4)
        (ashift:SI (reg:SI 232 [ <variable>.sign ])
            (const_int 16 [0x10]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 232 [ <variable>.sign ])
        (nil)))

(insn 149 148 151 17 arch/arm/vfp/vfpdouble.c:289 (set (subreg:SI (reg:DI 234) 0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 151 149 152 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 236 [ <variable>.exponent ])
        (sign_extend:SI (mem/s/j:HI (reg/v/f:SI 176 [ vdp ]) [0 <variable>.exponent+0 S2 A64]))) 155 {*arm_extendhisi2_v6} (nil))

(insn 152 151 706 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:DI 235 [ <variable>.exponent ])
        (sign_extend:DI (reg:SI 236 [ <variable>.exponent ]))) 140 {*arm_extendsidi2} (expr_list:REG_DEAD (reg:SI 236 [ <variable>.exponent ])
        (nil)))

(insn 706 152 153 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:DI 238)
        (const_int 0 [0x0])) -1 (nil))

(insn 153 706 154 17 arch/arm/vfp/vfpdouble.c:289 (set (subreg:SI (reg:DI 238) 4)
        (ashift:SI (subreg:SI (reg:DI 235 [ <variable>.exponent ]) 0)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 235 [ <variable>.exponent ])
        (nil)))

(insn 154 153 155 17 arch/arm/vfp/vfpdouble.c:289 (set (subreg:SI (reg:DI 238) 0)
        (subreg:SI (reg:DI 234) 0)) 167 {*arm_movsi_insn} (nil))

(insn 155 154 157 17 arch/arm/vfp/vfpdouble.c:289 (parallel [
            (set (reg:DI 239)
                (plus:DI (reg:DI 234)
                    (reg:DI 238)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 238)
        (expr_list:REG_DEAD (reg:DI 234)
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 157 155 158 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 244 [ <variable>.significand+4 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 176 [ vdp ])
                (const_int 12 [0xc])) [0 <variable>.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 158 157 159 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 243)
        (ashift:SI (reg:SI 244 [ <variable>.significand+4 ])
            (const_int 22 [0x16]))) 117 {*arm_shiftsi3} (nil))

(insn 159 158 707 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 245 [ <variable>.significand ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 176 [ vdp ])
                (const_int 8 [0x8])) [0 <variable>.significand+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 176 [ vdp ])
        (nil)))

(insn 707 159 160 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:DI 242)
        (const_int 0 [0x0])) -1 (nil))

(insn 160 707 161 17 arch/arm/vfp/vfpdouble.c:289 (set (subreg:SI (reg:DI 242) 0)
        (lshiftrt:SI (reg:SI 245 [ <variable>.significand ])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 245 [ <variable>.significand ])
        (nil)))

(insn 161 160 163 17 arch/arm/vfp/vfpdouble.c:289 (set (subreg:SI (reg:DI 242) 0)
        (ior:SI (reg:SI 243)
            (subreg:SI (reg:DI 242) 0))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 243)
        (nil)))

(insn 163 161 164 17 arch/arm/vfp/vfpdouble.c:289 (set (subreg:SI (reg:DI 242) 4)
        (lshiftrt:SI (reg:SI 244 [ <variable>.significand+4 ])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 244 [ <variable>.significand+4 ])
        (nil)))

(insn 164 163 165 17 arch/arm/vfp/vfpdouble.c:289 (parallel [
            (set (reg:DI 247)
                (plus:DI (reg:DI 239)
                    (reg:DI 242)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 242)
        (expr_list:REG_DEAD (reg:DI 239)
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 165 164 166 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:DI 0 r0)
        (reg:DI 247)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 247)
        (nil)))

(insn 166 165 167 17 arch/arm/vfp/vfpdouble.c:289 (set (reg:SI 2 r2)
        (reg/v:SI 188 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 188 [ dd ])
        (nil)))

(call_insn 167 166 168 17 arch/arm/vfp/vfpdouble.c:289 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_put_double") [flags 0x41] <function_decl 0x10a9d680 vfp_put_double>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 168 167 729 17 arch/arm/vfp/vfpdouble.c:290 (set (reg:SI 184 [ D.4281 ])
        (reg/v:SI 178 [ ret ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 178 [ ret ])
        (nil)))

(jump_insn 729 168 730 17 arch/arm/vfp/vfpdouble.c:290 (set (pc)
        (label_ref 582)) -1 (nil))
;; End of basic block 17 -> ( 59)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 184
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; rd  out 	(81)
13, 15, 33, 48, 60, 63, 73, 74, 195, 198, 202, 204, 212, 213, 969, 970, 972, 973, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123


;; Succ edge  59 [100.0%] 

(barrier 730 729 171)

;; Start of basic block ( 11) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u199(11){ }u200(13){ }u201(25){ }u202(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 248
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191
;; live  gen 	 24 [cc] 248
;; live  kill	
;; rd  in  	(52)
15, 33, 48, 60, 63, 73, 74, 205, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
198, 1057
;; rd  kill	(1)
1057

;; Pred edge  11 [50.0%] 
(code_label 171 730 172 18 407 "" [1 uses])

(note 172 171 174 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 174 172 175 18 arch/arm/vfp/vfpdouble.c:296 (set (reg:SI 248)
        (and:SI (reg/v:SI 177 [ tm ])
            (const_int 2 [0x2]))) 67 {*arm_andsi3_insn} (nil))

(insn 175 174 176 18 arch/arm/vfp/vfpdouble.c:296 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 248)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 248)
        (nil)))

(jump_insn 176 175 177 18 arch/arm/vfp/vfpdouble.c:296 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 173)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 18 -> ( 15 19)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191
;; rd  out 	(53)
15, 33, 48, 60, 63, 73, 74, 198, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1120, 1121, 1122, 1123


;; Succ edge  15 [39.0%] 
;; Succ edge  19 [61.0%]  (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u206(11){ }u207(13){ }u208(25){ }u209(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177
;; lr  def 	 24 [cc] 249
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 177 188 191
;; live  gen 	 24 [cc] 249
;; live  kill	
;; rd  in  	(53)
15, 33, 48, 60, 63, 73, 74, 198, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
197, 1058
;; rd  kill	(1)
1058

;; Pred edge  18 [61.0%]  (fallthru)
(note 177 176 178 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 178 177 179 19 arch/arm/vfp/vfpdouble.c:302 (set (reg:SI 249)
        (and:SI (reg/v:SI 177 [ tm ])
            (const_int 4 [0x4]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 177 [ tm ])
        (nil)))

(insn 179 178 180 19 arch/arm/vfp/vfpdouble.c:302 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 249)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 249)
        (nil)))

(jump_insn 180 179 181 19 arch/arm/vfp/vfpdouble.c:302 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 185)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 19 -> ( 20 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; rd  out 	(54)
15, 33, 48, 60, 63, 73, 74, 197, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1120, 1121, 1122, 1123


;; Succ edge  20 [29.0%]  (fallthru)
;; Succ edge  21 [71.0%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u213(11){ }u214(13){ }u215(25){ }u216(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 250
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 0 [r0] 250
;; live  kill	 14 [lr]
;; rd  in  	(54)
15, 33, 48, 60, 63, 73, 74, 197, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1120, 1121, 1122, 1123
;; rd  gen 	(1)
1059
;; rd  kill	(11)
75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1059

;; Pred edge  19 [29.0%]  (fallthru)
(note 181 180 182 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 182 181 183 20 arch/arm/vfp/vfpdouble.c:303 (set (reg/f:SI 250)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -16 [0xfffffffffffffff0]))) 4 {*arm_addsi3} (nil))

(insn 183 182 184 20 arch/arm/vfp/vfpdouble.c:303 (set (reg:SI 0 r0)
        (reg/f:SI 250)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 250)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))

(call_insn 184 183 185 20 arch/arm/vfp/vfpdouble.c:303 (parallel [
            (call (mem:SI (symbol_ref:SI ("vfp_double_normalise_denormal") [flags 0x3] <function_decl 0x10a9dc80 vfp_double_normalise_denormal>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 20 -> ( 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; rd  out 	(55)
15, 33, 48, 60, 63, 73, 74, 197, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1120, 1121, 1122, 1123


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 19 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u222(11){ }u223(13){ }u224(25){ }u225(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 251
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 251
;; live  kill	
;; rd  in  	(55)
15, 33, 48, 60, 63, 73, 74, 197, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1120, 1121, 1122, 1123
;; rd  gen 	(2)
195, 1060
;; rd  kill	(1)
1060

;; Pred edge  19 [71.0%] 
;; Pred edge  20 [100.0%]  (fallthru)
(code_label 185 184 186 21 413 "" [1 uses])

(note 186 185 187 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 187 186 188 21 arch/arm/vfp/vfpdouble.c:308 (set (reg:SI 251 [ vdm.sign ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -14 [0xfffffffffffffff2])) [0 vdm.sign+0 S2 A16]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 188 187 189 21 arch/arm/vfp/vfpdouble.c:308 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 251 [ vdm.sign ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 189 188 190 21 arch/arm/vfp/vfpdouble.c:308 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 138)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 21 -> ( 16 22)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 251 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 251
;; rd  out 	(56)
15, 33, 48, 60, 63, 73, 74, 195, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123


;; Succ edge  16 [71.0%] 
;; Succ edge  22 [29.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u229(11){ }u230(13){ }u231(25){ }u232(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 251 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 251
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 181 182 183 254 255 256 257 259 260 265 267 268 269 270 369 370 377
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191 251
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 181 182 183 254 255 256 257 259 260 265 267 268 269 270 369 370 377
;; live  kill	 14 [lr] 377
;; rd  in  	(56)
15, 33, 48, 60, 63, 73, 74, 195, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1120, 1121, 1122, 1123
;; rd  gen 	(20)
6, 25, 157, 996, 999, 1000, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1125, 1126, 1130
;; rd  kill	(60)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 999, 1000, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1125, 1126

;; Pred edge  21 [29.0%]  (fallthru)
(note 190 189 193 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 193 190 194 22 arch/arm/vfp/vfpdouble.c:316 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -30 [0xffffffffffffffe2])) [0 vdd.sign+0 S2 A16])
        (subreg:HI (reg:SI 251 [ vdm.sign ]) 0)) 176 {*movhi_insn_arch4} (nil))

(insn 194 193 195 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 183 [ D.4288 ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -16 [0xfffffffffffffff0])) [0 vdm.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 195 194 196 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 254 [ D.4288 ])
        (sign_extend:SI (subreg/s/u:HI (reg:SI 183 [ D.4288 ]) 0))) 155 {*arm_extendhisi2_v6} (expr_list:REG_DEAD (reg:SI 183 [ D.4288 ])
        (nil)))

(insn 196 195 197 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 256)
        (plus:SI (reg:SI 254 [ D.4288 ])
            (const_int -1020 [0xfffffffffffffc04]))) 4 {*arm_addsi3} (nil))

(insn 197 196 198 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 255)
        (plus:SI (reg:SI 256)
            (const_int -3 [0xfffffffffffffffd]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 256)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 254 [ D.4288 ])
                (const_int -1023 [0xfffffffffffffc01]))
            (nil))))

(insn 198 197 200 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 257)
        (ashiftrt:SI (reg:SI 255)
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 255)
        (nil)))

(insn 200 198 201 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 260)
        (plus:SI (reg:SI 257)
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 257)
        (nil)))

(insn 201 200 202 22 arch/arm/vfp/vfpdouble.c:317 (set (reg:SI 259)
        (plus:SI (reg:SI 260)
            (const_int 3 [0x3]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 260)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 257)
                (const_int 1023 [0x3ff]))
            (nil))))

(insn 202 201 205 22 arch/arm/vfp/vfpdouble.c:317 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0])) [0 vdd.exponent+0 S2 A64])
        (subreg:HI (reg:SI 259) 0)) 176 {*movhi_insn_arch4} (expr_list:REG_DEAD (reg:SI 259)
        (nil)))

(insn 205 202 208 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 265 [ vdm.significand+4 ])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 vdm.significand+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 208 205 209 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 0 r0)
        (reg:SI 254 [ D.4288 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 254 [ D.4288 ])
        (nil)))

(insn 209 208 210 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 1 r1)
        (reg:SI 265 [ vdm.significand+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 265 [ vdm.significand+4 ])
        (nil)))

(call_insn 210 209 211 22 arch/arm/vfp/vfpdouble.c:318 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_estimate_sqrt_significand") [flags 0x41] <function_decl 0x10a9da80 vfp_estimate_sqrt_significand>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 211 210 213 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 182 [ D.4299 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 213 211 708 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:SI 267)
        (lshiftrt:SI (reg:SI 182 [ D.4299 ])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn 708 213 214 22 arch/arm/vfp/vfpdouble.c:318 (set (reg:DI 181 [ D.4301 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 214 708 215 22 arch/arm/vfp/vfpdouble.c:318 (set (subreg:SI (reg:DI 181 [ D.4301 ]) 4)
        (reg:SI 251 [ vdm.sign ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 251 [ vdm.sign ])
        (nil)))

(insn 215 214 216 22 arch/arm/vfp/vfpdouble.c:318 (set (subreg:SI (reg:DI 181 [ D.4301 ]) 4)
        (reg:SI 267)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 267)
        (nil)))

(insn 216 215 217 22 arch/arm/vfp/vfpdouble.c:318 (set (subreg:SI (reg:DI 181 [ D.4301 ]) 0)
        (ashift:SI (reg:SI 182 [ D.4299 ])
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 182 [ D.4299 ])
        (nil)))

(insn 217 216 218 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 268 [ vdm.exponent ])
        (zero_extend:SI (mem/s/j/c:HI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -16 [0xfffffffffffffff0])) [0 vdm.exponent+0 S2 A64]))) 144 {*arm_zero_extendhisi2_v6} (nil))

(insn 218 217 219 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 269)
        (and:SI (reg:SI 268 [ vdm.exponent ])
            (const_int 1 [0x1]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 268 [ vdm.exponent ])
        (nil)))

(insn 219 218 223 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 270)
        (plus:SI (reg:SI 269)
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 269)
        (nil)))

(insn 223 219 224 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:DI 0 r0)
        (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdm.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 224 223 225 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 2 r2)
        (reg:SI 270)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 270)
        (nil)))

(call_insn/u 225 224 671 22 arch/arm/vfp/vfpdouble.c:322 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__aeabi_llsr") [flags 0x41]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:DI 0 r0))
            (nil))))

(insn 671 225 672 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 369)
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 672 671 673 22 arch/arm/vfp/vfpdouble.c:322 (set (reg:SI 370 [+4 ])
        (reg:SI 1 r1 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [+4 ])
        (nil)))

(insn 673 672 674 22 arch/arm/vfp/vfpdouble.c:322 (clobber (reg:DI 377 [ __n ])) -1 (nil))

(insn 674 673 675 22 arch/arm/vfp/vfpdouble.c:322 (set (subreg:SI (reg:DI 377 [ __n ]) 0)
        (reg:SI 369)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 369)
        (nil)))

(insn 675 674 228 22 arch/arm/vfp/vfpdouble.c:322 (set (subreg:SI (reg:DI 377 [ __n ]) 4)
        (reg:SI 370 [+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 370 [+4 ])
        (nil)))

(insn 228 675 229 22 arch/arm/vfp/vfpdouble.c:322 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdm.significand+0 S8 A64])
        (reg:DI 377 [ __n ])) 163 {*arm_movdi} (nil))

(insn 229 228 230 22 arch/arm/vfp/vfp.h:117 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 181 [ D.4301 ]) 4)
            (subreg:SI (reg:DI 377 [ __n ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 230 229 596 22 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 244)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 22 -> ( 26 23)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 181 188 191 377
;; rd  out 	(73)
6, 25, 48, 60, 63, 73, 74, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130


;; Succ edge  26 [50.0%] 
;; Succ edge  23 [50.0%]  (fallthru)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u280(11){ }u281(13){ }u282(25){ }u283(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 181 188 191 377
;; live  gen 	
;; live  kill	
;; rd  in  	(73)
6, 25, 48, 60, 63, 73, 74, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  22 [50.0%]  (fallthru)
(note 596 230 232 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(jump_insn 232 596 597 23 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 657)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 23 -> ( 25 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; rd  out 	(73)
6, 25, 48, 60, 63, 73, 74, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130


;; Succ edge  25 [71.0%] 
;; Succ edge  24 [29.0%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u285(11){ }u286(13){ }u287(25){ }u288(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 377
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(73)
6, 25, 48, 60, 63, 73, 74, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(1)
156
;; rd  kill	(0)


;; Pred edge  23 [29.0%]  (fallthru)
(note 597 232 233 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 233 597 234 24 arch/arm/vfp/vfp.h:117 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 181 [ D.4301 ]) 0)
            (subreg:SI (reg:DI 377 [ __n ]) 0))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 234 233 657 24 arch/arm/vfp/vfp.h:117 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 244)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 24 -> ( 26 25)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; rd  out 	(73)
6, 25, 48, 60, 63, 73, 74, 156, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130


;; Succ edge  26 [50.0%] 
;; Succ edge  25 [50.0%]  (fallthru)

;; Start of basic block ( 24 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u292(11){ }u293(13){ }u294(25){ }u295(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; live  gen 	 137
;; live  kill	
;; rd  in  	(74)
6, 25, 48, 60, 63, 73, 74, 156, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(1)
929
;; rd  kill	(3)
927, 928, 929

;; Pred edge  24 [50.0%]  (fallthru)
;; Pred edge  23 [71.0%] 
(code_label 657 234 240 25 445 "" [1 uses])

(note 240 657 241 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 241 240 731 25 arch/arm/vfp/vfp.h:118 (set (reg/v:DI 137 [ z.1257 ])
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(jump_insn 731 241 732 25 (set (pc)
        (label_ref 407)) -1 (nil))
;; End of basic block 25 -> ( 40)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 377
;; rd  out 	(75)
6, 25, 48, 60, 63, 73, 74, 156, 157, 212, 213, 929, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130


;; Succ edge  40 [100.0%] 

(barrier 732 731 244)

;; Start of basic block ( 22 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u296(11){ }u297(13){ }u298(25){ }u299(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 377
;; lr  def 	 24 [cc] 153 346
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 181 188 191 377
;; live  gen 	 24 [cc] 153 346
;; live  kill	
;; rd  in  	(74)
6, 25, 48, 60, 63, 73, 74, 156, 157, 212, 213, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(3)
155, 952, 1118
;; rd  kill	(1)
1118

;; Pred edge  22 [50.0%] 
;; Pred edge  24 [50.0%] 
(code_label 244 732 245 26 414 "" [2 uses])

(note 245 244 709 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 709 245 246 26 arch/arm/vfp/vfp.h:119 (set (reg/v:DI 153 [ mh ])
        (const_int 0 [0x0])) -1 (nil))

(insn 246 709 247 26 arch/arm/vfp/vfp.h:119 (set (subreg:SI (reg/v:DI 153 [ mh ]) 0)
        (subreg:SI (reg:DI 181 [ D.4301 ]) 4)) 167 {*arm_movsi_insn} (nil))

(insn 247 246 248 26 arch/arm/vfp/vfp.h:119 (set (subreg:SI (reg/v:DI 153 [ mh ]) 4)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 248 247 250 26 arch/arm/vfp/vfp.h:120 (set (reg:SI 346 [ D.6380+4 ])
        (subreg:SI (reg/v:DI 153 [ mh ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 250 248 251 26 arch/arm/vfp/vfp.h:120 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 346 [ D.6380+4 ])
            (subreg:SI (reg:DI 377 [ __n ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 251 250 601 26 arch/arm/vfp/vfp.h:120 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 265)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 26 -> ( 28 27)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 346 377
;; rd  out 	(75)
6, 25, 48, 60, 63, 73, 74, 155, 212, 213, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1120, 1121, 1122, 1123, 1125, 1126, 1130


;; Succ edge  28 [50.0%] 
;; Succ edge  27 [50.0%]  (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u307(11){ }u308(13){ }u309(25){ }u310(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 143
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 346 377
;; live  gen 	 143
;; live  kill	
;; rd  in  	(75)
6, 25, 48, 60, 63, 73, 74, 155, 212, 213, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(1)
941
;; rd  kill	(5)
937, 938, 939, 940, 941

;; Pred edge  26 [50.0%]  (fallthru)
(note 601 251 262 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 262 601 733 27 arch/arm/vfp/vfp.h:121 (set (reg/v:DI 143 [ z.1250 ])
        (const_int -4294967296 [0xffffffff00000000])) 163 {*arm_movdi} (nil))

(jump_insn 733 262 734 27 (set (pc)
        (label_ref 273)) -1 (nil))
;; End of basic block 27 -> ( 29)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 346 377
;; rd  out 	(76)
6, 25, 48, 60, 63, 73, 74, 155, 212, 213, 941, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1120, 1121, 1122, 1123, 1125, 1126, 1130


;; Succ edge  29 [100.0%] 

(barrier 734 733 265)

;; Start of basic block ( 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u311(11){ }u312(13){ }u313(25){ }u314(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 377
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc] 143 347
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153 181 188 191 346 377
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 143 347
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; rd  in  	(75)
6, 25, 48, 60, 63, 73, 74, 155, 212, 213, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(7)
0, 24, 38, 52, 62, 938, 1119
;; rd  kill	(84)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1119

;; Pred edge  26 [50.0%] 
(code_label 265 734 266 28 417 "" [1 uses])

(note 266 265 267 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 267 266 268 28 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg/v:SI 4 r4 [ __base ])
        (subreg:SI (reg/v:DI 153 [ mh ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 268 267 269 28 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg/v:DI 0 r0 [ __n ])
        (reg:DI 377 [ __n ])) 163 {*arm_movdi} (nil))

(insn 269 268 677 28 arch/arm/vfp/vfp.h:124 discrim 1 (parallel [
            (set (reg/v:SI 1 r1 [ __rem ])
                (asm_operands:SI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 0 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779402))
            (set (reg/v:DI 2 r2 [ __res ])
                (asm_operands:DI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 1 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779402))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 4 r4 [ __base ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (expr_list:REG_UNUSED (reg/v:SI 1 r1 [ __rem ])
                        (expr_list:REG_UNUSED (reg:SI 3 r3)
                            (nil))))))))

(insn 677 269 710 28 arch/arm/vfp/vfp.h:124 discrim 1 (set (reg:SI 347 [ z ])
        (reg:SI 2 r2 [ __res ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ __res ])
        (nil)))

(insn 710 677 271 28 arch/arm/vfp/vfp.h:125 (set (reg/v:DI 143 [ z.1250 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 271 710 272 28 arch/arm/vfp/vfp.h:125 (set (subreg:SI (reg/v:DI 143 [ z.1250 ]) 4)
        (reg:SI 347 [ z ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 347 [ z ])
        (nil)))

(insn 272 271 273 28 arch/arm/vfp/vfp.h:125 (set (subreg:SI (reg/v:DI 143 [ z.1250 ]) 0)
        (subreg:SI (reg/v:DI 153 [ mh ]) 4)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 28 -> ( 29)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 346 377
;; rd  out 	(76)
0, 24, 38, 52, 62, 63, 74, 212, 213, 938, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1130


;; Succ edge  29 [100.0%]  (fallthru)

;; Start of basic block ( 28 27) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u325(11){ }u326(13){ }u327(25){ }u328(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181
;; lr  def 	 24 [cc] 142 160 161 162 163 164 275 276 371
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 181 188 191 346 377
;; live  gen 	 24 [cc] 142 160 161 162 163 164 275 276 371
;; live  kill	 24 [cc]
;; rd  in  	(83)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 155, 212, 213, 938, 941, 952, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1130
;; rd  gen 	(10)
190, 936, 961, 962, 963, 964, 965, 1072, 1073, 1127
;; rd  kill	(9)
936, 961, 962, 963, 964, 965, 1072, 1073, 1127

;; Pred edge  28 [100.0%]  (fallthru)
;; Pred edge  27 [100.0%] 
(code_label 273 272 274 29 419 "" [1 uses])

(note 274 273 275 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 275 274 277 29 arch/arm/vfp/vfp.h:80 (set (reg:SI 275 [ D.4301 ])
        (subreg:SI (reg:DI 181 [ D.4301 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 277 275 282 29 arch/arm/vfp/vfp.h:80 (set (reg:SI 276 [ z.1250 ])
        (subreg:SI (reg/v:DI 143 [ z.1250 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 282 277 286 29 arch/arm/vfp/vfp.h:80 (set (reg/v:DI 161 [ rl ])
        (mult:DI (zero_extend:DI (reg:SI 276 [ z.1250 ]))
            (zero_extend:DI (reg:SI 275 [ D.4301 ])))) 51 {*umulsidi3_v6} (nil))

(insn 286 282 291 29 arch/arm/vfp/vfp.h:82 (set (reg/v:SI 160 [ __left ])
        (subreg:SI (reg/v:DI 153 [ mh ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 291 286 295 29 arch/arm/vfp/vfp.h:83 (set (reg/v:DI 163 [ rma ])
        (mult:DI (zero_extend:DI (reg:SI 276 [ z.1250 ]))
            (zero_extend:DI (reg/v:SI 160 [ __left ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 276 [ z.1250 ])
        (nil)))

(insn 295 291 302 29 arch/arm/vfp/vfp.h:86 (set (reg:SI 371)
        (subreg:SI (reg/v:DI 143 [ z.1250 ]) 4)) 167 {*arm_movsi_insn} (nil))

(insn 302 295 306 29 arch/arm/vfp/vfp.h:86 (set (reg/v:DI 162 [ rmb ])
        (mult:DI (zero_extend:DI (reg:SI 371))
            (zero_extend:DI (reg:SI 275 [ D.4301 ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 275 [ D.4301 ])
        (nil)))

(insn 306 302 310 29 arch/arm/vfp/vfp.h:87 (parallel [
            (set (reg/v:DI 142 [ rma.1251 ])
                (plus:DI (reg/v:DI 162 [ rmb ])
                    (reg/v:DI 163 [ rma ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 163 [ rma ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 310 306 314 29 arch/arm/vfp/vfp.h:89 (set (reg/v:DI 164 [ rh ])
        (mult:DI (zero_extend:DI (reg:SI 371))
            (zero_extend:DI (reg/v:SI 160 [ __left ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 371)
        (nil)))

(insn 314 310 315 29 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 162 [ rmb ]) 4)
            (subreg:SI (reg/v:DI 142 [ rma.1251 ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 315 314 606 29 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 329)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 29 -> ( 33 30)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 346 377
;; rd  out 	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130


;; Succ edge  33 [50.0%] 
;; Succ edge  30 [50.0%]  (fallthru)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u346(11){ }u347(13){ }u348(25){ }u349(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 346 377
;; live  gen 	
;; live  kill	
;; rd  in  	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  29 [50.0%]  (fallthru)
(note 606 315 317 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(jump_insn 317 606 607 30 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 659)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 30 -> ( 32 31)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 346 377
;; rd  out 	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130


;; Succ edge  32 [71.0%] 
;; Succ edge  31 [29.0%]  (fallthru)

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u351(11){ }u352(13){ }u353(25){ }u354(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 162
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 162 164 181 188 191 346 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(1)
189
;; rd  kill	(0)


;; Pred edge  30 [29.0%]  (fallthru)
(note 607 317 318 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 318 607 319 31 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 162 [ rmb ]) 0)
            (subreg:SI (reg/v:DI 142 [ rma.1251 ]) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:DI 162 [ rmb ])
        (nil)))

(jump_insn 319 318 659 31 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 329)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 31 -> ( 33 32)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 346 377
;; rd  out 	(92)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130


;; Succ edge  33 [50.0%] 
;; Succ edge  32 [50.0%]  (fallthru)

;; Start of basic block ( 31 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u358(11){ }u359(13){ }u360(25){ }u361(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 166
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 346 377
;; live  gen 	 166
;; live  kill	
;; rd  in  	(93)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(1)
968
;; rd  kill	(2)
967, 968

;; Pred edge  31 [50.0%]  (fallthru)
;; Pred edge  30 [71.0%] 
(code_label 659 319 325 32 447 "" [1 uses])

(note 325 659 326 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 326 325 735 32 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 166 [ iftmp.83 ])
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(jump_insn 735 326 736 32 (set (pc)
        (label_ref 332)) -1 (nil))
;; End of basic block 32 -> ( 34)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 346 377
;; rd  out 	(94)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130


;; Succ edge  34 [100.0%] 

(barrier 736 735 329)

;; Start of basic block ( 29 31) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u362(11){ }u363(13){ }u364(25){ }u365(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 166
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 181 188 191 346 377
;; live  gen 	 166
;; live  kill	
;; rd  in  	(93)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(1)
967
;; rd  kill	(2)
967, 968

;; Pred edge  29 [50.0%] 
;; Pred edge  31 [50.0%] 
(code_label 329 736 330 33 420 "" [2 uses])

(note 330 329 331 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 331 330 332 33 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 166 [ iftmp.83 ])
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 324 346 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 346 377
;; rd  out 	(94)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 967, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130


;; Succ edge  34 [100.0%]  (fallthru)

;; Start of basic block ( 33 32) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u366(11){ }u367(13){ }u368(25){ }u369(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 161 164 166 181 377
;; lr  def 	 24 [cc] 139 140 141 154 155 156 165 289 290 291 292 378 382
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 143 153 160 161 164 166 181 188 191 346 377
;; live  gen 	 24 [cc] 139 140 141 154 155 156 165 289 290 291 292 378 382
;; live  kill	 24 [cc]
;; rd  in  	(95)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 189, 190, 212, 213, 936, 938, 941, 952, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130
;; rd  gen 	(13)
931, 934, 935, 954, 956, 958, 966, 1075, 1077, 1078, 1079, 1133, 1137
;; rd  kill	(12)
931, 935, 956, 957, 958, 959, 966, 1077, 1078, 1079, 1133, 1137

;; Pred edge  33 [100.0%]  (fallthru)
;; Pred edge  32 [100.0%] 
(code_label 332 331 333 34 422 "" [1 uses])

(note 333 332 711 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 711 333 334 34 arch/arm/vfp/vfp.h:92 (set (reg/v:DI 140 [ rma.1253 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 334 711 335 34 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 4)
        (subreg:SI (reg/v:DI 142 [ rma.1251 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 335 334 336 34 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 336 335 712 34 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg/v:DI 139 [ rl.1254 ])
                (plus:DI (reg/v:DI 140 [ rma.1253 ])
                    (reg/v:DI 161 [ rl ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 161 [ rl ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 712 336 337 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 289 [ rma.1253 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 337 712 338 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 289 [ rma.1253 ]) 0)
        (subreg:SI (reg/v:DI 142 [ rma.1251 ]) 4)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 142 [ rma.1251 ])
        (nil)))

(insn 338 337 339 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 289 [ rma.1253 ]) 4)
        (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 339 338 695 34 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 165 [ D.6250 ])
                (plus:DI (reg:DI 289 [ rma.1253 ])
                    (reg/v:DI 164 [ rh ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 289 [ rma.1253 ])
        (expr_list:REG_DEAD (reg/v:DI 164 [ rh ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 695 339 696 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 4)
            (subreg:SI (reg/v:DI 139 [ rl.1254 ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(insn 696 695 697 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 378)
        (gtu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 697 696 354 34 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 290)
        (zero_extend:DI (reg:SI 378))) 138 {*arm_zero_extendsidi2} (expr_list:REG_DEAD (reg:SI 378)
        (nil)))

(insn 354 697 355 34 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg/v:DI 141 [ rh.1252 ])
                (plus:DI (reg:DI 165 [ D.6250 ])
                    (reg:DI 290)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 290)
        (expr_list:REG_DEAD (reg:DI 165 [ D.6250 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 355 354 356 34 arch/arm/vfp/vfp.h:62 (set (reg:DI 291)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 356 355 357 34 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 292)
                (plus:DI (reg/v:DI 141 [ rh.1252 ])
                    (reg:DI 166 [ iftmp.83 ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 166 [ iftmp.83 ])
        (expr_list:REG_DEAD (reg/v:DI 141 [ rh.1252 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 357 356 713 34 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg/v:DI 156 [ reml ])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 0 [
                        (reg:DI 291)
                        (reg:DI 377 [ __n ])
                        (reg/v:DI 139 [ rl.1254 ])
                        (reg:DI 292)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (set (reg/v:DI 155 [ remh ])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 1 [
                        (reg:DI 291)
                        (reg:DI 377 [ __n ])
                        (reg/v:DI 139 [ rl.1254 ])
                        (reg:DI 292)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:DI 292)
        (expr_list:REG_DEAD (reg:DI 291)
            (expr_list:REG_DEAD (reg/v:DI 139 [ rl.1254 ])
                (expr_list:REG_UNUSED (reg:QI 24 cc)
                    (nil))))))

(insn 713 357 358 34 arch/arm/vfp/vfp.h:129 (set (reg/v:DI 154 [ ml ])
        (const_int 0 [0x0])) -1 (nil))

(insn 358 713 359 34 arch/arm/vfp/vfp.h:129 (set (subreg:SI (reg/v:DI 154 [ ml ]) 4)
        (subreg:SI (reg:DI 181 [ D.4301 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 359 358 363 34 arch/arm/vfp/vfp.h:129 (set (subreg:SI (reg/v:DI 154 [ ml ]) 0)
        (subreg:SI (reg/v:DI 140 [ rma.1253 ]) 0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 140 [ rma.1253 ])
        (nil)))

(insn 363 359 737 34 arch/arm/vfp/vfp.h:131 (set (reg:DI 382)
        (const_int -4294967296 [0xffffffff00000000])) 163 {*arm_movdi} (nil))

(jump_insn 737 363 738 34 (set (pc)
        (label_ref 366)) -1 (nil))
;; End of basic block 34 -> ( 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; rd  out 	(106)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 212, 213, 931, 934, 935, 936, 938, 941, 952, 954, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  36 [100.0%] 

(barrier 738 737 368)

;; Start of basic block ( 36) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u397(11){ }u398(13){ }u399(25){ }u400(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 382
;; lr  def 	 24 [cc] 143 155 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; live  gen 	 143 155 156
;; live  kill	 24 [cc]
;; rd  in  	(110)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 183, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(3)
939, 957, 959
;; rd  kill	(9)
937, 938, 939, 940, 941, 956, 957, 958, 959

;; Pred edge  36 [21.0%] 
(code_label 368 738 362 35 426 "" [1 uses])

(note 362 368 364 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 364 362 365 35 arch/arm/vfp/vfp.h:131 (parallel [
            (set (reg/v:DI 143 [ z.1250 ])
                (plus:DI (reg/v:DI 143 [ z.1250 ])
                    (reg:DI 382)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (expr_list:REG_EQUAL (plus:DI (reg/v:DI 143 [ z.1250 ])
                (const_int -4294967296 [0xffffffff00000000]))
            (nil))))

(insn 365 364 366 35 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 156 [ reml ])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 0 [
                        (reg/v:DI 156 [ reml ])
                        (reg/v:DI 155 [ remh ])
                        (reg/v:DI 154 [ ml ])
                        (reg/v:DI 153 [ mh ])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (set (reg/v:DI 155 [ remh ])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 1 [
                        (reg/v:DI 156 [ reml ])
                        (reg/v:DI 155 [ remh ])
                        (reg/v:DI 154 [ ml ])
                        (reg/v:DI 153 [ mh ])
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))
;; End of basic block 35 -> ( 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; rd  out 	(105)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 212, 213, 931, 934, 935, 936, 939, 952, 954, 957, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  36 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 35 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u408(11){ }u409(13){ }u410(25){ }u411(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(109)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
183
;; rd  kill	(0)


;; Pred edge  35 [100.0%]  (fallthru,dfs_back)
;; Pred edge  34 [100.0%] 
(code_label 366 365 367 36 425 "" [1 uses])

(note 367 366 369 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 369 367 370 36 arch/arm/vfp/vfp.h:130 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 155 [ remh ]) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 370 369 617 36 arch/arm/vfp/vfp.h:130 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 368)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2100 [0x834])
            (nil))))
;; End of basic block 36 -> ( 35 37)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 324 346 377 382
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 153 154 155 156 160 181 188 191 346 377 382
;; rd  out 	(110)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 183, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  35 [21.0%] 
;; Succ edge  37 [79.0%]  (fallthru,loop_exit)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u414(11){ }u415(13){ }u416(25){ }u417(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 155 156 160 181 188 191 324 346 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 155 156 346
;; lr  def 	 24 [cc] 159 295 297
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 155 156 160 181 188 191 346 377
;; live  gen 	 24 [cc] 159 295 297
;; live  kill	
;; rd  in  	(110)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 183, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(4)
182, 960, 1082, 1084
;; rd  kill	(1)
960

;; Pred edge  36 [79.0%]  (fallthru,loop_exit)
(note 617 370 714 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 714 617 379 37 arch/arm/vfp/vfp.h:134 (set (reg:DI 295)
        (const_int 0 [0x0])) -1 (nil))

(insn 379 714 380 37 arch/arm/vfp/vfp.h:134 (set (subreg:SI (reg:DI 295) 0)
        (subreg:SI (reg/v:DI 156 [ reml ]) 4)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 156 [ reml ])
        (nil)))

(insn 380 379 715 37 arch/arm/vfp/vfp.h:134 (set (subreg:SI (reg:DI 295) 4)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 715 380 381 37 arch/arm/vfp/vfp.h:134 (set (reg:DI 297 [ remh ])
        (const_int 0 [0x0])) -1 (nil))

(insn 381 715 382 37 arch/arm/vfp/vfp.h:134 (set (subreg:SI (reg:DI 297 [ remh ]) 4)
        (subreg:SI (reg/v:DI 155 [ remh ]) 0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 155 [ remh ])
        (nil)))

(insn 382 381 383 37 arch/arm/vfp/vfp.h:134 (set (subreg:SI (reg:DI 297 [ remh ]) 0)
        (subreg:SI (reg:DI 295) 4)) 167 {*arm_movsi_insn} (nil))

(insn 383 382 384 37 arch/arm/vfp/vfp.h:134 (set (reg/v:DI 159 [ __n ])
        (ior:DI (reg:DI 295)
            (reg:DI 297 [ remh ]))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 297 [ remh ])
        (expr_list:REG_DEAD (reg:DI 295)
            (nil))))

(insn 384 383 385 37 arch/arm/vfp/vfp.h:135 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 346 [ D.6380+4 ])
            (subreg:SI (reg/v:DI 159 [ __n ]) 4))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 346 [ D.6380+4 ])
        (nil)))

(jump_insn 385 384 621 37 arch/arm/vfp/vfp.h:135 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 400)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 37 -> ( 39 38)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160 181 188 191 377
;; rd  out 	(113)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 182, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  39 [50.0%] 
;; Succ edge  38 [50.0%]  (fallthru)

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u430(11){ }u431(13){ }u432(25){ }u433(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 137 298
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 181 188 191 377
;; live  gen 	 137 298
;; live  kill	
;; rd  in  	(113)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 182, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(2)
928, 1086
;; rd  kill	(4)
927, 928, 929, 1086

;; Pred edge  37 [50.0%]  (fallthru)
(note 621 385 396 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 396 621 397 38 arch/arm/vfp/vfp.h:136 (set (reg:DI 298)
        (const_int 4294967295 [0xffffffff])) 163 {*arm_movdi} (nil))

(insn 397 396 739 38 arch/arm/vfp/vfp.h:136 (set (reg/v:DI 137 [ z.1257 ])
        (ior:DI (reg/v:DI 143 [ z.1250 ])
            (reg:DI 298))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 298)
        (expr_list:REG_DEAD (reg/v:DI 143 [ z.1250 ])
            (expr_list:REG_EQUAL (ior:DI (reg/v:DI 143 [ z.1250 ])
                    (const_int 4294967295 [0xffffffff]))
                (nil)))))

(jump_insn 739 397 740 38 (set (pc)
        (label_ref 407)) -1 (nil))
;; End of basic block 38 -> ( 40)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 377
;; rd  out 	(115)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 182, 212, 213, 928, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  40 [100.0%] 

(barrier 740 739 400)

;; Start of basic block ( 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u437(11){ }u438(13){ }u439(25){ }u440(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 24 [cc] 137 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 159 160 181 188 191 377
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 137 138
;; live  kill	 12 [ip] 14 [lr] 24 [cc]
;; rd  in  	(113)
0, 6, 24, 25, 38, 48, 52, 60, 62, 63, 73, 74, 182, 212, 213, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(7)
5, 22, 37, 51, 61, 927, 930
;; rd  kill	(87)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 927, 928, 929, 930

;; Pred edge  37 [50.0%] 
(code_label 400 740 401 39 428 "" [1 uses])

(note 401 400 402 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 402 401 403 39 arch/arm/vfp/vfp.h:138 discrim 1 (set (reg/v:SI 4 r4 [ __base ])
        (reg/v:SI 160 [ __left ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 160 [ __left ])
        (nil)))

(insn 403 402 404 39 arch/arm/vfp/vfp.h:138 discrim 1 (set (reg/v:DI 0 r0 [ __n ])
        (reg/v:DI 159 [ __n ])) 163 {*arm_movdi} (expr_list:REG_DEAD (reg/v:DI 159 [ __n ])
        (nil)))

(insn 404 403 405 39 arch/arm/vfp/vfp.h:138 discrim 1 (parallel [
            (set (reg/v:SI 1 r1 [ __rem ])
                (asm_operands:SI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 0 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779457))
            (set (reg/v:DI 2 r2 [ __res ])
                (asm_operands:DI (".ifnc %0,r1 ; .err ; .endif
	.ifnc %1,r2 ; .err ; .endif
	.ifnc %2,r0 ; .err ; .endif
	.ifnc %3,r4 ; .err ; .endif
	bl	__do_div64") ("=r") 1 [
                        (reg/v:DI 0 r0 [ __n ])
                        (reg/v:SI 4 r4 [ __base ])
                    ]
                     [
                        (asm_input:DI ("r") 0)
                        (asm_input:SI ("r") 0)
                    ] 1779457))
            (clobber (reg:QI 24 cc))
            (clobber (reg:QI 14 lr))
            (clobber (reg:QI 12 ip))
        ]) -1 (expr_list:REG_DEAD (reg/v:SI 4 r4 [ __base ])
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (expr_list:REG_UNUSED (reg:QI 14 lr)
                (expr_list:REG_UNUSED (reg:QI 12 ip)
                    (expr_list:REG_UNUSED (reg/v:SI 1 r1 [ __rem ])
                        (nil)))))))

(insn 405 404 406 39 arch/arm/vfp/vfp.h:138 discrim 1 (set (reg/v:DI 138 [ remh.1256 ])
        (reg/v:DI 2 r2 [ __res ])) 163 {*arm_movdi} (nil))

(insn 406 405 407 39 arch/arm/vfp/vfp.h:139 (set (reg/v:DI 137 [ z.1257 ])
        (ior:DI (reg/v:DI 138 [ remh.1256 ])
            (reg/v:DI 143 [ z.1250 ]))) 86 {iordi3} (expr_list:REG_DEAD (reg/v:DI 143 [ z.1250 ])
        (expr_list:REG_DEAD (reg/v:DI 138 [ remh.1256 ])
            (nil))))
;; End of basic block 39 -> ( 40)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 377
;; rd  out 	(109)
5, 22, 37, 51, 61, 63, 74, 212, 213, 927, 930, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  40 [100.0%]  (fallthru)

;; Start of basic block ( 25 39 38) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u450(11){ }u451(13){ }u452(25){ }u453(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181
;; lr  def 	 24 [cc] 144 299 300 301 302
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 181 188 191 377
;; live  gen 	 24 [cc] 144 299 300 301 302
;; live  kill	 24 [cc]
;; rd  in  	(125)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 156, 157, 182, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(6)
178, 943, 1087, 1088, 1089, 1090
;; rd  kill	(6)
942, 943, 1087, 1088, 1089, 1090

;; Pred edge  25 [100.0%] 
;; Pred edge  39 [100.0%]  (fallthru)
;; Pred edge  38 [100.0%] 
(code_label 407 406 408 40 416 "" [2 uses])

(note 408 407 409 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 409 408 410 40 arch/arm/vfp/vfpdouble.c:323 (set (reg:DI 300)
        (const_int 2 [0x2])) 163 {*arm_movdi} (nil))

(insn 410 409 411 40 arch/arm/vfp/vfpdouble.c:323 (parallel [
            (set (reg:DI 299)
                (plus:DI (reg:DI 181 [ D.4301 ])
                    (reg:DI 300)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 300)
        (expr_list:REG_DEAD (reg:DI 181 [ D.4301 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (expr_list:REG_EQUAL (plus:DI (reg:DI 181 [ D.4301 ])
                        (const_int 2 [0x2]))
                    (nil))))))

(insn 411 410 412 40 arch/arm/vfp/vfpdouble.c:323 (parallel [
            (set (reg:DI 144 [ ivtmp.1234 ])
                (plus:DI (reg:DI 299)
                    (reg/v:DI 137 [ z.1257 ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 299)
        (expr_list:REG_DEAD (reg/v:DI 137 [ z.1257 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 412 411 413 40 arch/arm/vfp/vfpdouble.c:323 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdd.significand+0 S8 A64])
        (reg:DI 144 [ ivtmp.1234 ])) 163 {*arm_movdi} (nil))

(insn 413 412 414 40 arch/arm/vfp/vfpdouble.c:330 (set (reg:DI 302)
        (const_int 1023 [0x3ff])) 163 {*arm_movdi} (nil))

(insn 414 413 415 40 arch/arm/vfp/vfpdouble.c:330 (set (reg:DI 301)
        (and:DI (reg:DI 144 [ ivtmp.1234 ])
            (reg:DI 302))) 64 {anddi3} (expr_list:REG_DEAD (reg:DI 302)
        (expr_list:REG_EQUAL (and:DI (reg:DI 144 [ ivtmp.1234 ])
                (const_int 1023 [0x3ff]))
            (nil))))

(insn 415 414 416 40 arch/arm/vfp/vfpdouble.c:330 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 301) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 416 415 627 40 arch/arm/vfp/vfpdouble.c:330 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 558)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 40 -> ( 56 41)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 301 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 301 377
;; rd  out 	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 178, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  56 [50.0%] 
;; Succ edge  41 [50.0%]  (fallthru)

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u466(11){ }u467(13){ }u468(25){ }u469(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 301 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 301
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 301 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 178, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
177
;; rd  kill	(0)


;; Pred edge  40 [50.0%]  (fallthru)
(note 627 416 419 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 419 627 420 41 arch/arm/vfp/vfpdouble.c:330 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 301) 0)
            (const_int 5 [0x5]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:DI 301)
        (nil)))

(jump_insn 420 419 628 41 arch/arm/vfp/vfpdouble.c:330 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 558)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 41 -> ( 56 42)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; rd  out 	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 177, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  56 [50.0%] 
;; Succ edge  42 [50.0%]  (fallthru)

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u472(11){ }u473(13){ }u474(25){ }u475(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 177, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
176
;; rd  kill	(0)


;; Pred edge  41 [50.0%]  (fallthru)
(note 628 420 427 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 427 628 428 42 arch/arm/vfp/vfpdouble.c:331 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 144 [ ivtmp.1234 ]) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 428 427 632 42 arch/arm/vfp/vfpdouble.c:331 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 443)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 42 -> ( 45 43)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; rd  out 	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 176, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  45 [50.0%] 
;; Succ edge  43 [50.0%]  (fallthru)

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u478(11){ }u479(13){ }u480(25){ }u481(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 176, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
175
;; rd  kill	(0)


;; Pred edge  42 [50.0%]  (fallthru)
(note 632 428 431 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 431 632 432 43 arch/arm/vfp/vfpdouble.c:331 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg:DI 144 [ ivtmp.1234 ]) 0)
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 432 431 633 43 arch/arm/vfp/vfpdouble.c:331 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 443)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 43 -> ( 45 44)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; rd  out 	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  45 [50.0%] 
;; Succ edge  44 [50.0%]  (fallthru)

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u484(11){ }u485(13){ }u486(25){ }u487(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 303
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 303
;; live  kill	
;; rd  in  	(128)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(1)
1091
;; rd  kill	(1)
1091

;; Pred edge  43 [50.0%]  (fallthru)
(note 633 432 439 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 439 633 440 44 arch/arm/vfp/vfpdouble.c:332 (set (reg:DI 303)
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(insn 440 439 741 44 arch/arm/vfp/vfpdouble.c:332 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdd.significand+0 S8 A64])
        (reg:DI 303)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 303)
        (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
            (nil))))

(jump_insn 741 440 742 44 (set (pc)
        (label_ref 558)) -1 (nil))
;; End of basic block 44 -> ( 56)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; rd  out 	(129)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137


;; Succ edge  56 [100.0%] 

(barrier 742 741 443)

;; Start of basic block ( 42 43) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u490(11){ }u491(13){ }u492(25){ }u493(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 324 377
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 377
;; lr  def 	 24 [cc] 136 149 150 151 179 304 305 373
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 377
;; live  gen 	 24 [cc] 136 149 150 151 179 304 305 373
;; live  kill	 24 [cc]
;; rd  in  	(129)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 176, 212, 213, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1133, 1137
;; rd  gen 	(9)
173, 926, 947, 948, 949, 991, 1092, 1093, 1128
;; rd  kill	(7)
926, 947, 948, 949, 1092, 1093, 1128

;; Pred edge  42 [50.0%] 
;; Pred edge  43 [50.0%] 
(code_label 443 742 444 45 432 "" [2 uses])

(note 444 443 445 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 445 444 716 45 arch/arm/vfp/vfpdouble.c:335 (set (reg:SI 304)
        (lshiftrt:SI (subreg:SI (reg:DI 377 [ __n ]) 0)
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 716 445 446 45 arch/arm/vfp/vfpdouble.c:335 (set (reg:DI 179 [ D.4317 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 446 716 447 45 arch/arm/vfp/vfpdouble.c:335 (set (subreg:SI (reg:DI 179 [ D.4317 ]) 4)
        (ashift:SI (subreg:SI (reg:DI 377 [ __n ]) 4)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 447 446 448 45 arch/arm/vfp/vfpdouble.c:335 (set (subreg:SI (reg:DI 179 [ D.4317 ]) 4)
        (ior:SI (reg:SI 304)
            (subreg:SI (reg:DI 179 [ D.4317 ]) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 304)
        (nil)))

(insn 448 447 449 45 arch/arm/vfp/vfpdouble.c:335 (set (subreg:SI (reg:DI 179 [ D.4317 ]) 0)
        (ashift:SI (subreg:SI (reg:DI 377 [ __n ]) 0)
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:DI 377 [ __n ])
        (nil)))

(insn 449 448 450 45 arch/arm/vfp/vfpdouble.c:335 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 vdm.significand+0 S8 A64])
        (reg:DI 179 [ D.4317 ])) 163 {*arm_movdi} (nil))

(insn 450 449 455 45 arch/arm/vfp/vfp.h:80 (set (reg:SI 305 [ ivtmp.1234 ])
        (subreg:SI (reg:DI 144 [ ivtmp.1234 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 455 450 459 45 arch/arm/vfp/vfp.h:80 (set (reg/v:DI 151 [ rl ])
        (mult:DI (zero_extend:DI (reg:SI 305 [ ivtmp.1234 ]))
            (zero_extend:DI (reg:SI 305 [ ivtmp.1234 ])))) 51 {*umulsidi3_v6} (nil))

(insn 459 455 466 45 arch/arm/vfp/vfp.h:83 (set (reg:SI 373)
        (subreg:SI (reg:DI 144 [ ivtmp.1234 ]) 4)) 167 {*arm_movsi_insn} (nil))

(insn 466 459 470 45 arch/arm/vfp/vfp.h:83 (set (reg/v:DI 150 [ rma ])
        (mult:DI (zero_extend:DI (reg:SI 373))
            (zero_extend:DI (reg:SI 305 [ ivtmp.1234 ])))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 305 [ ivtmp.1234 ])
        (nil)))

(insn 470 466 474 45 arch/arm/vfp/vfp.h:87 (parallel [
            (set (reg/v:DI 136 [ rma.1258 ])
                (plus:DI (reg/v:DI 150 [ rma ])
                    (reg/v:DI 150 [ rma ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 474 470 478 45 arch/arm/vfp/vfp.h:89 (set (reg/v:DI 149 [ rh ])
        (mult:DI (zero_extend:DI (reg:SI 373))
            (zero_extend:DI (reg:SI 373)))) 51 {*umulsidi3_v6} (expr_list:REG_DEAD (reg:SI 373)
        (nil)))

(insn 478 474 479 45 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 150 [ rma ]) 4)
            (subreg:SI (reg/v:DI 136 [ rma.1258 ]) 4))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 479 478 636 45 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 493)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 45 -> ( 49 46)
;; lr  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191
;; rd  out 	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137


;; Succ edge  49 [50.0%] 
;; Succ edge  46 [50.0%]  (fallthru)

;; Start of basic block ( 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u517(11){ }u518(13){ }u519(25){ }u520(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 24 [cc] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191
;; live  gen 	
;; live  kill	
;; rd  in  	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  45 [50.0%]  (fallthru)
(note 636 479 481 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(jump_insn 481 636 637 46 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 664)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 46 -> ( 48 47)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191
;; rd  out 	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137


;; Succ edge  48 [71.0%] 
;; Succ edge  47 [29.0%]  (fallthru)

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u522(11){ }u523(13){ }u524(25){ }u525(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 150
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 150 151 179 188 191
;; live  gen 	 24 [cc]
;; live  kill	
;; rd  in  	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(1)
172
;; rd  kill	(0)


;; Pred edge  46 [29.0%]  (fallthru)
(note 637 481 482 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 482 637 483 47 arch/arm/vfp/vfp.h:90 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 150 [ rma ]) 0)
            (subreg:SI (reg/v:DI 136 [ rma.1258 ]) 0))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:DI 150 [ rma ])
        (nil)))

(jump_insn 483 482 664 47 arch/arm/vfp/vfp.h:90 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 493)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 47 -> ( 49 48)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191
;; rd  out 	(136)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137


;; Succ edge  49 [50.0%] 
;; Succ edge  48 [50.0%]  (fallthru)

;; Start of basic block ( 47 46) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u529(11){ }u530(13){ }u531(25){ }u532(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191
;; live  gen 	 147
;; live  kill	
;; rd  in  	(137)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(1)
945
;; rd  kill	(2)
944, 945

;; Pred edge  47 [50.0%]  (fallthru)
;; Pred edge  46 [71.0%] 
(code_label 664 483 489 48 452 "" [1 uses])

(note 489 664 490 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 490 489 743 48 arch/arm/vfp/vfp.h:90 discrim 2 (set (reg:DI 147 [ iftmp.83 ])
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(jump_insn 743 490 744 48 (set (pc)
        (label_ref 496)) -1 (nil))
;; End of basic block 48 -> ( 50)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191
;; rd  out 	(138)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 945, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137


;; Succ edge  50 [100.0%] 

(barrier 744 743 493)

;; Start of basic block ( 45 47) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u533(11){ }u534(13){ }u535(25){ }u536(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 149 151 179 188 191
;; live  gen 	 147
;; live  kill	
;; rd  in  	(137)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(1)
944
;; rd  kill	(2)
944, 945

;; Pred edge  45 [50.0%] 
;; Pred edge  47 [50.0%] 
(code_label 493 744 494 49 434 "" [2 uses])

(note 494 493 495 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 495 494 496 49 arch/arm/vfp/vfp.h:90 discrim 1 (set (reg:DI 147 [ iftmp.83 ])
        (const_int 4294967296 [0x100000000])) 163 {*arm_movdi} (nil))
;; End of basic block 49 -> ( 50)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191 324
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191
;; rd  out 	(138)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 944, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137


;; Succ edge  50 [100.0%]  (fallthru)

;; Start of basic block ( 49 48) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u537(11){ }u538(13){ }u539(25){ }u540(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191 324
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 147 149 151 179
;; lr  def 	 24 [cc] 133 134 135 148 174 175 316 317 318 319 379 380 381
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 144 147 149 151 179 188 191
;; live  gen 	 24 [cc] 133 134 135 148 174 175 316 317 318 319 379 380 381
;; live  kill	 24 [cc]
;; rd  in  	(139)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 172, 173, 212, 213, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 944, 945, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1137
;; rd  gen 	(13)
921, 924, 925, 946, 977, 979, 1095, 1097, 1098, 1099, 1134, 1135, 1136
;; rd  kill	(13)
921, 925, 946, 976, 977, 978, 979, 1097, 1098, 1099, 1134, 1135, 1136

;; Pred edge  49 [100.0%]  (fallthru)
;; Pred edge  48 [100.0%] 
(code_label 496 495 497 50 436 "" [1 uses])

(note 497 496 717 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 717 497 498 50 arch/arm/vfp/vfp.h:92 (set (reg/v:DI 134 [ rma.1260 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 498 717 499 50 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 134 [ rma.1260 ]) 4)
        (subreg:SI (reg/v:DI 136 [ rma.1258 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 499 498 500 50 arch/arm/vfp/vfp.h:92 (set (subreg:SI (reg/v:DI 134 [ rma.1260 ]) 0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 500 499 718 50 arch/arm/vfp/vfp.h:93 (parallel [
            (set (reg/v:DI 133 [ rl.1261 ])
                (plus:DI (reg/v:DI 134 [ rma.1260 ])
                    (reg/v:DI 151 [ rl ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg/v:DI 151 [ rl ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 718 500 501 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 316 [ rma.1260 ])
        (const_int 0 [0x0])) -1 (nil))

(insn 501 718 502 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 316 [ rma.1260 ]) 0)
        (subreg:SI (reg/v:DI 136 [ rma.1258 ]) 4)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:DI 136 [ rma.1258 ])
        (nil)))

(insn 502 501 503 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (subreg:SI (reg:DI 316 [ rma.1260 ]) 4)
        (subreg:SI (reg/v:DI 134 [ rma.1260 ]) 0)) 167 {*arm_movsi_insn} (nil))

(insn 503 502 698 50 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg:DI 148 [ D.6403 ])
                (plus:DI (reg:DI 316 [ rma.1260 ])
                    (reg/v:DI 149 [ rh ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 316 [ rma.1260 ])
        (expr_list:REG_DEAD (reg/v:DI 149 [ rh ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 698 503 699 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 134 [ rma.1260 ]) 4)
            (subreg:SI (reg/v:DI 133 [ rl.1261 ]) 4))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:DI 134 [ rma.1260 ])
        (nil)))

(insn 699 698 700 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:SI 379)
        (gtu:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 700 699 518 50 arch/arm/vfp/vfp.h:90 discrim 3 (set (reg:DI 317)
        (zero_extend:DI (reg:SI 379))) 138 {*arm_zero_extendsidi2} (expr_list:REG_DEAD (reg:SI 379)
        (nil)))

(insn 518 700 519 50 arch/arm/vfp/vfp.h:90 discrim 3 (parallel [
            (set (reg/v:DI 135 [ rh.1259 ])
                (plus:DI (reg:DI 148 [ D.6403 ])
                    (reg:DI 317)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 317)
        (expr_list:REG_DEAD (reg:DI 148 [ D.6403 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 519 518 520 50 arch/arm/vfp/vfp.h:62 (set (reg:DI 318)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 520 519 521 50 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg:DI 319)
                (plus:DI (reg/v:DI 135 [ rh.1259 ])
                    (reg:DI 147 [ iftmp.83 ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 147 [ iftmp.83 ])
        (expr_list:REG_DEAD (reg/v:DI 135 [ rh.1259 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 521 520 533 50 arch/arm/vfp/vfp.h:62 (parallel [
            (set (reg/v:DI 174 [ reml ])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 0 [
                        (reg:DI 318)
                        (reg:DI 179 [ D.4317 ])
                        (reg/v:DI 133 [ rl.1261 ])
                        (reg:DI 319)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (set (reg/v:DI 175 [ remh ])
                (asm_operands:DI ("subs	%Q0, %Q2, %Q4
	sbcs	%R0, %R2, %R4
	sbcs	%Q1, %Q3, %Q5
	sbc	%R1, %R3, %R5
	") ("=r") 1 [
                        (reg:DI 318)
                        (reg:DI 179 [ D.4317 ])
                        (reg/v:DI 133 [ rl.1261 ])
                        (reg:DI 319)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1589763))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:DI 319)
        (expr_list:REG_DEAD (reg:DI 318)
            (expr_list:REG_DEAD (reg:DI 179 [ D.4317 ])
                (expr_list:REG_DEAD (reg/v:DI 133 [ rl.1261 ])
                    (expr_list:REG_UNUSED (reg:QI 24 cc)
                        (nil)))))))

(insn 533 521 526 50 arch/arm/vfp/vfp.h:49 (set (reg:DI 380)
        (const_int -1 [0xffffffffffffffff])) 163 {*arm_movdi} (nil))

(insn 526 533 745 50 arch/arm/vfp/vfp.h:49 (set (reg:DI 381)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(jump_insn 745 526 746 50 arch/arm/vfp/vfpdouble.c:338 (set (pc)
        (label_ref 531)) -1 (nil))
;; End of basic block 50 -> ( 52)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 380 381
;; rd  out 	(150)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 977, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  52 [100.0%] 

(barrier 746 745 535)

;; Start of basic block ( 52) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u564(11){ }u565(13){ }u566(25){ }u567(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 324 381
;; lr  def 	 24 [cc] 174 175 320 321
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  gen 	 174 175 320 321 324
;; live  kill	 24 [cc]
;; rd  in  	(156)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 164, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(5)
976, 978, 1100, 1101, 1102
;; rd  kill	(6)
976, 977, 978, 979, 1100, 1101

;; Pred edge  52 [21.0%] 
(code_label 535 746 524 51 440 "" [1 uses])

(note 524 535 525 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 525 524 527 51 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg:DI 320)
                (plus:DI (reg:DI 144 [ ivtmp.1234 ])
                    (reg:DI 144 [ ivtmp.1234 ])))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 527 525 528 51 arch/arm/vfp/vfp.h:49 (set (reg:DI 321)
        (ior:DI (reg:DI 320)
            (reg:DI 381))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 320)
        (expr_list:REG_EQUAL (ior:DI (reg:DI 320)
                (const_int 1 [0x1]))
            (nil))))

(insn 528 527 529 51 arch/arm/vfp/vfp.h:49 (set (subreg:SI (reg:DI 324) 0)
        (lshiftrt:SI (subreg:SI (reg:DI 144 [ ivtmp.1234 ]) 4)
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 529 528 530 51 arch/arm/vfp/vfp.h:49 (set (subreg:SI (reg:DI 324) 4)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 530 529 531 51 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg/v:DI 174 [ reml ])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 0 [
                        (reg/v:DI 174 [ reml ])
                        (reg/v:DI 175 [ remh ])
                        (reg:DI 321)
                        (reg:DI 324)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (set (reg/v:DI 175 [ remh ])
                (asm_operands:DI ("adds	%Q0, %Q2, %Q4
	adcs	%R0, %R2, %R4
	adcs	%Q1, %Q3, %Q5
	adc	%R1, %R3, %R5") ("=r") 1 [
                        (reg/v:DI 174 [ reml ])
                        (reg/v:DI 175 [ remh ])
                        (reg:DI 321)
                        (reg:DI 324)
                    ]
                     [
                        (asm_input:DI ("0") 0)
                        (asm_input:DI ("1") 0)
                        (asm_input:DI ("r") 0)
                        (asm_input:DI ("r") 0)
                    ] 1588099))
            (clobber (reg:QI 24 cc))
        ]) -1 (expr_list:REG_DEAD (reg:DI 321)
        (expr_list:REG_UNUSED (reg:QI 24 cc)
            (nil))))
;; End of basic block 51 -> ( 52)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; rd  out 	(153)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 978, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  52 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 51 50) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u580(11){ }u581(13){ }u582(25){ }u583(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 175 380
;; lr  def 	 24 [cc] 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  gen 	 24 [cc] 144
;; live  kill	 24 [cc]
;; rd  in  	(156)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(2)
164, 942
;; rd  kill	(2)
942, 943

;; Pred edge  51 [100.0%]  (fallthru,dfs_back)
;; Pred edge  50 [100.0%] 
(code_label 531 530 532 52 439 "" [1 uses])

(note 532 531 534 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 534 532 536 52 arch/arm/vfp/vfp.h:49 (parallel [
            (set (reg:DI 144 [ ivtmp.1234 ])
                (plus:DI (reg:DI 144 [ ivtmp.1234 ])
                    (reg:DI 380)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (expr_list:REG_EQUAL (plus:DI (reg:DI 144 [ ivtmp.1234 ])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))

(insn 536 534 537 52 arch/arm/vfp/vfpdouble.c:338 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (subreg:SI (reg/v:DI 175 [ remh ]) 4)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 537 536 647 52 arch/arm/vfp/vfpdouble.c:338 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 535)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2100 [0x834])
            (nil))))
;; End of basic block 52 -> ( 51 53)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191 324 380 381
;; rd  out 	(156)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 164, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  51 [21.0%] 
;; Succ edge  53 [79.0%]  (fallthru,loop_exit)

;; Start of basic block ( 52) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u589(11){ }u590(13){ }u591(25){ }u592(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 174 175
;; lr  def 	 24 [cc] 326 327 328
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 174 175 188 191
;; live  gen 	 24 [cc] 326 327 328
;; live  kill	
;; rd  in  	(156)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 164, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(4)
163, 1105, 1106, 1107
;; rd  kill	(5)
1104, 1105, 1106, 1107, 1108

;; Pred edge  52 [79.0%]  (fallthru,loop_exit)
(note 647 537 546 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 546 647 547 53 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 326)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 547 546 548 53 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 327)
        (ior:DI (reg/v:DI 175 [ remh ])
            (reg/v:DI 174 [ reml ]))) 86 {iordi3} (expr_list:REG_DEAD (reg/v:DI 175 [ remh ])
        (expr_list:REG_DEAD (reg/v:DI 174 [ reml ])
            (nil))))

(insn 548 547 549 53 arch/arm/vfp/vfpdouble.c:344 (set (reg:SI 328)
        (subreg:SI (reg:DI 327) 0)) 167 {*arm_movsi_insn} (nil))

(insn 549 548 550 53 arch/arm/vfp/vfpdouble.c:344 (set (reg:SI 328)
        (ior:SI (reg:SI 328)
            (subreg:SI (reg:DI 327) 4))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:DI 327)
        (nil)))

(insn 550 549 551 53 arch/arm/vfp/vfpdouble.c:344 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 328)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 328)
        (nil)))

(jump_insn 551 550 651 53 arch/arm/vfp/vfpdouble.c:344 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 553)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 53 -> ( 55 54)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; rd  out 	(159)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 163, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1105, 1106, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  55 [50.0%] 
;; Succ edge  54 [50.0%]  (fallthru)

;; Start of basic block ( 53) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u600(11){ }u601(13){ }u602(25){ }u603(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 326
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191
;; live  gen 	 326
;; live  kill	
;; rd  in  	(159)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 163, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1105, 1106, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(1)
1104
;; rd  kill	(2)
1104, 1105

;; Pred edge  53 [50.0%]  (fallthru)
(note 651 551 552 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn 552 651 553 54 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 326)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 54 -> ( 55)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; rd  out 	(159)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 163, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1106, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  55 [100.0%]  (fallthru)

;; Start of basic block ( 53 54) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u604(11){ }u605(13){ }u606(25){ }u607(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 326
;; lr  def 	 24 [cc] 329 330 331
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 188 191 326
;; live  gen 	 329 330 331
;; live  kill	 24 [cc]
;; rd  in  	(160)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 163, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(3)
1109, 1110, 1111
;; rd  kill	(3)
1109, 1110, 1111

;; Pred edge  53 [50.0%] 
;; Pred edge  54 [100.0%]  (fallthru)
(code_label 553 552 652 55 442 "" [1 uses])

(note 652 553 554 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 554 652 555 55 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 330)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 555 554 556 55 arch/arm/vfp/vfpdouble.c:344 (parallel [
            (set (reg:DI 329)
                (plus:DI (reg:DI 144 [ ivtmp.1234 ])
                    (reg:DI 330)))
            (clobber (reg:CC 24 cc))
        ]) 1 {*arm_adddi3} (expr_list:REG_DEAD (reg:DI 330)
        (expr_list:REG_DEAD (reg:DI 144 [ ivtmp.1234 ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (expr_list:REG_EQUAL (plus:DI (reg:DI 144 [ ivtmp.1234 ])
                        (const_int 1 [0x1]))
                    (nil))))))

(insn 556 555 557 55 arch/arm/vfp/vfpdouble.c:344 (set (reg:DI 331)
        (ior:DI (reg:DI 326)
            (reg:DI 329))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 329)
        (expr_list:REG_DEAD (reg:DI 326)
            (nil))))

(insn 557 556 558 55 arch/arm/vfp/vfpdouble.c:344 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdd.significand+0 S8 A64])
        (reg:DI 331)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 331)
        (nil)))
;; End of basic block 55 -> ( 56)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; rd  out 	(162)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  56 [100.0%]  (fallthru)

;; Start of basic block ( 55 41 40 44) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u615(11){ }u616(13){ }u617(25){ }u618(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 180 332 376
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 188 191
;; live  gen 	 24 [cc] 180 332 376
;; live  kill	
;; rd  in  	(167)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 175, 177, 178, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(4)
158, 994, 1113, 1129
;; rd  kill	(4)
994, 1112, 1113, 1129

;; Pred edge  55 [100.0%]  (fallthru)
;; Pred edge  41 [50.0%] 
;; Pred edge  40 [50.0%] 
;; Pred edge  44 [100.0%] 
(code_label 558 557 559 56 430 "" [3 uses])

(note 559 558 560 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(insn 560 559 561 56 arch/arm/vfp/vfpdouble.c:347 (set (reg:DI 180 [ D.4307 ])
        (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdd.significand+0 S8 A64])) 163 {*arm_movdi} (nil))

(insn 561 560 562 56 arch/arm/vfp/vfpdouble.c:347 (set (reg:DI 332)
        (const_int 0 [0x0])) 163 {*arm_movdi} (nil))

(insn 562 561 566 56 arch/arm/vfp/vfpdouble.c:347 (set (reg:SI 376 [+4 ])
        (ashift:SI (subreg:SI (reg:DI 180 [ D.4307 ]) 0)
            (const_int 31 [0x1f]))) 117 {*arm_shiftsi3} (nil))

(insn 566 562 567 56 arch/arm/vfp/vfpdouble.c:347 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 376 [+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 376 [+4 ])
        (nil)))

(jump_insn 567 566 653 56 arch/arm/vfp/vfpdouble.c:347 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 569)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 56 -> ( 58 57)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; rd  out 	(168)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  58 [50.0%] 
;; Succ edge  57 [50.0%]  (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u623(11){ }u624(13){ }u625(25){ }u626(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 332
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191
;; live  gen 	 332
;; live  kill	
;; rd  in  	(168)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(1)
1112
;; rd  kill	(2)
1112, 1113

;; Pred edge  56 [50.0%]  (fallthru)
(note 653 567 568 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn 568 653 569 57 arch/arm/vfp/vfpdouble.c:347 (set (reg:DI 332)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))
;; End of basic block 57 -> ( 58)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; rd  out 	(168)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  58 [100.0%]  (fallthru)

;; Start of basic block ( 56 57) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u627(11){ }u628(13){ }u629(25){ }u630(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 184 336 337 338 339
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 180 188 191 332
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 184 336 337 338 339
;; live  kill	 14 [lr] 24 [cc]
;; rd  in  	(169)
0, 5, 6, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(6)
3, 1001, 1114, 1115, 1116, 1117
;; rd  kill	(34)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 1001, 1002, 1114, 1115, 1116, 1117

;; Pred edge  56 [50.0%] 
;; Pred edge  57 [100.0%]  (fallthru)
(code_label 569 568 654 58 443 "" [1 uses])

(note 654 569 570 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(insn 570 654 571 58 arch/arm/vfp/vfpdouble.c:347 (parallel [
            (set (reg:DI 336)
                (lshiftrt:DI (reg:DI 180 [ D.4307 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 114 {arm_lshrdi3_1bit} (expr_list:REG_DEAD (reg:DI 180 [ D.4307 ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 571 570 572 58 arch/arm/vfp/vfpdouble.c:347 (set (reg:DI 337)
        (ior:DI (reg:DI 332)
            (reg:DI 336))) 86 {iordi3} (expr_list:REG_DEAD (reg:DI 336)
        (expr_list:REG_DEAD (reg:DI 332)
            (nil))))

(insn 572 571 573 58 arch/arm/vfp/vfpdouble.c:347 (set (mem/s/j/c:DI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 vdd.significand+0 S8 A64])
        (reg:DI 337)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 337)
        (nil)))

(insn 573 572 574 58 arch/arm/vfp/vfpdouble.c:349 (set (reg/f:SI 338)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -32 [0xffffffffffffffe0]))) 4 {*arm_addsi3} (nil))

(insn 574 573 575 58 arch/arm/vfp/vfpdouble.c:349 (set (reg/f:SI 339)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x10eedd20>)) 167 {*arm_movsi_insn} (nil))

(insn 575 574 576 58 arch/arm/vfp/vfpdouble.c:349 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 339)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 339)
        (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x10eedd20>)
            (nil))))

(insn 576 575 577 58 arch/arm/vfp/vfpdouble.c:349 (set (reg:SI 0 r0)
        (reg/v:SI 188 [ dd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 188 [ dd ])
        (nil)))

(insn 577 576 578 58 arch/arm/vfp/vfpdouble.c:349 (set (reg:SI 1 r1)
        (reg/f:SI 338)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 338)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
                (const_int -32 [0xffffffffffffffe0]))
            (nil))))

(insn 578 577 579 58 arch/arm/vfp/vfpdouble.c:349 (set (reg:SI 2 r2)
        (reg/v:SI 191 [ fpscr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 191 [ fpscr ])
        (nil)))

(insn 579 578 580 58 arch/arm/vfp/vfpdouble.c:349 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 580 579 581 58 arch/arm/vfp/vfpdouble.c:349 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("vfp_double_normaliseround") [flags 0x3] <function_decl 0x10a9da00 vfp_double_normaliseround>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 581 580 582 58 arch/arm/vfp/vfpdouble.c:349 (set (reg:SI 184 [ D.4281 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 58 -> ( 59)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 184
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; rd  out 	(172)
3, 22, 24, 25, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 983, 984, 985, 986, 991, 994, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  59 [100.0%]  (fallthru)

;; Start of basic block ( 58 17) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u649(11){ }u650(13){ }u651(25){ }u652(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 184
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 184
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(200)
3, 13, 15, 22, 24, 25, 33, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 195, 198, 202, 204, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137
;; rd  gen 	(1)
1
;; rd  kill	(18)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17

;; Pred edge  58 [100.0%]  (fallthru)
;; Pred edge  17 [100.0%] 
(code_label 582 581 583 59 411 "" [1 uses])

(note 583 582 588 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn 588 583 594 59 arch/arm/vfp/vfpdouble.c:350 (set (reg/i:SI 0 r0)
        (reg:SI 184 [ D.4281 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 184 [ D.4281 ])
        (nil)))

(insn 594 588 0 59 arch/arm/vfp/vfpdouble.c:350 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 59 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(198)
1, 22, 24, 25, 33, 37, 38, 48, 51, 52, 60, 61, 62, 63, 73, 74, 158, 195, 198, 202, 204, 212, 213, 921, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns
